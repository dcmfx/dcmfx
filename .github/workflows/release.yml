name: Release

on:
  push:
    branches:
      - main

permissions:
  checks: read
  contents: write
  issues: write

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  check_semantic_release:
    name: Check semantic release
    timeout-minutes: 10
    runs-on: ubuntu-24.04

    outputs:
      new_release_published: ${{ steps.semantic-release.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic-release.outputs.new_release_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.11

      - name: Semantic release dry run
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true
          extra_plugins: conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for tests to complete
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          check-regexp: Test

  build:
    name: Build
    timeout-minutes: 10

    needs: check_semantic_release
    if: needs.check_semantic_release.outputs.new_release_published == 'true'

    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-musl
          - x86_64-unknown-linux-musl
          - aarch64-apple-darwin
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - runs-on: ubuntu-24.04
            target: aarch64-unknown-linux-musl
            use-cross: true
          - runs-on: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            use-cross: true
          - runs-on: macos-14
            target: aarch64-apple-darwin
            use-cross: false
          - runs-on: macos-13
            target: x86_64-apple-darwin
            use-cross: false
          - runs-on: windows-2022
            target: x86_64-pc-windows-msvc
            use-cross: false

    runs-on: ${{ matrix.runs-on }}

    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.82.0
          target: ${{ matrix.target }}

      - name: Enable Rust dependency caching
        uses: Swatinem/rust-cache@v2
        with:
          key: v1-${{ matrix.target }}
          workspaces: rust

      - name: Set version number in Cargo.toml files
        working-directory: src/rust
        shell: bash
        run: sed -i'' -E "s/^version = \"0.0.0\"/version = \"${{ needs.check_semantic_release.outputs.new_release_version }}\"/" dcmfx/Cargo.toml dcmfx_cli/Cargo.toml

      - name: Build release binary
        uses: clechasseur/rs-cargo@v2
        with:
          working-directory: src/rust
          command: build
          args: --release --target ${{ matrix.target }} --package dcmfx_cli
          use-cross: ${{ matrix.use-cross }}

      - name: Package
        shell: bash
        run: |
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-msvc" ]; then
            BINARY_SUFFIX=".exe"
          else
            BINARY_SUFFIX=""
          fi

          ARCHIVE="dcmfx-cli-v${{ needs.check_semantic_release.outputs.new_release_version }}-${{ matrix.target }}.tar.gz"
          cp src/rust/target/${{ matrix.target }}/release/dcmfx_cli$BINARY_SUFFIX dcmfx$BINARY_SUFFIX
          tar -czvf "$ARCHIVE" dcmfx$BINARY_SUFFIX

          openssl dgst -r -sha256 -out "$ARCHIVE".sha256 "$ARCHIVE"
          echo "ARCHIVE=$ARCHIVE" >> $GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dcmfx-cli-${{ matrix.target }}
          path: |
            ${{ env.ARCHIVE }}
            ${{ env.ARCHIVE }}.sha256
          if-no-files-found: error
          retention-days: 1

  release:
    name: Release
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Semantic release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_homebrew_tap:
    name: Update Homebrew tap
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    needs:
      - check_semantic_release
      - release
    environment: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: dcmfx/homebrew-tap
          token: ${{ secrets.DCMFX_CI_GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Update formula
        run: |
          VERSION=${{ needs.check_semantic_release.outputs.new_release_version }}

          read -r AARCH64_UNKNOWN_LINUX_MUSL_SHA < <(awk '{print $1; exit}' dcmfx-cli-aarch64-unknown-linux-musl/dcmfx-cli-v$VERSION-aarch64-unknown-linux-musl.tar.gz.sha256)
          read -r X86_64_UNKNOWN_LINUX_MUSL_SHA < <(awk '{print $1; exit}' dcmfx-cli-x86_64-unknown-linux-musl/dcmfx-cli-v$VERSION-x86_64-unknown-linux-musl.tar.gz.sha256)
          read -r AARCH64_APPLE_DARWIN_SHA < <(awk '{print $1; exit}' dcmfx-cli-aarch64-apple-darwin/dcmfx-cli-v$VERSION-aarch64-apple-darwin.tar.gz.sha256)
          read -r X86_64_APPLE_DARWIN_SHA < <(awk '{print $1; exit}' dcmfx-cli-x86_64-apple-darwin/dcmfx-cli-v$VERSION-x86_64-apple-darwin.tar.gz.sha256)

          sed \
            -i \
            -e 's/VERSION = ".*"/VERSION = "'"$VERSION"'"/' \
            -e 's/"aarch64-unknown-linux-musl" => ".*"/"aarch64-unknown-linux-musl" => "'"$AARCH64_UNKNOWN_LINUX_MUSL_SHA"'"/' \
            -e 's/"x86_64-unknown-linux-musl" => ".*"/"x86_64-unknown-linux-musl" => "'"$X86_64_UNKNOWN_LINUX_MUSL_SHA"'"/' \
            -e 's/"aarch64-apple-darwin" => ".*"/"aarch64-apple-darwin" => "'"$AARCH64_APPLE_DARWIN_SHA"'"/' \
            -e 's/"x86_64-apple-darwin" => ".*"/"x86_64-apple-darwin" => "'"$X86_64_APPLE_DARWIN_SHA"'"/' \
            Formula/dcmfx.rb

          cat Formula/dcmfx.rb

      - name: Commit and push changes to Homebrew tap
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/dcmfx.rb
          git commit -m "chore: release v${{ needs.check_semantic_release.outputs.new_release_version }}"
          git push

  release_docs:
    name: Release docs
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    environment: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: dcmfx

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.11

      - name: Install dependencies
        uses: bahmutov/npm-install@v1
        with:
          working-directory: dcmfx/docs

      - name: Build with VitePress
        working-directory: dcmfx/docs
        run: npm run docs:build

      - name: Checkout dcmfx.github.io
        uses: actions/checkout@v4
        with:
          repository: dcmfx/dcmfx.github.io
          path: dcmfx.github.io
          token: ${{ secrets.DCMFX_CI_GITHUB_TOKEN }}

      - name: Push docs to dcmfx.github.io repository
        working-directory: dcmfx.github.io
        run: |
          rm -rf *.html *.json images
          cp -r ../dcmfx/docs/.vitepress/dist/* .

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add .
          git commit -m "chore: update docs"
          git push
