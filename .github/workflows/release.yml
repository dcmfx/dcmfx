name: Release

on: workflow_dispatch

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  check_semantic_release:
    name: Check semantic release
    timeout-minutes: 30
    runs-on: ubuntu-24.04

    permissions:
      contents: write

    outputs:
      new_release_published: ${{ steps.semantic-release.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic-release.outputs.new_release_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.20

      - name: Semantic release dry run
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true
          extra_plugins: conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for tests to complete
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          check-regexp: Test

  build_rust_cli_tool:
    name: Build Rust CLI tool
    timeout-minutes: 30

    needs: check_semantic_release
    if: needs.check_semantic_release.outputs.new_release_published == 'true'

    strategy:
      matrix:
        rust-target:
          - aarch64-apple-darwin
          - aarch64-unknown-linux-musl
          - x86_64-pc-windows-msvc
          - x86_64-unknown-linux-musl
        include:
          - rust-target: aarch64-apple-darwin
            toolchain: aarch64-apple-darwin
            runs-on: macos-14
          - rust-target: aarch64-unknown-linux-musl
            toolchain: x86_64-unknown-linux-gnu
            musl-target: aarch64-linux-musl
            runs-on: ubuntu-24.04
          - rust-target: x86_64-pc-windows-msvc
            toolchain: x86_64-pc-windows-msvc
            runs-on: windows-2025
          - rust-target: x86_64-unknown-linux-musl
            toolchain: x86_64-unknown-linux-gnu
            musl-target: x86_64-linux-musl
            runs-on: ubuntu-24.04

    runs-on: ${{ matrix.runs-on }}

    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: "1.90-${{ matrix.toolchain }}"
          cache-workspaces: src/rust
          target: ${{ matrix.rust-target }}

      - name: Setup musl toolchain (Linux)
        if: matrix.rust-target == 'aarch64-unknown-linux-musl' || matrix.rust-target == 'x86_64-unknown-linux-musl'
        run: |
          # Download and install the musl toolchain into /opt/musl-cross
          wget -q https://dcmfx.s3.ap-southeast-2.amazonaws.com/${{ matrix.musl-target }}-cross.tgz
          tar -xzf ${{ matrix.musl-target }}-cross.tgz
          mv ${{ matrix.musl-target }}-cross /opt/musl-cross
          echo "/opt/musl-cross/bin" >> $GITHUB_PATH

          # Create musl-* symlinks for the toolchain
          ln -s /opt/musl-cross/bin/${{ matrix.musl-target }}-ar /opt/musl-cross/bin/musl-ar
          ln -s /opt/musl-cross/bin/${{ matrix.musl-target }}-g++ /opt/musl-cross/bin/musl-g++
          ln -s /opt/musl-cross/bin/${{ matrix.musl-target }}-gcc /opt/musl-cross/bin/musl-gcc
          ln -s /opt/musl-cross/bin/${{ matrix.musl-target }}-ld /opt/musl-cross/bin/musl-ld
          ln -s /opt/musl-cross/bin/${{ matrix.musl-target }}-nm /opt/musl-cross/bin/musl-nm
          ln -s /opt/musl-cross/bin/${{ matrix.musl-target }}-ranlib /opt/musl-cross/bin/musl-ranlib
          ln -s /opt/musl-cross/bin/${{ matrix.musl-target }}-strings /opt/musl-cross/bin/musl-strings
          ln -s /opt/musl-cross/bin/${{ matrix.musl-target }}-strip /opt/musl-cross/bin/musl-strip

          # Override Cargo linker for the cross-compilation target
          RUST_TARGET=${{ matrix.rust-target }}
          RUST_TARGET="${RUST_TARGET//-/_}"
          RUST_TARGET="${RUST_TARGET^^}"
          echo "CARGO_TARGET_${RUST_TARGET}_LINKER=musl-ld" >> $GITHUB_ENV

      - name: Fetch dependencies
        working-directory: src/rust
        run: cargo fetch --locked --target ${{ matrix.rust-target }}

      - name: Set crate versions
        uses: ./.github/actions/set_rust_crate_versions
        with:
          version: ${{ needs.check_semantic_release.outputs.new_release_version }}

      - name: Enable LTO for release builds
        working-directory: src/rust
        run: printf '\n[profile.release]\nlto = true\n' >> Cargo.toml

      - name: Build release binary
        working-directory: src/rust
        run: cargo build --release --offline --target ${{ matrix.rust-target }} --package dcmfx_cli

      - name: Package
        shell: bash
        run: |
          if [ "${{ matrix.rust-target }}" = "x86_64-pc-windows-msvc" ]; then
            ARCHIVE="dcmfx-v${{ needs.check_semantic_release.outputs.new_release_version }}-${{ matrix.rust-target }}.zip"
            cp src/rust/target/${{ matrix.rust-target }}/release/dcmfx_cli$BINARY_SUFFIX dcmfx.exe
            choco install zip -y --no-progress
            zip "$ARCHIVE" dcmfx.exe
          else
            ARCHIVE="dcmfx-v${{ needs.check_semantic_release.outputs.new_release_version }}-${{ matrix.rust-target }}.tar.gz"
            cp src/rust/target/${{ matrix.rust-target }}/release/dcmfx_cli$BINARY_SUFFIX dcmfx
            tar -czvf "$ARCHIVE" dcmfx
          fi

          openssl dgst -r -sha256 -out "$ARCHIVE".sha256 "$ARCHIVE"
          echo "ARCHIVE=$ARCHIVE" >> $GITHUB_ENV

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dcmfx-${{ matrix.rust-target }}
          path: |
            ${{ env.ARCHIVE }}
            ${{ env.ARCHIVE }}.sha256
          if-no-files-found: error
          retention-days: 1

  build_linux_packages:
    name: Build Linux packages
    timeout-minutes: 10

    needs:
      - check_semantic_release
      - build_rust_cli_tool

    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-musl
          - x86_64-unknown-linux-musl
        include:
          - target: aarch64-unknown-linux-musl
            deb-arch: arm64
            rpm-arch: aarch64
            runs-on: ubuntu-24.04-arm
          - target: x86_64-unknown-linux-musl
            deb-arch: amd64
            rpm-arch: x86_64
            runs-on: ubuntu-24.04

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dcmfx-${{ matrix.target }}

      - name: Extract binary
        run: tar xzf dcmfx-v${{ needs.check_semantic_release.outputs.new_release_version }}-${{ matrix.target }}.tar.gz

      - name: Create .deb package structure
        run: |
          mkdir -p package/DEBIAN
          mkdir -p package/usr/bin

          echo "
          Package:      dcmfx
          Version:      ${{ needs.check_semantic_release.outputs.new_release_version }}
          Architecture: ${{ matrix.deb-arch }}
          Section:      utils
          Maintainer:   Richard Viney <richard.viney@gmail.com>
          Description:  CLI tool for working with DICOM and DICOM JSON
          Homepage:     https://dcmfx.github.io
          " > package/DEBIAN/control

          cp dcmfx package/usr/bin

      - name: Build .deb package
        run: |
          DEB_PACKAGE="dcmfx_${{ needs.check_semantic_release.outputs.new_release_version }}_${{ matrix.deb-arch }}.deb"

          dpkg-deb --build package $DEB_PACKAGE
          openssl dgst -r -sha256 -out "$DEB_PACKAGE".sha256 "$DEB_PACKAGE"

          echo "DEB_PACKAGE=$DEB_PACKAGE" >> $GITHUB_ENV

      - name: Create .rpm spec
        run: |
          echo "
          Name:     dcmfx
          Version:  ${{ needs.check_semantic_release.outputs.new_release_version }}
          Release:  1%{?dist}
          Summary:  CLI tool for working with DICOM and DICOM JSON
          License:  AGPL-3.0-only
          Packager: Richard Viney <richard.viney@gmail.com>
          URL:      https://dcmfx.github.io

          %description
          CLI tool for working with DICOM and DICOM JSON.

          %prep

          %build

          %install
          mkdir -p %{buildroot}/%{_bindir}
          install -m 0755 %{name} %{buildroot}/%{_bindir}/%{name}

          %files
          %{_bindir}/%{name}
          " > dcmfx.spec

      - name: Build .rpm package
        run: |
          rpmbuild -bb --build-in-place --target ${{ matrix.rpm-arch }} dcmfx.spec

          RPM_PACKAGE="dcmfx-${{ needs.check_semantic_release.outputs.new_release_version }}-1.${{ matrix.rpm-arch }}.rpm"

          cp ~/rpmbuild/RPMS/${{ matrix.rpm-arch }}/$RPM_PACKAGE $RPM_PACKAGE
          openssl dgst -r -sha256 -out "$RPM_PACKAGE".sha256 "$RPM_PACKAGE"

          echo "RPM_PACKAGE=$RPM_PACKAGE" >> $GITHUB_ENV

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dcmfx-linux-packages-${{ matrix.target }}
          path: |
            ${{ env.DEB_PACKAGE }}
            ${{ env.DEB_PACKAGE }}.sha256
            ${{ env.RPM_PACKAGE }}
            ${{ env.RPM_PACKAGE }}.sha256
          if-no-files-found: error
          retention-days: 1

  github_release:
    name: Release on GitHub
    timeout-minutes: 10
    runs-on: ubuntu-24.04

    permissions:
      contents: write

    needs:
      - check_semantic_release
      - build_rust_cli_tool
      - build_linux_packages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Gleam
        uses: erlef/setup-beam@v1
        with:
          otp-version: 28.1
          gleam-version: 1.13.0
          version-type: strict

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: "1.90"

      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Update Gleam package versions
        uses: ./.github/actions/set_gleam_package_versions
        with:
          version: ${{ needs.check_semantic_release.outputs.new_release_version }}

      - name: Set Rust crate versions
        uses: ./.github/actions/set_rust_crate_versions
        with:
          version: ${{ needs.check_semantic_release.outputs.new_release_version }}

      - name: Semantic release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_homebrew_tap:
    name: Update Homebrew tap
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    environment: release

    needs:
      - check_semantic_release
      - github_release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: dcmfx/homebrew-tap
          token: ${{ secrets.DCMFX_CI_GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Update formula with latest version and hashes
        run: |
          VERSION=${{ needs.check_semantic_release.outputs.new_release_version }}

          read -r AARCH64_UNKNOWN_LINUX_MUSL_SHA < <(awk '{print $1; exit}' dcmfx-aarch64-unknown-linux-musl/dcmfx-v$VERSION-aarch64-unknown-linux-musl.tar.gz.sha256)
          read -r X86_64_UNKNOWN_LINUX_MUSL_SHA < <(awk '{print $1; exit}' dcmfx-x86_64-unknown-linux-musl/dcmfx-v$VERSION-x86_64-unknown-linux-musl.tar.gz.sha256)
          read -r AARCH64_APPLE_DARWIN_SHA < <(awk '{print $1; exit}' dcmfx-aarch64-apple-darwin/dcmfx-v$VERSION-aarch64-apple-darwin.tar.gz.sha256)

          sed \
            -i \
            -e 's/VERSION = ".*"/VERSION = "'"$VERSION"'"/' \
            -e 's/"aarch64-unknown-linux-musl" => ".*"/"aarch64-unknown-linux-musl" => "'"$AARCH64_UNKNOWN_LINUX_MUSL_SHA"'"/' \
            -e 's/"x86_64-unknown-linux-musl" => ".*"/"x86_64-unknown-linux-musl" => "'"$X86_64_UNKNOWN_LINUX_MUSL_SHA"'"/' \
            -e 's/"aarch64-apple-darwin" => ".*"/"aarch64-apple-darwin" => "'"$AARCH64_APPLE_DARWIN_SHA"'"/' \
            Formula/dcmfx.rb

          cat Formula/dcmfx.rb

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/dcmfx.rb
          git commit -m "chore: Release v${{ needs.check_semantic_release.outputs.new_release_version }}"
          git push

  update_apt_repository:
    name: Update APT repository
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    environment: release

    needs:
      - check_semantic_release
      - github_release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: dcmfx/apt-repository
          token: ${{ secrets.DCMFX_CI_GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dcmfx-linux-packages-*

      - name: Update repository with latest packages
        run: |
          mkdir -p pool/main
          find dcmfx-linux-packages-* -type f -name "*.deb" -exec cp {} pool/main \;

          mkdir -p dists/stable/main/binary-{amd64,arm64}
          apt-ftparchive generate -c=aptftp.conf aptgenerate.conf
          apt-ftparchive release -c=aptftp.conf dists/stable > dists/stable/Release

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pool dists
          git commit -m "chore: Release v${{ needs.check_semantic_release.outputs.new_release_version }}"
          git push

  update_yum_repository:
    name: Update YUM repository
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    environment: release

    needs:
      - check_semantic_release
      - github_release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: dcmfx/yum-repository
          token: ${{ secrets.DCMFX_CI_GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dcmfx-linux-packages-*

      - name: Update repository with latest packages
        run: |
          find dcmfx-linux-packages-* -type f -name "*.rpm" -exec cp {} . \;

          sudo apt-get update
          sudo apt-get install -y createrepo-c
          createrepo_c .

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add *.rpm repodata
          git commit -m "chore: Release v${{ needs.check_semantic_release.outputs.new_release_version }}"
          git push

  update_arch_user_repository:
    name: Update Arch User Repository
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    environment: release

    needs:
      - check_semantic_release
      - github_release

    steps:
      - name: Setup SSH key for the Arch User Repository (AUR)
        run: |
          echo "${{ secrets.ARCH_USER_REPOSITORY_SSH_KEY }}" > ~/aur_ssh.key
          chmod 600 ~/aur_ssh.key
          echo "GIT_SSH_COMMAND=ssh -i ~/aur_ssh.key -o StrictHostKeyChecking=no" >> $GITHUB_ENV

      - name: Clone AUR repository for DCMfx
        run: git clone ssh://aur@aur.archlinux.org/dcmfx.git

      - name: Update PKGBUILD and .SRCINFO for new release
        working-directory: dcmfx
        run: |
          VERSION=${{ needs.check_semantic_release.outputs.new_release_version }}

          curl -L https://github.com/dcmfx/dcmfx/archive/v$VERSION.tar.gz -o dcmfx.tar.gz
          ARCHIVE_SHA=$(openssl dgst -r -sha256 dcmfx.tar.gz | awk '{print $1}')

          sed \
            -i \
            -e 's/pkgver=.*/pkgver='$VERSION'/' \
            -e "s/sha256sums=.*/sha256sums=('$ARCHIVE_SHA')/" \
            PKGBUILD

          cat PKGBUILD

          # It would be better to update .SRCINFO with makepkg --printsrcinfo,
          # but the current version in APT crashes immediately when run
          sed \
            -i \
            -e 's/pkgver = .*/pkgver = '$VERSION'/' \
            -e "s/source = dcmfx-.*/source = dcmfx-$VERSION.tar.gz::https:\/\/github.com\/dcmfx\/dcmfx\/archive\/v$VERSION.tar.gz/" \
            -e "s/sha256sums = .*/sha256sums = $ARCHIVE_SHA/" \
            .SRCINFO

          cat .SRCINFO

      - name: Commit and push changes
        working-directory: dcmfx
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add PKGBUILD .SRCINFO
          git commit -m "chore: Release v${{ needs.check_semantic_release.outputs.new_release_version }}"
          git push

  release_docs:
    name: Release docs
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    environment: release

    needs:
      - github_release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: dcmfx

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.20

      - name: Install dependencies
        uses: bahmutov/npm-install@v1
        with:
          working-directory: dcmfx/docs

      - name: Build with VitePress
        working-directory: dcmfx/docs
        run: npm run build

      - name: Checkout dcmfx.github.io
        uses: actions/checkout@v4
        with:
          repository: dcmfx/dcmfx.github.io
          path: dcmfx.github.io
          token: ${{ secrets.DCMFX_CI_GITHUB_TOKEN }}

      - name: Push docs to dcmfx.github.io repository
        working-directory: dcmfx.github.io
        run: |
          rm -rf *.html *.json images
          cp -r ../dcmfx/docs/.vitepress/dist/* .

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add .
          git commit -m "chore: Update docs"
          git push

  trigger_test_release_channels_workflow:
    name: Trigger 'Test Release Channels' workflow

    permissions:
      actions: write

    needs:
      - github_release
      - update_apt_repository
      - update_arch_user_repository
      - update_homebrew_tap
      - update_yum_repository

    runs-on: ubuntu-24.04

    steps:
      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run test_release_channels.yml --repo ${{ github.repository }}
