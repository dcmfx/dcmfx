name: Release

on: workflow_dispatch

permissions:
  checks: read
  contents: write
  issues: write

concurrency:
  group: release
  cancel-in-progress: false

jobs:
  check_semantic_release:
    name: Check semantic release
    timeout-minutes: 10
    runs-on: ubuntu-24.04

    outputs:
      new_release_published: ${{ steps.semantic-release.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic-release.outputs.new_release_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.12

      - name: Semantic release dry run
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          dry_run: true
          extra_plugins: conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for tests to complete
        if: steps.semantic-release.outputs.new_release_published == 'true'
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.sha }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          check-regexp: Test

  build_rust_cli_tool:
    name: Build Rust CLI tool
    timeout-minutes: 10

    needs: check_semantic_release
    if: needs.check_semantic_release.outputs.new_release_published == 'true'

    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-musl
          - x86_64-unknown-linux-musl
          - aarch64-apple-darwin
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - runs-on: ubuntu-24.04
            target: aarch64-unknown-linux-musl
            use-cross: true
            rust-flags: -C link-arg=-Wl,--build-id
          - runs-on: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            use-cross: true
            rust-flags: -C link-arg=-Wl,--build-id
          - runs-on: macos-14
            target: aarch64-apple-darwin
            use-cross: false
          - runs-on: macos-13
            target: x86_64-apple-darwin
            use-cross: false
          - runs-on: windows-2022
            target: x86_64-pc-windows-msvc
            use-cross: false

    runs-on: ${{ matrix.runs-on }}

    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.83.0
          target: ${{ matrix.target }}

      - name: Enable Rust dependency caching
        uses: Swatinem/rust-cache@v2
        with:
          key: v1-${{ matrix.target }}
          workspaces: rust

      - name: Set version number in Cargo.toml files
        working-directory: src/rust
        shell: bash
        run: find . -name "Cargo.toml" -exec sed -i'' -E "s/version = \"0.0.0\"/version = \"${{ needs.check_semantic_release.outputs.new_release_version }}\"/" {} +

      - name: Build release binary
        uses: clechasseur/rs-cargo@v2
        env:
          RUSTFLAGS: ${{ matrix.rust-flags }}
        with:
          working-directory: src/rust
          command: build
          args: --release --locked --target ${{ matrix.target }} --package dcmfx_cli
          use-cross: ${{ matrix.use-cross }}

      - name: Package
        shell: bash
        run: |
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-msvc" ]; then
            BINARY_SUFFIX=".exe"
          else
            BINARY_SUFFIX=""
          fi

          ARCHIVE="dcmfx-v${{ needs.check_semantic_release.outputs.new_release_version }}-${{ matrix.target }}.tar.gz"
          cp src/rust/target/${{ matrix.target }}/release/dcmfx_cli$BINARY_SUFFIX dcmfx$BINARY_SUFFIX
          tar -czvf "$ARCHIVE" dcmfx$BINARY_SUFFIX

          openssl dgst -r -sha256 -out "$ARCHIVE".sha256 "$ARCHIVE"
          echo "ARCHIVE=$ARCHIVE" >> $GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dcmfx-${{ matrix.target }}
          path: |
            ${{ env.ARCHIVE }}
            ${{ env.ARCHIVE }}.sha256
          if-no-files-found: error
          retention-days: 1

  build_linux_packages:
    name: Build Linux packages
    timeout-minutes: 10
    runs-on: ubuntu-24.04

    needs:
      - check_semantic_release
      - build_rust_cli_tool

    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-musl
          - x86_64-unknown-linux-musl
        include:
          - architecture-deb: arm64
            architecture-rpm: aarch64
            target: aarch64-unknown-linux-musl
          - architecture-deb: amd64
            architecture-rpm: x86_64
            target: x86_64-unknown-linux-musl

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dcmfx-${{ matrix.target }}

      - name: Extract binary
        run: tar xzf dcmfx-v${{ needs.check_semantic_release.outputs.new_release_version }}-${{ matrix.target }}.tar.gz

      - name: Create .deb package structure
        run: |
          mkdir -p package/DEBIAN
          mkdir -p package/usr/bin

          echo "
          Package:      dcmfx
          Version:      ${{ needs.check_semantic_release.outputs.new_release_version }}
          Architecture: ${{ matrix.architecture-deb }}
          Section:      utils
          Maintainer:   Richard Viney <richard.viney@gmail.com>
          Description:  CLI tool for working with DICOM and DICOM JSON
          Homepage:     https://dcmfx.github.io
          " > package/DEBIAN/control

          cp dcmfx package/usr/bin

      - name: Build .deb package
        run: |
          DEB_PACKAGE="dcmfx_${{ needs.check_semantic_release.outputs.new_release_version }}_${{ matrix.architecture-deb }}.deb"

          dpkg-deb --build package $DEB_PACKAGE
          openssl dgst -r -sha256 -out "$DEB_PACKAGE".sha256 "$DEB_PACKAGE"

          echo "DEB_PACKAGE=$DEB_PACKAGE" >> $GITHUB_ENV

      - name: Create .rpm spec
        run: |
          echo "
          Name:     dcmfx
          Version:  ${{ needs.check_semantic_release.outputs.new_release_version }}
          Release:  1%{?dist}
          Summary:  CLI tool for working with DICOM and DICOM JSON
          License:  AGPL-3.0-only
          Packager: Richard Viney <richard.viney@gmail.com>
          URL:      https://dcmfx.github.io

          # Disable post-install stripping of binaries as it fails for the
          # aarch64 RPM when built on an x86_64 GitHub Actions runner
          %define __os_install_post %{nil}

          %description
          CLI tool for working with DICOM and DICOM JSON.

          %prep

          %build

          %install
          mkdir -p %{buildroot}/%{_bindir}
          install -m 0755 %{name} %{buildroot}/%{_bindir}/%{name}

          %files
          %{_bindir}/%{name}
          " > dcmfx.spec

      - name: Build .rpm package
        run: |
          rpmbuild -bb --build-in-place --target ${{ matrix.architecture-rpm }} dcmfx.spec

          RPM_PACKAGE="dcmfx-${{ needs.check_semantic_release.outputs.new_release_version }}-1.${{ matrix.architecture-rpm }}.rpm"

          cp ~/rpmbuild/RPMS/${{ matrix.architecture-rpm }}/$RPM_PACKAGE $RPM_PACKAGE
          openssl dgst -r -sha256 -out "$RPM_PACKAGE".sha256 "$RPM_PACKAGE"

          echo "RPM_PACKAGE=$RPM_PACKAGE" >> $GITHUB_ENV

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dcmfx-linux-packages-${{ matrix.target }}
          path: |
            ${{ env.DEB_PACKAGE }}
            ${{ env.DEB_PACKAGE }}.sha256
            ${{ env.RPM_PACKAGE }}
            ${{ env.RPM_PACKAGE }}.sha256
          if-no-files-found: error
          retention-days: 1

  release:
    name: Release on GitHub
    timeout-minutes: 10
    runs-on: ubuntu-24.04

    needs:
      - build_rust_cli_tool
      - build_linux_packages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Semantic release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          extra_plugins: conventional-changelog-conventionalcommits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_homebrew_tap:
    name: Update Homebrew tap
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    environment: release

    needs:
      - check_semantic_release
      - release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: dcmfx/homebrew-tap
          token: ${{ secrets.DCMFX_CI_GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4

      - name: Update formula with latest version and hashes
        run: |
          VERSION=${{ needs.check_semantic_release.outputs.new_release_version }}

          read -r AARCH64_UNKNOWN_LINUX_MUSL_SHA < <(awk '{print $1; exit}' dcmfx-aarch64-unknown-linux-musl/dcmfx-v$VERSION-aarch64-unknown-linux-musl.tar.gz.sha256)
          read -r X86_64_UNKNOWN_LINUX_MUSL_SHA < <(awk '{print $1; exit}' dcmfx-x86_64-unknown-linux-musl/dcmfx-v$VERSION-x86_64-unknown-linux-musl.tar.gz.sha256)
          read -r AARCH64_APPLE_DARWIN_SHA < <(awk '{print $1; exit}' dcmfx-aarch64-apple-darwin/dcmfx-v$VERSION-aarch64-apple-darwin.tar.gz.sha256)
          read -r X86_64_APPLE_DARWIN_SHA < <(awk '{print $1; exit}' dcmfx-x86_64-apple-darwin/dcmfx-v$VERSION-x86_64-apple-darwin.tar.gz.sha256)

          sed \
            -i \
            -e 's/VERSION = ".*"/VERSION = "'"$VERSION"'"/' \
            -e 's/"aarch64-unknown-linux-musl" => ".*"/"aarch64-unknown-linux-musl" => "'"$AARCH64_UNKNOWN_LINUX_MUSL_SHA"'"/' \
            -e 's/"x86_64-unknown-linux-musl" => ".*"/"x86_64-unknown-linux-musl" => "'"$X86_64_UNKNOWN_LINUX_MUSL_SHA"'"/' \
            -e 's/"aarch64-apple-darwin" => ".*"/"aarch64-apple-darwin" => "'"$AARCH64_APPLE_DARWIN_SHA"'"/' \
            -e 's/"x86_64-apple-darwin" => ".*"/"x86_64-apple-darwin" => "'"$X86_64_APPLE_DARWIN_SHA"'"/' \
            Formula/dcmfx.rb

          cat Formula/dcmfx.rb

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/dcmfx.rb
          git commit -m "chore: Release v${{ needs.check_semantic_release.outputs.new_release_version }}"
          git push

  update_apt_repository:
    name: Update APT repository
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    environment: release

    needs:
      - check_semantic_release
      - release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: dcmfx/apt-repository
          token: ${{ secrets.DCMFX_CI_GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dcmfx-linux-packages-*

      - name: Update repository with latest packages
        run: |
          mkdir -p pool/main
          find dcmfx-linux-packages-* -type f -name "*.deb" -exec cp {} pool/main \;

          mkdir -p dists/stable/main/binary-{amd64,arm64}
          apt-ftparchive generate -c=aptftp.conf aptgenerate.conf
          apt-ftparchive release -c=aptftp.conf dists/stable > dists/stable/Release

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pool dists
          git commit -m "chore: Release v${{ needs.check_semantic_release.outputs.new_release_version }}"
          git push

  update_yum_repository:
    name: Update YUM repository
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    environment: release

    needs:
      - check_semantic_release
      - release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: dcmfx/yum-repository
          token: ${{ secrets.DCMFX_CI_GITHUB_TOKEN }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: dcmfx-linux-packages-*

      - name: Update repository with latest packages
        run: |
          find dcmfx-linux-packages-* -type f -name "*.rpm" -exec cp {} . \;

          sudo apt install createrepo-c
          createrepo_c .

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add *.rpm repodata
          git commit -m "chore: Release v${{ needs.check_semantic_release.outputs.new_release_version }}"
          git push

  release_docs:
    name: Release docs
    timeout-minutes: 10
    runs-on: ubuntu-24.04
    environment: release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: dcmfx

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.12

      - name: Install dependencies
        uses: bahmutov/npm-install@v1
        with:
          working-directory: dcmfx/docs

      - name: Build with VitePress
        working-directory: dcmfx/docs
        run: npm run docs:build

      - name: Checkout dcmfx.github.io
        uses: actions/checkout@v4
        with:
          repository: dcmfx/dcmfx.github.io
          path: dcmfx.github.io
          token: ${{ secrets.DCMFX_CI_GITHUB_TOKEN }}

      - name: Push docs to dcmfx.github.io repository
        working-directory: dcmfx.github.io
        run: |
          rm -rf *.html *.json images
          cp -r ../dcmfx/docs/.vitepress/dist/* .

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add .
          git commit -m "chore: Update docs"
          git push
