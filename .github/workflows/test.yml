name: Test

on:
  push:
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  test_dcmfx_gleam:
    name: Test DCMfx (Gleam)
    timeout-minutes: 30
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Gleam
        uses: erlef/setup-beam@v1
        with:
          otp-version: 28.0.1
          gleam-version: 1.12.0
          version-type: strict

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.17

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: 2.4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2

      - name: Run tests
        working-directory: src/gleam
        run: ./test_all.sh

  test_dcmfx_rust:
    name: Test DCMfx (Rust)
    timeout-minutes: 30

    strategy:
      matrix:
        rust-target:
          - aarch64-apple-darwin
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - x86_64-unknown-linux-gnu
        include:
          - rust-target: aarch64-apple-darwin
            runs-on: macos-14
          - rust-target: x86_64-apple-darwin
            runs-on: macos-13
          - rust-target: x86_64-pc-windows-msvc
            runs-on: windows-2025
          - rust-target: x86_64-unknown-linux-gnu
            runs-on: ubuntu-24.04

    runs-on: ${{ matrix.runs-on }}

    env:
      CARGO_TERM_COLOR: always

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.88-${{ matrix.rust-target }}
          components: clippy, rustfmt
          cache-workspaces: src/rust

      - name: Install platform-specific dependencies (macOS)
        if: matrix.rust-target == 'aarch64-apple-darwin' || matrix.rust-target == 'x86_64-apple-darwin'
        run: brew install ffmpeg

      - name: Install platform-specific dependencies (Linux)
        if: matrix.rust-target == 'x86_64-unknown-linux-gnu'
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Install platform-specific dependencies (Windows)
        if: matrix.rust-target == 'x86_64-pc-windows-msvc'
        run: choco install ffmpeg -y --no-progress

      - name: Check code formatting
        working-directory: src/rust
        run: cargo fmt --check

      - name: Fetch dependencies
        working-directory: src/rust
        run: cargo fetch --locked

      - name: Run linter
        if: matrix.rust-target == 'aarch64-apple-darwin'
        working-directory: src/rust
        run: cargo clippy -- --deny warnings

      - name: Run tests
        working-directory: src/rust
        run: cargo test --frozen

  test_dcmfx_rust_wasm_build:
    name: Test DCMfx Rust WASM build
    timeout-minutes: 30
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.88
          target: wasm32-unknown-unknown
          cache-workspaces: src/rust/dcmfx_wasm_test

      - name: Fetch dependencies
        working-directory: src/rust/dcmfx_wasm_test
        run: cargo fetch --locked

      - name: Build for WASM target
        working-directory: src/rust/dcmfx_wasm_test
        run: |
          cargo build --target wasm32-unknown-unknown --no-default-features --features dcmfx/pixel_data_native
          cargo build --target wasm32-unknown-unknown --no-default-features --features dcmfx/pixel_data_native --release 

      - name: Install Wasmer
        run: |
          curl https://get.wasmer.io -sSfL | sh
          echo "$HOME/.wasmer/bin" >> $GITHUB_PATH

      - name: Run on Wasmer
        working-directory: src/rust/dcmfx_wasm_test
        run: |
          wasmer target/wasm32-unknown-unknown/debug/dcmfx_wasm_test.wasm --invoke dcmfx_wasm_test
          wasmer target/wasm32-unknown-unknown/release/dcmfx_wasm_test.wasm --invoke dcmfx_wasm_test

  test_dcmfx_rust_build_without_pixel_data_native_feature:
    name: Test DCMfx Rust build without dcmfx/pixel_data_native
    timeout-minutes: 30
    runs-on: macos-14

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.88
          cache-workspaces: src/rust

      - name: Fetch dependencies
        working-directory: src/rust
        run: cargo fetch --locked

      - name: Build without dcmfx/pixel_data_native feature
        working-directory: src/rust
        run: cargo build --frozen --package dcmfx_cli --no-default-features

  test_dcmfx_rust_windows_gnu_library_build:
    name: Test DCMfx Rust Windows GNU library build
    timeout-minutes: 30
    runs-on: windows-2025

    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.88-pc-windows-gnu
          cache-workspaces: src/rust

      - name: Install MSYS2
        uses: msys2/setup-msys2@v2
        with:
          release: false
          install: >-
            git
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-gcc

      - name: Add Cargo to MSYS2 path
        run: echo 'export PATH="/c/Users/runneradmin/.cargo/bin:$PATH"' >> ~/.bash_profile

      - name: Fetch dependencies
        working-directory: src/rust
        run: cargo fetch --locked

      - name: Build for Windows GNU target
        working-directory: src/rust
        run: cargo build --frozen --package dcmfx

  test_dcmfx_fuzzer_build:
    name: Test DCMfx Fuzzer build
    timeout-minutes: 30
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.88
          cache-workspaces: src/rust/dcmfx_fuzz

      - name: Fetch dependencies
        working-directory: src/rust/dcmfx_fuzz
        run: cargo fetch --locked

      - name: Build fuzzer
        working-directory: src/rust/dcmfx_fuzz
        run: |
          cargo install cargo-afl@0.15.17
          cargo afl config --build --force
          cargo afl build

  test_examples:
    name: Test examples
    timeout-minutes: 30
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Gleam
        uses: erlef/setup-beam@v1
        with:
          otp-version: 28.0.1
          gleam-version: 1.12.0
          version-type: strict

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: 1.88
          components: clippy, rustfmt
          cache-workspaces: examples/*/rust

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.17

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: 2.4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.2

      - name: Run all examples
        working-directory: examples
        run: ./test_all.sh

  build_docs:
    name: Build docs
    timeout-minutes: 30
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: dcmfx

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.17

      - name: Install dependencies
        uses: bahmutov/npm-install@v1
        with:
          working-directory: dcmfx/docs

      - name: Build with VitePress
        working-directory: dcmfx/docs
        run: npm run build
