//! Provides constants for all of the data elements defined in Part 6 of the
//! DICOM specification. These can be referenced directly, or looked up by data
//! element tag.
//!
//! Well-known privately defined data elements can also be looked up by
//! providing the relevant 'Private Creator' name.

#![allow(clippy::result_unit_err)]

#[cfg(not(feature = "std"))]
use alloc::{format, string::String};

use crate::{DataElementTag, ValueMultiplicity, ValueRepresentation};

/// An item in the data element dictionary.
///
#[derive(Clone, Debug, PartialEq)]
pub struct Item {
  pub tag: DataElementTag,
  pub name: &'static str,
  pub vrs: &'static [ValueRepresentation],
  pub multiplicity: ValueMultiplicity,
}

/// Returns the human-readable name for a data element tag. The private creator
/// is required in order to look up well-known privately defined data elements.
///
/// If the tag isn't in the dictionary then `unknown_tag` is returned, or
/// `unknown_private_tag` if it is a private tag.
///
pub fn tag_name(
  tag: DataElementTag,
  private_creator: Option<&str>,
) -> &'static str {
  match find(tag, private_creator) {
    Ok(item) => item.name,
    _ => {
      if tag.is_private() {
        "unknown_private_tag"
      } else {
        "unknown_tag"
      }
    }
  }
}

/// Formats a data element tag as `"(GROUP,ELEMENT) TAG_NAME"`, e.g.
/// "(0008,0020) StudyDate"`. The private creator is required in order to look
/// up well-known privately defined data elements.
///
/// If the tag isn't in the dictionary then `unknown_tag` is used as the tag
/// name, or `unknown_private_tag` if it is a private tag.
///
pub fn tag_with_name(
  tag: DataElementTag,
  private_creator: Option<&str>,
) -> String {
  format!("{} {}", tag, tag_name(tag, private_creator))
}

/// Returns whether a tag is a lookup table descriptor. Lookup table descriptors
/// are handled as a special type of data element value due to the non-standard
/// way their VR applies to their underlying bytes.
///
pub fn is_lut_descriptor_tag(tag: DataElementTag) -> bool {
  tag == LUT_DESCRIPTOR.tag
    || tag == RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR.tag
    || tag == GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR.tag
    || tag == BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR.tag
}

// The following constants reduce bloat/repetition of ValueMultiplicity
// specifications in the generated dictionary code

const VM_1: ValueMultiplicity = ValueMultiplicity {
  min: 1,
  max: Some(1),
};

const VM_2: ValueMultiplicity = ValueMultiplicity {
  min: 2,
  max: Some(2),
};

const VM_3: ValueMultiplicity = ValueMultiplicity {
  min: 3,
  max: Some(3),
};

const VM_4: ValueMultiplicity = ValueMultiplicity {
  min: 4,
  max: Some(4),
};

const VM_5: ValueMultiplicity = ValueMultiplicity {
  min: 5,
  max: Some(5),
};

const VM_6: ValueMultiplicity = ValueMultiplicity {
  min: 6,
  max: Some(6),
};

const VM_1_TO_2: ValueMultiplicity = ValueMultiplicity {
  min: 1,
  max: Some(2),
};

const VM_1_TO_N: ValueMultiplicity = ValueMultiplicity { min: 1, max: None };

const VM_2_TO_N: ValueMultiplicity = ValueMultiplicity { min: 2, max: None };

const VM_3_TO_N: ValueMultiplicity = ValueMultiplicity { min: 3, max: None };

#[cfg(test)]
mod tests {
  use super::*;

  #[test]
  fn tag_name_test() {
    assert_eq!(
      tag_name(DataElementTag::new(0x0010, 0x0010), None),
      "Patient's Name"
    );

    assert_eq!(
      tag_name(DataElementTag::new(0x1234, 0x5678), None),
      "unknown_tag"
    );

    assert_eq!(
      tag_name(DataElementTag::new(0x1231, 0,), None),
      "unknown_private_tag"
    );
  }

  #[test]
  fn tag_with_name_test() {
    assert_eq!(
      tag_with_name(DataElementTag::new(0x0010, 0x0010), None),
      "(0010,0010) Patient's Name"
    );

    assert_eq!(
      tag_with_name(DataElementTag::new(0x1234, 0x5678), None),
      "(1234,5678) unknown_tag"
    );

    assert_eq!(
      tag_with_name(DataElementTag::new(0x1231, 0,), None),
      "(1231,0000) unknown_private_tag"
    );
  }

  #[test]
  fn is_lut_descriptor_tag_test() {
    assert!(is_lut_descriptor_tag(LUT_DESCRIPTOR.tag));
    assert!(is_lut_descriptor_tag(
      RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR.tag
    ));
    assert!(is_lut_descriptor_tag(
      GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR.tag
    ));
    assert!(is_lut_descriptor_tag(
      BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR.tag
    ));
    assert!(!is_lut_descriptor_tag(PATIENT_NAME.tag));
  }

  #[test]
  fn find_test() {
    assert_eq!(
      find(DataElementTag::new(0x0010, 0x0010), None),
      Ok(PATIENT_NAME)
    );

    let tag = DataElementTag::new(0x0029, 0x0160);
    assert_eq!(
      find(tag, Some("SIEMENS MEDCOM HEADER2")),
      Ok(Item {
        tag,
        name: "Series Workflow Status",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      })
    );

    assert_eq!(find(DataElementTag::new(0x0000, 0xFFFF), None), Err(()));
  }
}

// grcov-excl-start

// Everything below this line is auto-generated from the DICOM specification
// by dcmfx_dictionary_codegen

pub const FILE_META_INFORMATION_GROUP_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0000,
  },
  name: "File Meta Information Group Length",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const FILE_META_INFORMATION_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0001,
  },
  name: "File Meta Information Version",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const MEDIA_STORAGE_SOP_CLASS_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0002,
  },
  name: "Media Storage SOP Class UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const MEDIA_STORAGE_SOP_INSTANCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0003,
  },
  name: "Media Storage SOP Instance UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const TRANSFER_SYNTAX_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0010,
  },
  name: "Transfer Syntax UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const IMPLEMENTATION_CLASS_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0012,
  },
  name: "Implementation Class UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const IMPLEMENTATION_VERSION_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0013,
  },
  name: "Implementation Version Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SOURCE_APPLICATION_ENTITY_TITLE: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0016,
  },
  name: "Source Application Entity Title",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1,
};

pub const SENDING_APPLICATION_ENTITY_TITLE: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0017,
  },
  name: "Sending Application Entity Title",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1,
};

pub const RECEIVING_APPLICATION_ENTITY_TITLE: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0018,
  },
  name: "Receiving Application Entity Title",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1,
};

pub const SOURCE_PRESENTATION_ADDRESS: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0026,
  },
  name: "Source Presentation Address",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const SENDING_PRESENTATION_ADDRESS: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0027,
  },
  name: "Sending Presentation Address",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const RECEIVING_PRESENTATION_ADDRESS: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0028,
  },
  name: "Receiving Presentation Address",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const RTV_META_INFORMATION_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0031,
  },
  name: "RTV Meta Information Version",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const RTV_COMMUNICATION_SOP_CLASS_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0032,
  },
  name: "RTV Communication SOP Class UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const RTV_COMMUNICATION_SOP_INSTANCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0033,
  },
  name: "RTV Communication SOP Instance UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const RTV_SOURCE_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0035,
  },
  name: "RTV Source Identifier",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const RTV_FLOW_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0036,
  },
  name: "RTV Flow Identifier",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const RTV_FLOW_RTP_SAMPLING_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0037,
  },
  name: "RTV Flow RTP Sampling Rate",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const RTV_FLOW_ACTUAL_FRAME_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0038,
  },
  name: "RTV Flow Actual Frame Duration",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PRIVATE_INFORMATION_CREATOR_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0100,
  },
  name: "Private Information Creator UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const PRIVATE_INFORMATION: Item = Item {
  tag: DataElementTag {
    group: 0x0002,
    element: 0x0102,
  },
  name: "Private Information",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const FILE_SET_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1130,
  },
  name: "File-set ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FILE_SET_DESCRIPTOR_FILE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1141,
  },
  name: "File-set Descriptor File ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: ValueMultiplicity {
    min: 1,
    max: Some(8),
  },
};

pub const SPECIFIC_CHARACTER_SET_OF_FILE_SET_DESCRIPTOR_FILE: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1142,
  },
  name: "Specific Character Set of File-set Descriptor File",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OFFSET_OF_THE_FIRST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY:
  Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1200,
  },
  name: "Offset of the First Directory Record of the Root Directory Entity",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const OFFSET_OF_THE_LAST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY:
  Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1202,
  },
  name: "Offset of the Last Directory Record of the Root Directory Entity",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const FILE_SET_CONSISTENCY_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1212,
  },
  name: "File-set Consistency Flag",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DIRECTORY_RECORD_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1220,
  },
  name: "Directory Record Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OFFSET_OF_THE_NEXT_DIRECTORY_RECORD: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1400,
  },
  name: "Offset of the Next Directory Record",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const RECORD_IN_USE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1410,
  },
  name: "Record In-use Flag",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OFFSET_OF_REFERENCED_LOWER_LEVEL_DIRECTORY_ENTITY: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1420,
  },
  name: "Offset of Referenced Lower-Level Directory Entity",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const DIRECTORY_RECORD_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1430,
  },
  name: "Directory Record Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRIVATE_RECORD_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1432,
  },
  name: "Private Record UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REFERENCED_FILE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1500,
  },
  name: "Referenced File ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: ValueMultiplicity {
    min: 1,
    max: Some(8),
  },
};

pub const MRDR_DIRECTORY_RECORD_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1504,
  },
  name: "MRDR Directory Record Offset",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const REFERENCED_SOP_CLASS_UID_IN_FILE: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1510,
  },
  name: "Referenced SOP Class UID in File",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REFERENCED_SOP_INSTANCE_UID_IN_FILE: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1511,
  },
  name: "Referenced SOP Instance UID in File",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REFERENCED_TRANSFER_SYNTAX_UID_IN_FILE: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1512,
  },
  name: "Referenced Transfer Syntax UID in File",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REFERENCED_RELATED_GENERAL_SOP_CLASS_UID_IN_FILE: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x151A,
  },
  name: "Referenced Related General SOP Class UID in File",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_REFERENCES: Item = Item {
  tag: DataElementTag {
    group: 0x0004,
    element: 0x1600,
  },
  name: "Number of References",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const CURRENT_FRAME_FUNCTIONAL_GROUPS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0006,
    element: 0x0001,
  },
  name: "Current Frame Functional Groups Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LENGTH_TO_END: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0001,
  },
  name: "Length to End",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const SPECIFIC_CHARACTER_SET: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0005,
  },
  name: "Specific Character Set",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const LANGUAGE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0006,
  },
  name: "Language Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0008,
  },
  name: "Image Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_2_TO_N,
};

pub const RECOGNITION_CODE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0010,
  },
  name: "Recognition Code",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const INSTANCE_CREATION_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0012,
  },
  name: "Instance Creation Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const INSTANCE_CREATION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0013,
  },
  name: "Instance Creation Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const INSTANCE_CREATOR_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0014,
  },
  name: "Instance Creator UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const INSTANCE_COERCION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0015,
  },
  name: "Instance Coercion DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const SOP_CLASS_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0016,
  },
  name: "SOP Class UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const ACQUISITION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0017,
  },
  name: "Acquisition UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const SOP_INSTANCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0018,
  },
  name: "SOP Instance UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const PYRAMID_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0019,
  },
  name: "Pyramid UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const RELATED_GENERAL_SOP_CLASS_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x001A,
  },
  name: "Related General SOP Class UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1_TO_N,
};

pub const ORIGINAL_SPECIALIZED_SOP_CLASS_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x001B,
  },
  name: "Original Specialized SOP Class UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const SYNTHETIC_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x001C,
  },
  name: "Synthetic Data",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const STUDY_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0020,
  },
  name: "Study Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const SERIES_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0021,
  },
  name: "Series Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const ACQUISITION_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0022,
  },
  name: "Acquisition Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const CONTENT_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0023,
  },
  name: "Content Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const OVERLAY_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0024,
  },
  name: "Overlay Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const CURVE_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0025,
  },
  name: "Curve Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const ACQUISITION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x002A,
  },
  name: "Acquisition DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const STUDY_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0030,
  },
  name: "Study Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const SERIES_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0031,
  },
  name: "Series Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const ACQUISITION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0032,
  },
  name: "Acquisition Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const CONTENT_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0033,
  },
  name: "Content Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const OVERLAY_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0034,
  },
  name: "Overlay Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const CURVE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0035,
  },
  name: "Curve Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const DATA_SET_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0040,
  },
  name: "Data Set Type",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DATA_SET_SUBTYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0041,
  },
  name: "Data Set Subtype",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const NUCLEAR_MEDICINE_SERIES_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0042,
  },
  name: "Nuclear Medicine Series Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ACCESSION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0050,
  },
  name: "Accession Number",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_ACCESSION_NUMBER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0051,
  },
  name: "Issuer of Accession Number Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const QUERY_RETRIEVE_LEVEL: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0052,
  },
  name: "Query/Retrieve Level",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const QUERY_RETRIEVE_VIEW: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0053,
  },
  name: "Query/Retrieve View",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RETRIEVE_AE_TITLE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0054,
  },
  name: "Retrieve AE Title",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1_TO_N,
};

pub const STATION_AE_TITLE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0055,
  },
  name: "Station AE Title",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1,
};

pub const INSTANCE_AVAILABILITY: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0056,
  },
  name: "Instance Availability",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FAILED_SOP_INSTANCE_UID_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0058,
  },
  name: "Failed SOP Instance UID List",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1_TO_N,
};

pub const MODALITY: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0060,
  },
  name: "Modality",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MODALITIES_IN_STUDY: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0061,
  },
  name: "Modalities in Study",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const SOP_CLASSES_IN_STUDY: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0062,
  },
  name: "SOP Classes in Study",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1_TO_N,
};

pub const ANATOMIC_REGIONS_IN_STUDY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0063,
  },
  name: "Anatomic Regions in Study Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONVERSION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0064,
  },
  name: "Conversion Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRESENTATION_INTENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0068,
  },
  name: "Presentation Intent Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MANUFACTURER: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0070,
  },
  name: "Manufacturer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const INSTITUTION_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0080,
  },
  name: "Institution Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const INSTITUTION_ADDRESS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0081,
  },
  name: "Institution Address",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const INSTITUTION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0082,
  },
  name: "Institution Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERRING_PHYSICIAN_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0090,
  },
  name: "Referring Physician's Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const REFERRING_PHYSICIAN_ADDRESS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0092,
  },
  name: "Referring Physician's Address",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const REFERRING_PHYSICIAN_TELEPHONE_NUMBERS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0094,
  },
  name: "Referring Physician's Telephone Numbers",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1_TO_N,
};

pub const REFERRING_PHYSICIAN_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0096,
  },
  name: "Referring Physician Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONSULTING_PHYSICIAN_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x009C,
  },
  name: "Consulting Physician's Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1_TO_N,
};

pub const CONSULTING_PHYSICIAN_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x009D,
  },
  name: "Consulting Physician Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CODE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0100,
  },
  name: "Code Value",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const EXTENDED_CODE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0101,
  },
  name: "Extended Code Value",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CODING_SCHEME_DESIGNATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0102,
  },
  name: "Coding Scheme Designator",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const CODING_SCHEME_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0103,
  },
  name: "Coding Scheme Version",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const CODE_MEANING: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0104,
  },
  name: "Code Meaning",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const MAPPING_RESOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0105,
  },
  name: "Mapping Resource",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTEXT_GROUP_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0106,
  },
  name: "Context Group Version",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const CONTEXT_GROUP_LOCAL_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0107,
  },
  name: "Context Group Local Version",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const EXTENDED_CODE_MEANING: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0108,
  },
  name: "Extended Code Meaning",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const CODING_SCHEME_RESOURCES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0109,
  },
  name: "Coding Scheme Resources Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CODING_SCHEME_URL_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x010A,
  },
  name: "Coding Scheme URL Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTEXT_GROUP_EXTENSION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x010B,
  },
  name: "Context Group Extension Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CODING_SCHEME_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x010C,
  },
  name: "Coding Scheme UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const CONTEXT_GROUP_EXTENSION_CREATOR_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x010D,
  },
  name: "Context Group Extension Creator UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const CODING_SCHEME_URL: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x010E,
  },
  name: "Coding Scheme URL",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const CONTEXT_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x010F,
  },
  name: "Context Identifier",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CODING_SCHEME_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0110,
  },
  name: "Coding Scheme Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CODING_SCHEME_REGISTRY: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0112,
  },
  name: "Coding Scheme Registry",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CODING_SCHEME_EXTERNAL_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0114,
  },
  name: "Coding Scheme External ID",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const CODING_SCHEME_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0115,
  },
  name: "Coding Scheme Name",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const CODING_SCHEME_RESPONSIBLE_ORGANIZATION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0116,
  },
  name: "Coding Scheme Responsible Organization",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const CONTEXT_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0117,
  },
  name: "Context UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const MAPPING_RESOURCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0118,
  },
  name: "Mapping Resource UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const LONG_CODE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0119,
  },
  name: "Long Code Value",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1,
};

pub const URN_CODE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0120,
  },
  name: "URN Code Value",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const EQUIVALENT_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0121,
  },
  name: "Equivalent Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MAPPING_RESOURCE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0122,
  },
  name: "Mapping Resource Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CONTEXT_GROUP_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0123,
  },
  name: "Context Group Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MAPPING_RESOURCE_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0124,
  },
  name: "Mapping Resource Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TIMEZONE_OFFSET_FROM_UTC: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0201,
  },
  name: "Timezone Offset From UTC",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const RESPONSIBLE_GROUP_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0220,
  },
  name: "Responsible Group Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EQUIPMENT_MODALITY: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0221,
  },
  name: "Equipment Modality",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MANUFACTURER_RELATED_MODEL_GROUP: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0222,
  },
  name: "Manufacturer's Related Model Group",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PRIVATE_DATA_ELEMENT_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0300,
  },
  name: "Private Data Element Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRIVATE_GROUP_REFERENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0301,
  },
  name: "Private Group Reference",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PRIVATE_CREATOR_REFERENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0302,
  },
  name: "Private Creator Reference",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const BLOCK_IDENTIFYING_INFORMATION_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0303,
  },
  name: "Block Identifying Information Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NONIDENTIFYING_PRIVATE_ELEMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0304,
  },
  name: "Nonidentifying Private Elements",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const DEIDENTIFICATION_ACTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0305,
  },
  name: "Deidentification Action Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IDENTIFYING_PRIVATE_ELEMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0306,
  },
  name: "Identifying Private Elements",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const DEIDENTIFICATION_ACTION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0307,
  },
  name: "Deidentification Action",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRIVATE_DATA_ELEMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0308,
  },
  name: "Private Data Element",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PRIVATE_DATA_ELEMENT_VALUE_MULTIPLICITY: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0309,
  },
  name: "Private Data Element Value Multiplicity",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: ValueMultiplicity {
    min: 1,
    max: Some(3),
  },
};

pub const PRIVATE_DATA_ELEMENT_VALUE_REPRESENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x030A,
  },
  name: "Private Data Element Value Representation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRIVATE_DATA_ELEMENT_NUMBER_OF_ITEMS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x030B,
  },
  name: "Private Data Element Number of Items",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1_TO_2,
};

pub const PRIVATE_DATA_ELEMENT_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x030C,
  },
  name: "Private Data Element Name",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1,
};

pub const PRIVATE_DATA_ELEMENT_KEYWORD: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x030D,
  },
  name: "Private Data Element Keyword",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1,
};

pub const PRIVATE_DATA_ELEMENT_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x030E,
  },
  name: "Private Data Element Description",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const PRIVATE_DATA_ELEMENT_ENCODING: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x030F,
  },
  name: "Private Data Element Encoding",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const PRIVATE_DATA_ELEMENT_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0310,
  },
  name: "Private Data Element Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCOPE_OF_INVENTORY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0400,
  },
  name: "Scope of Inventory Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INVENTORY_PURPOSE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0401,
  },
  name: "Inventory Purpose",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const INVENTORY_INSTANCE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0402,
  },
  name: "Inventory Instance Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const INVENTORY_LEVEL: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0403,
  },
  name: "Inventory Level",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ITEM_INVENTORY_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0404,
  },
  name: "Item Inventory DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const REMOVED_FROM_OPERATIONAL_USE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0405,
  },
  name: "Removed from Operational Use",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REASON_FOR_REMOVAL_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0406,
  },
  name: "Reason for Removal Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STORED_INSTANCE_BASE_URI: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0407,
  },
  name: "Stored Instance Base URI",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const FOLDER_ACCESS_URI: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0408,
  },
  name: "Folder Access URI",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const FILE_ACCESS_URI: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0409,
  },
  name: "File Access URI",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const CONTAINER_FILE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x040A,
  },
  name: "Container File Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FILENAME_IN_CONTAINER: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x040B,
  },
  name: "Filename in Container",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const FILE_OFFSET_IN_CONTAINER: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x040C,
  },
  name: "File Offset in Container",
  vrs: &[ValueRepresentation::UnsignedVeryLong],
  multiplicity: VM_1,
};

pub const FILE_LENGTH_IN_CONTAINER: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x040D,
  },
  name: "File Length in Container",
  vrs: &[ValueRepresentation::UnsignedVeryLong],
  multiplicity: VM_1,
};

pub const STORED_INSTANCE_TRANSFER_SYNTAX_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x040E,
  },
  name: "Stored Instance Transfer Syntax UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const EXTENDED_MATCHING_MECHANISMS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x040F,
  },
  name: "Extended Matching Mechanisms",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const RANGE_MATCHING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0410,
  },
  name: "Range Matching Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LIST_OF_UID_MATCHING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0411,
  },
  name: "List of UID Matching Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EMPTY_VALUE_MATCHING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0412,
  },
  name: "Empty Value Matching Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GENERAL_MATCHING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0413,
  },
  name: "General Matching Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REQUESTED_STATUS_INTERVAL: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0414,
  },
  name: "Requested Status Interval",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RETAIN_INSTANCES: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0415,
  },
  name: "Retain Instances",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EXPIRATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0416,
  },
  name: "Expiration DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const TRANSACTION_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0417,
  },
  name: "Transaction Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TRANSACTION_STATUS_COMMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0418,
  },
  name: "Transaction Status Comment",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const FILE_SET_ACCESS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0419,
  },
  name: "File Set Access Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FILE_ACCESS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x041A,
  },
  name: "File Access Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECORD_KEY: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x041B,
  },
  name: "Record Key",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const PRIOR_RECORD_KEY: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x041C,
  },
  name: "Prior Record Key",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const METADATA_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x041D,
  },
  name: "Metadata Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const UPDATED_METADATA_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x041E,
  },
  name: "Updated Metadata Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STUDY_UPDATE_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x041F,
  },
  name: "Study Update DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const INVENTORY_ACCESS_END_POINTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0420,
  },
  name: "Inventory Access End Points Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STUDY_ACCESS_END_POINTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0421,
  },
  name: "Study Access End Points Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INCORPORATED_INVENTORY_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0422,
  },
  name: "Incorporated Inventory Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INVENTORIED_STUDIES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0423,
  },
  name: "Inventoried Studies Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INVENTORIED_SERIES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0424,
  },
  name: "Inventoried Series Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INVENTORIED_INSTANCES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0425,
  },
  name: "Inventoried Instances Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INVENTORY_COMPLETION_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0426,
  },
  name: "Inventory Completion Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_STUDY_RECORDS_IN_INSTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0427,
  },
  name: "Number of Study Records in Instance",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TOTAL_NUMBER_OF_STUDY_RECORDS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0428,
  },
  name: "Total Number of Study Records",
  vrs: &[ValueRepresentation::UnsignedVeryLong],
  multiplicity: VM_1,
};

pub const MAXIMUM_NUMBER_OF_RECORDS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x0429,
  },
  name: "Maximum Number of Records",
  vrs: &[ValueRepresentation::UnsignedVeryLong],
  multiplicity: VM_1,
};

pub const NETWORK_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1000,
  },
  name: "Network ID",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1,
};

pub const STATION_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1010,
  },
  name: "Station Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const STUDY_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1030,
  },
  name: "Study Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PROCEDURE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1032,
  },
  name: "Procedure Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SERIES_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x103E,
  },
  name: "Series Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SERIES_DESCRIPTION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x103F,
  },
  name: "Series Description Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INSTITUTIONAL_DEPARTMENT_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1040,
  },
  name: "Institutional Department Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const INSTITUTIONAL_DEPARTMENT_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1041,
  },
  name: "Institutional Department Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PHYSICIANS_OF_RECORD: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1048,
  },
  name: "Physician(s) of Record",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1_TO_N,
};

pub const PHYSICIANS_OF_RECORD_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1049,
  },
  name: "Physician(s) of Record Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERFORMING_PHYSICIAN_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1050,
  },
  name: "Performing Physician's Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1_TO_N,
};

pub const PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1052,
  },
  name: "Performing Physician Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NAME_OF_PHYSICIANS_READING_STUDY: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1060,
  },
  name: "Name of Physician(s) Reading Study",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1_TO_N,
};

pub const PHYSICIANS_READING_STUDY_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1062,
  },
  name: "Physician(s) Reading Study Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPERATORS_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1070,
  },
  name: "Operators' Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1_TO_N,
};

pub const OPERATOR_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1072,
  },
  name: "Operator Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ADMITTING_DIAGNOSES_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1080,
  },
  name: "Admitting Diagnoses Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const ADMITTING_DIAGNOSES_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1084,
  },
  name: "Admitting Diagnoses Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PYRAMID_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1088,
  },
  name: "Pyramid Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const MANUFACTURER_MODEL_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1090,
  },
  name: "Manufacturer's Model Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REFERENCED_RESULTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1100,
  },
  name: "Referenced Results Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_STUDY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1110,
  },
  name: "Referenced Study Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_PERFORMED_PROCEDURE_STEP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1111,
  },
  name: "Referenced Performed Procedure Step Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_INSTANCES_BY_SOP_CLASS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1112,
  },
  name: "Referenced Instances by SOP Class Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_SERIES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1115,
  },
  name: "Referenced Series Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_PATIENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1120,
  },
  name: "Referenced Patient Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_VISIT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1125,
  },
  name: "Referenced Visit Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_OVERLAY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1130,
  },
  name: "Referenced Overlay Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_STEREOMETRIC_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1134,
  },
  name: "Referenced Stereometric Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_WAVEFORM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x113A,
  },
  name: "Referenced Waveform Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1140,
  },
  name: "Referenced Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_CURVE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1145,
  },
  name: "Referenced Curve Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x114A,
  },
  name: "Referenced Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_REAL_WORLD_VALUE_MAPPING_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x114B,
  },
  name: "Referenced Real World Value Mapping Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_SOP_CLASS_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1150,
  },
  name: "Referenced SOP Class UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REFERENCED_SOP_INSTANCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1155,
  },
  name: "Referenced SOP Instance UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const DEFINITION_SOURCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1156,
  },
  name: "Definition Source Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOP_CLASSES_SUPPORTED: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x115A,
  },
  name: "SOP Classes Supported",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1_TO_N,
};

pub const REFERENCED_FRAME_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1160,
  },
  name: "Referenced Frame Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const SIMPLE_FRAME_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1161,
  },
  name: "Simple Frame List",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1_TO_N,
};

pub const CALCULATED_FRAME_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1162,
  },
  name: "Calculated Frame List",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_3_TO_N,
};

pub const TIME_RANGE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1163,
  },
  name: "Time Range",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2,
};

pub const FRAME_EXTRACTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1164,
  },
  name: "Frame Extraction Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MULTI_FRAME_SOURCE_SOP_INSTANCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1167,
  },
  name: "Multi-frame Source SOP Instance UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const RETRIEVE_URL: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1190,
  },
  name: "Retrieve URL",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const TRANSACTION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1195,
  },
  name: "Transaction UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const WARNING_REASON: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1196,
  },
  name: "Warning Reason",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const FAILURE_REASON: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1197,
  },
  name: "Failure Reason",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const FAILED_SOP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1198,
  },
  name: "Failed SOP Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_SOP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1199,
  },
  name: "Referenced SOP Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OTHER_FAILURES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x119A,
  },
  name: "Other Failures Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FAILED_STUDY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x119B,
  },
  name: "Failed Study Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STUDIES_CONTAINING_OTHER_REFERENCED_INSTANCES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1200,
  },
  name: "Studies Containing Other Referenced Instances Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RELATED_SERIES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x1250,
  },
  name: "Related Series Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LOSSY_IMAGE_COMPRESSION_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2110,
  },
  name: "Lossy Image Compression (Retired)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DERIVATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2111,
  },
  name: "Derivation Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const SOURCE_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2112,
  },
  name: "Source Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STAGE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2120,
  },
  name: "Stage Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const STAGE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2122,
  },
  name: "Stage Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_STAGES: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2124,
  },
  name: "Number of Stages",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const VIEW_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2127,
  },
  name: "View Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const VIEW_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2128,
  },
  name: "View Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_EVENT_TIMERS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2129,
  },
  name: "Number of Event Timers",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_VIEWS_IN_STAGE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x212A,
  },
  name: "Number of Views in Stage",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const EVENT_ELAPSED_TIMES: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2130,
  },
  name: "Event Elapsed Time(s)",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const EVENT_TIMER_NAMES: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2132,
  },
  name: "Event Timer Name(s)",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const EVENT_TIMER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2133,
  },
  name: "Event Timer Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EVENT_TIME_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2134,
  },
  name: "Event Time Offset",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const EVENT_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2135,
  },
  name: "Event Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const START_TRIM: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2142,
  },
  name: "Start Trim",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const STOP_TRIM: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2143,
  },
  name: "Stop Trim",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const RECOMMENDED_DISPLAY_FRAME_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2144,
  },
  name: "Recommended Display Frame Rate",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const TRANSDUCER_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2200,
  },
  name: "Transducer Position",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TRANSDUCER_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2204,
  },
  name: "Transducer Orientation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ANATOMIC_STRUCTURE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2208,
  },
  name: "Anatomic Structure",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ANATOMIC_REGION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2218,
  },
  name: "Anatomic Region Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANATOMIC_REGION_MODIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2220,
  },
  name: "Anatomic Region Modifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRIMARY_ANATOMIC_STRUCTURE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2228,
  },
  name: "Primary Anatomic Structure Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANATOMIC_STRUCTURE_SPACE_OR_REGION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2229,
  },
  name: "Anatomic Structure, Space or Region Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRIMARY_ANATOMIC_STRUCTURE_MODIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2230,
  },
  name: "Primary Anatomic Structure Modifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRANSDUCER_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2240,
  },
  name: "Transducer Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRANSDUCER_POSITION_MODIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2242,
  },
  name: "Transducer Position Modifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRANSDUCER_ORIENTATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2244,
  },
  name: "Transducer Orientation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRANSDUCER_ORIENTATION_MODIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2246,
  },
  name: "Transducer Orientation Modifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANATOMIC_STRUCTURE_SPACE_OR_REGION_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2251,
  },
  name: "Anatomic Structure Space Or Region Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANATOMIC_PORTAL_OF_ENTRANCE_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2253,
  },
  name: "Anatomic Portal Of Entrance Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANATOMIC_APPROACH_DIRECTION_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2255,
  },
  name: "Anatomic Approach Direction Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANATOMIC_PERSPECTIVE_DESCRIPTION_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2256,
  },
  name: "Anatomic Perspective Description (Trial)",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const ANATOMIC_PERSPECTIVE_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x2257,
  },
  name: "Anatomic Perspective Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_DESCRIPTION_TRIAL: Item =
  Item {
    tag: DataElementTag {
      group: 0x0008,
      element: 0x2258,
    },
    name: "Anatomic Location Of Examining Instrument Description (Trial)",
    vrs: &[ValueRepresentation::ShortText],
    multiplicity: VM_1,
  };

pub const ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_CODE_SEQUENCE_TRIAL: Item =
  Item {
    tag: DataElementTag {
      group: 0x0008,
      element: 0x2259,
    },
    name: "Anatomic Location Of Examining Instrument Code Sequence (Trial)",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const ANATOMIC_STRUCTURE_SPACE_OR_REGION_MODIFIER_CODE_SEQUENCE_TRIAL:
  Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x225A,
  },
  name: "Anatomic Structure Space Or Region Modifier Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ON_AXIS_BACKGROUND_ANATOMIC_STRUCTURE_CODE_SEQUENCE_TRIAL: Item =
  Item {
    tag: DataElementTag {
      group: 0x0008,
      element: 0x225C,
    },
    name: "On Axis Background Anatomic Structure Code Sequence (Trial)",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const ALTERNATE_REPRESENTATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x3001,
  },
  name: "Alternate Representation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const AVAILABLE_TRANSFER_SYNTAX_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x3002,
  },
  name: "Available Transfer Syntax UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1_TO_N,
};

pub const IRRADIATION_EVENT_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x3010,
  },
  name: "Irradiation Event UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1_TO_N,
};

pub const SOURCE_IRRADIATION_EVENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x3011,
  },
  name: "Source Irradiation Event Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIOPHARMACEUTICAL_ADMINISTRATION_EVENT_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x3012,
  },
  name: "Radiopharmaceutical Administration Event UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const IDENTIFYING_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x4000,
  },
  name: "Identifying Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const FRAME_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9007,
  },
  name: "Frame Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: ValueMultiplicity {
    min: 4,
    max: Some(5),
  },
};

pub const REFERENCED_IMAGE_EVIDENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9092,
  },
  name: "Referenced Image Evidence Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_RAW_DATA_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9121,
  },
  name: "Referenced Raw Data Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CREATOR_VERSION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9123,
  },
  name: "Creator-Version UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const DERIVATION_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9124,
  },
  name: "Derivation Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_IMAGE_EVIDENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9154,
  },
  name: "Source Image Evidence Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PIXEL_PRESENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9205,
  },
  name: "Pixel Presentation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VOLUMETRIC_PROPERTIES: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9206,
  },
  name: "Volumetric Properties",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VOLUME_BASED_CALCULATION_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9207,
  },
  name: "Volume Based Calculation Technique",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COMPLEX_IMAGE_COMPONENT: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9208,
  },
  name: "Complex Image Component",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ACQUISITION_CONTRAST: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9209,
  },
  name: "Acquisition Contrast",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DERIVATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9215,
  },
  name: "Derivation Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_PRESENTATION_STATE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9237,
  },
  name: "Referenced Presentation State Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_OTHER_PLANE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9410,
  },
  name: "Referenced Other Plane Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FRAME_DISPLAY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9458,
  },
  name: "Frame Display Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECOMMENDED_DISPLAY_FRAME_RATE_IN_FLOAT: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9459,
  },
  name: "Recommended Display Frame Rate in Float",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SKIP_FRAME_RANGE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0008,
    element: 0x9460,
  },
  name: "Skip Frame Range Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATIENT_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0010,
  },
  name: "Patient's Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const PATIENT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0020,
  },
  name: "Patient ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_PATIENT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0021,
  },
  name: "Issuer of Patient ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TYPE_OF_PATIENT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0022,
  },
  name: "Type of Patient ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_PATIENT_ID_QUALIFIERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0024,
  },
  name: "Issuer of Patient ID Qualifiers Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_PATIENT_GROUP_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0026,
  },
  name: "Source Patient Group Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GROUP_OF_PATIENTS_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0027,
  },
  name: "Group of Patients Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SUBJECT_RELATIVE_POSITION_IN_IMAGE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0028,
  },
  name: "Subject Relative Position in Image",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const PATIENT_BIRTH_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0030,
  },
  name: "Patient's Birth Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const PATIENT_BIRTH_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0032,
  },
  name: "Patient's Birth Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const PATIENT_BIRTH_DATE_IN_ALTERNATIVE_CALENDAR: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0033,
  },
  name: "Patient's Birth Date in Alternative Calendar",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_DEATH_DATE_IN_ALTERNATIVE_CALENDAR: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0034,
  },
  name: "Patient's Death Date in Alternative Calendar",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_ALTERNATIVE_CALENDAR: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0035,
  },
  name: "Patient's Alternative Calendar",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATIENT_SEX: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0040,
  },
  name: "Patient's Sex",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATIENT_INSURANCE_PLAN_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0050,
  },
  name: "Patient's Insurance Plan Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_PRIMARY_LANGUAGE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0101,
  },
  name: "Patient's Primary Language Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_PRIMARY_LANGUAGE_MODIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0102,
  },
  name: "Patient's Primary Language Modifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const QUALITY_CONTROL_SUBJECT: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0200,
  },
  name: "Quality Control Subject",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const QUALITY_CONTROL_SUBJECT_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0201,
  },
  name: "Quality Control Subject Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STRAIN_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0212,
  },
  name: "Strain Description",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1,
};

pub const STRAIN_NOMENCLATURE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0213,
  },
  name: "Strain Nomenclature",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const STRAIN_STOCK_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0214,
  },
  name: "Strain Stock Number",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const STRAIN_SOURCE_REGISTRY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0215,
  },
  name: "Strain Source Registry Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STRAIN_STOCK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0216,
  },
  name: "Strain Stock Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STRAIN_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0217,
  },
  name: "Strain Source",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const STRAIN_ADDITIONAL_INFORMATION: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0218,
  },
  name: "Strain Additional Information",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const STRAIN_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0219,
  },
  name: "Strain Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GENETIC_MODIFICATIONS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0221,
  },
  name: "Genetic Modifications Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GENETIC_MODIFICATIONS_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0222,
  },
  name: "Genetic Modifications Description",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1,
};

pub const GENETIC_MODIFICATIONS_NOMENCLATURE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0223,
  },
  name: "Genetic Modifications Nomenclature",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const GENETIC_MODIFICATIONS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x0229,
  },
  name: "Genetic Modifications Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OTHER_PATIENT_IDS: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1000,
  },
  name: "Other Patient IDs",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const OTHER_PATIENT_NAMES: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1001,
  },
  name: "Other Patient Names",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1_TO_N,
};

pub const OTHER_PATIENT_IDS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1002,
  },
  name: "Other Patient IDs Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_BIRTH_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1005,
  },
  name: "Patient's Birth Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const PATIENT_AGE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1010,
  },
  name: "Patient's Age",
  vrs: &[ValueRepresentation::AgeString],
  multiplicity: VM_1,
};

pub const PATIENT_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1020,
  },
  name: "Patient's Size",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PATIENT_SIZE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1021,
  },
  name: "Patient's Size Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_BODY_MASS_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1022,
  },
  name: "Patient's Body Mass Index",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MEASURED_AP_DIMENSION: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1023,
  },
  name: "Measured AP Dimension",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MEASURED_LATERAL_DIMENSION: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1024,
  },
  name: "Measured Lateral Dimension",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PATIENT_WEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1030,
  },
  name: "Patient's Weight",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PATIENT_ADDRESS: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1040,
  },
  name: "Patient's Address",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const INSURANCE_PLAN_IDENTIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1050,
  },
  name: "Insurance Plan Identification",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const PATIENT_MOTHER_BIRTH_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1060,
  },
  name: "Patient's Mother's Birth Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const MILITARY_RANK: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1080,
  },
  name: "Military Rank",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const BRANCH_OF_SERVICE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1081,
  },
  name: "Branch of Service",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const MEDICAL_RECORD_LOCATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1090,
  },
  name: "Medical Record Locator",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REFERENCED_PATIENT_PHOTO_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x1100,
  },
  name: "Referenced Patient Photo Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MEDICAL_ALERTS: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2000,
  },
  name: "Medical Alerts",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const ALLERGIES: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2110,
  },
  name: "Allergies",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const COUNTRY_OF_RESIDENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2150,
  },
  name: "Country of Residence",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REGION_OF_RESIDENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2152,
  },
  name: "Region of Residence",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_TELEPHONE_NUMBERS: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2154,
  },
  name: "Patient's Telephone Numbers",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1_TO_N,
};

pub const PATIENT_TELECOM_INFORMATION: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2155,
  },
  name: "Patient's Telecom Information",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const ETHNIC_GROUP: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2160,
  },
  name: "Ethnic Group",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const OCCUPATION: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2180,
  },
  name: "Occupation",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SMOKING_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x21A0,
  },
  name: "Smoking Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ADDITIONAL_PATIENT_HISTORY: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x21B0,
  },
  name: "Additional Patient History",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const PREGNANCY_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x21C0,
  },
  name: "Pregnancy Status",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const LAST_MENSTRUAL_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x21D0,
  },
  name: "Last Menstrual Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const PATIENT_RELIGIOUS_PREFERENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x21F0,
  },
  name: "Patient's Religious Preference",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_SPECIES_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2201,
  },
  name: "Patient Species Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_SPECIES_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2202,
  },
  name: "Patient Species Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_SEX_NEUTERED: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2203,
  },
  name: "Patient's Sex Neutered",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ANATOMICAL_ORIENTATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2210,
  },
  name: "Anatomical Orientation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATIENT_BREED_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2292,
  },
  name: "Patient Breed Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_BREED_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2293,
  },
  name: "Patient Breed Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BREED_REGISTRATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2294,
  },
  name: "Breed Registration Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BREED_REGISTRATION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2295,
  },
  name: "Breed Registration Number",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const BREED_REGISTRY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2296,
  },
  name: "Breed Registry Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RESPONSIBLE_PERSON: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2297,
  },
  name: "Responsible Person",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const RESPONSIBLE_PERSON_ROLE: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2298,
  },
  name: "Responsible Person Role",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RESPONSIBLE_ORGANIZATION: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x2299,
  },
  name: "Responsible Organization",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x4000,
  },
  name: "Patient Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const EXAMINED_BODY_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0010,
    element: 0x9431,
  },
  name: "Examined Body Thickness",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_SPONSOR_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0010,
  },
  name: "Clinical Trial Sponsor Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_PROTOCOL_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0020,
  },
  name: "Clinical Trial Protocol ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_PROTOCOL_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0021,
  },
  name: "Clinical Trial Protocol Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_CLINICAL_TRIAL_PROTOCOL_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0022,
  },
  name: "Issuer of Clinical Trial Protocol ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const OTHER_CLINICAL_TRIAL_PROTOCOL_IDS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0023,
  },
  name: "Other Clinical Trial Protocol IDs Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_SITE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0030,
  },
  name: "Clinical Trial Site ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_SITE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0031,
  },
  name: "Clinical Trial Site Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_CLINICAL_TRIAL_SITE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0032,
  },
  name: "Issuer of Clinical Trial Site ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_SUBJECT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0040,
  },
  name: "Clinical Trial Subject ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_CLINICAL_TRIAL_SUBJECT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0041,
  },
  name: "Issuer of Clinical Trial Subject ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_SUBJECT_READING_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0042,
  },
  name: "Clinical Trial Subject Reading ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_CLINICAL_TRIAL_SUBJECT_READING_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0043,
  },
  name: "Issuer of Clinical Trial Subject Reading ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_TIME_POINT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0050,
  },
  name: "Clinical Trial Time Point ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_TIME_POINT_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0051,
  },
  name: "Clinical Trial Time Point Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const LONGITUDINAL_TEMPORAL_OFFSET_FROM_EVENT: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0052,
  },
  name: "Longitudinal Temporal Offset from Event",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const LONGITUDINAL_TEMPORAL_EVENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0053,
  },
  name: "Longitudinal Temporal Event Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_TIME_POINT_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0054,
  },
  name: "Clinical Trial Time Point Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ISSUER_OF_CLINICAL_TRIAL_TIME_POINT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0055,
  },
  name: "Issuer of Clinical Trial Time Point ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_COORDINATING_CENTER_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0060,
  },
  name: "Clinical Trial Coordinating Center Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_IDENTITY_REMOVED: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0062,
  },
  name: "Patient Identity Removed",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DEIDENTIFICATION_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0063,
  },
  name: "De-identification Method",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const DEIDENTIFICATION_METHOD_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0064,
  },
  name: "De-identification Method Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_SERIES_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0071,
  },
  name: "Clinical Trial Series ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_SERIES_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0072,
  },
  name: "Clinical Trial Series Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_CLINICAL_TRIAL_SERIES_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0073,
  },
  name: "Issuer of Clinical Trial Series ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0081,
  },
  name: "Clinical Trial Protocol Ethics Committee Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_APPROVAL_NUMBER: Item =
  Item {
    tag: DataElementTag {
      group: 0x0012,
      element: 0x0082,
    },
    name: "Clinical Trial Protocol Ethics Committee Approval Number",
    vrs: &[ValueRepresentation::LongString],
    multiplicity: VM_1,
  };

pub const CONSENT_FOR_CLINICAL_TRIAL_USE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0083,
  },
  name: "Consent for Clinical Trial Use Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DISTRIBUTION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0084,
  },
  name: "Distribution Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONSENT_FOR_DISTRIBUTION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0085,
  },
  name: "Consent for Distribution Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ETHICS_COMMITTEE_APPROVAL_EFFECTIVENESS_START_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0086,
  },
  name: "Ethics Committee Approval Effectiveness Start Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const ETHICS_COMMITTEE_APPROVAL_EFFECTIVENESS_END_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0012,
    element: 0x0087,
  },
  name: "Ethics Committee Approval Effectiveness End Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const CAD_FILE_FORMAT: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0023,
  },
  name: "CAD File Format",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const COMPONENT_REFERENCE_SYSTEM: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0024,
  },
  name: "Component Reference System",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const COMPONENT_MANUFACTURING_PROCEDURE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0025,
  },
  name: "Component Manufacturing Procedure",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const COMPONENT_MANUFACTURER: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0028,
  },
  name: "Component Manufacturer",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const MATERIAL_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0030,
  },
  name: "Material Thickness",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const MATERIAL_PIPE_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0032,
  },
  name: "Material Pipe Diameter",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const MATERIAL_ISOLATION_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0034,
  },
  name: "Material Isolation Diameter",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const MATERIAL_GRADE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0042,
  },
  name: "Material Grade",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const MATERIAL_PROPERTIES_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0044,
  },
  name: "Material Properties Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const MATERIAL_PROPERTIES_FILE_FORMAT_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0045,
  },
  name: "Material Properties File Format (Retired)",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const MATERIAL_NOTES: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0046,
  },
  name: "Material Notes",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const COMPONENT_SHAPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0050,
  },
  name: "Component Shape",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CURVATURE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0052,
  },
  name: "Curvature Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OUTER_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0054,
  },
  name: "Outer Diameter",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const INNER_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0056,
  },
  name: "Inner Diameter",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const COMPONENT_WELDER_IDS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0100,
  },
  name: "Component Welder IDs",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const SECONDARY_APPROVAL_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0101,
  },
  name: "Secondary Approval Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SECONDARY_REVIEW_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0102,
  },
  name: "Secondary Review Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const SECONDARY_REVIEW_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0103,
  },
  name: "Secondary Review Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const SECONDARY_REVIEWER_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0104,
  },
  name: "Secondary Reviewer Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const REPAIR_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0105,
  },
  name: "Repair ID",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const MULTIPLE_COMPONENT_APPROVAL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0106,
  },
  name: "Multiple Component Approval Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OTHER_APPROVAL_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0107,
  },
  name: "Other Approval Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const OTHER_SECONDARY_APPROVAL_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0108,
  },
  name: "Other Secondary Approval Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const DATA_ELEMENT_LABEL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0200,
  },
  name: "Data Element Label Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DATA_ELEMENT_LABEL_ITEM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0201,
  },
  name: "Data Element Label Item Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DATA_ELEMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0202,
  },
  name: "Data Element",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1,
};

pub const DATA_ELEMENT_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0203,
  },
  name: "Data Element Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DATA_ELEMENT_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0204,
  },
  name: "Data Element Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DATA_ELEMENT_CONDITIONALITY: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0205,
  },
  name: "Data Element Conditionality",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DATA_ELEMENT_MINIMUM_CHARACTERS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0206,
  },
  name: "Data Element Minimum Characters",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const DATA_ELEMENT_MAXIMUM_CHARACTERS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x0207,
  },
  name: "Data Element Maximum Characters",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ACTUAL_ENVIRONMENTAL_CONDITIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x1010,
  },
  name: "Actual Environmental Conditions",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const EXPIRY_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x1020,
  },
  name: "Expiry Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const ENVIRONMENTAL_CONDITIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x1040,
  },
  name: "Environmental Conditions",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const EVALUATOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2002,
  },
  name: "Evaluator Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EVALUATOR_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2004,
  },
  name: "Evaluator Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const EVALUATOR_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2006,
  },
  name: "Evaluator Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const EVALUATION_ATTEMPT: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2008,
  },
  name: "Evaluation Attempt",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const INDICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2012,
  },
  name: "Indication Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INDICATION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2014,
  },
  name: "Indication Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const INDICATION_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2016,
  },
  name: "Indication Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const INDICATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2018,
  },
  name: "Indication Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const INDICATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x201A,
  },
  name: "Indication Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const INDICATION_DISPOSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x201C,
  },
  name: "Indication Disposition",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INDICATION_ROI_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x201E,
  },
  name: "Indication ROI Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INDICATION_PHYSICAL_PROPERTY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2030,
  },
  name: "Indication Physical Property Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PROPERTY_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2032,
  },
  name: "Property Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const COORDINATE_SYSTEM_NUMBER_OF_AXES: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2202,
  },
  name: "Coordinate System Number of Axes",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COORDINATE_SYSTEM_AXES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2204,
  },
  name: "Coordinate System Axes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COORDINATE_SYSTEM_AXIS_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2206,
  },
  name: "Coordinate System Axis Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const COORDINATE_SYSTEM_DATA_SET_MAPPING: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2208,
  },
  name: "Coordinate System Data Set Mapping",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COORDINATE_SYSTEM_AXIS_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x220A,
  },
  name: "Coordinate System Axis Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COORDINATE_SYSTEM_AXIS_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x220C,
  },
  name: "Coordinate System Axis Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COORDINATE_SYSTEM_AXIS_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x220E,
  },
  name: "Coordinate System Axis Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COORDINATE_SYSTEM_AXIS_VALUES: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2210,
  },
  name: "Coordinate System Axis Values",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const COORDINATE_SYSTEM_TRANSFORM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2220,
  },
  name: "Coordinate System Transform Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRANSFORM_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2222,
  },
  name: "Transform Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const TRANSFORM_NUMBER_OF_AXES: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2224,
  },
  name: "Transform Number of Axes",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const TRANSFORM_ORDER_OF_AXES: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2226,
  },
  name: "Transform Order of Axes",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const TRANSFORMED_AXIS_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x2228,
  },
  name: "Transformed Axis Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COORDINATE_SYSTEM_TRANSFORM_ROTATION_AND_SCALE_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x222A,
  },
  name: "Coordinate System Transform Rotation and Scale Matrix",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const COORDINATE_SYSTEM_TRANSFORM_TRANSLATION_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x222C,
  },
  name: "Coordinate System Transform Translation Matrix",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const INTERNAL_DETECTOR_FRAME_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3011,
  },
  name: "Internal Detector Frame Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FRAMES_INTEGRATED: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3012,
  },
  name: "Number of Frames Integrated",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DETECTOR_TEMPERATURE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3020,
  },
  name: "Detector Temperature Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SENSOR_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3022,
  },
  name: "Sensor Name",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const HORIZONTAL_OFFSET_OF_SENSOR: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3024,
  },
  name: "Horizontal Offset of Sensor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const VERTICAL_OFFSET_OF_SENSOR: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3026,
  },
  name: "Vertical Offset of Sensor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SENSOR_TEMPERATURE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3028,
  },
  name: "Sensor Temperature",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DARK_CURRENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3040,
  },
  name: "Dark Current Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DARK_CURRENT_COUNTS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3050,
  },
  name: "Dark Current Counts",
  vrs: &[
    ValueRepresentation::OtherByteString,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1,
};

pub const GAIN_CORRECTION_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3060,
  },
  name: "Gain Correction Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const AIR_COUNTS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3070,
  },
  name: "Air Counts",
  vrs: &[
    ValueRepresentation::OtherByteString,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1,
};

pub const KV_USED_IN_GAIN_CALIBRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3071,
  },
  name: "KV Used in Gain Calibration",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MA_USED_IN_GAIN_CALIBRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3072,
  },
  name: "MA Used in Gain Calibration",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FRAMES_USED_FOR_INTEGRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3073,
  },
  name: "Number of Frames Used for Integration",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FILTER_MATERIAL_USED_IN_GAIN_CALIBRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3074,
  },
  name: "Filter Material Used in Gain Calibration",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const FILTER_THICKNESS_USED_IN_GAIN_CALIBRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3075,
  },
  name: "Filter Thickness Used in Gain Calibration",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DATE_OF_GAIN_CALIBRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3076,
  },
  name: "Date of Gain Calibration",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const TIME_OF_GAIN_CALIBRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3077,
  },
  name: "Time of Gain Calibration",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const BAD_PIXEL_IMAGE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3080,
  },
  name: "Bad Pixel Image",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const CALIBRATION_NOTES: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3099,
  },
  name: "Calibration Notes",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const LINEARITY_CORRECTION_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3100,
  },
  name: "Linearity Correction Technique",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const BEAM_HARDENING_CORRECTION_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x3101,
  },
  name: "Beam Hardening Correction Technique",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const PULSER_EQUIPMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4002,
  },
  name: "Pulser Equipment Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PULSER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4004,
  },
  name: "Pulser Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PULSER_NOTES: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4006,
  },
  name: "Pulser Notes",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const RECEIVER_EQUIPMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4008,
  },
  name: "Receiver Equipment Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const AMPLIFIER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x400A,
  },
  name: "Amplifier Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RECEIVER_NOTES: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x400C,
  },
  name: "Receiver Notes",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const PRE_AMPLIFIER_EQUIPMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x400E,
  },
  name: "Pre-Amplifier Equipment Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRE_AMPLIFIER_NOTES: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x400F,
  },
  name: "Pre-Amplifier Notes",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const TRANSMIT_TRANSDUCER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4010,
  },
  name: "Transmit Transducer Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECEIVE_TRANSDUCER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4011,
  },
  name: "Receive Transducer Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_ELEMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4012,
  },
  name: "Number of Elements",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ELEMENT_SHAPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4013,
  },
  name: "Element Shape",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ELEMENT_DIMENSION_A: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4014,
  },
  name: "Element Dimension A",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ELEMENT_DIMENSION_B: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4015,
  },
  name: "Element Dimension B",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ELEMENT_PITCH_A: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4016,
  },
  name: "Element Pitch A",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MEASURED_BEAM_DIMENSION_A: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4017,
  },
  name: "Measured Beam Dimension A",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MEASURED_BEAM_DIMENSION_B: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4018,
  },
  name: "Measured Beam Dimension B",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const LOCATION_OF_MEASURED_BEAM_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4019,
  },
  name: "Location of Measured Beam Diameter",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const NOMINAL_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x401A,
  },
  name: "Nominal Frequency",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MEASURED_CENTER_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x401B,
  },
  name: "Measured Center Frequency",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MEASURED_BANDWIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x401C,
  },
  name: "Measured Bandwidth",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ELEMENT_PITCH_B: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x401D,
  },
  name: "Element Pitch B",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PULSER_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4020,
  },
  name: "Pulser Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PULSE_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4022,
  },
  name: "Pulse Width",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const EXCITATION_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4024,
  },
  name: "Excitation Frequency",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MODULATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4026,
  },
  name: "Modulation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DAMPING: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4028,
  },
  name: "Damping",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RECEIVER_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4030,
  },
  name: "Receiver Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUIRED_SOUNDPATH_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4031,
  },
  name: "Acquired Soundpath Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ACQUISITION_COMPRESSION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4032,
  },
  name: "Acquisition Compression Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ACQUISITION_SAMPLE_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4033,
  },
  name: "Acquisition Sample Size",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const RECTIFIER_SMOOTHING: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4034,
  },
  name: "Rectifier Smoothing",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DAC_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4035,
  },
  name: "DAC Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DAC_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4036,
  },
  name: "DAC Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DAC_GAIN_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4038,
  },
  name: "DAC Gain Points",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const DAC_TIME_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x403A,
  },
  name: "DAC Time Points",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const DAC_AMPLITUDE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x403C,
  },
  name: "DAC Amplitude",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const PRE_AMPLIFIER_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4040,
  },
  name: "Pre-Amplifier Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRANSMIT_TRANSDUCER_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4050,
  },
  name: "Transmit Transducer Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECEIVE_TRANSDUCER_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4051,
  },
  name: "Receive Transducer Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INCIDENT_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4052,
  },
  name: "Incident Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const COUPLING_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4054,
  },
  name: "Coupling Technique",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const COUPLING_MEDIUM: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4056,
  },
  name: "Coupling Medium",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const COUPLING_VELOCITY: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4057,
  },
  name: "Coupling Velocity",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PROBE_CENTER_LOCATION_X: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4058,
  },
  name: "Probe Center Location X",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PROBE_CENTER_LOCATION_Z: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4059,
  },
  name: "Probe Center Location Z",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOUND_PATH_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x405A,
  },
  name: "Sound Path Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DELAY_LAW_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x405C,
  },
  name: "Delay Law Identifier",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const GATE_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4060,
  },
  name: "Gate Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GATE_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4062,
  },
  name: "Gate Threshold",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const VELOCITY_OF_SOUND: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4064,
  },
  name: "Velocity of Sound",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CALIBRATION_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4070,
  },
  name: "Calibration Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CALIBRATION_PROCEDURE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4072,
  },
  name: "Calibration Procedure",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const PROCEDURE_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4074,
  },
  name: "Procedure Version",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const PROCEDURE_CREATION_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4076,
  },
  name: "Procedure Creation Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const PROCEDURE_EXPIRATION_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4078,
  },
  name: "Procedure Expiration Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const PROCEDURE_LAST_MODIFIED_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x407A,
  },
  name: "Procedure Last Modified Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const CALIBRATION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x407C,
  },
  name: "Calibration Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1_TO_N,
};

pub const CALIBRATION_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x407E,
  },
  name: "Calibration Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1_TO_N,
};

pub const PROBE_DRIVE_EQUIPMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4080,
  },
  name: "Probe Drive Equipment Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DRIVE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4081,
  },
  name: "Drive Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PROBE_DRIVE_NOTES: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4082,
  },
  name: "Probe Drive Notes",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const DRIVE_PROBE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4083,
  },
  name: "Drive Probe Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PROBE_INDUCTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4084,
  },
  name: "Probe Inductance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PROBE_RESISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4085,
  },
  name: "Probe Resistance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RECEIVE_PROBE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4086,
  },
  name: "Receive Probe Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PROBE_DRIVE_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4087,
  },
  name: "Probe Drive Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BRIDGE_RESISTORS: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4088,
  },
  name: "Bridge Resistors",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PROBE_ORIENTATION_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4089,
  },
  name: "Probe Orientation Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const USER_SELECTED_GAIN_Y: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x408B,
  },
  name: "User Selected Gain Y",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const USER_SELECTED_PHASE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x408C,
  },
  name: "User Selected Phase",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const USER_SELECTED_OFFSET_X: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x408D,
  },
  name: "User Selected Offset X",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const USER_SELECTED_OFFSET_Y: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x408E,
  },
  name: "User Selected Offset Y",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4091,
  },
  name: "Channel Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CHANNEL_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x4092,
  },
  name: "Channel Threshold",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SCANNER_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x409A,
  },
  name: "Scanner Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCAN_PROCEDURE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x409B,
  },
  name: "Scan Procedure",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const TRANSLATION_RATE_X: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x409C,
  },
  name: "Translation Rate X",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TRANSLATION_RATE_Y: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x409D,
  },
  name: "Translation Rate Y",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_OVERLAP: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x409F,
  },
  name: "Channel Overlap",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const IMAGE_QUALITY_INDICATOR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x40A0,
  },
  name: "Image Quality Indicator Type",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const IMAGE_QUALITY_INDICATOR_MATERIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x40A1,
  },
  name: "Image Quality Indicator Material",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const IMAGE_QUALITY_INDICATOR_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x40A2,
  },
  name: "Image Quality Indicator Size",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const LINAC_ENERGY: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5002,
  },
  name: "LINAC Energy",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const LINAC_OUTPUT: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5004,
  },
  name: "LINAC Output",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ACTIVE_APERTURE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5100,
  },
  name: "Active Aperture",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const TOTAL_APERTURE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5101,
  },
  name: "Total Aperture",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const APERTURE_ELEVATION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5102,
  },
  name: "Aperture Elevation",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MAIN_LOBE_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5103,
  },
  name: "Main Lobe Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MAIN_ROOF_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5104,
  },
  name: "Main Roof Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONNECTOR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5105,
  },
  name: "Connector Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const WEDGE_MODEL_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5106,
  },
  name: "Wedge Model Number",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const WEDGE_ANGLE_FLOAT: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5107,
  },
  name: "Wedge Angle Float",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_ROOF_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5108,
  },
  name: "Wedge Roof Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_ELEMENT_1_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5109,
  },
  name: "Wedge Element 1 Position",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const WEDGE_MATERIAL_VELOCITY: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x510A,
  },
  name: "Wedge Material Velocity",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_MATERIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x510B,
  },
  name: "Wedge Material",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const WEDGE_OFFSET_Z: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x510C,
  },
  name: "Wedge Offset Z",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_ORIGIN_OFFSET_X: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x510D,
  },
  name: "Wedge Origin Offset X",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_TIME_DELAY: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x510E,
  },
  name: "Wedge Time Delay",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x510F,
  },
  name: "Wedge Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const WEDGE_MANUFACTURER_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5110,
  },
  name: "Wedge Manufacturer Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const WEDGE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5111,
  },
  name: "Wedge Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const NOMINAL_BEAM_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5112,
  },
  name: "Nominal Beam Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_OFFSET_X: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5113,
  },
  name: "Wedge Offset X",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_OFFSET_Y: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5114,
  },
  name: "Wedge Offset Y",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_TOTAL_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5115,
  },
  name: "Wedge Total Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_IN_CONTACT_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5116,
  },
  name: "Wedge In Contact Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_FRONT_GAP: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5117,
  },
  name: "Wedge Front Gap",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_TOTAL_HEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5118,
  },
  name: "Wedge Total Height",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_FRONT_HEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x5119,
  },
  name: "Wedge Front Height",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_REAR_HEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x511A,
  },
  name: "Wedge Rear Height",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_TOTAL_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x511B,
  },
  name: "Wedge Total Width",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_IN_CONTACT_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x511C,
  },
  name: "Wedge In Contact Width",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_CHAMFER_HEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x511D,
  },
  name: "Wedge Chamfer Height",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_CURVE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x511E,
  },
  name: "Wedge Curve",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RADIUS_ALONG_WEDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0014,
    element: 0x511F,
  },
  name: "Radius Along the Wedge",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WHITE_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0001,
  },
  name: "White Point",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PRIMARY_CHROMATICITIES: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0002,
  },
  name: "Primary Chromaticities",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const BATTERY_LEVEL: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0003,
  },
  name: "Battery Level",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const EXPOSURE_TIME_IN_SECONDS: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0004,
  },
  name: "Exposure Time in Seconds",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const F_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0005,
  },
  name: "F-Number",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const OECF_ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0006,
  },
  name: "OECF Rows",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const OECF_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0007,
  },
  name: "OECF Columns",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const OECF_COLUMN_NAMES: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0008,
  },
  name: "OECF Column Names",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1_TO_N,
};

pub const OECF_VALUES: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0009,
  },
  name: "OECF Values",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const SPATIAL_FREQUENCY_RESPONSE_ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x000A,
  },
  name: "Spatial Frequency Response Rows",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SPATIAL_FREQUENCY_RESPONSE_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x000B,
  },
  name: "Spatial Frequency Response Columns",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SPATIAL_FREQUENCY_RESPONSE_COLUMN_NAMES: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x000C,
  },
  name: "Spatial Frequency Response Column Names",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1_TO_N,
};

pub const SPATIAL_FREQUENCY_RESPONSE_VALUES: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x000D,
  },
  name: "Spatial Frequency Response Values",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const COLOR_FILTER_ARRAY_PATTERN_ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x000E,
  },
  name: "Color Filter Array Pattern Rows",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COLOR_FILTER_ARRAY_PATTERN_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x000F,
  },
  name: "Color Filter Array Pattern Columns",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COLOR_FILTER_ARRAY_PATTERN_VALUES: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0010,
  },
  name: "Color Filter Array Pattern Values",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const FLASH_FIRING_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0011,
  },
  name: "Flash Firing Status",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const FLASH_RETURN_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0012,
  },
  name: "Flash Return Status",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const FLASH_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0013,
  },
  name: "Flash Mode",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const FLASH_FUNCTION_PRESENT: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0014,
  },
  name: "Flash Function Present",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const FLASH_RED_EYE_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0015,
  },
  name: "Flash Red Eye Mode",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const EXPOSURE_PROGRAM: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0016,
  },
  name: "Exposure Program",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SPECTRAL_SENSITIVITY: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0017,
  },
  name: "Spectral Sensitivity",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const PHOTOGRAPHIC_SENSITIVITY: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0018,
  },
  name: "Photographic Sensitivity",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SELF_TIMER_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0019,
  },
  name: "Self Timer Mode",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SENSITIVITY_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x001A,
  },
  name: "Sensitivity Type",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const STANDARD_OUTPUT_SENSITIVITY: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x001B,
  },
  name: "Standard Output Sensitivity",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const RECOMMENDED_EXPOSURE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x001C,
  },
  name: "Recommended Exposure Index",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ISO_SPEED: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x001D,
  },
  name: "ISO Speed",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ISO_SPEED_LATITUDE_YYY: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x001E,
  },
  name: "ISO Speed Latitude yyy",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ISO_SPEED_LATITUDE_ZZZ: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x001F,
  },
  name: "ISO Speed Latitude zzz",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const EXIF_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0020,
  },
  name: "EXIF Version",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const SHUTTER_SPEED_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0021,
  },
  name: "Shutter Speed Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const APERTURE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0022,
  },
  name: "Aperture Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BRIGHTNESS_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0023,
  },
  name: "Brightness Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const EXPOSURE_BIAS_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0024,
  },
  name: "Exposure Bias Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MAX_APERTURE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0025,
  },
  name: "Max Aperture Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SUBJECT_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0026,
  },
  name: "Subject Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const METERING_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0027,
  },
  name: "Metering Mode",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const LIGHT_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0028,
  },
  name: "Light Source",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const FOCAL_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0029,
  },
  name: "Focal Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SUBJECT_AREA: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x002A,
  },
  name: "Subject Area",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: ValueMultiplicity {
    min: 2,
    max: Some(4),
  },
};

pub const MAKER_NOTE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x002B,
  },
  name: "Maker Note",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const TEMPERATURE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0030,
  },
  name: "Temperature",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const HUMIDITY: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0031,
  },
  name: "Humidity",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PRESSURE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0032,
  },
  name: "Pressure",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WATER_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0033,
  },
  name: "Water Depth",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ACCELERATION: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0034,
  },
  name: "Acceleration",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CAMERA_ELEVATION_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0035,
  },
  name: "Camera Elevation Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FLASH_ENERGY: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0036,
  },
  name: "Flash Energy",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_2,
};

pub const SUBJECT_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0037,
  },
  name: "Subject Location",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_2,
};

pub const PHOTOGRAPHIC_EXPOSURE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0038,
  },
  name: "Photographic Exposure Index",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SENSING_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0039,
  },
  name: "Sensing Method",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const FILE_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x003A,
  },
  name: "File Source",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SCENE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x003B,
  },
  name: "Scene Type",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CUSTOM_RENDERED: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0041,
  },
  name: "Custom Rendered",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const EXPOSURE_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0042,
  },
  name: "Exposure Mode",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const WHITE_BALANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0043,
  },
  name: "White Balance",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DIGITAL_ZOOM_RATIO: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0044,
  },
  name: "Digital Zoom Ratio",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FOCAL_LENGTH_IN_3_5MM_FILM: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0045,
  },
  name: "Focal Length In 35mm Film",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SCENE_CAPTURE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0046,
  },
  name: "Scene Capture Type",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const GAIN_CONTROL: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0047,
  },
  name: "Gain Control",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CONTRAST: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0048,
  },
  name: "Contrast",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SATURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0049,
  },
  name: "Saturation",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SHARPNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x004A,
  },
  name: "Sharpness",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DEVICE_SETTING_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x004B,
  },
  name: "Device Setting Description",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const SUBJECT_DISTANCE_RANGE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x004C,
  },
  name: "Subject Distance Range",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CAMERA_OWNER_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x004D,
  },
  name: "Camera Owner Name",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const LENS_SPECIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x004E,
  },
  name: "Lens Specification",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_4,
};

pub const LENS_MAKE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x004F,
  },
  name: "Lens Make",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const LENS_MODEL: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0050,
  },
  name: "Lens Model",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const LENS_SERIAL_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0051,
  },
  name: "Lens Serial Number",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const INTEROPERABILITY_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0061,
  },
  name: "Interoperability Index",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INTEROPERABILITY_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0062,
  },
  name: "Interoperability Version",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const GPS_VERSION_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0070,
  },
  name: "GPS Version ID",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const GPS_LATITUDE_REF: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0071,
  },
  name: "GPS Latitude Ref",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GPS_LATITUDE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0072,
  },
  name: "GPS Latitude",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const GPS_LONGITUDE_REF: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0073,
  },
  name: "GPS Longitude Ref",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GPS_LONGITUDE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0074,
  },
  name: "GPS Longitude",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const GPS_ALTITUDE_REF: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0075,
  },
  name: "GPS Altitude Ref",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const GPS_ALTITUDE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0076,
  },
  name: "GPS Altitude",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GPS_TIME_STAMP: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0077,
  },
  name: "GPS Time Stamp",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const GPS_SATELLITES: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0078,
  },
  name: "GPS Satellites",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const GPS_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0079,
  },
  name: "GPS Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GPS_MEASURE_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x007A,
  },
  name: "GPS Measure Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GPSDOP: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x007B,
  },
  name: "GPS DOP",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GPS_SPEED_REF: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x007C,
  },
  name: "GPS Speed Ref",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GPS_SPEED: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x007D,
  },
  name: "GPS Speed",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GPS_TRACK_REF: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x007E,
  },
  name: "GPS Track Ref",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GPS_TRACK: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x007F,
  },
  name: "GPS Track",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GPS_IMG_DIRECTION_REF: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0080,
  },
  name: "GPS Img Direction Ref",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GPS_IMG_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0081,
  },
  name: "GPS Img Direction",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GPS_MAP_DATUM: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0082,
  },
  name: "GPS Map Datum",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const GPS_DEST_LATITUDE_REF: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0083,
  },
  name: "GPS Dest Latitude Ref",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GPS_DEST_LATITUDE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0084,
  },
  name: "GPS Dest Latitude",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const GPS_DEST_LONGITUDE_REF: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0085,
  },
  name: "GPS Dest Longitude Ref",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GPS_DEST_LONGITUDE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0086,
  },
  name: "GPS Dest Longitude",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const GPS_DEST_BEARING_REF: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0087,
  },
  name: "GPS Dest Bearing Ref",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GPS_DEST_BEARING: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0088,
  },
  name: "GPS Dest Bearing",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GPS_DEST_DISTANCE_REF: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x0089,
  },
  name: "GPS Dest Distance Ref",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GPS_DEST_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x008A,
  },
  name: "GPS Dest Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GPS_PROCESSING_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x008B,
  },
  name: "GPS Processing Method",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const GPS_AREA_INFORMATION: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x008C,
  },
  name: "GPS Area Information",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const GPS_DATE_STAMP: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x008D,
  },
  name: "GPS Date Stamp",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const GPS_DIFFERENTIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x008E,
  },
  name: "GPS Differential",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const LIGHT_SOURCE_POLARIZATION: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x1001,
  },
  name: "Light Source Polarization",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EMITTER_COLOR_TEMPERATURE: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x1002,
  },
  name: "Emitter Color Temperature",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONTACT_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x1003,
  },
  name: "Contact Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMMERSION_MEDIA: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x1004,
  },
  name: "Immersion Media",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const OPTICAL_MAGNIFICATION_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0016,
    element: 0x1005,
  },
  name: "Optical Magnification Factor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_AGENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0010,
  },
  name: "Contrast/Bolus Agent",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_AGENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0012,
  },
  name: "Contrast/Bolus Agent Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_T1_RELAXIVITY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0013,
  },
  name: "Contrast/Bolus T1 Relaxivity",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_ADMINISTRATION_ROUTE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0014,
  },
  name: "Contrast/Bolus Administration Route Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BODY_PART_EXAMINED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0015,
  },
  name: "Body Part Examined",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SCANNING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0020,
  },
  name: "Scanning Sequence",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const SEQUENCE_VARIANT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0021,
  },
  name: "Sequence Variant",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const SCAN_OPTIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0022,
  },
  name: "Scan Options",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const MR_ACQUISITION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0023,
  },
  name: "MR Acquisition Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SEQUENCE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0024,
  },
  name: "Sequence Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const ANGIO_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0025,
  },
  name: "Angio Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INTERVENTION_DRUG_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0026,
  },
  name: "Intervention Drug Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTERVENTION_DRUG_STOP_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0027,
  },
  name: "Intervention Drug Stop Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const INTERVENTION_DRUG_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0028,
  },
  name: "Intervention Drug Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const INTERVENTION_DRUG_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0029,
  },
  name: "Intervention Drug Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ADDITIONAL_DRUG_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x002A,
  },
  name: "Additional Drug Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIONUCLIDE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0030,
  },
  name: "Radionuclide",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const RADIOPHARMACEUTICAL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0031,
  },
  name: "Radiopharmaceutical",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ENERGY_WINDOW_CENTERLINE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0032,
  },
  name: "Energy Window Centerline",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ENERGY_WINDOW_TOTAL_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0033,
  },
  name: "Energy Window Total Width",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const INTERVENTION_DRUG_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0034,
  },
  name: "Intervention Drug Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const INTERVENTION_DRUG_START_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0035,
  },
  name: "Intervention Drug Start Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const INTERVENTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0036,
  },
  name: "Intervention Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const THERAPY_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0037,
  },
  name: "Therapy Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INTERVENTION_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0038,
  },
  name: "Intervention Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const THERAPY_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0039,
  },
  name: "Therapy Description",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INTERVENTION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x003A,
  },
  name: "Intervention Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const CINE_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0040,
  },
  name: "Cine Rate",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const INITIAL_CINE_RUN_STATE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0042,
  },
  name: "Initial Cine Run State",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SLICE_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0050,
  },
  name: "Slice Thickness",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const KVP: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0060,
  },
  name: "KVP",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const COUNTS_ACCUMULATED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0070,
  },
  name: "Counts Accumulated",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ACQUISITION_TERMINATION_CONDITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0071,
  },
  name: "Acquisition Termination Condition",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EFFECTIVE_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0072,
  },
  name: "Effective Duration",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ACQUISITION_START_CONDITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0073,
  },
  name: "Acquisition Start Condition",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ACQUISITION_START_CONDITION_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0074,
  },
  name: "Acquisition Start Condition Data",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ACQUISITION_TERMINATION_CONDITION_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0075,
  },
  name: "Acquisition Termination Condition Data",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REPETITION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0080,
  },
  name: "Repetition Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ECHO_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0081,
  },
  name: "Echo Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const INVERSION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0082,
  },
  name: "Inversion Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_AVERAGES: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0083,
  },
  name: "Number of Averages",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const IMAGING_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0084,
  },
  name: "Imaging Frequency",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const IMAGED_NUCLEUS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0085,
  },
  name: "Imaged Nucleus",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const ECHO_NUMBERS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0086,
  },
  name: "Echo Number(s)",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const MAGNETIC_FIELD_STRENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0087,
  },
  name: "Magnetic Field Strength",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SPACING_BETWEEN_SLICES: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0088,
  },
  name: "Spacing Between Slices",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_PHASE_ENCODING_STEPS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0089,
  },
  name: "Number of Phase Encoding Steps",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const DATA_COLLECTION_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0090,
  },
  name: "Data Collection Diameter",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ECHO_TRAIN_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0091,
  },
  name: "Echo Train Length",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PERCENT_SAMPLING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0093,
  },
  name: "Percent Sampling",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PERCENT_PHASE_FIELD_OF_VIEW: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0094,
  },
  name: "Percent Phase Field of View",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PIXEL_BANDWIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x0095,
  },
  name: "Pixel Bandwidth",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DEVICE_SERIAL_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1000,
  },
  name: "Device Serial Number",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DEVICE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1002,
  },
  name: "Device UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const DEVICE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1003,
  },
  name: "Device ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PLATE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1004,
  },
  name: "Plate ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const GENERATOR_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1005,
  },
  name: "Generator ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const GRID_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1006,
  },
  name: "Grid ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CASSETTE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1007,
  },
  name: "Cassette ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const GANTRY_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1008,
  },
  name: "Gantry ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const UNIQUE_DEVICE_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1009,
  },
  name: "Unique Device Identifier",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const UDI_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x100A,
  },
  name: "UDI Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MANUFACTURER_DEVICE_CLASS_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x100B,
  },
  name: "Manufacturer's Device Class UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1_TO_N,
};

pub const SECONDARY_CAPTURE_DEVICE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1010,
  },
  name: "Secondary Capture Device ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const HARDCOPY_CREATION_DEVICE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1011,
  },
  name: "Hardcopy Creation Device ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DATE_OF_SECONDARY_CAPTURE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1012,
  },
  name: "Date of Secondary Capture",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const TIME_OF_SECONDARY_CAPTURE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1014,
  },
  name: "Time of Secondary Capture",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const SECONDARY_CAPTURE_DEVICE_MANUFACTURER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1016,
  },
  name: "Secondary Capture Device Manufacturer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const HARDCOPY_DEVICE_MANUFACTURER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1017,
  },
  name: "Hardcopy Device Manufacturer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SECONDARY_CAPTURE_DEVICE_MANUFACTURER_MODEL_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1018,
  },
  name: "Secondary Capture Device Manufacturer's Model Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SECONDARY_CAPTURE_DEVICE_SOFTWARE_VERSIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1019,
  },
  name: "Secondary Capture Device Software Versions",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const HARDCOPY_DEVICE_SOFTWARE_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x101A,
  },
  name: "Hardcopy Device Software Version",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const HARDCOPY_DEVICE_MANUFACTURER_MODEL_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x101B,
  },
  name: "Hardcopy Device Manufacturer's Model Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SOFTWARE_VERSIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1020,
  },
  name: "Software Versions",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const VIDEO_IMAGE_FORMAT_ACQUIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1022,
  },
  name: "Video Image Format Acquired",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const DIGITAL_IMAGE_FORMAT_ACQUIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1023,
  },
  name: "Digital Image Format Acquired",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PROTOCOL_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1030,
  },
  name: "Protocol Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_ROUTE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1040,
  },
  name: "Contrast/Bolus Route",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_VOLUME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1041,
  },
  name: "Contrast/Bolus Volume",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_START_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1042,
  },
  name: "Contrast/Bolus Start Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_STOP_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1043,
  },
  name: "Contrast/Bolus Stop Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_TOTAL_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1044,
  },
  name: "Contrast/Bolus Total Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SYRINGE_COUNTS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1045,
  },
  name: "Syringe Counts",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CONTRAST_FLOW_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1046,
  },
  name: "Contrast Flow Rate",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const CONTRAST_FLOW_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1047,
  },
  name: "Contrast Flow Duration",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const CONTRAST_BOLUS_INGREDIENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1048,
  },
  name: "Contrast/Bolus Ingredient",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_INGREDIENT_CONCENTRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1049,
  },
  name: "Contrast/Bolus Ingredient Concentration",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SPATIAL_RESOLUTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1050,
  },
  name: "Spatial Resolution",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TRIGGER_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1060,
  },
  name: "Trigger Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TRIGGER_SOURCE_OR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1061,
  },
  name: "Trigger Source or Type",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const NOMINAL_INTERVAL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1062,
  },
  name: "Nominal Interval",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const FRAME_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1063,
  },
  name: "Frame Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CARDIAC_FRAMING_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1064,
  },
  name: "Cardiac Framing Type",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const FRAME_TIME_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1065,
  },
  name: "Frame Time Vector",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const FRAME_DELAY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1066,
  },
  name: "Frame Delay",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const IMAGE_TRIGGER_DELAY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1067,
  },
  name: "Image Trigger Delay",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MULTIPLEX_GROUP_TIME_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1068,
  },
  name: "Multiplex Group Time Offset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TRIGGER_TIME_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1069,
  },
  name: "Trigger Time Offset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SYNCHRONIZATION_TRIGGER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x106A,
  },
  name: "Synchronization Trigger",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SYNCHRONIZATION_CHANNEL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x106C,
  },
  name: "Synchronization Channel",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2,
};

pub const TRIGGER_SAMPLE_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x106E,
  },
  name: "Trigger Sample Position",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const RADIOPHARMACEUTICAL_ROUTE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1070,
  },
  name: "Radiopharmaceutical Route",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const RADIOPHARMACEUTICAL_VOLUME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1071,
  },
  name: "Radiopharmaceutical Volume",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RADIOPHARMACEUTICAL_START_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1072,
  },
  name: "Radiopharmaceutical Start Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const RADIOPHARMACEUTICAL_STOP_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1073,
  },
  name: "Radiopharmaceutical Stop Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const RADIONUCLIDE_TOTAL_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1074,
  },
  name: "Radionuclide Total Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RADIONUCLIDE_HALF_LIFE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1075,
  },
  name: "Radionuclide Half Life",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RADIONUCLIDE_POSITRON_FRACTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1076,
  },
  name: "Radionuclide Positron Fraction",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RADIOPHARMACEUTICAL_SPECIFIC_ACTIVITY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1077,
  },
  name: "Radiopharmaceutical Specific Activity",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RADIOPHARMACEUTICAL_START_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1078,
  },
  name: "Radiopharmaceutical Start DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const RADIOPHARMACEUTICAL_STOP_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1079,
  },
  name: "Radiopharmaceutical Stop DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const BEAT_REJECTION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1080,
  },
  name: "Beat Rejection Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const LOW_RR_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1081,
  },
  name: "Low R-R Value",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const HIGH_RR_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1082,
  },
  name: "High R-R Value",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const INTERVALS_ACQUIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1083,
  },
  name: "Intervals Acquired",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const INTERVALS_REJECTED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1084,
  },
  name: "Intervals Rejected",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PVC_REJECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1085,
  },
  name: "PVC Rejection",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SKIP_BEATS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1086,
  },
  name: "Skip Beats",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const HEART_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1088,
  },
  name: "Heart Rate",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CARDIAC_NUMBER_OF_IMAGES: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1090,
  },
  name: "Cardiac Number of Images",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const TRIGGER_WINDOW: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1094,
  },
  name: "Trigger Window",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1100,
  },
  name: "Reconstruction Diameter",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DISTANCE_SOURCE_TO_DETECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1110,
  },
  name: "Distance Source to Detector",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DISTANCE_SOURCE_TO_PATIENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1111,
  },
  name: "Distance Source to Patient",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ESTIMATED_RADIOGRAPHIC_MAGNIFICATION_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1114,
  },
  name: "Estimated Radiographic Magnification Factor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GANTRY_DETECTOR_TILT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1120,
  },
  name: "Gantry/Detector Tilt",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GANTRY_DETECTOR_SLEW: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1121,
  },
  name: "Gantry/Detector Slew",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_HEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1130,
  },
  name: "Table Height",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TRAVERSE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1131,
  },
  name: "Table Traverse",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_MOTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1134,
  },
  name: "Table Motion",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TABLE_VERTICAL_INCREMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1135,
  },
  name: "Table Vertical Increment",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const TABLE_LATERAL_INCREMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1136,
  },
  name: "Table Lateral Increment",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const TABLE_LONGITUDINAL_INCREMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1137,
  },
  name: "Table Longitudinal Increment",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const TABLE_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1138,
  },
  name: "Table Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x113A,
  },
  name: "Table Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ROTATION_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1140,
  },
  name: "Rotation Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ANGULAR_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1141,
  },
  name: "Angular Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RADIAL_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1142,
  },
  name: "Radial Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const SCAN_ARC: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1143,
  },
  name: "Scan Arc",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ANGULAR_STEP: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1144,
  },
  name: "Angular Step",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CENTER_OF_ROTATION_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1145,
  },
  name: "Center of Rotation Offset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ROTATION_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1146,
  },
  name: "Rotation Offset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const FIELD_OF_VIEW_SHAPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1147,
  },
  name: "Field of View Shape",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FIELD_OF_VIEW_DIMENSIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1149,
  },
  name: "Field of View Dimension(s)",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_2,
};

pub const EXPOSURE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1150,
  },
  name: "Exposure Time",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const X_RAY_TUBE_CURRENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1151,
  },
  name: "X-Ray Tube Current",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const EXPOSURE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1152,
  },
  name: "Exposure",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const EXPOSURE_IN_MICROAMP_SECONDS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1153,
  },
  name: "Exposure in µAs",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const AVERAGE_PULSE_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1154,
  },
  name: "Average Pulse Width",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RADIATION_SETTING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1155,
  },
  name: "Radiation Setting",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RECTIFICATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1156,
  },
  name: "Rectification Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RADIATION_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x115A,
  },
  name: "Radiation Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_AND_FLUOROSCOPY_AREA_DOSE_PRODUCT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x115E,
  },
  name: "Image and Fluoroscopy Area Dose Product",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FILTER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1160,
  },
  name: "Filter Type",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const TYPE_OF_FILTERS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1161,
  },
  name: "Type of Filters",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const INTENSIFIER_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1162,
  },
  name: "Intensifier Size",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const IMAGER_PIXEL_SPACING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1164,
  },
  name: "Imager Pixel Spacing",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const GRID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1166,
  },
  name: "Grid",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const GENERATOR_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1170,
  },
  name: "Generator Power",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COLLIMATOR_GRID_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1180,
  },
  name: "Collimator/grid Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const COLLIMATOR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1181,
  },
  name: "Collimator Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FOCAL_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1182,
  },
  name: "Focal Distance",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_2,
};

pub const X_FOCUS_CENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1183,
  },
  name: "X Focus Center",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_2,
};

pub const Y_FOCUS_CENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1184,
  },
  name: "Y Focus Center",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_2,
};

pub const FOCAL_SPOTS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1190,
  },
  name: "Focal Spot(s)",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const ANODE_TARGET_MATERIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1191,
  },
  name: "Anode Target Material",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BODY_PART_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11A0,
  },
  name: "Body Part Thickness",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const COMPRESSION_FORCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11A2,
  },
  name: "Compression Force",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const COMPRESSION_PRESSURE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11A3,
  },
  name: "Compression Pressure",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PADDLE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11A4,
  },
  name: "Paddle Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const COMPRESSION_CONTACT_AREA: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11A5,
  },
  name: "Compression Contact Area",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ACQUISITION_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11B0,
  },
  name: "Acquisition Mode",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DOSE_MODE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11B1,
  },
  name: "Dose Mode Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ACQUIRED_SUBTRACTION_MASK_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11B2,
  },
  name: "Acquired Subtraction Mask Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FLUOROSCOPY_PERSISTENCE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11B3,
  },
  name: "Fluoroscopy Persistence Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FLUOROSCOPY_LAST_IMAGE_HOLD_PERSISTENCE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11B4,
  },
  name: "Fluoroscopy Last Image Hold Persistence Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const UPPER_LIMIT_NUMBER_OF_PERSISTENT_FLUOROSCOPY_FRAMES: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11B5,
  },
  name: "Upper Limit Number Of Persistent Fluoroscopy Frames",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_AUTO_INJECTION_TRIGGER_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11B6,
  },
  name: "Contrast/Bolus Auto Injection Trigger Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_INJECTION_DELAY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11B7,
  },
  name: "Contrast/Bolus Injection Delay",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const XA_ACQUISITION_PHASE_DETAILS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11B8,
  },
  name: "XA Acquisition Phase Details Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const XA_ACQUISITION_FRAME_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11B9,
  },
  name: "XA Acquisition Frame Rate",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const XA_PLANE_DETAILS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11BA,
  },
  name: "XA Plane Details Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUISITION_FIELD_OF_VIEW_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11BB,
  },
  name: "Acquisition Field of View Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const X_RAY_FILTER_DETAILS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11BC,
  },
  name: "X-Ray Filter Details Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const XA_ACQUISITION_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11BD,
  },
  name: "XA Acquisition Duration",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_PIPELINE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11BE,
  },
  name: "Reconstruction Pipeline Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_FILTER_DETAILS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11BF,
  },
  name: "Image Filter Details Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const APPLIED_MASK_SUBTRACTION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11C0,
  },
  name: "Applied Mask Subtraction Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REQUESTED_SERIES_DESCRIPTION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x11C1,
  },
  name: "Requested Series Description Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DATE_OF_LAST_CALIBRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1200,
  },
  name: "Date of Last Calibration",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1_TO_N,
};

pub const TIME_OF_LAST_CALIBRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1201,
  },
  name: "Time of Last Calibration",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1_TO_N,
};

pub const DATE_TIME_OF_LAST_CALIBRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1202,
  },
  name: "DateTime of Last Calibration",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const CALIBRATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1203,
  },
  name: "Calibration DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const DATE_OF_MANUFACTURE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1204,
  },
  name: "Date of Manufacture",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const DATE_OF_INSTALLATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1205,
  },
  name: "Date of Installation",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const CONVOLUTION_KERNEL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1210,
  },
  name: "Convolution Kernel",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1_TO_N,
};

pub const UPPER_LOWER_PIXEL_VALUES: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1240,
  },
  name: "Upper/Lower Pixel Values",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const ACTUAL_FRAME_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1242,
  },
  name: "Actual Frame Duration",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COUNT_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1243,
  },
  name: "Count Rate",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PREFERRED_PLAYBACK_SEQUENCING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1244,
  },
  name: "Preferred Playback Sequencing",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RECEIVE_COIL_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1250,
  },
  name: "Receive Coil Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const TRANSMIT_COIL_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1251,
  },
  name: "Transmit Coil Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const PLATE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1260,
  },
  name: "Plate Type",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const PHOSPHOR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1261,
  },
  name: "Phosphor Type",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const WATER_EQUIVALENT_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1271,
  },
  name: "Water Equivalent Diameter",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const WATER_EQUIVALENT_DIAMETER_CALCULATION_METHOD_CODE_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0018,
      element: 0x1272,
    },
    name: "Water Equivalent Diameter Calculation Method Code Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const SCAN_VELOCITY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1300,
  },
  name: "Scan Velocity",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WHOLE_BODY_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1301,
  },
  name: "Whole Body Technique",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const SCAN_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1302,
  },
  name: "Scan Length",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ACQUISITION_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1310,
  },
  name: "Acquisition Matrix",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_4,
};

pub const IN_PLANE_PHASE_ENCODING_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1312,
  },
  name: "In-plane Phase Encoding Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FLIP_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1314,
  },
  name: "Flip Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const VARIABLE_FLIP_ANGLE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1315,
  },
  name: "Variable Flip Angle Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SAR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1316,
  },
  name: "SAR",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const D_BDT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1318,
  },
  name: "dB/dt",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const B_1RMS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1320,
  },
  name: "B1rms",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ACQUISITION_DEVICE_PROCESSING_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1400,
  },
  name: "Acquisition Device Processing Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ACQUISITION_DEVICE_PROCESSING_CODE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1401,
  },
  name: "Acquisition Device Processing Code",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CASSETTE_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1402,
  },
  name: "Cassette Orientation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CASSETTE_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1403,
  },
  name: "Cassette Size",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EXPOSURES_ON_PLATE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1404,
  },
  name: "Exposures on Plate",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RELATIVE_X_RAY_EXPOSURE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1405,
  },
  name: "Relative X-Ray Exposure",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const EXPOSURE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1411,
  },
  name: "Exposure Index",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TARGET_EXPOSURE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1412,
  },
  name: "Target Exposure Index",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DEVIATION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1413,
  },
  name: "Deviation Index",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const COLUMN_ANGULATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1450,
  },
  name: "Column Angulation",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TOMO_LAYER_HEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1460,
  },
  name: "Tomo Layer Height",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TOMO_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1470,
  },
  name: "Tomo Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TOMO_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1480,
  },
  name: "Tomo Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TOMO_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1490,
  },
  name: "Tomo Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TOMO_CLASS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1491,
  },
  name: "Tomo Class",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_TOMOSYNTHESIS_SOURCE_IMAGES: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1495,
  },
  name: "Number of Tomosynthesis Source Images",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const POSITIONER_MOTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1500,
  },
  name: "Positioner Motion",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const POSITIONER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1508,
  },
  name: "Positioner Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const POSITIONER_PRIMARY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1510,
  },
  name: "Positioner Primary Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const POSITIONER_SECONDARY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1511,
  },
  name: "Positioner Secondary Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const POSITIONER_PRIMARY_ANGLE_INCREMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1520,
  },
  name: "Positioner Primary Angle Increment",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const POSITIONER_SECONDARY_ANGLE_INCREMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1521,
  },
  name: "Positioner Secondary Angle Increment",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const DETECTOR_PRIMARY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1530,
  },
  name: "Detector Primary Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DETECTOR_SECONDARY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1531,
  },
  name: "Detector Secondary Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SHUTTER_SHAPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1600,
  },
  name: "Shutter Shape",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: ValueMultiplicity {
    min: 1,
    max: Some(3),
  },
};

pub const SHUTTER_LEFT_VERTICAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1602,
  },
  name: "Shutter Left Vertical Edge",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SHUTTER_RIGHT_VERTICAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1604,
  },
  name: "Shutter Right Vertical Edge",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SHUTTER_UPPER_HORIZONTAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1606,
  },
  name: "Shutter Upper Horizontal Edge",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SHUTTER_LOWER_HORIZONTAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1608,
  },
  name: "Shutter Lower Horizontal Edge",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CENTER_OF_CIRCULAR_SHUTTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1610,
  },
  name: "Center of Circular Shutter",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_2,
};

pub const RADIUS_OF_CIRCULAR_SHUTTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1612,
  },
  name: "Radius of Circular Shutter",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const VERTICES_OF_THE_POLYGONAL_SHUTTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1620,
  },
  name: "Vertices of the Polygonal Shutter",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_2_TO_N,
};

pub const SHUTTER_PRESENTATION_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1622,
  },
  name: "Shutter Presentation Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SHUTTER_OVERLAY_GROUP: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1623,
  },
  name: "Shutter Overlay Group",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SHUTTER_PRESENTATION_COLOR_CIE_LAB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1624,
  },
  name: "Shutter Presentation Color CIELab Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const OUTLINE_SHAPE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1630,
  },
  name: "Outline Shape Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OUTLINE_LEFT_VERTICAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1631,
  },
  name: "Outline Left Vertical Edge",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const OUTLINE_RIGHT_VERTICAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1632,
  },
  name: "Outline Right Vertical Edge",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const OUTLINE_UPPER_HORIZONTAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1633,
  },
  name: "Outline Upper Horizontal Edge",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const OUTLINE_LOWER_HORIZONTAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1634,
  },
  name: "Outline Lower Horizontal Edge",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CENTER_OF_CIRCULAR_OUTLINE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1635,
  },
  name: "Center of Circular Outline",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2,
};

pub const DIAMETER_OF_CIRCULAR_OUTLINE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1636,
  },
  name: "Diameter of Circular Outline",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const NUMBER_OF_POLYGONAL_VERTICES: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1637,
  },
  name: "Number of Polygonal Vertices",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const VERTICES_OF_THE_POLYGONAL_OUTLINE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1638,
  },
  name: "Vertices of the Polygonal Outline",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const COLLIMATOR_SHAPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1700,
  },
  name: "Collimator Shape",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: ValueMultiplicity {
    min: 1,
    max: Some(3),
  },
};

pub const COLLIMATOR_LEFT_VERTICAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1702,
  },
  name: "Collimator Left Vertical Edge",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COLLIMATOR_RIGHT_VERTICAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1704,
  },
  name: "Collimator Right Vertical Edge",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COLLIMATOR_UPPER_HORIZONTAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1706,
  },
  name: "Collimator Upper Horizontal Edge",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COLLIMATOR_LOWER_HORIZONTAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1708,
  },
  name: "Collimator Lower Horizontal Edge",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CENTER_OF_CIRCULAR_COLLIMATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1710,
  },
  name: "Center of Circular Collimator",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_2,
};

pub const RADIUS_OF_CIRCULAR_COLLIMATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1712,
  },
  name: "Radius of Circular Collimator",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const VERTICES_OF_THE_POLYGONAL_COLLIMATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1720,
  },
  name: "Vertices of the Polygonal Collimator",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_2_TO_N,
};

pub const ACQUISITION_TIME_SYNCHRONIZED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1800,
  },
  name: "Acquisition Time Synchronized",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TIME_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1801,
  },
  name: "Time Source",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const TIME_DISTRIBUTION_PROTOCOL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1802,
  },
  name: "Time Distribution Protocol",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NTP_SOURCE_ADDRESS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x1803,
  },
  name: "NTP Source Address",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PAGE_NUMBER_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2001,
  },
  name: "Page Number Vector",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const FRAME_LABEL_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2002,
  },
  name: "Frame Label Vector",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1_TO_N,
};

pub const FRAME_PRIMARY_ANGLE_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2003,
  },
  name: "Frame Primary Angle Vector",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const FRAME_SECONDARY_ANGLE_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2004,
  },
  name: "Frame Secondary Angle Vector",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const SLICE_LOCATION_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2005,
  },
  name: "Slice Location Vector",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const DISPLAY_WINDOW_LABEL_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2006,
  },
  name: "Display Window Label Vector",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1_TO_N,
};

pub const NOMINAL_SCANNED_PIXEL_SPACING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2010,
  },
  name: "Nominal Scanned Pixel Spacing",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const DIGITIZING_DEVICE_TRANSPORT_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2020,
  },
  name: "Digitizing Device Transport Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ROTATION_OF_SCANNED_FILM: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2030,
  },
  name: "Rotation of Scanned Film",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BIOPSY_TARGET_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2041,
  },
  name: "Biopsy Target Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TARGET_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2042,
  },
  name: "Target UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const LOCALIZING_CURSOR_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2043,
  },
  name: "Localizing Cursor Position",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const CALCULATED_TARGET_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2044,
  },
  name: "Calculated Target Position",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const TARGET_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2045,
  },
  name: "Target Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const DISPLAYED_Z_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x2046,
  },
  name: "Displayed Z Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const IVUS_ACQUISITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x3100,
  },
  name: "IVUS Acquisition",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IVUS_PULLBACK_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x3101,
  },
  name: "IVUS Pullback Rate",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const IVUS_GATED_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x3102,
  },
  name: "IVUS Gated Rate",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const IVUS_PULLBACK_START_FRAME_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x3103,
  },
  name: "IVUS Pullback Start Frame Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const IVUS_PULLBACK_STOP_FRAME_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x3104,
  },
  name: "IVUS Pullback Stop Frame Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const LESION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x3105,
  },
  name: "Lesion Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const ACQUISITION_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x4000,
  },
  name: "Acquisition Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const OUTPUT_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5000,
  },
  name: "Output Power",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1_TO_N,
};

pub const TRANSDUCER_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5010,
  },
  name: "Transducer Data",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const TRANSDUCER_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5011,
  },
  name: "Transducer Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FOCUS_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5012,
  },
  name: "Focus Depth",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PROCESSING_FUNCTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5020,
  },
  name: "Processing Function",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const POSTPROCESSING_FUNCTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5021,
  },
  name: "Postprocessing Function",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const MECHANICAL_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5022,
  },
  name: "Mechanical Index",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BONE_THERMAL_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5024,
  },
  name: "Bone Thermal Index",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CRANIAL_THERMAL_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5026,
  },
  name: "Cranial Thermal Index",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOFT_TISSUE_THERMAL_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5027,
  },
  name: "Soft Tissue Thermal Index",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOFT_TISSUE_FOCUS_THERMAL_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5028,
  },
  name: "Soft Tissue-focus Thermal Index",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOFT_TISSUE_SURFACE_THERMAL_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5029,
  },
  name: "Soft Tissue-surface Thermal Index",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DYNAMIC_RANGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5030,
  },
  name: "Dynamic Range",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TOTAL_GAIN: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5040,
  },
  name: "Total Gain",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DEPTH_OF_SCAN_FIELD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5050,
  },
  name: "Depth of Scan Field",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PATIENT_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5100,
  },
  name: "Patient Position",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VIEW_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5101,
  },
  name: "View Position",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PROJECTION_EPONYMOUS_NAME_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5104,
  },
  name: "Projection Eponymous Name Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_TRANSFORMATION_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5210,
  },
  name: "Image Transformation Matrix",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_6,
};

pub const IMAGE_TRANSLATION_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x5212,
  },
  name: "Image Translation Vector",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const SENSITIVITY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6000,
  },
  name: "Sensitivity",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SEQUENCE_OF_ULTRASOUND_REGIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6011,
  },
  name: "Sequence of Ultrasound Regions",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REGION_SPATIAL_FORMAT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6012,
  },
  name: "Region Spatial Format",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REGION_DATA_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6014,
  },
  name: "Region Data Type",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REGION_FLAGS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6016,
  },
  name: "Region Flags",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const REGION_LOCATION_MIN_X0: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6018,
  },
  name: "Region Location Min X0",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const REGION_LOCATION_MIN_Y0: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x601A,
  },
  name: "Region Location Min Y0",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const REGION_LOCATION_MAX_X1: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x601C,
  },
  name: "Region Location Max X1",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const REGION_LOCATION_MAX_Y1: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x601E,
  },
  name: "Region Location Max Y1",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const REFERENCE_PIXEL_X0: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6020,
  },
  name: "Reference Pixel X0",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_1,
};

pub const REFERENCE_PIXEL_Y0: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6022,
  },
  name: "Reference Pixel Y0",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_1,
};

pub const PHYSICAL_UNITS_X_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6024,
  },
  name: "Physical Units X Direction",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PHYSICAL_UNITS_Y_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6026,
  },
  name: "Physical Units Y Direction",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFERENCE_PIXEL_PHYSICAL_VALUE_X: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6028,
  },
  name: "Reference Pixel Physical Value X",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const REFERENCE_PIXEL_PHYSICAL_VALUE_Y: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x602A,
  },
  name: "Reference Pixel Physical Value Y",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PHYSICAL_DELTA_X: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x602C,
  },
  name: "Physical Delta X",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PHYSICAL_DELTA_Y: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x602E,
  },
  name: "Physical Delta Y",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TRANSDUCER_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6030,
  },
  name: "Transducer Frequency",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TRANSDUCER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6031,
  },
  name: "Transducer Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PULSE_REPETITION_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6032,
  },
  name: "Pulse Repetition Frequency",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const DOPPLER_CORRECTION_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6034,
  },
  name: "Doppler Correction Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const STEERING_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6036,
  },
  name: "Steering Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DOPPLER_SAMPLE_VOLUME_X_POSITION_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6038,
  },
  name: "Doppler Sample Volume X Position (Retired)",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const DOPPLER_SAMPLE_VOLUME_X_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6039,
  },
  name: "Doppler Sample Volume X Position",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_1,
};

pub const DOPPLER_SAMPLE_VOLUME_Y_POSITION_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x603A,
  },
  name: "Doppler Sample Volume Y Position (Retired)",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const DOPPLER_SAMPLE_VOLUME_Y_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x603B,
  },
  name: "Doppler Sample Volume Y Position",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_1,
};

pub const TM_LINE_POSITION_X0_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x603C,
  },
  name: "TM-Line Position X0 (Retired)",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TM_LINE_POSITION_X0: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x603D,
  },
  name: "TM-Line Position X0",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_1,
};

pub const TM_LINE_POSITION_Y0_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x603E,
  },
  name: "TM-Line Position Y0 (Retired)",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TM_LINE_POSITION_Y0: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x603F,
  },
  name: "TM-Line Position Y0",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_1,
};

pub const TM_LINE_POSITION_X1_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6040,
  },
  name: "TM-Line Position X1 (Retired)",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TM_LINE_POSITION_X1: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6041,
  },
  name: "TM-Line Position X1",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_1,
};

pub const TM_LINE_POSITION_Y1_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6042,
  },
  name: "TM-Line Position Y1 (Retired)",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TM_LINE_POSITION_Y1: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6043,
  },
  name: "TM-Line Position Y1",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_1,
};

pub const PIXEL_COMPONENT_ORGANIZATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6044,
  },
  name: "Pixel Component Organization",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PIXEL_COMPONENT_MASK: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6046,
  },
  name: "Pixel Component Mask",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const PIXEL_COMPONENT_RANGE_START: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6048,
  },
  name: "Pixel Component Range Start",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const PIXEL_COMPONENT_RANGE_STOP: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x604A,
  },
  name: "Pixel Component Range Stop",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const PIXEL_COMPONENT_PHYSICAL_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x604C,
  },
  name: "Pixel Component Physical Units",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PIXEL_COMPONENT_DATA_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x604E,
  },
  name: "Pixel Component Data Type",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_TABLE_BREAK_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6050,
  },
  name: "Number of Table Break Points",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TABLE_OF_X_BREAK_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6052,
  },
  name: "Table of X Break Points",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1_TO_N,
};

pub const TABLE_OF_Y_BREAK_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6054,
  },
  name: "Table of Y Break Points",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_TABLE_ENTRIES: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6056,
  },
  name: "Number of Table Entries",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TABLE_OF_PIXEL_VALUES: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6058,
  },
  name: "Table of Pixel Values",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1_TO_N,
};

pub const TABLE_OF_PARAMETER_VALUES: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x605A,
  },
  name: "Table of Parameter Values",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_N,
};

pub const R_WAVE_TIME_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6060,
  },
  name: "R Wave Time Vector",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_N,
};

pub const ACTIVE_IMAGE_AREA_OVERLAY_GROUP: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x6070,
  },
  name: "Active Image Area Overlay Group",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DETECTOR_CONDITIONS_NOMINAL_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7000,
  },
  name: "Detector Conditions Nominal Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DETECTOR_TEMPERATURE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7001,
  },
  name: "Detector Temperature",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DETECTOR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7004,
  },
  name: "Detector Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DETECTOR_CONFIGURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7005,
  },
  name: "Detector Configuration",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DETECTOR_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7006,
  },
  name: "Detector Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const DETECTOR_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7008,
  },
  name: "Detector Mode",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const DETECTOR_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x700A,
  },
  name: "Detector ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const DATE_OF_LAST_DETECTOR_CALIBRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x700C,
  },
  name: "Date of Last Detector Calibration",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const TIME_OF_LAST_DETECTOR_CALIBRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x700E,
  },
  name: "Time of Last Detector Calibration",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const EXPOSURES_ON_DETECTOR_SINCE_LAST_CALIBRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7010,
  },
  name: "Exposures on Detector Since Last Calibration",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const EXPOSURES_ON_DETECTOR_SINCE_MANUFACTURED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7011,
  },
  name: "Exposures on Detector Since Manufactured",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const DETECTOR_TIME_SINCE_LAST_EXPOSURE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7012,
  },
  name: "Detector Time Since Last Exposure",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DETECTOR_ACTIVE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7014,
  },
  name: "Detector Active Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DETECTOR_ACTIVATION_OFFSET_FROM_EXPOSURE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7016,
  },
  name: "Detector Activation Offset From Exposure",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DETECTOR_BINNING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x701A,
  },
  name: "Detector Binning",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const DETECTOR_ELEMENT_PHYSICAL_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7020,
  },
  name: "Detector Element Physical Size",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const DETECTOR_ELEMENT_SPACING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7022,
  },
  name: "Detector Element Spacing",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const DETECTOR_ACTIVE_SHAPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7024,
  },
  name: "Detector Active Shape",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DETECTOR_ACTIVE_DIMENSIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7026,
  },
  name: "Detector Active Dimension(s)",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_2,
};

pub const DETECTOR_ACTIVE_ORIGIN: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7028,
  },
  name: "Detector Active Origin",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const DETECTOR_MANUFACTURER_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x702A,
  },
  name: "Detector Manufacturer Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DETECTOR_MANUFACTURER_MODEL_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x702B,
  },
  name: "Detector Manufacturer's Model Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const FIELD_OF_VIEW_ORIGIN: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7030,
  },
  name: "Field of View Origin",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const FIELD_OF_VIEW_ROTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7032,
  },
  name: "Field of View Rotation",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FIELD_OF_VIEW_HORIZONTAL_FLIP: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7034,
  },
  name: "Field of View Horizontal Flip",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PIXEL_DATA_AREA_ORIGIN_RELATIVE_TO_FOV: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7036,
  },
  name: "Pixel Data Area Origin Relative To FOV",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const PIXEL_DATA_AREA_ROTATION_ANGLE_RELATIVE_TO_FOV: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7038,
  },
  name: "Pixel Data Area Rotation Angle Relative To FOV",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const GRID_ABSORBING_MATERIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7040,
  },
  name: "Grid Absorbing Material",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const GRID_SPACING_MATERIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7041,
  },
  name: "Grid Spacing Material",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const GRID_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7042,
  },
  name: "Grid Thickness",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GRID_PITCH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7044,
  },
  name: "Grid Pitch",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GRID_ASPECT_RATIO: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7046,
  },
  name: "Grid Aspect Ratio",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_2,
};

pub const GRID_PERIOD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7048,
  },
  name: "Grid Period",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GRID_FOCAL_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x704C,
  },
  name: "Grid Focal Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FILTER_MATERIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7050,
  },
  name: "Filter Material",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const FILTER_THICKNESS_MINIMUM: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7052,
  },
  name: "Filter Thickness Minimum",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const FILTER_THICKNESS_MAXIMUM: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7054,
  },
  name: "Filter Thickness Maximum",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const FILTER_BEAM_PATH_LENGTH_MINIMUM: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7056,
  },
  name: "Filter Beam Path Length Minimum",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_N,
};

pub const FILTER_BEAM_PATH_LENGTH_MAXIMUM: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7058,
  },
  name: "Filter Beam Path Length Maximum",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_N,
};

pub const EXPOSURE_CONTROL_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7060,
  },
  name: "Exposure Control Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EXPOSURE_CONTROL_MODE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7062,
  },
  name: "Exposure Control Mode Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const EXPOSURE_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7064,
  },
  name: "Exposure Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PHOTOTIMER_SETTING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x7065,
  },
  name: "Phototimer Setting",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const EXPOSURE_TIME_IN_MICROSECONDS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x8150,
  },
  name: "Exposure Time in µS",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const X_RAY_TUBE_CURRENT_IN_MICROAMPS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x8151,
  },
  name: "X-Ray Tube Current in µA",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONTENT_QUALIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9004,
  },
  name: "Content Qualification",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PULSE_SEQUENCE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9005,
  },
  name: "Pulse Sequence Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const MR_IMAGING_MODIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9006,
  },
  name: "MR Imaging Modifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ECHO_PULSE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9008,
  },
  name: "Echo Pulse Sequence",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INVERSION_RECOVERY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9009,
  },
  name: "Inversion Recovery",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FLOW_COMPENSATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9010,
  },
  name: "Flow Compensation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MULTIPLE_SPIN_ECHO: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9011,
  },
  name: "Multiple Spin Echo",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MULTI_PLANAR_EXCITATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9012,
  },
  name: "Multi-planar Excitation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PHASE_CONTRAST: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9014,
  },
  name: "Phase Contrast",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TIME_OF_FLIGHT_CONTRAST: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9015,
  },
  name: "Time of Flight Contrast",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SPOILING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9016,
  },
  name: "Spoiling",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const STEADY_STATE_PULSE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9017,
  },
  name: "Steady State Pulse Sequence",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ECHO_PLANAR_PULSE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9018,
  },
  name: "Echo Planar Pulse Sequence",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TAG_ANGLE_FIRST_AXIS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9019,
  },
  name: "Tag Angle First Axis",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const MAGNETIZATION_TRANSFER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9020,
  },
  name: "Magnetization Transfer",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const T2_PREPARATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9021,
  },
  name: "T2 Preparation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BLOOD_SIGNAL_NULLING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9022,
  },
  name: "Blood Signal Nulling",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SATURATION_RECOVERY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9024,
  },
  name: "Saturation Recovery",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SPECTRALLY_SELECTED_SUPPRESSION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9025,
  },
  name: "Spectrally Selected Suppression",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SPECTRALLY_SELECTED_EXCITATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9026,
  },
  name: "Spectrally Selected Excitation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SPATIAL_PRESATURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9027,
  },
  name: "Spatial Pre-saturation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TAGGING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9028,
  },
  name: "Tagging",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OVERSAMPLING_PHASE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9029,
  },
  name: "Oversampling Phase",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TAG_SPACING_FIRST_DIMENSION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9030,
  },
  name: "Tag Spacing First Dimension",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const GEOMETRY_OF_K_SPACE_TRAVERSAL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9032,
  },
  name: "Geometry of k-Space Traversal",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SEGMENTED_K_SPACE_TRAVERSAL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9033,
  },
  name: "Segmented k-Space Traversal",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RECTILINEAR_PHASE_ENCODE_REORDERING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9034,
  },
  name: "Rectilinear Phase Encode Reordering",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TAG_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9035,
  },
  name: "Tag Thickness",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PARTIAL_FOURIER_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9036,
  },
  name: "Partial Fourier Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CARDIAC_SYNCHRONIZATION_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9037,
  },
  name: "Cardiac Synchronization Technique",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RECEIVE_COIL_MANUFACTURER_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9041,
  },
  name: "Receive Coil Manufacturer Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const MR_RECEIVE_COIL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9042,
  },
  name: "MR Receive Coil Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECEIVE_COIL_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9043,
  },
  name: "Receive Coil Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const QUADRATURE_RECEIVE_COIL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9044,
  },
  name: "Quadrature Receive Coil",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MULTI_COIL_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9045,
  },
  name: "Multi-Coil Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MULTI_COIL_CONFIGURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9046,
  },
  name: "Multi-Coil Configuration",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const MULTI_COIL_ELEMENT_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9047,
  },
  name: "Multi-Coil Element Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const MULTI_COIL_ELEMENT_USED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9048,
  },
  name: "Multi-Coil Element Used",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MR_TRANSMIT_COIL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9049,
  },
  name: "MR Transmit Coil Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRANSMIT_COIL_MANUFACTURER_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9050,
  },
  name: "Transmit Coil Manufacturer Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TRANSMIT_COIL_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9051,
  },
  name: "Transmit Coil Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SPECTRAL_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9052,
  },
  name: "Spectral Width",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_2,
};

pub const CHEMICAL_SHIFT_REFERENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9053,
  },
  name: "Chemical Shift Reference",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_2,
};

pub const VOLUME_LOCALIZATION_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9054,
  },
  name: "Volume Localization Technique",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MR_ACQUISITION_FREQUENCY_ENCODING_STEPS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9058,
  },
  name: "MR Acquisition Frequency Encoding Steps",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DECOUPLING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9059,
  },
  name: "De-coupling",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DECOUPLED_NUCLEUS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9060,
  },
  name: "De-coupled Nucleus",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_2,
};

pub const DECOUPLING_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9061,
  },
  name: "De-coupling Frequency",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_2,
};

pub const DECOUPLING_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9062,
  },
  name: "De-coupling Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DECOUPLING_CHEMICAL_SHIFT_REFERENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9063,
  },
  name: "De-coupling Chemical Shift Reference",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_2,
};

pub const K_SPACE_FILTERING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9064,
  },
  name: "k-space Filtering",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TIME_DOMAIN_FILTERING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9065,
  },
  name: "Time Domain Filtering",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_2,
};

pub const NUMBER_OF_ZERO_FILLS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9066,
  },
  name: "Number of Zero Fills",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_2,
};

pub const BASELINE_CORRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9067,
  },
  name: "Baseline Correction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PARALLEL_REDUCTION_FACTOR_IN_PLANE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9069,
  },
  name: "Parallel Reduction Factor In-plane",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CARDIAC_RR_INTERVAL_SPECIFIED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9070,
  },
  name: "Cardiac R-R Interval Specified",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const ACQUISITION_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9073,
  },
  name: "Acquisition Duration",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const FRAME_ACQUISITION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9074,
  },
  name: "Frame Acquisition DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const DIFFUSION_DIRECTIONALITY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9075,
  },
  name: "Diffusion Directionality",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DIFFUSION_GRADIENT_DIRECTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9076,
  },
  name: "Diffusion Gradient Direction Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PARALLEL_ACQUISITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9077,
  },
  name: "Parallel Acquisition",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PARALLEL_ACQUISITION_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9078,
  },
  name: "Parallel Acquisition Technique",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INVERSION_TIMES: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9079,
  },
  name: "Inversion Times",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_N,
};

pub const METABOLITE_MAP_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9080,
  },
  name: "Metabolite Map Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const PARTIAL_FOURIER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9081,
  },
  name: "Partial Fourier",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EFFECTIVE_ECHO_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9082,
  },
  name: "Effective Echo Time",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const METABOLITE_MAP_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9083,
  },
  name: "Metabolite Map Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CHEMICAL_SHIFT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9084,
  },
  name: "Chemical Shift Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CARDIAC_SIGNAL_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9085,
  },
  name: "Cardiac Signal Source",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DIFFUSION_B_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9087,
  },
  name: "Diffusion b-value",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DIFFUSION_GRADIENT_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9089,
  },
  name: "Diffusion Gradient Orientation",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const VELOCITY_ENCODING_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9090,
  },
  name: "Velocity Encoding Direction",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const VELOCITY_ENCODING_MINIMUM_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9091,
  },
  name: "Velocity Encoding Minimum Value",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const VELOCITY_ENCODING_ACQUISITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9092,
  },
  name: "Velocity Encoding Acquisition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_K_SPACE_TRAJECTORIES: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9093,
  },
  name: "Number of k-Space Trajectories",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COVERAGE_OF_K_SPACE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9094,
  },
  name: "Coverage of k-Space",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SPECTROSCOPY_ACQUISITION_PHASE_ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9095,
  },
  name: "Spectroscopy Acquisition Phase Rows",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const PARALLEL_REDUCTION_FACTOR_IN_PLANE_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9096,
  },
  name: "Parallel Reduction Factor In-plane (Retired)",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TRANSMITTER_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9098,
  },
  name: "Transmitter Frequency",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_2,
};

pub const RESONANT_NUCLEUS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9100,
  },
  name: "Resonant Nucleus",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_2,
};

pub const FREQUENCY_CORRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9101,
  },
  name: "Frequency Correction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MR_SPECTROSCOPY_FOV_GEOMETRY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9103,
  },
  name: "MR Spectroscopy FOV/Geometry Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SLAB_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9104,
  },
  name: "Slab Thickness",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const SLAB_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9105,
  },
  name: "Slab Orientation",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const MID_SLAB_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9106,
  },
  name: "Mid Slab Position",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const MR_SPATIAL_SATURATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9107,
  },
  name: "MR Spatial Saturation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MR_TIMING_AND_RELATED_PARAMETERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9112,
  },
  name: "MR Timing and Related Parameters Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MR_ECHO_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9114,
  },
  name: "MR Echo Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MR_MODIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9115,
  },
  name: "MR Modifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MR_DIFFUSION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9117,
  },
  name: "MR Diffusion Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CARDIAC_SYNCHRONIZATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9118,
  },
  name: "Cardiac Synchronization Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MR_AVERAGES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9119,
  },
  name: "MR Averages Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MR_FOV_GEOMETRY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9125,
  },
  name: "MR FOV/Geometry Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VOLUME_LOCALIZATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9126,
  },
  name: "Volume Localization Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECTROSCOPY_ACQUISITION_DATA_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9127,
  },
  name: "Spectroscopy Acquisition Data Columns",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const DIFFUSION_ANISOTROPY_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9147,
  },
  name: "Diffusion Anisotropy Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FRAME_REFERENCE_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9151,
  },
  name: "Frame Reference DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const MR_METABOLITE_MAP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9152,
  },
  name: "MR Metabolite Map Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PARALLEL_REDUCTION_FACTOR_OUT_OF_PLANE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9155,
  },
  name: "Parallel Reduction Factor out-of-plane",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const SPECTROSCOPY_ACQUISITION_OUT_OF_PLANE_PHASE_STEPS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9159,
  },
  name: "Spectroscopy Acquisition Out-of-plane Phase Steps",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const BULK_MOTION_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9166,
  },
  name: "Bulk Motion Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PARALLEL_REDUCTION_FACTOR_SECOND_IN_PLANE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9168,
  },
  name: "Parallel Reduction Factor Second In-plane",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CARDIAC_BEAT_REJECTION_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9169,
  },
  name: "Cardiac Beat Rejection Technique",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9170,
  },
  name: "Respiratory Motion Compensation Technique",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RESPIRATORY_SIGNAL_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9171,
  },
  name: "Respiratory Signal Source",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BULK_MOTION_COMPENSATION_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9172,
  },
  name: "Bulk Motion Compensation Technique",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BULK_MOTION_SIGNAL_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9173,
  },
  name: "Bulk Motion Signal Source",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const APPLICABLE_SAFETY_STANDARD_AGENCY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9174,
  },
  name: "Applicable Safety Standard Agency",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const APPLICABLE_SAFETY_STANDARD_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9175,
  },
  name: "Applicable Safety Standard Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const OPERATING_MODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9176,
  },
  name: "Operating Mode Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPERATING_MODE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9177,
  },
  name: "Operating Mode Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OPERATING_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9178,
  },
  name: "Operating Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SPECIFIC_ABSORPTION_RATE_DEFINITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9179,
  },
  name: "Specific Absorption Rate Definition",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GRADIENT_OUTPUT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9180,
  },
  name: "Gradient Output Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SPECIFIC_ABSORPTION_RATE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9181,
  },
  name: "Specific Absorption Rate Value",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const GRADIENT_OUTPUT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9182,
  },
  name: "Gradient Output",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const FLOW_COMPENSATION_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9183,
  },
  name: "Flow Compensation Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TAGGING_DELAY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9184,
  },
  name: "Tagging Delay",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9185,
  },
  name: "Respiratory Motion Compensation Technique Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const RESPIRATORY_SIGNAL_SOURCE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9186,
  },
  name: "Respiratory Signal Source ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_IN_HZ: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9195,
  },
  name: "Chemical Shift Minimum Integration Limit in Hz",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_IN_HZ: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9196,
  },
  name: "Chemical Shift Maximum Integration Limit in Hz",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const MR_VELOCITY_ENCODING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9197,
  },
  name: "MR Velocity Encoding Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FIRST_ORDER_PHASE_CORRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9198,
  },
  name: "First Order Phase Correction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const WATER_REFERENCED_PHASE_CORRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9199,
  },
  name: "Water Referenced Phase Correction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MR_SPECTROSCOPY_ACQUISITION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9200,
  },
  name: "MR Spectroscopy Acquisition Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RESPIRATORY_CYCLE_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9214,
  },
  name: "Respiratory Cycle Position",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VELOCITY_ENCODING_MAXIMUM_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9217,
  },
  name: "Velocity Encoding Maximum Value",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TAG_SPACING_SECOND_DIMENSION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9218,
  },
  name: "Tag Spacing Second Dimension",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TAG_ANGLE_SECOND_AXIS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9219,
  },
  name: "Tag Angle Second Axis",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_1,
};

pub const FRAME_ACQUISITION_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9220,
  },
  name: "Frame Acquisition Duration",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const MR_IMAGE_FRAME_TYPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9226,
  },
  name: "MR Image Frame Type Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MR_SPECTROSCOPY_FRAME_TYPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9227,
  },
  name: "MR Spectroscopy Frame Type Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MR_ACQUISITION_PHASE_ENCODING_STEPS_IN_PLANE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9231,
  },
  name: "MR Acquisition Phase Encoding Steps in-plane",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const MR_ACQUISITION_PHASE_ENCODING_STEPS_OUT_OF_PLANE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9232,
  },
  name: "MR Acquisition Phase Encoding Steps out-of-plane",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SPECTROSCOPY_ACQUISITION_PHASE_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9234,
  },
  name: "Spectroscopy Acquisition Phase Columns",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const CARDIAC_CYCLE_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9236,
  },
  name: "Cardiac Cycle Position",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SPECIFIC_ABSORPTION_RATE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9239,
  },
  name: "Specific Absorption Rate Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RF_ECHO_TRAIN_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9240,
  },
  name: "RF Echo Train Length",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const GRADIENT_ECHO_TRAIN_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9241,
  },
  name: "Gradient Echo Train Length",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ARTERIAL_SPIN_LABELING_CONTRAST: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9250,
  },
  name: "Arterial Spin Labeling Contrast",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MR_ARTERIAL_SPIN_LABELING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9251,
  },
  name: "MR Arterial Spin Labeling Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ASL_TECHNIQUE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9252,
  },
  name: "ASL Technique Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ASL_SLAB_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9253,
  },
  name: "ASL Slab Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ASL_SLAB_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9254,
  },
  name: "ASL Slab Thickness",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const ASL_SLAB_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9255,
  },
  name: "ASL Slab Orientation",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const ASL_MID_SLAB_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9256,
  },
  name: "ASL Mid Slab Position",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const ASL_CONTEXT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9257,
  },
  name: "ASL Context",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ASL_PULSE_TRAIN_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9258,
  },
  name: "ASL Pulse Train Duration",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const ASL_CRUSHER_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9259,
  },
  name: "ASL Crusher Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ASL_CRUSHER_FLOW_LIMIT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x925A,
  },
  name: "ASL Crusher Flow Limit",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const ASL_CRUSHER_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x925B,
  },
  name: "ASL Crusher Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ASL_BOLUS_CUTOFF_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x925C,
  },
  name: "ASL Bolus Cut-off Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ASL_BOLUS_CUTOFF_TIMING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x925D,
  },
  name: "ASL Bolus Cut-off Timing Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ASL_BOLUS_CUTOFF_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x925E,
  },
  name: "ASL Bolus Cut-off Technique",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ASL_BOLUS_CUTOFF_DELAY_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x925F,
  },
  name: "ASL Bolus Cut-off Delay Time",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const ASL_SLAB_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9260,
  },
  name: "ASL Slab Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_INPPM: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9295,
  },
  name: "Chemical Shift Minimum Integration Limit in ppm",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_INPPM: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9296,
  },
  name: "Chemical Shift Maximum Integration Limit in ppm",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const WATER_REFERENCE_ACQUISITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9297,
  },
  name: "Water Reference Acquisition",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ECHO_PEAK_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9298,
  },
  name: "Echo Peak Position",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CT_ACQUISITION_TYPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9301,
  },
  name: "CT Acquisition Type Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUISITION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9302,
  },
  name: "Acquisition Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TUBE_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9303,
  },
  name: "Tube Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CT_ACQUISITION_DETAILS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9304,
  },
  name: "CT Acquisition Details Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REVOLUTION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9305,
  },
  name: "Revolution Time",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const SINGLE_COLLIMATION_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9306,
  },
  name: "Single Collimation Width",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TOTAL_COLLIMATION_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9307,
  },
  name: "Total Collimation Width",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CT_TABLE_DYNAMICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9308,
  },
  name: "CT Table Dynamics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TABLE_SPEED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9309,
  },
  name: "Table Speed",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TABLE_FEED_PER_ROTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9310,
  },
  name: "Table Feed per Rotation",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const SPIRAL_PITCH_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9311,
  },
  name: "Spiral Pitch Factor",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CT_GEOMETRY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9312,
  },
  name: "CT Geometry Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DATA_COLLECTION_CENTER_PATIENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9313,
  },
  name: "Data Collection Center (Patient)",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const CT_RECONSTRUCTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9314,
  },
  name: "CT Reconstruction Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_ALGORITHM: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9315,
  },
  name: "Reconstruction Algorithm",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONVOLUTION_KERNEL_GROUP: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9316,
  },
  name: "Convolution Kernel Group",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_FIELD_OF_VIEW: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9317,
  },
  name: "Reconstruction Field of View",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2,
};

pub const RECONSTRUCTION_TARGET_CENTER_PATIENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9318,
  },
  name: "Reconstruction Target Center (Patient)",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const RECONSTRUCTION_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9319,
  },
  name: "Reconstruction Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const IMAGE_FILTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9320,
  },
  name: "Image Filter",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const CT_EXPOSURE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9321,
  },
  name: "CT Exposure Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_PIXEL_SPACING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9322,
  },
  name: "Reconstruction Pixel Spacing",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2,
};

pub const EXPOSURE_MODULATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9323,
  },
  name: "Exposure Modulation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const ESTIMATED_DOSE_SAVING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9324,
  },
  name: "Estimated Dose Saving",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CT_X_RAY_DETAILS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9325,
  },
  name: "CT X-Ray Details Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CT_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9326,
  },
  name: "CT Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TABLE_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9327,
  },
  name: "Table Position",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const EXPOSURE_TIME_INMS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9328,
  },
  name: "Exposure Time in ms",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CT_IMAGE_FRAME_TYPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9329,
  },
  name: "CT Image Frame Type Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const X_RAY_TUBE_CURRENT_IN_MILLIAMPS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9330,
  },
  name: "X-Ray Tube Current in mA",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const EXPOSURE_INM_AS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9332,
  },
  name: "Exposure in mAs",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CONSTANT_VOLUME_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9333,
  },
  name: "Constant Volume Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FLUOROSCOPY_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9334,
  },
  name: "Fluoroscopy Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DISTANCE_SOURCE_TO_DATA_COLLECTION_CENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9335,
  },
  name: "Distance Source to Data Collection Center",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_AGENT_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9337,
  },
  name: "Contrast/Bolus Agent Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_INGREDIENT_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9338,
  },
  name: "Contrast/Bolus Ingredient Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTRAST_ADMINISTRATION_PROFILE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9340,
  },
  name: "Contrast Administration Profile Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_USAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9341,
  },
  name: "Contrast/Bolus Usage Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_AGENT_ADMINISTERED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9342,
  },
  name: "Contrast/Bolus Agent Administered",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_AGENT_DETECTED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9343,
  },
  name: "Contrast/Bolus Agent Detected",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_AGENT_PHASE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9344,
  },
  name: "Contrast/Bolus Agent Phase",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CTDI_VOL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9345,
  },
  name: "CTDIvol",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CTDI_PHANTOM_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9346,
  },
  name: "CTDI Phantom Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CALCIUM_SCORING_MASS_FACTOR_PATIENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9351,
  },
  name: "Calcium Scoring Mass Factor Patient",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CALCIUM_SCORING_MASS_FACTOR_DEVICE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9352,
  },
  name: "Calcium Scoring Mass Factor Device",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const ENERGY_WEIGHTING_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9353,
  },
  name: "Energy Weighting Factor",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CT_ADDITIONAL_X_RAY_SOURCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9360,
  },
  name: "CT Additional X-Ray Source Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MULTIENERGY_CT_ACQUISITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9361,
  },
  name: "Multi-energy CT Acquisition",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MULTIENERGY_CT_ACQUISITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9362,
  },
  name: "Multi-energy CT Acquisition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MULTIENERGY_CT_PROCESSING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9363,
  },
  name: "Multi-energy CT Processing Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MULTIENERGY_CT_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9364,
  },
  name: "Multi-energy CT Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MULTIENERGY_CT_X_RAY_SOURCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9365,
  },
  name: "Multi-energy CT X-Ray Source Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const X_RAY_SOURCE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9366,
  },
  name: "X-Ray Source Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const X_RAY_SOURCE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9367,
  },
  name: "X-Ray Source ID",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1,
};

pub const MULTIENERGY_SOURCE_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9368,
  },
  name: "Multi-energy Source Technique",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SOURCE_START_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9369,
  },
  name: "Source Start DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const SOURCE_END_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x936A,
  },
  name: "Source End DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const SWITCHING_PHASE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x936B,
  },
  name: "Switching Phase Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SWITCHING_PHASE_NOMINAL_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x936C,
  },
  name: "Switching Phase Nominal Duration",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SWITCHING_PHASE_TRANSITION_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x936D,
  },
  name: "Switching Phase Transition Duration",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const EFFECTIVE_BIN_ENERGY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x936E,
  },
  name: "Effective Bin Energy",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MULTIENERGY_CT_X_RAY_DETECTOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x936F,
  },
  name: "Multi-energy CT X-Ray Detector Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const X_RAY_DETECTOR_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9370,
  },
  name: "X-Ray Detector Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const X_RAY_DETECTOR_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9371,
  },
  name: "X-Ray Detector ID",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1,
};

pub const MULTIENERGY_DETECTOR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9372,
  },
  name: "Multi-energy Detector Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const X_RAY_DETECTOR_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9373,
  },
  name: "X-Ray Detector Label",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const NOMINAL_MAX_ENERGY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9374,
  },
  name: "Nominal Max Energy",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const NOMINAL_MIN_ENERGY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9375,
  },
  name: "Nominal Min Energy",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const REFERENCED_X_RAY_DETECTOR_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9376,
  },
  name: "Referenced X-Ray Detector Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const REFERENCED_X_RAY_SOURCE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9377,
  },
  name: "Referenced X-Ray Source Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const REFERENCED_PATH_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9378,
  },
  name: "Referenced Path Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const MULTIENERGY_CT_PATH_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9379,
  },
  name: "Multi-energy CT Path Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MULTIENERGY_CT_PATH_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x937A,
  },
  name: "Multi-energy CT Path Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const MULTIENERGY_ACQUISITION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x937B,
  },
  name: "Multi-energy Acquisition Description",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const MONOENERGETIC_ENERGY_EQUIVALENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x937C,
  },
  name: "Monoenergetic Energy Equivalent",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const MATERIAL_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x937D,
  },
  name: "Material Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DECOMPOSITION_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x937E,
  },
  name: "Decomposition Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DECOMPOSITION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x937F,
  },
  name: "Decomposition Description",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const DECOMPOSITION_ALGORITHM_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9380,
  },
  name: "Decomposition Algorithm Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DECOMPOSITION_MATERIAL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9381,
  },
  name: "Decomposition Material Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MATERIAL_ATTENUATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9382,
  },
  name: "Material Attenuation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PHOTON_ENERGY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9383,
  },
  name: "Photon Energy",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const X_RAY_MASS_ATTENUATION_COEFFICIENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9384,
  },
  name: "X-Ray Mass Attenuation Coefficient",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PROJECTION_PIXEL_CALIBRATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9401,
  },
  name: "Projection Pixel Calibration Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DISTANCE_SOURCE_TO_ISOCENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9402,
  },
  name: "Distance Source to Isocenter",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const DISTANCE_OBJECT_TO_TABLE_TOP: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9403,
  },
  name: "Distance Object to Table Top",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const OBJECT_PIXEL_SPACING_IN_CENTER_OF_BEAM: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9404,
  },
  name: "Object Pixel Spacing in Center of Beam",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const POSITIONER_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9405,
  },
  name: "Positioner Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TABLE_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9406,
  },
  name: "Table Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COLLIMATOR_SHAPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9407,
  },
  name: "Collimator Shape Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PLANES_IN_ACQUISITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9410,
  },
  name: "Planes in Acquisition",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const XAXRF_FRAME_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9412,
  },
  name: "XA/XRF Frame Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FRAME_ACQUISITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9417,
  },
  name: "Frame Acquisition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const X_RAY_RECEPTOR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9420,
  },
  name: "X-Ray Receptor Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ACQUISITION_PROTOCOL_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9423,
  },
  name: "Acquisition Protocol Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ACQUISITION_PROTOCOL_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9424,
  },
  name: "Acquisition Protocol Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_INGREDIENT_OPAQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9425,
  },
  name: "Contrast/Bolus Ingredient Opaque",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DISTANCE_RECEPTOR_PLANE_TO_DETECTOR_HOUSING: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9426,
  },
  name: "Distance Receptor Plane to Detector Housing",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const INTENSIFIER_ACTIVE_SHAPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9427,
  },
  name: "Intensifier Active Shape",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INTENSIFIER_ACTIVE_DIMENSIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9428,
  },
  name: "Intensifier Active Dimension(s)",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_2,
};

pub const PHYSICAL_DETECTOR_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9429,
  },
  name: "Physical Detector Size",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const POSITION_OF_ISOCENTER_PROJECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9430,
  },
  name: "Position of Isocenter Projection",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const FIELD_OF_VIEW_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9432,
  },
  name: "Field of View Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FIELD_OF_VIEW_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9433,
  },
  name: "Field of View Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const EXPOSURE_CONTROL_SENSING_REGIONS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9434,
  },
  name: "Exposure Control Sensing Regions Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EXPOSURE_CONTROL_SENSING_REGION_SHAPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9435,
  },
  name: "Exposure Control Sensing Region Shape",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EXPOSURE_CONTROL_SENSING_REGION_LEFT_VERTICAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9436,
  },
  name: "Exposure Control Sensing Region Left Vertical Edge",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_1,
};

pub const EXPOSURE_CONTROL_SENSING_REGION_RIGHT_VERTICAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9437,
  },
  name: "Exposure Control Sensing Region Right Vertical Edge",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_1,
};

pub const EXPOSURE_CONTROL_SENSING_REGION_UPPER_HORIZONTAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9438,
  },
  name: "Exposure Control Sensing Region Upper Horizontal Edge",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_1,
};

pub const EXPOSURE_CONTROL_SENSING_REGION_LOWER_HORIZONTAL_EDGE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9439,
  },
  name: "Exposure Control Sensing Region Lower Horizontal Edge",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_1,
};

pub const CENTER_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9440,
  },
  name: "Center of Circular Exposure Control Sensing Region",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_2,
};

pub const RADIUS_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9441,
  },
  name: "Radius of Circular Exposure Control Sensing Region",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const VERTICES_OF_THE_POLYGONAL_EXPOSURE_CONTROL_SENSING_REGION: Item =
  Item {
    tag: DataElementTag {
      group: 0x0018,
      element: 0x9442,
    },
    name: "Vertices of the Polygonal Exposure Control Sensing Region",
    vrs: &[ValueRepresentation::SignedShort],
    multiplicity: VM_2_TO_N,
  };

pub const COLUMN_ANGULATION_PATIENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9447,
  },
  name: "Column Angulation (Patient)",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BEAM_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9449,
  },
  name: "Beam Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const FRAME_DETECTOR_PARAMETERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9451,
  },
  name: "Frame Detector Parameters Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CALCULATED_ANATOMY_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9452,
  },
  name: "Calculated Anatomy Thickness",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CALIBRATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9455,
  },
  name: "Calibration Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OBJECT_THICKNESS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9456,
  },
  name: "Object Thickness Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PLANE_IDENTIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9457,
  },
  name: "Plane Identification",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FIELD_OF_VIEW_DIMENSIONS_IN_FLOAT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9461,
  },
  name: "Field of View Dimension(s) in Float",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_2,
};

pub const ISOCENTER_REFERENCE_SYSTEM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9462,
  },
  name: "Isocenter Reference System Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const POSITIONER_ISOCENTER_PRIMARY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9463,
  },
  name: "Positioner Isocenter Primary Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const POSITIONER_ISOCENTER_SECONDARY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9464,
  },
  name: "Positioner Isocenter Secondary Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const POSITIONER_ISOCENTER_DETECTOR_ROTATION_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9465,
  },
  name: "Positioner Isocenter Detector Rotation Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TABLE_X_POSITION_TO_ISOCENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9466,
  },
  name: "Table X Position to Isocenter",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TABLE_Y_POSITION_TO_ISOCENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9467,
  },
  name: "Table Y Position to Isocenter",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TABLE_Z_POSITION_TO_ISOCENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9468,
  },
  name: "Table Z Position to Isocenter",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TABLE_HORIZONTAL_ROTATION_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9469,
  },
  name: "Table Horizontal Rotation Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TABLE_HEAD_TILT_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9470,
  },
  name: "Table Head Tilt Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TABLE_CRADLE_TILT_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9471,
  },
  name: "Table Cradle Tilt Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const FRAME_DISPLAY_SHUTTER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9472,
  },
  name: "Frame Display Shutter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUIRED_IMAGE_AREA_DOSE_PRODUCT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9473,
  },
  name: "Acquired Image Area Dose Product",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const C_ARM_POSITIONER_TABLETOP_RELATIONSHIP: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9474,
  },
  name: "C-arm Positioner Tabletop Relationship",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const X_RAY_GEOMETRY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9476,
  },
  name: "X-Ray Geometry Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IRRADIATION_EVENT_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9477,
  },
  name: "Irradiation Event Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const X_RAY_3D_FRAME_TYPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9504,
  },
  name: "X-Ray 3D Frame Type Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTRIBUTING_SOURCES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9506,
  },
  name: "Contributing Sources Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const X_RAY_3D_ACQUISITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9507,
  },
  name: "X-Ray 3D Acquisition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRIMARY_POSITIONER_SCAN_ARC: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9508,
  },
  name: "Primary Positioner Scan Arc",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SECONDARY_POSITIONER_SCAN_ARC: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9509,
  },
  name: "Secondary Positioner Scan Arc",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const PRIMARY_POSITIONER_SCAN_START_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9510,
  },
  name: "Primary Positioner Scan Start Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SECONDARY_POSITIONER_SCAN_START_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9511,
  },
  name: "Secondary Positioner Scan Start Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const PRIMARY_POSITIONER_INCREMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9514,
  },
  name: "Primary Positioner Increment",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SECONDARY_POSITIONER_INCREMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9515,
  },
  name: "Secondary Positioner Increment",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const START_ACQUISITION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9516,
  },
  name: "Start Acquisition DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const END_ACQUISITION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9517,
  },
  name: "End Acquisition DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const PRIMARY_POSITIONER_INCREMENT_SIGN: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9518,
  },
  name: "Primary Positioner Increment Sign",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_1,
};

pub const SECONDARY_POSITIONER_INCREMENT_SIGN: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9519,
  },
  name: "Secondary Positioner Increment Sign",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_1,
};

pub const APPLICATION_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9524,
  },
  name: "Application Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const APPLICATION_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9525,
  },
  name: "Application Version",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const APPLICATION_MANUFACTURER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9526,
  },
  name: "Application Manufacturer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ALGORITHM_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9527,
  },
  name: "Algorithm Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ALGORITHM_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9528,
  },
  name: "Algorithm Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const X_RAY_3D_RECONSTRUCTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9530,
  },
  name: "X-Ray 3D Reconstruction Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9531,
  },
  name: "Reconstruction Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PER_PROJECTION_ACQUISITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9538,
  },
  name: "Per Projection Acquisition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DETECTOR_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9541,
  },
  name: "Detector Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const X_RAY_ACQUISITION_DOSE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9542,
  },
  name: "X-Ray Acquisition Dose Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const X_RAY_SOURCE_ISOCENTER_PRIMARY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9543,
  },
  name: "X-Ray Source Isocenter Primary Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const X_RAY_SOURCE_ISOCENTER_SECONDARY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9544,
  },
  name: "X-Ray Source Isocenter Secondary Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const BREAST_SUPPORT_ISOCENTER_PRIMARY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9545,
  },
  name: "Breast Support Isocenter Primary Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const BREAST_SUPPORT_ISOCENTER_SECONDARY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9546,
  },
  name: "Breast Support Isocenter Secondary Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const BREAST_SUPPORT_X_POSITION_TO_ISOCENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9547,
  },
  name: "Breast Support X Position to Isocenter",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const BREAST_SUPPORT_Y_POSITION_TO_ISOCENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9548,
  },
  name: "Breast Support Y Position to Isocenter",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const BREAST_SUPPORT_Z_POSITION_TO_ISOCENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9549,
  },
  name: "Breast Support Z Position to Isocenter",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DETECTOR_ISOCENTER_PRIMARY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9550,
  },
  name: "Detector Isocenter Primary Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DETECTOR_ISOCENTER_SECONDARY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9551,
  },
  name: "Detector Isocenter Secondary Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DETECTOR_X_POSITION_TO_ISOCENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9552,
  },
  name: "Detector X Position to Isocenter",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DETECTOR_Y_POSITION_TO_ISOCENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9553,
  },
  name: "Detector Y Position to Isocenter",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DETECTOR_Z_POSITION_TO_ISOCENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9554,
  },
  name: "Detector Z Position to Isocenter",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const X_RAY_GRID_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9555,
  },
  name: "X-Ray Grid Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const X_RAY_FILTER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9556,
  },
  name: "X-Ray Filter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DETECTOR_ACTIVE_AREA_TLHC_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9557,
  },
  name: "Detector Active Area TLHC Position",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const DETECTOR_ACTIVE_AREA_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9558,
  },
  name: "Detector Active Area Orientation",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_6,
};

pub const POSITIONER_PRIMARY_ANGLE_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9559,
  },
  name: "Positioner Primary Angle Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DIFFUSION_B_MATRIX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9601,
  },
  name: "Diffusion b-matrix Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DIFFUSION_B_VALUE_XX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9602,
  },
  name: "Diffusion b-value XX",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DIFFUSION_B_VALUE_XY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9603,
  },
  name: "Diffusion b-value XY",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DIFFUSION_B_VALUE_XZ: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9604,
  },
  name: "Diffusion b-value XZ",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DIFFUSION_B_VALUE_YY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9605,
  },
  name: "Diffusion b-value YY",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DIFFUSION_B_VALUE_YZ: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9606,
  },
  name: "Diffusion b-value YZ",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DIFFUSION_B_VALUE_ZZ: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9607,
  },
  name: "Diffusion b-value ZZ",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const FUNCTIONAL_MR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9621,
  },
  name: "Functional MR Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FUNCTIONAL_SETTLING_PHASE_FRAMES_PRESENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9622,
  },
  name: "Functional Settling Phase Frames Present",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FUNCTIONAL_SYNC_PULSE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9623,
  },
  name: "Functional Sync Pulse",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const SETTLING_PHASE_FRAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9624,
  },
  name: "Settling Phase Frame",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DECAY_CORRECTION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9701,
  },
  name: "Decay Correction DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const START_DENSITY_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9715,
  },
  name: "Start Density Threshold",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const START_RELATIVE_DENSITY_DIFFERENCE_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9716,
  },
  name: "Start Relative Density Difference Threshold",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const START_CARDIAC_TRIGGER_COUNT_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9717,
  },
  name: "Start Cardiac Trigger Count Threshold",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const START_RESPIRATORY_TRIGGER_COUNT_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9718,
  },
  name: "Start Respiratory Trigger Count Threshold",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TERMINATION_COUNTS_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9719,
  },
  name: "Termination Counts Threshold",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TERMINATION_DENSITY_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9720,
  },
  name: "Termination Density Threshold",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TERMINATION_RELATIVE_DENSITY_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9721,
  },
  name: "Termination Relative Density Threshold",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TERMINATION_TIME_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9722,
  },
  name: "Termination Time Threshold",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TERMINATION_CARDIAC_TRIGGER_COUNT_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9723,
  },
  name: "Termination Cardiac Trigger Count Threshold",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TERMINATION_RESPIRATORY_TRIGGER_COUNT_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9724,
  },
  name: "Termination Respiratory Trigger Count Threshold",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DETECTOR_GEOMETRY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9725,
  },
  name: "Detector Geometry",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TRANSVERSE_DETECTOR_SEPARATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9726,
  },
  name: "Transverse Detector Separation",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const AXIAL_DETECTOR_DIMENSION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9727,
  },
  name: "Axial Detector Dimension",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RADIOPHARMACEUTICAL_AGENT_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9729,
  },
  name: "Radiopharmaceutical Agent Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PET_FRAME_ACQUISITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9732,
  },
  name: "PET Frame Acquisition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PET_DETECTOR_MOTION_DETAILS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9733,
  },
  name: "PET Detector Motion Details Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PET_TABLE_DYNAMICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9734,
  },
  name: "PET Table Dynamics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PET_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9735,
  },
  name: "PET Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PET_FRAME_CORRECTION_FACTORS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9736,
  },
  name: "PET Frame Correction Factors Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIOPHARMACEUTICAL_USAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9737,
  },
  name: "Radiopharmaceutical Usage Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ATTENUATION_CORRECTION_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9738,
  },
  name: "Attenuation Correction Source",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_ITERATIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9739,
  },
  name: "Number of Iterations",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_SUBSETS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9740,
  },
  name: "Number of Subsets",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PET_RECONSTRUCTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9749,
  },
  name: "PET Reconstruction Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PET_FRAME_TYPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9751,
  },
  name: "PET Frame Type Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TIME_OF_FLIGHT_INFORMATION_USED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9755,
  },
  name: "Time of Flight Information Used",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9756,
  },
  name: "Reconstruction Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DECAY_CORRECTED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9758,
  },
  name: "Decay Corrected",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ATTENUATION_CORRECTED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9759,
  },
  name: "Attenuation Corrected",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SCATTER_CORRECTED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9760,
  },
  name: "Scatter Corrected",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DEAD_TIME_CORRECTED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9761,
  },
  name: "Dead Time Corrected",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GANTRY_MOTION_CORRECTED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9762,
  },
  name: "Gantry Motion Corrected",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATIENT_MOTION_CORRECTED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9763,
  },
  name: "Patient Motion Corrected",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COUNT_LOSS_NORMALIZATION_CORRECTED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9764,
  },
  name: "Count Loss Normalization Corrected",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RANDOMS_CORRECTED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9765,
  },
  name: "Randoms Corrected",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NON_UNIFORM_RADIAL_SAMPLING_CORRECTED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9766,
  },
  name: "Non-uniform Radial Sampling Corrected",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SENSITIVITY_CALIBRATED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9767,
  },
  name: "Sensitivity Calibrated",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DETECTOR_NORMALIZATION_CORRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9768,
  },
  name: "Detector Normalization Correction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ITERATIVE_RECONSTRUCTION_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9769,
  },
  name: "Iterative Reconstruction Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ATTENUATION_CORRECTION_TEMPORAL_RELATIONSHIP: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9770,
  },
  name: "Attenuation Correction Temporal Relationship",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATIENT_PHYSIOLOGICAL_STATE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9771,
  },
  name: "Patient Physiological State Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_PHYSIOLOGICAL_STATE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9772,
  },
  name: "Patient Physiological State Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DEPTHS_OF_FOCUS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9801,
  },
  name: "Depth(s) of Focus",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_N,
};

pub const EXCLUDED_INTERVALS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9803,
  },
  name: "Excluded Intervals Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EXCLUSION_START_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9804,
  },
  name: "Exclusion Start DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const EXCLUSION_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9805,
  },
  name: "Exclusion Duration",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const US_IMAGE_DESCRIPTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9806,
  },
  name: "US Image Description Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_DATA_TYPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9807,
  },
  name: "Image Data Type Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DATA_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9808,
  },
  name: "Data Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TRANSDUCER_SCAN_PATTERN_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9809,
  },
  name: "Transducer Scan Pattern Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ALIASED_DATA_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x980B,
  },
  name: "Aliased Data Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const POSITION_MEASURING_DEVICE_USED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x980C,
  },
  name: "Position Measuring Device Used",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TRANSDUCER_GEOMETRY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x980D,
  },
  name: "Transducer Geometry Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRANSDUCER_BEAM_STEERING_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x980E,
  },
  name: "Transducer Beam Steering Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRANSDUCER_APPLICATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x980F,
  },
  name: "Transducer Application Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ZERO_VELOCITY_PIXEL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9810,
  },
  name: "Zero Velocity Pixel Value",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const PHOTOACOUSTIC_EXCITATION_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9821,
  },
  name: "Photoacoustic Excitation Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EXCITATION_SPECTRAL_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9822,
  },
  name: "Excitation Spectral Width",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const EXCITATION_ENERGY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9823,
  },
  name: "Excitation Energy",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const EXCITATION_PULSE_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9824,
  },
  name: "Excitation Pulse Duration",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const EXCITATION_WAVELENGTH_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9825,
  },
  name: "Excitation Wavelength Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EXCITATION_WAVELENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9826,
  },
  name: "Excitation Wavelength",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const ILLUMINATION_TRANSLATION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9828,
  },
  name: "Illumination Translation Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ACOUSTIC_COUPLING_MEDIUM_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9829,
  },
  name: "Acoustic Coupling Medium Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ACOUSTIC_COUPLING_MEDIUM_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x982A,
  },
  name: "Acoustic Coupling Medium Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACOUSTIC_COUPLING_MEDIUM_TEMPERATURE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x982B,
  },
  name: "Acoustic Coupling Medium Temperature",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TRANSDUCER_RESPONSE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x982C,
  },
  name: "Transducer Response Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CENTER_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x982D,
  },
  name: "Center Frequency",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const FRACTIONAL_BANDWIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x982E,
  },
  name: "Fractional Bandwidth",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const LOWER_CUTOFF_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x982F,
  },
  name: "Lower Cutoff Frequency",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const UPPER_CUTOFF_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9830,
  },
  name: "Upper Cutoff Frequency",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TRANSDUCER_TECHNOLOGY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9831,
  },
  name: "Transducer Technology Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOUND_SPEED_CORRECTION_MECHANISM_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9832,
  },
  name: "Sound Speed Correction Mechanism Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OBJECT_SOUND_SPEED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9833,
  },
  name: "Object Sound Speed",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const ACOUSTIC_COUPLING_MEDIUM_SOUND_SPEED: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9834,
  },
  name: "Acoustic Coupling Medium Sound Speed",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PHOTOACOUSTIC_IMAGE_FRAME_TYPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9835,
  },
  name: "Photoacoustic Image Frame Type Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_DATA_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9836,
  },
  name: "Image Data Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCE_LOCATION_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9900,
  },
  name: "Reference Location Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REFERENCE_LOCATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9901,
  },
  name: "Reference Location Description",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const REFERENCE_BASIS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9902,
  },
  name: "Reference Basis Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCE_GEOMETRY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9903,
  },
  name: "Reference Geometry Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OFFSET_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9904,
  },
  name: "Offset Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const OFFSET_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9905,
  },
  name: "Offset Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const POTENTIAL_SCHEDULED_PROTOCOL_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9906,
  },
  name: "Potential Scheduled Protocol Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const POTENTIAL_REQUESTED_PROCEDURE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9907,
  },
  name: "Potential Requested Procedure Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const POTENTIAL_REASONS_FOR_PROCEDURE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9908,
  },
  name: "Potential Reasons for Procedure",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1_TO_N,
};

pub const POTENTIAL_REASONS_FOR_PROCEDURE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9909,
  },
  name: "Potential Reasons for Procedure Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const POTENTIAL_DIAGNOSTIC_TASKS: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x990A,
  },
  name: "Potential Diagnostic Tasks",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1_TO_N,
};

pub const CONTRAINDICATIONS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x990B,
  },
  name: "Contraindications Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_DEFINED_PROTOCOL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x990C,
  },
  name: "Referenced Defined Protocol Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_PERFORMED_PROTOCOL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x990D,
  },
  name: "Referenced Performed Protocol Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PREDECESSOR_PROTOCOL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x990E,
  },
  name: "Predecessor Protocol Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PROTOCOL_PLANNING_INFORMATION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x990F,
  },
  name: "Protocol Planning Information",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const PROTOCOL_DESIGN_RATIONALE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9910,
  },
  name: "Protocol Design Rationale",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const PATIENT_SPECIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9911,
  },
  name: "Patient Specification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MODEL_SPECIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9912,
  },
  name: "Model Specification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PARAMETERS_SPECIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9913,
  },
  name: "Parameters Specification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INSTRUCTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9914,
  },
  name: "Instruction Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INSTRUCTION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9915,
  },
  name: "Instruction Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const INSTRUCTION_TEXT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9916,
  },
  name: "Instruction Text",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const INSTRUCTION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9917,
  },
  name: "Instruction Description",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const INSTRUCTION_PERFORMED_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9918,
  },
  name: "Instruction Performed Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INSTRUCTION_PERFORMED_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9919,
  },
  name: "Instruction Performed DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const INSTRUCTION_PERFORMANCE_COMMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x991A,
  },
  name: "Instruction Performance Comment",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const PATIENT_POSITIONING_INSTRUCTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x991B,
  },
  name: "Patient Positioning Instruction Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const POSITIONING_METHOD_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x991C,
  },
  name: "Positioning Method Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const POSITIONING_LANDMARK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x991D,
  },
  name: "Positioning Landmark Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TARGET_FRAME_OF_REFERENCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x991E,
  },
  name: "Target Frame of Reference UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const ACQUISITION_PROTOCOL_ELEMENT_SPECIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x991F,
  },
  name: "Acquisition Protocol Element Specification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUISITION_PROTOCOL_ELEMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9920,
  },
  name: "Acquisition Protocol Element Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PROTOCOL_ELEMENT_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9921,
  },
  name: "Protocol Element Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PROTOCOL_ELEMENT_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9922,
  },
  name: "Protocol Element Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PROTOCOL_ELEMENT_CHARACTERISTICS_SUMMARY: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9923,
  },
  name: "Protocol Element Characteristics Summary",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const PROTOCOL_ELEMENT_PURPOSE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9924,
  },
  name: "Protocol Element Purpose",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const ACQUISITION_MOTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9930,
  },
  name: "Acquisition Motion",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ACQUISITION_START_LOCATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9931,
  },
  name: "Acquisition Start Location Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUISITION_END_LOCATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9932,
  },
  name: "Acquisition End Location Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_PROTOCOL_ELEMENT_SPECIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9933,
  },
  name: "Reconstruction Protocol Element Specification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_PROTOCOL_ELEMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9934,
  },
  name: "Reconstruction Protocol Element Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STORAGE_PROTOCOL_ELEMENT_SPECIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9935,
  },
  name: "Storage Protocol Element Specification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STORAGE_PROTOCOL_ELEMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9936,
  },
  name: "Storage Protocol Element Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REQUESTED_SERIES_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9937,
  },
  name: "Requested Series Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SOURCE_ACQUISITION_PROTOCOL_ELEMENT_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9938,
  },
  name: "Source Acquisition Protocol Element Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const SOURCE_ACQUISITION_BEAM_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9939,
  },
  name: "Source Acquisition Beam Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const SOURCE_RECONSTRUCTION_PROTOCOL_ELEMENT_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x993A,
  },
  name: "Source Reconstruction Protocol Element Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const RECONSTRUCTION_START_LOCATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x993B,
  },
  name: "Reconstruction Start Location Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_END_LOCATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x993C,
  },
  name: "Reconstruction End Location Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_ALGORITHM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x993D,
  },
  name: "Reconstruction Algorithm Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_TARGET_CENTER_LOCATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x993E,
  },
  name: "Reconstruction Target Center Location Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_FILTER_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9941,
  },
  name: "Image Filter Description",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const CTDI_VOL_NOTIFICATION_TRIGGER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9942,
  },
  name: "CTDIvol Notification Trigger",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DLP_NOTIFICATION_TRIGGER: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9943,
  },
  name: "DLP Notification Trigger",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const AUTO_KVP_SELECTION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9944,
  },
  name: "Auto KVP Selection Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const AUTO_KVP_UPPER_BOUND: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9945,
  },
  name: "Auto KVP Upper Bound",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const AUTO_KVP_LOWER_BOUND: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9946,
  },
  name: "Auto KVP Lower Bound",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PROTOCOL_DEFINED_PATIENT_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0x9947,
  },
  name: "Protocol Defined Patient Position",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTRIBUTING_EQUIPMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0xA001,
  },
  name: "Contributing Equipment Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTRIBUTION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0xA002,
  },
  name: "Contribution DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const CONTRIBUTION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0018,
    element: 0xA003,
  },
  name: "Contribution Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const STUDY_INSTANCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x000D,
  },
  name: "Study Instance UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const SERIES_INSTANCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x000E,
  },
  name: "Series Instance UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const STUDY_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0010,
  },
  name: "Study ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SERIES_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0011,
  },
  name: "Series Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ACQUISITION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0012,
  },
  name: "Acquisition Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const INSTANCE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0013,
  },
  name: "Instance Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ISOTOPE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0014,
  },
  name: "Isotope Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PHASE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0015,
  },
  name: "Phase Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const INTERVAL_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0016,
  },
  name: "Interval Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const TIME_SLOT_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0017,
  },
  name: "Time Slot Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ANGLE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0018,
  },
  name: "Angle Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ITEM_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0019,
  },
  name: "Item Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PATIENT_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0020,
  },
  name: "Patient Orientation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_2,
};

pub const OVERLAY_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0022,
  },
  name: "Overlay Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CURVE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0024,
  },
  name: "Curve Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const LUT_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0026,
  },
  name: "LUT Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PYRAMID_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0027,
  },
  name: "Pyramid Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const IMAGE_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0030,
  },
  name: "Image Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const IMAGE_POSITION_PATIENT: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0032,
  },
  name: "Image Position (Patient)",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const IMAGE_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0035,
  },
  name: "Image Orientation",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_6,
};

pub const IMAGE_ORIENTATION_PATIENT: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0037,
  },
  name: "Image Orientation (Patient)",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_6,
};

pub const LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0050,
  },
  name: "Location",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FRAME_OF_REFERENCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0052,
  },
  name: "Frame of Reference UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const LATERALITY: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0060,
  },
  name: "Laterality",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_LATERALITY: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0062,
  },
  name: "Image Laterality",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_GEOMETRY_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0070,
  },
  name: "Image Geometry Type",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const MASKING_IMAGE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0080,
  },
  name: "Masking Image",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const REPORT_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x00AA,
  },
  name: "Report Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const TEMPORAL_POSITION_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0100,
  },
  name: "Temporal Position Identifier",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_TEMPORAL_POSITIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0105,
  },
  name: "Number of Temporal Positions",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const TEMPORAL_RESOLUTION: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0110,
  },
  name: "Temporal Resolution",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SYNCHRONIZATION_FRAME_OF_REFERENCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0200,
  },
  name: "Synchronization Frame of Reference UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const SOP_INSTANCE_UID_OF_CONCATENATION_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x0242,
  },
  name: "SOP Instance UID of Concatenation Source",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const SERIES_IN_STUDY: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1000,
  },
  name: "Series in Study",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ACQUISITIONS_IN_SERIES: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1001,
  },
  name: "Acquisitions in Series",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const IMAGES_IN_ACQUISITION: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1002,
  },
  name: "Images in Acquisition",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const IMAGES_IN_SERIES: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1003,
  },
  name: "Images in Series",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ACQUISITIONS_IN_STUDY: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1004,
  },
  name: "Acquisitions in Study",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const IMAGES_IN_STUDY: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1005,
  },
  name: "Images in Study",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1020,
  },
  name: "Reference",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const TARGET_POSITION_REFERENCE_INDICATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x103F,
  },
  name: "Target Position Reference Indicator",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const POSITION_REFERENCE_INDICATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1040,
  },
  name: "Position Reference Indicator",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SLICE_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1041,
  },
  name: "Slice Location",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const OTHER_STUDY_NUMBERS: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1070,
  },
  name: "Other Study Numbers",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_PATIENT_RELATED_STUDIES: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1200,
  },
  name: "Number of Patient Related Studies",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_PATIENT_RELATED_SERIES: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1202,
  },
  name: "Number of Patient Related Series",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_PATIENT_RELATED_INSTANCES: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1204,
  },
  name: "Number of Patient Related Instances",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_STUDY_RELATED_SERIES: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1206,
  },
  name: "Number of Study Related Series",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_STUDY_RELATED_INSTANCES: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1208,
  },
  name: "Number of Study Related Instances",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_SERIES_RELATED_INSTANCES: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x1209,
  },
  name: "Number of Series Related Instances",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SOURCE_IMAGE_IDS: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x3100,
  },
  name: "Source Image IDs",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const MODIFYING_DEVICE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x3401,
  },
  name: "Modifying Device ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MODIFIED_IMAGE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x3402,
  },
  name: "Modified Image ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MODIFIED_IMAGE_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x3403,
  },
  name: "Modified Image Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const MODIFYING_DEVICE_MANUFACTURER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x3404,
  },
  name: "Modifying Device Manufacturer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const MODIFIED_IMAGE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x3405,
  },
  name: "Modified Image Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const MODIFIED_IMAGE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x3406,
  },
  name: "Modified Image Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const IMAGE_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x4000,
  },
  name: "Image Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const ORIGINAL_IMAGE_IDENTIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x5000,
  },
  name: "Original Image Identification",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const ORIGINAL_IMAGE_IDENTIFICATION_NOMENCLATURE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x5002,
  },
  name: "Original Image Identification Nomenclature",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const STACK_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9056,
  },
  name: "Stack ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const IN_STACK_POSITION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9057,
  },
  name: "In-Stack Position Number",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const FRAME_ANATOMY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9071,
  },
  name: "Frame Anatomy Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FRAME_LATERALITY: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9072,
  },
  name: "Frame Laterality",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FRAME_CONTENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9111,
  },
  name: "Frame Content Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PLANE_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9113,
  },
  name: "Plane Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PLANE_ORIENTATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9116,
  },
  name: "Plane Orientation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TEMPORAL_POSITION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9128,
  },
  name: "Temporal Position Index",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const NOMINAL_CARDIAC_TRIGGER_DELAY_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9153,
  },
  name: "Nominal Cardiac Trigger Delay Time",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const NOMINAL_CARDIAC_TRIGGER_TIME_PRIOR_TO_R_PEAK: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9154,
  },
  name: "Nominal Cardiac Trigger Time Prior To R-Peak",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ACTUAL_CARDIAC_TRIGGER_TIME_PRIOR_TO_R_PEAK: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9155,
  },
  name: "Actual Cardiac Trigger Time Prior To R-Peak",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const FRAME_ACQUISITION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9156,
  },
  name: "Frame Acquisition Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DIMENSION_INDEX_VALUES: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9157,
  },
  name: "Dimension Index Values",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1_TO_N,
};

pub const FRAME_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9158,
  },
  name: "Frame Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const CONCATENATION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9161,
  },
  name: "Concatenation UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const IN_CONCATENATION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9162,
  },
  name: "In-concatenation Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IN_CONCATENATION_TOTAL_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9163,
  },
  name: "In-concatenation Total Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DIMENSION_ORGANIZATION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9164,
  },
  name: "Dimension Organization UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const DIMENSION_INDEX_POINTER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9165,
  },
  name: "Dimension Index Pointer",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1,
};

pub const FUNCTIONAL_GROUP_POINTER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9167,
  },
  name: "Functional Group Pointer",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1,
};

pub const UNASSIGNED_SHARED_CONVERTED_ATTRIBUTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9170,
  },
  name: "Unassigned Shared Converted Attributes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const UNASSIGNED_PER_FRAME_CONVERTED_ATTRIBUTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9171,
  },
  name: "Unassigned Per-Frame Converted Attributes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONVERSION_SOURCE_ATTRIBUTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9172,
  },
  name: "Conversion Source Attributes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DIMENSION_INDEX_PRIVATE_CREATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9213,
  },
  name: "Dimension Index Private Creator",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DIMENSION_ORGANIZATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9221,
  },
  name: "Dimension Organization Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DIMENSION_INDEX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9222,
  },
  name: "Dimension Index Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONCATENATION_FRAME_OFFSET_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9228,
  },
  name: "Concatenation Frame Offset Number",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const FUNCTIONAL_GROUP_PRIVATE_CREATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9238,
  },
  name: "Functional Group Private Creator",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const NOMINAL_PERCENTAGE_OF_CARDIAC_PHASE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9241,
  },
  name: "Nominal Percentage of Cardiac Phase",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const NOMINAL_PERCENTAGE_OF_RESPIRATORY_PHASE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9245,
  },
  name: "Nominal Percentage of Respiratory Phase",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const STARTING_RESPIRATORY_AMPLITUDE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9246,
  },
  name: "Starting Respiratory Amplitude",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const STARTING_RESPIRATORY_PHASE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9247,
  },
  name: "Starting Respiratory Phase",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ENDING_RESPIRATORY_AMPLITUDE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9248,
  },
  name: "Ending Respiratory Amplitude",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ENDING_RESPIRATORY_PHASE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9249,
  },
  name: "Ending Respiratory Phase",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RESPIRATORY_TRIGGER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9250,
  },
  name: "Respiratory Trigger Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RR_INTERVAL_TIME_NOMINAL: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9251,
  },
  name: "R-R Interval Time Nominal",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const ACTUAL_CARDIAC_TRIGGER_DELAY_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9252,
  },
  name: "Actual Cardiac Trigger Delay Time",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RESPIRATORY_SYNCHRONIZATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9253,
  },
  name: "Respiratory Synchronization Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RESPIRATORY_INTERVAL_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9254,
  },
  name: "Respiratory Interval Time",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const NOMINAL_RESPIRATORY_TRIGGER_DELAY_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9255,
  },
  name: "Nominal Respiratory Trigger Delay Time",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RESPIRATORY_TRIGGER_DELAY_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9256,
  },
  name: "Respiratory Trigger Delay Threshold",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const ACTUAL_RESPIRATORY_TRIGGER_DELAY_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9257,
  },
  name: "Actual Respiratory Trigger Delay Time",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const IMAGE_POSITION_VOLUME: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9301,
  },
  name: "Image Position (Volume)",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const IMAGE_ORIENTATION_VOLUME: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9302,
  },
  name: "Image Orientation (Volume)",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_6,
};

pub const ULTRASOUND_ACQUISITION_GEOMETRY: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9307,
  },
  name: "Ultrasound Acquisition Geometry",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const APEX_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9308,
  },
  name: "Apex Position",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const VOLUME_TO_TRANSDUCER_MAPPING_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9309,
  },
  name: "Volume to Transducer Mapping Matrix",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: ValueMultiplicity {
    min: 16,
    max: Some(16),
  },
};

pub const VOLUME_TO_TABLE_MAPPING_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x930A,
  },
  name: "Volume to Table Mapping Matrix",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: ValueMultiplicity {
    min: 16,
    max: Some(16),
  },
};

pub const VOLUME_TO_TRANSDUCER_RELATIONSHIP: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x930B,
  },
  name: "Volume to Transducer Relationship",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATIENT_FRAME_OF_REFERENCE_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x930C,
  },
  name: "Patient Frame of Reference Source",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TEMPORAL_POSITION_TIME_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x930D,
  },
  name: "Temporal Position Time Offset",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PLANE_POSITION_VOLUME_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x930E,
  },
  name: "Plane Position (Volume) Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PLANE_ORIENTATION_VOLUME_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x930F,
  },
  name: "Plane Orientation (Volume) Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TEMPORAL_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9310,
  },
  name: "Temporal Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DIMENSION_ORGANIZATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9311,
  },
  name: "Dimension Organization Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VOLUME_FRAME_OF_REFERENCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9312,
  },
  name: "Volume Frame of Reference UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const TABLE_FRAME_OF_REFERENCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9313,
  },
  name: "Table Frame of Reference UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const DIMENSION_DESCRIPTION_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9421,
  },
  name: "Dimension Description Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_ORIENTATION_IN_FRAME_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9450,
  },
  name: "Patient Orientation in Frame Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FRAME_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9453,
  },
  name: "Frame Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ACQUISITION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9518,
  },
  name: "Acquisition Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const CONTRIBUTING_SOP_INSTANCES_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9529,
  },
  name: "Contributing SOP Instances Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0020,
    element: 0x9536,
  },
  name: "Reconstruction Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const LIGHT_PATH_FILTER_PASS_THROUGH_WAVELENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0001,
  },
  name: "Light Path Filter Pass-Through Wavelength",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const LIGHT_PATH_FILTER_PASS_BAND: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0002,
  },
  name: "Light Path Filter Pass Band",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2,
};

pub const IMAGE_PATH_FILTER_PASS_THROUGH_WAVELENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0003,
  },
  name: "Image Path Filter Pass-Through Wavelength",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMAGE_PATH_FILTER_PASS_BAND: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0004,
  },
  name: "Image Path Filter Pass Band",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2,
};

pub const PATIENT_EYE_MOVEMENT_COMMANDED: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0005,
  },
  name: "Patient Eye Movement Commanded",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATIENT_EYE_MOVEMENT_COMMAND_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0006,
  },
  name: "Patient Eye Movement Command Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPHERICAL_LENS_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0007,
  },
  name: "Spherical Lens Power",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CYLINDER_LENS_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0008,
  },
  name: "Cylinder Lens Power",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CYLINDER_AXIS: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0009,
  },
  name: "Cylinder Axis",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const EMMETROPIC_MAGNIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x000A,
  },
  name: "Emmetropic Magnification",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const INTRA_OCULAR_PRESSURE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x000B,
  },
  name: "Intra Ocular Pressure",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const HORIZONTAL_FIELD_OF_VIEW: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x000C,
  },
  name: "Horizontal Field of View",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const PUPIL_DILATED: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x000D,
  },
  name: "Pupil Dilated",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DEGREE_OF_DILATION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x000E,
  },
  name: "Degree of Dilation",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const VERTEX_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x000F,
  },
  name: "Vertex Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const STEREO_BASELINE_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0010,
  },
  name: "Stereo Baseline Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const STEREO_BASELINE_DISPLACEMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0011,
  },
  name: "Stereo Baseline Displacement",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const STEREO_HORIZONTAL_PIXEL_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0012,
  },
  name: "Stereo Horizontal Pixel Offset",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const STEREO_VERTICAL_PIXEL_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0013,
  },
  name: "Stereo Vertical Pixel Offset",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const STEREO_ROTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0014,
  },
  name: "Stereo Rotation",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ACQUISITION_DEVICE_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0015,
  },
  name: "Acquisition Device Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ILLUMINATION_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0016,
  },
  name: "Illumination Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LIGHT_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0017,
  },
  name: "Light Path Filter Type Stack Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0018,
  },
  name: "Image Path Filter Type Stack Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LENSES_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0019,
  },
  name: "Lenses Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CHANNEL_DESCRIPTION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x001A,
  },
  name: "Channel Description Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFRACTIVE_STATE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x001B,
  },
  name: "Refractive State Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MYDRIATIC_AGENT_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x001C,
  },
  name: "Mydriatic Agent Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RELATIVE_IMAGE_POSITION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x001D,
  },
  name: "Relative Image Position Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CAMERA_ANGLE_OF_VIEW: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x001E,
  },
  name: "Camera Angle of View",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const STEREO_PAIRS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0020,
  },
  name: "Stereo Pairs Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LEFT_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0021,
  },
  name: "Left Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RIGHT_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0022,
  },
  name: "Right Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STEREO_PAIRS_PRESENT: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0028,
  },
  name: "Stereo Pairs Present",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const AXIAL_LENGTH_OF_THE_EYE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0030,
  },
  name: "Axial Length of the Eye",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_FRAME_LOCATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0031,
  },
  name: "Ophthalmic Frame Location Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCE_COORDINATES: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0032,
  },
  name: "Reference Coordinates",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2_TO_N,
};

pub const DEPTH_SPATIAL_RESOLUTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0035,
  },
  name: "Depth Spatial Resolution",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const MAXIMUM_DEPTH_DISTORTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0036,
  },
  name: "Maximum Depth Distortion",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ALONG_SCAN_SPATIAL_RESOLUTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0037,
  },
  name: "Along-scan Spatial Resolution",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const MAXIMUM_ALONG_SCAN_DISTORTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0038,
  },
  name: "Maximum Along-scan Distortion",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_IMAGE_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0039,
  },
  name: "Ophthalmic Image Orientation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DEPTH_OF_TRANSVERSE_IMAGE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0041,
  },
  name: "Depth of Transverse Image",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const MYDRIATIC_AGENT_CONCENTRATION_UNITS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0042,
  },
  name: "Mydriatic Agent Concentration Units Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACROSS_SCAN_SPATIAL_RESOLUTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0048,
  },
  name: "Across-scan Spatial Resolution",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const MAXIMUM_ACROSS_SCAN_DISTORTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0049,
  },
  name: "Maximum Across-scan Distortion",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const MYDRIATIC_AGENT_CONCENTRATION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x004E,
  },
  name: "Mydriatic Agent Concentration",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ILLUMINATION_WAVE_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0055,
  },
  name: "Illumination Wave Length",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ILLUMINATION_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0056,
  },
  name: "Illumination Power",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ILLUMINATION_BANDWIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0057,
  },
  name: "Illumination Bandwidth",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const MYDRIATIC_AGENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x0058,
  },
  name: "Mydriatic Agent Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_MEASUREMENTS_RIGHT_EYE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1007,
  },
  name: "Ophthalmic Axial Measurements Right Eye Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_MEASUREMENTS_LEFT_EYE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1008,
  },
  name: "Ophthalmic Axial Measurements Left Eye Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_MEASUREMENTS_DEVICE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1009,
  },
  name: "Ophthalmic Axial Measurements Device Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1010,
  },
  name: "Ophthalmic Axial Length Measurements Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1012,
  },
  name: "Ophthalmic Axial Length Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1019,
  },
  name: "Ophthalmic Axial Length",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const LENS_STATUS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1024,
  },
  name: "Lens Status Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VITREOUS_STATUS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1025,
  },
  name: "Vitreous Status Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IOL_FORMULA_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1028,
  },
  name: "IOL Formula Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IOL_FORMULA_DETAIL: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1029,
  },
  name: "IOL Formula Detail",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const KERATOMETER_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1033,
  },
  name: "Keratometer Index",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SOURCE_OF_OPHTHALMIC_AXIAL_LENGTH_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1035,
  },
  name: "Source of Ophthalmic Axial Length Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_OF_CORNEAL_SIZE_DATA_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1036,
  },
  name: "Source of Corneal Size Data Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TARGET_REFRACTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1037,
  },
  name: "Target Refraction",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const REFRACTIVE_PROCEDURE_OCCURRED: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1039,
  },
  name: "Refractive Procedure Occurred",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFRACTIVE_SURGERY_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1040,
  },
  name: "Refractive Surgery Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_ULTRASOUND_METHOD_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1044,
  },
  name: "Ophthalmic Ultrasound Method Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SURGICALLY_INDUCED_ASTIGMATISM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1045,
  },
  name: "Surgically Induced Astigmatism Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TYPE_OF_OPTICAL_CORRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1046,
  },
  name: "Type of Optical Correction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TORIC_IOL_POWER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1047,
  },
  name: "Toric IOL Power Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PREDICTED_TORIC_ERROR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1048,
  },
  name: "Predicted Toric Error Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRE_SELECTED_FOR_IMPLANTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1049,
  },
  name: "Pre-Selected for Implantation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TORIC_IOL_POWER_FOR_EXACT_EMMETROPIA_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x104A,
  },
  name: "Toric IOL Power for Exact Emmetropia Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TORIC_IOL_POWER_FOR_EXACT_TARGET_REFRACTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x104B,
  },
  name: "Toric IOL Power for Exact Target Refraction Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1050,
  },
  name: "Ophthalmic Axial Length Measurements Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IOL_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1053,
  },
  name: "IOL Power",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const PREDICTED_REFRACTIVE_ERROR: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1054,
  },
  name: "Predicted Refractive Error",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_VELOCITY: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1059,
  },
  name: "Ophthalmic Axial Length Velocity",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const LENS_STATUS_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1065,
  },
  name: "Lens Status Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const VITREOUS_STATUS_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1066,
  },
  name: "Vitreous Status Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const IOL_POWER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1090,
  },
  name: "IOL Power Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LENS_CONSTANT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1092,
  },
  name: "Lens Constant Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IOL_MANUFACTURER: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1093,
  },
  name: "IOL Manufacturer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const LENS_CONSTANT_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1094,
  },
  name: "Lens Constant Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const IMPLANT_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1095,
  },
  name: "Implant Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const KERATOMETRY_MEASUREMENT_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1096,
  },
  name: "Keratometry Measurement Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMPLANT_PART_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1097,
  },
  name: "Implant Part Number",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REFERENCED_OPHTHALMIC_AXIAL_MEASUREMENTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1100,
  },
  name: "Referenced Ophthalmic Axial Measurements Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEGMENT_NAME_CODE_SEQUENCE:
  Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1101,
  },
  name: "Ophthalmic Axial Length Measurements Segment Name Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFRACTIVE_ERROR_BEFORE_REFRACTIVE_SURGERY_CODE_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0022,
      element: 0x1103,
    },
    name: "Refractive Error Before Refractive Surgery Code Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const IOL_POWER_FOR_EXACT_EMMETROPIA: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1121,
  },
  name: "IOL Power For Exact Emmetropia",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const IOL_POWER_FOR_EXACT_TARGET_REFRACTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1122,
  },
  name: "IOL Power For Exact Target Refraction",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ANTERIOR_CHAMBER_DEPTH_DEFINITION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1125,
  },
  name: "Anterior Chamber Depth Definition Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LENS_THICKNESS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1127,
  },
  name: "Lens Thickness Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANTERIOR_CHAMBER_DEPTH_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1128,
  },
  name: "Anterior Chamber Depth Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CALCULATION_COMMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x112A,
  },
  name: "Calculation Comment Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CALCULATION_COMMENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x112B,
  },
  name: "Calculation Comment Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CALCULATION_COMMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x112C,
  },
  name: "Calculation Comment",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const LENS_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1130,
  },
  name: "Lens Thickness",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ANTERIOR_CHAMBER_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1131,
  },
  name: "Anterior Chamber Depth",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SOURCE_OF_LENS_THICKNESS_DATA_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1132,
  },
  name: "Source of Lens Thickness Data Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_OF_ANTERIOR_CHAMBER_DEPTH_DATA_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1133,
  },
  name: "Source of Anterior Chamber Depth Data Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_OF_REFRACTIVE_MEASUREMENTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1134,
  },
  name: "Source of Refractive Measurements Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_OF_REFRACTIVE_MEASUREMENTS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1135,
  },
  name: "Source of Refractive Measurements Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENT_MODIFIED: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1140,
  },
  name: "Ophthalmic Axial Length Measurement Modified",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_DATA_SOURCE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1150,
  },
  name: "Ophthalmic Axial Length Data Source Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_ACQUISITION_METHOD_CODE_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0022,
      element: 0x1153,
    },
    name: "Ophthalmic Axial Length Acquisition Method Code Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const SIGNAL_TO_NOISE_RATIO: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1155,
  },
  name: "Signal to Noise Ratio",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_DATA_SOURCE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1159,
  },
  name: "Ophthalmic Axial Length Data Source Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_TOTAL_LENGTH_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0022,
      element: 0x1210,
    },
    name: "Ophthalmic Axial Length Measurements Total Length Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEGMENTAL_LENGTH_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0022,
      element: 0x1211,
    },
    name: "Ophthalmic Axial Length Measurements Segmental Length Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_LENGTH_SUMMATION_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0022,
      element: 0x1212,
    },
    name: "Ophthalmic Axial Length Measurements Length Summation Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const ULTRASOUND_OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0022,
      element: 0x1220,
    },
    name: "Ultrasound Ophthalmic Axial Length Measurements Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const OPTICAL_OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1225,
  },
  name: "Optical Ophthalmic Axial Length Measurements Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ULTRASOUND_SELECTED_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1230,
  },
  name: "Ultrasound Selected Ophthalmic Axial Length Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_SELECTION_METHOD_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1250,
  },
  name: "Ophthalmic Axial Length Selection Method Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPTICAL_SELECTED_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1255,
  },
  name: "Optical Selected Ophthalmic Axial Length Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SELECTED_SEGMENTAL_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1257,
  },
  name: "Selected Segmental Ophthalmic Axial Length Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SELECTED_TOTAL_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1260,
  },
  name: "Selected Total Ophthalmic Axial Length Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_QUALITY_METRIC_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1262,
  },
  name: "Ophthalmic Axial Length Quality Metric Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_QUALITY_METRIC_TYPE_CODE_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0022,
      element: 0x1265,
    },
    name: "Ophthalmic Axial Length Quality Metric Type Code Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const OPHTHALMIC_AXIAL_LENGTH_QUALITY_METRIC_TYPE_DESCRIPTION: Item =
  Item {
    tag: DataElementTag {
      group: 0x0022,
      element: 0x1273,
    },
    name: "Ophthalmic Axial Length Quality Metric Type Description",
    vrs: &[ValueRepresentation::LongString],
    multiplicity: VM_1,
  };

pub const INTRAOCULAR_LENS_CALCULATIONS_RIGHT_EYE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1300,
  },
  name: "Intraocular Lens Calculations Right Eye Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTRAOCULAR_LENS_CALCULATIONS_LEFT_EYE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1310,
  },
  name: "Intraocular Lens Calculations Left Eye Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_OPHTHALMIC_AXIAL_LENGTH_MEASUREMENT_QC_IMAGE_SEQUENCE:
  Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1330,
  },
  name: "Referenced Ophthalmic Axial Length Measurement QC Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_MAPPING_DEVICE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1415,
  },
  name: "Ophthalmic Mapping Device Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ACQUISITION_METHOD_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1420,
  },
  name: "Acquisition Method Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUISITION_METHOD_ALGORITHM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1423,
  },
  name: "Acquisition Method Algorithm Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_THICKNESS_MAP_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1436,
  },
  name: "Ophthalmic Thickness Map Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_THICKNESS_MAPPING_NORMALS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1443,
  },
  name: "Ophthalmic Thickness Mapping Normals Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RETINAL_THICKNESS_DEFINITION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1445,
  },
  name: "Retinal Thickness Definition Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PIXEL_VALUE_MAPPING_TO_CODED_CONCEPT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1450,
  },
  name: "Pixel Value Mapping to Coded Concept Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MAPPED_PIXEL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1452,
  },
  name: "Mapped Pixel Value",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const PIXEL_VALUE_MAPPING_EXPLANATION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1454,
  },
  name: "Pixel Value Mapping Explanation",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_THICKNESS_MAP_QUALITY_THRESHOLD_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1458,
  },
  name: "Ophthalmic Thickness Map Quality Threshold Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_THICKNESS_MAP_THRESHOLD_QUALITY_RATING: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1460,
  },
  name: "Ophthalmic Thickness Map Threshold Quality Rating",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ANATOMIC_STRUCTURE_REFERENCE_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1463,
  },
  name: "Anatomic Structure Reference Point",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const REGISTRATION_TO_LOCALIZER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1465,
  },
  name: "Registration to Localizer Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REGISTERED_LOCALIZER_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1466,
  },
  name: "Registered Localizer Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REGISTERED_LOCALIZER_TOP_LEFT_HAND_CORNER: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1467,
  },
  name: "Registered Localizer Top Left Hand Corner",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const REGISTERED_LOCALIZER_BOTTOM_RIGHT_HAND_CORNER: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1468,
  },
  name: "Registered Localizer Bottom Right Hand Corner",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const OPHTHALMIC_THICKNESS_MAP_QUALITY_RATING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1470,
  },
  name: "Ophthalmic Thickness Map Quality Rating Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RELEVANT_OPT_ATTRIBUTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1472,
  },
  name: "Relevant OPT Attributes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRANSFORMATION_METHOD_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1512,
  },
  name: "Transformation Method Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRANSFORMATION_ALGORITHM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1513,
  },
  name: "Transformation Algorithm Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_AXIAL_LENGTH_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1515,
  },
  name: "Ophthalmic Axial Length Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_FOV: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1517,
  },
  name: "Ophthalmic FOV",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TWO_DIMENSIONAL_TO_THREE_DIMENSIONAL_MAP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1518,
  },
  name: "Two Dimensional to Three Dimensional Map Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const WIDE_FIELD_OPHTHALMIC_PHOTOGRAPHY_QUALITY_RATING_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0022,
      element: 0x1525,
    },
    name: "Wide Field Ophthalmic Photography Quality Rating Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const WIDE_FIELD_OPHTHALMIC_PHOTOGRAPHY_QUALITY_THRESHOLD_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0022,
      element: 0x1526,
    },
    name: "Wide Field Ophthalmic Photography Quality Threshold Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const WIDE_FIELD_OPHTHALMIC_PHOTOGRAPHY_THRESHOLD_QUALITY_RATING: Item =
  Item {
    tag: DataElementTag {
      group: 0x0022,
      element: 0x1527,
    },
    name: "Wide Field Ophthalmic Photography Threshold Quality Rating",
    vrs: &[ValueRepresentation::FloatingPointSingle],
    multiplicity: VM_1,
  };

pub const X_COORDINATES_CENTER_PIXEL_VIEW_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1528,
  },
  name: "X Coordinates Center Pixel View Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const Y_COORDINATES_CENTER_PIXEL_VIEW_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1529,
  },
  name: "Y Coordinates Center Pixel View Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const NUMBER_OF_MAP_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1530,
  },
  name: "Number of Map Points",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TWO_DIMENSIONAL_TO_THREE_DIMENSIONAL_MAP_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1531,
  },
  name: "Two Dimensional to Three Dimensional Map Data",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const DERIVATION_ALGORITHM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1612,
  },
  name: "Derivation Algorithm Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_IMAGE_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1615,
  },
  name: "Ophthalmic Image Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_IMAGE_TYPE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1616,
  },
  name: "Ophthalmic Image Type Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SCAN_PATTERN_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1618,
  },
  name: "Scan Pattern Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_SURFACE_MESH_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1620,
  },
  name: "Referenced Surface Mesh Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_VOLUMETRIC_PROPERTIES_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1622,
  },
  name: "Ophthalmic Volumetric Properties Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_ANATOMIC_REFERENCE_POINT_X_COORDINATE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1624,
  },
  name: "Ophthalmic Anatomic Reference Point X-Coordinate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_ANATOMIC_REFERENCE_POINT_Y_COORDINATE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1626,
  },
  name: "Ophthalmic Anatomic Reference Point Y-Coordinate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_EN_FACE_IMAGE_QUALITY_RATING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1628,
  },
  name: "Ophthalmic En Face Image Quality Rating Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const QUALITY_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1630,
  },
  name: "Quality Threshold",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const OCT_BSCAN_ANALYSIS_ACQUISITION_PARAMETERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1640,
  },
  name: "OCT B-scan Analysis Acquisition Parameters Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_BSCANS_PER_FRAME: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1642,
  },
  name: "Number of B-scans Per Frame",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const BSCAN_SLAB_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1643,
  },
  name: "B-scan Slab Thickness",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const DISTANCE_BETWEEN_BSCAN_SLABS: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1644,
  },
  name: "Distance Between B-scan Slabs",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BSCAN_CYCLE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1645,
  },
  name: "B-scan Cycle Time",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BSCAN_CYCLE_TIME_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1646,
  },
  name: "B-scan Cycle Time Vector",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_N,
};

pub const ASCAN_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1649,
  },
  name: "A-scan Rate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BSCAN_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1650,
  },
  name: "B-scan Rate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SURFACE_MESH_Z_PIXEL_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x0022,
    element: 0x1658,
  },
  name: "Surface Mesh Z-Pixel Offset",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_HORIZONTAL_EXTENT: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0010,
  },
  name: "Visual Field Horizontal Extent",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_VERTICAL_EXTENT: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0011,
  },
  name: "Visual Field Vertical Extent",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_SHAPE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0012,
  },
  name: "Visual Field Shape",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SCREENING_TEST_MODE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0016,
  },
  name: "Screening Test Mode Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MAXIMUM_STIMULUS_LUMINANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0018,
  },
  name: "Maximum Stimulus Luminance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BACKGROUND_LUMINANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0020,
  },
  name: "Background Luminance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const STIMULUS_COLOR_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0021,
  },
  name: "Stimulus Color Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BACKGROUND_ILLUMINATION_COLOR_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0024,
  },
  name: "Background Illumination Color Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STIMULUS_AREA: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0025,
  },
  name: "Stimulus Area",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const STIMULUS_PRESENTATION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0028,
  },
  name: "Stimulus Presentation Time",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const FIXATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0032,
  },
  name: "Fixation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FIXATION_MONITORING_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0033,
  },
  name: "Fixation Monitoring Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_CATCH_TRIAL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0034,
  },
  name: "Visual Field Catch Trial Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FIXATION_CHECKED_QUANTITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0035,
  },
  name: "Fixation Checked Quantity",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PATIENT_NOT_PROPERLY_FIXATED_QUANTITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0036,
  },
  name: "Patient Not Properly Fixated Quantity",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PRESENTED_VISUAL_STIMULI_DATA_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0037,
  },
  name: "Presented Visual Stimuli Data Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_VISUAL_STIMULI: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0038,
  },
  name: "Number of Visual Stimuli",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const EXCESSIVE_FIXATION_LOSSES_DATA_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0039,
  },
  name: "Excessive Fixation Losses Data Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EXCESSIVE_FIXATION_LOSSES: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0040,
  },
  name: "Excessive Fixation Losses",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const STIMULI_RETESTING_QUANTITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0042,
  },
  name: "Stimuli Retesting Quantity",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COMMENTS_ON_PATIENT_PERFORMANCE_OF_VISUAL_FIELD: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0044,
  },
  name: "Comments on Patient's Performance of Visual Field",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const FALSE_NEGATIVES_ESTIMATE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0045,
  },
  name: "False Negatives Estimate Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FALSE_NEGATIVES_ESTIMATE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0046,
  },
  name: "False Negatives Estimate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const NEGATIVE_CATCH_TRIALS_QUANTITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0048,
  },
  name: "Negative Catch Trials Quantity",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const FALSE_NEGATIVES_QUANTITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0050,
  },
  name: "False Negatives Quantity",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const EXCESSIVE_FALSE_NEGATIVES_DATA_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0051,
  },
  name: "Excessive False Negatives Data Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EXCESSIVE_FALSE_NEGATIVES: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0052,
  },
  name: "Excessive False Negatives",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FALSE_POSITIVES_ESTIMATE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0053,
  },
  name: "False Positives Estimate Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FALSE_POSITIVES_ESTIMATE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0054,
  },
  name: "False Positives Estimate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CATCH_TRIALS_DATA_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0055,
  },
  name: "Catch Trials Data Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const POSITIVE_CATCH_TRIALS_QUANTITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0056,
  },
  name: "Positive Catch Trials Quantity",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const TEST_POINT_NORMALS_DATA_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0057,
  },
  name: "Test Point Normals Data Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TEST_POINT_NORMALS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0058,
  },
  name: "Test Point Normals Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GLOBAL_DEVIATION_PROBABILITY_NORMALS_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0059,
  },
  name: "Global Deviation Probability Normals Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FALSE_POSITIVES_QUANTITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0060,
  },
  name: "False Positives Quantity",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const EXCESSIVE_FALSE_POSITIVES_DATA_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0061,
  },
  name: "Excessive False Positives Data Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EXCESSIVE_FALSE_POSITIVES: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0062,
  },
  name: "Excessive False Positives",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_TEST_NORMALS_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0063,
  },
  name: "Visual Field Test Normals Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RESULTS_NORMALS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0064,
  },
  name: "Results Normals Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const AGE_CORRECTED_SENSITIVITY_DEVIATION_ALGORITHM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0065,
  },
  name: "Age Corrected Sensitivity Deviation Algorithm Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GLOBAL_DEVIATION_FROM_NORMAL: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0066,
  },
  name: "Global Deviation From Normal",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const GENERALIZED_DEFECT_SENSITIVITY_DEVIATION_ALGORITHM_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0024,
      element: 0x0067,
    },
    name: "Generalized Defect Sensitivity Deviation Algorithm Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const LOCALIZED_DEVIATION_FROM_NORMAL: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0068,
  },
  name: "Localized Deviation From Normal",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const PATIENT_RELIABILITY_INDICATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0069,
  },
  name: "Patient Reliability Indicator",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_MEAN_SENSITIVITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0070,
  },
  name: "Visual Field Mean Sensitivity",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const GLOBAL_DEVIATION_PROBABILITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0071,
  },
  name: "Global Deviation Probability",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const LOCAL_DEVIATION_PROBABILITY_NORMALS_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0072,
  },
  name: "Local Deviation Probability Normals Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const LOCALIZED_DEVIATION_PROBABILITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0073,
  },
  name: "Localized Deviation Probability",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SHORT_TERM_FLUCTUATION_CALCULATED: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0074,
  },
  name: "Short Term Fluctuation Calculated",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SHORT_TERM_FLUCTUATION: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0075,
  },
  name: "Short Term Fluctuation",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SHORT_TERM_FLUCTUATION_PROBABILITY_CALCULATED: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0076,
  },
  name: "Short Term Fluctuation Probability Calculated",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SHORT_TERM_FLUCTUATION_PROBABILITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0077,
  },
  name: "Short Term Fluctuation Probability",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL_CALCULATED: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0078,
  },
  name: "Corrected Localized Deviation From Normal Calculated",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0079,
  },
  name: "Corrected Localized Deviation From Normal",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL_PROBABILITY_CALCULATED:
  Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0080,
  },
  name: "Corrected Localized Deviation From Normal Probability Calculated",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL_PROBABILITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0081,
  },
  name: "Corrected Localized Deviation From Normal Probability",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const GLOBAL_DEVIATION_PROBABILITY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0083,
  },
  name: "Global Deviation Probability Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LOCALIZED_DEVIATION_PROBABILITY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0085,
  },
  name: "Localized Deviation Probability Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FOVEAL_SENSITIVITY_MEASURED: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0086,
  },
  name: "Foveal Sensitivity Measured",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FOVEAL_SENSITIVITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0087,
  },
  name: "Foveal Sensitivity",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_TEST_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0088,
  },
  name: "Visual Field Test Duration",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_TEST_POINT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0089,
  },
  name: "Visual Field Test Point Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_TEST_POINT_X_COORDINATE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0090,
  },
  name: "Visual Field Test Point X-Coordinate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_TEST_POINT_Y_COORDINATE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0091,
  },
  name: "Visual Field Test Point Y-Coordinate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const AGE_CORRECTED_SENSITIVITY_DEVIATION_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0092,
  },
  name: "Age Corrected Sensitivity Deviation Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const STIMULUS_RESULTS: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0093,
  },
  name: "Stimulus Results",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SENSITIVITY_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0094,
  },
  name: "Sensitivity Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const RETEST_STIMULUS_SEEN: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0095,
  },
  name: "Retest Stimulus Seen",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RETEST_SENSITIVITY_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0096,
  },
  name: "Retest Sensitivity Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_TEST_POINT_NORMALS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0097,
  },
  name: "Visual Field Test Point Normals Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const QUANTIFIED_DEFECT: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0098,
  },
  name: "Quantified Defect",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const AGE_CORRECTED_SENSITIVITY_DEVIATION_PROBABILITY_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0100,
  },
  name: "Age Corrected Sensitivity Deviation Probability Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const GENERALIZED_DEFECT_CORRECTED_SENSITIVITY_DEVIATION_FLAG: Item =
  Item {
    tag: DataElementTag {
      group: 0x0024,
      element: 0x0102,
    },
    name: "Generalized Defect Corrected Sensitivity Deviation Flag",
    vrs: &[ValueRepresentation::CodeString],
    multiplicity: VM_1,
  };

pub const GENERALIZED_DEFECT_CORRECTED_SENSITIVITY_DEVIATION_VALUE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0024,
      element: 0x0103,
    },
    name: "Generalized Defect Corrected Sensitivity Deviation Value",
    vrs: &[ValueRepresentation::FloatingPointSingle],
    multiplicity: VM_1,
  };

pub const GENERALIZED_DEFECT_CORRECTED_SENSITIVITY_DEVIATION_PROBABILITY_VALUE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0024,
      element: 0x0104
    },
    name: "Generalized Defect Corrected Sensitivity Deviation Probability Value",
    vrs: &[ValueRepresentation::FloatingPointSingle],
    multiplicity: VM_1,
  };

pub const MINIMUM_SENSITIVITY_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0105,
  },
  name: "Minimum Sensitivity Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BLIND_SPOT_LOCALIZED: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0106,
  },
  name: "Blind Spot Localized",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BLIND_SPOT_X_COORDINATE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0107,
  },
  name: "Blind Spot X-Coordinate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BLIND_SPOT_Y_COORDINATE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0108,
  },
  name: "Blind Spot Y-Coordinate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const VISUAL_ACUITY_MEASUREMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0110,
  },
  name: "Visual Acuity Measurement Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFRACTIVE_PARAMETERS_USED_ON_PATIENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0112,
  },
  name: "Refractive Parameters Used on Patient Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MEASUREMENT_LATERALITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0113,
  },
  name: "Measurement Laterality",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OPHTHALMIC_PATIENT_CLINICAL_INFORMATION_LEFT_EYE_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0024,
      element: 0x0114,
    },
    name: "Ophthalmic Patient Clinical Information Left Eye Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const OPHTHALMIC_PATIENT_CLINICAL_INFORMATION_RIGHT_EYE_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0024,
      element: 0x0115,
    },
    name: "Ophthalmic Patient Clinical Information Right Eye Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const FOVEAL_POINT_NORMATIVE_DATA_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0117,
  },
  name: "Foveal Point Normative Data Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FOVEAL_POINT_PROBABILITY_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0118,
  },
  name: "Foveal Point Probability Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SCREENING_BASELINE_MEASURED: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0120,
  },
  name: "Screening Baseline Measured",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SCREENING_BASELINE_MEASURED_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0122,
  },
  name: "Screening Baseline Measured Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCREENING_BASELINE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0124,
  },
  name: "Screening Baseline Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SCREENING_BASELINE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0126,
  },
  name: "Screening Baseline Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ALGORITHM_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0202,
  },
  name: "Algorithm Source",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DATA_SET_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0306,
  },
  name: "Data Set Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DATA_SET_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0307,
  },
  name: "Data Set Version",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DATA_SET_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0308,
  },
  name: "Data Set Source",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DATA_SET_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0309,
  },
  name: "Data Set Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_TEST_RELIABILITY_GLOBAL_INDEX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0317,
  },
  name: "Visual Field Test Reliability Global Index Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VISUAL_FIELD_GLOBAL_RESULTS_INDEX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0320,
  },
  name: "Visual Field Global Results Index Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DATA_OBSERVATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0325,
  },
  name: "Data Observation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INDEX_NORMALS_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0338,
  },
  name: "Index Normals Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INDEX_PROBABILITY: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0341,
  },
  name: "Index Probability",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const INDEX_PROBABILITY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0024,
    element: 0x0344,
  },
  name: "Index Probability Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SAMPLES_PER_PIXEL: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0002,
  },
  name: "Samples per Pixel",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SAMPLES_PER_PIXEL_USED: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0003,
  },
  name: "Samples per Pixel Used",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PHOTOMETRIC_INTERPRETATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0004,
  },
  name: "Photometric Interpretation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_DIMENSIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0005,
  },
  name: "Image Dimensions",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PLANAR_CONFIGURATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0006,
  },
  name: "Planar Configuration",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FRAMES: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0008,
  },
  name: "Number of Frames",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const FRAME_INCREMENT_POINTER: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0009,
  },
  name: "Frame Increment Pointer",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const FRAME_DIMENSION_POINTER: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x000A,
  },
  name: "Frame Dimension Pointer",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0010,
  },
  name: "Rows",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0011,
  },
  name: "Columns",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PLANES: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0012,
  },
  name: "Planes",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ULTRASOUND_COLOR_DATA_PRESENT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0014,
  },
  name: "Ultrasound Color Data Present",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PIXEL_SPACING: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0030,
  },
  name: "Pixel Spacing",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const ZOOM_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0031,
  },
  name: "Zoom Factor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const ZOOM_CENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0032,
  },
  name: "Zoom Center",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const PIXEL_ASPECT_RATIO: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0034,
  },
  name: "Pixel Aspect Ratio",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_2,
};

pub const IMAGE_FORMAT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0040,
  },
  name: "Image Format",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MANIPULATED_IMAGE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0050,
  },
  name: "Manipulated Image",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const CORRECTED_IMAGE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0051,
  },
  name: "Corrected Image",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const COMPRESSION_RECOGNITION_CODE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x005F,
  },
  name: "Compression Recognition Code",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const COMPRESSION_CODE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0060,
  },
  name: "Compression Code",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COMPRESSION_ORIGINATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0061,
  },
  name: "Compression Originator",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const COMPRESSION_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0062,
  },
  name: "Compression Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const COMPRESSION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0063,
  },
  name: "Compression Description",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const COMPRESSION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0065,
  },
  name: "Compression Sequence",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const COMPRESSION_STEP_POINTERS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0066,
  },
  name: "Compression Step Pointers",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const REPEAT_INTERVAL: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0068,
  },
  name: "Repeat Interval",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const BITS_GROUPED: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0069,
  },
  name: "Bits Grouped",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PERIMETER_TABLE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0070,
  },
  name: "Perimeter Table",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const PERIMETER_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0071,
  },
  name: "Perimeter Value",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const PREDICTOR_ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0080,
  },
  name: "Predictor Rows",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PREDICTOR_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0081,
  },
  name: "Predictor Columns",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PREDICTOR_CONSTANTS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0082,
  },
  name: "Predictor Constants",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const BLOCKED_PIXELS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0090,
  },
  name: "Blocked Pixels",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BLOCK_ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0091,
  },
  name: "Block Rows",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const BLOCK_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0092,
  },
  name: "Block Columns",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ROW_OVERLAP: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0093,
  },
  name: "Row Overlap",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COLUMN_OVERLAP: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0094,
  },
  name: "Column Overlap",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const BITS_ALLOCATED: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0100,
  },
  name: "Bits Allocated",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const BITS_STORED: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0101,
  },
  name: "Bits Stored",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const HIGH_BIT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0102,
  },
  name: "High Bit",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PIXEL_REPRESENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0103,
  },
  name: "Pixel Representation",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SMALLEST_VALID_PIXEL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0104,
  },
  name: "Smallest Valid Pixel Value",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const LARGEST_VALID_PIXEL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0105,
  },
  name: "Largest Valid Pixel Value",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const SMALLEST_IMAGE_PIXEL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0106,
  },
  name: "Smallest Image Pixel Value",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const LARGEST_IMAGE_PIXEL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0107,
  },
  name: "Largest Image Pixel Value",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const SMALLEST_PIXEL_VALUE_IN_SERIES: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0108,
  },
  name: "Smallest Pixel Value in Series",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const LARGEST_PIXEL_VALUE_IN_SERIES: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0109,
  },
  name: "Largest Pixel Value in Series",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const SMALLEST_IMAGE_PIXEL_VALUE_IN_PLANE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0110,
  },
  name: "Smallest Image Pixel Value in Plane",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const LARGEST_IMAGE_PIXEL_VALUE_IN_PLANE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0111,
  },
  name: "Largest Image Pixel Value in Plane",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const PIXEL_PADDING_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0120,
  },
  name: "Pixel Padding Value",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const PIXEL_PADDING_RANGE_LIMIT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0121,
  },
  name: "Pixel Padding Range Limit",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const FLOAT_PIXEL_PADDING_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0122,
  },
  name: "Float Pixel Padding Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const DOUBLE_FLOAT_PIXEL_PADDING_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0123,
  },
  name: "Double Float Pixel Padding Value",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const FLOAT_PIXEL_PADDING_RANGE_LIMIT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0124,
  },
  name: "Float Pixel Padding Range Limit",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const DOUBLE_FLOAT_PIXEL_PADDING_RANGE_LIMIT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0125,
  },
  name: "Double Float Pixel Padding Range Limit",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const IMAGE_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0200,
  },
  name: "Image Location",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const QUALITY_CONTROL_IMAGE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0300,
  },
  name: "Quality Control Image",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BURNED_IN_ANNOTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0301,
  },
  name: "Burned In Annotation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RECOGNIZABLE_VISUAL_FEATURES: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0302,
  },
  name: "Recognizable Visual Features",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const LONGITUDINAL_TEMPORAL_INFORMATION_MODIFIED: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0303,
  },
  name: "Longitudinal Temporal Information Modified",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFERENCED_COLOR_PALETTE_INSTANCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0304,
  },
  name: "Referenced Color Palette Instance UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const TRANSFORM_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0400,
  },
  name: "Transform Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TRANSFORM_VERSION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0401,
  },
  name: "Transform Version Number",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_TRANSFORM_STEPS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0402,
  },
  name: "Number of Transform Steps",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SEQUENCE_OF_COMPRESSED_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0403,
  },
  name: "Sequence of Compressed Data",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const DETAILS_OF_COEFFICIENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0404,
  },
  name: "Details of Coefficients",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const ROWS_FOR_NTH_ORDER_COEFFICIENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0400,
  },
  name: "Rows For Nth Order Coefficients",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COLUMNS_FOR_NTH_ORDER_COEFFICIENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0401,
  },
  name: "Columns For Nth Order Coefficients",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COEFFICIENT_CODING: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0402,
  },
  name: "Coefficient Coding",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const COEFFICIENT_CODING_POINTERS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0403,
  },
  name: "Coefficient Coding Pointers",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const DCT_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0700,
  },
  name: "DCT Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DATA_BLOCK_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0701,
  },
  name: "Data Block Description",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const DATA_BLOCK: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0702,
  },
  name: "Data Block",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const NORMALIZATION_FACTOR_FORMAT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0710,
  },
  name: "Normalization Factor Format",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ZONAL_MAP_NUMBER_FORMAT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0720,
  },
  name: "Zonal Map Number Format",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ZONAL_MAP_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0721,
  },
  name: "Zonal Map Location",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const ZONAL_MAP_FORMAT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0722,
  },
  name: "Zonal Map Format",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ADAPTIVE_MAP_FORMAT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0730,
  },
  name: "Adaptive Map Format",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CODE_NUMBER_FORMAT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0740,
  },
  name: "Code Number Format",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CODE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0800,
  },
  name: "Code Label",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_TABLES: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0802,
  },
  name: "Number of Tables",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CODE_TABLE_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0803,
  },
  name: "Code Table Location",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const BITS_FOR_CODE_WORD: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0804,
  },
  name: "Bits For Code Word",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMAGE_DATA_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0808,
  },
  name: "Image Data Location",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const PIXEL_SPACING_CALIBRATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0A02,
  },
  name: "Pixel Spacing Calibration Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PIXEL_SPACING_CALIBRATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x0A04,
  },
  name: "Pixel Spacing Calibration Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PIXEL_INTENSITY_RELATIONSHIP: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1040,
  },
  name: "Pixel Intensity Relationship",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PIXEL_INTENSITY_RELATIONSHIP_SIGN: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1041,
  },
  name: "Pixel Intensity Relationship Sign",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_1,
};

pub const WINDOW_CENTER: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1050,
  },
  name: "Window Center",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const WINDOW_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1051,
  },
  name: "Window Width",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const RESCALE_INTERCEPT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1052,
  },
  name: "Rescale Intercept",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RESCALE_SLOPE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1053,
  },
  name: "Rescale Slope",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RESCALE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1054,
  },
  name: "Rescale Type",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const WINDOW_CENTER_WIDTH_EXPLANATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1055,
  },
  name: "Window Center & Width Explanation",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const VOILUT_FUNCTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1056,
  },
  name: "VOI LUT Function",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GRAY_SCALE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1080,
  },
  name: "Gray Scale",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RECOMMENDED_VIEWING_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1090,
  },
  name: "Recommended Viewing Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GRAY_LOOKUP_TABLE_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1100,
  },
  name: "Gray Lookup Table Descriptor",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_3,
};

pub const RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1101,
  },
  name: "Red Palette Color Lookup Table Descriptor",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_3,
};

pub const GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1102,
  },
  name: "Green Palette Color Lookup Table Descriptor",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_3,
};

pub const BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1103,
  },
  name: "Blue Palette Color Lookup Table Descriptor",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_3,
};

pub const ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1104,
  },
  name: "Alpha Palette Color Lookup Table Descriptor",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1111,
  },
  name: "Large Red Palette Color Lookup Table Descriptor",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_4,
};

pub const LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1112,
  },
  name: "Large Green Palette Color Lookup Table Descriptor",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_4,
};

pub const LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1113,
  },
  name: "Large Blue Palette Color Lookup Table Descriptor",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_4,
};

pub const PALETTE_COLOR_LOOKUP_TABLE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1199,
  },
  name: "Palette Color Lookup Table UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const GRAY_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1200,
  },
  name: "Gray Lookup Table Data",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1_TO_N,
};

pub const RED_PALETTE_COLOR_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1201,
  },
  name: "Red Palette Color Lookup Table Data",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1202,
  },
  name: "Green Palette Color Lookup Table Data",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1203,
  },
  name: "Blue Palette Color Lookup Table Data",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1204,
  },
  name: "Alpha Palette Color Lookup Table Data",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1211,
  },
  name: "Large Red Palette Color Lookup Table Data",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1212,
  },
  name: "Large Green Palette Color Lookup Table Data",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1213,
  },
  name: "Large Blue Palette Color Lookup Table Data",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const LARGE_PALETTE_COLOR_LOOKUP_TABLE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1214,
  },
  name: "Large Palette Color Lookup Table UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const SEGMENTED_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1221,
  },
  name: "Segmented Red Palette Color Lookup Table Data",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const SEGMENTED_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1222,
  },
  name: "Segmented Green Palette Color Lookup Table Data",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const SEGMENTED_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1223,
  },
  name: "Segmented Blue Palette Color Lookup Table Data",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const SEGMENTED_ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1224,
  },
  name: "Segmented Alpha Palette Color Lookup Table Data",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const STORED_VALUE_COLOR_RANGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1230,
  },
  name: "Stored Value Color Range Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MINIMUM_STORED_VALUE_MAPPED: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1231,
  },
  name: "Minimum Stored Value Mapped",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const MAXIMUM_STORED_VALUE_MAPPED: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1232,
  },
  name: "Maximum Stored Value Mapped",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const BREAST_IMPLANT_PRESENT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1300,
  },
  name: "Breast Implant Present",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PARTIAL_VIEW: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1350,
  },
  name: "Partial View",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PARTIAL_VIEW_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1351,
  },
  name: "Partial View Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const PARTIAL_VIEW_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1352,
  },
  name: "Partial View Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPATIAL_LOCATIONS_PRESERVED: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x135A,
  },
  name: "Spatial Locations Preserved",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DATA_FRAME_ASSIGNMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1401,
  },
  name: "Data Frame Assignment Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DATA_PATH_ASSIGNMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1402,
  },
  name: "Data Path Assignment",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BITS_MAPPED_TO_COLOR_LOOKUP_TABLE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1403,
  },
  name: "Bits Mapped to Color Lookup Table",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const BLENDING_LUT1_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1404,
  },
  name: "Blending LUT 1 Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BLENDING_LUT1_TRANSFER_FUNCTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1405,
  },
  name: "Blending LUT 1 Transfer Function",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BLENDING_WEIGHT_CONSTANT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1406,
  },
  name: "Blending Weight Constant",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const BLENDING_LOOKUP_TABLE_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1407,
  },
  name: "Blending Lookup Table Descriptor",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const BLENDING_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1408,
  },
  name: "Blending Lookup Table Data",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const ENHANCED_PALETTE_COLOR_LOOKUP_TABLE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x140B,
  },
  name: "Enhanced Palette Color Lookup Table Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BLENDING_LUT2_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x140C,
  },
  name: "Blending LUT 2 Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BLENDING_LUT2_TRANSFER_FUNCTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x140D,
  },
  name: "Blending LUT 2 Transfer Function",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DATA_PATH_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x140E,
  },
  name: "Data Path ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RGBLUT_TRANSFER_FUNCTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x140F,
  },
  name: "RGB LUT Transfer Function",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ALPHA_LUT_TRANSFER_FUNCTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x1410,
  },
  name: "Alpha LUT Transfer Function",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ICC_PROFILE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x2000,
  },
  name: "ICC Profile",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const COLOR_SPACE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x2002,
  },
  name: "Color Space",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const LOSSY_IMAGE_COMPRESSION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x2110,
  },
  name: "Lossy Image Compression",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const LOSSY_IMAGE_COMPRESSION_RATIO: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x2112,
  },
  name: "Lossy Image Compression Ratio",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const LOSSY_IMAGE_COMPRESSION_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x2114,
  },
  name: "Lossy Image Compression Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const MODALITY_LUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x3000,
  },
  name: "Modality LUT Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VARIABLE_MODALITY_LUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x3001,
  },
  name: "Variable Modality LUT Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LUT_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x3002,
  },
  name: "LUT Descriptor",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_3,
};

pub const LUT_EXPLANATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x3003,
  },
  name: "LUT Explanation",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const MODALITY_LUT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x3004,
  },
  name: "Modality LUT Type",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const LUT_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x3006,
  },
  name: "LUT Data",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1_TO_N,
};

pub const VOILUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x3010,
  },
  name: "VOI LUT Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOFTCOPY_VOILUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x3110,
  },
  name: "Softcopy VOI LUT Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_PRESENTATION_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x4000,
  },
  name: "Image Presentation Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const BI_PLANE_ACQUISITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x5000,
  },
  name: "Bi-Plane Acquisition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REPRESENTATIVE_FRAME_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6010,
  },
  name: "Representative Frame Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const FRAME_NUMBERS_OF_INTEREST: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6020,
  },
  name: "Frame Numbers of Interest (FOI)",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const FRAME_OF_INTEREST_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6022,
  },
  name: "Frame of Interest Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const FRAME_OF_INTEREST_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6023,
  },
  name: "Frame of Interest Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const MASK_POINTERS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6030,
  },
  name: "Mask Pointer(s)",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const R_WAVE_POINTER: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6040,
  },
  name: "R Wave Pointer",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const MASK_SUBTRACTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6100,
  },
  name: "Mask Subtraction Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MASK_OPERATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6101,
  },
  name: "Mask Operation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const APPLICABLE_FRAME_RANGE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6102,
  },
  name: "Applicable Frame Range",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2_TO_N,
};

pub const MASK_FRAME_NUMBERS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6110,
  },
  name: "Mask Frame Numbers",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const CONTRAST_FRAME_AVERAGING: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6112,
  },
  name: "Contrast Frame Averaging",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const MASK_SUB_PIXEL_SHIFT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6114,
  },
  name: "Mask Sub-pixel Shift",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const TID_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6120,
  },
  name: "TID Offset",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_1,
};

pub const MASK_OPERATION_EXPLANATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x6190,
  },
  name: "Mask Operation Explanation",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const EQUIPMENT_ADMINISTRATOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7000,
  },
  name: "Equipment Administrator Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_DISPLAY_SUBSYSTEMS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7001,
  },
  name: "Number of Display Subsystems",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CURRENT_CONFIGURATION_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7002,
  },
  name: "Current Configuration ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DISPLAY_SUBSYSTEM_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7003,
  },
  name: "Display Subsystem ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DISPLAY_SUBSYSTEM_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7004,
  },
  name: "Display Subsystem Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const DISPLAY_SUBSYSTEM_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7005,
  },
  name: "Display Subsystem Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SYSTEM_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7006,
  },
  name: "System Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SYSTEM_STATUS_COMMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7007,
  },
  name: "System Status Comment",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TARGET_LUMINANCE_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7008,
  },
  name: "Target Luminance Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LUMINANCE_CHARACTERISTICS_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7009,
  },
  name: "Luminance Characteristics ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DISPLAY_SUBSYSTEM_CONFIGURATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x700A,
  },
  name: "Display Subsystem Configuration Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONFIGURATION_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x700B,
  },
  name: "Configuration ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CONFIGURATION_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x700C,
  },
  name: "Configuration Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const CONFIGURATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x700D,
  },
  name: "Configuration Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REFERENCED_TARGET_LUMINANCE_CHARACTERISTICS_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x700E,
  },
  name: "Referenced Target Luminance Characteristics ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const QA_RESULTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x700F,
  },
  name: "QA Results Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DISPLAY_SUBSYSTEM_QA_RESULTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7010,
  },
  name: "Display Subsystem QA Results Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONFIGURATION_QA_RESULTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7011,
  },
  name: "Configuration QA Results Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MEASUREMENT_EQUIPMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7012,
  },
  name: "Measurement Equipment Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MEASUREMENT_FUNCTIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7013,
  },
  name: "Measurement Functions",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const MEASUREMENT_EQUIPMENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7014,
  },
  name: "Measurement Equipment Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VISUAL_EVALUATION_RESULT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7015,
  },
  name: "Visual Evaluation Result Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DISPLAY_CALIBRATION_RESULT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7016,
  },
  name: "Display Calibration Result Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DDL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7017,
  },
  name: "DDL Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CI_EXY_WHITE_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7018,
  },
  name: "CIExy White Point",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const DISPLAY_FUNCTION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7019,
  },
  name: "Display Function Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GAMMA_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x701A,
  },
  name: "Gamma Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const NUMBER_OF_LUMINANCE_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x701B,
  },
  name: "Number of Luminance Points",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const LUMINANCE_RESPONSE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x701C,
  },
  name: "Luminance Response Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TARGET_MINIMUM_LUMINANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x701D,
  },
  name: "Target Minimum Luminance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TARGET_MAXIMUM_LUMINANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x701E,
  },
  name: "Target Maximum Luminance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const LUMINANCE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x701F,
  },
  name: "Luminance Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const LUMINANCE_RESPONSE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7020,
  },
  name: "Luminance Response Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const WHITE_POINT_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7021,
  },
  name: "White Point Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DISPLAY_DEVICE_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7022,
  },
  name: "Display Device Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DISPLAY_SUBSYSTEM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7023,
  },
  name: "Display Subsystem Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LUMINANCE_RESULT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7024,
  },
  name: "Luminance Result Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const AMBIENT_LIGHT_VALUE_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7025,
  },
  name: "Ambient Light Value Source",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MEASURED_CHARACTERISTICS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7026,
  },
  name: "Measured Characteristics",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const LUMINANCE_UNIFORMITY_RESULT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7027,
  },
  name: "Luminance Uniformity Result Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VISUAL_EVALUATION_TEST_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7028,
  },
  name: "Visual Evaluation Test Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TEST_RESULT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7029,
  },
  name: "Test Result",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TEST_RESULT_COMMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x702A,
  },
  name: "Test Result Comment",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TEST_IMAGE_VALIDATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x702B,
  },
  name: "Test Image Validation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TEST_PATTERN_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x702C,
  },
  name: "Test Pattern Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MEASUREMENT_PATTERN_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x702D,
  },
  name: "Measurement Pattern Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VISUAL_EVALUATION_METHOD_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x702E,
  },
  name: "Visual Evaluation Method Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PIXEL_DATA_PROVIDER_URL: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x7FE0,
  },
  name: "Pixel Data Provider URL",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const DATA_POINT_ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9001,
  },
  name: "Data Point Rows",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const DATA_POINT_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9002,
  },
  name: "Data Point Columns",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const SIGNAL_DOMAIN_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9003,
  },
  name: "Signal Domain Columns",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const LARGEST_MONOCHROME_PIXEL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9099,
  },
  name: "Largest Monochrome Pixel Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DATA_REPRESENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9108,
  },
  name: "Data Representation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PIXEL_MEASURES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9110,
  },
  name: "Pixel Measures Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FRAME_VOILUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9132,
  },
  name: "Frame VOI LUT Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PIXEL_VALUE_TRANSFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9145,
  },
  name: "Pixel Value Transformation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SIGNAL_DOMAIN_ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9235,
  },
  name: "Signal Domain Rows",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DISPLAY_FILTER_PERCENTAGE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9411,
  },
  name: "Display Filter Percentage",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const FRAME_PIXEL_SHIFT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9415,
  },
  name: "Frame Pixel Shift Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SUBTRACTION_ITEM_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9416,
  },
  name: "Subtraction Item ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PIXEL_INTENSITY_RELATIONSHIP_LUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9422,
  },
  name: "Pixel Intensity Relationship LUT Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FRAME_PIXEL_DATA_PROPERTIES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9443,
  },
  name: "Frame Pixel Data Properties Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GEOMETRICAL_PROPERTIES: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9444,
  },
  name: "Geometrical Properties",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GEOMETRIC_MAXIMUM_DISTORTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9445,
  },
  name: "Geometric Maximum Distortion",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const IMAGE_PROCESSING_APPLIED: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9446,
  },
  name: "Image Processing Applied",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const MASK_SELECTION_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9454,
  },
  name: "Mask Selection Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const LUT_FUNCTION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9474,
  },
  name: "LUT Function",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MASK_VISIBILITY_PERCENTAGE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9478,
  },
  name: "Mask Visibility Percentage",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const PIXEL_SHIFT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9501,
  },
  name: "Pixel Shift Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REGION_PIXEL_SHIFT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9502,
  },
  name: "Region Pixel Shift Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VERTICES_OF_THE_REGION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9503,
  },
  name: "Vertices of the Region",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_2_TO_N,
};

pub const MULTI_FRAME_PRESENTATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9505,
  },
  name: "Multi-frame Presentation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PIXEL_SHIFT_FRAME_RANGE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9506,
  },
  name: "Pixel Shift Frame Range",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2_TO_N,
};

pub const LUT_FRAME_RANGE: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9507,
  },
  name: "LUT Frame Range",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2_TO_N,
};

pub const IMAGE_TO_EQUIPMENT_MAPPING_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9520,
  },
  name: "Image to Equipment Mapping Matrix",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: ValueMultiplicity {
    min: 16,
    max: Some(16),
  },
};

pub const EQUIPMENT_COORDINATE_SYSTEM_IDENTIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0028,
    element: 0x9537,
  },
  name: "Equipment Coordinate System Identification",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const STUDY_STATUS_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x000A,
  },
  name: "Study Status ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const STUDY_PRIORITY_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x000C,
  },
  name: "Study Priority ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const STUDY_ID_ISSUER: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x0012,
  },
  name: "Study ID Issuer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const STUDY_VERIFIED_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x0032,
  },
  name: "Study Verified Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const STUDY_VERIFIED_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x0033,
  },
  name: "Study Verified Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const STUDY_READ_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x0034,
  },
  name: "Study Read Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const STUDY_READ_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x0035,
  },
  name: "Study Read Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const SCHEDULED_STUDY_START_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1000,
  },
  name: "Scheduled Study Start Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const SCHEDULED_STUDY_START_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1001,
  },
  name: "Scheduled Study Start Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const SCHEDULED_STUDY_STOP_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1010,
  },
  name: "Scheduled Study Stop Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const SCHEDULED_STUDY_STOP_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1011,
  },
  name: "Scheduled Study Stop Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const SCHEDULED_STUDY_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1020,
  },
  name: "Scheduled Study Location",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SCHEDULED_STUDY_LOCATION_AE_TITLE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1021,
  },
  name: "Scheduled Study Location AE Title",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1_TO_N,
};

pub const REASON_FOR_STUDY: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1030,
  },
  name: "Reason for Study",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REQUESTING_PHYSICIAN_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1031,
  },
  name: "Requesting Physician Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REQUESTING_PHYSICIAN: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1032,
  },
  name: "Requesting Physician",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const REQUESTING_SERVICE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1033,
  },
  name: "Requesting Service",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REQUESTING_SERVICE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1034,
  },
  name: "Requesting Service Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STUDY_ARRIVAL_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1040,
  },
  name: "Study Arrival Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const STUDY_ARRIVAL_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1041,
  },
  name: "Study Arrival Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const STUDY_COMPLETION_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1050,
  },
  name: "Study Completion Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const STUDY_COMPLETION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1051,
  },
  name: "Study Completion Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const STUDY_COMPONENT_STATUS_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1055,
  },
  name: "Study Component Status ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REQUESTED_PROCEDURE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1060,
  },
  name: "Requested Procedure Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REQUESTED_PROCEDURE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1064,
  },
  name: "Requested Procedure Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REQUESTED_LATERALITY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1065,
  },
  name: "Requested Laterality Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REASON_FOR_VISIT: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1066,
  },
  name: "Reason for Visit",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const REASON_FOR_VISIT_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1067,
  },
  name: "Reason for Visit Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REQUESTED_CONTRAST_AGENT: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x1070,
  },
  name: "Requested Contrast Agent",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const STUDY_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0032,
    element: 0x4000,
  },
  name: "Study Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const FLOW_IDENTIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0034,
    element: 0x0001,
  },
  name: "Flow Identifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FLOW_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0034,
    element: 0x0002,
  },
  name: "Flow Identifier",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const FLOW_TRANSFER_SYNTAX_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0034,
    element: 0x0003,
  },
  name: "Flow Transfer Syntax UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const FLOW_RTP_SAMPLING_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0034,
    element: 0x0004,
  },
  name: "Flow RTP Sampling Rate",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const SOURCE_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0034,
    element: 0x0005,
  },
  name: "Source Identifier",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const FRAME_ORIGIN_TIMESTAMP: Item = Item {
  tag: DataElementTag {
    group: 0x0034,
    element: 0x0007,
  },
  name: "Frame Origin Timestamp",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const INCLUDES_IMAGING_SUBJECT: Item = Item {
  tag: DataElementTag {
    group: 0x0034,
    element: 0x0008,
  },
  name: "Includes Imaging Subject",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FRAME_USEFULNESS_GROUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0034,
    element: 0x0009,
  },
  name: "Frame Usefulness Group Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REAL_TIME_BULK_DATA_FLOW_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0034,
    element: 0x000A,
  },
  name: "Real-Time Bulk Data Flow Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CAMERA_POSITION_GROUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0034,
    element: 0x000B,
  },
  name: "Camera Position Group Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INCLUDES_INFORMATION: Item = Item {
  tag: DataElementTag {
    group: 0x0034,
    element: 0x000C,
  },
  name: "Includes Information",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TIME_OF_FRAME_GROUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0034,
    element: 0x000D,
  },
  name: "Time of Frame Group Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_PATIENT_ALIAS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0004,
  },
  name: "Referenced Patient Alias Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VISIT_STATUS_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0008,
  },
  name: "Visit Status ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ADMISSION_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0010,
  },
  name: "Admission ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_ADMISSION_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0011,
  },
  name: "Issuer of Admission ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_ADMISSION_ID_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0014,
  },
  name: "Issuer of Admission ID Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ROUTE_OF_ADMISSIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0016,
  },
  name: "Route of Admissions",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SCHEDULED_ADMISSION_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x001A,
  },
  name: "Scheduled Admission Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const SCHEDULED_ADMISSION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x001B,
  },
  name: "Scheduled Admission Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const SCHEDULED_DISCHARGE_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x001C,
  },
  name: "Scheduled Discharge Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const SCHEDULED_DISCHARGE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x001D,
  },
  name: "Scheduled Discharge Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const SCHEDULED_PATIENT_INSTITUTION_RESIDENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x001E,
  },
  name: "Scheduled Patient Institution Residence",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ADMITTING_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0020,
  },
  name: "Admitting Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const ADMITTING_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0021,
  },
  name: "Admitting Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const DISCHARGE_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0030,
  },
  name: "Discharge Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const DISCHARGE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0032,
  },
  name: "Discharge Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const DISCHARGE_DIAGNOSIS_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0040,
  },
  name: "Discharge Diagnosis Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DISCHARGE_DIAGNOSIS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0044,
  },
  name: "Discharge Diagnosis Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIAL_NEEDS: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0050,
  },
  name: "Special Needs",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SERVICE_EPISODE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0060,
  },
  name: "Service Episode ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_SERVICE_EPISODE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0061,
  },
  name: "Issuer of Service Episode ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SERVICE_EPISODE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0062,
  },
  name: "Service Episode Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_SERVICE_EPISODE_ID_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0064,
  },
  name: "Issuer of Service Episode ID Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERTINENT_DOCUMENTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0100,
  },
  name: "Pertinent Documents Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERTINENT_RESOURCES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0101,
  },
  name: "Pertinent Resources Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RESOURCE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0102,
  },
  name: "Resource Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CURRENT_PATIENT_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0300,
  },
  name: "Current Patient Location",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_INSTITUTION_RESIDENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0400,
  },
  name: "Patient's Institution Residence",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_STATE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0500,
  },
  name: "Patient State",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_CLINICAL_TRIAL_PARTICIPATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x0502,
  },
  name: "Patient Clinical Trial Participation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VISIT_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0038,
    element: 0x4000,
  },
  name: "Visit Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const WAVEFORM_ORIGINALITY: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0004,
  },
  name: "Waveform Originality",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_WAVEFORM_CHANNELS: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0005,
  },
  name: "Number of Waveform Channels",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_WAVEFORM_SAMPLES: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0010,
  },
  name: "Number of Waveform Samples",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const SAMPLING_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x001A,
  },
  name: "Sampling Frequency",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MULTIPLEX_GROUP_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0020,
  },
  name: "Multiplex Group Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const CHANNEL_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0200,
  },
  name: "Channel Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const WAVEFORM_CHANNEL_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0202,
  },
  name: "Waveform Channel Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CHANNEL_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0203,
  },
  name: "Channel Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const CHANNEL_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0205,
  },
  name: "Channel Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const CHANNEL_SOURCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0208,
  },
  name: "Channel Source Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CHANNEL_SOURCE_MODIFIERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0209,
  },
  name: "Channel Source Modifiers Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_WAVEFORM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x020A,
  },
  name: "Source Waveform Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CHANNEL_DERIVATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x020C,
  },
  name: "Channel Derivation Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CHANNEL_SENSITIVITY: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0210,
  },
  name: "Channel Sensitivity",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_SENSITIVITY_UNITS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0211,
  },
  name: "Channel Sensitivity Units Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CHANNEL_SENSITIVITY_CORRECTION_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0212,
  },
  name: "Channel Sensitivity Correction Factor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_BASELINE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0213,
  },
  name: "Channel Baseline",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_TIME_SKEW: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0214,
  },
  name: "Channel Time Skew",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_SAMPLE_SKEW: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0215,
  },
  name: "Channel Sample Skew",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0218,
  },
  name: "Channel Offset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WAVEFORM_BITS_STORED: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x021A,
  },
  name: "Waveform Bits Stored",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const FILTER_LOW_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0220,
  },
  name: "Filter Low Frequency",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FILTER_HIGH_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0221,
  },
  name: "Filter High Frequency",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const NOTCH_FILTER_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0222,
  },
  name: "Notch Filter Frequency",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const NOTCH_FILTER_BANDWIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0223,
  },
  name: "Notch Filter Bandwidth",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WAVEFORM_DATA_DISPLAY_SCALE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0230,
  },
  name: "Waveform Data Display Scale",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const WAVEFORM_DISPLAY_BACKGROUND_CIE_LAB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0231,
  },
  name: "Waveform Display Background CIELab Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const WAVEFORM_PRESENTATION_GROUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0240,
  },
  name: "Waveform Presentation Group Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRESENTATION_GROUP_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0241,
  },
  name: "Presentation Group Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CHANNEL_DISPLAY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0242,
  },
  name: "Channel Display Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CHANNEL_RECOMMENDED_DISPLAY_CIE_LAB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0244,
  },
  name: "Channel Recommended Display CIELab Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const CHANNEL_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0245,
  },
  name: "Channel Position",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const DISPLAY_SHADING_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0246,
  },
  name: "Display Shading Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FRACTIONAL_CHANNEL_DISPLAY_SCALE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0247,
  },
  name: "Fractional Channel Display Scale",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ABSOLUTE_CHANNEL_DISPLAY_SCALE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0248,
  },
  name: "Absolute Channel Display Scale",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const MULTIPLEXED_AUDIO_CHANNELS_DESCRIPTION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0300,
  },
  name: "Multiplexed Audio Channels Description Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CHANNEL_IDENTIFICATION_CODE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0301,
  },
  name: "Channel Identification Code",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CHANNEL_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0302,
  },
  name: "Channel Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MULTIPLEX_GROUP_UID: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0310,
  },
  name: "Multiplex Group UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const POWERLINE_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0311,
  },
  name: "Powerline Frequency",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_IMPEDANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0312,
  },
  name: "Channel Impedance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMPEDANCE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0313,
  },
  name: "Impedance Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const IMPEDANCE_MEASUREMENT_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0314,
  },
  name: "Impedance Measurement DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const IMPEDANCE_MEASUREMENT_FREQUENCY: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0315,
  },
  name: "Impedance Measurement Frequency",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const IMPEDANCE_MEASUREMENT_CURRENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0316,
  },
  name: "Impedance Measurement Current Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const WAVEFORM_AMPLIFIER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0317,
  },
  name: "Waveform Amplifier Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FILTER_LOW_FREQUENCY_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0318,
  },
  name: "Filter Low Frequency Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FILTER_HIGH_FREQUENCY_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0319,
  },
  name: "Filter High Frequency Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SUMMARIZED_FILTER_LOOKUP_TABLE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0320,
  },
  name: "Summarized Filter Lookup Table Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NOTCH_FILTER_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0321,
  },
  name: "Notch Filter Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const WAVEFORM_FILTER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0322,
  },
  name: "Waveform Filter Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ANALOG_FILTER_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0323,
  },
  name: "Analog Filter Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANALOG_FILTER_ROLL_OFF: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0324,
  },
  name: "Analog Filter Roll Off",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ANALOG_FILTER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0325,
  },
  name: "Analog Filter Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DIGITAL_FILTER_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0326,
  },
  name: "Digital Filter Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DIGITAL_FILTER_ORDER: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0327,
  },
  name: "Digital Filter Order",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const DIGITAL_FILTER_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0328,
  },
  name: "Digital Filter Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const WAVEFORM_FILTER_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x0329,
  },
  name: "Waveform Filter Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const FILTER_LOOKUP_TABLE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x032A,
  },
  name: "Filter Lookup Table Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FILTER_LOOKUP_TABLE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x032B,
  },
  name: "Filter Lookup Table Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const FREQUENCY_ENCODING_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x032C,
  },
  name: "Frequency Encoding Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MAGNITUDE_ENCODING_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x032D,
  },
  name: "Magnitude Encoding Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FILTER_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x003A,
    element: 0x032E,
  },
  name: "Filter Lookup Table Data",
  vrs: &[ValueRepresentation::OtherDoubleString],
  multiplicity: VM_1,
};

pub const SCHEDULED_STATION_AE_TITLE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0001,
  },
  name: "Scheduled Station AE Title",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1_TO_N,
};

pub const SCHEDULED_PROCEDURE_STEP_START_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0002,
  },
  name: "Scheduled Procedure Step Start Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROCEDURE_STEP_START_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0003,
  },
  name: "Scheduled Procedure Step Start Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROCEDURE_STEP_END_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0004,
  },
  name: "Scheduled Procedure Step End Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROCEDURE_STEP_END_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0005,
  },
  name: "Scheduled Procedure Step End Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const SCHEDULED_PERFORMING_PHYSICIAN_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0006,
  },
  name: "Scheduled Performing Physician's Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROCEDURE_STEP_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0007,
  },
  name: "Scheduled Procedure Step Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROTOCOL_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0008,
  },
  name: "Scheduled Protocol Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROCEDURE_STEP_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0009,
  },
  name: "Scheduled Procedure Step ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const STAGE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x000A,
  },
  name: "Stage Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCHEDULED_PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x000B,
  },
  name: "Scheduled Performing Physician Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCHEDULED_STATION_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0010,
  },
  name: "Scheduled Station Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1_TO_N,
};

pub const SCHEDULED_PROCEDURE_STEP_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0011,
  },
  name: "Scheduled Procedure Step Location",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const PRE_MEDICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0012,
  },
  name: "Pre-Medication",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROCEDURE_STEP_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0020,
  },
  name: "Scheduled Procedure Step Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ORDER_PLACER_IDENTIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0026,
  },
  name: "Order Placer Identifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ORDER_FILLER_IDENTIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0027,
  },
  name: "Order Filler Identifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LOCAL_NAMESPACE_ENTITY_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0031,
  },
  name: "Local Namespace Entity ID",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const UNIVERSAL_ENTITY_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0032,
  },
  name: "Universal Entity ID",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const UNIVERSAL_ENTITY_ID_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0033,
  },
  name: "Universal Entity ID Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IDENTIFIER_TYPE_CODE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0035,
  },
  name: "Identifier Type Code",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ASSIGNING_FACILITY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0036,
  },
  name: "Assigning Facility Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ASSIGNING_JURISDICTION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0039,
  },
  name: "Assigning Jurisdiction Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ASSIGNING_AGENCY_OR_DEPARTMENT_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x003A,
  },
  name: "Assigning Agency or Department Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROCEDURE_STEP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0100,
  },
  name: "Scheduled Procedure Step Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_NON_IMAGE_COMPOSITE_SOP_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0220,
  },
  name: "Referenced Non-Image Composite SOP Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERFORMED_STATION_AE_TITLE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0241,
  },
  name: "Performed Station AE Title",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1,
};

pub const PERFORMED_STATION_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0242,
  },
  name: "Performed Station Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const PERFORMED_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0243,
  },
  name: "Performed Location",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCEDURE_STEP_START_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0244,
  },
  name: "Performed Procedure Step Start Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCEDURE_STEP_START_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0245,
  },
  name: "Performed Procedure Step Start Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCEDURE_STEP_END_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0250,
  },
  name: "Performed Procedure Step End Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCEDURE_STEP_END_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0251,
  },
  name: "Performed Procedure Step End Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCEDURE_STEP_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0252,
  },
  name: "Performed Procedure Step Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCEDURE_STEP_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0253,
  },
  name: "Performed Procedure Step ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCEDURE_STEP_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0254,
  },
  name: "Performed Procedure Step Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCEDURE_TYPE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0255,
  },
  name: "Performed Procedure Type Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PERFORMED_PROTOCOL_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0260,
  },
  name: "Performed Protocol Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERFORMED_PROTOCOL_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0261,
  },
  name: "Performed Protocol Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SCHEDULED_STEP_ATTRIBUTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0270,
  },
  name: "Scheduled Step Attributes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REQUEST_ATTRIBUTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0275,
  },
  name: "Request Attributes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMMENTS_ON_THE_PERFORMED_PROCEDURE_STEP: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0280,
  },
  name: "Comments on the Performed Procedure Step",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0040,
      element: 0x0281,
    },
    name: "Performed Procedure Step Discontinuation Reason Code Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const QUANTITY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0293,
  },
  name: "Quantity Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const QUANTITY: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0294,
  },
  name: "Quantity",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MEASURING_UNITS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0295,
  },
  name: "Measuring Units Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BILLING_ITEM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0296,
  },
  name: "Billing Item Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TOTAL_TIME_OF_FLUOROSCOPY: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0300,
  },
  name: "Total Time of Fluoroscopy",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const TOTAL_NUMBER_OF_EXPOSURES: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0301,
  },
  name: "Total Number of Exposures",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ENTRANCE_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0302,
  },
  name: "Entrance Dose",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const EXPOSED_AREA: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0303,
  },
  name: "Exposed Area",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_2,
};

pub const DISTANCE_SOURCE_TO_ENTRANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0306,
  },
  name: "Distance Source to Entrance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DISTANCE_SOURCE_TO_SUPPORT: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0307,
  },
  name: "Distance Source to Support",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const EXPOSURE_DOSE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x030E,
  },
  name: "Exposure Dose Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMMENTS_ON_RADIATION_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0310,
  },
  name: "Comments on Radiation Dose",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const X_RAY_OUTPUT: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0312,
  },
  name: "X-Ray Output",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const HALF_VALUE_LAYER: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0314,
  },
  name: "Half Value Layer",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ORGAN_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0316,
  },
  name: "Organ Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ORGAN_EXPOSED: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0318,
  },
  name: "Organ Exposed",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BILLING_PROCEDURE_STEP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0320,
  },
  name: "Billing Procedure Step Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FILM_CONSUMPTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0321,
  },
  name: "Film Consumption Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BILLING_SUPPLIES_AND_DEVICES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0324,
  },
  name: "Billing Supplies and Devices Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_PROCEDURE_STEP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0330,
  },
  name: "Referenced Procedure Step Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERFORMED_SERIES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0340,
  },
  name: "Performed Series Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMMENTS_ON_THE_SCHEDULED_PROCEDURE_STEP: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0400,
  },
  name: "Comments on the Scheduled Procedure Step",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const PROTOCOL_CONTEXT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0440,
  },
  name: "Protocol Context Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTENT_ITEM_MODIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0441,
  },
  name: "Content Item Modifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCHEDULED_SPECIMEN_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0500,
  },
  name: "Scheduled Specimen Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIMEN_ACCESSION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x050A,
  },
  name: "Specimen Accession Number",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CONTAINER_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0512,
  },
  name: "Container Identifier",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISSUER_OF_THE_CONTAINER_IDENTIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0513,
  },
  name: "Issuer of the Container Identifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ALTERNATE_CONTAINER_IDENTIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0515,
  },
  name: "Alternate Container Identifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTAINER_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0518,
  },
  name: "Container Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTAINER_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x051A,
  },
  name: "Container Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CONTAINER_COMPONENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0520,
  },
  name: "Container Component Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIMEN_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0550,
  },
  name: "Specimen Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIMEN_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0551,
  },
  name: "Specimen Identifier",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SPECIMEN_DESCRIPTION_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0552,
  },
  name: "Specimen Description Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIMEN_DESCRIPTION_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0553,
  },
  name: "Specimen Description (Trial)",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const SPECIMEN_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0554,
  },
  name: "Specimen UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const ACQUISITION_CONTEXT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0555,
  },
  name: "Acquisition Context Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUISITION_CONTEXT_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0556,
  },
  name: "Acquisition Context Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const SPECIMEN_DESCRIPTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0560,
  },
  name: "Specimen Description Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ISSUER_OF_THE_SPECIMEN_IDENTIFIER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0562,
  },
  name: "Issuer of the Specimen Identifier Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIMEN_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x059A,
  },
  name: "Specimen Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIMEN_SHORT_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0600,
  },
  name: "Specimen Short Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SPECIMEN_DETAILED_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0602,
  },
  name: "Specimen Detailed Description",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const SPECIMEN_PREPARATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0610,
  },
  name: "Specimen Preparation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIMEN_PREPARATION_STEP_CONTENT_ITEM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0612,
  },
  name: "Specimen Preparation Step Content Item Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIMEN_LOCALIZATION_CONTENT_ITEM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0620,
  },
  name: "Specimen Localization Content Item Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SLIDE_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x06FA,
  },
  name: "Slide Identifier",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const WHOLE_SLIDE_MICROSCOPY_IMAGE_FRAME_TYPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x0710,
  },
  name: "Whole Slide Microscopy Image Frame Type Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_CENTER_POINT_COORDINATES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x071A,
  },
  name: "Image Center Point Coordinates Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const X_OFFSET_IN_SLIDE_COORDINATE_SYSTEM: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x072A,
  },
  name: "X Offset in Slide Coordinate System",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const Y_OFFSET_IN_SLIDE_COORDINATE_SYSTEM: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x073A,
  },
  name: "Y Offset in Slide Coordinate System",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const Z_OFFSET_IN_SLIDE_COORDINATE_SYSTEM: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x074A,
  },
  name: "Z Offset in Slide Coordinate System",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PIXEL_SPACING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x08D8,
  },
  name: "Pixel Spacing Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COORDINATE_SYSTEM_AXIS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x08DA,
  },
  name: "Coordinate System Axis Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MEASUREMENT_UNITS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x08EA,
  },
  name: "Measurement Units Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VITAL_STAIN_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x09F8,
  },
  name: "Vital Stain Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REQUESTED_PROCEDURE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1001,
  },
  name: "Requested Procedure ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const REASON_FOR_THE_REQUESTED_PROCEDURE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1002,
  },
  name: "Reason for the Requested Procedure",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REQUESTED_PROCEDURE_PRIORITY: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1003,
  },
  name: "Requested Procedure Priority",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const PATIENT_TRANSPORT_ARRANGEMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1004,
  },
  name: "Patient Transport Arrangements",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REQUESTED_PROCEDURE_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1005,
  },
  name: "Requested Procedure Location",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PLACER_ORDER_NUMBER_PROCEDURE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1006,
  },
  name: "Placer Order Number / Procedure",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const FILLER_ORDER_NUMBER_PROCEDURE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1007,
  },
  name: "Filler Order Number / Procedure",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const CONFIDENTIALITY_CODE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1008,
  },
  name: "Confidentiality Code",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REPORTING_PRIORITY: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1009,
  },
  name: "Reporting Priority",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const REASON_FOR_REQUESTED_PROCEDURE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x100A,
  },
  name: "Reason for Requested Procedure Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NAMES_OF_INTENDED_RECIPIENTS_OF_RESULTS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1010,
  },
  name: "Names of Intended Recipients of Results",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1_TO_N,
};

pub const INTENDED_RECIPIENTS_OF_RESULTS_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1011,
  },
  name: "Intended Recipients of Results Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REASON_FOR_PERFORMED_PROCEDURE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1012,
  },
  name: "Reason For Performed Procedure Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REQUESTED_PROCEDURE_DESCRIPTION_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1060,
  },
  name: "Requested Procedure Description (Trial)",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PERSON_IDENTIFICATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1101,
  },
  name: "Person Identification Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERSON_ADDRESS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1102,
  },
  name: "Person's Address",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const PERSON_TELEPHONE_NUMBERS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1103,
  },
  name: "Person's Telephone Numbers",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const PERSON_TELECOM_INFORMATION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1104,
  },
  name: "Person's Telecom Information",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const REQUESTED_PROCEDURE_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x1400,
  },
  name: "Requested Procedure Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const REASON_FOR_THE_IMAGING_SERVICE_REQUEST: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x2001,
  },
  name: "Reason for the Imaging Service Request",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISSUE_DATE_OF_IMAGING_SERVICE_REQUEST: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x2004,
  },
  name: "Issue Date of Imaging Service Request",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const ISSUE_TIME_OF_IMAGING_SERVICE_REQUEST: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x2005,
  },
  name: "Issue Time of Imaging Service Request",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x2006,
  },
  name: "Placer Order Number / Imaging Service Request (Retired)",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x2007,
  },
  name: "Filler Order Number / Imaging Service Request (Retired)",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const ORDER_ENTERED_BY: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x2008,
  },
  name: "Order Entered By",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const ORDER_ENTERER_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x2009,
  },
  name: "Order Enterer's Location",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const ORDER_CALLBACK_PHONE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x2010,
  },
  name: "Order Callback Phone Number",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const ORDER_CALLBACK_TELECOM_INFORMATION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x2011,
  },
  name: "Order Callback Telecom Information",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x2016,
  },
  name: "Placer Order Number / Imaging Service Request",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x2017,
  },
  name: "Filler Order Number / Imaging Service Request",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const IMAGING_SERVICE_REQUEST_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x2400,
  },
  name: "Imaging Service Request Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const CONFIDENTIALITY_CONSTRAINT_ON_PATIENT_DATA_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x3001,
  },
  name: "Confidentiality Constraint on Patient Data Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4001,
  },
  name: "General Purpose Scheduled Procedure Step Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEP_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4002,
  },
  name: "General Purpose Performed Procedure Step Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_PRIORITY: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4003,
  },
  name: "General Purpose Scheduled Procedure Step Priority",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROCESSING_APPLICATIONS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4004,
  },
  name: "Scheduled Processing Applications Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROCEDURE_STEP_START_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4005,
  },
  name: "Scheduled Procedure Step Start DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const MULTIPLE_COPIES_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4006,
  },
  name: "Multiple Copies Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCESSING_APPLICATIONS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4007,
  },
  name: "Performed Processing Applications Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROCEDURE_STEP_EXPIRATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4008,
  },
  name: "Scheduled Procedure Step Expiration DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const HUMAN_PERFORMER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4009,
  },
  name: "Human Performer Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROCEDURE_STEP_MODIFICATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4010,
  },
  name: "Scheduled Procedure Step Modification DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const EXPECTED_COMPLETION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4011,
  },
  name: "Expected Completion DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const RESULTING_GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEPS_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0040,
      element: 0x4015,
    },
    name: "Resulting General Purpose Performed Procedure Steps Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0040,
      element: 0x4016,
    },
    name: "Referenced General Purpose Scheduled Procedure Step Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const SCHEDULED_WORKITEM_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4018,
  },
  name: "Scheduled Workitem Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERFORMED_WORKITEM_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4019,
  },
  name: "Performed Workitem Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INPUT_AVAILABILITY_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4020,
  },
  name: "Input Availability Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INPUT_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4021,
  },
  name: "Input Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RELEVANT_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4022,
  },
  name: "Relevant Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_TRANSACTION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4023,
  },
  name: "Referenced General Purpose Scheduled Procedure Step Transaction UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const SCHEDULED_STATION_NAME_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4025,
  },
  name: "Scheduled Station Name Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCHEDULED_STATION_CLASS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4026,
  },
  name: "Scheduled Station Class Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCHEDULED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4027,
  },
  name: "Scheduled Station Geographic Location Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERFORMED_STATION_NAME_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4028,
  },
  name: "Performed Station Name Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERFORMED_STATION_CLASS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4029,
  },
  name: "Performed Station Class Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERFORMED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4030,
  },
  name: "Performed Station Geographic Location Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REQUESTED_SUBSEQUENT_WORKITEM_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4031,
  },
  name: "Requested Subsequent Workitem Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NON_DICOM_OUTPUT_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4032,
  },
  name: "Non-DICOM Output Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OUTPUT_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4033,
  },
  name: "Output Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCHEDULED_HUMAN_PERFORMERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4034,
  },
  name: "Scheduled Human Performers Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACTUAL_HUMAN_PERFORMERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4035,
  },
  name: "Actual Human Performers Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const HUMAN_PERFORMER_ORGANIZATION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4036,
  },
  name: "Human Performer's Organization",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const HUMAN_PERFORMER_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4037,
  },
  name: "Human Performer's Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const RAW_DATA_HANDLING: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4040,
  },
  name: "Raw Data Handling",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INPUT_READINESS_STATE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4041,
  },
  name: "Input Readiness State",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCEDURE_STEP_START_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4050,
  },
  name: "Performed Procedure Step Start DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCEDURE_STEP_END_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4051,
  },
  name: "Performed Procedure Step End DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const PROCEDURE_STEP_CANCELLATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4052,
  },
  name: "Procedure Step Cancellation DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const OUTPUT_DESTINATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4070,
  },
  name: "Output Destination Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DICOM_STORAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4071,
  },
  name: "DICOM Storage Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STOWRS_STORAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4072,
  },
  name: "STOW-RS Storage Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STORAGE_URL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4073,
  },
  name: "Storage URL",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const XDS_STORAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x4074,
  },
  name: "XDS Storage Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ENTRANCE_DOSE_INM_GY: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x8302,
  },
  name: "Entrance Dose in mGy",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ENTRANCE_DOSE_DERIVATION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x8303,
  },
  name: "Entrance Dose Derivation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PARAMETRIC_MAP_FRAME_TYPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9092,
  },
  name: "Parametric Map Frame Type Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_IMAGE_REAL_WORLD_VALUE_MAPPING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9094,
  },
  name: "Referenced Image Real World Value Mapping Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REAL_WORLD_VALUE_MAPPING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9096,
  },
  name: "Real World Value Mapping Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PIXEL_VALUE_MAPPING_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9098,
  },
  name: "Pixel Value Mapping Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LUT_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9210,
  },
  name: "LUT Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const REAL_WORLD_VALUE_LAST_VALUE_MAPPED: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9211,
  },
  name: "Real World Value Last Value Mapped",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const REAL_WORLD_VALUE_LUT_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9212,
  },
  name: "Real World Value LUT Data",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_N,
};

pub const DOUBLE_FLOAT_REAL_WORLD_VALUE_LAST_VALUE_MAPPED: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9213,
  },
  name: "Double Float Real World Value Last Value Mapped",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DOUBLE_FLOAT_REAL_WORLD_VALUE_FIRST_VALUE_MAPPED: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9214,
  },
  name: "Double Float Real World Value First Value Mapped",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const REAL_WORLD_VALUE_FIRST_VALUE_MAPPED: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9216,
  },
  name: "Real World Value First Value Mapped",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const QUANTITY_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9220,
  },
  name: "Quantity Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REAL_WORLD_VALUE_INTERCEPT: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9224,
  },
  name: "Real World Value Intercept",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const REAL_WORLD_VALUE_SLOPE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0x9225,
  },
  name: "Real World Value Slope",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const FINDINGS_FLAG_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA007,
  },
  name: "Findings Flag (Trial)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RELATIONSHIP_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA010,
  },
  name: "Relationship Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FINDINGS_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA020,
  },
  name: "Findings Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FINDINGS_GROUP_UID_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA021,
  },
  name: "Findings Group UID (Trial)",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REFERENCED_FINDINGS_GROUP_UID_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA022,
  },
  name: "Referenced Findings Group UID (Trial)",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const FINDINGS_GROUP_RECORDING_DATE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA023,
  },
  name: "Findings Group Recording Date (Trial)",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const FINDINGS_GROUP_RECORDING_TIME_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA024,
  },
  name: "Findings Group Recording Time (Trial)",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const FINDINGS_SOURCE_CATEGORY_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA026,
  },
  name: "Findings Source Category Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VERIFYING_ORGANIZATION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA027,
  },
  name: "Verifying Organization",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DOCUMENTING_ORGANIZATION_IDENTIFIER_CODE_SEQUENCE_TRIAL: Item =
  Item {
    tag: DataElementTag {
      group: 0x0040,
      element: 0xA028,
    },
    name: "Documenting Organization Identifier Code Sequence (Trial)",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const VERIFICATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA030,
  },
  name: "Verification DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const OBSERVATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA032,
  },
  name: "Observation DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const OBSERVATION_START_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA033,
  },
  name: "Observation Start DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const VALUE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA040,
  },
  name: "Value Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONCEPT_NAME_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA043,
  },
  name: "Concept Name Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MEASUREMENT_PRECISION_DESCRIPTION_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA047,
  },
  name: "Measurement Precision Description (Trial)",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CONTINUITY_OF_CONTENT: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA050,
  },
  name: "Continuity Of Content",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const URGENCY_OR_PRIORITY_ALERTS_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA057,
  },
  name: "Urgency or Priority Alerts (Trial)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const SEQUENCING_INDICATOR_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA060,
  },
  name: "Sequencing Indicator (Trial)",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DOCUMENT_IDENTIFIER_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA066,
  },
  name: "Document Identifier Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DOCUMENT_AUTHOR_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA067,
  },
  name: "Document Author (Trial)",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const DOCUMENT_AUTHOR_IDENTIFIER_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA068,
  },
  name: "Document Author Identifier Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IDENTIFIER_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA070,
  },
  name: "Identifier Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VERIFYING_OBSERVER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA073,
  },
  name: "Verifying Observer Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OBJECT_BINARY_IDENTIFIER_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA074,
  },
  name: "Object Binary Identifier (Trial)",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const VERIFYING_OBSERVER_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA075,
  },
  name: "Verifying Observer Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const DOCUMENTING_OBSERVER_IDENTIFIER_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA076,
  },
  name: "Documenting Observer Identifier Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const AUTHOR_OBSERVER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA078,
  },
  name: "Author Observer Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PARTICIPANT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA07A,
  },
  name: "Participant Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CUSTODIAL_ORGANIZATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA07C,
  },
  name: "Custodial Organization Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PARTICIPATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA080,
  },
  name: "Participation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PARTICIPATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA082,
  },
  name: "Participation DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const OBSERVER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA084,
  },
  name: "Observer Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PROCEDURE_IDENTIFIER_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA085,
  },
  name: "Procedure Identifier Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VERIFYING_OBSERVER_IDENTIFICATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA088,
  },
  name: "Verifying Observer Identification Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OBJECT_DIRECTORY_BINARY_IDENTIFIER_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA089,
  },
  name: "Object Directory Binary Identifier (Trial)",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const EQUIVALENT_CDA_DOCUMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA090,
  },
  name: "Equivalent CDA Document Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_WAVEFORM_CHANNELS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA0B0,
  },
  name: "Referenced Waveform Channels",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2_TO_N,
};

pub const DATE_OF_DOCUMENT_OR_VERBAL_TRANSACTION_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA110,
  },
  name: "Date of Document or Verbal Transaction (Trial)",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const TIME_OF_DOCUMENT_CREATION_OR_VERBAL_TRANSACTION_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA112,
  },
  name: "Time of Document Creation or Verbal Transaction (Trial)",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA120,
  },
  name: "DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA121,
  },
  name: "Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA122,
  },
  name: "Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const PERSON_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA123,
  },
  name: "Person Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const UID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA124,
  },
  name: "UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REPORT_STATUS_ID_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA125,
  },
  name: "Report Status ID (Trial)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_2,
};

pub const TEMPORAL_RANGE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA130,
  },
  name: "Temporal Range Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFERENCED_SAMPLE_POSITIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA132,
  },
  name: "Referenced Sample Positions",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1_TO_N,
};

pub const REFERENCED_FRAME_NUMBERS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA136,
  },
  name: "Referenced Frame Numbers",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const REFERENCED_TIME_OFFSETS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA138,
  },
  name: "Referenced Time Offsets",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const REFERENCED_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA13A,
  },
  name: "Referenced DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1_TO_N,
};

pub const TEXT_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA160,
  },
  name: "Text Value",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const FLOATING_POINT_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA161,
  },
  name: "Floating Point Value",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_N,
};

pub const RATIONAL_NUMERATOR_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA162,
  },
  name: "Rational Numerator Value",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_1_TO_N,
};

pub const RATIONAL_DENOMINATOR_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA163,
  },
  name: "Rational Denominator Value",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1_TO_N,
};

pub const OBSERVATION_CATEGORY_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA167,
  },
  name: "Observation Category Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONCEPT_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA168,
  },
  name: "Concept Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BIBLIOGRAPHIC_CITATION_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA16A,
  },
  name: "Bibliographic Citation (Trial)",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const PURPOSE_OF_REFERENCE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA170,
  },
  name: "Purpose of Reference Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OBSERVATION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA171,
  },
  name: "Observation UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REFERENCED_OBSERVATION_UID_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA172,
  },
  name: "Referenced Observation UID (Trial)",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REFERENCED_OBSERVATION_CLASS_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA173,
  },
  name: "Referenced Observation Class (Trial)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFERENCED_OBJECT_OBSERVATION_CLASS_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA174,
  },
  name: "Referenced Object Observation Class (Trial)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ANNOTATION_GROUP_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA180,
  },
  name: "Annotation Group Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OBSERVATION_DATE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA192,
  },
  name: "Observation Date (Trial)",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const OBSERVATION_TIME_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA193,
  },
  name: "Observation Time (Trial)",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const MEASUREMENT_AUTOMATION_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA194,
  },
  name: "Measurement Automation (Trial)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MODIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA195,
  },
  name: "Modifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IDENTIFICATION_DESCRIPTION_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA224,
  },
  name: "Identification Description (Trial)",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const COORDINATES_SET_GEOMETRIC_TYPE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA290,
  },
  name: "Coordinates Set Geometric Type (Trial)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ALGORITHM_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA296,
  },
  name: "Algorithm Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ALGORITHM_DESCRIPTION_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA297,
  },
  name: "Algorithm Description (Trial)",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const PIXEL_COORDINATES_SET_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA29A,
  },
  name: "Pixel Coordinates Set (Trial)",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_2_TO_N,
};

pub const MEASURED_VALUE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA300,
  },
  name: "Measured Value Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMERIC_VALUE_QUALIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA301,
  },
  name: "Numeric Value Qualifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CURRENT_OBSERVER_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA307,
  },
  name: "Current Observer (Trial)",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const NUMERIC_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA30A,
  },
  name: "Numeric Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const REFERENCED_ACCESSION_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA313,
  },
  name: "Referenced Accession Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REPORT_STATUS_COMMENT_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA33A,
  },
  name: "Report Status Comment (Trial)",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const PROCEDURE_CONTEXT_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA340,
  },
  name: "Procedure Context Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VERBAL_SOURCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA352,
  },
  name: "Verbal Source (Trial)",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const ADDRESS_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA353,
  },
  name: "Address (Trial)",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const TELEPHONE_NUMBER_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA354,
  },
  name: "Telephone Number (Trial)",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const VERBAL_SOURCE_IDENTIFIER_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA358,
  },
  name: "Verbal Source Identifier Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PREDECESSOR_DOCUMENTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA360,
  },
  name: "Predecessor Documents Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_REQUEST_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA370,
  },
  name: "Referenced Request Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCEDURE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA372,
  },
  name: "Performed Procedure Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CURRENT_REQUESTED_PROCEDURE_EVIDENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA375,
  },
  name: "Current Requested Procedure Evidence Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REPORT_DETAIL_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA380,
  },
  name: "Report Detail Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERTINENT_OTHER_EVIDENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA385,
  },
  name: "Pertinent Other Evidence Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const HL7_STRUCTURED_DOCUMENT_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA390,
  },
  name: "HL7 Structured Document Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OBSERVATION_SUBJECT_UID_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA402,
  },
  name: "Observation Subject UID (Trial)",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const OBSERVATION_SUBJECT_CLASS_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA403,
  },
  name: "Observation Subject Class (Trial)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OBSERVATION_SUBJECT_TYPE_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA404,
  },
  name: "Observation Subject Type Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMPLETION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA491,
  },
  name: "Completion Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COMPLETION_FLAG_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA492,
  },
  name: "Completion Flag Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const VERIFICATION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA493,
  },
  name: "Verification Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ARCHIVE_REQUESTED: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA494,
  },
  name: "Archive Requested",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRELIMINARY_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA496,
  },
  name: "Preliminary Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTENT_TEMPLATE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA504,
  },
  name: "Content Template Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IDENTICAL_DOCUMENTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA525,
  },
  name: "Identical Documents Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OBSERVATION_SUBJECT_CONTEXT_FLAG_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA600,
  },
  name: "Observation Subject Context Flag (Trial)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OBSERVER_CONTEXT_FLAG_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA601,
  },
  name: "Observer Context Flag (Trial)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PROCEDURE_CONTEXT_FLAG_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA603,
  },
  name: "Procedure Context Flag (Trial)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA730,
  },
  name: "Content Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RELATIONSHIP_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA731,
  },
  name: "Relationship Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RELATIONSHIP_TYPE_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA732,
  },
  name: "Relationship Type Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LANGUAGE_CODE_SEQUENCE_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA744,
  },
  name: "Language Code Sequence (Trial)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TABULATED_VALUES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA801,
  },
  name: "Tabulated Values Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_TABLE_ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA802,
  },
  name: "Number of Table Rows",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const NUMBER_OF_TABLE_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA803,
  },
  name: "Number of Table Columns",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TABLE_ROW_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA804,
  },
  name: "Table Row Number",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TABLE_COLUMN_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA805,
  },
  name: "Table Column Number",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TABLE_ROW_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA806,
  },
  name: "Table Row Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TABLE_COLUMN_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA807,
  },
  name: "Table Column Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CELL_VALUES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA808,
  },
  name: "Cell Values Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const UNIFORM_RESOURCE_LOCATOR_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xA992,
  },
  name: "Uniform Resource Locator (Trial)",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const WAVEFORM_ANNOTATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xB020,
  },
  name: "Waveform Annotation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TEMPLATE_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xDB00,
  },
  name: "Template Identifier",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TEMPLATE_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xDB06,
  },
  name: "Template Version",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const TEMPLATE_LOCAL_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xDB07,
  },
  name: "Template Local Version",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const TEMPLATE_EXTENSION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xDB0B,
  },
  name: "Template Extension Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TEMPLATE_EXTENSION_ORGANIZATION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xDB0C,
  },
  name: "Template Extension Organization UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const TEMPLATE_EXTENSION_CREATOR_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xDB0D,
  },
  name: "Template Extension Creator UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REFERENCED_CONTENT_ITEM_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xDB73,
  },
  name: "Referenced Content Item Identifier",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1_TO_N,
};

pub const HL7_INSTANCE_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE001,
  },
  name: "HL7 Instance Identifier",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const HL7_DOCUMENT_EFFECTIVE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE004,
  },
  name: "HL7 Document Effective Time",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const HL7_DOCUMENT_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE006,
  },
  name: "HL7 Document Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DOCUMENT_CLASS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE008,
  },
  name: "Document Class Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RETRIEVE_URI: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE010,
  },
  name: "Retrieve URI",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const RETRIEVE_LOCATION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE011,
  },
  name: "Retrieve Location UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const TYPE_OF_INSTANCES: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE020,
  },
  name: "Type of Instances",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DICOM_RETRIEVAL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE021,
  },
  name: "DICOM Retrieval Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DICOM_MEDIA_RETRIEVAL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE022,
  },
  name: "DICOM Media Retrieval Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const WADO_RETRIEVAL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE023,
  },
  name: "WADO Retrieval Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const XDS_RETRIEVAL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE024,
  },
  name: "XDS Retrieval Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const WADORS_RETRIEVAL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE025,
  },
  name: "WADO-RS Retrieval Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REPOSITORY_UNIQUE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE030,
  },
  name: "Repository Unique ID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const HOME_COMMUNITY_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0040,
    element: 0xE031,
  },
  name: "Home Community ID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const DOCUMENT_TITLE: Item = Item {
  tag: DataElementTag {
    group: 0x0042,
    element: 0x0010,
  },
  name: "Document Title",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const ENCAPSULATED_DOCUMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0042,
    element: 0x0011,
  },
  name: "Encapsulated Document",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const MIME_TYPE_OF_ENCAPSULATED_DOCUMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0042,
    element: 0x0012,
  },
  name: "MIME Type of Encapsulated Document",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SOURCE_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0042,
    element: 0x0013,
  },
  name: "Source Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LIST_OF_MIME_TYPES: Item = Item {
  tag: DataElementTag {
    group: 0x0042,
    element: 0x0014,
  },
  name: "List of MIME Types",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const ENCAPSULATED_DOCUMENT_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0042,
    element: 0x0015,
  },
  name: "Encapsulated Document Length",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const PRODUCT_PACKAGE_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0001,
  },
  name: "Product Package Identifier",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const SUBSTANCE_ADMINISTRATION_APPROVAL: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0002,
  },
  name: "Substance Administration Approval",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const APPROVAL_STATUS_FURTHER_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0003,
  },
  name: "Approval Status Further Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const APPROVAL_STATUS_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0004,
  },
  name: "Approval Status DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const PRODUCT_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0007,
  },
  name: "Product Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRODUCT_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0008,
  },
  name: "Product Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const PRODUCT_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0009,
  },
  name: "Product Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const PRODUCT_LOT_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x000A,
  },
  name: "Product Lot Identifier",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PRODUCT_EXPIRATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x000B,
  },
  name: "Product Expiration DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const SUBSTANCE_ADMINISTRATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0010,
  },
  name: "Substance Administration DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const SUBSTANCE_ADMINISTRATION_NOTES: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0011,
  },
  name: "Substance Administration Notes",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SUBSTANCE_ADMINISTRATION_DEVICE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0012,
  },
  name: "Substance Administration Device ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PRODUCT_PARAMETER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0013,
  },
  name: "Product Parameter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SUBSTANCE_ADMINISTRATION_PARAMETER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0019,
  },
  name: "Substance Administration Parameter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const APPROVAL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0100,
  },
  name: "Approval Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ASSERTION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0101,
  },
  name: "Assertion Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ASSERTION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0102,
  },
  name: "Assertion UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const ASSERTER_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0103,
  },
  name: "Asserter Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ASSERTION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0104,
  },
  name: "Assertion DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const ASSERTION_EXPIRATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0105,
  },
  name: "Assertion Expiration DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const ASSERTION_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0106,
  },
  name: "Assertion Comments",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const RELATED_ASSERTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0107,
  },
  name: "Related Assertion Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_ASSERTION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0108,
  },
  name: "Referenced Assertion UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const APPROVAL_SUBJECT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x0109,
  },
  name: "Approval Subject Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ORGANIZATIONAL_ROLE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0044,
    element: 0x010A,
  },
  name: "Organizational Role Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LENS_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0012,
  },
  name: "Lens Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const RIGHT_LENS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0014,
  },
  name: "Right Lens Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LEFT_LENS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0015,
  },
  name: "Left Lens Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const UNSPECIFIED_LATERALITY_LENS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0016,
  },
  name: "Unspecified Laterality Lens Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CYLINDER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0018,
  },
  name: "Cylinder Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRISM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0028,
  },
  name: "Prism Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const HORIZONTAL_PRISM_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0030,
  },
  name: "Horizontal Prism Power",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const HORIZONTAL_PRISM_BASE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0032,
  },
  name: "Horizontal Prism Base",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VERTICAL_PRISM_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0034,
  },
  name: "Vertical Prism Power",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const VERTICAL_PRISM_BASE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0036,
  },
  name: "Vertical Prism Base",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const LENS_SEGMENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0038,
  },
  name: "Lens Segment Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OPTICAL_TRANSMITTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0040,
  },
  name: "Optical Transmittance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CHANNEL_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0042,
  },
  name: "Channel Width",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PUPIL_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0044,
  },
  name: "Pupil Size",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CORNEAL_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0046,
  },
  name: "Corneal Size",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CORNEAL_SIZE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0047,
  },
  name: "Corneal Size Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const AUTOREFRACTION_RIGHT_EYE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0050,
  },
  name: "Autorefraction Right Eye Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const AUTOREFRACTION_LEFT_EYE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0052,
  },
  name: "Autorefraction Left Eye Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DISTANCE_PUPILLARY_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0060,
  },
  name: "Distance Pupillary Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const NEAR_PUPILLARY_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0062,
  },
  name: "Near Pupillary Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const INTERMEDIATE_PUPILLARY_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0063,
  },
  name: "Intermediate Pupillary Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const OTHER_PUPILLARY_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0064,
  },
  name: "Other Pupillary Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const KERATOMETRY_RIGHT_EYE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0070,
  },
  name: "Keratometry Right Eye Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const KERATOMETRY_LEFT_EYE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0071,
  },
  name: "Keratometry Left Eye Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STEEP_KERATOMETRIC_AXIS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0074,
  },
  name: "Steep Keratometric Axis Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIUS_OF_CURVATURE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0075,
  },
  name: "Radius of Curvature",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const KERATOMETRIC_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0076,
  },
  name: "Keratometric Power",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const KERATOMETRIC_AXIS: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0077,
  },
  name: "Keratometric Axis",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const FLAT_KERATOMETRIC_AXIS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0080,
  },
  name: "Flat Keratometric Axis Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BACKGROUND_COLOR: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0092,
  },
  name: "Background Color",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OPTOTYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0094,
  },
  name: "Optotype",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OPTOTYPE_PRESENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0095,
  },
  name: "Optotype Presentation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SUBJECTIVE_REFRACTION_RIGHT_EYE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0097,
  },
  name: "Subjective Refraction Right Eye Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SUBJECTIVE_REFRACTION_LEFT_EYE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0098,
  },
  name: "Subjective Refraction Left Eye Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ADD_NEAR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0100,
  },
  name: "Add Near Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ADD_INTERMEDIATE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0101,
  },
  name: "Add Intermediate Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ADD_OTHER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0102,
  },
  name: "Add Other Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ADD_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0104,
  },
  name: "Add Power",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const VIEWING_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0106,
  },
  name: "Viewing Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CORNEA_MEASUREMENTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0110,
  },
  name: "Cornea Measurements Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_OF_CORNEA_MEASUREMENT_DATA_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0111,
  },
  name: "Source of Cornea Measurement Data Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STEEP_CORNEAL_AXIS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0112,
  },
  name: "Steep Corneal Axis Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FLAT_CORNEAL_AXIS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0113,
  },
  name: "Flat Corneal Axis Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CORNEAL_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0114,
  },
  name: "Corneal Power",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CORNEAL_AXIS: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0115,
  },
  name: "Corneal Axis",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CORNEA_MEASUREMENT_METHOD_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0116,
  },
  name: "Cornea Measurement Method Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFRACTIVE_INDEX_OF_CORNEA: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0117,
  },
  name: "Refractive Index of Cornea",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const REFRACTIVE_INDEX_OF_AQUEOUS_HUMOR: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0118,
  },
  name: "Refractive Index of Aqueous Humor",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const VISUAL_ACUITY_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0121,
  },
  name: "Visual Acuity Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VISUAL_ACUITY_RIGHT_EYE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0122,
  },
  name: "Visual Acuity Right Eye Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VISUAL_ACUITY_LEFT_EYE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0123,
  },
  name: "Visual Acuity Left Eye Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VISUAL_ACUITY_BOTH_EYES_OPEN_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0124,
  },
  name: "Visual Acuity Both Eyes Open Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VIEWING_DISTANCE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0125,
  },
  name: "Viewing Distance Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VISUAL_ACUITY_MODIFIERS: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0135,
  },
  name: "Visual Acuity Modifiers",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_2,
};

pub const DECIMAL_VISUAL_ACUITY: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0137,
  },
  name: "Decimal Visual Acuity",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const OPTOTYPE_DETAILED_DEFINITION: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0139,
  },
  name: "Optotype Detailed Definition",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REFERENCED_REFRACTIVE_MEASUREMENTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0145,
  },
  name: "Referenced Refractive Measurements Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPHERE_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0146,
  },
  name: "Sphere Power",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CYLINDER_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0147,
  },
  name: "Cylinder Power",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CORNEAL_TOPOGRAPHY_SURFACE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0201,
  },
  name: "Corneal Topography Surface",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CORNEAL_VERTEX_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0202,
  },
  name: "Corneal Vertex Location",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const PUPIL_CENTROID_X_COORDINATE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0203,
  },
  name: "Pupil Centroid X-Coordinate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const PUPIL_CENTROID_Y_COORDINATE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0204,
  },
  name: "Pupil Centroid Y-Coordinate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const EQUIVALENT_PUPIL_RADIUS: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0205,
  },
  name: "Equivalent Pupil Radius",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CORNEAL_TOPOGRAPHY_MAP_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0207,
  },
  name: "Corneal Topography Map Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VERTICES_OF_THE_OUTLINE_OF_PUPIL: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0208,
  },
  name: "Vertices of the Outline of Pupil",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_2_TO_N,
};

pub const CORNEAL_TOPOGRAPHY_MAPPING_NORMALS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0210,
  },
  name: "Corneal Topography Mapping Normals Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MAXIMUM_CORNEAL_CURVATURE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0211,
  },
  name: "Maximum Corneal Curvature Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MAXIMUM_CORNEAL_CURVATURE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0212,
  },
  name: "Maximum Corneal Curvature",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const MAXIMUM_CORNEAL_CURVATURE_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0213,
  },
  name: "Maximum Corneal Curvature Location",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const MINIMUM_KERATOMETRIC_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0215,
  },
  name: "Minimum Keratometric Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SIMULATED_KERATOMETRIC_CYLINDER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0218,
  },
  name: "Simulated Keratometric Cylinder Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const AVERAGE_CORNEAL_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0220,
  },
  name: "Average Corneal Power",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CORNEAL_IS_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0224,
  },
  name: "Corneal I-S Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ANALYZED_AREA: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0227,
  },
  name: "Analyzed Area",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SURFACE_REGULARITY_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0230,
  },
  name: "Surface Regularity Index",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SURFACE_ASYMMETRY_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0232,
  },
  name: "Surface Asymmetry Index",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CORNEAL_ECCENTRICITY_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0234,
  },
  name: "Corneal Eccentricity Index",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const KERATOCONUS_PREDICTION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0236,
  },
  name: "Keratoconus Prediction Index",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const DECIMAL_POTENTIAL_VISUAL_ACUITY: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0238,
  },
  name: "Decimal Potential Visual Acuity",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CORNEAL_TOPOGRAPHY_MAP_QUALITY_EVALUATION: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0242,
  },
  name: "Corneal Topography Map Quality Evaluation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SOURCE_IMAGE_CORNEAL_PROCESSED_DATA_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0244,
  },
  name: "Source Image Corneal Processed Data Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CORNEAL_POINT_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0247,
  },
  name: "Corneal Point Location",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const CORNEAL_POINT_ESTIMATED: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0248,
  },
  name: "Corneal Point Estimated",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const AXIAL_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0249,
  },
  name: "Axial Power",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TANGENTIAL_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0250,
  },
  name: "Tangential Power",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const REFRACTIVE_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0251,
  },
  name: "Refractive Power",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const RELATIVE_ELEVATION: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0252,
  },
  name: "Relative Elevation",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CORNEAL_WAVEFRONT: Item = Item {
  tag: DataElementTag {
    group: 0x0046,
    element: 0x0253,
  },
  name: "Corneal Wavefront",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const IMAGED_VOLUME_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0001,
  },
  name: "Imaged Volume Width",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const IMAGED_VOLUME_HEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0002,
  },
  name: "Imaged Volume Height",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const IMAGED_VOLUME_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0003,
  },
  name: "Imaged Volume Depth",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TOTAL_PIXEL_MATRIX_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0006,
  },
  name: "Total Pixel Matrix Columns",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TOTAL_PIXEL_MATRIX_ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0007,
  },
  name: "Total Pixel Matrix Rows",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TOTAL_PIXEL_MATRIX_ORIGIN_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0008,
  },
  name: "Total Pixel Matrix Origin Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIMEN_LABEL_IN_IMAGE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0010,
  },
  name: "Specimen Label in Image",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FOCUS_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0011,
  },
  name: "Focus Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EXTENDED_DEPTH_OF_FIELD: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0012,
  },
  name: "Extended Depth of Field",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FOCAL_PLANES: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0013,
  },
  name: "Number of Focal Planes",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DISTANCE_BETWEEN_FOCAL_PLANES: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0014,
  },
  name: "Distance Between Focal Planes",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const RECOMMENDED_ABSENT_PIXEL_CIE_LAB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0015,
  },
  name: "Recommended Absent Pixel CIELab Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const ILLUMINATOR_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0100,
  },
  name: "Illuminator Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_ORIENTATION_SLIDE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0102,
  },
  name: "Image Orientation (Slide)",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_6,
};

pub const OPTICAL_PATH_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0105,
  },
  name: "Optical Path Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OPTICAL_PATH_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0106,
  },
  name: "Optical Path Identifier",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const OPTICAL_PATH_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0107,
  },
  name: "Optical Path Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const ILLUMINATION_COLOR_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0108,
  },
  name: "Illumination Color Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIMEN_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0110,
  },
  name: "Specimen Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONDENSER_LENS_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0111,
  },
  name: "Condenser Lens Power",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const OBJECTIVE_LENS_POWER: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0112,
  },
  name: "Objective Lens Power",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const OBJECTIVE_LENS_NUMERICAL_APERTURE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0113,
  },
  name: "Objective Lens Numerical Aperture",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONFOCAL_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0114,
  },
  name: "Confocal Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TISSUE_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0115,
  },
  name: "Tissue Location",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONFOCAL_MICROSCOPY_IMAGE_FRAME_TYPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0116,
  },
  name: "Confocal Microscopy Image Frame Type Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_ACQUISITION_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0117,
  },
  name: "Image Acquisition Depth",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PALETTE_COLOR_LOOKUP_TABLE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0120,
  },
  name: "Palette Color Lookup Table Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_IMAGE_NAVIGATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0200,
  },
  name: "Referenced Image Navigation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TOP_LEFT_HAND_CORNER_OF_LOCALIZER_AREA: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0201,
  },
  name: "Top Left Hand Corner of Localizer Area",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2,
};

pub const BOTTOM_RIGHT_HAND_CORNER_OF_LOCALIZER_AREA: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0202,
  },
  name: "Bottom Right Hand Corner of Localizer Area",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2,
};

pub const OPTICAL_PATH_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0207,
  },
  name: "Optical Path Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PLANE_POSITION_SLIDE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x021A,
  },
  name: "Plane Position (Slide) Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COLUMN_POSITION_IN_TOTAL_IMAGE_PIXEL_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x021E,
  },
  name: "Column Position In Total Image Pixel Matrix",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_1,
};

pub const ROW_POSITION_IN_TOTAL_IMAGE_PIXEL_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x021F,
  },
  name: "Row Position In Total Image Pixel Matrix",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_1,
};

pub const PIXEL_ORIGIN_INTERPRETATION: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0301,
  },
  name: "Pixel Origin Interpretation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_OPTICAL_PATHS: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0302,
  },
  name: "Number of Optical Paths",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TOTAL_PIXEL_MATRIX_FOCAL_PLANES: Item = Item {
  tag: DataElementTag {
    group: 0x0048,
    element: 0x0303,
  },
  name: "Total Pixel Matrix Focal Planes",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const CALIBRATION_IMAGE: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x0004,
  },
  name: "Calibration Image",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x0010,
  },
  name: "Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTAINER_COMPONENT_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x0012,
  },
  name: "Container Component Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTAINER_COMPONENT_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x0013,
  },
  name: "Container Component Thickness",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DEVICE_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x0014,
  },
  name: "Device Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONTAINER_COMPONENT_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x0015,
  },
  name: "Container Component Width",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DEVICE_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x0016,
  },
  name: "Device Diameter",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DEVICE_DIAMETER_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x0017,
  },
  name: "Device Diameter Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DEVICE_VOLUME: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x0018,
  },
  name: "Device Volume",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const INTER_MARKER_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x0019,
  },
  name: "Inter-Marker Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONTAINER_COMPONENT_MATERIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x001A,
  },
  name: "Container Component Material",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTAINER_COMPONENT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x001B,
  },
  name: "Container Component ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CONTAINER_COMPONENT_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x001C,
  },
  name: "Container Component Length",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CONTAINER_COMPONENT_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x001D,
  },
  name: "Container Component Diameter",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CONTAINER_COMPONENT_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x001E,
  },
  name: "Container Component Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DEVICE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x0020,
  },
  name: "Device Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const LONG_DEVICE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0050,
    element: 0x0021,
  },
  name: "Long Device Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const CONTRAST_BOLUS_INGREDIENT_PERCENT_BY_VOLUME: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0001,
  },
  name: "Contrast/Bolus Ingredient Percent by Volume",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const OCT_FOCAL_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0002,
  },
  name: "OCT Focal Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const BEAM_SPOT_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0003,
  },
  name: "Beam Spot Size",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const EFFECTIVE_REFRACTIVE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0004,
  },
  name: "Effective Refractive Index",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const OCT_ACQUISITION_DOMAIN: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0006,
  },
  name: "OCT Acquisition Domain",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OCT_OPTICAL_CENTER_WAVELENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0007,
  },
  name: "OCT Optical Center Wavelength",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const AXIAL_RESOLUTION: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0008,
  },
  name: "Axial Resolution",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RANGING_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0009,
  },
  name: "Ranging Depth",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const A_LINE_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0011,
  },
  name: "A-line Rate",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const A_LINES_PER_FRAME: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0012,
  },
  name: "A-lines Per Frame",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CATHETER_ROTATIONAL_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0013,
  },
  name: "Catheter Rotational Rate",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const A_LINE_PIXEL_SPACING: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0014,
  },
  name: "A-line Pixel Spacing",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const MODE_OF_PERCUTANEOUS_ACCESS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0016,
  },
  name: "Mode of Percutaneous Access Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTRAVASCULAR_OCT_FRAME_TYPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0025,
  },
  name: "Intravascular OCT Frame Type Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OCTZ_OFFSET_APPLIED: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0026,
  },
  name: "OCT Z Offset Applied",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INTRAVASCULAR_FRAME_CONTENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0027,
  },
  name: "Intravascular Frame Content Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTRAVASCULAR_LONGITUDINAL_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0028,
  },
  name: "Intravascular Longitudinal Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const INTRAVASCULAR_OCT_FRAME_CONTENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0029,
  },
  name: "Intravascular OCT Frame Content Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OCTZ_OFFSET_CORRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0030,
  },
  name: "OCT Z Offset Correction",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_1,
};

pub const CATHETER_DIRECTION_OF_ROTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0031,
  },
  name: "Catheter Direction of Rotation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SEAM_LINE_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0033,
  },
  name: "Seam Line Location",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const FIRST_A_LINE_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0034,
  },
  name: "First A-line Location",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const SEAM_LINE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0036,
  },
  name: "Seam Line Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_PADDED_A_LINES: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0038,
  },
  name: "Number of Padded A-lines",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const INTERPOLATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x0039,
  },
  name: "Interpolation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFRACTIVE_INDEX_APPLIED: Item = Item {
  tag: DataElementTag {
    group: 0x0052,
    element: 0x003A,
  },
  name: "Refractive Index Applied",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ENERGY_WINDOW_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0010,
  },
  name: "Energy Window Vector",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_ENERGY_WINDOWS: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0011,
  },
  name: "Number of Energy Windows",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ENERGY_WINDOW_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0012,
  },
  name: "Energy Window Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ENERGY_WINDOW_RANGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0013,
  },
  name: "Energy Window Range Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ENERGY_WINDOW_LOWER_LIMIT: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0014,
  },
  name: "Energy Window Lower Limit",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ENERGY_WINDOW_UPPER_LIMIT: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0015,
  },
  name: "Energy Window Upper Limit",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RADIOPHARMACEUTICAL_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0016,
  },
  name: "Radiopharmaceutical Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RESIDUAL_SYRINGE_COUNTS: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0017,
  },
  name: "Residual Syringe Counts",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ENERGY_WINDOW_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0018,
  },
  name: "Energy Window Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const DETECTOR_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0020,
  },
  name: "Detector Vector",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_DETECTORS: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0021,
  },
  name: "Number of Detectors",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DETECTOR_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0022,
  },
  name: "Detector Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PHASE_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0030,
  },
  name: "Phase Vector",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_PHASES: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0031,
  },
  name: "Number of Phases",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PHASE_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0032,
  },
  name: "Phase Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FRAMES_IN_PHASE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0033,
  },
  name: "Number of Frames in Phase",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PHASE_DELAY: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0036,
  },
  name: "Phase Delay",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PAUSE_BETWEEN_FRAMES: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0038,
  },
  name: "Pause Between Frames",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PHASE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0039,
  },
  name: "Phase Description",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ROTATION_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0050,
  },
  name: "Rotation Vector",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_ROTATIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0051,
  },
  name: "Number of Rotations",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ROTATION_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0052,
  },
  name: "Rotation Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FRAMES_IN_ROTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0053,
  },
  name: "Number of Frames in Rotation",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RR_INTERVAL_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0060,
  },
  name: "R-R Interval Vector",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_RR_INTERVALS: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0061,
  },
  name: "Number of R-R Intervals",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const GATED_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0062,
  },
  name: "Gated Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DATA_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0063,
  },
  name: "Data Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TIME_SLOT_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0070,
  },
  name: "Time Slot Vector",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_TIME_SLOTS: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0071,
  },
  name: "Number of Time Slots",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const TIME_SLOT_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0072,
  },
  name: "Time Slot Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TIME_SLOT_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0073,
  },
  name: "Time Slot Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SLICE_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0080,
  },
  name: "Slice Vector",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_SLICES: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0081,
  },
  name: "Number of Slices",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ANGULAR_VIEW_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0090,
  },
  name: "Angular View Vector",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const TIME_SLICE_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0100,
  },
  name: "Time Slice Vector",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_TIME_SLICES: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0101,
  },
  name: "Number of Time Slices",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const START_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0200,
  },
  name: "Start Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TYPE_OF_DETECTOR_MOTION: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0202,
  },
  name: "Type of Detector Motion",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TRIGGER_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0210,
  },
  name: "Trigger Vector",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_TRIGGERS_IN_PHASE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0211,
  },
  name: "Number of Triggers in Phase",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const VIEW_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0220,
  },
  name: "View Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VIEW_MODIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0222,
  },
  name: "View Modifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIONUCLIDE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0300,
  },
  name: "Radionuclide Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ADMINISTRATION_ROUTE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0302,
  },
  name: "Administration Route Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIOPHARMACEUTICAL_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0304,
  },
  name: "Radiopharmaceutical Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CALIBRATION_DATA_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0306,
  },
  name: "Calibration Data Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ENERGY_WINDOW_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0308,
  },
  name: "Energy Window Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMAGE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0400,
  },
  name: "Image ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const PATIENT_ORIENTATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0410,
  },
  name: "Patient Orientation Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_ORIENTATION_MODIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0412,
  },
  name: "Patient Orientation Modifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_GANTRY_RELATIONSHIP_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0414,
  },
  name: "Patient Gantry Relationship Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SLICE_PROGRESSION_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0500,
  },
  name: "Slice Progression Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SCAN_PROGRESSION_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x0501,
  },
  name: "Scan Progression Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SERIES_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1000,
  },
  name: "Series Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_2,
};

pub const UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1001,
  },
  name: "Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COUNTS_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1002,
  },
  name: "Counts Source",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REPROJECTION_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1004,
  },
  name: "Reprojection Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SUV_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1006,
  },
  name: "SUV Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RANDOMS_CORRECTION_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1100,
  },
  name: "Randoms Correction Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ATTENUATION_CORRECTION_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1101,
  },
  name: "Attenuation Correction Method",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DECAY_CORRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1102,
  },
  name: "Decay Correction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RECONSTRUCTION_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1103,
  },
  name: "Reconstruction Method",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DETECTOR_LINES_OF_RESPONSE_USED: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1104,
  },
  name: "Detector Lines of Response Used",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SCATTER_CORRECTION_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1105,
  },
  name: "Scatter Correction Method",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const AXIAL_ACCEPTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1200,
  },
  name: "Axial Acceptance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const AXIAL_MASH: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1201,
  },
  name: "Axial Mash",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_2,
};

pub const TRANSVERSE_MASH: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1202,
  },
  name: "Transverse Mash",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const DETECTOR_ELEMENT_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1203,
  },
  name: "Detector Element Size",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const COINCIDENCE_WINDOW_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1210,
  },
  name: "Coincidence Window Width",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SECONDARY_COUNTS_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1220,
  },
  name: "Secondary Counts Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const FRAME_REFERENCE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1300,
  },
  name: "Frame Reference Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PRIMARY_PROMPTS_COUNTS_ACCUMULATED: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1310,
  },
  name: "Primary (Prompts) Counts Accumulated",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SECONDARY_COUNTS_ACCUMULATED: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1311,
  },
  name: "Secondary Counts Accumulated",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const SLICE_SENSITIVITY_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1320,
  },
  name: "Slice Sensitivity Factor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DECAY_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1321,
  },
  name: "Decay Factor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DOSE_CALIBRATION_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1322,
  },
  name: "Dose Calibration Factor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SCATTER_FRACTION_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1323,
  },
  name: "Scatter Fraction Factor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DEAD_TIME_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1324,
  },
  name: "Dead Time Factor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const IMAGE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1330,
  },
  name: "Image Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COUNTS_INCLUDED: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1400,
  },
  name: "Counts Included",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const DEAD_TIME_CORRECTION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0054,
    element: 0x1401,
  },
  name: "Dead Time Correction Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const HISTOGRAM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0060,
    element: 0x3000,
  },
  name: "Histogram Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const HISTOGRAM_NUMBER_OF_BINS: Item = Item {
  tag: DataElementTag {
    group: 0x0060,
    element: 0x3002,
  },
  name: "Histogram Number of Bins",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const HISTOGRAM_FIRST_BIN_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0060,
    element: 0x3004,
  },
  name: "Histogram First Bin Value",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const HISTOGRAM_LAST_BIN_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0060,
    element: 0x3006,
  },
  name: "Histogram Last Bin Value",
  vrs: &[
    ValueRepresentation::UnsignedShort,
    ValueRepresentation::SignedShort,
  ],
  multiplicity: VM_1,
};

pub const HISTOGRAM_BIN_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0060,
    element: 0x3008,
  },
  name: "Histogram Bin Width",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const HISTOGRAM_EXPLANATION: Item = Item {
  tag: DataElementTag {
    group: 0x0060,
    element: 0x3010,
  },
  name: "Histogram Explanation",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const HISTOGRAM_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0060,
    element: 0x3020,
  },
  name: "Histogram Data",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1_TO_N,
};

pub const SEGMENTATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0001,
  },
  name: "Segmentation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SEGMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0002,
  },
  name: "Segment Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SEGMENTED_PROPERTY_CATEGORY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0003,
  },
  name: "Segmented Property Category Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SEGMENT_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0004,
  },
  name: "Segment Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SEGMENT_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0005,
  },
  name: "Segment Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SEGMENT_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0006,
  },
  name: "Segment Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const SEGMENTATION_ALGORITHM_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0007,
  },
  name: "Segmentation Algorithm Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SEGMENT_ALGORITHM_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0008,
  },
  name: "Segment Algorithm Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SEGMENT_ALGORITHM_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0009,
  },
  name: "Segment Algorithm Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const SEGMENT_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x000A,
  },
  name: "Segment Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_SEGMENT_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x000B,
  },
  name: "Referenced Segment Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const RECOMMENDED_DISPLAY_GRAYSCALE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x000C,
  },
  name: "Recommended Display Grayscale Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RECOMMENDED_DISPLAY_CIE_LAB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x000D,
  },
  name: "Recommended Display CIELab Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const MAXIMUM_FRACTIONAL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x000E,
  },
  name: "Maximum Fractional Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SEGMENTED_PROPERTY_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x000F,
  },
  name: "Segmented Property Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SEGMENTATION_FRACTIONAL_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0010,
  },
  name: "Segmentation Fractional Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SEGMENTED_PROPERTY_TYPE_MODIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0011,
  },
  name: "Segmented Property Type Modifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const USED_SEGMENTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0012,
  },
  name: "Used Segments Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SEGMENTS_OVERLAP: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0013,
  },
  name: "Segments Overlap",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TRACKING_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0020,
  },
  name: "Tracking ID",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const TRACKING_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0062,
    element: 0x0021,
  },
  name: "Tracking UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const DEFORMABLE_REGISTRATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0064,
    element: 0x0002,
  },
  name: "Deformable Registration Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_FRAME_OF_REFERENCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0064,
    element: 0x0003,
  },
  name: "Source Frame of Reference UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const DEFORMABLE_REGISTRATION_GRID_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0064,
    element: 0x0005,
  },
  name: "Deformable Registration Grid Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GRID_DIMENSIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0064,
    element: 0x0007,
  },
  name: "Grid Dimensions",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_3,
};

pub const GRID_RESOLUTION: Item = Item {
  tag: DataElementTag {
    group: 0x0064,
    element: 0x0008,
  },
  name: "Grid Resolution",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const VECTOR_GRID_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0064,
    element: 0x0009,
  },
  name: "Vector Grid Data",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const PRE_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0064,
    element: 0x000F,
  },
  name: "Pre Deformation Matrix Registration Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const POST_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0064,
    element: 0x0010,
  },
  name: "Post Deformation Matrix Registration Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_SURFACES: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0001,
  },
  name: "Number of Surfaces",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const SURFACE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0002,
  },
  name: "Surface Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SURFACE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0003,
  },
  name: "Surface Number",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const SURFACE_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0004,
  },
  name: "Surface Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const SURFACE_PROCESSING: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0009,
  },
  name: "Surface Processing",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SURFACE_PROCESSING_RATIO: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x000A,
  },
  name: "Surface Processing Ratio",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SURFACE_PROCESSING_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x000B,
  },
  name: "Surface Processing Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const RECOMMENDED_PRESENTATION_OPACITY: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x000C,
  },
  name: "Recommended Presentation Opacity",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const RECOMMENDED_PRESENTATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x000D,
  },
  name: "Recommended Presentation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FINITE_VOLUME: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x000E,
  },
  name: "Finite Volume",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MANIFOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0010,
  },
  name: "Manifold",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SURFACE_POINTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0011,
  },
  name: "Surface Points Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SURFACE_POINTS_NORMALS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0012,
  },
  name: "Surface Points Normals Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SURFACE_MESH_PRIMITIVES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0013,
  },
  name: "Surface Mesh Primitives Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_SURFACE_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0015,
  },
  name: "Number of Surface Points",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const POINT_COORDINATES_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0016,
  },
  name: "Point Coordinates Data",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const POINT_POSITION_ACCURACY: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0017,
  },
  name: "Point Position Accuracy",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const MEAN_POINT_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0018,
  },
  name: "Mean Point Distance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const MAXIMUM_POINT_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0019,
  },
  name: "Maximum Point Distance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const POINTS_BOUNDING_BOX_COORDINATES: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x001A,
  },
  name: "Points Bounding Box Coordinates",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_6,
};

pub const AXIS_OF_ROTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x001B,
  },
  name: "Axis of Rotation",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const CENTER_OF_ROTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x001C,
  },
  name: "Center of Rotation",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const NUMBER_OF_VECTORS: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x001E,
  },
  name: "Number of Vectors",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const VECTOR_DIMENSIONALITY: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x001F,
  },
  name: "Vector Dimensionality",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const VECTOR_ACCURACY: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0020,
  },
  name: "Vector Accuracy",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_N,
};

pub const VECTOR_COORDINATE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0021,
  },
  name: "Vector Coordinate Data",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const DOUBLE_POINT_COORDINATES_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0022,
  },
  name: "Double Point Coordinates Data",
  vrs: &[ValueRepresentation::OtherDoubleString],
  multiplicity: VM_1,
};

pub const TRIANGLE_POINT_INDEX_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0023,
  },
  name: "Triangle Point Index List",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const EDGE_POINT_INDEX_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0024,
  },
  name: "Edge Point Index List",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const VERTEX_POINT_INDEX_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0025,
  },
  name: "Vertex Point Index List",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const TRIANGLE_STRIP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0026,
  },
  name: "Triangle Strip Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRIANGLE_FAN_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0027,
  },
  name: "Triangle Fan Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LINE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0028,
  },
  name: "Line Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRIMITIVE_POINT_INDEX_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0029,
  },
  name: "Primitive Point Index List",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const SURFACE_COUNT: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x002A,
  },
  name: "Surface Count",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const REFERENCED_SURFACE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x002B,
  },
  name: "Referenced Surface Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_SURFACE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x002C,
  },
  name: "Referenced Surface Number",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const SEGMENT_SURFACE_GENERATION_ALGORITHM_IDENTIFICATION_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0066,
      element: 0x002D,
    },
    name: "Segment Surface Generation Algorithm Identification Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const SEGMENT_SURFACE_SOURCE_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x002E,
  },
  name: "Segment Surface Source Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ALGORITHM_FAMILY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x002F,
  },
  name: "Algorithm Family Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ALGORITHM_NAME_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0030,
  },
  name: "Algorithm Name Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ALGORITHM_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0031,
  },
  name: "Algorithm Version",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ALGORITHM_PARAMETERS: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0032,
  },
  name: "Algorithm Parameters",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const FACET_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0034,
  },
  name: "Facet Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SURFACE_PROCESSING_ALGORITHM_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0035,
  },
  name: "Surface Processing Algorithm Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ALGORITHM_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0036,
  },
  name: "Algorithm Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const RECOMMENDED_POINT_RADIUS: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0037,
  },
  name: "Recommended Point Radius",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const RECOMMENDED_LINE_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0038,
  },
  name: "Recommended Line Thickness",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const LONG_PRIMITIVE_POINT_INDEX_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0040,
  },
  name: "Long Primitive Point Index List",
  vrs: &[ValueRepresentation::OtherLongString],
  multiplicity: VM_1,
};

pub const LONG_TRIANGLE_POINT_INDEX_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0041,
  },
  name: "Long Triangle Point Index List",
  vrs: &[ValueRepresentation::OtherLongString],
  multiplicity: VM_1,
};

pub const LONG_EDGE_POINT_INDEX_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0042,
  },
  name: "Long Edge Point Index List",
  vrs: &[ValueRepresentation::OtherLongString],
  multiplicity: VM_1,
};

pub const LONG_VERTEX_POINT_INDEX_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0043,
  },
  name: "Long Vertex Point Index List",
  vrs: &[ValueRepresentation::OtherLongString],
  multiplicity: VM_1,
};

pub const TRACK_SET_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0101,
  },
  name: "Track Set Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRACK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0102,
  },
  name: "Track Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECOMMENDED_DISPLAY_CIE_LAB_VALUE_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0103,
  },
  name: "Recommended Display CIELab Value List",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const TRACKING_ALGORITHM_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0104,
  },
  name: "Tracking Algorithm Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRACK_SET_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0105,
  },
  name: "Track Set Number",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TRACK_SET_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0106,
  },
  name: "Track Set Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TRACK_SET_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0107,
  },
  name: "Track Set Description",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const TRACK_SET_ANATOMICAL_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0108,
  },
  name: "Track Set Anatomical Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MEASUREMENTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0121,
  },
  name: "Measurements Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRACK_SET_STATISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0124,
  },
  name: "Track Set Statistics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FLOATING_POINT_VALUES: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0125,
  },
  name: "Floating Point Values",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const TRACK_POINT_INDEX_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0129,
  },
  name: "Track Point Index List",
  vrs: &[ValueRepresentation::OtherLongString],
  multiplicity: VM_1,
};

pub const TRACK_STATISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0130,
  },
  name: "Track Statistics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MEASUREMENT_VALUES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0132,
  },
  name: "Measurement Values Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DIFFUSION_ACQUISITION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0133,
  },
  name: "Diffusion Acquisition Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DIFFUSION_MODEL_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0066,
    element: 0x0134,
  },
  name: "Diffusion Model Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMPLANT_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6210,
  },
  name: "Implant Size",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const IMPLANT_TEMPLATE_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6221,
  },
  name: "Implant Template Version",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REPLACED_IMPLANT_TEMPLATE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6222,
  },
  name: "Replaced Implant Template Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMPLANT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6223,
  },
  name: "Implant Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DERIVATION_IMPLANT_TEMPLATE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6224,
  },
  name: "Derivation Implant Template Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ORIGINAL_IMPLANT_TEMPLATE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6225,
  },
  name: "Original Implant Template Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EFFECTIVE_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6226,
  },
  name: "Effective DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const IMPLANT_TARGET_ANATOMY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6230,
  },
  name: "Implant Target Anatomy Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INFORMATION_FROM_MANUFACTURER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6260,
  },
  name: "Information From Manufacturer Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NOTIFICATION_FROM_MANUFACTURER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6265,
  },
  name: "Notification From Manufacturer Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INFORMATION_ISSUE_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6270,
  },
  name: "Information Issue DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const INFORMATION_SUMMARY: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6280,
  },
  name: "Information Summary",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const IMPLANT_REGULATORY_DISAPPROVAL_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x62A0,
  },
  name: "Implant Regulatory Disapproval Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OVERALL_TEMPLATE_SPATIAL_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x62A5,
  },
  name: "Overall Template Spatial Tolerance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const HPGL_DOCUMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x62C0,
  },
  name: "HPGL Document Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const HPGL_DOCUMENT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x62D0,
  },
  name: "HPGL Document ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const HPGL_DOCUMENT_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x62D5,
  },
  name: "HPGL Document Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const VIEW_ORIENTATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x62E0,
  },
  name: "View Orientation Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VIEW_ORIENTATION_MODIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x62F0,
  },
  name: "View Orientation Modifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const HPGL_DOCUMENT_SCALING: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x62F2,
  },
  name: "HPGL Document Scaling",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const HPGL_DOCUMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6300,
  },
  name: "HPGL Document",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const HPGL_CONTOUR_PEN_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6310,
  },
  name: "HPGL Contour Pen Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const HPGL_PEN_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6320,
  },
  name: "HPGL Pen Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const HPGL_PEN_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6330,
  },
  name: "HPGL Pen Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const HPGL_PEN_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6340,
  },
  name: "HPGL Pen Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const HPGL_PEN_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6345,
  },
  name: "HPGL Pen Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const RECOMMENDED_ROTATION_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6346,
  },
  name: "Recommended Rotation Point",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2,
};

pub const BOUNDING_RECTANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6347,
  },
  name: "Bounding Rectangle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_4,
};

pub const IMPLANT_TEMPLATE_3D_MODEL_SURFACE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6350,
  },
  name: "Implant Template 3D Model Surface Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const SURFACE_MODEL_DESCRIPTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6360,
  },
  name: "Surface Model Description Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SURFACE_MODEL_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6380,
  },
  name: "Surface Model Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SURFACE_MODEL_SCALING_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6390,
  },
  name: "Surface Model Scaling Factor",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const MATERIALS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x63A0,
  },
  name: "Materials Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COATING_MATERIALS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x63A4,
  },
  name: "Coating Materials Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMPLANT_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x63A8,
  },
  name: "Implant Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FIXATION_METHOD_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x63AC,
  },
  name: "Fixation Method Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MATING_FEATURE_SETS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x63B0,
  },
  name: "Mating Feature Sets Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MATING_FEATURE_SET_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x63C0,
  },
  name: "Mating Feature Set ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const MATING_FEATURE_SET_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x63D0,
  },
  name: "Mating Feature Set Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const MATING_FEATURE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x63E0,
  },
  name: "Mating Feature Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MATING_FEATURE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x63F0,
  },
  name: "Mating Feature ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const MATING_FEATURE_DEGREE_OF_FREEDOM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6400,
  },
  name: "Mating Feature Degree of Freedom Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DEGREE_OF_FREEDOM_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6410,
  },
  name: "Degree of Freedom ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DEGREE_OF_FREEDOM_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6420,
  },
  name: "Degree of Freedom Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TWO_D_MATING_FEATURE_COORDINATES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6430,
  },
  name: "2D Mating Feature Coordinates Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_HPGL_DOCUMENT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6440,
  },
  name: "Referenced HPGL Document ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const TWO_D_MATING_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6450,
  },
  name: "2D Mating Point",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2,
};

pub const TWO_D_MATING_AXES: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6460,
  },
  name: "2D Mating Axes",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_4,
};

pub const TWO_D_DEGREE_OF_FREEDOM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6470,
  },
  name: "2D Degree of Freedom Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const THREE_D_DEGREE_OF_FREEDOM_AXIS: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6490,
  },
  name: "3D Degree of Freedom Axis",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const RANGE_OF_FREEDOM: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x64A0,
  },
  name: "Range of Freedom",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2,
};

pub const THREE_D_MATING_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x64C0,
  },
  name: "3D Mating Point",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const THREE_D_MATING_AXES: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x64D0,
  },
  name: "3D Mating Axes",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: ValueMultiplicity {
    min: 9,
    max: Some(9),
  },
};

pub const TWO_D_DEGREE_OF_FREEDOM_AXIS: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x64F0,
  },
  name: "2D Degree of Freedom Axis",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const PLANNING_LANDMARK_POINT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6500,
  },
  name: "Planning Landmark Point Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PLANNING_LANDMARK_LINE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6510,
  },
  name: "Planning Landmark Line Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PLANNING_LANDMARK_PLANE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6520,
  },
  name: "Planning Landmark Plane Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PLANNING_LANDMARK_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6530,
  },
  name: "Planning Landmark ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PLANNING_LANDMARK_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6540,
  },
  name: "Planning Landmark Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PLANNING_LANDMARK_IDENTIFICATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6545,
  },
  name: "Planning Landmark Identification Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TWO_D_POINT_COORDINATES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6550,
  },
  name: "2D Point Coordinates Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TWO_D_POINT_COORDINATES: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6560,
  },
  name: "2D Point Coordinates",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2,
};

pub const THREE_D_POINT_COORDINATES: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6590,
  },
  name: "3D Point Coordinates",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const TWO_D_LINE_COORDINATES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x65A0,
  },
  name: "2D Line Coordinates Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TWO_D_LINE_COORDINATES: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x65B0,
  },
  name: "2D Line Coordinates",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_4,
};

pub const THREE_D_LINE_COORDINATES: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x65D0,
  },
  name: "3D Line Coordinates",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_6,
};

pub const TWO_D_PLANE_COORDINATES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x65E0,
  },
  name: "2D Plane Coordinates Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TWO_D_PLANE_INTERSECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x65F0,
  },
  name: "2D Plane Intersection",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_4,
};

pub const THREE_D_PLANE_ORIGIN: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6610,
  },
  name: "3D Plane Origin",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const THREE_D_PLANE_NORMAL: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x6620,
  },
  name: "3D Plane Normal",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const MODEL_MODIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x7001,
  },
  name: "Model Modification",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MODEL_MIRRORING: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x7002,
  },
  name: "Model Mirroring",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MODEL_USAGE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x7003,
  },
  name: "Model Usage Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MODEL_GROUP_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x7004,
  },
  name: "Model Group UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const RELATIVE_URI_REFERENCE_WITHIN_ENCAPSULATED_DOCUMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0068,
    element: 0x7005,
  },
  name: "Relative URI Reference Within Encapsulated Document",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const ANNOTATION_COORDINATE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x0001,
  },
  name: "Annotation Coordinate Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ANNOTATION_GROUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x0002,
  },
  name: "Annotation Group Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANNOTATION_GROUP_UID: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x0003,
  },
  name: "Annotation Group UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const ANNOTATION_GROUP_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x0005,
  },
  name: "Annotation Group Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ANNOTATION_GROUP_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x0006,
  },
  name: "Annotation Group Description",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const ANNOTATION_GROUP_GENERATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x0007,
  },
  name: "Annotation Group Generation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ANNOTATION_GROUP_ALGORITHM_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x0008,
  },
  name: "Annotation Group Algorithm Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANNOTATION_PROPERTY_CATEGORY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x0009,
  },
  name: "Annotation Property Category Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANNOTATION_PROPERTY_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x000A,
  },
  name: "Annotation Property Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANNOTATION_PROPERTY_TYPE_MODIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x000B,
  },
  name: "Annotation Property Type Modifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_ANNOTATIONS: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x000C,
  },
  name: "Number of Annotations",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const ANNOTATION_APPLIES_TO_ALL_OPTICAL_PATHS: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x000D,
  },
  name: "Annotation Applies to All Optical Paths",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFERENCED_OPTICAL_PATH_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x000E,
  },
  name: "Referenced Optical Path Identifier",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1_TO_N,
};

pub const ANNOTATION_APPLIES_TO_ALL_Z_PLANES: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x000F,
  },
  name: "Annotation Applies to All Z Planes",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COMMON_Z_COORDINATE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x0010,
  },
  name: "Common Z Coordinate Value",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_N,
};

pub const ANNOTATION_INDEX_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x006A,
    element: 0x0011,
  },
  name: "Annotation Index List",
  vrs: &[ValueRepresentation::OtherLongString],
  multiplicity: VM_1,
};

pub const GRAPHIC_ANNOTATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0001,
  },
  name: "Graphic Annotation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GRAPHIC_LAYER: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0002,
  },
  name: "Graphic Layer",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BOUNDING_BOX_ANNOTATION_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0003,
  },
  name: "Bounding Box Annotation Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ANCHOR_POINT_ANNOTATION_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0004,
  },
  name: "Anchor Point Annotation Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GRAPHIC_ANNOTATION_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0005,
  },
  name: "Graphic Annotation Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const UNFORMATTED_TEXT_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0006,
  },
  name: "Unformatted Text Value",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const TEXT_OBJECT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0008,
  },
  name: "Text Object Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GRAPHIC_OBJECT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0009,
  },
  name: "Graphic Object Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BOUNDING_BOX_TOP_LEFT_HAND_CORNER: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0010,
  },
  name: "Bounding Box Top Left Hand Corner",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const BOUNDING_BOX_BOTTOM_RIGHT_HAND_CORNER: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0011,
  },
  name: "Bounding Box Bottom Right Hand Corner",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const BOUNDING_BOX_TEXT_HORIZONTAL_JUSTIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0012,
  },
  name: "Bounding Box Text Horizontal Justification",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ANCHOR_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0014,
  },
  name: "Anchor Point",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const ANCHOR_POINT_VISIBILITY: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0015,
  },
  name: "Anchor Point Visibility",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GRAPHIC_DIMENSIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0020,
  },
  name: "Graphic Dimensions",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_GRAPHIC_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0021,
  },
  name: "Number of Graphic Points",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const GRAPHIC_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0022,
  },
  name: "Graphic Data",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2_TO_N,
};

pub const GRAPHIC_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0023,
  },
  name: "Graphic Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GRAPHIC_FILLED: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0024,
  },
  name: "Graphic Filled",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_ROTATION_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0040,
  },
  name: "Image Rotation (Retired)",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const IMAGE_HORIZONTAL_FLIP: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0041,
  },
  name: "Image Horizontal Flip",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_ROTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0042,
  },
  name: "Image Rotation",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DISPLAYED_AREA_TOP_LEFT_HAND_CORNER_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0050,
  },
  name: "Displayed Area Top Left Hand Corner (Trial)",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2,
};

pub const DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0051,
  },
  name: "Displayed Area Bottom Right Hand Corner (Trial)",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2,
};

pub const DISPLAYED_AREA_TOP_LEFT_HAND_CORNER: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0052,
  },
  name: "Displayed Area Top Left Hand Corner",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_2,
};

pub const DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0053,
  },
  name: "Displayed Area Bottom Right Hand Corner",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_2,
};

pub const DISPLAYED_AREA_SELECTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x005A,
  },
  name: "Displayed Area Selection Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GRAPHIC_LAYER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0060,
  },
  name: "Graphic Layer Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GRAPHIC_LAYER_ORDER: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0062,
  },
  name: "Graphic Layer Order",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const GRAPHIC_LAYER_RECOMMENDED_DISPLAY_GRAYSCALE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0066,
  },
  name: "Graphic Layer Recommended Display Grayscale Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const GRAPHIC_LAYER_RECOMMENDED_DISPLAY_RGB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0067,
  },
  name: "Graphic Layer Recommended Display RGB Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const GRAPHIC_LAYER_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0068,
  },
  name: "Graphic Layer Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CONTENT_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0080,
  },
  name: "Content Label",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTENT_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0081,
  },
  name: "Content Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PRESENTATION_CREATION_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0082,
  },
  name: "Presentation Creation Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const PRESENTATION_CREATION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0083,
  },
  name: "Presentation Creation Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const CONTENT_CREATOR_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0084,
  },
  name: "Content Creator's Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const CONTENT_CREATOR_IDENTIFICATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0086,
  },
  name: "Content Creator's Identification Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ALTERNATE_CONTENT_DESCRIPTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0087,
  },
  name: "Alternate Content Description Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRESENTATION_SIZE_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0100,
  },
  name: "Presentation Size Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRESENTATION_PIXEL_SPACING: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0101,
  },
  name: "Presentation Pixel Spacing",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const PRESENTATION_PIXEL_ASPECT_RATIO: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0102,
  },
  name: "Presentation Pixel Aspect Ratio",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_2,
};

pub const PRESENTATION_PIXEL_MAGNIFICATION_RATIO: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0103,
  },
  name: "Presentation Pixel Magnification Ratio",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const GRAPHIC_GROUP_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0207,
  },
  name: "Graphic Group Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const GRAPHIC_GROUP_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0208,
  },
  name: "Graphic Group Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const COMPOUND_GRAPHIC_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0209,
  },
  name: "Compound Graphic Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMPOUND_GRAPHIC_INSTANCE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0226,
  },
  name: "Compound Graphic Instance ID",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const FONT_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0227,
  },
  name: "Font Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const FONT_NAME_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0228,
  },
  name: "Font Name Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CSS_FONT_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0229,
  },
  name: "CSS Font Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ROTATION_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0230,
  },
  name: "Rotation Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TEXT_STYLE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0231,
  },
  name: "Text Style Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LINE_STYLE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0232,
  },
  name: "Line Style Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FILL_STYLE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0233,
  },
  name: "Fill Style Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GRAPHIC_GROUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0234,
  },
  name: "Graphic Group Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TEXT_COLOR_CIE_LAB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0241,
  },
  name: "Text Color CIELab Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const HORIZONTAL_ALIGNMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0242,
  },
  name: "Horizontal Alignment",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VERTICAL_ALIGNMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0243,
  },
  name: "Vertical Alignment",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SHADOW_STYLE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0244,
  },
  name: "Shadow Style",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SHADOW_OFFSET_X: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0245,
  },
  name: "Shadow Offset X",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SHADOW_OFFSET_Y: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0246,
  },
  name: "Shadow Offset Y",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SHADOW_COLOR_CIE_LAB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0247,
  },
  name: "Shadow Color CIELab Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const UNDERLINED: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0248,
  },
  name: "Underlined",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BOLD: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0249,
  },
  name: "Bold",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ITALIC: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0250,
  },
  name: "Italic",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATTERN_ON_COLOR_CIE_LAB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0251,
  },
  name: "Pattern On Color CIELab Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const PATTERN_OFF_COLOR_CIE_LAB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0252,
  },
  name: "Pattern Off Color CIELab Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const LINE_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0253,
  },
  name: "Line Thickness",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const LINE_DASHING_STYLE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0254,
  },
  name: "Line Dashing Style",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const LINE_PATTERN: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0255,
  },
  name: "Line Pattern",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const FILL_PATTERN: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0256,
  },
  name: "Fill Pattern",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const FILL_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0257,
  },
  name: "Fill Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SHADOW_OPACITY: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0258,
  },
  name: "Shadow Opacity",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const GAP_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0261,
  },
  name: "Gap Length",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const DIAMETER_OF_VISIBILITY: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0262,
  },
  name: "Diameter of Visibility",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ROTATION_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0273,
  },
  name: "Rotation Point",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const TICK_ALIGNMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0274,
  },
  name: "Tick Alignment",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SHOW_TICK_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0278,
  },
  name: "Show Tick Label",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TICK_LABEL_ALIGNMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0279,
  },
  name: "Tick Label Alignment",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COMPOUND_GRAPHIC_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0282,
  },
  name: "Compound Graphic Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATTERN_ON_OPACITY: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0284,
  },
  name: "Pattern On Opacity",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const PATTERN_OFF_OPACITY: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0285,
  },
  name: "Pattern Off Opacity",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const MAJOR_TICKS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0287,
  },
  name: "Major Ticks Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TICK_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0288,
  },
  name: "Tick Position",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TICK_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0289,
  },
  name: "Tick Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const COMPOUND_GRAPHIC_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0294,
  },
  name: "Compound Graphic Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GRAPHIC_GROUP_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0295,
  },
  name: "Graphic Group ID",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const SHAPE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0306,
  },
  name: "Shape Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REGISTRATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0308,
  },
  name: "Registration Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MATRIX_REGISTRATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0309,
  },
  name: "Matrix Registration Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MATRIX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x030A,
  },
  name: "Matrix Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FRAME_OF_REFERENCE_TO_DISPLAYED_COORDINATE_SYSTEM_TRANSFORMATION_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x030B,
  },
  name: "Frame of Reference to Displayed Coordinate System Transformation Matrix",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: ValueMultiplicity { min: 16, max: Some(16) },
};

pub const FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x030C,
  },
  name: "Frame of Reference Transformation Matrix Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REGISTRATION_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x030D,
  },
  name: "Registration Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FIDUCIAL_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x030F,
  },
  name: "Fiducial Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const FIDUCIAL_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0310,
  },
  name: "Fiducial Identifier",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const FIDUCIAL_IDENTIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0311,
  },
  name: "Fiducial Identifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTOUR_UNCERTAINTY_RADIUS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0312,
  },
  name: "Contour Uncertainty Radius",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const USED_FIDUCIALS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0314,
  },
  name: "Used Fiducials Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const USED_RT_STRUCTURE_SET_ROI_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0315,
  },
  name: "Used RT Structure Set ROI Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GRAPHIC_COORDINATES_DATA_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0318,
  },
  name: "Graphic Coordinates Data Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FIDUCIAL_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x031A,
  },
  name: "Fiducial UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REFERENCED_FIDUCIAL_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x031B,
  },
  name: "Referenced Fiducial UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const FIDUCIAL_SET_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x031C,
  },
  name: "Fiducial Set Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FIDUCIAL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x031E,
  },
  name: "Fiducial Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FIDUCIALS_PROPERTY_CATEGORY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x031F,
  },
  name: "Fiducials Property Category Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GRAPHIC_LAYER_RECOMMENDED_DISPLAY_CIE_LAB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0401,
  },
  name: "Graphic Layer Recommended Display CIELab Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const BLENDING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0402,
  },
  name: "Blending Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RELATIVE_OPACITY: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0403,
  },
  name: "Relative Opacity",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const REFERENCED_SPATIAL_REGISTRATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0404,
  },
  name: "Referenced Spatial Registration Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BLENDING_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x0405,
  },
  name: "Blending Position",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRESENTATION_DISPLAY_COLLECTION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1101,
  },
  name: "Presentation Display Collection UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const PRESENTATION_SEQUENCE_COLLECTION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1102,
  },
  name: "Presentation Sequence Collection UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const PRESENTATION_SEQUENCE_POSITION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1103,
  },
  name: "Presentation Sequence Position Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RENDERED_IMAGE_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1104,
  },
  name: "Rendered Image Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VOLUMETRIC_PRESENTATION_STATE_INPUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1201,
  },
  name: "Volumetric Presentation State Input Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRESENTATION_INPUT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1202,
  },
  name: "Presentation Input Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INPUT_SEQUENCE_POSITION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1203,
  },
  name: "Input Sequence Position Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CROP: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1204,
  },
  name: "Crop",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CROPPING_SPECIFICATION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1205,
  },
  name: "Cropping Specification Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const COMPOSITING_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1206,
  },
  name: "Compositing Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VOLUMETRIC_PRESENTATION_INPUT_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1207,
  },
  name: "Volumetric Presentation Input Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMAGE_VOLUME_GEOMETRY: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1208,
  },
  name: "Image Volume Geometry",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VOLUMETRIC_PRESENTATION_INPUT_SET_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1209,
  },
  name: "Volumetric Presentation Input Set UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const VOLUMETRIC_PRESENTATION_INPUT_SET_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x120A,
  },
  name: "Volumetric Presentation Input Set Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GLOBAL_CROP: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x120B,
  },
  name: "Global Crop",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GLOBAL_CROPPING_SPECIFICATION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x120C,
  },
  name: "Global Cropping Specification Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const RENDERING_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x120D,
  },
  name: "Rendering Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VOLUME_CROPPING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1301,
  },
  name: "Volume Cropping Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VOLUME_CROPPING_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1302,
  },
  name: "Volume Cropping Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BOUNDING_BOX_CROP: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1303,
  },
  name: "Bounding Box Crop",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_6,
};

pub const OBLIQUE_CROPPING_PLANE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1304,
  },
  name: "Oblique Cropping Plane Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PLANE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1305,
  },
  name: "Plane",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_4,
};

pub const PLANE_NORMAL: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1306,
  },
  name: "Plane Normal",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const CROPPING_SPECIFICATION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1309,
  },
  name: "Cropping Specification Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const MULTI_PLANAR_RECONSTRUCTION_STYLE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1501,
  },
  name: "Multi-Planar Reconstruction Style",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MPR_THICKNESS_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1502,
  },
  name: "MPR Thickness Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MPR_SLAB_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1503,
  },
  name: "MPR Slab Thickness",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const MPR_TOP_LEFT_HAND_CORNER: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1505,
  },
  name: "MPR Top Left Hand Corner",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const MPR_VIEW_WIDTH_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1507,
  },
  name: "MPR View Width Direction",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const MPR_VIEW_WIDTH: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1508,
  },
  name: "MPR View Width",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const NUMBER_OF_VOLUMETRIC_CURVE_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x150C,
  },
  name: "Number of Volumetric Curve Points",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const VOLUMETRIC_CURVE_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x150D,
  },
  name: "Volumetric Curve Points",
  vrs: &[ValueRepresentation::OtherDoubleString],
  multiplicity: VM_1,
};

pub const MPR_VIEW_HEIGHT_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1511,
  },
  name: "MPR View Height Direction",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const MPR_VIEW_HEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1512,
  },
  name: "MPR View Height",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RENDER_PROJECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1602,
  },
  name: "Render Projection",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VIEWPOINT_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1603,
  },
  name: "Viewpoint Position",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const VIEWPOINT_LOOK_AT_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1604,
  },
  name: "Viewpoint LookAt Point",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const VIEWPOINT_UP_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1605,
  },
  name: "Viewpoint Up Direction",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const RENDER_FIELD_OF_VIEW: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1606,
  },
  name: "Render Field of View",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_6,
};

pub const SAMPLING_STEP_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1607,
  },
  name: "Sampling Step Size",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const SHADING_STYLE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1701,
  },
  name: "Shading Style",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const AMBIENT_REFLECTION_INTENSITY: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1702,
  },
  name: "Ambient Reflection Intensity",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const LIGHT_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1703,
  },
  name: "Light Direction",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const DIFFUSE_REFLECTION_INTENSITY: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1704,
  },
  name: "Diffuse Reflection Intensity",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const SPECULAR_REFLECTION_INTENSITY: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1705,
  },
  name: "Specular Reflection Intensity",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const SHININESS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1706,
  },
  name: "Shininess",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PRESENTATION_STATE_CLASSIFICATION_COMPONENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1801,
  },
  name: "Presentation State Classification Component Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMPONENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1802,
  },
  name: "Component Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COMPONENT_INPUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1803,
  },
  name: "Component Input Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VOLUMETRIC_PRESENTATION_INPUT_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1804,
  },
  name: "Volumetric Presentation Input Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PRESENTATION_STATE_COMPOSITOR_COMPONENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1805,
  },
  name: "Presentation State Compositor Component Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const WEIGHTING_TRANSFER_FUNCTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1806,
  },
  name: "Weighting Transfer Function Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const WEIGHTING_LOOKUP_TABLE_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1807,
  },
  name: "Weighting Lookup Table Descriptor",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const WEIGHTING_LOOKUP_TABLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1808,
  },
  name: "Weighting Lookup Table Data",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const VOLUMETRIC_ANNOTATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1901,
  },
  name: "Volumetric Annotation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_STRUCTURED_CONTEXT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1903,
  },
  name: "Referenced Structured Context Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_CONTENT_ITEM: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1904,
  },
  name: "Referenced Content Item",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const VOLUMETRIC_PRESENTATION_INPUT_ANNOTATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1905,
  },
  name: "Volumetric Presentation Input Annotation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANNOTATION_CLIPPING: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1907,
  },
  name: "Annotation Clipping",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRESENTATION_ANIMATION_STYLE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1A01,
  },
  name: "Presentation Animation Style",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RECOMMENDED_ANIMATION_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1A03,
  },
  name: "Recommended Animation Rate",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const ANIMATION_CURVE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1A04,
  },
  name: "Animation Curve Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANIMATION_STEP_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1A05,
  },
  name: "Animation Step Size",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const SWIVEL_RANGE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1A06,
  },
  name: "Swivel Range",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const VOLUMETRIC_CURVE_UP_DIRECTIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1A07,
  },
  name: "Volumetric Curve Up Directions",
  vrs: &[ValueRepresentation::OtherDoubleString],
  multiplicity: VM_1,
};

pub const VOLUME_STREAM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1A08,
  },
  name: "Volume Stream Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RGBA_TRANSFER_FUNCTION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1A09,
  },
  name: "RGBA Transfer Function Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ADVANCED_BLENDING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1B01,
  },
  name: "Advanced Blending Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BLENDING_INPUT_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1B02,
  },
  name: "Blending Input Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const BLENDING_DISPLAY_INPUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1B03,
  },
  name: "Blending Display Input Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BLENDING_DISPLAY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1B04,
  },
  name: "Blending Display Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BLENDING_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1B06,
  },
  name: "Blending Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TIME_SERIES_BLENDING: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1B07,
  },
  name: "Time Series Blending",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GEOMETRY_FOR_DISPLAY: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1B08,
  },
  name: "Geometry for Display",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const THRESHOLD_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1B11,
  },
  name: "Threshold Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const THRESHOLD_VALUE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1B12,
  },
  name: "Threshold Value Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const THRESHOLD_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1B13,
  },
  name: "Threshold Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const THRESHOLD_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0070,
    element: 0x1B14,
  },
  name: "Threshold Value",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const HANGING_PROTOCOL_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0002,
  },
  name: "Hanging Protocol Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const HANGING_PROTOCOL_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0004,
  },
  name: "Hanging Protocol Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const HANGING_PROTOCOL_LEVEL: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0006,
  },
  name: "Hanging Protocol Level",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const HANGING_PROTOCOL_CREATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0008,
  },
  name: "Hanging Protocol Creator",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const HANGING_PROTOCOL_CREATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x000A,
  },
  name: "Hanging Protocol Creation DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const HANGING_PROTOCOL_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x000C,
  },
  name: "Hanging Protocol Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const HANGING_PROTOCOL_USER_IDENTIFICATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x000E,
  },
  name: "Hanging Protocol User Identification Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const HANGING_PROTOCOL_USER_GROUP_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0010,
  },
  name: "Hanging Protocol User Group Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SOURCE_HANGING_PROTOCOL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0012,
  },
  name: "Source Hanging Protocol Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_PRIORS_REFERENCED: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0014,
  },
  name: "Number of Priors Referenced",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMAGE_SETS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0020,
  },
  name: "Image Sets Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_SET_SELECTOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0022,
  },
  name: "Image Set Selector Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_SET_SELECTOR_USAGE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0024,
  },
  name: "Image Set Selector Usage Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SELECTOR_ATTRIBUTE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0026,
  },
  name: "Selector Attribute",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1,
};

pub const SELECTOR_VALUE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0028,
  },
  name: "Selector Value Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const TIME_BASED_IMAGE_SETS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0030,
  },
  name: "Time Based Image Sets Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_SET_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0032,
  },
  name: "Image Set Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMAGE_SET_SELECTOR_CATEGORY: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0034,
  },
  name: "Image Set Selector Category",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RELATIVE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0038,
  },
  name: "Relative Time",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2,
};

pub const RELATIVE_TIME_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x003A,
  },
  name: "Relative Time Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ABSTRACT_PRIOR_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x003C,
  },
  name: "Abstract Prior Value",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_2,
};

pub const ABSTRACT_PRIOR_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x003E,
  },
  name: "Abstract Prior Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_SET_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0040,
  },
  name: "Image Set Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SELECTOR_ATTRIBUTE_VR: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0050,
  },
  name: "Selector Attribute VR",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SELECTOR_SEQUENCE_POINTER: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0052,
  },
  name: "Selector Sequence Pointer",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_SEQUENCE_POINTER_PRIVATE_CREATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0054,
  },
  name: "Selector Sequence Pointer Private Creator",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_ATTRIBUTE_PRIVATE_CREATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0056,
  },
  name: "Selector Attribute Private Creator",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SELECTOR_AE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x005E,
  },
  name: "Selector AE Value",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_AS_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x005F,
  },
  name: "Selector AS Value",
  vrs: &[ValueRepresentation::AgeString],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_AT_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0060,
  },
  name: "Selector AT Value",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_DA_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0061,
  },
  name: "Selector DA Value",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_CS_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0062,
  },
  name: "Selector CS Value",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_DT_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0063,
  },
  name: "Selector DT Value",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_IS_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0064,
  },
  name: "Selector IS Value",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_OB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0065,
  },
  name: "Selector OB Value",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const SELECTOR_LO_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0066,
  },
  name: "Selector LO Value",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_OF_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0067,
  },
  name: "Selector OF Value",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const SELECTOR_LT_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0068,
  },
  name: "Selector LT Value",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const SELECTOR_OW_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0069,
  },
  name: "Selector OW Value",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const SELECTOR_PN_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x006A,
  },
  name: "Selector PN Value",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_TM_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x006B,
  },
  name: "Selector TM Value",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_SH_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x006C,
  },
  name: "Selector SH Value",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_UN_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x006D,
  },
  name: "Selector UN Value",
  vrs: &[ValueRepresentation::Unknown],
  multiplicity: VM_1,
};

pub const SELECTOR_ST_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x006E,
  },
  name: "Selector ST Value",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const SELECTOR_UC_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x006F,
  },
  name: "Selector UC Value",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_UT_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0070,
  },
  name: "Selector UT Value",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const SELECTOR_UR_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0071,
  },
  name: "Selector UR Value",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const SELECTOR_DS_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0072,
  },
  name: "Selector DS Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_OD_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0073,
  },
  name: "Selector OD Value",
  vrs: &[ValueRepresentation::OtherDoubleString],
  multiplicity: VM_1,
};

pub const SELECTOR_FD_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0074,
  },
  name: "Selector FD Value",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_OL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0075,
  },
  name: "Selector OL Value",
  vrs: &[ValueRepresentation::OtherLongString],
  multiplicity: VM_1,
};

pub const SELECTOR_FL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0076,
  },
  name: "Selector FL Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_UL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0078,
  },
  name: "Selector UL Value",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_US_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x007A,
  },
  name: "Selector US Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_SL_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x007C,
  },
  name: "Selector SL Value",
  vrs: &[ValueRepresentation::SignedLong],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_SS_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x007E,
  },
  name: "Selector SS Value",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_UI_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x007F,
  },
  name: "Selector UI Value",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_CODE_SEQUENCE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0080,
  },
  name: "Selector Code Sequence Value",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SELECTOR_OV_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0081,
  },
  name: "Selector OV Value",
  vrs: &[ValueRepresentation::OtherVeryLongString],
  multiplicity: VM_1,
};

pub const SELECTOR_SV_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0082,
  },
  name: "Selector SV Value",
  vrs: &[ValueRepresentation::SignedVeryLong],
  multiplicity: VM_1_TO_N,
};

pub const SELECTOR_UV_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0083,
  },
  name: "Selector UV Value",
  vrs: &[ValueRepresentation::UnsignedVeryLong],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_SCREENS: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0100,
  },
  name: "Number of Screens",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NOMINAL_SCREEN_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0102,
  },
  name: "Nominal Screen Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_VERTICAL_PIXELS: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0104,
  },
  name: "Number of Vertical Pixels",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_HORIZONTAL_PIXELS: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0106,
  },
  name: "Number of Horizontal Pixels",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DISPLAY_ENVIRONMENT_SPATIAL_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0108,
  },
  name: "Display Environment Spatial Position",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_4,
};

pub const SCREEN_MINIMUM_GRAYSCALE_BIT_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x010A,
  },
  name: "Screen Minimum Grayscale Bit Depth",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SCREEN_MINIMUM_COLOR_BIT_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x010C,
  },
  name: "Screen Minimum Color Bit Depth",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const APPLICATION_MAXIMUM_REPAINT_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x010E,
  },
  name: "Application Maximum Repaint Time",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DISPLAY_SETS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0200,
  },
  name: "Display Sets Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DISPLAY_SET_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0202,
  },
  name: "Display Set Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DISPLAY_SET_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0203,
  },
  name: "Display Set Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DISPLAY_SET_PRESENTATION_GROUP: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0204,
  },
  name: "Display Set Presentation Group",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DISPLAY_SET_PRESENTATION_GROUP_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0206,
  },
  name: "Display Set Presentation Group Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PARTIAL_DATA_DISPLAY_HANDLING: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0208,
  },
  name: "Partial Data Display Handling",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SYNCHRONIZED_SCROLLING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0210,
  },
  name: "Synchronized Scrolling Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DISPLAY_SET_SCROLLING_GROUP: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0212,
  },
  name: "Display Set Scrolling Group",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2_TO_N,
};

pub const NAVIGATION_INDICATOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0214,
  },
  name: "Navigation Indicator Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NAVIGATION_DISPLAY_SET: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0216,
  },
  name: "Navigation Display Set",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFERENCE_DISPLAY_SETS: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0218,
  },
  name: "Reference Display Sets",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const IMAGE_BOXES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0300,
  },
  name: "Image Boxes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0302,
  },
  name: "Image Box Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_LAYOUT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0304,
  },
  name: "Image Box Layout Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_TILE_HORIZONTAL_DIMENSION: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0306,
  },
  name: "Image Box Tile Horizontal Dimension",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_TILE_VERTICAL_DIMENSION: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0308,
  },
  name: "Image Box Tile Vertical Dimension",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_SCROLL_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0310,
  },
  name: "Image Box Scroll Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_SMALL_SCROLL_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0312,
  },
  name: "Image Box Small Scroll Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_SMALL_SCROLL_AMOUNT: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0314,
  },
  name: "Image Box Small Scroll Amount",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_LARGE_SCROLL_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0316,
  },
  name: "Image Box Large Scroll Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_LARGE_SCROLL_AMOUNT: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0318,
  },
  name: "Image Box Large Scroll Amount",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_OVERLAP_PRIORITY: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0320,
  },
  name: "Image Box Overlap Priority",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CINE_RELATIVE_TO_REAL_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0330,
  },
  name: "Cine Relative to Real-Time",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const FILTER_OPERATIONS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0400,
  },
  name: "Filter Operations Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FILTER_BY_CATEGORY: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0402,
  },
  name: "Filter-by Category",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FILTER_BY_ATTRIBUTE_PRESENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0404,
  },
  name: "Filter-by Attribute Presence",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FILTER_BY_OPERATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0406,
  },
  name: "Filter-by Operator",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const STRUCTURED_DISPLAY_BACKGROUND_CIE_LAB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0420,
  },
  name: "Structured Display Background CIELab Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const EMPTY_IMAGE_BOX_CIE_LAB_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0421,
  },
  name: "Empty Image Box CIELab Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const STRUCTURED_DISPLAY_IMAGE_BOX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0422,
  },
  name: "Structured Display Image Box Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STRUCTURED_DISPLAY_TEXT_BOX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0424,
  },
  name: "Structured Display Text Box Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_FIRST_FRAME_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0427,
  },
  name: "Referenced First Frame Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_SYNCHRONIZATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0430,
  },
  name: "Image Box Synchronization Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SYNCHRONIZED_IMAGE_BOX_LIST: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0432,
  },
  name: "Synchronized Image Box List",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_2_TO_N,
};

pub const TYPE_OF_SYNCHRONIZATION: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0434,
  },
  name: "Type of Synchronization",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BLENDING_OPERATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0500,
  },
  name: "Blending Operation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFORMATTING_OPERATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0510,
  },
  name: "Reformatting Operation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFORMATTING_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0512,
  },
  name: "Reformatting Thickness",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const REFORMATTING_INTERVAL: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0514,
  },
  name: "Reformatting Interval",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const REFORMATTING_OPERATION_INITIAL_VIEW_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0516,
  },
  name: "Reformatting Operation Initial View Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const THREE_D_RENDERING_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0520,
  },
  name: "3D Rendering Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const SORTING_OPERATIONS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0600,
  },
  name: "Sorting Operations Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SORT_BY_CATEGORY: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0602,
  },
  name: "Sort-by Category",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SORTING_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0604,
  },
  name: "Sorting Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DISPLAY_SET_PATIENT_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0700,
  },
  name: "Display Set Patient Orientation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_2,
};

pub const VOI_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0702,
  },
  name: "VOI Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PSEUDO_COLOR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0704,
  },
  name: "Pseudo-Color Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PSEUDO_COLOR_PALETTE_INSTANCE_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0705,
  },
  name: "Pseudo-Color Palette Instance Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SHOW_GRAYSCALE_INVERTED: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0706,
  },
  name: "Show Grayscale Inverted",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SHOW_IMAGE_TRUE_SIZE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0710,
  },
  name: "Show Image True Size Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SHOW_GRAPHIC_ANNOTATION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0712,
  },
  name: "Show Graphic Annotation Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SHOW_PATIENT_DEMOGRAPHICS_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0714,
  },
  name: "Show Patient Demographics Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SHOW_ACQUISITION_TECHNIQUES_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0716,
  },
  name: "Show Acquisition Techniques Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DISPLAY_SET_HORIZONTAL_JUSTIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0717,
  },
  name: "Display Set Horizontal Justification",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DISPLAY_SET_VERTICAL_JUSTIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0072,
    element: 0x0718,
  },
  name: "Display Set Vertical Justification",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTINUATION_START_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x0120,
  },
  name: "Continuation Start Meterset",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const CONTINUATION_END_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x0121,
  },
  name: "Continuation End Meterset",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PROCEDURE_STEP_STATE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1000,
  },
  name: "Procedure Step State",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PROCEDURE_STEP_PROGRESS_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1002,
  },
  name: "Procedure Step Progress Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PROCEDURE_STEP_PROGRESS: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1004,
  },
  name: "Procedure Step Progress",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PROCEDURE_STEP_PROGRESS_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1006,
  },
  name: "Procedure Step Progress Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const PROCEDURE_STEP_PROGRESS_PARAMETERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1007,
  },
  name: "Procedure Step Progress Parameters Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PROCEDURE_STEP_COMMUNICATIONS_URI_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1008,
  },
  name: "Procedure Step Communications URI Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTACT_URI: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x100A,
  },
  name: "Contact URI",
  vrs: &[ValueRepresentation::UniversalResourceIdentifier],
  multiplicity: VM_1,
};

pub const CONTACT_DISPLAY_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x100C,
  },
  name: "Contact Display Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x100E,
  },
  name: "Procedure Step Discontinuation Reason Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BEAM_TASK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1020,
  },
  name: "Beam Task Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BEAM_TASK_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1022,
  },
  name: "Beam Task Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BEAM_ORDER_INDEX_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1024,
  },
  name: "Beam Order Index (Trial)",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const AUTOSEQUENCE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1025,
  },
  name: "Autosequence Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_VERTICAL_ADJUSTED_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1026,
  },
  name: "Table Top Vertical Adjusted Position",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TABLE_TOP_LONGITUDINAL_ADJUSTED_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1027,
  },
  name: "Table Top Longitudinal Adjusted Position",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TABLE_TOP_LATERAL_ADJUSTED_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1028,
  },
  name: "Table Top Lateral Adjusted Position",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_ADJUSTED_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x102A,
  },
  name: "Patient Support Adjusted Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TABLE_TOP_ECCENTRIC_ADJUSTED_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x102B,
  },
  name: "Table Top Eccentric Adjusted Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TABLE_TOP_PITCH_ADJUSTED_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x102C,
  },
  name: "Table Top Pitch Adjusted Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TABLE_TOP_ROLL_ADJUSTED_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x102D,
  },
  name: "Table Top Roll Adjusted Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DELIVERY_VERIFICATION_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1030,
  },
  name: "Delivery Verification Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const VERIFICATION_IMAGE_TIMING: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1032,
  },
  name: "Verification Image Timing",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DOUBLE_EXPOSURE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1034,
  },
  name: "Double Exposure Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DOUBLE_EXPOSURE_ORDERING: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1036,
  },
  name: "Double Exposure Ordering",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DOUBLE_EXPOSURE_METERSET_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1038,
  },
  name: "Double Exposure Meterset (Trial)",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DOUBLE_EXPOSURE_FIELD_DELTA_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x103A,
  },
  name: "Double Exposure Field Delta (Trial)",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_4,
};

pub const RELATED_REFERENCE_RT_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1040,
  },
  name: "Related Reference RT Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GENERAL_MACHINE_VERIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1042,
  },
  name: "General Machine Verification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONVENTIONAL_MACHINE_VERIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1044,
  },
  name: "Conventional Machine Verification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ION_MACHINE_VERIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1046,
  },
  name: "Ion Machine Verification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FAILED_ATTRIBUTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1048,
  },
  name: "Failed Attributes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OVERRIDDEN_ATTRIBUTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x104A,
  },
  name: "Overridden Attributes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONVENTIONAL_CONTROL_POINT_VERIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x104C,
  },
  name: "Conventional Control Point Verification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ION_CONTROL_POINT_VERIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x104E,
  },
  name: "Ion Control Point Verification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ATTRIBUTE_OCCURRENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1050,
  },
  name: "Attribute Occurrence Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ATTRIBUTE_OCCURRENCE_POINTER: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1052,
  },
  name: "Attribute Occurrence Pointer",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1,
};

pub const ATTRIBUTE_ITEM_SELECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1054,
  },
  name: "Attribute Item Selector",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const ATTRIBUTE_OCCURRENCE_PRIVATE_CREATOR: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1056,
  },
  name: "Attribute Occurrence Private Creator",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SELECTOR_SEQUENCE_POINTER_ITEMS: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1057,
  },
  name: "Selector Sequence Pointer Items",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const SCHEDULED_PROCEDURE_STEP_PRIORITY: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1200,
  },
  name: "Scheduled Procedure Step Priority",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const WORKLIST_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1202,
  },
  name: "Worklist Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PROCEDURE_STEP_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1204,
  },
  name: "Procedure Step Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SCHEDULED_PROCESSING_PARAMETERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1210,
  },
  name: "Scheduled Processing Parameters Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PERFORMED_PROCESSING_PARAMETERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1212,
  },
  name: "Performed Processing Parameters Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const UNIFIED_PROCEDURE_STEP_PERFORMED_PROCEDURE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1216,
  },
  name: "Unified Procedure Step Performed Procedure Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RELATED_PROCEDURE_STEP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1220,
  },
  name: "Related Procedure Step Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PROCEDURE_STEP_RELATIONSHIP_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1222,
  },
  name: "Procedure Step Relationship Type",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REPLACED_PROCEDURE_STEP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1224,
  },
  name: "Replaced Procedure Step Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DELETION_LOCK: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1230,
  },
  name: "Deletion Lock",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const RECEIVING_AE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1234,
  },
  name: "Receiving AE",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1,
};

pub const REQUESTING_AE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1236,
  },
  name: "Requesting AE",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1,
};

pub const REASON_FOR_CANCELLATION: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1238,
  },
  name: "Reason for Cancellation",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const SCP_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1242,
  },
  name: "SCP Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SUBSCRIPTION_LIST_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1244,
  },
  name: "Subscription List Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const UNIFIED_PROCEDURE_STEP_LIST_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1246,
  },
  name: "Unified Procedure Step List Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BEAM_ORDER_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1324,
  },
  name: "Beam Order Index",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const DOUBLE_EXPOSURE_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1338,
  },
  name: "Double Exposure Meterset",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DOUBLE_EXPOSURE_FIELD_DELTA: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x133A,
  },
  name: "Double Exposure Field Delta",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_4,
};

pub const BRACHY_TASK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1401,
  },
  name: "Brachy Task Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTINUATION_START_TOTAL_REFERENCE_AIR_KERMA: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1402,
  },
  name: "Continuation Start Total Reference Air Kerma",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONTINUATION_END_TOTAL_REFERENCE_AIR_KERMA: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1403,
  },
  name: "Continuation End Total Reference Air Kerma",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONTINUATION_PULSE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1404,
  },
  name: "Continuation Pulse Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CHANNEL_DELIVERY_ORDER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1405,
  },
  name: "Channel Delivery Order Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_CHANNEL_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1406,
  },
  name: "Referenced Channel Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const START_CUMULATIVE_TIME_WEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1407,
  },
  name: "Start Cumulative Time Weight",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const END_CUMULATIVE_TIME_WEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1408,
  },
  name: "End Cumulative Time Weight",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const OMITTED_CHANNEL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x1409,
  },
  name: "Omitted Channel Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REASON_FOR_CHANNEL_OMISSION: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x140A,
  },
  name: "Reason for Channel Omission",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REASON_FOR_CHANNEL_OMISSION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x140B,
  },
  name: "Reason for Channel Omission Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CHANNEL_DELIVERY_ORDER_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x140C,
  },
  name: "Channel Delivery Order Index",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CHANNEL_DELIVERY_CONTINUATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x140D,
  },
  name: "Channel Delivery Continuation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OMITTED_APPLICATION_SETUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0074,
    element: 0x140E,
  },
  name: "Omitted Application Setup Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMPLANT_ASSEMBLY_TEMPLATE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0001,
  },
  name: "Implant Assembly Template Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const IMPLANT_ASSEMBLY_TEMPLATE_ISSUER: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0003,
  },
  name: "Implant Assembly Template Issuer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const IMPLANT_ASSEMBLY_TEMPLATE_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0006,
  },
  name: "Implant Assembly Template Version",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REPLACED_IMPLANT_ASSEMBLY_TEMPLATE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0008,
  },
  name: "Replaced Implant Assembly Template Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMPLANT_ASSEMBLY_TEMPLATE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x000A,
  },
  name: "Implant Assembly Template Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ORIGINAL_IMPLANT_ASSEMBLY_TEMPLATE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x000C,
  },
  name: "Original Implant Assembly Template Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DERIVATION_IMPLANT_ASSEMBLY_TEMPLATE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x000E,
  },
  name: "Derivation Implant Assembly Template Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMPLANT_ASSEMBLY_TEMPLATE_TARGET_ANATOMY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0010,
  },
  name: "Implant Assembly Template Target Anatomy Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PROCEDURE_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0020,
  },
  name: "Procedure Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SURGICAL_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0030,
  },
  name: "Surgical Technique",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const COMPONENT_TYPES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0032,
  },
  name: "Component Types Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMPONENT_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0034,
  },
  name: "Component Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EXCLUSIVE_COMPONENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0036,
  },
  name: "Exclusive Component Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MANDATORY_COMPONENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0038,
  },
  name: "Mandatory Component Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COMPONENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0040,
  },
  name: "Component Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMPONENT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0055,
  },
  name: "Component ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COMPONENT_ASSEMBLY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0060,
  },
  name: "Component Assembly Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMPONENT_1_REFERENCED_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0070,
  },
  name: "Component 1 Referenced ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COMPONENT_1_REFERENCED_MATING_FEATURE_SET_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0080,
  },
  name: "Component 1 Referenced Mating Feature Set ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COMPONENT_1_REFERENCED_MATING_FEATURE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x0090,
  },
  name: "Component 1 Referenced Mating Feature ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COMPONENT_2_REFERENCED_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x00A0,
  },
  name: "Component 2 Referenced ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COMPONENT_2_REFERENCED_MATING_FEATURE_SET_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x00B0,
  },
  name: "Component 2 Referenced Mating Feature Set ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COMPONENT_2_REFERENCED_MATING_FEATURE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0076,
    element: 0x00C0,
  },
  name: "Component 2 Referenced Mating Feature ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMPLANT_TEMPLATE_GROUP_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x0001,
  },
  name: "Implant Template Group Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const IMPLANT_TEMPLATE_GROUP_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x0010,
  },
  name: "Implant Template Group Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const IMPLANT_TEMPLATE_GROUP_ISSUER: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x0020,
  },
  name: "Implant Template Group Issuer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const IMPLANT_TEMPLATE_GROUP_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x0024,
  },
  name: "Implant Template Group Version",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REPLACED_IMPLANT_TEMPLATE_GROUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x0026,
  },
  name: "Replaced Implant Template Group Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMPLANT_TEMPLATE_GROUP_TARGET_ANATOMY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x0028,
  },
  name: "Implant Template Group Target Anatomy Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMPLANT_TEMPLATE_GROUP_MEMBERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x002A,
  },
  name: "Implant Template Group Members Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMPLANT_TEMPLATE_GROUP_MEMBER_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x002E,
  },
  name: "Implant Template Group Member ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const THREE_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x0050,
  },
  name: "3D Implant Template Group Member Matching Point",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const THREE_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_AXES: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x0060,
  },
  name: "3D Implant Template Group Member Matching Axes",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: ValueMultiplicity {
    min: 9,
    max: Some(9),
  },
};

pub const IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_2D_COORDINATES_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0078,
      element: 0x0070,
    },
    name: "Implant Template Group Member Matching 2D Coordinates Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const TWO_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x0090,
  },
  name: "2D Implant Template Group Member Matching Point",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2,
};

pub const TWO_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_AXES: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x00A0,
  },
  name: "2D Implant Template Group Member Matching Axes",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_4,
};

pub const IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x00B0,
  },
  name: "Implant Template Group Variation Dimension Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x00B2,
  },
  name: "Implant Template Group Variation Dimension Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_RANK_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x0078,
      element: 0x00B4,
    },
    name: "Implant Template Group Variation Dimension Rank Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const REFERENCED_IMPLANT_TEMPLATE_GROUP_MEMBER_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x00B6,
  },
  name: "Referenced Implant Template Group Member ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_RANK: Item = Item {
  tag: DataElementTag {
    group: 0x0078,
    element: 0x00B8,
  },
  name: "Implant Template Group Variation Dimension Rank",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SURFACE_SCAN_ACQUISITION_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0001,
  },
  name: "Surface Scan Acquisition Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SURFACE_SCAN_MODE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0002,
  },
  name: "Surface Scan Mode Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REGISTRATION_METHOD_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0003,
  },
  name: "Registration Method Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SHOT_DURATION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0004,
  },
  name: "Shot Duration Time",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const SHOT_OFFSET_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0005,
  },
  name: "Shot Offset Time",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const SURFACE_POINT_PRESENTATION_VALUE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0006,
  },
  name: "Surface Point Presentation Value Data",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const SURFACE_POINT_COLOR_CIE_LAB_VALUE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0007,
  },
  name: "Surface Point Color CIELab Value Data",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3_TO_N,
};

pub const UV_MAPPING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0008,
  },
  name: "UV Mapping Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TEXTURE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0009,
  },
  name: "Texture Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const U_VALUE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0010,
  },
  name: "U Value Data",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const V_VALUE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0011,
  },
  name: "V Value Data",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const REFERENCED_TEXTURE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0012,
  },
  name: "Referenced Texture Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_SURFACE_DATA_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0080,
    element: 0x0013,
  },
  name: "Referenced Surface Data Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ASSESSMENT_SUMMARY: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0001,
  },
  name: "Assessment Summary",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ASSESSMENT_SUMMARY_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0003,
  },
  name: "Assessment Summary Description",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const ASSESSED_SOP_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0004,
  },
  name: "Assessed SOP Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_COMPARISON_SOP_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0005,
  },
  name: "Referenced Comparison SOP Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_ASSESSMENT_OBSERVATIONS: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0006,
  },
  name: "Number of Assessment Observations",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const ASSESSMENT_OBSERVATIONS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0007,
  },
  name: "Assessment Observations Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OBSERVATION_SIGNIFICANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0008,
  },
  name: "Observation Significance",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OBSERVATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x000A,
  },
  name: "Observation Description",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const STRUCTURED_CONSTRAINT_OBSERVATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x000C,
  },
  name: "Structured Constraint Observation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ASSESSED_ATTRIBUTE_VALUE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0010,
  },
  name: "Assessed Attribute Value Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ASSESSMENT_SET_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0016,
  },
  name: "Assessment Set ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ASSESSMENT_REQUESTER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0017,
  },
  name: "Assessment Requester Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SELECTOR_ATTRIBUTE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0018,
  },
  name: "Selector Attribute Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SELECTOR_ATTRIBUTE_KEYWORD: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0019,
  },
  name: "Selector Attribute Keyword",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ASSESSMENT_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0021,
  },
  name: "Assessment Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OBSERVATION_BASIS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0022,
  },
  name: "Observation Basis Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ASSESSMENT_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0023,
  },
  name: "Assessment Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CONSTRAINT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0032,
  },
  name: "Constraint Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SPECIFICATION_SELECTION_GUIDANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0033,
  },
  name: "Specification Selection Guidance",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const CONSTRAINT_VALUE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0034,
  },
  name: "Constraint Value Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECOMMENDED_DEFAULT_VALUE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0035,
  },
  name: "Recommended Default Value Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONSTRAINT_VIOLATION_SIGNIFICANCE: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0036,
  },
  name: "Constraint Violation Significance",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONSTRAINT_VIOLATION_CONDITION: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0037,
  },
  name: "Constraint Violation Condition",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const MODIFIABLE_CONSTRAINT_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x0082,
    element: 0x0038,
  },
  name: "Modifiable Constraint Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const STORAGE_MEDIA_FILE_SET_ID: Item = Item {
  tag: DataElementTag {
    group: 0x0088,
    element: 0x0130,
  },
  name: "Storage Media File-set ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const STORAGE_MEDIA_FILE_SET_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0088,
    element: 0x0140,
  },
  name: "Storage Media File-set UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const ICON_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0088,
    element: 0x0200,
  },
  name: "Icon Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TOPIC_TITLE: Item = Item {
  tag: DataElementTag {
    group: 0x0088,
    element: 0x0904,
  },
  name: "Topic Title",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TOPIC_SUBJECT: Item = Item {
  tag: DataElementTag {
    group: 0x0088,
    element: 0x0906,
  },
  name: "Topic Subject",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const TOPIC_AUTHOR: Item = Item {
  tag: DataElementTag {
    group: 0x0088,
    element: 0x0910,
  },
  name: "Topic Author",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TOPIC_KEYWORDS: Item = Item {
  tag: DataElementTag {
    group: 0x0088,
    element: 0x0912,
  },
  name: "Topic Keywords",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: ValueMultiplicity {
    min: 1,
    max: Some(32),
  },
};

pub const SOP_INSTANCE_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0100,
    element: 0x0410,
  },
  name: "SOP Instance Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SOP_AUTHORIZATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0100,
    element: 0x0420,
  },
  name: "SOP Authorization DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const SOP_AUTHORIZATION_COMMENT: Item = Item {
  tag: DataElementTag {
    group: 0x0100,
    element: 0x0424,
  },
  name: "SOP Authorization Comment",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const AUTHORIZATION_EQUIPMENT_CERTIFICATION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0100,
    element: 0x0426,
  },
  name: "Authorization Equipment Certification Number",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const MACID_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0005,
  },
  name: "MAC ID Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const MAC_CALCULATION_TRANSFER_SYNTAX_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0010,
  },
  name: "MAC Calculation Transfer Syntax UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const MAC_ALGORITHM: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0015,
  },
  name: "MAC Algorithm",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DATA_ELEMENTS_SIGNED: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0020,
  },
  name: "Data Elements Signed",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const DIGITAL_SIGNATURE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0100,
  },
  name: "Digital Signature UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const DIGITAL_SIGNATURE_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0105,
  },
  name: "Digital Signature DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const CERTIFICATE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0110,
  },
  name: "Certificate Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CERTIFICATE_OF_SIGNER: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0115,
  },
  name: "Certificate of Signer",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const SIGNATURE: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0120,
  },
  name: "Signature",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const CERTIFIED_TIMESTAMP_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0305,
  },
  name: "Certified Timestamp Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CERTIFIED_TIMESTAMP: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0310,
  },
  name: "Certified Timestamp",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const DIGITAL_SIGNATURE_PURPOSE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0401,
  },
  name: "Digital Signature Purpose Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_DIGITAL_SIGNATURE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0402,
  },
  name: "Referenced Digital Signature Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_SOP_INSTANCE_MAC_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0403,
  },
  name: "Referenced SOP Instance MAC Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MAC: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0404,
  },
  name: "MAC",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const ENCRYPTED_ATTRIBUTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0500,
  },
  name: "Encrypted Attributes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ENCRYPTED_CONTENT_TRANSFER_SYNTAX_UID: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0510,
  },
  name: "Encrypted Content Transfer Syntax UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const ENCRYPTED_CONTENT: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0520,
  },
  name: "Encrypted Content",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const MODIFIED_ATTRIBUTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0550,
  },
  name: "Modified Attributes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NONCONFORMING_MODIFIED_ATTRIBUTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0551,
  },
  name: "Nonconforming Modified Attributes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NONCONFORMING_DATA_ELEMENT_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0552,
  },
  name: "Nonconforming Data Element Value",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const ORIGINAL_ATTRIBUTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0561,
  },
  name: "Original Attributes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ATTRIBUTE_MODIFICATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0562,
  },
  name: "Attribute Modification DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const MODIFYING_SYSTEM: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0563,
  },
  name: "Modifying System",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SOURCE_OF_PREVIOUS_VALUES: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0564,
  },
  name: "Source of Previous Values",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REASON_FOR_THE_ATTRIBUTE_MODIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0565,
  },
  name: "Reason for the Attribute Modification",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INSTANCE_ORIGIN_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x0400,
    element: 0x0600,
  },
  name: "Instance Origin Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ESCAPE_TRIPLET: Item = Item {
  tag: DataElementTag {
    group: 0x1000,
    element: 0x0000,
  },
  name: "Escape Triplet",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const RUN_LENGTH_TRIPLET: Item = Item {
  tag: DataElementTag {
    group: 0x1000,
    element: 0x0001,
  },
  name: "Run Length Triplet",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const HUFFMAN_TABLE_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x1000,
    element: 0x0002,
  },
  name: "Huffman Table Size",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const HUFFMAN_TABLE_TRIPLET: Item = Item {
  tag: DataElementTag {
    group: 0x1000,
    element: 0x0003,
  },
  name: "Huffman Table Triplet",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const SHIFT_TABLE_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x1000,
    element: 0x0004,
  },
  name: "Shift Table Size",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SHIFT_TABLE_TRIPLET: Item = Item {
  tag: DataElementTag {
    group: 0x1000,
    element: 0x0005,
  },
  name: "Shift Table Triplet",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_3,
};

pub const ZONAL_MAP: Item = Item {
  tag: DataElementTag {
    group: 0x1010,
    element: 0x0000,
  },
  name: "Zonal Map",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_COPIES: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0010,
  },
  name: "Number of Copies",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PRINTER_CONFIGURATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x001E,
  },
  name: "Printer Configuration Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRINT_PRIORITY: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0020,
  },
  name: "Print Priority",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MEDIUM_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0030,
  },
  name: "Medium Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FILM_DESTINATION: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0040,
  },
  name: "Film Destination",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FILM_SESSION_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0050,
  },
  name: "Film Session Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const MEMORY_ALLOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0060,
  },
  name: "Memory Allocation",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const MAXIMUM_MEMORY_ALLOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0061,
  },
  name: "Maximum Memory Allocation",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COLOR_IMAGE_PRINTING_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0062,
  },
  name: "Color Image Printing Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COLLATION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0063,
  },
  name: "Collation Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ANNOTATION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0065,
  },
  name: "Annotation Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_OVERLAY_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0067,
  },
  name: "Image Overlay Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRESENTATION_LUT_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0069,
  },
  name: "Presentation LUT Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_PRESENTATION_LUT_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x006A,
  },
  name: "Image Box Presentation LUT Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MEMORY_BIT_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x00A0,
  },
  name: "Memory Bit Depth",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PRINTING_BIT_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x00A1,
  },
  name: "Printing Bit Depth",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const MEDIA_INSTALLED_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x00A2,
  },
  name: "Media Installed Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OTHER_MEDIA_AVAILABLE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x00A4,
  },
  name: "Other Media Available Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SUPPORTED_IMAGE_DISPLAY_FORMATS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x00A8,
  },
  name: "Supported Image Display Formats Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_FILM_BOX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0500,
  },
  name: "Referenced Film Box Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_STORED_PRINT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2000,
    element: 0x0510,
  },
  name: "Referenced Stored Print Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_DISPLAY_FORMAT: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0010,
  },
  name: "Image Display Format",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const ANNOTATION_DISPLAY_FORMAT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0030,
  },
  name: "Annotation Display Format ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FILM_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0040,
  },
  name: "Film Orientation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FILM_SIZE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0050,
  },
  name: "Film Size ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRINTER_RESOLUTION_ID: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0052,
  },
  name: "Printer Resolution ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DEFAULT_PRINTER_RESOLUTION_ID: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0054,
  },
  name: "Default Printer Resolution ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MAGNIFICATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0060,
  },
  name: "Magnification Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SMOOTHING_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0080,
  },
  name: "Smoothing Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DEFAULT_MAGNIFICATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x00A6,
  },
  name: "Default Magnification Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OTHER_MAGNIFICATION_TYPES_AVAILABLE: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x00A7,
  },
  name: "Other Magnification Types Available",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const DEFAULT_SMOOTHING_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x00A8,
  },
  name: "Default Smoothing Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OTHER_SMOOTHING_TYPES_AVAILABLE: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x00A9,
  },
  name: "Other Smoothing Types Available",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const BORDER_DENSITY: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0100,
  },
  name: "Border Density",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EMPTY_IMAGE_DENSITY: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0110,
  },
  name: "Empty Image Density",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MIN_DENSITY: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0120,
  },
  name: "Min Density",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const MAX_DENSITY: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0130,
  },
  name: "Max Density",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const TRIM: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0140,
  },
  name: "Trim",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONFIGURATION_INFORMATION: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0150,
  },
  name: "Configuration Information",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const CONFIGURATION_INFORMATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0152,
  },
  name: "Configuration Information Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const MAXIMUM_COLLATED_FILMS: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0154,
  },
  name: "Maximum Collated Films",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ILLUMINATION: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x015E,
  },
  name: "Illumination",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFLECTED_AMBIENT_LIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0160,
  },
  name: "Reflected Ambient Light",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PRINTER_PIXEL_SPACING: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0376,
  },
  name: "Printer Pixel Spacing",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const REFERENCED_FILM_SESSION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0500,
  },
  name: "Referenced Film Session Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_IMAGE_BOX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0510,
  },
  name: "Referenced Image Box Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_BASIC_ANNOTATION_BOX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2010,
    element: 0x0520,
  },
  name: "Referenced Basic Annotation Box Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x2020,
    element: 0x0010,
  },
  name: "Image Box Position",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const POLARITY: Item = Item {
  tag: DataElementTag {
    group: 0x2020,
    element: 0x0020,
  },
  name: "Polarity",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REQUESTED_IMAGE_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x2020,
    element: 0x0030,
  },
  name: "Requested Image Size",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const REQUESTED_DECIMATE_CROP_BEHAVIOR: Item = Item {
  tag: DataElementTag {
    group: 0x2020,
    element: 0x0040,
  },
  name: "Requested Decimate/Crop Behavior",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REQUESTED_RESOLUTION_ID: Item = Item {
  tag: DataElementTag {
    group: 0x2020,
    element: 0x0050,
  },
  name: "Requested Resolution ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REQUESTED_IMAGE_SIZE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x2020,
    element: 0x00A0,
  },
  name: "Requested Image Size Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DECIMATE_CROP_RESULT: Item = Item {
  tag: DataElementTag {
    group: 0x2020,
    element: 0x00A2,
  },
  name: "Decimate/Crop Result",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BASIC_GRAYSCALE_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2020,
    element: 0x0110,
  },
  name: "Basic Grayscale Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BASIC_COLOR_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2020,
    element: 0x0111,
  },
  name: "Basic Color Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_IMAGE_OVERLAY_BOX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2020,
    element: 0x0130,
  },
  name: "Referenced Image Overlay Box Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_VOILUT_BOX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2020,
    element: 0x0140,
  },
  name: "Referenced VOI LUT Box Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANNOTATION_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x2030,
    element: 0x0010,
  },
  name: "Annotation Position",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const TEXT_STRING: Item = Item {
  tag: DataElementTag {
    group: 0x2030,
    element: 0x0020,
  },
  name: "Text String",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REFERENCED_OVERLAY_PLANE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2040,
    element: 0x0010,
  },
  name: "Referenced Overlay Plane Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_OVERLAY_PLANE_GROUPS: Item = Item {
  tag: DataElementTag {
    group: 0x2040,
    element: 0x0011,
  },
  name: "Referenced Overlay Plane Groups",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: ValueMultiplicity {
    min: 1,
    max: Some(99),
  },
};

pub const OVERLAY_PIXEL_DATA_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2040,
    element: 0x0020,
  },
  name: "Overlay Pixel Data Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OVERLAY_MAGNIFICATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x2040,
    element: 0x0060,
  },
  name: "Overlay Magnification Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OVERLAY_SMOOTHING_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x2040,
    element: 0x0070,
  },
  name: "Overlay Smoothing Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OVERLAY_OR_IMAGE_MAGNIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x2040,
    element: 0x0072,
  },
  name: "Overlay or Image Magnification",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MAGNIFY_TO_NUMBER_OF_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x2040,
    element: 0x0074,
  },
  name: "Magnify to Number of Columns",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_FOREGROUND_DENSITY: Item = Item {
  tag: DataElementTag {
    group: 0x2040,
    element: 0x0080,
  },
  name: "Overlay Foreground Density",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OVERLAY_BACKGROUND_DENSITY: Item = Item {
  tag: DataElementTag {
    group: 0x2040,
    element: 0x0082,
  },
  name: "Overlay Background Density",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OVERLAY_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x2040,
    element: 0x0090,
  },
  name: "Overlay Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const THRESHOLD_DENSITY: Item = Item {
  tag: DataElementTag {
    group: 0x2040,
    element: 0x0100,
  },
  name: "Threshold Density",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFERENCED_IMAGE_BOX_SEQUENCE_RETIRED: Item = Item {
  tag: DataElementTag {
    group: 0x2040,
    element: 0x0500,
  },
  name: "Referenced Image Box Sequence (Retired)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRESENTATION_LUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2050,
    element: 0x0010,
  },
  name: "Presentation LUT Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRESENTATION_LUT_SHAPE: Item = Item {
  tag: DataElementTag {
    group: 0x2050,
    element: 0x0020,
  },
  name: "Presentation LUT Shape",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFERENCED_PRESENTATION_LUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2050,
    element: 0x0500,
  },
  name: "Referenced Presentation LUT Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRINT_JOB_ID: Item = Item {
  tag: DataElementTag {
    group: 0x2100,
    element: 0x0010,
  },
  name: "Print Job ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const EXECUTION_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x2100,
    element: 0x0020,
  },
  name: "Execution Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EXECUTION_STATUS_INFO: Item = Item {
  tag: DataElementTag {
    group: 0x2100,
    element: 0x0030,
  },
  name: "Execution Status Info",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CREATION_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x2100,
    element: 0x0040,
  },
  name: "Creation Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const CREATION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x2100,
    element: 0x0050,
  },
  name: "Creation Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const ORIGINATOR: Item = Item {
  tag: DataElementTag {
    group: 0x2100,
    element: 0x0070,
  },
  name: "Originator",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1,
};

pub const DESTINATION_AE: Item = Item {
  tag: DataElementTag {
    group: 0x2100,
    element: 0x0140,
  },
  name: "Destination AE",
  vrs: &[ValueRepresentation::ApplicationEntity],
  multiplicity: VM_1,
};

pub const OWNER_ID: Item = Item {
  tag: DataElementTag {
    group: 0x2100,
    element: 0x0160,
  },
  name: "Owner ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FILMS: Item = Item {
  tag: DataElementTag {
    group: 0x2100,
    element: 0x0170,
  },
  name: "Number of Films",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_PRINT_JOB_SEQUENCE_PULL_STORED_PRINT: Item = Item {
  tag: DataElementTag {
    group: 0x2100,
    element: 0x0500,
  },
  name: "Referenced Print Job Sequence (Pull Stored Print)",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRINTER_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x2110,
    element: 0x0010,
  },
  name: "Printer Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRINTER_STATUS_INFO: Item = Item {
  tag: DataElementTag {
    group: 0x2110,
    element: 0x0020,
  },
  name: "Printer Status Info",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRINTER_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x2110,
    element: 0x0030,
  },
  name: "Printer Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PRINT_QUEUE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x2110,
    element: 0x0099,
  },
  name: "Print Queue ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const QUEUE_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x2120,
    element: 0x0010,
  },
  name: "Queue Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRINT_JOB_DESCRIPTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2120,
    element: 0x0050,
  },
  name: "Print Job Description Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_PRINT_JOB_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2120,
    element: 0x0070,
  },
  name: "Referenced Print Job Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRINT_MANAGEMENT_CAPABILITIES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2130,
    element: 0x0010,
  },
  name: "Print Management Capabilities Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRINTER_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2130,
    element: 0x0015,
  },
  name: "Printer Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FILM_BOX_CONTENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2130,
    element: 0x0030,
  },
  name: "Film Box Content Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_BOX_CONTENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2130,
    element: 0x0040,
  },
  name: "Image Box Content Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANNOTATION_CONTENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2130,
    element: 0x0050,
  },
  name: "Annotation Content Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_OVERLAY_BOX_CONTENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2130,
    element: 0x0060,
  },
  name: "Image Overlay Box Content Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRESENTATION_LUT_CONTENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2130,
    element: 0x0080,
  },
  name: "Presentation LUT Content Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PROPOSED_STUDY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2130,
    element: 0x00A0,
  },
  name: "Proposed Study Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ORIGINAL_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2130,
    element: 0x00C0,
  },
  name: "Original Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LABEL_USING_INFORMATION_EXTRACTED_FROM_INSTANCES: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x0001,
  },
  name: "Label Using Information Extracted From Instances",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const LABEL_TEXT: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x0002,
  },
  name: "Label Text",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const LABEL_STYLE_SELECTION: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x0003,
  },
  name: "Label Style Selection",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MEDIA_DISPOSITION: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x0004,
  },
  name: "Media Disposition",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const BARCODE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x0005,
  },
  name: "Barcode Value",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const BARCODE_SYMBOLOGY: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x0006,
  },
  name: "Barcode Symbology",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ALLOW_MEDIA_SPLITTING: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x0007,
  },
  name: "Allow Media Splitting",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INCLUDE_NON_DICOM_OBJECTS: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x0008,
  },
  name: "Include Non-DICOM Objects",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INCLUDE_DISPLAY_APPLICATION: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x0009,
  },
  name: "Include Display Application",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRESERVE_COMPOSITE_INSTANCES_AFTER_MEDIA_CREATION: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x000A,
  },
  name: "Preserve Composite Instances After Media Creation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TOTAL_NUMBER_OF_PIECES_OF_MEDIA_CREATED: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x000B,
  },
  name: "Total Number of Pieces of Media Created",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REQUESTED_MEDIA_APPLICATION_PROFILE: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x000C,
  },
  name: "Requested Media Application Profile",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REFERENCED_STORAGE_MEDIA_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x000D,
  },
  name: "Referenced Storage Media Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FAILURE_ATTRIBUTES: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x000E,
  },
  name: "Failure Attributes",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const ALLOW_LOSSY_COMPRESSION: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x000F,
  },
  name: "Allow Lossy Compression",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REQUEST_PRIORITY: Item = Item {
  tag: DataElementTag {
    group: 0x2200,
    element: 0x0020,
  },
  name: "Request Priority",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RT_IMAGE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0002,
  },
  name: "RT Image Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const RT_IMAGE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0003,
  },
  name: "RT Image Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const RT_IMAGE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0004,
  },
  name: "RT Image Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const REPORTED_VALUES_ORIGIN: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x000A,
  },
  name: "Reported Values Origin",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RT_IMAGE_PLANE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x000C,
  },
  name: "RT Image Plane",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const X_RAY_IMAGE_RECEPTOR_TRANSLATION: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x000D,
  },
  name: "X-Ray Image Receptor Translation",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const X_RAY_IMAGE_RECEPTOR_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x000E,
  },
  name: "X-Ray Image Receptor Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RT_IMAGE_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0010,
  },
  name: "RT Image Orientation",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_6,
};

pub const IMAGE_PLANE_PIXEL_SPACING: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0011,
  },
  name: "Image Plane Pixel Spacing",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const RT_IMAGE_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0012,
  },
  name: "RT Image Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const RADIATION_MACHINE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0020,
  },
  name: "Radiation Machine Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const RADIATION_MACHINE_SAD: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0022,
  },
  name: "Radiation Machine SAD",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RADIATION_MACHINE_SSD: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0024,
  },
  name: "Radiation Machine SSD",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RT_IMAGE_SID: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0026,
  },
  name: "RT Image SID",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOURCE_TO_REFERENCE_OBJECT_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0028,
  },
  name: "Source to Reference Object Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FRACTION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0029,
  },
  name: "Fraction Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const EXPOSURE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0030,
  },
  name: "Exposure Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const METERSET_EXPOSURE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0032,
  },
  name: "Meterset Exposure",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DIAPHRAGM_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0034,
  },
  name: "Diaphragm Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_4,
};

pub const FLUENCE_MAP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0040,
  },
  name: "Fluence Map Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FLUENCE_DATA_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0041,
  },
  name: "Fluence Data Source",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FLUENCE_DATA_SCALE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0042,
  },
  name: "Fluence Data Scale",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PRIMARY_FLUENCE_MODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0050,
  },
  name: "Primary Fluence Mode Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FLUENCE_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0051,
  },
  name: "Fluence Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FLUENCE_MODE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0052,
  },
  name: "Fluence Mode ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SELECTED_FRAME_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0100,
  },
  name: "Selected Frame Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SELECTED_FRAME_FUNCTIONAL_GROUPS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0101,
  },
  name: "Selected Frame Functional Groups Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_IMAGE_FRAME_GENERAL_CONTENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0102,
  },
  name: "RT Image Frame General Content Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_IMAGE_FRAME_CONTEXT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0103,
  },
  name: "RT Image Frame Context Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_IMAGE_SCOPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0104,
  },
  name: "RT Image Scope Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BEAM_MODIFIER_COORDINATES_PRESENCE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0105,
  },
  name: "Beam Modifier Coordinates Presence Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const START_CUMULATIVE_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0106,
  },
  name: "Start Cumulative Meterset",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const STOP_CUMULATIVE_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0107,
  },
  name: "Stop Cumulative Meterset",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RT_ACQUISITION_PATIENT_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0108,
  },
  name: "RT Acquisition Patient Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_IMAGE_FRAME_IMAGING_DEVICE_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0109,
  },
  name: "RT Image Frame Imaging Device Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_IMAGE_FRAMEK_V_RADIATION_ACQUISITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x010A,
  },
  name: "RT Image Frame kV Radiation Acquisition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_IMAGE_FRAME_MV_RADIATION_ACQUISITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x010B,
  },
  name: "RT Image Frame MV Radiation Acquisition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_IMAGE_FRAME_RADIATION_ACQUISITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x010C,
  },
  name: "RT Image Frame Radiation Acquisition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGING_SOURCE_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x010D,
  },
  name: "Imaging Source Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGE_RECEPTOR_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x010E,
  },
  name: "Image Receptor Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DEVICE_POSITION_TO_EQUIPMENT_MAPPING_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x010F,
  },
  name: "Device Position to Equipment Mapping Matrix",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: ValueMultiplicity {
    min: 16,
    max: Some(16),
  },
};

pub const DEVICE_POSITION_PARAMETER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0110,
  },
  name: "Device Position Parameter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGING_SOURCE_LOCATION_SPECIFICATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0111,
  },
  name: "Imaging Source Location Specification Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMAGING_DEVICE_LOCATION_MATRIX_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0112,
  },
  name: "Imaging Device Location Matrix Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGING_DEVICE_LOCATION_PARAMETER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0113,
  },
  name: "Imaging Device Location Parameter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGING_APERTURE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0114,
  },
  name: "Imaging Aperture Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGING_APERTURE_SPECIFICATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0115,
  },
  name: "Imaging Aperture Specification Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_ACQUISITION_DEVICES: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0116,
  },
  name: "Number of Acquisition Devices",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ACQUISITION_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0117,
  },
  name: "Acquisition Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUISITION_TASK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0118,
  },
  name: "Acquisition Task Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUISITION_TASK_WORKITEM_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0119,
  },
  name: "Acquisition Task Workitem Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUISITION_SUBTASK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x011A,
  },
  name: "Acquisition Subtask Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SUBTASK_WORKITEM_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x011B,
  },
  name: "Subtask Workitem Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUISITION_TASK_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x011C,
  },
  name: "Acquisition Task Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ACQUISITION_SUBTASK_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x011D,
  },
  name: "Acquisition Subtask Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFERENCED_BASELINE_PARAMETERS_RT_RADIATION_INSTANCE_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x3002,
      element: 0x011E,
    },
    name: "Referenced Baseline Parameters RT Radiation Instance Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const POSITION_ACQUISITION_TEMPLATE_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x011F,
  },
  name: "Position Acquisition Template Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const POSITION_ACQUISITION_TEMPLATE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0120,
  },
  name: "Position Acquisition Template ID",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const POSITION_ACQUISITION_TEMPLATE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0121,
  },
  name: "Position Acquisition Template Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const POSITION_ACQUISITION_TEMPLATE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0122,
  },
  name: "Position Acquisition Template Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const POSITION_ACQUISITION_TEMPLATE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0123,
  },
  name: "Position Acquisition Template Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const ACQUISITION_TASK_APPLICABILITY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0124,
  },
  name: "Acquisition Task Applicability Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PROJECTION_IMAGING_ACQUISITION_PARAMETER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0125,
  },
  name: "Projection Imaging Acquisition Parameter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CT_IMAGING_ACQUISITION_PARAMETER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0126,
  },
  name: "CT Imaging Acquisition Parameter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const KV_IMAGING_GENERATION_PARAMETERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0127,
  },
  name: "KV Imaging Generation Parameters Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MV_IMAGING_GENERATION_PARAMETERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0128,
  },
  name: "MV Imaging Generation Parameters Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ACQUISITION_SIGNAL_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0129,
  },
  name: "Acquisition Signal Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ACQUISITION_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x012A,
  },
  name: "Acquisition Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SCAN_START_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x012B,
  },
  name: "Scan Start Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCAN_STOP_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x012C,
  },
  name: "Scan Stop Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGING_SOURCE_TO_BEAM_MODIFIER_DEFINITION_PLANE_DISTANCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x3002,
      element: 0x012D,
    },
    name: "Imaging Source to Beam Modifier Definition Plane Distance",
    vrs: &[ValueRepresentation::FloatingPointDouble],
    multiplicity: VM_1,
  };

pub const SCAN_ARC_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x012E,
  },
  name: "Scan Arc Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DETECTOR_POSITIONING_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x012F,
  },
  name: "Detector Positioning Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ADDITIONAL_RT_ACCESSORY_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0130,
  },
  name: "Additional RT Accessory Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DEVICE_SPECIFIC_ACQUISITION_PARAMETER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0131,
  },
  name: "Device-Specific Acquisition Parameter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_POSITION_REFERENCE_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0132,
  },
  name: "Referenced Position Reference Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ENERGY_DERIVATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0133,
  },
  name: "Energy Derivation Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MAXIMUM_CUMULATIVE_METERSET_EXPOSURE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0134,
  },
  name: "Maximum Cumulative Meterset Exposure",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const ACQUISITION_INITIATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3002,
    element: 0x0135,
  },
  name: "Acquisition Initiation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DVH_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0001,
  },
  name: "DVH Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DOSE_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0002,
  },
  name: "Dose Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DOSE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0004,
  },
  name: "Dose Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SPATIAL_TRANSFORM_OF_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0005,
  },
  name: "Spatial Transform of Dose",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DOSE_COMMENT: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0006,
  },
  name: "Dose Comment",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const NORMALIZATION_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0008,
  },
  name: "Normalization Point",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const DOSE_SUMMATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x000A,
  },
  name: "Dose Summation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GRID_FRAME_OFFSET_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x000C,
  },
  name: "Grid Frame Offset Vector",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2_TO_N,
};

pub const DOSE_GRID_SCALING: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x000E,
  },
  name: "Dose Grid Scaling",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RT_DOSE_ROI_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0010,
  },
  name: "RT Dose ROI Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DOSE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0012,
  },
  name: "Dose Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TISSUE_HETEROGENEITY_CORRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0014,
  },
  name: "Tissue Heterogeneity Correction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: ValueMultiplicity {
    min: 1,
    max: Some(3),
  },
};

pub const DVH_NORMALIZATION_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0040,
  },
  name: "DVH Normalization Point",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const DVH_NORMALIZATION_DOSE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0042,
  },
  name: "DVH Normalization Dose Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DVH_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0050,
  },
  name: "DVH Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DVH_DOSE_SCALING: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0052,
  },
  name: "DVH Dose Scaling",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DVH_VOLUME_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0054,
  },
  name: "DVH Volume Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DVH_NUMBER_OF_BINS: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0056,
  },
  name: "DVH Number of Bins",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const DVH_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0058,
  },
  name: "DVH Data",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2_TO_N,
};

pub const DVH_REFERENCED_ROI_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0060,
  },
  name: "DVH Referenced ROI Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DVH_ROI_CONTRIBUTION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0062,
  },
  name: "DVH ROI Contribution Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DVH_MINIMUM_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0070,
  },
  name: "DVH Minimum Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DVH_MAXIMUM_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0072,
  },
  name: "DVH Maximum Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DVH_MEAN_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x3004,
    element: 0x0074,
  },
  name: "DVH Mean Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const STRUCTURE_SET_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0002,
  },
  name: "Structure Set Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const STRUCTURE_SET_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0004,
  },
  name: "Structure Set Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const STRUCTURE_SET_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0006,
  },
  name: "Structure Set Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const STRUCTURE_SET_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0008,
  },
  name: "Structure Set Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const STRUCTURE_SET_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0009,
  },
  name: "Structure Set Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const REFERENCED_FRAME_OF_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0010,
  },
  name: "Referenced Frame of Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_REFERENCED_STUDY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0012,
  },
  name: "RT Referenced Study Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_REFERENCED_SERIES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0014,
  },
  name: "RT Referenced Series Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTOUR_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0016,
  },
  name: "Contour Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PREDECESSOR_STRUCTURE_SET_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0018,
  },
  name: "Predecessor Structure Set Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STRUCTURE_SET_ROI_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0020,
  },
  name: "Structure Set ROI Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ROI_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0022,
  },
  name: "ROI Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_FRAME_OF_REFERENCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0024,
  },
  name: "Referenced Frame of Reference UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const ROI_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0026,
  },
  name: "ROI Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ROI_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0028,
  },
  name: "ROI Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const ROI_DISPLAY_COLOR: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x002A,
  },
  name: "ROI Display Color",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_3,
};

pub const ROI_VOLUME: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x002C,
  },
  name: "ROI Volume",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ROI_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x002D,
  },
  name: "ROI DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const ROI_OBSERVATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x002E,
  },
  name: "ROI Observation DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const RT_RELATED_ROI_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0030,
  },
  name: "RT Related ROI Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RTROI_RELATIONSHIP: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0033,
  },
  name: "RT ROI Relationship",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ROI_GENERATION_ALGORITHM: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0036,
  },
  name: "ROI Generation Algorithm",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ROI_DERIVATION_ALGORITHM_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0037,
  },
  name: "ROI Derivation Algorithm Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ROI_GENERATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0038,
  },
  name: "ROI Generation Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ROI_CONTOUR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0039,
  },
  name: "ROI Contour Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTOUR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0040,
  },
  name: "Contour Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTOUR_GEOMETRIC_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0042,
  },
  name: "Contour Geometric Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONTOUR_SLAB_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0044,
  },
  name: "Contour Slab Thickness",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONTOUR_OFFSET_VECTOR: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0045,
  },
  name: "Contour Offset Vector",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const NUMBER_OF_CONTOUR_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0046,
  },
  name: "Number of Contour Points",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CONTOUR_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0048,
  },
  name: "Contour Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ATTACHED_CONTOURS: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0049,
  },
  name: "Attached Contours",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const SOURCE_PIXEL_PLANES_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x004A,
  },
  name: "Source Pixel Planes Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_SERIES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x004B,
  },
  name: "Source Series Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_SERIES_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x004C,
  },
  name: "Source Series Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ROI_CREATOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x004D,
  },
  name: "ROI Creator Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ROI_INTERPRETER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x004E,
  },
  name: "ROI Interpreter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ROI_OBSERVATION_CONTEXT_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x004F,
  },
  name: "ROI Observation Context Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTOUR_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0050,
  },
  name: "Contour Data",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3_TO_N,
};

pub const RTROI_OBSERVATIONS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0080,
  },
  name: "RT ROI Observations Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OBSERVATION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0082,
  },
  name: "Observation Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_ROI_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0084,
  },
  name: "Referenced ROI Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ROI_OBSERVATION_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0085,
  },
  name: "ROI Observation Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const RTROI_IDENTIFICATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0086,
  },
  name: "RT ROI Identification Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ROI_OBSERVATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x0088,
  },
  name: "ROI Observation Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const RELATED_RTROI_OBSERVATIONS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00A0,
  },
  name: "Related RT ROI Observations Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RTROI_INTERPRETED_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00A4,
  },
  name: "RT ROI Interpreted Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ROI_INTERPRETER: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00A6,
  },
  name: "ROI Interpreter",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const ROI_PHYSICAL_PROPERTIES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00B0,
  },
  name: "ROI Physical Properties Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ROI_PHYSICAL_PROPERTY: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00B2,
  },
  name: "ROI Physical Property",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ROI_PHYSICAL_PROPERTY_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00B4,
  },
  name: "ROI Physical Property Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ROI_ELEMENTAL_COMPOSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00B6,
  },
  name: "ROI Elemental Composition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ROI_ELEMENTAL_COMPOSITION_ATOMIC_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00B7,
  },
  name: "ROI Elemental Composition Atomic Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ROI_ELEMENTAL_COMPOSITION_ATOMIC_MASS_FRACTION: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00B8,
  },
  name: "ROI Elemental Composition Atomic Mass Fraction",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ADDITIONAL_RTROI_IDENTIFICATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00B9,
  },
  name: "Additional RT ROI Identification Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FRAME_OF_REFERENCE_RELATIONSHIP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00C0,
  },
  name: "Frame of Reference Relationship Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RELATED_FRAME_OF_REFERENCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00C2,
  },
  name: "Related Frame of Reference UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const FRAME_OF_REFERENCE_TRANSFORMATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00C4,
  },
  name: "Frame of Reference Transformation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00C6,
  },
  name: "Frame of Reference Transformation Matrix",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: ValueMultiplicity {
    min: 16,
    max: Some(16),
  },
};

pub const FRAME_OF_REFERENCE_TRANSFORMATION_COMMENT: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00C8,
  },
  name: "Frame of Reference Transformation Comment",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_LOCATION_COORDINATES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00C9,
  },
  name: "Patient Location Coordinates Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_LOCATION_COORDINATES_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00CA,
  },
  name: "Patient Location Coordinates Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3006,
    element: 0x00CB,
  },
  name: "Patient Support Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MEASURED_DOSE_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0010,
  },
  name: "Measured Dose Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MEASURED_DOSE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0012,
  },
  name: "Measured Dose Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const MEASURED_DOSE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0014,
  },
  name: "Measured Dose Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MEASURED_DOSE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0016,
  },
  name: "Measured Dose Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TREATMENT_SESSION_BEAM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0020,
  },
  name: "Treatment Session Beam Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TREATMENT_SESSION_ION_BEAM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0021,
  },
  name: "Treatment Session Ion Beam Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CURRENT_FRACTION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0022,
  },
  name: "Current Fraction Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const TREATMENT_CONTROL_POINT_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0024,
  },
  name: "Treatment Control Point Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const TREATMENT_CONTROL_POINT_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0025,
  },
  name: "Treatment Control Point Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const TREATMENT_TERMINATION_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x002A,
  },
  name: "Treatment Termination Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TREATMENT_TERMINATION_CODE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x002B,
  },
  name: "Treatment Termination Code",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const TREATMENT_VERIFICATION_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x002C,
  },
  name: "Treatment Verification Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFERENCED_TREATMENT_RECORD_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0030,
  },
  name: "Referenced Treatment Record Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIFIED_PRIMARY_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0032,
  },
  name: "Specified Primary Meterset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SPECIFIED_SECONDARY_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0033,
  },
  name: "Specified Secondary Meterset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DELIVERED_PRIMARY_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0036,
  },
  name: "Delivered Primary Meterset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DELIVERED_SECONDARY_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0037,
  },
  name: "Delivered Secondary Meterset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SPECIFIED_TREATMENT_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x003A,
  },
  name: "Specified Treatment Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DELIVERED_TREATMENT_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x003B,
  },
  name: "Delivered Treatment Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONTROL_POINT_DELIVERY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0040,
  },
  name: "Control Point Delivery Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ION_CONTROL_POINT_DELIVERY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0041,
  },
  name: "Ion Control Point Delivery Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIFIED_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0042,
  },
  name: "Specified Meterset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DELIVERED_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0044,
  },
  name: "Delivered Meterset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const METERSET_RATE_SET: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0045,
  },
  name: "Meterset Rate Set",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const METERSET_RATE_DELIVERED: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0046,
  },
  name: "Meterset Rate Delivered",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SCAN_SPOT_METERSETS_DELIVERED: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0047,
  },
  name: "Scan Spot Metersets Delivered",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_N,
};

pub const DOSE_RATE_DELIVERED: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0048,
  },
  name: "Dose Rate Delivered",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TREATMENT_SUMMARY_CALCULATED_DOSE_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0050,
  },
  name: "Treatment Summary Calculated Dose Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CUMULATIVE_DOSE_TO_DOSE_REFERENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0052,
  },
  name: "Cumulative Dose to Dose Reference",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FIRST_TREATMENT_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0054,
  },
  name: "First Treatment Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const MOST_RECENT_TREATMENT_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0056,
  },
  name: "Most Recent Treatment Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FRACTIONS_DELIVERED: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x005A,
  },
  name: "Number of Fractions Delivered",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const OVERRIDE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0060,
  },
  name: "Override Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PARAMETER_SEQUENCE_POINTER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0061,
  },
  name: "Parameter Sequence Pointer",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1,
};

pub const OVERRIDE_PARAMETER_POINTER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0062,
  },
  name: "Override Parameter Pointer",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1,
};

pub const PARAMETER_ITEM_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0063,
  },
  name: "Parameter Item Index",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const MEASURED_DOSE_REFERENCE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0064,
  },
  name: "Measured Dose Reference Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PARAMETER_POINTER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0065,
  },
  name: "Parameter Pointer",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1,
};

pub const OVERRIDE_REASON: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0066,
  },
  name: "Override Reason",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const PARAMETER_VALUE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0067,
  },
  name: "Parameter Value Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CORRECTED_PARAMETER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0068,
  },
  name: "Corrected Parameter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CORRECTION_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x006A,
  },
  name: "Correction Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const CALCULATED_DOSE_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0070,
  },
  name: "Calculated Dose Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CALCULATED_DOSE_REFERENCE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0072,
  },
  name: "Calculated Dose Reference Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CALCULATED_DOSE_REFERENCE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0074,
  },
  name: "Calculated Dose Reference Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const CALCULATED_DOSE_REFERENCE_DOSE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0076,
  },
  name: "Calculated Dose Reference Dose Value",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const START_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0078,
  },
  name: "Start Meterset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const END_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x007A,
  },
  name: "End Meterset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const REFERENCED_MEASURED_DOSE_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0080,
  },
  name: "Referenced Measured Dose Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_MEASURED_DOSE_REFERENCE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0082,
  },
  name: "Referenced Measured Dose Reference Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_CALCULATED_DOSE_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0090,
  },
  name: "Referenced Calculated Dose Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_CALCULATED_DOSE_REFERENCE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0092,
  },
  name: "Referenced Calculated Dose Reference Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const BEAM_LIMITING_DEVICE_LEAF_PAIRS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00A0,
  },
  name: "Beam Limiting Device Leaf Pairs Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ENHANCED_RT_BEAM_LIMITING_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00A1,
  },
  name: "Enhanced RT Beam Limiting Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ENHANCED_RT_BEAM_LIMITING_OPENING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00A2,
  },
  name: "Enhanced RT Beam Limiting Opening Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ENHANCED_RT_BEAM_LIMITING_DEVICE_DEFINITION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00A3,
  },
  name: "Enhanced RT Beam Limiting Device Definition Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PARALLEL_RT_BEAM_DELIMITER_OPENING_EXTENTS: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00A4,
  },
  name: "Parallel RT Beam Delimiter Opening Extents",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2_TO_N,
};

pub const RECORDED_WEDGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00B0,
  },
  name: "Recorded Wedge Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECORDED_COMPENSATOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00C0,
  },
  name: "Recorded Compensator Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECORDED_BLOCK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00D0,
  },
  name: "Recorded Block Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECORDED_BLOCK_SLAB_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00D1,
  },
  name: "Recorded Block Slab Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TREATMENT_SUMMARY_MEASURED_DOSE_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00E0,
  },
  name: "Treatment Summary Measured Dose Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECORDED_SNOUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00F0,
  },
  name: "Recorded Snout Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECORDED_RANGE_SHIFTER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00F2,
  },
  name: "Recorded Range Shifter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECORDED_LATERAL_SPREADING_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00F4,
  },
  name: "Recorded Lateral Spreading Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECORDED_RANGE_MODULATOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x00F6,
  },
  name: "Recorded Range Modulator Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RECORDED_SOURCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0100,
  },
  name: "Recorded Source Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_SERIAL_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0105,
  },
  name: "Source Serial Number",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TREATMENT_SESSION_APPLICATION_SETUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0110,
  },
  name: "Treatment Session Application Setup Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const APPLICATION_SETUP_CHECK: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0116,
  },
  name: "Application Setup Check",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RECORDED_BRACHY_ACCESSORY_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0120,
  },
  name: "Recorded Brachy Accessory Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_BRACHY_ACCESSORY_DEVICE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0122,
  },
  name: "Referenced Brachy Accessory Device Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const RECORDED_CHANNEL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0130,
  },
  name: "Recorded Channel Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SPECIFIED_CHANNEL_TOTAL_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0132,
  },
  name: "Specified Channel Total Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DELIVERED_CHANNEL_TOTAL_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0134,
  },
  name: "Delivered Channel Total Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SPECIFIED_NUMBER_OF_PULSES: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0136,
  },
  name: "Specified Number of Pulses",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const DELIVERED_NUMBER_OF_PULSES: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0138,
  },
  name: "Delivered Number of Pulses",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SPECIFIED_PULSE_REPETITION_INTERVAL: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x013A,
  },
  name: "Specified Pulse Repetition Interval",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DELIVERED_PULSE_REPETITION_INTERVAL: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x013C,
  },
  name: "Delivered Pulse Repetition Interval",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RECORDED_SOURCE_APPLICATOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0140,
  },
  name: "Recorded Source Applicator Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_SOURCE_APPLICATOR_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0142,
  },
  name: "Referenced Source Applicator Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const RECORDED_CHANNEL_SHIELD_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0150,
  },
  name: "Recorded Channel Shield Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_CHANNEL_SHIELD_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0152,
  },
  name: "Referenced Channel Shield Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const BRACHY_CONTROL_POINT_DELIVERED_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0160,
  },
  name: "Brachy Control Point Delivered Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SAFE_POSITION_EXIT_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0162,
  },
  name: "Safe Position Exit Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const SAFE_POSITION_EXIT_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0164,
  },
  name: "Safe Position Exit Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const SAFE_POSITION_RETURN_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0166,
  },
  name: "Safe Position Return Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const SAFE_POSITION_RETURN_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0168,
  },
  name: "Safe Position Return Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const PULSE_SPECIFIC_BRACHY_CONTROL_POINT_DELIVERED_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0171,
  },
  name: "Pulse Specific Brachy Control Point Delivered Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PULSE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0172,
  },
  name: "Pulse Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const BRACHY_PULSE_CONTROL_POINT_DELIVERED_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0173,
  },
  name: "Brachy Pulse Control Point Delivered Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CURRENT_TREATMENT_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0200,
  },
  name: "Current Treatment Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TREATMENT_STATUS_COMMENT: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0202,
  },
  name: "Treatment Status Comment",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const FRACTION_GROUP_SUMMARY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0220,
  },
  name: "Fraction Group Summary Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_FRACTION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0223,
  },
  name: "Referenced Fraction Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const FRACTION_GROUP_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0224,
  },
  name: "Fraction Group Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BEAM_STOPPER_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0230,
  },
  name: "Beam Stopper Position",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FRACTION_STATUS_SUMMARY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0240,
  },
  name: "Fraction Status Summary Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TREATMENT_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0250,
  },
  name: "Treatment Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const TREATMENT_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x3008,
    element: 0x0251,
  },
  name: "Treatment Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const RT_PLAN_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0002,
  },
  name: "RT Plan Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const RT_PLAN_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0003,
  },
  name: "RT Plan Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const RT_PLAN_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0004,
  },
  name: "RT Plan Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const RT_PLAN_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0006,
  },
  name: "RT Plan Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const RT_PLAN_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0007,
  },
  name: "RT Plan Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const TREATMENT_PROTOCOLS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0009,
  },
  name: "Treatment Protocols",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const PLAN_INTENT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x000A,
  },
  name: "Plan Intent",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TREATMENT_SITES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x000B,
  },
  name: "Treatment Sites",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const RT_PLAN_GEOMETRY: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x000C,
  },
  name: "RT Plan Geometry",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRESCRIPTION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x000E,
  },
  name: "Prescription Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const DOSE_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0010,
  },
  name: "Dose Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DOSE_REFERENCE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0012,
  },
  name: "Dose Reference Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const DOSE_REFERENCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0013,
  },
  name: "Dose Reference UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const DOSE_REFERENCE_STRUCTURE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0014,
  },
  name: "Dose Reference Structure Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NOMINAL_BEAM_ENERGY_UNIT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0015,
  },
  name: "Nominal Beam Energy Unit",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DOSE_REFERENCE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0016,
  },
  name: "Dose Reference Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DOSE_REFERENCE_POINT_COORDINATES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0018,
  },
  name: "Dose Reference Point Coordinates",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const NOMINAL_PRIOR_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x001A,
  },
  name: "Nominal Prior Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DOSE_REFERENCE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0020,
  },
  name: "Dose Reference Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONSTRAINT_WEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0021,
  },
  name: "Constraint Weight",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DELIVERY_WARNING_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0022,
  },
  name: "Delivery Warning Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DELIVERY_MAXIMUM_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0023,
  },
  name: "Delivery Maximum Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TARGET_MINIMUM_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0025,
  },
  name: "Target Minimum Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TARGET_PRESCRIPTION_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0026,
  },
  name: "Target Prescription Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TARGET_MAXIMUM_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0027,
  },
  name: "Target Maximum Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TARGET_UNDERDOSE_VOLUME_FRACTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0028,
  },
  name: "Target Underdose Volume Fraction",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ORGAN_AT_RISK_FULL_VOLUME_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x002A,
  },
  name: "Organ at Risk Full-volume Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ORGAN_AT_RISK_LIMIT_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x002B,
  },
  name: "Organ at Risk Limit Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ORGAN_AT_RISK_MAXIMUM_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x002C,
  },
  name: "Organ at Risk Maximum Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ORGAN_AT_RISK_OVERDOSE_VOLUME_FRACTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x002D,
  },
  name: "Organ at Risk Overdose Volume Fraction",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TOLERANCE_TABLE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0040,
  },
  name: "Tolerance Table Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TOLERANCE_TABLE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0042,
  },
  name: "Tolerance Table Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const TOLERANCE_TABLE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0043,
  },
  name: "Tolerance Table Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const GANTRY_ANGLE_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0044,
  },
  name: "Gantry Angle Tolerance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BEAM_LIMITING_DEVICE_ANGLE_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0046,
  },
  name: "Beam Limiting Device Angle Tolerance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BEAM_LIMITING_DEVICE_TOLERANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0048,
  },
  name: "Beam Limiting Device Tolerance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BEAM_LIMITING_DEVICE_POSITION_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x004A,
  },
  name: "Beam Limiting Device Position Tolerance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SNOUT_POSITION_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x004B,
  },
  name: "Snout Position Tolerance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_ANGLE_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x004C,
  },
  name: "Patient Support Angle Tolerance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_ECCENTRIC_ANGLE_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x004E,
  },
  name: "Table Top Eccentric Angle Tolerance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_PITCH_ANGLE_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x004F,
  },
  name: "Table Top Pitch Angle Tolerance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TABLE_TOP_ROLL_ANGLE_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0050,
  },
  name: "Table Top Roll Angle Tolerance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TABLE_TOP_VERTICAL_POSITION_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0051,
  },
  name: "Table Top Vertical Position Tolerance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_LONGITUDINAL_POSITION_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0052,
  },
  name: "Table Top Longitudinal Position Tolerance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_LATERAL_POSITION_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0053,
  },
  name: "Table Top Lateral Position Tolerance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RT_PLAN_RELATIONSHIP: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0055,
  },
  name: "RT Plan Relationship",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FRACTION_GROUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0070,
  },
  name: "Fraction Group Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FRACTION_GROUP_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0071,
  },
  name: "Fraction Group Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const FRACTION_GROUP_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0072,
  },
  name: "Fraction Group Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FRACTIONS_PLANNED: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0078,
  },
  name: "Number of Fractions Planned",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FRACTION_PATTERN_DIGITS_PER_DAY: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0079,
  },
  name: "Number of Fraction Pattern Digits Per Day",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REPEAT_FRACTION_CYCLE_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x007A,
  },
  name: "Repeat Fraction Cycle Length",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const FRACTION_PATTERN: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x007B,
  },
  name: "Fraction Pattern",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const NUMBER_OF_BEAMS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0080,
  },
  name: "Number of Beams",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const BEAM_DOSE_SPECIFICATION_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0082,
  },
  name: "Beam Dose Specification Point",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const REFERENCED_DOSE_REFERENCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0083,
  },
  name: "Referenced Dose Reference UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const BEAM_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0084,
  },
  name: "Beam Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BEAM_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0086,
  },
  name: "Beam Meterset",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BEAM_DOSE_POINT_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0088,
  },
  name: "Beam Dose Point Depth",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BEAM_DOSE_POINT_EQUIVALENT_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0089,
  },
  name: "Beam Dose Point Equivalent Depth",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BEAM_DOSE_POINT_SSD: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x008A,
  },
  name: "Beam Dose Point SSD",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BEAM_DOSE_MEANING: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x008B,
  },
  name: "Beam Dose Meaning",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BEAM_DOSE_VERIFICATION_CONTROL_POINT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x008C,
  },
  name: "Beam Dose Verification Control Point Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const AVERAGE_BEAM_DOSE_POINT_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x008D,
  },
  name: "Average Beam Dose Point Depth",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const AVERAGE_BEAM_DOSE_POINT_EQUIVALENT_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x008E,
  },
  name: "Average Beam Dose Point Equivalent Depth",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const AVERAGE_BEAM_DOSE_POINT_SSD: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x008F,
  },
  name: "Average Beam Dose Point SSD",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BEAM_DOSE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0090,
  },
  name: "Beam Dose Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ALTERNATE_BEAM_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0091,
  },
  name: "Alternate Beam Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ALTERNATE_BEAM_DOSE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0092,
  },
  name: "Alternate Beam Dose Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DEPTH_VALUE_AVERAGING_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0093,
  },
  name: "Depth Value Averaging Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BEAM_DOSE_POINT_SOURCE_TO_EXTERNAL_CONTOUR_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0094,
  },
  name: "Beam Dose Point Source to External Contour Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_BRACHY_APPLICATION_SETUPS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00A0,
  },
  name: "Number of Brachy Application Setups",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const BRACHY_APPLICATION_SETUP_DOSE_SPECIFICATION_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00A2,
  },
  name: "Brachy Application Setup Dose Specification Point",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const BRACHY_APPLICATION_SETUP_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00A4,
  },
  name: "Brachy Application Setup Dose",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BEAM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00B0,
  },
  name: "Beam Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TREATMENT_MACHINE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00B2,
  },
  name: "Treatment Machine Name",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const PRIMARY_DOSIMETER_UNIT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00B3,
  },
  name: "Primary Dosimeter Unit",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SOURCE_AXIS_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00B4,
  },
  name: "Source-Axis Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BEAM_LIMITING_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00B6,
  },
  name: "Beam Limiting Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_BEAM_LIMITING_DEVICE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00B8,
  },
  name: "RT Beam Limiting Device Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SOURCE_TO_BEAM_LIMITING_DEVICE_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00BA,
  },
  name: "Source to Beam Limiting Device Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ISOCENTER_TO_BEAM_LIMITING_DEVICE_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00BB,
  },
  name: "Isocenter to Beam Limiting Device Distance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const NUMBER_OF_LEAF_JAW_PAIRS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00BC,
  },
  name: "Number of Leaf/Jaw Pairs",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const LEAF_POSITION_BOUNDARIES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00BE,
  },
  name: "Leaf Position Boundaries",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3_TO_N,
};

pub const BEAM_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00C0,
  },
  name: "Beam Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const BEAM_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00C2,
  },
  name: "Beam Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const BEAM_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00C3,
  },
  name: "Beam Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const BEAM_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00C4,
  },
  name: "Beam Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BEAM_DELIVERY_DURATION_LIMIT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00C5,
  },
  name: "Beam Delivery Duration Limit",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RADIATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00C6,
  },
  name: "Radiation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const HIGH_DOSE_TECHNIQUE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00C7,
  },
  name: "High-Dose Technique Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFERENCE_IMAGE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00C8,
  },
  name: "Reference Image Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PLANNED_VERIFICATION_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00CA,
  },
  name: "Planned Verification Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const IMAGING_DEVICE_SPECIFIC_ACQUISITION_PARAMETERS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00CC,
  },
  name: "Imaging Device-Specific Acquisition Parameters",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const TREATMENT_DELIVERY_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00CE,
  },
  name: "Treatment Delivery Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_WEDGES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00D0,
  },
  name: "Number of Wedges",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const WEDGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00D1,
  },
  name: "Wedge Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const WEDGE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00D2,
  },
  name: "Wedge Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const WEDGE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00D3,
  },
  name: "Wedge Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const WEDGE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00D4,
  },
  name: "Wedge ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const WEDGE_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00D5,
  },
  name: "Wedge Angle",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const WEDGE_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00D6,
  },
  name: "Wedge Factor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TOTAL_WEDGE_TRAY_WATER_EQUIVALENT_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00D7,
  },
  name: "Total Wedge Tray Water-Equivalent Thickness",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const WEDGE_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00D8,
  },
  name: "Wedge Orientation",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ISOCENTER_TO_WEDGE_TRAY_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00D9,
  },
  name: "Isocenter to Wedge Tray Distance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SOURCE_TO_WEDGE_TRAY_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00DA,
  },
  name: "Source to Wedge Tray Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_THIN_EDGE_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00DB,
  },
  name: "Wedge Thin Edge Position",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BOLUS_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00DC,
  },
  name: "Bolus ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const BOLUS_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00DD,
  },
  name: "Bolus Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const EFFECTIVE_WEDGE_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00DE,
  },
  name: "Effective Wedge Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_COMPENSATORS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00E0,
  },
  name: "Number of Compensators",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const MATERIAL_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00E1,
  },
  name: "Material ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const TOTAL_COMPENSATOR_TRAY_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00E2,
  },
  name: "Total Compensator Tray Factor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const COMPENSATOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00E3,
  },
  name: "Compensator Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMPENSATOR_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00E4,
  },
  name: "Compensator Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COMPENSATOR_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00E5,
  },
  name: "Compensator ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SOURCE_TO_COMPENSATOR_TRAY_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00E6,
  },
  name: "Source to Compensator Tray Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const COMPENSATOR_ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00E7,
  },
  name: "Compensator Rows",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COMPENSATOR_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00E8,
  },
  name: "Compensator Columns",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COMPENSATOR_PIXEL_SPACING: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00E9,
  },
  name: "Compensator Pixel Spacing",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const COMPENSATOR_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00EA,
  },
  name: "Compensator Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2,
};

pub const COMPENSATOR_TRANSMISSION_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00EB,
  },
  name: "Compensator Transmission Data",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const COMPENSATOR_THICKNESS_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00EC,
  },
  name: "Compensator Thickness Data",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_BOLI: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00ED,
  },
  name: "Number of Boli",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const COMPENSATOR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00EE,
  },
  name: "Compensator Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COMPENSATOR_TRAY_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00EF,
  },
  name: "Compensator Tray ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_BLOCKS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00F0,
  },
  name: "Number of Blocks",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const TOTAL_BLOCK_TRAY_FACTOR: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00F2,
  },
  name: "Total Block Tray Factor",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TOTAL_BLOCK_TRAY_WATER_EQUIVALENT_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00F3,
  },
  name: "Total Block Tray Water-Equivalent Thickness",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BLOCK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00F4,
  },
  name: "Block Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BLOCK_TRAY_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00F5,
  },
  name: "Block Tray ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SOURCE_TO_BLOCK_TRAY_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00F6,
  },
  name: "Source to Block Tray Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ISOCENTER_TO_BLOCK_TRAY_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00F7,
  },
  name: "Isocenter to Block Tray Distance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BLOCK_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00F8,
  },
  name: "Block Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ACCESSORY_CODE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00F9,
  },
  name: "Accessory Code",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const BLOCK_DIVERGENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00FA,
  },
  name: "Block Divergence",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BLOCK_MOUNTING_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00FB,
  },
  name: "Block Mounting Position",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BLOCK_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00FC,
  },
  name: "Block Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const BLOCK_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x00FE,
  },
  name: "Block Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const BLOCK_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0100,
  },
  name: "Block Thickness",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BLOCK_TRANSMISSION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0102,
  },
  name: "Block Transmission",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BLOCK_NUMBER_OF_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0104,
  },
  name: "Block Number of Points",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const BLOCK_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0106,
  },
  name: "Block Data",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2_TO_N,
};

pub const APPLICATOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0107,
  },
  name: "Applicator Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const APPLICATOR_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0108,
  },
  name: "Applicator ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const APPLICATOR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0109,
  },
  name: "Applicator Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const APPLICATOR_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x010A,
  },
  name: "Applicator Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CUMULATIVE_DOSE_REFERENCE_COEFFICIENT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x010C,
  },
  name: "Cumulative Dose Reference Coefficient",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FINAL_CUMULATIVE_METERSET_WEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x010E,
  },
  name: "Final Cumulative Meterset Weight",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_CONTROL_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0110,
  },
  name: "Number of Control Points",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CONTROL_POINT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0111,
  },
  name: "Control Point Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTROL_POINT_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0112,
  },
  name: "Control Point Index",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const NOMINAL_BEAM_ENERGY: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0114,
  },
  name: "Nominal Beam Energy",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const DOSE_RATE_SET: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0115,
  },
  name: "Dose Rate Set",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const WEDGE_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0116,
  },
  name: "Wedge Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const WEDGE_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0118,
  },
  name: "Wedge Position",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BEAM_LIMITING_DEVICE_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x011A,
  },
  name: "Beam Limiting Device Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LEAF_JAW_POSITIONS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x011C,
  },
  name: "Leaf/Jaw Positions",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_2_TO_N,
};

pub const GANTRY_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x011E,
  },
  name: "Gantry Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const GANTRY_ROTATION_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x011F,
  },
  name: "Gantry Rotation Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BEAM_LIMITING_DEVICE_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0120,
  },
  name: "Beam Limiting Device Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BEAM_LIMITING_DEVICE_ROTATION_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0121,
  },
  name: "Beam Limiting Device Rotation Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0122,
  },
  name: "Patient Support Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_ROTATION_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0123,
  },
  name: "Patient Support Rotation Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_ECCENTRIC_AXIS_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0124,
  },
  name: "Table Top Eccentric Axis Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_ECCENTRIC_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0125,
  },
  name: "Table Top Eccentric Angle",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_ECCENTRIC_ROTATION_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0126,
  },
  name: "Table Top Eccentric Rotation Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_VERTICAL_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0128,
  },
  name: "Table Top Vertical Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_LONGITUDINAL_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0129,
  },
  name: "Table Top Longitudinal Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_LATERAL_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x012A,
  },
  name: "Table Top Lateral Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ISOCENTER_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x012C,
  },
  name: "Isocenter Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const SURFACE_ENTRY_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x012E,
  },
  name: "Surface Entry Point",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const SOURCE_TO_SURFACE_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0130,
  },
  name: "Source to Surface Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const AVERAGE_BEAM_DOSE_POINT_SOURCE_TO_EXTERNAL_CONTOUR_DISTANCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x300A,
      element: 0x0131,
    },
    name: "Average Beam Dose Point Source to External Contour Distance",
    vrs: &[ValueRepresentation::FloatingPointSingle],
    multiplicity: VM_1,
  };

pub const SOURCE_TO_EXTERNAL_CONTOUR_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0132,
  },
  name: "Source to External Contour Distance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const EXTERNAL_CONTOUR_ENTRY_POINT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0133,
  },
  name: "External Contour Entry Point",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const CUMULATIVE_METERSET_WEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0134,
  },
  name: "Cumulative Meterset Weight",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_PITCH_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0140,
  },
  name: "Table Top Pitch Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TABLE_TOP_PITCH_ROTATION_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0142,
  },
  name: "Table Top Pitch Rotation Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_ROLL_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0144,
  },
  name: "Table Top Roll Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const TABLE_TOP_ROLL_ROTATION_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0146,
  },
  name: "Table Top Roll Rotation Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const HEAD_FIXATION_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0148,
  },
  name: "Head Fixation Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const GANTRY_PITCH_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x014A,
  },
  name: "Gantry Pitch Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const GANTRY_PITCH_ROTATION_DIRECTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x014C,
  },
  name: "Gantry Pitch Rotation Direction",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GANTRY_PITCH_ANGLE_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x014E,
  },
  name: "Gantry Pitch Angle Tolerance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const FIXATION_EYE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0150,
  },
  name: "Fixation Eye",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CHAIR_HEAD_FRAME_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0151,
  },
  name: "Chair Head Frame Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const HEAD_FIXATION_ANGLE_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0152,
  },
  name: "Head Fixation Angle Tolerance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHAIR_HEAD_FRAME_POSITION_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0153,
  },
  name: "Chair Head Frame Position Tolerance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FIXATION_LIGHT_AZIMUTHAL_ANGLE_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0154,
  },
  name: "Fixation Light Azimuthal Angle Tolerance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FIXATION_LIGHT_POLAR_ANGLE_TOLERANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0155,
  },
  name: "Fixation Light Polar Angle Tolerance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const PATIENT_SETUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0180,
  },
  name: "Patient Setup Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_SETUP_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0182,
  },
  name: "Patient Setup Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PATIENT_SETUP_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0183,
  },
  name: "Patient Setup Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PATIENT_ADDITIONAL_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0184,
  },
  name: "Patient Additional Position",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const FIXATION_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0190,
  },
  name: "Fixation Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FIXATION_DEVICE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0192,
  },
  name: "Fixation Device Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const FIXATION_DEVICE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0194,
  },
  name: "Fixation Device Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const FIXATION_DEVICE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0196,
  },
  name: "Fixation Device Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const FIXATION_DEVICE_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0198,
  },
  name: "Fixation Device Position",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const FIXATION_DEVICE_PITCH_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0199,
  },
  name: "Fixation Device Pitch Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const FIXATION_DEVICE_ROLL_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x019A,
  },
  name: "Fixation Device Roll Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SHIELDING_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01A0,
  },
  name: "Shielding Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SHIELDING_DEVICE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01A2,
  },
  name: "Shielding Device Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SHIELDING_DEVICE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01A4,
  },
  name: "Shielding Device Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SHIELDING_DEVICE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01A6,
  },
  name: "Shielding Device Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const SHIELDING_DEVICE_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01A8,
  },
  name: "Shielding Device Position",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SETUP_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01B0,
  },
  name: "Setup Technique",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SETUP_TECHNIQUE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01B2,
  },
  name: "Setup Technique Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const SETUP_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01B4,
  },
  name: "Setup Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SETUP_DEVICE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01B6,
  },
  name: "Setup Device Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SETUP_DEVICE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01B8,
  },
  name: "Setup Device Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SETUP_DEVICE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01BA,
  },
  name: "Setup Device Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const SETUP_DEVICE_PARAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01BC,
  },
  name: "Setup Device Parameter",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SETUP_REFERENCE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01D0,
  },
  name: "Setup Reference Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const TABLE_TOP_VERTICAL_SETUP_DISPLACEMENT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01D2,
  },
  name: "Table Top Vertical Setup Displacement",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_LONGITUDINAL_SETUP_DISPLACEMENT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01D4,
  },
  name: "Table Top Longitudinal Setup Displacement",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const TABLE_TOP_LATERAL_SETUP_DISPLACEMENT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x01D6,
  },
  name: "Table Top Lateral Setup Displacement",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BRACHY_TREATMENT_TECHNIQUE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0200,
  },
  name: "Brachy Treatment Technique",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BRACHY_TREATMENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0202,
  },
  name: "Brachy Treatment Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TREATMENT_MACHINE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0206,
  },
  name: "Treatment Machine Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0210,
  },
  name: "Source Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0212,
  },
  name: "Source Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SOURCE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0214,
  },
  name: "Source Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SOURCE_MANUFACTURER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0216,
  },
  name: "Source Manufacturer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ACTIVE_SOURCE_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0218,
  },
  name: "Active Source Diameter",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ACTIVE_SOURCE_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x021A,
  },
  name: "Active Source Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOURCE_MODEL_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x021B,
  },
  name: "Source Model ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SOURCE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x021C,
  },
  name: "Source Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SOURCE_ENCAPSULATION_NOMINAL_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0222,
  },
  name: "Source Encapsulation Nominal Thickness",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOURCE_ENCAPSULATION_NOMINAL_TRANSMISSION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0224,
  },
  name: "Source Encapsulation Nominal Transmission",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOURCE_ISOTOPE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0226,
  },
  name: "Source Isotope Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SOURCE_ISOTOPE_HALF_LIFE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0228,
  },
  name: "Source Isotope Half Life",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOURCE_STRENGTH_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0229,
  },
  name: "Source Strength Units",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFERENCE_AIR_KERMA_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x022A,
  },
  name: "Reference Air Kerma Rate",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOURCE_STRENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x022B,
  },
  name: "Source Strength",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOURCE_STRENGTH_REFERENCE_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x022C,
  },
  name: "Source Strength Reference Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const SOURCE_STRENGTH_REFERENCE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x022E,
  },
  name: "Source Strength Reference Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const APPLICATION_SETUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0230,
  },
  name: "Application Setup Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const APPLICATION_SETUP_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0232,
  },
  name: "Application Setup Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const APPLICATION_SETUP_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0234,
  },
  name: "Application Setup Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const APPLICATION_SETUP_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0236,
  },
  name: "Application Setup Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const APPLICATION_SETUP_MANUFACTURER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0238,
  },
  name: "Application Setup Manufacturer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TEMPLATE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0240,
  },
  name: "Template Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const TEMPLATE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0242,
  },
  name: "Template Type",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const TEMPLATE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0244,
  },
  name: "Template Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TOTAL_REFERENCE_AIR_KERMA: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0250,
  },
  name: "Total Reference Air Kerma",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BRACHY_ACCESSORY_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0260,
  },
  name: "Brachy Accessory Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BRACHY_ACCESSORY_DEVICE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0262,
  },
  name: "Brachy Accessory Device Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const BRACHY_ACCESSORY_DEVICE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0263,
  },
  name: "Brachy Accessory Device ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const BRACHY_ACCESSORY_DEVICE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0264,
  },
  name: "Brachy Accessory Device Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BRACHY_ACCESSORY_DEVICE_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0266,
  },
  name: "Brachy Accessory Device Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const BRACHY_ACCESSORY_DEVICE_NOMINAL_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x026A,
  },
  name: "Brachy Accessory Device Nominal Thickness",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BRACHY_ACCESSORY_DEVICE_NOMINAL_TRANSMISSION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x026C,
  },
  name: "Brachy Accessory Device Nominal Transmission",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_EFFECTIVE_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0271,
  },
  name: "Channel Effective Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_INNER_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0272,
  },
  name: "Channel Inner Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const AFTERLOADER_CHANNEL_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0273,
  },
  name: "Afterloader Channel ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SOURCE_APPLICATOR_TIP_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0274,
  },
  name: "Source Applicator Tip Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0280,
  },
  name: "Channel Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CHANNEL_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0282,
  },
  name: "Channel Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CHANNEL_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0284,
  },
  name: "Channel Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_TOTAL_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0286,
  },
  name: "Channel Total Time",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOURCE_MOVEMENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0288,
  },
  name: "Source Movement Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_PULSES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x028A,
  },
  name: "Number of Pulses",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const PULSE_REPETITION_INTERVAL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x028C,
  },
  name: "Pulse Repetition Interval",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOURCE_APPLICATOR_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0290,
  },
  name: "Source Applicator Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SOURCE_APPLICATOR_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0291,
  },
  name: "Source Applicator ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SOURCE_APPLICATOR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0292,
  },
  name: "Source Applicator Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SOURCE_APPLICATOR_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0294,
  },
  name: "Source Applicator Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SOURCE_APPLICATOR_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0296,
  },
  name: "Source Applicator Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOURCE_APPLICATOR_MANUFACTURER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0298,
  },
  name: "Source Applicator Manufacturer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SOURCE_APPLICATOR_WALL_NOMINAL_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x029C,
  },
  name: "Source Applicator Wall Nominal Thickness",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOURCE_APPLICATOR_WALL_NOMINAL_TRANSMISSION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x029E,
  },
  name: "Source Applicator Wall Nominal Transmission",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const SOURCE_APPLICATOR_STEP_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02A0,
  },
  name: "Source Applicator Step Size",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const APPLICATOR_SHAPE_REFERENCED_ROI_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02A1,
  },
  name: "Applicator Shape Referenced ROI Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const TRANSFER_TUBE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02A2,
  },
  name: "Transfer Tube Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const TRANSFER_TUBE_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02A4,
  },
  name: "Transfer Tube Length",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_SHIELD_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02B0,
  },
  name: "Channel Shield Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CHANNEL_SHIELD_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02B2,
  },
  name: "Channel Shield Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const CHANNEL_SHIELD_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02B3,
  },
  name: "Channel Shield ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const CHANNEL_SHIELD_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02B4,
  },
  name: "Channel Shield Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CHANNEL_SHIELD_NOMINAL_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02B8,
  },
  name: "Channel Shield Nominal Thickness",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CHANNEL_SHIELD_NOMINAL_TRANSMISSION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02BA,
  },
  name: "Channel Shield Nominal Transmission",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const FINAL_CUMULATIVE_TIME_WEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02C8,
  },
  name: "Final Cumulative Time Weight",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BRACHY_CONTROL_POINT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02D0,
  },
  name: "Brachy Control Point Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTROL_POINT_RELATIVE_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02D2,
  },
  name: "Control Point Relative Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const CONTROL_POINT_3D_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02D4,
  },
  name: "Control Point 3D Position",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_3,
};

pub const CUMULATIVE_TIME_WEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02D6,
  },
  name: "Cumulative Time Weight",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const COMPENSATOR_DIVERGENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02E0,
  },
  name: "Compensator Divergence",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COMPENSATOR_MOUNTING_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02E1,
  },
  name: "Compensator Mounting Position",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SOURCE_TO_COMPENSATOR_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02E2,
  },
  name: "Source to Compensator Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1_TO_N,
};

pub const TOTAL_COMPENSATOR_TRAY_WATER_EQUIVALENT_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02E3,
  },
  name: "Total Compensator Tray Water-Equivalent Thickness",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ISOCENTER_TO_COMPENSATOR_TRAY_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02E4,
  },
  name: "Isocenter to Compensator Tray Distance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const COMPENSATOR_COLUMN_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02E5,
  },
  name: "Compensator Column Offset",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ISOCENTER_TO_COMPENSATOR_DISTANCES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02E6,
  },
  name: "Isocenter to Compensator Distances",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_N,
};

pub const COMPENSATOR_RELATIVE_STOPPING_POWER_RATIO: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02E7,
  },
  name: "Compensator Relative Stopping Power Ratio",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const COMPENSATOR_MILLING_TOOL_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02E8,
  },
  name: "Compensator Milling Tool Diameter",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ION_RANGE_COMPENSATOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02EA,
  },
  name: "Ion Range Compensator Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMPENSATOR_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x02EB,
  },
  name: "Compensator Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const RADIATION_MASS_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0302,
  },
  name: "Radiation Mass Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const RADIATION_ATOMIC_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0304,
  },
  name: "Radiation Atomic Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const RADIATION_CHARGE_STATE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0306,
  },
  name: "Radiation Charge State",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_1,
};

pub const SCAN_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0308,
  },
  name: "Scan Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MODULATED_SCAN_MODE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0309,
  },
  name: "Modulated Scan Mode Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const VIRTUAL_SOURCE_AXIS_DISTANCES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x030A,
  },
  name: "Virtual Source-Axis Distances",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const SNOUT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x030C,
  },
  name: "Snout Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SNOUT_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x030D,
  },
  name: "Snout Position",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SNOUT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x030F,
  },
  name: "Snout ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_RANGE_SHIFTERS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0312,
  },
  name: "Number of Range Shifters",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const RANGE_SHIFTER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0314,
  },
  name: "Range Shifter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RANGE_SHIFTER_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0316,
  },
  name: "Range Shifter Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const RANGE_SHIFTER_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0318,
  },
  name: "Range Shifter ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const RANGE_SHIFTER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0320,
  },
  name: "Range Shifter Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RANGE_SHIFTER_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0322,
  },
  name: "Range Shifter Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_LATERAL_SPREADING_DEVICES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0330,
  },
  name: "Number of Lateral Spreading Devices",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const LATERAL_SPREADING_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0332,
  },
  name: "Lateral Spreading Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LATERAL_SPREADING_DEVICE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0334,
  },
  name: "Lateral Spreading Device Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const LATERAL_SPREADING_DEVICE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0336,
  },
  name: "Lateral Spreading Device ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const LATERAL_SPREADING_DEVICE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0338,
  },
  name: "Lateral Spreading Device Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const LATERAL_SPREADING_DEVICE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x033A,
  },
  name: "Lateral Spreading Device Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const LATERAL_SPREADING_DEVICE_WATER_EQUIVALENT_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x033C,
  },
  name: "Lateral Spreading Device Water Equivalent Thickness",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const NUMBER_OF_RANGE_MODULATORS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0340,
  },
  name: "Number of Range Modulators",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const RANGE_MODULATOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0342,
  },
  name: "Range Modulator Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RANGE_MODULATOR_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0344,
  },
  name: "Range Modulator Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const RANGE_MODULATOR_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0346,
  },
  name: "Range Modulator ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const RANGE_MODULATOR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0348,
  },
  name: "Range Modulator Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RANGE_MODULATOR_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x034A,
  },
  name: "Range Modulator Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const BEAM_CURRENT_MODULATION_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x034C,
  },
  name: "Beam Current Modulation ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0350,
  },
  name: "Patient Support Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0352,
  },
  name: "Patient Support ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_ACCESSORY_CODE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0354,
  },
  name: "Patient Support Accessory Code",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TRAY_ACCESSORY_CODE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0355,
  },
  name: "Tray Accessory Code",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const FIXATION_LIGHT_AZIMUTHAL_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0356,
  },
  name: "Fixation Light Azimuthal Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const FIXATION_LIGHT_POLAR_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0358,
  },
  name: "Fixation Light Polar Angle",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const METERSET_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x035A,
  },
  name: "Meterset Rate",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const RANGE_SHIFTER_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0360,
  },
  name: "Range Shifter Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RANGE_SHIFTER_SETTING: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0362,
  },
  name: "Range Shifter Setting",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISOCENTER_TO_RANGE_SHIFTER_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0364,
  },
  name: "Isocenter to Range Shifter Distance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const RANGE_SHIFTER_WATER_EQUIVALENT_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0366,
  },
  name: "Range Shifter Water Equivalent Thickness",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const LATERAL_SPREADING_DEVICE_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0370,
  },
  name: "Lateral Spreading Device Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const LATERAL_SPREADING_DEVICE_SETTING: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0372,
  },
  name: "Lateral Spreading Device Setting",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ISOCENTER_TO_LATERAL_SPREADING_DEVICE_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0374,
  },
  name: "Isocenter to Lateral Spreading Device Distance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const RANGE_MODULATOR_SETTINGS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0380,
  },
  name: "Range Modulator Settings Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RANGE_MODULATOR_GATING_START_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0382,
  },
  name: "Range Modulator Gating Start Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const RANGE_MODULATOR_GATING_STOP_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0384,
  },
  name: "Range Modulator Gating Stop Value",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const RANGE_MODULATOR_GATING_START_WATER_EQUIVALENT_THICKNESS: Item =
  Item {
    tag: DataElementTag {
      group: 0x300A,
      element: 0x0386,
    },
    name: "Range Modulator Gating Start Water Equivalent Thickness",
    vrs: &[ValueRepresentation::FloatingPointSingle],
    multiplicity: VM_1,
  };

pub const RANGE_MODULATOR_GATING_STOP_WATER_EQUIVALENT_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0388,
  },
  name: "Range Modulator Gating Stop Water Equivalent Thickness",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ISOCENTER_TO_RANGE_MODULATOR_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x038A,
  },
  name: "Isocenter to Range Modulator Distance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SCAN_SPOT_TIME_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x038F,
  },
  name: "Scan Spot Time Offset",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_N,
};

pub const SCAN_SPOT_TUNE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0390,
  },
  name: "Scan Spot Tune ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const SCAN_SPOT_PRESCRIBED_INDICES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0391,
  },
  name: "Scan Spot Prescribed Indices",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1_TO_N,
};

pub const NUMBER_OF_SCAN_SPOT_POSITIONS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0392,
  },
  name: "Number of Scan Spot Positions",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SCAN_SPOT_REORDERED: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0393,
  },
  name: "Scan Spot Reordered",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SCAN_SPOT_POSITION_MAP: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0394,
  },
  name: "Scan Spot Position Map",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_N,
};

pub const SCAN_SPOT_REORDERING_ALLOWED: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0395,
  },
  name: "Scan Spot Reordering Allowed",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SCAN_SPOT_METERSET_WEIGHTS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0396,
  },
  name: "Scan Spot Meterset Weights",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1_TO_N,
};

pub const SCANNING_SPOT_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0398,
  },
  name: "Scanning Spot Size",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const SCAN_SPOT_SIZES_DELIVERED: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0399,
  },
  name: "Scan Spot Sizes Delivered",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2_TO_N,
};

pub const NUMBER_OF_PAINTINGS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x039A,
  },
  name: "Number of Paintings",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ION_TOLERANCE_TABLE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x03A0,
  },
  name: "Ion Tolerance Table Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ION_BEAM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x03A2,
  },
  name: "Ion Beam Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ION_BEAM_LIMITING_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x03A4,
  },
  name: "Ion Beam Limiting Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ION_BLOCK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x03A6,
  },
  name: "Ion Block Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ION_CONTROL_POINT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x03A8,
  },
  name: "Ion Control Point Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ION_WEDGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x03AA,
  },
  name: "Ion Wedge Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ION_WEDGE_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x03AC,
  },
  name: "Ion Wedge Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_SETUP_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0401,
  },
  name: "Referenced Setup Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SETUP_IMAGE_COMMENT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0402,
  },
  name: "Setup Image Comment",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const MOTION_SYNCHRONIZATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0410,
  },
  name: "Motion Synchronization Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONTROL_POINT_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0412,
  },
  name: "Control Point Orientation",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const GENERAL_ACCESSORY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0420,
  },
  name: "General Accessory Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const GENERAL_ACCESSORY_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0421,
  },
  name: "General Accessory ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const GENERAL_ACCESSORY_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0422,
  },
  name: "General Accessory Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const GENERAL_ACCESSORY_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0423,
  },
  name: "General Accessory Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const GENERAL_ACCESSORY_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0424,
  },
  name: "General Accessory Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const SOURCE_TO_GENERAL_ACCESSORY_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0425,
  },
  name: "Source to General Accessory Distance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ISOCENTER_TO_GENERAL_ACCESSORY_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0426,
  },
  name: "Isocenter to General Accessory Distance",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const APPLICATOR_GEOMETRY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0431,
  },
  name: "Applicator Geometry Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const APPLICATOR_APERTURE_SHAPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0432,
  },
  name: "Applicator Aperture Shape",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const APPLICATOR_OPENING: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0433,
  },
  name: "Applicator Opening",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const APPLICATOR_OPENING_X: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0434,
  },
  name: "Applicator Opening X",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const APPLICATOR_OPENING_Y: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0435,
  },
  name: "Applicator Opening Y",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const SOURCE_TO_APPLICATOR_MOUNTING_POSITION_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0436,
  },
  name: "Source to Applicator Mounting Position Distance",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const NUMBER_OF_BLOCK_SLAB_ITEMS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0440,
  },
  name: "Number of Block Slab Items",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const BLOCK_SLAB_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0441,
  },
  name: "Block Slab Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BLOCK_SLAB_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0442,
  },
  name: "Block Slab Thickness",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const BLOCK_SLAB_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0443,
  },
  name: "Block Slab Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DEVICE_MOTION_CONTROL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0450,
  },
  name: "Device Motion Control Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DEVICE_MOTION_EXECUTION_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0451,
  },
  name: "Device Motion Execution Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DEVICE_MOTION_OBSERVATION_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0452,
  },
  name: "Device Motion Observation Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DEVICE_MOTION_PARAMETER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0453,
  },
  name: "Device Motion Parameter Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DISTAL_DEPTH_FRACTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0501,
  },
  name: "Distal Depth Fraction",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const DISTAL_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0502,
  },
  name: "Distal Depth",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const NOMINAL_RANGE_MODULATION_FRACTIONS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0503,
  },
  name: "Nominal Range Modulation Fractions",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const NOMINAL_RANGE_MODULATED_REGION_DEPTHS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0504,
  },
  name: "Nominal Range Modulated Region Depths",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const DEPTH_DOSE_PARAMETERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0505,
  },
  name: "Depth Dose Parameters Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DELIVERED_DEPTH_DOSE_PARAMETERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0506,
  },
  name: "Delivered Depth Dose Parameters Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DELIVERED_DISTAL_DEPTH_FRACTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0507,
  },
  name: "Delivered Distal Depth Fraction",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const DELIVERED_DISTAL_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0508,
  },
  name: "Delivered Distal Depth",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const DELIVERED_NOMINAL_RANGE_MODULATION_FRACTIONS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0509,
  },
  name: "Delivered Nominal Range Modulation Fractions",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const DELIVERED_NOMINAL_RANGE_MODULATED_REGION_DEPTHS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0510,
  },
  name: "Delivered Nominal Range Modulated Region Depths",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_2,
};

pub const DELIVERED_REFERENCE_DOSE_DEFINITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0511,
  },
  name: "Delivered Reference Dose Definition",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFERENCE_DOSE_DEFINITION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0512,
  },
  name: "Reference Dose Definition",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RT_CONTROL_POINT_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0600,
  },
  name: "RT Control Point Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RADIATION_GENERATION_MODE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0601,
  },
  name: "Radiation Generation Mode Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFERENCED_DEFINED_DEVICE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0602,
  },
  name: "Referenced Defined Device Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RADIATION_DOSE_IDENTIFICATION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0603,
  },
  name: "Radiation Dose Identification Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_RT_CONTROL_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0604,
  },
  name: "Number of RT Control Points",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFERENCED_RADIATION_GENERATION_MODE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0605,
  },
  name: "Referenced Radiation Generation Mode Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const TREATMENT_POSITION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0606,
  },
  name: "Treatment Position Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFERENCED_DEVICE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0607,
  },
  name: "Referenced Device Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const TREATMENT_POSITION_GROUP_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0608,
  },
  name: "Treatment Position Group Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TREATMENT_POSITION_GROUP_UID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0609,
  },
  name: "Treatment Position Group UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const TREATMENT_POSITION_GROUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x060A,
  },
  name: "Treatment Position Group Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_TREATMENT_POSITION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x060B,
  },
  name: "Referenced Treatment Position Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFERENCED_RADIATION_DOSE_IDENTIFICATION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x060C,
  },
  name: "Referenced Radiation Dose Identification Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_ACCESSORY_HOLDER_WATER_EQUIVALENT_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x060D,
  },
  name: "RT Accessory Holder Water-Equivalent Thickness",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_ACCESSORY_HOLDER_DEVICE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x060E,
  },
  name: "Referenced RT Accessory Holder Device Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_ACCESSORY_HOLDER_SLOT_EXISTENCE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x060F,
  },
  name: "RT Accessory Holder Slot Existence Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RT_ACCESSORY_HOLDER_SLOT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0610,
  },
  name: "RT Accessory Holder Slot Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_ACCESSORY_HOLDER_SLOT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0611,
  },
  name: "RT Accessory Holder Slot ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const RT_ACCESSORY_HOLDER_SLOT_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0612,
  },
  name: "RT Accessory Holder Slot Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RT_ACCESSORY_SLOT_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0613,
  },
  name: "RT Accessory Slot Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RT_ACCESSORY_HOLDER_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0614,
  },
  name: "RT Accessory Holder Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_ACCESSORY_DEVICE_SLOT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0615,
  },
  name: "RT Accessory Device Slot ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const RT_RADIATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0616,
  },
  name: "RT Radiation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIATION_DOSE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0617,
  },
  name: "Radiation Dose Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIATION_DOSE_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0618,
  },
  name: "Radiation Dose Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIATION_DOSE_IDENTIFICATION_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0619,
  },
  name: "Radiation Dose Identification Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REFERENCE_DOSE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x061A,
  },
  name: "Reference Dose Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PRIMARY_DOSE_VALUE_INDICATOR: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x061B,
  },
  name: "Primary Dose Value Indicator",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DOSE_VALUES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x061C,
  },
  name: "Dose Values Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DOSE_VALUE_PURPOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x061D,
  },
  name: "Dose Value Purpose",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const REFERENCE_DOSE_POINT_COORDINATES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x061E,
  },
  name: "Reference Dose Point Coordinates",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const RADIATION_DOSE_VALUES_PARAMETERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x061F,
  },
  name: "Radiation Dose Values Parameters Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const METERSET_TO_DOSE_MAPPING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0620,
  },
  name: "Meterset to Dose Mapping Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EXPECTED_IN_VIVO_MEASUREMENT_VALUES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0621,
  },
  name: "Expected In-Vivo Measurement Values Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EXPECTED_IN_VIVO_MEASUREMENT_VALUE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0622,
  },
  name: "Expected In-Vivo Measurement Value Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RADIATION_DOSE_IN_VIVO_MEASUREMENT_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0623,
  },
  name: "Radiation Dose In-Vivo Measurement Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const RADIATION_DOSE_CENTRAL_AXIS_DISPLACEMENT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0624,
  },
  name: "Radiation Dose Central Axis Displacement",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2,
};

pub const RADIATION_DOSE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0625,
  },
  name: "Radiation Dose Value",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RADIATION_DOSE_SOURCE_TO_SKIN_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0626,
  },
  name: "Radiation Dose Source to Skin Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RADIATION_DOSE_MEASUREMENT_POINT_COORDINATES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0627,
  },
  name: "Radiation Dose Measurement Point Coordinates",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const RADIATION_DOSE_SOURCE_TO_EXTERNAL_CONTOUR_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0628,
  },
  name: "Radiation Dose Source to External Contour Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RT_TOLERANCE_SET_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0629,
  },
  name: "RT Tolerance Set Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_TOLERANCE_SET_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x062A,
  },
  name: "RT Tolerance Set Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ATTRIBUTE_TOLERANCE_VALUES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x062B,
  },
  name: "Attribute Tolerance Values Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TOLERANCE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x062C,
  },
  name: "Tolerance Value",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_POSITION_TOLERANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x062D,
  },
  name: "Patient Support Position Tolerance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TREATMENT_TIME_LIMIT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x062E,
  },
  name: "Treatment Time Limit",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const C_ARM_PHOTON_ELECTRON_CONTROL_POINT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x062F,
  },
  name: "C-Arm Photon-Electron Control Point Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_RADIATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0630,
  },
  name: "Referenced RT Radiation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0631,
  },
  name: "Referenced RT Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_PATIENT_SETUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0632,
  },
  name: "Referenced RT Patient Setup Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_TO_PATIENT_SURFACE_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0634,
  },
  name: "Source to Patient Surface Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const TREATMENT_MACHINE_SPECIAL_MODE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0635,
  },
  name: "Treatment Machine Special Mode Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTENDED_NUMBER_OF_FRACTIONS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0636,
  },
  name: "Intended Number of Fractions",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_RADIATION_SET_INTENT: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0637,
  },
  name: "RT Radiation Set Intent",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RT_RADIATION_PHYSICAL_AND_GEOMETRIC_CONTENT_DETAIL_FLAG: Item =
  Item {
    tag: DataElementTag {
      group: 0x300A,
      element: 0x0638,
    },
    name: "RT Radiation Physical and Geometric Content Detail Flag",
    vrs: &[ValueRepresentation::CodeString],
    multiplicity: VM_1,
  };

pub const RT_RECORD_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0639,
  },
  name: "RT Record Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TREATMENT_DEVICE_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x063A,
  },
  name: "Treatment Device Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_PHYSICIAN_INTENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x063B,
  },
  name: "Referenced RT Physician Intent Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CUMULATIVE_METERSET: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x063C,
  },
  name: "Cumulative Meterset",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DELIVERY_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x063D,
  },
  name: "Delivery Rate",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DELIVERY_RATE_UNIT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x063E,
  },
  name: "Delivery Rate Unit Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TREATMENT_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x063F,
  },
  name: "Treatment Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIATION_SOURCE_AXIS_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0640,
  },
  name: "Radiation Source-Axis Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const NUMBER_OF_RT_BEAM_LIMITING_DEVICES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0641,
  },
  name: "Number of RT Beam Limiting Devices",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_BEAM_LIMITING_DEVICE_PROXIMAL_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0642,
  },
  name: "RT Beam Limiting Device Proximal Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RT_BEAM_LIMITING_DEVICE_DISTAL_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0643,
  },
  name: "RT Beam Limiting Device Distal Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PARALLEL_RT_BEAM_DELIMITER_DEVICE_ORIENTATION_LABEL_CODE_SEQUENCE:
  Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0644,
  },
  name: "Parallel RT Beam Delimiter Device Orientation Label Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BEAM_MODIFIER_ORIENTATION_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0645,
  },
  name: "Beam Modifier Orientation Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const FIXED_RT_BEAM_DELIMITER_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0646,
  },
  name: "Fixed RT Beam Delimiter Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PARALLEL_RT_BEAM_DELIMITER_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0647,
  },
  name: "Parallel RT Beam Delimiter Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_PARALLEL_RT_BEAM_DELIMITERS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0648,
  },
  name: "Number of Parallel RT Beam Delimiters",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PARALLEL_RT_BEAM_DELIMITER_BOUNDARIES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0649,
  },
  name: "Parallel RT Beam Delimiter Boundaries",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2_TO_N,
};

pub const PARALLEL_RT_BEAM_DELIMITER_POSITIONS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x064A,
  },
  name: "Parallel RT Beam Delimiter Positions",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2_TO_N,
};

pub const RT_BEAM_LIMITING_DEVICE_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x064B,
  },
  name: "RT Beam Limiting Device Offset",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2,
};

pub const RT_BEAM_DELIMITER_GEOMETRY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x064C,
  },
  name: "RT Beam Delimiter Geometry Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_BEAM_LIMITING_DEVICE_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x064D,
  },
  name: "RT Beam Limiting Device Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PARALLEL_RT_BEAM_DELIMITER_OPENING_MODE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x064E,
  },
  name: "Parallel RT Beam Delimiter Opening Mode",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PARALLEL_RT_BEAM_DELIMITER_LEAF_MOUNTING_SIDE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x064F,
  },
  name: "Parallel RT Beam Delimiter Leaf Mounting Side",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const PATIENT_SETUP_UID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0650,
  },
  name: "Patient Setup UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const WEDGE_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0651,
  },
  name: "Wedge Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIATION_BEAM_WEDGE_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0652,
  },
  name: "Radiation Beam Wedge Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RADIATION_BEAM_WEDGE_THIN_EDGE_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0653,
  },
  name: "Radiation Beam Wedge Thin Edge Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RADIATION_BEAM_EFFECTIVE_WEDGE_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0654,
  },
  name: "Radiation Beam Effective Wedge Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const NUMBER_OF_WEDGE_POSITIONS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0655,
  },
  name: "Number of Wedge Positions",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_BEAM_LIMITING_DEVICE_OPENING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0656,
  },
  name: "RT Beam Limiting Device Opening Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_RT_BEAM_LIMITING_DEVICE_OPENINGS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0657,
  },
  name: "Number of RT Beam Limiting Device Openings",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RADIATION_DOSIMETER_UNIT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0658,
  },
  name: "Radiation Dosimeter Unit Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_DEVICE_DISTANCE_REFERENCE_LOCATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0659,
  },
  name: "RT Device Distance Reference Location Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIATION_DEVICE_CONFIGURATION_AND_COMMISSIONING_KEY_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x300A,
      element: 0x065A,
    },
    name: "Radiation Device Configuration and Commissioning Key Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const PATIENT_SUPPORT_POSITION_PARAMETER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x065B,
  },
  name: "Patient Support Position Parameter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_POSITION_SPECIFICATION_METHOD: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x065C,
  },
  name: "Patient Support Position Specification Method",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_POSITION_DEVICE_PARAMETER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x065D,
  },
  name: "Patient Support Position Device Parameter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DEVICE_ORDER_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x065E,
  },
  name: "Device Order Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_POSITION_PARAMETER_ORDER_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x065F,
  },
  name: "Patient Support Position Parameter Order Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_POSITION_DEVICE_TOLERANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0660,
  },
  name: "Patient Support Position Device Tolerance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_POSITION_TOLERANCE_ORDER_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0661,
  },
  name: "Patient Support Position Tolerance Order Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const COMPENSATOR_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0662,
  },
  name: "Compensator Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMPENSATOR_MAP_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0663,
  },
  name: "Compensator Map Orientation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const COMPENSATOR_PROXIMAL_THICKNESS_MAP: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0664,
  },
  name: "Compensator Proximal Thickness Map",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const COMPENSATOR_DISTAL_THICKNESS_MAP: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0665,
  },
  name: "Compensator Distal Thickness Map",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const COMPENSATOR_BASE_PLANE_OFFSET: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0666,
  },
  name: "Compensator Base Plane Offset",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const COMPENSATOR_SHAPE_FABRICATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0667,
  },
  name: "Compensator Shape Fabrication Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMPENSATOR_SHAPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0668,
  },
  name: "Compensator Shape Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIATION_BEAM_COMPENSATOR_MILLING_TOOL_DIAMETER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0669,
  },
  name: "Radiation Beam Compensator Milling Tool Diameter",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const BLOCK_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x066A,
  },
  name: "Block Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BLOCK_EDGE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x066B,
  },
  name: "Block Edge Data",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const BLOCK_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x066C,
  },
  name: "Block Orientation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RADIATION_BEAM_BLOCK_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x066D,
  },
  name: "Radiation Beam Block Thickness",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RADIATION_BEAM_BLOCK_SLAB_THICKNESS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x066E,
  },
  name: "Radiation Beam Block Slab Thickness",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const BLOCK_EDGE_DATA_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x066F,
  },
  name: "Block Edge Data Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_RT_ACCESSORY_HOLDERS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0670,
  },
  name: "Number of RT Accessory Holders",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const GENERAL_ACCESSORY_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0671,
  },
  name: "General Accessory Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_GENERAL_ACCESSORIES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0672,
  },
  name: "Number of General Accessories",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const BOLUS_DEFINITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0673,
  },
  name: "Bolus Definition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_BOLUSES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0674,
  },
  name: "Number of Boluses",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const EQUIPMENT_FRAME_OF_REFERENCE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0675,
  },
  name: "Equipment Frame of Reference UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const EQUIPMENT_FRAME_OF_REFERENCE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0676,
  },
  name: "Equipment Frame of Reference Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const EQUIPMENT_REFERENCE_POINT_COORDINATES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0677,
  },
  name: "Equipment Reference Point Coordinates Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EQUIPMENT_REFERENCE_POINT_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0678,
  },
  name: "Equipment Reference Point Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_BEAM_LIMITING_DEVICE_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0679,
  },
  name: "RT Beam Limiting Device Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const SOURCE_ROLL_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x067A,
  },
  name: "Source Roll Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RADIATION_GENERATION_MODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x067B,
  },
  name: "Radiation GenerationMode Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIATION_GENERATION_MODE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x067C,
  },
  name: "Radiation GenerationMode Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const RADIATION_GENERATION_MODE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x067D,
  },
  name: "Radiation GenerationMode Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const RADIATION_GENERATION_MODE_MACHINE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x067E,
  },
  name: "Radiation GenerationMode Machine Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIATION_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x067F,
  },
  name: "Radiation Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NOMINAL_ENERGY: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0680,
  },
  name: "Nominal Energy",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MINIMUM_NOMINAL_ENERGY: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0681,
  },
  name: "Minimum Nominal Energy",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const MAXIMUM_NOMINAL_ENERGY: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0682,
  },
  name: "Maximum Nominal Energy",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const RADIATION_FLUENCE_MODIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0683,
  },
  name: "Radiation Fluence Modifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ENERGY_UNIT_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0684,
  },
  name: "Energy Unit Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_RADIATION_GENERATION_MODES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0685,
  },
  name: "Number of Radiation GenerationModes",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PATIENT_SUPPORT_DEVICES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0686,
  },
  name: "Patient Support Devices Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const NUMBER_OF_PATIENT_SUPPORT_DEVICES: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0687,
  },
  name: "Number of Patient Support Devices",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_BEAM_MODIFIER_DEFINITION_DISTANCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0688,
  },
  name: "RT Beam Modifier Definition Distance",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const BEAM_AREA_LIMIT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0689,
  },
  name: "Beam Area Limit Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_PRESCRIPTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x068A,
  },
  name: "Referenced RT Prescription Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DOSE_VALUE_INTERPRETATION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x068B,
  },
  name: "Dose Value Interpretation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TREATMENT_SESSION_UID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0700,
  },
  name: "Treatment Session UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const RT_RADIATION_USAGE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0701,
  },
  name: "RT Radiation Usage",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_RADIATION_SET_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0702,
  },
  name: "Referenced RT Radiation Set Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_RADIATION_RECORD_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0703,
  },
  name: "Referenced RT Radiation Record Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_RADIATION_SET_DELIVERY_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0704,
  },
  name: "RT Radiation Set Delivery Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CLINICAL_FRACTION_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0705,
  },
  name: "Clinical Fraction Number",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_TREATMENT_FRACTION_COMPLETION_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0706,
  },
  name: "RT Treatment Fraction Completion Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RT_RADIATION_SET_USAGE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0707,
  },
  name: "RT Radiation Set Usage",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TREATMENT_DELIVERY_CONTINUATION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0708,
  },
  name: "Treatment Delivery Continuation Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TREATMENT_RECORD_CONTENT_ORIGIN: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0709,
  },
  name: "Treatment Record Content Origin",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RT_TREATMENT_TERMINATION_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0714,
  },
  name: "RT Treatment Termination Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RT_TREATMENT_TERMINATION_REASON_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0715,
  },
  name: "RT Treatment Termination Reason Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MACHINE_SPECIFIC_TREATMENT_TERMINATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0716,
  },
  name: "Machine-Specific Treatment Termination Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_RADIATION_SALVAGE_RECORD_CONTROL_POINT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0722,
  },
  name: "RT Radiation Salvage Record Control Point Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const STARTING_METERSET_VALUE_KNOWN_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0723,
  },
  name: "Starting Meterset Value Known Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TREATMENT_TERMINATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0730,
  },
  name: "Treatment Termination Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const TREATMENT_TOLERANCE_VIOLATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0731,
  },
  name: "Treatment Tolerance Violation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TREATMENT_TOLERANCE_VIOLATION_CATEGORY: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0732,
  },
  name: "Treatment Tolerance Violation Category",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TREATMENT_TOLERANCE_VIOLATION_ATTRIBUTE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0733,
  },
  name: "Treatment Tolerance Violation Attribute Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TREATMENT_TOLERANCE_VIOLATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0734,
  },
  name: "Treatment Tolerance Violation Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const TREATMENT_TOLERANCE_VIOLATION_IDENTIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0735,
  },
  name: "Treatment Tolerance Violation Identification",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const TREATMENT_TOLERANCE_VIOLATION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0736,
  },
  name: "Treatment Tolerance Violation DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const RECORDED_RT_CONTROL_POINT_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x073A,
  },
  name: "Recorded RT Control Point DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const REFERENCED_RADIATION_RT_CONTROL_POINT_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x073B,
  },
  name: "Referenced Radiation RT Control Point Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const ALTERNATE_VALUE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x073E,
  },
  name: "Alternate Value Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONFIRMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x073F,
  },
  name: "Confirmation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTERLOCK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0740,
  },
  name: "Interlock Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTERLOCK_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0741,
  },
  name: "Interlock DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const INTERLOCK_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0742,
  },
  name: "Interlock Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const INTERLOCK_ORIGINATING_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0743,
  },
  name: "Interlock Originating Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTERLOCK_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0744,
  },
  name: "Interlock Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTERLOCK_RESOLUTION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0745,
  },
  name: "Interlock Resolution Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTERLOCK_RESOLUTION_USER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0746,
  },
  name: "Interlock Resolution User Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const OVERRIDE_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0760,
  },
  name: "Override DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const TREATMENT_TOLERANCE_VIOLATION_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0761,
  },
  name: "Treatment Tolerance Violation Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TREATMENT_TOLERANCE_VIOLATION_CAUSE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0762,
  },
  name: "Treatment Tolerance Violation Cause Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MEASURED_METERSET_TO_DOSE_MAPPING_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0772,
  },
  name: "Measured Meterset to Dose Mapping Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_EXPECTED_IN_VIVO_MEASUREMENT_VALUE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0773,
  },
  name: "Referenced Expected In-Vivo Measurement Value Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DOSE_MEASUREMENT_DEVICE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0774,
  },
  name: "Dose Measurement Device Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ADDITIONAL_PARAMETER_RECORDING_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0780,
  },
  name: "Additional Parameter Recording Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTERLOCK_ORIGIN_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0783,
  },
  name: "Interlock Origin Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const RT_PATIENT_POSITION_SCOPE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0784,
  },
  name: "RT Patient Position Scope Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_TREATMENT_POSITION_GROUP_UID: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0785,
  },
  name: "Referenced Treatment Position Group UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const RADIATION_ORDER_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0786,
  },
  name: "Radiation Order Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OMITTED_RADIATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0787,
  },
  name: "Omitted Radiation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REASON_FOR_OMISSION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0788,
  },
  name: "Reason for Omission Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_DELIVERY_START_PATIENT_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0789,
  },
  name: "RT Delivery Start Patient Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_TREATMENT_PREPARATION_PATIENT_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x078A,
  },
  name: "RT Treatment Preparation Patient Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_TREATMENT_PREPARATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x078B,
  },
  name: "Referenced RT Treatment Preparation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_PATIENT_SETUP_PHOTO_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x078C,
  },
  name: "Referenced Patient Setup Photo Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_TREATMENT_PREPARATION_METHOD_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x078D,
  },
  name: "Patient Treatment Preparation Method Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_TREATMENT_PREPARATION_PROCEDURE_PARAMETER_DESCRIPTION: Item =
  Item {
    tag: DataElementTag {
      group: 0x300A,
      element: 0x078E,
    },
    name: "Patient Treatment Preparation Procedure Parameter Description",
    vrs: &[ValueRepresentation::LongText],
    multiplicity: VM_1,
  };

pub const PATIENT_TREATMENT_PREPARATION_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x078F,
  },
  name: "Patient Treatment Preparation Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_TREATMENT_PREPARATION_PROCEDURE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0790,
  },
  name: "Patient Treatment Preparation Procedure Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_TREATMENT_PREPARATION_PROCEDURE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0791,
  },
  name: "Patient Treatment Preparation Procedure Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_TREATMENT_PREPARATION_METHOD_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0792,
  },
  name: "Patient Treatment Preparation Method Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const PATIENT_TREATMENT_PREPARATION_PROCEDURE_PARAMETER_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x300A,
      element: 0x0793,
    },
    name: "Patient Treatment Preparation Procedure Parameter Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const PATIENT_SETUP_PHOTO_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0794,
  },
  name: "Patient Setup Photo Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const PATIENT_TREATMENT_PREPARATION_PROCEDURE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0795,
  },
  name: "Patient Treatment Preparation Procedure Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFERENCED_PATIENT_SETUP_PROCEDURE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0796,
  },
  name: "Referenced Patient Setup Procedure Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_RADIATION_TASK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0797,
  },
  name: "RT Radiation Task Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_PATIENT_POSITION_DISPLACEMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0798,
  },
  name: "RT Patient Position Displacement Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_PATIENT_POSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x0799,
  },
  name: "RT Patient Position Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DISPLACEMENT_REFERENCE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x079A,
  },
  name: "Displacement Reference Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DISPLACEMENT_MATRIX: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x079B,
  },
  name: "Displacement Matrix",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: ValueMultiplicity {
    min: 16,
    max: Some(16),
  },
};

pub const PATIENT_SUPPORT_DISPLACEMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x079C,
  },
  name: "Patient Support Displacement Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DISPLACEMENT_REFERENCE_LOCATION_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x079D,
  },
  name: "Displacement Reference Location Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_RADIATION_SET_DELIVERY_USAGE: Item = Item {
  tag: DataElementTag {
    group: 0x300A,
    element: 0x079E,
  },
  name: "RT Radiation Set Delivery Usage",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_PLAN_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0002,
  },
  name: "Referenced RT Plan Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_BEAM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0004,
  },
  name: "Referenced Beam Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_BEAM_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0006,
  },
  name: "Referenced Beam Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_REFERENCE_IMAGE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0007,
  },
  name: "Referenced Reference Image Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const START_CUMULATIVE_METERSET_WEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0008,
  },
  name: "Start Cumulative Meterset Weight",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const END_CUMULATIVE_METERSET_WEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0009,
  },
  name: "End Cumulative Meterset Weight",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const REFERENCED_BRACHY_APPLICATION_SETUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x000A,
  },
  name: "Referenced Brachy Application Setup Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_BRACHY_APPLICATION_SETUP_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x000C,
  },
  name: "Referenced Brachy Application Setup Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_SOURCE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x000E,
  },
  name: "Referenced Source Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_FRACTION_GROUP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0020,
  },
  name: "Referenced Fraction Group Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_FRACTION_GROUP_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0022,
  },
  name: "Referenced Fraction Group Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_VERIFICATION_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0040,
  },
  name: "Referenced Verification Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_REFERENCE_IMAGE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0042,
  },
  name: "Referenced Reference Image Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_DOSE_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0050,
  },
  name: "Referenced Dose Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_DOSE_REFERENCE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0051,
  },
  name: "Referenced Dose Reference Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const BRACHY_REFERENCED_DOSE_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0055,
  },
  name: "Brachy Referenced Dose Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_STRUCTURE_SET_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0060,
  },
  name: "Referenced Structure Set Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_PATIENT_SETUP_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x006A,
  },
  name: "Referenced Patient Setup Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_DOSE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0080,
  },
  name: "Referenced Dose Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_TOLERANCE_TABLE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x00A0,
  },
  name: "Referenced Tolerance Table Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_BOLUS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x00B0,
  },
  name: "Referenced Bolus Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_WEDGE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x00C0,
  },
  name: "Referenced Wedge Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_COMPENSATOR_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x00D0,
  },
  name: "Referenced Compensator Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_BLOCK_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x00E0,
  },
  name: "Referenced Block Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_CONTROL_POINT_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x00F0,
  },
  name: "Referenced Control Point Index",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_CONTROL_POINT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x00F2,
  },
  name: "Referenced Control Point Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_START_CONTROL_POINT_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x00F4,
  },
  name: "Referenced Start Control Point Index",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_STOP_CONTROL_POINT_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x00F6,
  },
  name: "Referenced Stop Control Point Index",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_RANGE_SHIFTER_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0100,
  },
  name: "Referenced Range Shifter Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_LATERAL_SPREADING_DEVICE_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0102,
  },
  name: "Referenced Lateral Spreading Device Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const REFERENCED_RANGE_MODULATOR_NUMBER: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0104,
  },
  name: "Referenced Range Modulator Number",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const OMITTED_BEAM_TASK_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0111,
  },
  name: "Omitted Beam Task Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REASON_FOR_OMISSION: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0112,
  },
  name: "Reason for Omission",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REASON_FOR_OMISSION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0113,
  },
  name: "Reason for Omission Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const PRESCRIPTION_OVERVIEW_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0114,
  },
  name: "Prescription Overview Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TOTAL_PRESCRIPTION_DOSE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0115,
  },
  name: "Total Prescription Dose",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const PLAN_OVERVIEW_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0116,
  },
  name: "Plan Overview Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PLAN_OVERVIEW_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0117,
  },
  name: "Plan Overview Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFERENCED_PLAN_OVERVIEW_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0118,
  },
  name: "Referenced Plan Overview Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FRACTIONS_INCLUDED: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0119,
  },
  name: "Number of Fractions Included",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DOSE_CALIBRATION_CONDITIONS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0120,
  },
  name: "Dose Calibration Conditions Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ABSORBED_DOSE_TO_METERSET_RATIO: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0121,
  },
  name: "Absorbed Dose to Meterset Ratio",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DELINEATED_RADIATION_FIELD_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0122,
  },
  name: "Delineated Radiation Field Size",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_2,
};

pub const DOSE_CALIBRATION_CONDITIONS_VERIFIED_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0123,
  },
  name: "Dose Calibration Conditions Verified Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CALIBRATION_REFERENCE_POINT_DEPTH: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0124,
  },
  name: "Calibration Reference Point Depth",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const GATING_BEAM_HOLD_TRANSITION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0125,
  },
  name: "Gating Beam Hold Transition Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BEAM_HOLD_TRANSITION: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0126,
  },
  name: "Beam Hold Transition",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BEAM_HOLD_TRANSITION_DATE_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0127,
  },
  name: "Beam Hold Transition DateTime",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const BEAM_HOLD_ORIGINATING_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0128,
  },
  name: "Beam Hold Originating Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const BEAM_HOLD_TRANSITION_TRIGGER_SOURCE: Item = Item {
  tag: DataElementTag {
    group: 0x300C,
    element: 0x0129,
  },
  name: "Beam Hold Transition Trigger Source",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const APPROVAL_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x300E,
    element: 0x0002,
  },
  name: "Approval Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const REVIEW_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x300E,
    element: 0x0004,
  },
  name: "Review Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const REVIEW_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x300E,
    element: 0x0005,
  },
  name: "Review Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const REVIEWER_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x300E,
    element: 0x0008,
  },
  name: "Reviewer Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const RADIOBIOLOGICAL_DOSE_EFFECT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0001,
  },
  name: "Radiobiological Dose Effect Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RADIOBIOLOGICAL_DOSE_EFFECT_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0002,
  },
  name: "Radiobiological Dose Effect Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const EFFECTIVE_DOSE_CALCULATION_METHOD_CATEGORY_CODE_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x3010,
      element: 0x0003,
    },
    name: "Effective Dose Calculation Method Category Code Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const EFFECTIVE_DOSE_CALCULATION_METHOD_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0004,
  },
  name: "Effective Dose Calculation Method Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EFFECTIVE_DOSE_CALCULATION_METHOD_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0005,
  },
  name: "Effective Dose Calculation Method Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_UID: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0006,
  },
  name: "Conceptual Volume UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const ORIGINATING_SOP_INSTANCE_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0007,
  },
  name: "Originating SOP Instance Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_CONSTITUENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0008,
  },
  name: "Conceptual Volume Constituent Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const EQUIVALENT_CONCEPTUAL_VOLUME_INSTANCE_REFERENCE_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x3010,
      element: 0x0009,
    },
    name: "Equivalent Conceptual Volume Instance Reference Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const EQUIVALENT_CONCEPTUAL_VOLUMES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x000A,
  },
  name: "Equivalent Conceptual Volumes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_CONCEPTUAL_VOLUME_UID: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x000B,
  },
  name: "Referenced Conceptual Volume UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_COMBINATION_EXPRESSION: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x000C,
  },
  name: "Conceptual Volume Combination Expression",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_CONSTITUENT_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x000D,
  },
  name: "Conceptual Volume Constituent Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_COMBINATION_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x000E,
  },
  name: "Conceptual Volume Combination Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_COMBINATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x000F,
  },
  name: "Conceptual Volume Combination Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_SEGMENTATION_DEFINED_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0010,
  },
  name: "Conceptual Volume Segmentation Defined Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_SEGMENTATION_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0011,
  },
  name: "Conceptual Volume Segmentation Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_CONSTITUENT_SEGMENTATION_REFERENCE_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x3010,
      element: 0x0012,
    },
    name: "Conceptual Volume Constituent Segmentation Reference Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const CONSTITUENT_CONCEPTUAL_VOLUME_UID: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0013,
  },
  name: "Constituent Conceptual Volume UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const DERIVATION_CONCEPTUAL_VOLUME_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0014,
  },
  name: "Derivation Conceptual Volume Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SOURCE_CONCEPTUAL_VOLUME_UID: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0015,
  },
  name: "Source Conceptual Volume UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_DERIVATION_ALGORITHM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0016,
  },
  name: "Conceptual Volume Derivation Algorithm Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0017,
  },
  name: "Conceptual Volume Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const SOURCE_CONCEPTUAL_VOLUME_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0018,
  },
  name: "Source Conceptual Volume Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const AUTHOR_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0019,
  },
  name: "Author Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const MANUFACTURER_MODEL_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x001A,
  },
  name: "Manufacturer's Model Version",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DEVICE_ALTERNATE_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x001B,
  },
  name: "Device Alternate Identifier",
  vrs: &[ValueRepresentation::UnlimitedCharacters],
  multiplicity: VM_1,
};

pub const DEVICE_ALTERNATE_IDENTIFIER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x001C,
  },
  name: "Device Alternate Identifier Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DEVICE_ALTERNATE_IDENTIFIER_FORMAT: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x001D,
  },
  name: "Device Alternate Identifier Format",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const SEGMENTATION_CREATION_TEMPLATE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x001E,
  },
  name: "Segmentation Creation Template Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const SEGMENTATION_TEMPLATE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x001F,
  },
  name: "Segmentation Template UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REFERENCED_SEGMENT_REFERENCE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0020,
  },
  name: "Referenced Segment Reference Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const SEGMENT_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0021,
  },
  name: "Segment Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SEGMENT_REFERENCE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0022,
  },
  name: "Segment Reference Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const DIRECT_SEGMENT_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0023,
  },
  name: "Direct Segment Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const COMBINATION_SEGMENT_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0024,
  },
  name: "Combination Segment Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0025,
  },
  name: "Conceptual Volume Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SEGMENTED_RT_ACCESSORY_DEVICE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0026,
  },
  name: "Segmented RT Accessory Device Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SEGMENT_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0027,
  },
  name: "Segment Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RELATED_SEGMENT_CHARACTERISTICS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0028,
  },
  name: "Related Segment Characteristics Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SEGMENT_CHARACTERISTICS_PRECEDENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0029,
  },
  name: "Segment Characteristics Precedence",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_SEGMENT_ANNOTATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x002A,
  },
  name: "RT Segment Annotation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SEGMENT_ANNOTATION_CATEGORY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x002B,
  },
  name: "Segment Annotation Category Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SEGMENT_ANNOTATION_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x002C,
  },
  name: "Segment Annotation Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DEVICE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x002D,
  },
  name: "Device Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DEVICE_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x002E,
  },
  name: "Device Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SEGMENT_ANNOTATION_TYPE_MODIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x002F,
  },
  name: "Segment Annotation Type Modifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PATIENT_EQUIPMENT_RELATIONSHIP_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0030,
  },
  name: "Patient Equipment Relationship Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_FIDUCIALS_UID: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0031,
  },
  name: "Referenced Fiducials UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const PATIENT_TREATMENT_ORIENTATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0032,
  },
  name: "Patient Treatment Orientation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const USER_CONTENT_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0033,
  },
  name: "User Content Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const USER_CONTENT_LONG_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0034,
  },
  name: "User Content Long Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ENTITY_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0035,
  },
  name: "Entity Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const ENTITY_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0036,
  },
  name: "Entity Name",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ENTITY_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0037,
  },
  name: "Entity Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const ENTITY_LONG_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0038,
  },
  name: "Entity Long Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const DEVICE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0039,
  },
  name: "Device Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_TREATMENT_PHASE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x003A,
  },
  name: "RT Treatment Phase Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_TREATMENT_PHASE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x003B,
  },
  name: "RT Treatment Phase UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const RT_PRESCRIPTION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x003C,
  },
  name: "RT Prescription Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_SEGMENT_ANNOTATION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x003D,
  },
  name: "RT Segment Annotation Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const BASIS_RT_TREATMENT_PHASE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x003E,
  },
  name: "Basis RT Treatment Phase Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RELATED_RT_TREATMENT_PHASE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x003F,
  },
  name: "Related RT Treatment Phase Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_TREATMENT_PHASE_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0040,
  },
  name: "Referenced RT Treatment Phase Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_PRESCRIPTION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0041,
  },
  name: "Referenced RT Prescription Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const REFERENCED_PARENT_RT_PRESCRIPTION_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0042,
  },
  name: "Referenced Parent RT Prescription Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const MANUFACTURER_DEVICE_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0043,
  },
  name: "Manufacturer's Device Identifier",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const INSTANCE_LEVEL_REFERENCED_PERFORMED_PROCEDURE_STEP_SEQUENCE: Item =
  Item {
    tag: DataElementTag {
      group: 0x3010,
      element: 0x0044,
    },
    name: "Instance-Level Referenced Performed Procedure Step Sequence",
    vrs: &[ValueRepresentation::Sequence],
    multiplicity: VM_1,
  };

pub const RT_TREATMENT_PHASE_INTENT_PRESENCE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0045,
  },
  name: "RT Treatment Phase Intent Presence Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RADIOTHERAPY_TREATMENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0046,
  },
  name: "Radiotherapy Treatment Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const TELETHERAPY_RADIATION_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0047,
  },
  name: "Teletherapy Radiation Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const BRACHYTHERAPY_SOURCE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0048,
  },
  name: "Brachytherapy Source Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const REFERENCED_RT_TREATMENT_PHASE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0049,
  },
  name: "Referenced RT Treatment Phase Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_DIRECT_SEGMENT_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x004A,
  },
  name: "Referenced Direct Segment Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTENDED_RT_TREATMENT_PHASE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x004B,
  },
  name: "Intended RT Treatment Phase Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTENDED_PHASE_START_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x004C,
  },
  name: "Intended Phase Start Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const INTENDED_PHASE_END_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x004D,
  },
  name: "Intended Phase End Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const RT_TREATMENT_PHASE_INTERVAL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x004E,
  },
  name: "RT Treatment Phase Interval Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TEMPORAL_RELATIONSHIP_INTERVAL_ANCHOR: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x004F,
  },
  name: "Temporal Relationship Interval Anchor",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MINIMUM_NUMBER_OF_INTERVAL_DAYS: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0050,
  },
  name: "Minimum Number of Interval Days",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const MAXIMUM_NUMBER_OF_INTERVAL_DAYS: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0051,
  },
  name: "Maximum Number of Interval Days",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const PERTINENT_SOP_CLASSES_IN_STUDY: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0052,
  },
  name: "Pertinent SOP Classes in Study",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1_TO_N,
};

pub const PERTINENT_SOP_CLASSES_IN_SERIES: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0053,
  },
  name: "Pertinent SOP Classes in Series",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1_TO_N,
};

pub const RT_PRESCRIPTION_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0054,
  },
  name: "RT Prescription Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const RT_PHYSICIAN_INTENT_PREDECESSOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0055,
  },
  name: "RT Physician Intent Predecessor Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_TREATMENT_APPROACH_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0056,
  },
  name: "RT Treatment Approach Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const RT_PHYSICIAN_INTENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0057,
  },
  name: "RT Physician Intent Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_PHYSICIAN_INTENT_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0058,
  },
  name: "RT Physician Intent Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_TREATMENT_INTENT_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0059,
  },
  name: "RT Treatment Intent Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const RT_PHYSICIAN_INTENT_NARRATIVE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x005A,
  },
  name: "RT Physician Intent Narrative",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const RT_PROTOCOL_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x005B,
  },
  name: "RT Protocol Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REASON_FOR_SUPERSEDING: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x005C,
  },
  name: "Reason for Superseding",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const RT_DIAGNOSIS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x005D,
  },
  name: "RT Diagnosis Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_RT_PHYSICIAN_INTENT_INDEX: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x005E,
  },
  name: "Referenced RT Physician Intent Index",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const RT_PHYSICIAN_INTENT_INPUT_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x005F,
  },
  name: "RT Physician Intent Input Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_ANATOMIC_PRESCRIPTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0060,
  },
  name: "RT Anatomic Prescription Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRIOR_TREATMENT_DOSE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0061,
  },
  name: "Prior Treatment Dose Description",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const PRIOR_TREATMENT_REFERENCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0062,
  },
  name: "Prior Treatment Reference Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DOSIMETRIC_OBJECTIVE_EVALUATION_SCOPE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0063,
  },
  name: "Dosimetric Objective Evaluation Scope",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const THERAPEUTIC_ROLE_CATEGORY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0064,
  },
  name: "Therapeutic Role Category Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const THERAPEUTIC_ROLE_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0065,
  },
  name: "Therapeutic Role Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_OPTIMIZATION_PRECEDENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0066,
  },
  name: "Conceptual Volume Optimization Precedence",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_CATEGORY_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0067,
  },
  name: "Conceptual Volume Category Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_BLOCKING_CONSTRAINT: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0068,
  },
  name: "Conceptual Volume Blocking Constraint",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0069,
  },
  name: "Conceptual Volume Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CONCEPTUAL_VOLUME_TYPE_MODIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x006A,
  },
  name: "Conceptual Volume Type Modifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RT_PRESCRIPTION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x006B,
  },
  name: "RT Prescription Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DOSIMETRIC_OBJECTIVE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x006C,
  },
  name: "Dosimetric Objective Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DOSIMETRIC_OBJECTIVE_TYPE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x006D,
  },
  name: "Dosimetric Objective Type Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DOSIMETRIC_OBJECTIVE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x006E,
  },
  name: "Dosimetric Objective UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const REFERENCED_DOSIMETRIC_OBJECTIVE_UID: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x006F,
  },
  name: "Referenced Dosimetric Objective UID",
  vrs: &[ValueRepresentation::UniqueIdentifier],
  multiplicity: VM_1,
};

pub const DOSIMETRIC_OBJECTIVE_PARAMETER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0070,
  },
  name: "Dosimetric Objective Parameter Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_DOSIMETRIC_OBJECTIVES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0071,
  },
  name: "Referenced Dosimetric Objectives Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ABSOLUTE_DOSIMETRIC_OBJECTIVE_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0073,
  },
  name: "Absolute Dosimetric Objective Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DOSIMETRIC_OBJECTIVE_WEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0074,
  },
  name: "Dosimetric Objective Weight",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const DOSIMETRIC_OBJECTIVE_PURPOSE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0075,
  },
  name: "Dosimetric Objective Purpose",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const PLANNING_INPUT_INFORMATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0076,
  },
  name: "Planning Input Information Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TREATMENT_SITE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0077,
  },
  name: "Treatment Site",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const TREATMENT_SITE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0078,
  },
  name: "Treatment Site Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FRACTION_PATTERN_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0079,
  },
  name: "Fraction Pattern Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TREATMENT_TECHNIQUE_NOTES: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x007A,
  },
  name: "Treatment Technique Notes",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const PRESCRIPTION_NOTES: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x007B,
  },
  name: "Prescription Notes",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const NUMBER_OF_INTERVAL_FRACTIONS: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x007C,
  },
  name: "Number of Interval Fractions",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FRACTIONS: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x007D,
  },
  name: "Number of Fractions",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const INTENDED_DELIVERY_DURATION: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x007E,
  },
  name: "Intended Delivery Duration",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const FRACTIONATION_NOTES: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x007F,
  },
  name: "Fractionation Notes",
  vrs: &[ValueRepresentation::UnlimitedText],
  multiplicity: VM_1,
};

pub const RT_TREATMENT_TECHNIQUE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0080,
  },
  name: "RT Treatment Technique Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRESCRIPTION_NOTES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0081,
  },
  name: "Prescription Notes Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FRACTION_BASED_RELATIONSHIP_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0082,
  },
  name: "Fraction-Based Relationship Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const FRACTION_BASED_RELATIONSHIP_INTERVAL_ANCHOR: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0083,
  },
  name: "Fraction-Based Relationship Interval Anchor",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const MINIMUM_HOURS_BETWEEN_FRACTIONS: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0084,
  },
  name: "Minimum Hours between Fractions",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const INTENDED_FRACTION_START_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0085,
  },
  name: "Intended Fraction Start Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1_TO_N,
};

pub const INTENDED_START_DAY_OF_WEEK: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0086,
  },
  name: "Intended Start Day of Week",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const WEEKDAY_FRACTION_PATTERN_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0087,
  },
  name: "Weekday Fraction Pattern Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DELIVERY_TIME_STRUCTURE_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0088,
  },
  name: "Delivery Time Structure Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TREATMENT_SITE_MODIFIER_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0089,
  },
  name: "Treatment Site Modifier Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ROBOTIC_BASE_LOCATION_INDICATOR: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0090,
  },
  name: "Robotic Base Location Indicator",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ROBOTIC_PATH_NODE_SET_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0091,
  },
  name: "Robotic Path Node Set Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ROBOTIC_NODE_IDENTIFIER: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0092,
  },
  name: "Robotic Node Identifier",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const RT_TREATMENT_SOURCE_COORDINATES: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0093,
  },
  name: "RT Treatment Source Coordinates",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_3,
};

pub const RADIATION_SOURCE_COORDINATE_SYSTEM_YAW_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0094,
  },
  name: "Radiation Source Coordinate SystemYaw Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RADIATION_SOURCE_COORDINATE_SYSTEM_ROLL_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0095,
  },
  name: "Radiation Source Coordinate SystemRoll Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const RADIATION_SOURCE_COORDINATE_SYSTEM_PITCH_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0096,
  },
  name: "Radiation Source Coordinate System Pitch Angle",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const ROBOTIC_PATH_CONTROL_POINT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0097,
  },
  name: "Robotic Path Control Point Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TOMOTHERAPEUTIC_CONTROL_POINT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0098,
  },
  name: "Tomotherapeutic Control Point Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TOMOTHERAPEUTIC_LEAF_OPEN_DURATIONS: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x0099,
  },
  name: "Tomotherapeutic Leaf Open Durations",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_N,
};

pub const TOMOTHERAPEUTIC_LEAF_INITIAL_CLOSED_DURATIONS: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x009A,
  },
  name: "Tomotherapeutic Leaf Initial Closed Durations",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1_TO_N,
};

pub const CONCEPTUAL_VOLUME_IDENTIFICATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x3010,
    element: 0x00A0,
  },
  name: "Conceptual Volume Identification Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ARBITRARY: Item = Item {
  tag: DataElementTag {
    group: 0x4000,
    element: 0x0010,
  },
  name: "Arbitrary",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const TEXT_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x4000,
    element: 0x4000,
  },
  name: "Text Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const RESULTS_ID: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0040,
  },
  name: "Results ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const RESULTS_ID_ISSUER: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0042,
  },
  name: "Results ID Issuer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const REFERENCED_INTERPRETATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0050,
  },
  name: "Referenced Interpretation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REPORT_PRODUCTION_STATUS_TRIAL: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x00FF,
  },
  name: "Report Production Status (Trial)",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INTERPRETATION_RECORDED_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0100,
  },
  name: "Interpretation Recorded Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const INTERPRETATION_RECORDED_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0101,
  },
  name: "Interpretation Recorded Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const INTERPRETATION_RECORDER: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0102,
  },
  name: "Interpretation Recorder",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const REFERENCE_TO_RECORDED_SOUND: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0103,
  },
  name: "Reference to Recorded Sound",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const INTERPRETATION_TRANSCRIPTION_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0108,
  },
  name: "Interpretation Transcription Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const INTERPRETATION_TRANSCRIPTION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0109,
  },
  name: "Interpretation Transcription Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const INTERPRETATION_TRANSCRIBER: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x010A,
  },
  name: "Interpretation Transcriber",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const INTERPRETATION_TEXT: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x010B,
  },
  name: "Interpretation Text",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const INTERPRETATION_AUTHOR: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x010C,
  },
  name: "Interpretation Author",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const INTERPRETATION_APPROVER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0111,
  },
  name: "Interpretation Approver Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INTERPRETATION_APPROVAL_DATE: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0112,
  },
  name: "Interpretation Approval Date",
  vrs: &[ValueRepresentation::Date],
  multiplicity: VM_1,
};

pub const INTERPRETATION_APPROVAL_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0113,
  },
  name: "Interpretation Approval Time",
  vrs: &[ValueRepresentation::Time],
  multiplicity: VM_1,
};

pub const PHYSICIAN_APPROVING_INTERPRETATION: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0114,
  },
  name: "Physician Approving Interpretation",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const INTERPRETATION_DIAGNOSIS_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0115,
  },
  name: "Interpretation Diagnosis Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const INTERPRETATION_DIAGNOSIS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0117,
  },
  name: "Interpretation Diagnosis Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const RESULTS_DISTRIBUTION_LIST_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0118,
  },
  name: "Results Distribution List Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DISTRIBUTION_NAME: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0119,
  },
  name: "Distribution Name",
  vrs: &[ValueRepresentation::PersonName],
  multiplicity: VM_1,
};

pub const DISTRIBUTION_ADDRESS: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x011A,
  },
  name: "Distribution Address",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const INTERPRETATION_ID: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0200,
  },
  name: "Interpretation ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const INTERPRETATION_ID_ISSUER: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0202,
  },
  name: "Interpretation ID Issuer",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const INTERPRETATION_TYPE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0210,
  },
  name: "Interpretation Type ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INTERPRETATION_STATUS_ID: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0212,
  },
  name: "Interpretation Status ID",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const IMPRESSIONS: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x0300,
  },
  name: "Impressions",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const RESULTS_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x4008,
    element: 0x4000,
  },
  name: "Results Comments",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const LOW_ENERGY_DETECTORS: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x0001,
  },
  name: "Low Energy Detectors",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const HIGH_ENERGY_DETECTORS: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x0002,
  },
  name: "High Energy Detectors",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DETECTOR_GEOMETRY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x0004,
  },
  name: "Detector Geometry Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const THREAT_ROI_VOXEL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1001,
  },
  name: "Threat ROI Voxel Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const THREAT_ROI_BASE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1004,
  },
  name: "Threat ROI Base",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const THREAT_ROI_EXTENTS: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1005,
  },
  name: "Threat ROI Extents",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const THREAT_ROI_BITMAP: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1006,
  },
  name: "Threat ROI Bitmap",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const ROUTE_SEGMENT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1007,
  },
  name: "Route Segment ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const GANTRY_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1008,
  },
  name: "Gantry Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OOI_OWNER_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1009,
  },
  name: "OOI Owner Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ROUTE_SEGMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x100A,
  },
  name: "Route Segment Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const POTENTIAL_THREAT_OBJECT_ID: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1010,
  },
  name: "Potential Threat Object ID",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const THREAT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1011,
  },
  name: "Threat Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const THREAT_CATEGORY: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1012,
  },
  name: "Threat Category",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const THREAT_CATEGORY_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1013,
  },
  name: "Threat Category Description",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const ATD_ABILITY_ASSESSMENT: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1014,
  },
  name: "ATD Ability Assessment",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ATD_ASSESSMENT_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1015,
  },
  name: "ATD Assessment Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ATD_ASSESSMENT_PROBABILITY: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1016,
  },
  name: "ATD Assessment Probability",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const MASS: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1017,
  },
  name: "Mass",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const DENSITY: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1018,
  },
  name: "Density",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const Z_EFFECTIVE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1019,
  },
  name: "Z Effective",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const BOARDING_PASS_ID: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x101A,
  },
  name: "Boarding Pass ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const CENTER_OF_MASS: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x101B,
  },
  name: "Center of Mass",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const CENTER_OF_PTO: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x101C,
  },
  name: "Center of PTO",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const BOUNDING_POLYGON: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x101D,
  },
  name: "Bounding Polygon",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: ValueMultiplicity { min: 6, max: None },
};

pub const ROUTE_SEGMENT_START_LOCATION_ID: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x101E,
  },
  name: "Route Segment Start Location ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const ROUTE_SEGMENT_END_LOCATION_ID: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x101F,
  },
  name: "Route Segment End Location ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const ROUTE_SEGMENT_LOCATION_ID_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1020,
  },
  name: "Route Segment Location ID Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ABORT_REASON: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1021,
  },
  name: "Abort Reason",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const VOLUME_OF_PTO: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1023,
  },
  name: "Volume of PTO",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ABORT_FLAG: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1024,
  },
  name: "Abort Flag",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ROUTE_SEGMENT_START_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1025,
  },
  name: "Route Segment Start Time",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const ROUTE_SEGMENT_END_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1026,
  },
  name: "Route Segment End Time",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const TDR_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1027,
  },
  name: "TDR Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const INTERNATIONAL_ROUTE_SEGMENT: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1028,
  },
  name: "International Route Segment",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const THREAT_DETECTION_ALGORITHM_AND_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1029,
  },
  name: "Threat Detection Algorithm and Version",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1_TO_N,
};

pub const ASSIGNED_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x102A,
  },
  name: "Assigned Location",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const ALARM_DECISION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x102B,
  },
  name: "Alarm Decision Time",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const ALARM_DECISION: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1031,
  },
  name: "Alarm Decision",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const NUMBER_OF_TOTAL_OBJECTS: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1033,
  },
  name: "Number of Total Objects",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_ALARM_OBJECTS: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1034,
  },
  name: "Number of Alarm Objects",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const PTO_REPRESENTATION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1037,
  },
  name: "PTO Representation Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ATD_ASSESSMENT_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1038,
  },
  name: "ATD Assessment Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TIP_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1039,
  },
  name: "TIP Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const DICOS_VERSION: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x103A,
  },
  name: "DICOS Version",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OOI_OWNER_CREATION_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1041,
  },
  name: "OOI Owner Creation Time",
  vrs: &[ValueRepresentation::DateTime],
  multiplicity: VM_1,
};

pub const OOI_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1042,
  },
  name: "OOI Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OOI_SIZE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1043,
  },
  name: "OOI Size",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const ACQUISITION_STATUS: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1044,
  },
  name: "Acquisition Status",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const BASIS_MATERIALS_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1045,
  },
  name: "Basis Materials Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PHANTOM_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1046,
  },
  name: "Phantom Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OOI_OWNER_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1047,
  },
  name: "OOI Owner Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SCAN_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1048,
  },
  name: "Scan Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ITINERARY_ID: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1051,
  },
  name: "Itinerary ID",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ITINERARY_ID_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1052,
  },
  name: "Itinerary ID Type",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const ITINERARY_ID_ASSIGNING_AUTHORITY: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1053,
  },
  name: "Itinerary ID Assigning Authority",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const ROUTE_ID: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1054,
  },
  name: "Route ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const ROUTE_ID_ASSIGNING_AUTHORITY: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1055,
  },
  name: "Route ID Assigning Authority",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const INBOUND_ARRIVAL_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1056,
  },
  name: "Inbound Arrival Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CARRIER_ID: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1058,
  },
  name: "Carrier ID",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const CARRIER_ID_ASSIGNING_AUTHORITY: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1059,
  },
  name: "Carrier ID Assigning Authority",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SOURCE_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1060,
  },
  name: "Source Orientation",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const SOURCE_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1061,
  },
  name: "Source Position",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const BELT_HEIGHT: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1062,
  },
  name: "Belt Height",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const ALGORITHM_ROUTING_CODE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1064,
  },
  name: "Algorithm Routing Code Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TRANSPORT_CLASSIFICATION: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1067,
  },
  name: "Transport Classification",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OOI_TYPE_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1068,
  },
  name: "OOI Type Descriptor",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const TOTAL_PROCESSING_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1069,
  },
  name: "Total Processing Time",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_1,
};

pub const DETECTOR_CALIBRATION_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x106C,
  },
  name: "Detector Calibration Data",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const ADDITIONAL_SCREENING_PERFORMED: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x106D,
  },
  name: "Additional Screening Performed",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ADDITIONAL_INSPECTION_SELECTION_CRITERIA: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x106E,
  },
  name: "Additional Inspection Selection Criteria",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const ADDITIONAL_INSPECTION_METHOD_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x106F,
  },
  name: "Additional Inspection Method Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const AIT_DEVICE_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1070,
  },
  name: "AIT Device Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const QR_MEASUREMENTS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1071,
  },
  name: "QR Measurements Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const TARGET_MATERIAL_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1072,
  },
  name: "Target Material Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const SNR_THRESHOLD: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1073,
  },
  name: "SNR Threshold",
  vrs: &[ValueRepresentation::FloatingPointDouble],
  multiplicity: VM_1,
};

pub const IMAGE_SCALE_REPRESENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1075,
  },
  name: "Image Scale Representation",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const REFERENCED_PTO_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1076,
  },
  name: "Referenced PTO Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const REFERENCED_TDR_INSTANCE_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1077,
  },
  name: "Referenced TDR Instance Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PTO_LOCATION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1078,
  },
  name: "PTO Location Description",
  vrs: &[ValueRepresentation::ShortText],
  multiplicity: VM_1,
};

pub const ANOMALY_LOCATOR_INDICATOR_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x1079,
  },
  name: "Anomaly Locator Indicator Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const ANOMALY_LOCATOR_INDICATOR: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x107A,
  },
  name: "Anomaly Locator Indicator",
  vrs: &[ValueRepresentation::FloatingPointSingle],
  multiplicity: VM_3,
};

pub const PTO_REGION_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x107B,
  },
  name: "PTO Region Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const INSPECTION_SELECTION_CRITERIA: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x107C,
  },
  name: "Inspection Selection Criteria",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const SECONDARY_INSPECTION_METHOD_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x107D,
  },
  name: "Secondary Inspection Method Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PRCS_TO_RCS_ORIENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x4010,
    element: 0x107E,
  },
  name: "PRCS to RCS Orientation",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_6,
};

pub const MAC_PARAMETERS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x4FFE,
    element: 0x0001,
  },
  name: "MAC Parameters Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CURVE_DIMENSIONS: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0005,
  },
  name: "Curve Dimensions",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_POINTS: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0010,
  },
  name: "Number of Points",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const TYPE_OF_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0020,
  },
  name: "Type of Data",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const CURVE_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0022,
  },
  name: "Curve Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const AXIS_UNITS: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0030,
  },
  name: "Axis Units",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1_TO_N,
};

pub const AXIS_LABELS: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0040,
  },
  name: "Axis Labels",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1_TO_N,
};

pub const DATA_VALUE_REPRESENTATION: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0103,
  },
  name: "Data Value Representation",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const MINIMUM_COORDINATE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0104,
  },
  name: "Minimum Coordinate Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const MAXIMUM_COORDINATE_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0105,
  },
  name: "Maximum Coordinate Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const CURVE_RANGE: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0106,
  },
  name: "Curve Range",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1_TO_N,
};

pub const CURVE_DATA_DESCRIPTOR: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0110,
  },
  name: "Curve Data Descriptor",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const COORDINATE_START_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0112,
  },
  name: "Coordinate Start Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const COORDINATE_STEP_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x0114,
  },
  name: "Coordinate Step Value",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const CURVE_ACTIVATION_LAYER: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x1001,
  },
  name: "Curve Activation Layer",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const AUDIO_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x2000,
  },
  name: "Audio Type",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const AUDIO_SAMPLE_FORMAT: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x2002,
  },
  name: "Audio Sample Format",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_CHANNELS: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x2004,
  },
  name: "Number of Channels",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_SAMPLES: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x2006,
  },
  name: "Number of Samples",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const SAMPLE_RATE: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x2008,
  },
  name: "Sample Rate",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const TOTAL_TIME: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x200A,
  },
  name: "Total Time",
  vrs: &[ValueRepresentation::UnsignedLong],
  multiplicity: VM_1,
};

pub const AUDIO_SAMPLE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x200C,
  },
  name: "Audio Sample Data",
  vrs: &[
    ValueRepresentation::OtherByteString,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1,
};

pub const AUDIO_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x200E,
  },
  name: "Audio Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const CURVE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x2500,
  },
  name: "Curve Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const CURVE_REFERENCED_OVERLAY_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x2600,
  },
  name: "Curve Referenced Overlay Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CURVE_REFERENCED_OVERLAY_GROUP: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x2610,
  },
  name: "Curve Referenced Overlay Group",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const CURVE_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x5000,
    element: 0x3000,
  },
  name: "Curve Data",
  vrs: &[
    ValueRepresentation::OtherByteString,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1,
};

pub const SHARED_FUNCTIONAL_GROUPS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x5200,
    element: 0x9229,
  },
  name: "Shared Functional Groups Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const PER_FRAME_FUNCTIONAL_GROUPS_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x5200,
    element: 0x9230,
  },
  name: "Per-Frame Functional Groups Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const WAVEFORM_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0x5400,
    element: 0x0100,
  },
  name: "Waveform Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const CHANNEL_MINIMUM_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x5400,
    element: 0x0110,
  },
  name: "Channel Minimum Value",
  vrs: &[
    ValueRepresentation::OtherByteString,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1,
};

pub const CHANNEL_MAXIMUM_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x5400,
    element: 0x0112,
  },
  name: "Channel Maximum Value",
  vrs: &[
    ValueRepresentation::OtherByteString,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1,
};

pub const WAVEFORM_BITS_ALLOCATED: Item = Item {
  tag: DataElementTag {
    group: 0x5400,
    element: 0x1004,
  },
  name: "Waveform Bits Allocated",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const WAVEFORM_SAMPLE_INTERPRETATION: Item = Item {
  tag: DataElementTag {
    group: 0x5400,
    element: 0x1006,
  },
  name: "Waveform Sample Interpretation",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const WAVEFORM_PADDING_VALUE: Item = Item {
  tag: DataElementTag {
    group: 0x5400,
    element: 0x100A,
  },
  name: "Waveform Padding Value",
  vrs: &[
    ValueRepresentation::OtherByteString,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1,
};

pub const WAVEFORM_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x5400,
    element: 0x1010,
  },
  name: "Waveform Data",
  vrs: &[
    ValueRepresentation::OtherByteString,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1,
};

pub const FIRST_ORDER_PHASE_CORRECTION_ANGLE: Item = Item {
  tag: DataElementTag {
    group: 0x5600,
    element: 0x0010,
  },
  name: "First Order Phase Correction Angle",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const SPECTROSCOPY_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x5600,
    element: 0x0020,
  },
  name: "Spectroscopy Data",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const OVERLAY_ROWS: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0010,
  },
  name: "Overlay Rows",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_COLUMNS: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0011,
  },
  name: "Overlay Columns",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_PLANES: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0012,
  },
  name: "Overlay Planes",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const NUMBER_OF_FRAMES_IN_OVERLAY: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0015,
  },
  name: "Number of Frames in Overlay",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const OVERLAY_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0022,
  },
  name: "Overlay Description",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const OVERLAY_TYPE: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0040,
  },
  name: "Overlay Type",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OVERLAY_SUBTYPE: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0045,
  },
  name: "Overlay Subtype",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const OVERLAY_ORIGIN: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0050,
  },
  name: "Overlay Origin",
  vrs: &[ValueRepresentation::SignedShort],
  multiplicity: VM_2,
};

pub const IMAGE_FRAME_ORIGIN: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0051,
  },
  name: "Image Frame Origin",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_PLANE_ORIGIN: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0052,
  },
  name: "Overlay Plane Origin",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_COMPRESSION_CODE: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0060,
  },
  name: "Overlay Compression Code",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OVERLAY_COMPRESSION_ORIGINATOR: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0061,
  },
  name: "Overlay Compression Originator",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const OVERLAY_COMPRESSION_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0062,
  },
  name: "Overlay Compression Label",
  vrs: &[ValueRepresentation::ShortString],
  multiplicity: VM_1,
};

pub const OVERLAY_COMPRESSION_DESCRIPTION: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0063,
  },
  name: "Overlay Compression Description",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OVERLAY_COMPRESSION_STEP_POINTERS: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0066,
  },
  name: "Overlay Compression Step Pointers",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const OVERLAY_REPEAT_INTERVAL: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0068,
  },
  name: "Overlay Repeat Interval",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_BITS_GROUPED: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0069,
  },
  name: "Overlay Bits Grouped",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_BITS_ALLOCATED: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0100,
  },
  name: "Overlay Bits Allocated",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_BIT_POSITION: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0102,
  },
  name: "Overlay Bit Position",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_FORMAT: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0110,
  },
  name: "Overlay Format",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OVERLAY_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0200,
  },
  name: "Overlay Location",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_CODE_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0800,
  },
  name: "Overlay Code Label",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1_TO_N,
};

pub const OVERLAY_NUMBER_OF_TABLES: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0802,
  },
  name: "Overlay Number of Tables",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_CODE_TABLE_LOCATION: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0803,
  },
  name: "Overlay Code Table Location",
  vrs: &[ValueRepresentation::AttributeTag],
  multiplicity: VM_1_TO_N,
};

pub const OVERLAY_BITS_FOR_CODE_WORD: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x0804,
  },
  name: "Overlay Bits For Code Word",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_ACTIVATION_LAYER: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1001,
  },
  name: "Overlay Activation Layer",
  vrs: &[ValueRepresentation::CodeString],
  multiplicity: VM_1,
};

pub const OVERLAY_DESCRIPTOR_GRAY: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1100,
  },
  name: "Overlay Descriptor - Gray",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_DESCRIPTOR_RED: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1101,
  },
  name: "Overlay Descriptor - Red",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_DESCRIPTOR_GREEN: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1102,
  },
  name: "Overlay Descriptor - Green",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAY_DESCRIPTOR_BLUE: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1103,
  },
  name: "Overlay Descriptor - Blue",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const OVERLAYS_GRAY: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1200,
  },
  name: "Overlays - Gray",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const OVERLAYS_RED: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1201,
  },
  name: "Overlays - Red",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const OVERLAYS_GREEN: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1202,
  },
  name: "Overlays - Green",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const OVERLAYS_BLUE: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1203,
  },
  name: "Overlays - Blue",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1_TO_N,
};

pub const ROI_AREA: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1301,
  },
  name: "ROI Area",
  vrs: &[ValueRepresentation::IntegerString],
  multiplicity: VM_1,
};

pub const ROI_MEAN: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1302,
  },
  name: "ROI Mean",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const ROI_STANDARD_DEVIATION: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1303,
  },
  name: "ROI Standard Deviation",
  vrs: &[ValueRepresentation::DecimalString],
  multiplicity: VM_1,
};

pub const OVERLAY_LABEL: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x1500,
  },
  name: "Overlay Label",
  vrs: &[ValueRepresentation::LongString],
  multiplicity: VM_1,
};

pub const OVERLAY_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x3000,
  },
  name: "Overlay Data",
  vrs: &[
    ValueRepresentation::OtherByteString,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1,
};

pub const OVERLAY_COMMENTS: Item = Item {
  tag: DataElementTag {
    group: 0x6000,
    element: 0x4000,
  },
  name: "Overlay Comments",
  vrs: &[ValueRepresentation::LongText],
  multiplicity: VM_1,
};

pub const EXTENDED_OFFSET_TABLE: Item = Item {
  tag: DataElementTag {
    group: 0x7FE0,
    element: 0x0001,
  },
  name: "Extended Offset Table",
  vrs: &[ValueRepresentation::OtherVeryLongString],
  multiplicity: VM_1,
};

pub const EXTENDED_OFFSET_TABLE_LENGTHS: Item = Item {
  tag: DataElementTag {
    group: 0x7FE0,
    element: 0x0002,
  },
  name: "Extended Offset Table Lengths",
  vrs: &[ValueRepresentation::OtherVeryLongString],
  multiplicity: VM_1,
};

pub const ENCAPSULATED_PIXEL_DATA_VALUE_TOTAL_LENGTH: Item = Item {
  tag: DataElementTag {
    group: 0x7FE0,
    element: 0x0003,
  },
  name: "Encapsulated Pixel Data Value Total Length",
  vrs: &[ValueRepresentation::UnsignedVeryLong],
  multiplicity: VM_1,
};

pub const FLOAT_PIXEL_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x7FE0,
    element: 0x0008,
  },
  name: "Float Pixel Data",
  vrs: &[ValueRepresentation::OtherFloatString],
  multiplicity: VM_1,
};

pub const DOUBLE_FLOAT_PIXEL_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x7FE0,
    element: 0x0009,
  },
  name: "Double Float Pixel Data",
  vrs: &[ValueRepresentation::OtherDoubleString],
  multiplicity: VM_1,
};

pub const PIXEL_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x7FE0,
    element: 0x0010,
  },
  name: "Pixel Data",
  vrs: &[
    ValueRepresentation::OtherByteString,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1,
};

pub const COEFFICIENTS_SDVN: Item = Item {
  tag: DataElementTag {
    group: 0x7FE0,
    element: 0x0020,
  },
  name: "Coefficients SDVN",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const COEFFICIENTS_SDHN: Item = Item {
  tag: DataElementTag {
    group: 0x7FE0,
    element: 0x0030,
  },
  name: "Coefficients SDHN",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const COEFFICIENTS_SDDN: Item = Item {
  tag: DataElementTag {
    group: 0x7FE0,
    element: 0x0040,
  },
  name: "Coefficients SDDN",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const VARIABLE_PIXEL_DATA: Item = Item {
  tag: DataElementTag {
    group: 0x7F00,
    element: 0x0010,
  },
  name: "Variable Pixel Data",
  vrs: &[
    ValueRepresentation::OtherByteString,
    ValueRepresentation::OtherWordString,
  ],
  multiplicity: VM_1,
};

pub const VARIABLE_NEXT_DATA_GROUP: Item = Item {
  tag: DataElementTag {
    group: 0x7F00,
    element: 0x0011,
  },
  name: "Variable Next Data Group",
  vrs: &[ValueRepresentation::UnsignedShort],
  multiplicity: VM_1,
};

pub const VARIABLE_COEFFICIENTS_SDVN: Item = Item {
  tag: DataElementTag {
    group: 0x7F00,
    element: 0x0020,
  },
  name: "Variable Coefficients SDVN",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const VARIABLE_COEFFICIENTS_SDHN: Item = Item {
  tag: DataElementTag {
    group: 0x7F00,
    element: 0x0030,
  },
  name: "Variable Coefficients SDHN",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const VARIABLE_COEFFICIENTS_SDDN: Item = Item {
  tag: DataElementTag {
    group: 0x7F00,
    element: 0x0040,
  },
  name: "Variable Coefficients SDDN",
  vrs: &[ValueRepresentation::OtherWordString],
  multiplicity: VM_1,
};

pub const DIGITAL_SIGNATURES_SEQUENCE: Item = Item {
  tag: DataElementTag {
    group: 0xFFFA,
    element: 0xFFFA,
  },
  name: "Digital Signatures Sequence",
  vrs: &[ValueRepresentation::Sequence],
  multiplicity: VM_1,
};

pub const DATA_SET_TRAILING_PADDING: Item = Item {
  tag: DataElementTag {
    group: 0xFFFC,
    element: 0xFFFC,
  },
  name: "Data Set Trailing Padding",
  vrs: &[ValueRepresentation::OtherByteString],
  multiplicity: VM_1,
};

pub const ITEM: Item = Item {
  tag: DataElementTag {
    group: 0xFFFE,
    element: 0xE000,
  },
  name: "Item",
  vrs: &[],
  multiplicity: VM_1,
};

pub const ITEM_DELIMITATION_ITEM: Item = Item {
  tag: DataElementTag {
    group: 0xFFFE,
    element: 0xE00D,
  },
  name: "Item Delimitation Item",
  vrs: &[],
  multiplicity: VM_1,
};

pub const SEQUENCE_DELIMITATION_ITEM: Item = Item {
  tag: DataElementTag {
    group: 0xFFFE,
    element: 0xE0DD,
  },
  name: "Sequence Delimitation Item",
  vrs: &[],
  multiplicity: VM_1,
};

/// Returns details for a data element in group 0x0002.
///
fn find_element_in_group_0002(element: u16) -> Result<Item, ()> {
  match element {
    0x0000 => Ok(FILE_META_INFORMATION_GROUP_LENGTH),
    0x0001 => Ok(FILE_META_INFORMATION_VERSION),
    0x0002 => Ok(MEDIA_STORAGE_SOP_CLASS_UID),
    0x0003 => Ok(MEDIA_STORAGE_SOP_INSTANCE_UID),
    0x0010 => Ok(TRANSFER_SYNTAX_UID),
    0x0012 => Ok(IMPLEMENTATION_CLASS_UID),
    0x0013 => Ok(IMPLEMENTATION_VERSION_NAME),
    0x0016 => Ok(SOURCE_APPLICATION_ENTITY_TITLE),
    0x0017 => Ok(SENDING_APPLICATION_ENTITY_TITLE),
    0x0018 => Ok(RECEIVING_APPLICATION_ENTITY_TITLE),
    0x0026 => Ok(SOURCE_PRESENTATION_ADDRESS),
    0x0027 => Ok(SENDING_PRESENTATION_ADDRESS),
    0x0028 => Ok(RECEIVING_PRESENTATION_ADDRESS),
    0x0031 => Ok(RTV_META_INFORMATION_VERSION),
    0x0032 => Ok(RTV_COMMUNICATION_SOP_CLASS_UID),
    0x0033 => Ok(RTV_COMMUNICATION_SOP_INSTANCE_UID),
    0x0035 => Ok(RTV_SOURCE_IDENTIFIER),
    0x0036 => Ok(RTV_FLOW_IDENTIFIER),
    0x0037 => Ok(RTV_FLOW_RTP_SAMPLING_RATE),
    0x0038 => Ok(RTV_FLOW_ACTUAL_FRAME_DURATION),
    0x0100 => Ok(PRIVATE_INFORMATION_CREATOR_UID),
    0x0102 => Ok(PRIVATE_INFORMATION),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0004.
///
fn find_element_in_group_0004(element: u16) -> Result<Item, ()> {
  match element {
    0x1130 => Ok(FILE_SET_ID),
    0x1141 => Ok(FILE_SET_DESCRIPTOR_FILE_ID),
    0x1142 => Ok(SPECIFIC_CHARACTER_SET_OF_FILE_SET_DESCRIPTOR_FILE),
    0x1200 => {
      Ok(OFFSET_OF_THE_FIRST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY)
    }
    0x1202 => {
      Ok(OFFSET_OF_THE_LAST_DIRECTORY_RECORD_OF_THE_ROOT_DIRECTORY_ENTITY)
    }
    0x1212 => Ok(FILE_SET_CONSISTENCY_FLAG),
    0x1220 => Ok(DIRECTORY_RECORD_SEQUENCE),
    0x1400 => Ok(OFFSET_OF_THE_NEXT_DIRECTORY_RECORD),
    0x1410 => Ok(RECORD_IN_USE_FLAG),
    0x1420 => Ok(OFFSET_OF_REFERENCED_LOWER_LEVEL_DIRECTORY_ENTITY),
    0x1430 => Ok(DIRECTORY_RECORD_TYPE),
    0x1432 => Ok(PRIVATE_RECORD_UID),
    0x1500 => Ok(REFERENCED_FILE_ID),
    0x1504 => Ok(MRDR_DIRECTORY_RECORD_OFFSET),
    0x1510 => Ok(REFERENCED_SOP_CLASS_UID_IN_FILE),
    0x1511 => Ok(REFERENCED_SOP_INSTANCE_UID_IN_FILE),
    0x1512 => Ok(REFERENCED_TRANSFER_SYNTAX_UID_IN_FILE),
    0x151A => Ok(REFERENCED_RELATED_GENERAL_SOP_CLASS_UID_IN_FILE),
    0x1600 => Ok(NUMBER_OF_REFERENCES),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0006.
///
fn find_element_in_group_0006(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(CURRENT_FRAME_FUNCTIONAL_GROUPS_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0008.
///
fn find_element_in_group_0008(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(LENGTH_TO_END),
    0x0005 => Ok(SPECIFIC_CHARACTER_SET),
    0x0006 => Ok(LANGUAGE_CODE_SEQUENCE),
    0x0008 => Ok(IMAGE_TYPE),
    0x0010 => Ok(RECOGNITION_CODE),
    0x0012 => Ok(INSTANCE_CREATION_DATE),
    0x0013 => Ok(INSTANCE_CREATION_TIME),
    0x0014 => Ok(INSTANCE_CREATOR_UID),
    0x0015 => Ok(INSTANCE_COERCION_DATE_TIME),
    0x0016 => Ok(SOP_CLASS_UID),
    0x0017 => Ok(ACQUISITION_UID),
    0x0018 => Ok(SOP_INSTANCE_UID),
    0x0019 => Ok(PYRAMID_UID),
    0x001A => Ok(RELATED_GENERAL_SOP_CLASS_UID),
    0x001B => Ok(ORIGINAL_SPECIALIZED_SOP_CLASS_UID),
    0x001C => Ok(SYNTHETIC_DATA),
    0x0020 => Ok(STUDY_DATE),
    0x0021 => Ok(SERIES_DATE),
    0x0022 => Ok(ACQUISITION_DATE),
    0x0023 => Ok(CONTENT_DATE),
    0x0024 => Ok(OVERLAY_DATE),
    0x0025 => Ok(CURVE_DATE),
    0x002A => Ok(ACQUISITION_DATE_TIME),
    0x0030 => Ok(STUDY_TIME),
    0x0031 => Ok(SERIES_TIME),
    0x0032 => Ok(ACQUISITION_TIME),
    0x0033 => Ok(CONTENT_TIME),
    0x0034 => Ok(OVERLAY_TIME),
    0x0035 => Ok(CURVE_TIME),
    0x0040 => Ok(DATA_SET_TYPE),
    0x0041 => Ok(DATA_SET_SUBTYPE),
    0x0042 => Ok(NUCLEAR_MEDICINE_SERIES_TYPE),
    0x0050 => Ok(ACCESSION_NUMBER),
    0x0051 => Ok(ISSUER_OF_ACCESSION_NUMBER_SEQUENCE),
    0x0052 => Ok(QUERY_RETRIEVE_LEVEL),
    0x0053 => Ok(QUERY_RETRIEVE_VIEW),
    0x0054 => Ok(RETRIEVE_AE_TITLE),
    0x0055 => Ok(STATION_AE_TITLE),
    0x0056 => Ok(INSTANCE_AVAILABILITY),
    0x0058 => Ok(FAILED_SOP_INSTANCE_UID_LIST),
    0x0060 => Ok(MODALITY),
    0x0061 => Ok(MODALITIES_IN_STUDY),
    0x0062 => Ok(SOP_CLASSES_IN_STUDY),
    0x0063 => Ok(ANATOMIC_REGIONS_IN_STUDY_CODE_SEQUENCE),
    0x0064 => Ok(CONVERSION_TYPE),
    0x0068 => Ok(PRESENTATION_INTENT_TYPE),
    0x0070 => Ok(MANUFACTURER),
    0x0080 => Ok(INSTITUTION_NAME),
    0x0081 => Ok(INSTITUTION_ADDRESS),
    0x0082 => Ok(INSTITUTION_CODE_SEQUENCE),
    0x0090 => Ok(REFERRING_PHYSICIAN_NAME),
    0x0092 => Ok(REFERRING_PHYSICIAN_ADDRESS),
    0x0094 => Ok(REFERRING_PHYSICIAN_TELEPHONE_NUMBERS),
    0x0096 => Ok(REFERRING_PHYSICIAN_IDENTIFICATION_SEQUENCE),
    0x009C => Ok(CONSULTING_PHYSICIAN_NAME),
    0x009D => Ok(CONSULTING_PHYSICIAN_IDENTIFICATION_SEQUENCE),
    0x0100 => Ok(CODE_VALUE),
    0x0101 => Ok(EXTENDED_CODE_VALUE),
    0x0102 => Ok(CODING_SCHEME_DESIGNATOR),
    0x0103 => Ok(CODING_SCHEME_VERSION),
    0x0104 => Ok(CODE_MEANING),
    0x0105 => Ok(MAPPING_RESOURCE),
    0x0106 => Ok(CONTEXT_GROUP_VERSION),
    0x0107 => Ok(CONTEXT_GROUP_LOCAL_VERSION),
    0x0108 => Ok(EXTENDED_CODE_MEANING),
    0x0109 => Ok(CODING_SCHEME_RESOURCES_SEQUENCE),
    0x010A => Ok(CODING_SCHEME_URL_TYPE),
    0x010B => Ok(CONTEXT_GROUP_EXTENSION_FLAG),
    0x010C => Ok(CODING_SCHEME_UID),
    0x010D => Ok(CONTEXT_GROUP_EXTENSION_CREATOR_UID),
    0x010E => Ok(CODING_SCHEME_URL),
    0x010F => Ok(CONTEXT_IDENTIFIER),
    0x0110 => Ok(CODING_SCHEME_IDENTIFICATION_SEQUENCE),
    0x0112 => Ok(CODING_SCHEME_REGISTRY),
    0x0114 => Ok(CODING_SCHEME_EXTERNAL_ID),
    0x0115 => Ok(CODING_SCHEME_NAME),
    0x0116 => Ok(CODING_SCHEME_RESPONSIBLE_ORGANIZATION),
    0x0117 => Ok(CONTEXT_UID),
    0x0118 => Ok(MAPPING_RESOURCE_UID),
    0x0119 => Ok(LONG_CODE_VALUE),
    0x0120 => Ok(URN_CODE_VALUE),
    0x0121 => Ok(EQUIVALENT_CODE_SEQUENCE),
    0x0122 => Ok(MAPPING_RESOURCE_NAME),
    0x0123 => Ok(CONTEXT_GROUP_IDENTIFICATION_SEQUENCE),
    0x0124 => Ok(MAPPING_RESOURCE_IDENTIFICATION_SEQUENCE),
    0x0201 => Ok(TIMEZONE_OFFSET_FROM_UTC),
    0x0220 => Ok(RESPONSIBLE_GROUP_CODE_SEQUENCE),
    0x0221 => Ok(EQUIPMENT_MODALITY),
    0x0222 => Ok(MANUFACTURER_RELATED_MODEL_GROUP),
    0x0300 => Ok(PRIVATE_DATA_ELEMENT_CHARACTERISTICS_SEQUENCE),
    0x0301 => Ok(PRIVATE_GROUP_REFERENCE),
    0x0302 => Ok(PRIVATE_CREATOR_REFERENCE),
    0x0303 => Ok(BLOCK_IDENTIFYING_INFORMATION_STATUS),
    0x0304 => Ok(NONIDENTIFYING_PRIVATE_ELEMENTS),
    0x0305 => Ok(DEIDENTIFICATION_ACTION_SEQUENCE),
    0x0306 => Ok(IDENTIFYING_PRIVATE_ELEMENTS),
    0x0307 => Ok(DEIDENTIFICATION_ACTION),
    0x0308 => Ok(PRIVATE_DATA_ELEMENT),
    0x0309 => Ok(PRIVATE_DATA_ELEMENT_VALUE_MULTIPLICITY),
    0x030A => Ok(PRIVATE_DATA_ELEMENT_VALUE_REPRESENTATION),
    0x030B => Ok(PRIVATE_DATA_ELEMENT_NUMBER_OF_ITEMS),
    0x030C => Ok(PRIVATE_DATA_ELEMENT_NAME),
    0x030D => Ok(PRIVATE_DATA_ELEMENT_KEYWORD),
    0x030E => Ok(PRIVATE_DATA_ELEMENT_DESCRIPTION),
    0x030F => Ok(PRIVATE_DATA_ELEMENT_ENCODING),
    0x0310 => Ok(PRIVATE_DATA_ELEMENT_DEFINITION_SEQUENCE),
    0x0400 => Ok(SCOPE_OF_INVENTORY_SEQUENCE),
    0x0401 => Ok(INVENTORY_PURPOSE),
    0x0402 => Ok(INVENTORY_INSTANCE_DESCRIPTION),
    0x0403 => Ok(INVENTORY_LEVEL),
    0x0404 => Ok(ITEM_INVENTORY_DATE_TIME),
    0x0405 => Ok(REMOVED_FROM_OPERATIONAL_USE),
    0x0406 => Ok(REASON_FOR_REMOVAL_CODE_SEQUENCE),
    0x0407 => Ok(STORED_INSTANCE_BASE_URI),
    0x0408 => Ok(FOLDER_ACCESS_URI),
    0x0409 => Ok(FILE_ACCESS_URI),
    0x040A => Ok(CONTAINER_FILE_TYPE),
    0x040B => Ok(FILENAME_IN_CONTAINER),
    0x040C => Ok(FILE_OFFSET_IN_CONTAINER),
    0x040D => Ok(FILE_LENGTH_IN_CONTAINER),
    0x040E => Ok(STORED_INSTANCE_TRANSFER_SYNTAX_UID),
    0x040F => Ok(EXTENDED_MATCHING_MECHANISMS),
    0x0410 => Ok(RANGE_MATCHING_SEQUENCE),
    0x0411 => Ok(LIST_OF_UID_MATCHING_SEQUENCE),
    0x0412 => Ok(EMPTY_VALUE_MATCHING_SEQUENCE),
    0x0413 => Ok(GENERAL_MATCHING_SEQUENCE),
    0x0414 => Ok(REQUESTED_STATUS_INTERVAL),
    0x0415 => Ok(RETAIN_INSTANCES),
    0x0416 => Ok(EXPIRATION_DATE_TIME),
    0x0417 => Ok(TRANSACTION_STATUS),
    0x0418 => Ok(TRANSACTION_STATUS_COMMENT),
    0x0419 => Ok(FILE_SET_ACCESS_SEQUENCE),
    0x041A => Ok(FILE_ACCESS_SEQUENCE),
    0x041B => Ok(RECORD_KEY),
    0x041C => Ok(PRIOR_RECORD_KEY),
    0x041D => Ok(METADATA_SEQUENCE),
    0x041E => Ok(UPDATED_METADATA_SEQUENCE),
    0x041F => Ok(STUDY_UPDATE_DATE_TIME),
    0x0420 => Ok(INVENTORY_ACCESS_END_POINTS_SEQUENCE),
    0x0421 => Ok(STUDY_ACCESS_END_POINTS_SEQUENCE),
    0x0422 => Ok(INCORPORATED_INVENTORY_INSTANCE_SEQUENCE),
    0x0423 => Ok(INVENTORIED_STUDIES_SEQUENCE),
    0x0424 => Ok(INVENTORIED_SERIES_SEQUENCE),
    0x0425 => Ok(INVENTORIED_INSTANCES_SEQUENCE),
    0x0426 => Ok(INVENTORY_COMPLETION_STATUS),
    0x0427 => Ok(NUMBER_OF_STUDY_RECORDS_IN_INSTANCE),
    0x0428 => Ok(TOTAL_NUMBER_OF_STUDY_RECORDS),
    0x0429 => Ok(MAXIMUM_NUMBER_OF_RECORDS),
    0x1000 => Ok(NETWORK_ID),
    0x1010 => Ok(STATION_NAME),
    0x1030 => Ok(STUDY_DESCRIPTION),
    0x1032 => Ok(PROCEDURE_CODE_SEQUENCE),
    0x103E => Ok(SERIES_DESCRIPTION),
    0x103F => Ok(SERIES_DESCRIPTION_CODE_SEQUENCE),
    0x1040 => Ok(INSTITUTIONAL_DEPARTMENT_NAME),
    0x1041 => Ok(INSTITUTIONAL_DEPARTMENT_TYPE_CODE_SEQUENCE),
    0x1048 => Ok(PHYSICIANS_OF_RECORD),
    0x1049 => Ok(PHYSICIANS_OF_RECORD_IDENTIFICATION_SEQUENCE),
    0x1050 => Ok(PERFORMING_PHYSICIAN_NAME),
    0x1052 => Ok(PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE),
    0x1060 => Ok(NAME_OF_PHYSICIANS_READING_STUDY),
    0x1062 => Ok(PHYSICIANS_READING_STUDY_IDENTIFICATION_SEQUENCE),
    0x1070 => Ok(OPERATORS_NAME),
    0x1072 => Ok(OPERATOR_IDENTIFICATION_SEQUENCE),
    0x1080 => Ok(ADMITTING_DIAGNOSES_DESCRIPTION),
    0x1084 => Ok(ADMITTING_DIAGNOSES_CODE_SEQUENCE),
    0x1088 => Ok(PYRAMID_DESCRIPTION),
    0x1090 => Ok(MANUFACTURER_MODEL_NAME),
    0x1100 => Ok(REFERENCED_RESULTS_SEQUENCE),
    0x1110 => Ok(REFERENCED_STUDY_SEQUENCE),
    0x1111 => Ok(REFERENCED_PERFORMED_PROCEDURE_STEP_SEQUENCE),
    0x1112 => Ok(REFERENCED_INSTANCES_BY_SOP_CLASS_SEQUENCE),
    0x1115 => Ok(REFERENCED_SERIES_SEQUENCE),
    0x1120 => Ok(REFERENCED_PATIENT_SEQUENCE),
    0x1125 => Ok(REFERENCED_VISIT_SEQUENCE),
    0x1130 => Ok(REFERENCED_OVERLAY_SEQUENCE),
    0x1134 => Ok(REFERENCED_STEREOMETRIC_INSTANCE_SEQUENCE),
    0x113A => Ok(REFERENCED_WAVEFORM_SEQUENCE),
    0x1140 => Ok(REFERENCED_IMAGE_SEQUENCE),
    0x1145 => Ok(REFERENCED_CURVE_SEQUENCE),
    0x114A => Ok(REFERENCED_INSTANCE_SEQUENCE),
    0x114B => Ok(REFERENCED_REAL_WORLD_VALUE_MAPPING_INSTANCE_SEQUENCE),
    0x1150 => Ok(REFERENCED_SOP_CLASS_UID),
    0x1155 => Ok(REFERENCED_SOP_INSTANCE_UID),
    0x1156 => Ok(DEFINITION_SOURCE_SEQUENCE),
    0x115A => Ok(SOP_CLASSES_SUPPORTED),
    0x1160 => Ok(REFERENCED_FRAME_NUMBER),
    0x1161 => Ok(SIMPLE_FRAME_LIST),
    0x1162 => Ok(CALCULATED_FRAME_LIST),
    0x1163 => Ok(TIME_RANGE),
    0x1164 => Ok(FRAME_EXTRACTION_SEQUENCE),
    0x1167 => Ok(MULTI_FRAME_SOURCE_SOP_INSTANCE_UID),
    0x1190 => Ok(RETRIEVE_URL),
    0x1195 => Ok(TRANSACTION_UID),
    0x1196 => Ok(WARNING_REASON),
    0x1197 => Ok(FAILURE_REASON),
    0x1198 => Ok(FAILED_SOP_SEQUENCE),
    0x1199 => Ok(REFERENCED_SOP_SEQUENCE),
    0x119A => Ok(OTHER_FAILURES_SEQUENCE),
    0x119B => Ok(FAILED_STUDY_SEQUENCE),
    0x1200 => Ok(STUDIES_CONTAINING_OTHER_REFERENCED_INSTANCES_SEQUENCE),
    0x1250 => Ok(RELATED_SERIES_SEQUENCE),
    0x2110 => Ok(LOSSY_IMAGE_COMPRESSION_RETIRED),
    0x2111 => Ok(DERIVATION_DESCRIPTION),
    0x2112 => Ok(SOURCE_IMAGE_SEQUENCE),
    0x2120 => Ok(STAGE_NAME),
    0x2122 => Ok(STAGE_NUMBER),
    0x2124 => Ok(NUMBER_OF_STAGES),
    0x2127 => Ok(VIEW_NAME),
    0x2128 => Ok(VIEW_NUMBER),
    0x2129 => Ok(NUMBER_OF_EVENT_TIMERS),
    0x212A => Ok(NUMBER_OF_VIEWS_IN_STAGE),
    0x2130 => Ok(EVENT_ELAPSED_TIMES),
    0x2132 => Ok(EVENT_TIMER_NAMES),
    0x2133 => Ok(EVENT_TIMER_SEQUENCE),
    0x2134 => Ok(EVENT_TIME_OFFSET),
    0x2135 => Ok(EVENT_CODE_SEQUENCE),
    0x2142 => Ok(START_TRIM),
    0x2143 => Ok(STOP_TRIM),
    0x2144 => Ok(RECOMMENDED_DISPLAY_FRAME_RATE),
    0x2200 => Ok(TRANSDUCER_POSITION),
    0x2204 => Ok(TRANSDUCER_ORIENTATION),
    0x2208 => Ok(ANATOMIC_STRUCTURE),
    0x2218 => Ok(ANATOMIC_REGION_SEQUENCE),
    0x2220 => Ok(ANATOMIC_REGION_MODIFIER_SEQUENCE),
    0x2228 => Ok(PRIMARY_ANATOMIC_STRUCTURE_SEQUENCE),
    0x2229 => Ok(ANATOMIC_STRUCTURE_SPACE_OR_REGION_SEQUENCE),
    0x2230 => Ok(PRIMARY_ANATOMIC_STRUCTURE_MODIFIER_SEQUENCE),
    0x2240 => Ok(TRANSDUCER_POSITION_SEQUENCE),
    0x2242 => Ok(TRANSDUCER_POSITION_MODIFIER_SEQUENCE),
    0x2244 => Ok(TRANSDUCER_ORIENTATION_SEQUENCE),
    0x2246 => Ok(TRANSDUCER_ORIENTATION_MODIFIER_SEQUENCE),
    0x2251 => Ok(ANATOMIC_STRUCTURE_SPACE_OR_REGION_CODE_SEQUENCE_TRIAL),
    0x2253 => Ok(ANATOMIC_PORTAL_OF_ENTRANCE_CODE_SEQUENCE_TRIAL),
    0x2255 => Ok(ANATOMIC_APPROACH_DIRECTION_CODE_SEQUENCE_TRIAL),
    0x2256 => Ok(ANATOMIC_PERSPECTIVE_DESCRIPTION_TRIAL),
    0x2257 => Ok(ANATOMIC_PERSPECTIVE_CODE_SEQUENCE_TRIAL),
    0x2258 => Ok(ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_DESCRIPTION_TRIAL),
    0x2259 => Ok(ANATOMIC_LOCATION_OF_EXAMINING_INSTRUMENT_CODE_SEQUENCE_TRIAL),
    0x225A => {
      Ok(ANATOMIC_STRUCTURE_SPACE_OR_REGION_MODIFIER_CODE_SEQUENCE_TRIAL)
    }
    0x225C => Ok(ON_AXIS_BACKGROUND_ANATOMIC_STRUCTURE_CODE_SEQUENCE_TRIAL),
    0x3001 => Ok(ALTERNATE_REPRESENTATION_SEQUENCE),
    0x3002 => Ok(AVAILABLE_TRANSFER_SYNTAX_UID),
    0x3010 => Ok(IRRADIATION_EVENT_UID),
    0x3011 => Ok(SOURCE_IRRADIATION_EVENT_SEQUENCE),
    0x3012 => Ok(RADIOPHARMACEUTICAL_ADMINISTRATION_EVENT_UID),
    0x4000 => Ok(IDENTIFYING_COMMENTS),
    0x9007 => Ok(FRAME_TYPE),
    0x9092 => Ok(REFERENCED_IMAGE_EVIDENCE_SEQUENCE),
    0x9121 => Ok(REFERENCED_RAW_DATA_SEQUENCE),
    0x9123 => Ok(CREATOR_VERSION_UID),
    0x9124 => Ok(DERIVATION_IMAGE_SEQUENCE),
    0x9154 => Ok(SOURCE_IMAGE_EVIDENCE_SEQUENCE),
    0x9205 => Ok(PIXEL_PRESENTATION),
    0x9206 => Ok(VOLUMETRIC_PROPERTIES),
    0x9207 => Ok(VOLUME_BASED_CALCULATION_TECHNIQUE),
    0x9208 => Ok(COMPLEX_IMAGE_COMPONENT),
    0x9209 => Ok(ACQUISITION_CONTRAST),
    0x9215 => Ok(DERIVATION_CODE_SEQUENCE),
    0x9237 => Ok(REFERENCED_PRESENTATION_STATE_SEQUENCE),
    0x9410 => Ok(REFERENCED_OTHER_PLANE_SEQUENCE),
    0x9458 => Ok(FRAME_DISPLAY_SEQUENCE),
    0x9459 => Ok(RECOMMENDED_DISPLAY_FRAME_RATE_IN_FLOAT),
    0x9460 => Ok(SKIP_FRAME_RANGE_FLAG),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0010.
///
fn find_element_in_group_0010(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(PATIENT_NAME),
    0x0020 => Ok(PATIENT_ID),
    0x0021 => Ok(ISSUER_OF_PATIENT_ID),
    0x0022 => Ok(TYPE_OF_PATIENT_ID),
    0x0024 => Ok(ISSUER_OF_PATIENT_ID_QUALIFIERS_SEQUENCE),
    0x0026 => Ok(SOURCE_PATIENT_GROUP_IDENTIFICATION_SEQUENCE),
    0x0027 => Ok(GROUP_OF_PATIENTS_IDENTIFICATION_SEQUENCE),
    0x0028 => Ok(SUBJECT_RELATIVE_POSITION_IN_IMAGE),
    0x0030 => Ok(PATIENT_BIRTH_DATE),
    0x0032 => Ok(PATIENT_BIRTH_TIME),
    0x0033 => Ok(PATIENT_BIRTH_DATE_IN_ALTERNATIVE_CALENDAR),
    0x0034 => Ok(PATIENT_DEATH_DATE_IN_ALTERNATIVE_CALENDAR),
    0x0035 => Ok(PATIENT_ALTERNATIVE_CALENDAR),
    0x0040 => Ok(PATIENT_SEX),
    0x0050 => Ok(PATIENT_INSURANCE_PLAN_CODE_SEQUENCE),
    0x0101 => Ok(PATIENT_PRIMARY_LANGUAGE_CODE_SEQUENCE),
    0x0102 => Ok(PATIENT_PRIMARY_LANGUAGE_MODIFIER_CODE_SEQUENCE),
    0x0200 => Ok(QUALITY_CONTROL_SUBJECT),
    0x0201 => Ok(QUALITY_CONTROL_SUBJECT_TYPE_CODE_SEQUENCE),
    0x0212 => Ok(STRAIN_DESCRIPTION),
    0x0213 => Ok(STRAIN_NOMENCLATURE),
    0x0214 => Ok(STRAIN_STOCK_NUMBER),
    0x0215 => Ok(STRAIN_SOURCE_REGISTRY_CODE_SEQUENCE),
    0x0216 => Ok(STRAIN_STOCK_SEQUENCE),
    0x0217 => Ok(STRAIN_SOURCE),
    0x0218 => Ok(STRAIN_ADDITIONAL_INFORMATION),
    0x0219 => Ok(STRAIN_CODE_SEQUENCE),
    0x0221 => Ok(GENETIC_MODIFICATIONS_SEQUENCE),
    0x0222 => Ok(GENETIC_MODIFICATIONS_DESCRIPTION),
    0x0223 => Ok(GENETIC_MODIFICATIONS_NOMENCLATURE),
    0x0229 => Ok(GENETIC_MODIFICATIONS_CODE_SEQUENCE),
    0x1000 => Ok(OTHER_PATIENT_IDS),
    0x1001 => Ok(OTHER_PATIENT_NAMES),
    0x1002 => Ok(OTHER_PATIENT_IDS_SEQUENCE),
    0x1005 => Ok(PATIENT_BIRTH_NAME),
    0x1010 => Ok(PATIENT_AGE),
    0x1020 => Ok(PATIENT_SIZE),
    0x1021 => Ok(PATIENT_SIZE_CODE_SEQUENCE),
    0x1022 => Ok(PATIENT_BODY_MASS_INDEX),
    0x1023 => Ok(MEASURED_AP_DIMENSION),
    0x1024 => Ok(MEASURED_LATERAL_DIMENSION),
    0x1030 => Ok(PATIENT_WEIGHT),
    0x1040 => Ok(PATIENT_ADDRESS),
    0x1050 => Ok(INSURANCE_PLAN_IDENTIFICATION),
    0x1060 => Ok(PATIENT_MOTHER_BIRTH_NAME),
    0x1080 => Ok(MILITARY_RANK),
    0x1081 => Ok(BRANCH_OF_SERVICE),
    0x1090 => Ok(MEDICAL_RECORD_LOCATOR),
    0x1100 => Ok(REFERENCED_PATIENT_PHOTO_SEQUENCE),
    0x2000 => Ok(MEDICAL_ALERTS),
    0x2110 => Ok(ALLERGIES),
    0x2150 => Ok(COUNTRY_OF_RESIDENCE),
    0x2152 => Ok(REGION_OF_RESIDENCE),
    0x2154 => Ok(PATIENT_TELEPHONE_NUMBERS),
    0x2155 => Ok(PATIENT_TELECOM_INFORMATION),
    0x2160 => Ok(ETHNIC_GROUP),
    0x2180 => Ok(OCCUPATION),
    0x21A0 => Ok(SMOKING_STATUS),
    0x21B0 => Ok(ADDITIONAL_PATIENT_HISTORY),
    0x21C0 => Ok(PREGNANCY_STATUS),
    0x21D0 => Ok(LAST_MENSTRUAL_DATE),
    0x21F0 => Ok(PATIENT_RELIGIOUS_PREFERENCE),
    0x2201 => Ok(PATIENT_SPECIES_DESCRIPTION),
    0x2202 => Ok(PATIENT_SPECIES_CODE_SEQUENCE),
    0x2203 => Ok(PATIENT_SEX_NEUTERED),
    0x2210 => Ok(ANATOMICAL_ORIENTATION_TYPE),
    0x2292 => Ok(PATIENT_BREED_DESCRIPTION),
    0x2293 => Ok(PATIENT_BREED_CODE_SEQUENCE),
    0x2294 => Ok(BREED_REGISTRATION_SEQUENCE),
    0x2295 => Ok(BREED_REGISTRATION_NUMBER),
    0x2296 => Ok(BREED_REGISTRY_CODE_SEQUENCE),
    0x2297 => Ok(RESPONSIBLE_PERSON),
    0x2298 => Ok(RESPONSIBLE_PERSON_ROLE),
    0x2299 => Ok(RESPONSIBLE_ORGANIZATION),
    0x4000 => Ok(PATIENT_COMMENTS),
    0x9431 => Ok(EXAMINED_BODY_THICKNESS),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0012.
///
fn find_element_in_group_0012(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(CLINICAL_TRIAL_SPONSOR_NAME),
    0x0020 => Ok(CLINICAL_TRIAL_PROTOCOL_ID),
    0x0021 => Ok(CLINICAL_TRIAL_PROTOCOL_NAME),
    0x0022 => Ok(ISSUER_OF_CLINICAL_TRIAL_PROTOCOL_ID),
    0x0023 => Ok(OTHER_CLINICAL_TRIAL_PROTOCOL_IDS_SEQUENCE),
    0x0030 => Ok(CLINICAL_TRIAL_SITE_ID),
    0x0031 => Ok(CLINICAL_TRIAL_SITE_NAME),
    0x0032 => Ok(ISSUER_OF_CLINICAL_TRIAL_SITE_ID),
    0x0040 => Ok(CLINICAL_TRIAL_SUBJECT_ID),
    0x0041 => Ok(ISSUER_OF_CLINICAL_TRIAL_SUBJECT_ID),
    0x0042 => Ok(CLINICAL_TRIAL_SUBJECT_READING_ID),
    0x0043 => Ok(ISSUER_OF_CLINICAL_TRIAL_SUBJECT_READING_ID),
    0x0050 => Ok(CLINICAL_TRIAL_TIME_POINT_ID),
    0x0051 => Ok(CLINICAL_TRIAL_TIME_POINT_DESCRIPTION),
    0x0052 => Ok(LONGITUDINAL_TEMPORAL_OFFSET_FROM_EVENT),
    0x0053 => Ok(LONGITUDINAL_TEMPORAL_EVENT_TYPE),
    0x0054 => Ok(CLINICAL_TRIAL_TIME_POINT_TYPE_CODE_SEQUENCE),
    0x0055 => Ok(ISSUER_OF_CLINICAL_TRIAL_TIME_POINT_ID),
    0x0060 => Ok(CLINICAL_TRIAL_COORDINATING_CENTER_NAME),
    0x0062 => Ok(PATIENT_IDENTITY_REMOVED),
    0x0063 => Ok(DEIDENTIFICATION_METHOD),
    0x0064 => Ok(DEIDENTIFICATION_METHOD_CODE_SEQUENCE),
    0x0071 => Ok(CLINICAL_TRIAL_SERIES_ID),
    0x0072 => Ok(CLINICAL_TRIAL_SERIES_DESCRIPTION),
    0x0073 => Ok(ISSUER_OF_CLINICAL_TRIAL_SERIES_ID),
    0x0081 => Ok(CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_NAME),
    0x0082 => Ok(CLINICAL_TRIAL_PROTOCOL_ETHICS_COMMITTEE_APPROVAL_NUMBER),
    0x0083 => Ok(CONSENT_FOR_CLINICAL_TRIAL_USE_SEQUENCE),
    0x0084 => Ok(DISTRIBUTION_TYPE),
    0x0085 => Ok(CONSENT_FOR_DISTRIBUTION_FLAG),
    0x0086 => Ok(ETHICS_COMMITTEE_APPROVAL_EFFECTIVENESS_START_DATE),
    0x0087 => Ok(ETHICS_COMMITTEE_APPROVAL_EFFECTIVENESS_END_DATE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0014.
///
fn find_element_in_group_0014(element: u16) -> Result<Item, ()> {
  match element {
    0x0023 => Ok(CAD_FILE_FORMAT),
    0x0024 => Ok(COMPONENT_REFERENCE_SYSTEM),
    0x0025 => Ok(COMPONENT_MANUFACTURING_PROCEDURE),
    0x0028 => Ok(COMPONENT_MANUFACTURER),
    0x0030 => Ok(MATERIAL_THICKNESS),
    0x0032 => Ok(MATERIAL_PIPE_DIAMETER),
    0x0034 => Ok(MATERIAL_ISOLATION_DIAMETER),
    0x0042 => Ok(MATERIAL_GRADE),
    0x0044 => Ok(MATERIAL_PROPERTIES_DESCRIPTION),
    0x0045 => Ok(MATERIAL_PROPERTIES_FILE_FORMAT_RETIRED),
    0x0046 => Ok(MATERIAL_NOTES),
    0x0050 => Ok(COMPONENT_SHAPE),
    0x0052 => Ok(CURVATURE_TYPE),
    0x0054 => Ok(OUTER_DIAMETER),
    0x0056 => Ok(INNER_DIAMETER),
    0x0100 => Ok(COMPONENT_WELDER_IDS),
    0x0101 => Ok(SECONDARY_APPROVAL_STATUS),
    0x0102 => Ok(SECONDARY_REVIEW_DATE),
    0x0103 => Ok(SECONDARY_REVIEW_TIME),
    0x0104 => Ok(SECONDARY_REVIEWER_NAME),
    0x0105 => Ok(REPAIR_ID),
    0x0106 => Ok(MULTIPLE_COMPONENT_APPROVAL_SEQUENCE),
    0x0107 => Ok(OTHER_APPROVAL_STATUS),
    0x0108 => Ok(OTHER_SECONDARY_APPROVAL_STATUS),
    0x0200 => Ok(DATA_ELEMENT_LABEL_SEQUENCE),
    0x0201 => Ok(DATA_ELEMENT_LABEL_ITEM_SEQUENCE),
    0x0202 => Ok(DATA_ELEMENT),
    0x0203 => Ok(DATA_ELEMENT_NAME),
    0x0204 => Ok(DATA_ELEMENT_DESCRIPTION),
    0x0205 => Ok(DATA_ELEMENT_CONDITIONALITY),
    0x0206 => Ok(DATA_ELEMENT_MINIMUM_CHARACTERS),
    0x0207 => Ok(DATA_ELEMENT_MAXIMUM_CHARACTERS),
    0x1010 => Ok(ACTUAL_ENVIRONMENTAL_CONDITIONS),
    0x1020 => Ok(EXPIRY_DATE),
    0x1040 => Ok(ENVIRONMENTAL_CONDITIONS),
    0x2002 => Ok(EVALUATOR_SEQUENCE),
    0x2004 => Ok(EVALUATOR_NUMBER),
    0x2006 => Ok(EVALUATOR_NAME),
    0x2008 => Ok(EVALUATION_ATTEMPT),
    0x2012 => Ok(INDICATION_SEQUENCE),
    0x2014 => Ok(INDICATION_NUMBER),
    0x2016 => Ok(INDICATION_LABEL),
    0x2018 => Ok(INDICATION_DESCRIPTION),
    0x201A => Ok(INDICATION_TYPE),
    0x201C => Ok(INDICATION_DISPOSITION),
    0x201E => Ok(INDICATION_ROI_SEQUENCE),
    0x2030 => Ok(INDICATION_PHYSICAL_PROPERTY_SEQUENCE),
    0x2032 => Ok(PROPERTY_LABEL),
    0x2202 => Ok(COORDINATE_SYSTEM_NUMBER_OF_AXES),
    0x2204 => Ok(COORDINATE_SYSTEM_AXES_SEQUENCE),
    0x2206 => Ok(COORDINATE_SYSTEM_AXIS_DESCRIPTION),
    0x2208 => Ok(COORDINATE_SYSTEM_DATA_SET_MAPPING),
    0x220A => Ok(COORDINATE_SYSTEM_AXIS_NUMBER),
    0x220C => Ok(COORDINATE_SYSTEM_AXIS_TYPE),
    0x220E => Ok(COORDINATE_SYSTEM_AXIS_UNITS),
    0x2210 => Ok(COORDINATE_SYSTEM_AXIS_VALUES),
    0x2220 => Ok(COORDINATE_SYSTEM_TRANSFORM_SEQUENCE),
    0x2222 => Ok(TRANSFORM_DESCRIPTION),
    0x2224 => Ok(TRANSFORM_NUMBER_OF_AXES),
    0x2226 => Ok(TRANSFORM_ORDER_OF_AXES),
    0x2228 => Ok(TRANSFORMED_AXIS_UNITS),
    0x222A => Ok(COORDINATE_SYSTEM_TRANSFORM_ROTATION_AND_SCALE_MATRIX),
    0x222C => Ok(COORDINATE_SYSTEM_TRANSFORM_TRANSLATION_MATRIX),
    0x3011 => Ok(INTERNAL_DETECTOR_FRAME_TIME),
    0x3012 => Ok(NUMBER_OF_FRAMES_INTEGRATED),
    0x3020 => Ok(DETECTOR_TEMPERATURE_SEQUENCE),
    0x3022 => Ok(SENSOR_NAME),
    0x3024 => Ok(HORIZONTAL_OFFSET_OF_SENSOR),
    0x3026 => Ok(VERTICAL_OFFSET_OF_SENSOR),
    0x3028 => Ok(SENSOR_TEMPERATURE),
    0x3040 => Ok(DARK_CURRENT_SEQUENCE),
    0x3050 => Ok(DARK_CURRENT_COUNTS),
    0x3060 => Ok(GAIN_CORRECTION_REFERENCE_SEQUENCE),
    0x3070 => Ok(AIR_COUNTS),
    0x3071 => Ok(KV_USED_IN_GAIN_CALIBRATION),
    0x3072 => Ok(MA_USED_IN_GAIN_CALIBRATION),
    0x3073 => Ok(NUMBER_OF_FRAMES_USED_FOR_INTEGRATION),
    0x3074 => Ok(FILTER_MATERIAL_USED_IN_GAIN_CALIBRATION),
    0x3075 => Ok(FILTER_THICKNESS_USED_IN_GAIN_CALIBRATION),
    0x3076 => Ok(DATE_OF_GAIN_CALIBRATION),
    0x3077 => Ok(TIME_OF_GAIN_CALIBRATION),
    0x3080 => Ok(BAD_PIXEL_IMAGE),
    0x3099 => Ok(CALIBRATION_NOTES),
    0x3100 => Ok(LINEARITY_CORRECTION_TECHNIQUE),
    0x3101 => Ok(BEAM_HARDENING_CORRECTION_TECHNIQUE),
    0x4002 => Ok(PULSER_EQUIPMENT_SEQUENCE),
    0x4004 => Ok(PULSER_TYPE),
    0x4006 => Ok(PULSER_NOTES),
    0x4008 => Ok(RECEIVER_EQUIPMENT_SEQUENCE),
    0x400A => Ok(AMPLIFIER_TYPE),
    0x400C => Ok(RECEIVER_NOTES),
    0x400E => Ok(PRE_AMPLIFIER_EQUIPMENT_SEQUENCE),
    0x400F => Ok(PRE_AMPLIFIER_NOTES),
    0x4010 => Ok(TRANSMIT_TRANSDUCER_SEQUENCE),
    0x4011 => Ok(RECEIVE_TRANSDUCER_SEQUENCE),
    0x4012 => Ok(NUMBER_OF_ELEMENTS),
    0x4013 => Ok(ELEMENT_SHAPE),
    0x4014 => Ok(ELEMENT_DIMENSION_A),
    0x4015 => Ok(ELEMENT_DIMENSION_B),
    0x4016 => Ok(ELEMENT_PITCH_A),
    0x4017 => Ok(MEASURED_BEAM_DIMENSION_A),
    0x4018 => Ok(MEASURED_BEAM_DIMENSION_B),
    0x4019 => Ok(LOCATION_OF_MEASURED_BEAM_DIAMETER),
    0x401A => Ok(NOMINAL_FREQUENCY),
    0x401B => Ok(MEASURED_CENTER_FREQUENCY),
    0x401C => Ok(MEASURED_BANDWIDTH),
    0x401D => Ok(ELEMENT_PITCH_B),
    0x4020 => Ok(PULSER_SETTINGS_SEQUENCE),
    0x4022 => Ok(PULSE_WIDTH),
    0x4024 => Ok(EXCITATION_FREQUENCY),
    0x4026 => Ok(MODULATION_TYPE),
    0x4028 => Ok(DAMPING),
    0x4030 => Ok(RECEIVER_SETTINGS_SEQUENCE),
    0x4031 => Ok(ACQUIRED_SOUNDPATH_LENGTH),
    0x4032 => Ok(ACQUISITION_COMPRESSION_TYPE),
    0x4033 => Ok(ACQUISITION_SAMPLE_SIZE),
    0x4034 => Ok(RECTIFIER_SMOOTHING),
    0x4035 => Ok(DAC_SEQUENCE),
    0x4036 => Ok(DAC_TYPE),
    0x4038 => Ok(DAC_GAIN_POINTS),
    0x403A => Ok(DAC_TIME_POINTS),
    0x403C => Ok(DAC_AMPLITUDE),
    0x4040 => Ok(PRE_AMPLIFIER_SETTINGS_SEQUENCE),
    0x4050 => Ok(TRANSMIT_TRANSDUCER_SETTINGS_SEQUENCE),
    0x4051 => Ok(RECEIVE_TRANSDUCER_SETTINGS_SEQUENCE),
    0x4052 => Ok(INCIDENT_ANGLE),
    0x4054 => Ok(COUPLING_TECHNIQUE),
    0x4056 => Ok(COUPLING_MEDIUM),
    0x4057 => Ok(COUPLING_VELOCITY),
    0x4058 => Ok(PROBE_CENTER_LOCATION_X),
    0x4059 => Ok(PROBE_CENTER_LOCATION_Z),
    0x405A => Ok(SOUND_PATH_LENGTH),
    0x405C => Ok(DELAY_LAW_IDENTIFIER),
    0x4060 => Ok(GATE_SETTINGS_SEQUENCE),
    0x4062 => Ok(GATE_THRESHOLD),
    0x4064 => Ok(VELOCITY_OF_SOUND),
    0x4070 => Ok(CALIBRATION_SETTINGS_SEQUENCE),
    0x4072 => Ok(CALIBRATION_PROCEDURE),
    0x4074 => Ok(PROCEDURE_VERSION),
    0x4076 => Ok(PROCEDURE_CREATION_DATE),
    0x4078 => Ok(PROCEDURE_EXPIRATION_DATE),
    0x407A => Ok(PROCEDURE_LAST_MODIFIED_DATE),
    0x407C => Ok(CALIBRATION_TIME),
    0x407E => Ok(CALIBRATION_DATE),
    0x4080 => Ok(PROBE_DRIVE_EQUIPMENT_SEQUENCE),
    0x4081 => Ok(DRIVE_TYPE),
    0x4082 => Ok(PROBE_DRIVE_NOTES),
    0x4083 => Ok(DRIVE_PROBE_SEQUENCE),
    0x4084 => Ok(PROBE_INDUCTANCE),
    0x4085 => Ok(PROBE_RESISTANCE),
    0x4086 => Ok(RECEIVE_PROBE_SEQUENCE),
    0x4087 => Ok(PROBE_DRIVE_SETTINGS_SEQUENCE),
    0x4088 => Ok(BRIDGE_RESISTORS),
    0x4089 => Ok(PROBE_ORIENTATION_ANGLE),
    0x408B => Ok(USER_SELECTED_GAIN_Y),
    0x408C => Ok(USER_SELECTED_PHASE),
    0x408D => Ok(USER_SELECTED_OFFSET_X),
    0x408E => Ok(USER_SELECTED_OFFSET_Y),
    0x4091 => Ok(CHANNEL_SETTINGS_SEQUENCE),
    0x4092 => Ok(CHANNEL_THRESHOLD),
    0x409A => Ok(SCANNER_SETTINGS_SEQUENCE),
    0x409B => Ok(SCAN_PROCEDURE),
    0x409C => Ok(TRANSLATION_RATE_X),
    0x409D => Ok(TRANSLATION_RATE_Y),
    0x409F => Ok(CHANNEL_OVERLAP),
    0x40A0 => Ok(IMAGE_QUALITY_INDICATOR_TYPE),
    0x40A1 => Ok(IMAGE_QUALITY_INDICATOR_MATERIAL),
    0x40A2 => Ok(IMAGE_QUALITY_INDICATOR_SIZE),
    0x5002 => Ok(LINAC_ENERGY),
    0x5004 => Ok(LINAC_OUTPUT),
    0x5100 => Ok(ACTIVE_APERTURE),
    0x5101 => Ok(TOTAL_APERTURE),
    0x5102 => Ok(APERTURE_ELEVATION),
    0x5103 => Ok(MAIN_LOBE_ANGLE),
    0x5104 => Ok(MAIN_ROOF_ANGLE),
    0x5105 => Ok(CONNECTOR_TYPE),
    0x5106 => Ok(WEDGE_MODEL_NUMBER),
    0x5107 => Ok(WEDGE_ANGLE_FLOAT),
    0x5108 => Ok(WEDGE_ROOF_ANGLE),
    0x5109 => Ok(WEDGE_ELEMENT_1_POSITION),
    0x510A => Ok(WEDGE_MATERIAL_VELOCITY),
    0x510B => Ok(WEDGE_MATERIAL),
    0x510C => Ok(WEDGE_OFFSET_Z),
    0x510D => Ok(WEDGE_ORIGIN_OFFSET_X),
    0x510E => Ok(WEDGE_TIME_DELAY),
    0x510F => Ok(WEDGE_NAME),
    0x5110 => Ok(WEDGE_MANUFACTURER_NAME),
    0x5111 => Ok(WEDGE_DESCRIPTION),
    0x5112 => Ok(NOMINAL_BEAM_ANGLE),
    0x5113 => Ok(WEDGE_OFFSET_X),
    0x5114 => Ok(WEDGE_OFFSET_Y),
    0x5115 => Ok(WEDGE_TOTAL_LENGTH),
    0x5116 => Ok(WEDGE_IN_CONTACT_LENGTH),
    0x5117 => Ok(WEDGE_FRONT_GAP),
    0x5118 => Ok(WEDGE_TOTAL_HEIGHT),
    0x5119 => Ok(WEDGE_FRONT_HEIGHT),
    0x511A => Ok(WEDGE_REAR_HEIGHT),
    0x511B => Ok(WEDGE_TOTAL_WIDTH),
    0x511C => Ok(WEDGE_IN_CONTACT_WIDTH),
    0x511D => Ok(WEDGE_CHAMFER_HEIGHT),
    0x511E => Ok(WEDGE_CURVE),
    0x511F => Ok(RADIUS_ALONG_WEDGE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0016.
///
fn find_element_in_group_0016(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(WHITE_POINT),
    0x0002 => Ok(PRIMARY_CHROMATICITIES),
    0x0003 => Ok(BATTERY_LEVEL),
    0x0004 => Ok(EXPOSURE_TIME_IN_SECONDS),
    0x0005 => Ok(F_NUMBER),
    0x0006 => Ok(OECF_ROWS),
    0x0007 => Ok(OECF_COLUMNS),
    0x0008 => Ok(OECF_COLUMN_NAMES),
    0x0009 => Ok(OECF_VALUES),
    0x000A => Ok(SPATIAL_FREQUENCY_RESPONSE_ROWS),
    0x000B => Ok(SPATIAL_FREQUENCY_RESPONSE_COLUMNS),
    0x000C => Ok(SPATIAL_FREQUENCY_RESPONSE_COLUMN_NAMES),
    0x000D => Ok(SPATIAL_FREQUENCY_RESPONSE_VALUES),
    0x000E => Ok(COLOR_FILTER_ARRAY_PATTERN_ROWS),
    0x000F => Ok(COLOR_FILTER_ARRAY_PATTERN_COLUMNS),
    0x0010 => Ok(COLOR_FILTER_ARRAY_PATTERN_VALUES),
    0x0011 => Ok(FLASH_FIRING_STATUS),
    0x0012 => Ok(FLASH_RETURN_STATUS),
    0x0013 => Ok(FLASH_MODE),
    0x0014 => Ok(FLASH_FUNCTION_PRESENT),
    0x0015 => Ok(FLASH_RED_EYE_MODE),
    0x0016 => Ok(EXPOSURE_PROGRAM),
    0x0017 => Ok(SPECTRAL_SENSITIVITY),
    0x0018 => Ok(PHOTOGRAPHIC_SENSITIVITY),
    0x0019 => Ok(SELF_TIMER_MODE),
    0x001A => Ok(SENSITIVITY_TYPE),
    0x001B => Ok(STANDARD_OUTPUT_SENSITIVITY),
    0x001C => Ok(RECOMMENDED_EXPOSURE_INDEX),
    0x001D => Ok(ISO_SPEED),
    0x001E => Ok(ISO_SPEED_LATITUDE_YYY),
    0x001F => Ok(ISO_SPEED_LATITUDE_ZZZ),
    0x0020 => Ok(EXIF_VERSION),
    0x0021 => Ok(SHUTTER_SPEED_VALUE),
    0x0022 => Ok(APERTURE_VALUE),
    0x0023 => Ok(BRIGHTNESS_VALUE),
    0x0024 => Ok(EXPOSURE_BIAS_VALUE),
    0x0025 => Ok(MAX_APERTURE_VALUE),
    0x0026 => Ok(SUBJECT_DISTANCE),
    0x0027 => Ok(METERING_MODE),
    0x0028 => Ok(LIGHT_SOURCE),
    0x0029 => Ok(FOCAL_LENGTH),
    0x002A => Ok(SUBJECT_AREA),
    0x002B => Ok(MAKER_NOTE),
    0x0030 => Ok(TEMPERATURE),
    0x0031 => Ok(HUMIDITY),
    0x0032 => Ok(PRESSURE),
    0x0033 => Ok(WATER_DEPTH),
    0x0034 => Ok(ACCELERATION),
    0x0035 => Ok(CAMERA_ELEVATION_ANGLE),
    0x0036 => Ok(FLASH_ENERGY),
    0x0037 => Ok(SUBJECT_LOCATION),
    0x0038 => Ok(PHOTOGRAPHIC_EXPOSURE_INDEX),
    0x0039 => Ok(SENSING_METHOD),
    0x003A => Ok(FILE_SOURCE),
    0x003B => Ok(SCENE_TYPE),
    0x0041 => Ok(CUSTOM_RENDERED),
    0x0042 => Ok(EXPOSURE_MODE),
    0x0043 => Ok(WHITE_BALANCE),
    0x0044 => Ok(DIGITAL_ZOOM_RATIO),
    0x0045 => Ok(FOCAL_LENGTH_IN_3_5MM_FILM),
    0x0046 => Ok(SCENE_CAPTURE_TYPE),
    0x0047 => Ok(GAIN_CONTROL),
    0x0048 => Ok(CONTRAST),
    0x0049 => Ok(SATURATION),
    0x004A => Ok(SHARPNESS),
    0x004B => Ok(DEVICE_SETTING_DESCRIPTION),
    0x004C => Ok(SUBJECT_DISTANCE_RANGE),
    0x004D => Ok(CAMERA_OWNER_NAME),
    0x004E => Ok(LENS_SPECIFICATION),
    0x004F => Ok(LENS_MAKE),
    0x0050 => Ok(LENS_MODEL),
    0x0051 => Ok(LENS_SERIAL_NUMBER),
    0x0061 => Ok(INTEROPERABILITY_INDEX),
    0x0062 => Ok(INTEROPERABILITY_VERSION),
    0x0070 => Ok(GPS_VERSION_ID),
    0x0071 => Ok(GPS_LATITUDE_REF),
    0x0072 => Ok(GPS_LATITUDE),
    0x0073 => Ok(GPS_LONGITUDE_REF),
    0x0074 => Ok(GPS_LONGITUDE),
    0x0075 => Ok(GPS_ALTITUDE_REF),
    0x0076 => Ok(GPS_ALTITUDE),
    0x0077 => Ok(GPS_TIME_STAMP),
    0x0078 => Ok(GPS_SATELLITES),
    0x0079 => Ok(GPS_STATUS),
    0x007A => Ok(GPS_MEASURE_MODE),
    0x007B => Ok(GPSDOP),
    0x007C => Ok(GPS_SPEED_REF),
    0x007D => Ok(GPS_SPEED),
    0x007E => Ok(GPS_TRACK_REF),
    0x007F => Ok(GPS_TRACK),
    0x0080 => Ok(GPS_IMG_DIRECTION_REF),
    0x0081 => Ok(GPS_IMG_DIRECTION),
    0x0082 => Ok(GPS_MAP_DATUM),
    0x0083 => Ok(GPS_DEST_LATITUDE_REF),
    0x0084 => Ok(GPS_DEST_LATITUDE),
    0x0085 => Ok(GPS_DEST_LONGITUDE_REF),
    0x0086 => Ok(GPS_DEST_LONGITUDE),
    0x0087 => Ok(GPS_DEST_BEARING_REF),
    0x0088 => Ok(GPS_DEST_BEARING),
    0x0089 => Ok(GPS_DEST_DISTANCE_REF),
    0x008A => Ok(GPS_DEST_DISTANCE),
    0x008B => Ok(GPS_PROCESSING_METHOD),
    0x008C => Ok(GPS_AREA_INFORMATION),
    0x008D => Ok(GPS_DATE_STAMP),
    0x008E => Ok(GPS_DIFFERENTIAL),
    0x1001 => Ok(LIGHT_SOURCE_POLARIZATION),
    0x1002 => Ok(EMITTER_COLOR_TEMPERATURE),
    0x1003 => Ok(CONTACT_METHOD),
    0x1004 => Ok(IMMERSION_MEDIA),
    0x1005 => Ok(OPTICAL_MAGNIFICATION_FACTOR),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0018.
///
fn find_element_in_group_0018(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(CONTRAST_BOLUS_AGENT),
    0x0012 => Ok(CONTRAST_BOLUS_AGENT_SEQUENCE),
    0x0013 => Ok(CONTRAST_BOLUS_T1_RELAXIVITY),
    0x0014 => Ok(CONTRAST_BOLUS_ADMINISTRATION_ROUTE_SEQUENCE),
    0x0015 => Ok(BODY_PART_EXAMINED),
    0x0020 => Ok(SCANNING_SEQUENCE),
    0x0021 => Ok(SEQUENCE_VARIANT),
    0x0022 => Ok(SCAN_OPTIONS),
    0x0023 => Ok(MR_ACQUISITION_TYPE),
    0x0024 => Ok(SEQUENCE_NAME),
    0x0025 => Ok(ANGIO_FLAG),
    0x0026 => Ok(INTERVENTION_DRUG_INFORMATION_SEQUENCE),
    0x0027 => Ok(INTERVENTION_DRUG_STOP_TIME),
    0x0028 => Ok(INTERVENTION_DRUG_DOSE),
    0x0029 => Ok(INTERVENTION_DRUG_CODE_SEQUENCE),
    0x002A => Ok(ADDITIONAL_DRUG_SEQUENCE),
    0x0030 => Ok(RADIONUCLIDE),
    0x0031 => Ok(RADIOPHARMACEUTICAL),
    0x0032 => Ok(ENERGY_WINDOW_CENTERLINE),
    0x0033 => Ok(ENERGY_WINDOW_TOTAL_WIDTH),
    0x0034 => Ok(INTERVENTION_DRUG_NAME),
    0x0035 => Ok(INTERVENTION_DRUG_START_TIME),
    0x0036 => Ok(INTERVENTION_SEQUENCE),
    0x0037 => Ok(THERAPY_TYPE),
    0x0038 => Ok(INTERVENTION_STATUS),
    0x0039 => Ok(THERAPY_DESCRIPTION),
    0x003A => Ok(INTERVENTION_DESCRIPTION),
    0x0040 => Ok(CINE_RATE),
    0x0042 => Ok(INITIAL_CINE_RUN_STATE),
    0x0050 => Ok(SLICE_THICKNESS),
    0x0060 => Ok(KVP),
    0x0070 => Ok(COUNTS_ACCUMULATED),
    0x0071 => Ok(ACQUISITION_TERMINATION_CONDITION),
    0x0072 => Ok(EFFECTIVE_DURATION),
    0x0073 => Ok(ACQUISITION_START_CONDITION),
    0x0074 => Ok(ACQUISITION_START_CONDITION_DATA),
    0x0075 => Ok(ACQUISITION_TERMINATION_CONDITION_DATA),
    0x0080 => Ok(REPETITION_TIME),
    0x0081 => Ok(ECHO_TIME),
    0x0082 => Ok(INVERSION_TIME),
    0x0083 => Ok(NUMBER_OF_AVERAGES),
    0x0084 => Ok(IMAGING_FREQUENCY),
    0x0085 => Ok(IMAGED_NUCLEUS),
    0x0086 => Ok(ECHO_NUMBERS),
    0x0087 => Ok(MAGNETIC_FIELD_STRENGTH),
    0x0088 => Ok(SPACING_BETWEEN_SLICES),
    0x0089 => Ok(NUMBER_OF_PHASE_ENCODING_STEPS),
    0x0090 => Ok(DATA_COLLECTION_DIAMETER),
    0x0091 => Ok(ECHO_TRAIN_LENGTH),
    0x0093 => Ok(PERCENT_SAMPLING),
    0x0094 => Ok(PERCENT_PHASE_FIELD_OF_VIEW),
    0x0095 => Ok(PIXEL_BANDWIDTH),
    0x1000 => Ok(DEVICE_SERIAL_NUMBER),
    0x1002 => Ok(DEVICE_UID),
    0x1003 => Ok(DEVICE_ID),
    0x1004 => Ok(PLATE_ID),
    0x1005 => Ok(GENERATOR_ID),
    0x1006 => Ok(GRID_ID),
    0x1007 => Ok(CASSETTE_ID),
    0x1008 => Ok(GANTRY_ID),
    0x1009 => Ok(UNIQUE_DEVICE_IDENTIFIER),
    0x100A => Ok(UDI_SEQUENCE),
    0x100B => Ok(MANUFACTURER_DEVICE_CLASS_UID),
    0x1010 => Ok(SECONDARY_CAPTURE_DEVICE_ID),
    0x1011 => Ok(HARDCOPY_CREATION_DEVICE_ID),
    0x1012 => Ok(DATE_OF_SECONDARY_CAPTURE),
    0x1014 => Ok(TIME_OF_SECONDARY_CAPTURE),
    0x1016 => Ok(SECONDARY_CAPTURE_DEVICE_MANUFACTURER),
    0x1017 => Ok(HARDCOPY_DEVICE_MANUFACTURER),
    0x1018 => Ok(SECONDARY_CAPTURE_DEVICE_MANUFACTURER_MODEL_NAME),
    0x1019 => Ok(SECONDARY_CAPTURE_DEVICE_SOFTWARE_VERSIONS),
    0x101A => Ok(HARDCOPY_DEVICE_SOFTWARE_VERSION),
    0x101B => Ok(HARDCOPY_DEVICE_MANUFACTURER_MODEL_NAME),
    0x1020 => Ok(SOFTWARE_VERSIONS),
    0x1022 => Ok(VIDEO_IMAGE_FORMAT_ACQUIRED),
    0x1023 => Ok(DIGITAL_IMAGE_FORMAT_ACQUIRED),
    0x1030 => Ok(PROTOCOL_NAME),
    0x1040 => Ok(CONTRAST_BOLUS_ROUTE),
    0x1041 => Ok(CONTRAST_BOLUS_VOLUME),
    0x1042 => Ok(CONTRAST_BOLUS_START_TIME),
    0x1043 => Ok(CONTRAST_BOLUS_STOP_TIME),
    0x1044 => Ok(CONTRAST_BOLUS_TOTAL_DOSE),
    0x1045 => Ok(SYRINGE_COUNTS),
    0x1046 => Ok(CONTRAST_FLOW_RATE),
    0x1047 => Ok(CONTRAST_FLOW_DURATION),
    0x1048 => Ok(CONTRAST_BOLUS_INGREDIENT),
    0x1049 => Ok(CONTRAST_BOLUS_INGREDIENT_CONCENTRATION),
    0x1050 => Ok(SPATIAL_RESOLUTION),
    0x1060 => Ok(TRIGGER_TIME),
    0x1061 => Ok(TRIGGER_SOURCE_OR_TYPE),
    0x1062 => Ok(NOMINAL_INTERVAL),
    0x1063 => Ok(FRAME_TIME),
    0x1064 => Ok(CARDIAC_FRAMING_TYPE),
    0x1065 => Ok(FRAME_TIME_VECTOR),
    0x1066 => Ok(FRAME_DELAY),
    0x1067 => Ok(IMAGE_TRIGGER_DELAY),
    0x1068 => Ok(MULTIPLEX_GROUP_TIME_OFFSET),
    0x1069 => Ok(TRIGGER_TIME_OFFSET),
    0x106A => Ok(SYNCHRONIZATION_TRIGGER),
    0x106C => Ok(SYNCHRONIZATION_CHANNEL),
    0x106E => Ok(TRIGGER_SAMPLE_POSITION),
    0x1070 => Ok(RADIOPHARMACEUTICAL_ROUTE),
    0x1071 => Ok(RADIOPHARMACEUTICAL_VOLUME),
    0x1072 => Ok(RADIOPHARMACEUTICAL_START_TIME),
    0x1073 => Ok(RADIOPHARMACEUTICAL_STOP_TIME),
    0x1074 => Ok(RADIONUCLIDE_TOTAL_DOSE),
    0x1075 => Ok(RADIONUCLIDE_HALF_LIFE),
    0x1076 => Ok(RADIONUCLIDE_POSITRON_FRACTION),
    0x1077 => Ok(RADIOPHARMACEUTICAL_SPECIFIC_ACTIVITY),
    0x1078 => Ok(RADIOPHARMACEUTICAL_START_DATE_TIME),
    0x1079 => Ok(RADIOPHARMACEUTICAL_STOP_DATE_TIME),
    0x1080 => Ok(BEAT_REJECTION_FLAG),
    0x1081 => Ok(LOW_RR_VALUE),
    0x1082 => Ok(HIGH_RR_VALUE),
    0x1083 => Ok(INTERVALS_ACQUIRED),
    0x1084 => Ok(INTERVALS_REJECTED),
    0x1085 => Ok(PVC_REJECTION),
    0x1086 => Ok(SKIP_BEATS),
    0x1088 => Ok(HEART_RATE),
    0x1090 => Ok(CARDIAC_NUMBER_OF_IMAGES),
    0x1094 => Ok(TRIGGER_WINDOW),
    0x1100 => Ok(RECONSTRUCTION_DIAMETER),
    0x1110 => Ok(DISTANCE_SOURCE_TO_DETECTOR),
    0x1111 => Ok(DISTANCE_SOURCE_TO_PATIENT),
    0x1114 => Ok(ESTIMATED_RADIOGRAPHIC_MAGNIFICATION_FACTOR),
    0x1120 => Ok(GANTRY_DETECTOR_TILT),
    0x1121 => Ok(GANTRY_DETECTOR_SLEW),
    0x1130 => Ok(TABLE_HEIGHT),
    0x1131 => Ok(TABLE_TRAVERSE),
    0x1134 => Ok(TABLE_MOTION),
    0x1135 => Ok(TABLE_VERTICAL_INCREMENT),
    0x1136 => Ok(TABLE_LATERAL_INCREMENT),
    0x1137 => Ok(TABLE_LONGITUDINAL_INCREMENT),
    0x1138 => Ok(TABLE_ANGLE),
    0x113A => Ok(TABLE_TYPE),
    0x1140 => Ok(ROTATION_DIRECTION),
    0x1141 => Ok(ANGULAR_POSITION),
    0x1142 => Ok(RADIAL_POSITION),
    0x1143 => Ok(SCAN_ARC),
    0x1144 => Ok(ANGULAR_STEP),
    0x1145 => Ok(CENTER_OF_ROTATION_OFFSET),
    0x1146 => Ok(ROTATION_OFFSET),
    0x1147 => Ok(FIELD_OF_VIEW_SHAPE),
    0x1149 => Ok(FIELD_OF_VIEW_DIMENSIONS),
    0x1150 => Ok(EXPOSURE_TIME),
    0x1151 => Ok(X_RAY_TUBE_CURRENT),
    0x1152 => Ok(EXPOSURE),
    0x1153 => Ok(EXPOSURE_IN_MICROAMP_SECONDS),
    0x1154 => Ok(AVERAGE_PULSE_WIDTH),
    0x1155 => Ok(RADIATION_SETTING),
    0x1156 => Ok(RECTIFICATION_TYPE),
    0x115A => Ok(RADIATION_MODE),
    0x115E => Ok(IMAGE_AND_FLUOROSCOPY_AREA_DOSE_PRODUCT),
    0x1160 => Ok(FILTER_TYPE),
    0x1161 => Ok(TYPE_OF_FILTERS),
    0x1162 => Ok(INTENSIFIER_SIZE),
    0x1164 => Ok(IMAGER_PIXEL_SPACING),
    0x1166 => Ok(GRID),
    0x1170 => Ok(GENERATOR_POWER),
    0x1180 => Ok(COLLIMATOR_GRID_NAME),
    0x1181 => Ok(COLLIMATOR_TYPE),
    0x1182 => Ok(FOCAL_DISTANCE),
    0x1183 => Ok(X_FOCUS_CENTER),
    0x1184 => Ok(Y_FOCUS_CENTER),
    0x1190 => Ok(FOCAL_SPOTS),
    0x1191 => Ok(ANODE_TARGET_MATERIAL),
    0x11A0 => Ok(BODY_PART_THICKNESS),
    0x11A2 => Ok(COMPRESSION_FORCE),
    0x11A3 => Ok(COMPRESSION_PRESSURE),
    0x11A4 => Ok(PADDLE_DESCRIPTION),
    0x11A5 => Ok(COMPRESSION_CONTACT_AREA),
    0x11B0 => Ok(ACQUISITION_MODE),
    0x11B1 => Ok(DOSE_MODE_NAME),
    0x11B2 => Ok(ACQUIRED_SUBTRACTION_MASK_FLAG),
    0x11B3 => Ok(FLUOROSCOPY_PERSISTENCE_FLAG),
    0x11B4 => Ok(FLUOROSCOPY_LAST_IMAGE_HOLD_PERSISTENCE_FLAG),
    0x11B5 => Ok(UPPER_LIMIT_NUMBER_OF_PERSISTENT_FLUOROSCOPY_FRAMES),
    0x11B6 => Ok(CONTRAST_BOLUS_AUTO_INJECTION_TRIGGER_FLAG),
    0x11B7 => Ok(CONTRAST_BOLUS_INJECTION_DELAY),
    0x11B8 => Ok(XA_ACQUISITION_PHASE_DETAILS_SEQUENCE),
    0x11B9 => Ok(XA_ACQUISITION_FRAME_RATE),
    0x11BA => Ok(XA_PLANE_DETAILS_SEQUENCE),
    0x11BB => Ok(ACQUISITION_FIELD_OF_VIEW_LABEL),
    0x11BC => Ok(X_RAY_FILTER_DETAILS_SEQUENCE),
    0x11BD => Ok(XA_ACQUISITION_DURATION),
    0x11BE => Ok(RECONSTRUCTION_PIPELINE_TYPE),
    0x11BF => Ok(IMAGE_FILTER_DETAILS_SEQUENCE),
    0x11C0 => Ok(APPLIED_MASK_SUBTRACTION_FLAG),
    0x11C1 => Ok(REQUESTED_SERIES_DESCRIPTION_CODE_SEQUENCE),
    0x1200 => Ok(DATE_OF_LAST_CALIBRATION),
    0x1201 => Ok(TIME_OF_LAST_CALIBRATION),
    0x1202 => Ok(DATE_TIME_OF_LAST_CALIBRATION),
    0x1203 => Ok(CALIBRATION_DATE_TIME),
    0x1204 => Ok(DATE_OF_MANUFACTURE),
    0x1205 => Ok(DATE_OF_INSTALLATION),
    0x1210 => Ok(CONVOLUTION_KERNEL),
    0x1240 => Ok(UPPER_LOWER_PIXEL_VALUES),
    0x1242 => Ok(ACTUAL_FRAME_DURATION),
    0x1243 => Ok(COUNT_RATE),
    0x1244 => Ok(PREFERRED_PLAYBACK_SEQUENCING),
    0x1250 => Ok(RECEIVE_COIL_NAME),
    0x1251 => Ok(TRANSMIT_COIL_NAME),
    0x1260 => Ok(PLATE_TYPE),
    0x1261 => Ok(PHOSPHOR_TYPE),
    0x1271 => Ok(WATER_EQUIVALENT_DIAMETER),
    0x1272 => Ok(WATER_EQUIVALENT_DIAMETER_CALCULATION_METHOD_CODE_SEQUENCE),
    0x1300 => Ok(SCAN_VELOCITY),
    0x1301 => Ok(WHOLE_BODY_TECHNIQUE),
    0x1302 => Ok(SCAN_LENGTH),
    0x1310 => Ok(ACQUISITION_MATRIX),
    0x1312 => Ok(IN_PLANE_PHASE_ENCODING_DIRECTION),
    0x1314 => Ok(FLIP_ANGLE),
    0x1315 => Ok(VARIABLE_FLIP_ANGLE_FLAG),
    0x1316 => Ok(SAR),
    0x1318 => Ok(D_BDT),
    0x1320 => Ok(B_1RMS),
    0x1400 => Ok(ACQUISITION_DEVICE_PROCESSING_DESCRIPTION),
    0x1401 => Ok(ACQUISITION_DEVICE_PROCESSING_CODE),
    0x1402 => Ok(CASSETTE_ORIENTATION),
    0x1403 => Ok(CASSETTE_SIZE),
    0x1404 => Ok(EXPOSURES_ON_PLATE),
    0x1405 => Ok(RELATIVE_X_RAY_EXPOSURE),
    0x1411 => Ok(EXPOSURE_INDEX),
    0x1412 => Ok(TARGET_EXPOSURE_INDEX),
    0x1413 => Ok(DEVIATION_INDEX),
    0x1450 => Ok(COLUMN_ANGULATION),
    0x1460 => Ok(TOMO_LAYER_HEIGHT),
    0x1470 => Ok(TOMO_ANGLE),
    0x1480 => Ok(TOMO_TIME),
    0x1490 => Ok(TOMO_TYPE),
    0x1491 => Ok(TOMO_CLASS),
    0x1495 => Ok(NUMBER_OF_TOMOSYNTHESIS_SOURCE_IMAGES),
    0x1500 => Ok(POSITIONER_MOTION),
    0x1508 => Ok(POSITIONER_TYPE),
    0x1510 => Ok(POSITIONER_PRIMARY_ANGLE),
    0x1511 => Ok(POSITIONER_SECONDARY_ANGLE),
    0x1520 => Ok(POSITIONER_PRIMARY_ANGLE_INCREMENT),
    0x1521 => Ok(POSITIONER_SECONDARY_ANGLE_INCREMENT),
    0x1530 => Ok(DETECTOR_PRIMARY_ANGLE),
    0x1531 => Ok(DETECTOR_SECONDARY_ANGLE),
    0x1600 => Ok(SHUTTER_SHAPE),
    0x1602 => Ok(SHUTTER_LEFT_VERTICAL_EDGE),
    0x1604 => Ok(SHUTTER_RIGHT_VERTICAL_EDGE),
    0x1606 => Ok(SHUTTER_UPPER_HORIZONTAL_EDGE),
    0x1608 => Ok(SHUTTER_LOWER_HORIZONTAL_EDGE),
    0x1610 => Ok(CENTER_OF_CIRCULAR_SHUTTER),
    0x1612 => Ok(RADIUS_OF_CIRCULAR_SHUTTER),
    0x1620 => Ok(VERTICES_OF_THE_POLYGONAL_SHUTTER),
    0x1622 => Ok(SHUTTER_PRESENTATION_VALUE),
    0x1623 => Ok(SHUTTER_OVERLAY_GROUP),
    0x1624 => Ok(SHUTTER_PRESENTATION_COLOR_CIE_LAB_VALUE),
    0x1630 => Ok(OUTLINE_SHAPE_TYPE),
    0x1631 => Ok(OUTLINE_LEFT_VERTICAL_EDGE),
    0x1632 => Ok(OUTLINE_RIGHT_VERTICAL_EDGE),
    0x1633 => Ok(OUTLINE_UPPER_HORIZONTAL_EDGE),
    0x1634 => Ok(OUTLINE_LOWER_HORIZONTAL_EDGE),
    0x1635 => Ok(CENTER_OF_CIRCULAR_OUTLINE),
    0x1636 => Ok(DIAMETER_OF_CIRCULAR_OUTLINE),
    0x1637 => Ok(NUMBER_OF_POLYGONAL_VERTICES),
    0x1638 => Ok(VERTICES_OF_THE_POLYGONAL_OUTLINE),
    0x1700 => Ok(COLLIMATOR_SHAPE),
    0x1702 => Ok(COLLIMATOR_LEFT_VERTICAL_EDGE),
    0x1704 => Ok(COLLIMATOR_RIGHT_VERTICAL_EDGE),
    0x1706 => Ok(COLLIMATOR_UPPER_HORIZONTAL_EDGE),
    0x1708 => Ok(COLLIMATOR_LOWER_HORIZONTAL_EDGE),
    0x1710 => Ok(CENTER_OF_CIRCULAR_COLLIMATOR),
    0x1712 => Ok(RADIUS_OF_CIRCULAR_COLLIMATOR),
    0x1720 => Ok(VERTICES_OF_THE_POLYGONAL_COLLIMATOR),
    0x1800 => Ok(ACQUISITION_TIME_SYNCHRONIZED),
    0x1801 => Ok(TIME_SOURCE),
    0x1802 => Ok(TIME_DISTRIBUTION_PROTOCOL),
    0x1803 => Ok(NTP_SOURCE_ADDRESS),
    0x2001 => Ok(PAGE_NUMBER_VECTOR),
    0x2002 => Ok(FRAME_LABEL_VECTOR),
    0x2003 => Ok(FRAME_PRIMARY_ANGLE_VECTOR),
    0x2004 => Ok(FRAME_SECONDARY_ANGLE_VECTOR),
    0x2005 => Ok(SLICE_LOCATION_VECTOR),
    0x2006 => Ok(DISPLAY_WINDOW_LABEL_VECTOR),
    0x2010 => Ok(NOMINAL_SCANNED_PIXEL_SPACING),
    0x2020 => Ok(DIGITIZING_DEVICE_TRANSPORT_DIRECTION),
    0x2030 => Ok(ROTATION_OF_SCANNED_FILM),
    0x2041 => Ok(BIOPSY_TARGET_SEQUENCE),
    0x2042 => Ok(TARGET_UID),
    0x2043 => Ok(LOCALIZING_CURSOR_POSITION),
    0x2044 => Ok(CALCULATED_TARGET_POSITION),
    0x2045 => Ok(TARGET_LABEL),
    0x2046 => Ok(DISPLAYED_Z_VALUE),
    0x3100 => Ok(IVUS_ACQUISITION),
    0x3101 => Ok(IVUS_PULLBACK_RATE),
    0x3102 => Ok(IVUS_GATED_RATE),
    0x3103 => Ok(IVUS_PULLBACK_START_FRAME_NUMBER),
    0x3104 => Ok(IVUS_PULLBACK_STOP_FRAME_NUMBER),
    0x3105 => Ok(LESION_NUMBER),
    0x4000 => Ok(ACQUISITION_COMMENTS),
    0x5000 => Ok(OUTPUT_POWER),
    0x5010 => Ok(TRANSDUCER_DATA),
    0x5011 => Ok(TRANSDUCER_IDENTIFICATION_SEQUENCE),
    0x5012 => Ok(FOCUS_DEPTH),
    0x5020 => Ok(PROCESSING_FUNCTION),
    0x5021 => Ok(POSTPROCESSING_FUNCTION),
    0x5022 => Ok(MECHANICAL_INDEX),
    0x5024 => Ok(BONE_THERMAL_INDEX),
    0x5026 => Ok(CRANIAL_THERMAL_INDEX),
    0x5027 => Ok(SOFT_TISSUE_THERMAL_INDEX),
    0x5028 => Ok(SOFT_TISSUE_FOCUS_THERMAL_INDEX),
    0x5029 => Ok(SOFT_TISSUE_SURFACE_THERMAL_INDEX),
    0x5030 => Ok(DYNAMIC_RANGE),
    0x5040 => Ok(TOTAL_GAIN),
    0x5050 => Ok(DEPTH_OF_SCAN_FIELD),
    0x5100 => Ok(PATIENT_POSITION),
    0x5101 => Ok(VIEW_POSITION),
    0x5104 => Ok(PROJECTION_EPONYMOUS_NAME_CODE_SEQUENCE),
    0x5210 => Ok(IMAGE_TRANSFORMATION_MATRIX),
    0x5212 => Ok(IMAGE_TRANSLATION_VECTOR),
    0x6000 => Ok(SENSITIVITY),
    0x6011 => Ok(SEQUENCE_OF_ULTRASOUND_REGIONS),
    0x6012 => Ok(REGION_SPATIAL_FORMAT),
    0x6014 => Ok(REGION_DATA_TYPE),
    0x6016 => Ok(REGION_FLAGS),
    0x6018 => Ok(REGION_LOCATION_MIN_X0),
    0x601A => Ok(REGION_LOCATION_MIN_Y0),
    0x601C => Ok(REGION_LOCATION_MAX_X1),
    0x601E => Ok(REGION_LOCATION_MAX_Y1),
    0x6020 => Ok(REFERENCE_PIXEL_X0),
    0x6022 => Ok(REFERENCE_PIXEL_Y0),
    0x6024 => Ok(PHYSICAL_UNITS_X_DIRECTION),
    0x6026 => Ok(PHYSICAL_UNITS_Y_DIRECTION),
    0x6028 => Ok(REFERENCE_PIXEL_PHYSICAL_VALUE_X),
    0x602A => Ok(REFERENCE_PIXEL_PHYSICAL_VALUE_Y),
    0x602C => Ok(PHYSICAL_DELTA_X),
    0x602E => Ok(PHYSICAL_DELTA_Y),
    0x6030 => Ok(TRANSDUCER_FREQUENCY),
    0x6031 => Ok(TRANSDUCER_TYPE),
    0x6032 => Ok(PULSE_REPETITION_FREQUENCY),
    0x6034 => Ok(DOPPLER_CORRECTION_ANGLE),
    0x6036 => Ok(STEERING_ANGLE),
    0x6038 => Ok(DOPPLER_SAMPLE_VOLUME_X_POSITION_RETIRED),
    0x6039 => Ok(DOPPLER_SAMPLE_VOLUME_X_POSITION),
    0x603A => Ok(DOPPLER_SAMPLE_VOLUME_Y_POSITION_RETIRED),
    0x603B => Ok(DOPPLER_SAMPLE_VOLUME_Y_POSITION),
    0x603C => Ok(TM_LINE_POSITION_X0_RETIRED),
    0x603D => Ok(TM_LINE_POSITION_X0),
    0x603E => Ok(TM_LINE_POSITION_Y0_RETIRED),
    0x603F => Ok(TM_LINE_POSITION_Y0),
    0x6040 => Ok(TM_LINE_POSITION_X1_RETIRED),
    0x6041 => Ok(TM_LINE_POSITION_X1),
    0x6042 => Ok(TM_LINE_POSITION_Y1_RETIRED),
    0x6043 => Ok(TM_LINE_POSITION_Y1),
    0x6044 => Ok(PIXEL_COMPONENT_ORGANIZATION),
    0x6046 => Ok(PIXEL_COMPONENT_MASK),
    0x6048 => Ok(PIXEL_COMPONENT_RANGE_START),
    0x604A => Ok(PIXEL_COMPONENT_RANGE_STOP),
    0x604C => Ok(PIXEL_COMPONENT_PHYSICAL_UNITS),
    0x604E => Ok(PIXEL_COMPONENT_DATA_TYPE),
    0x6050 => Ok(NUMBER_OF_TABLE_BREAK_POINTS),
    0x6052 => Ok(TABLE_OF_X_BREAK_POINTS),
    0x6054 => Ok(TABLE_OF_Y_BREAK_POINTS),
    0x6056 => Ok(NUMBER_OF_TABLE_ENTRIES),
    0x6058 => Ok(TABLE_OF_PIXEL_VALUES),
    0x605A => Ok(TABLE_OF_PARAMETER_VALUES),
    0x6060 => Ok(R_WAVE_TIME_VECTOR),
    0x6070 => Ok(ACTIVE_IMAGE_AREA_OVERLAY_GROUP),
    0x7000 => Ok(DETECTOR_CONDITIONS_NOMINAL_FLAG),
    0x7001 => Ok(DETECTOR_TEMPERATURE),
    0x7004 => Ok(DETECTOR_TYPE),
    0x7005 => Ok(DETECTOR_CONFIGURATION),
    0x7006 => Ok(DETECTOR_DESCRIPTION),
    0x7008 => Ok(DETECTOR_MODE),
    0x700A => Ok(DETECTOR_ID),
    0x700C => Ok(DATE_OF_LAST_DETECTOR_CALIBRATION),
    0x700E => Ok(TIME_OF_LAST_DETECTOR_CALIBRATION),
    0x7010 => Ok(EXPOSURES_ON_DETECTOR_SINCE_LAST_CALIBRATION),
    0x7011 => Ok(EXPOSURES_ON_DETECTOR_SINCE_MANUFACTURED),
    0x7012 => Ok(DETECTOR_TIME_SINCE_LAST_EXPOSURE),
    0x7014 => Ok(DETECTOR_ACTIVE_TIME),
    0x7016 => Ok(DETECTOR_ACTIVATION_OFFSET_FROM_EXPOSURE),
    0x701A => Ok(DETECTOR_BINNING),
    0x7020 => Ok(DETECTOR_ELEMENT_PHYSICAL_SIZE),
    0x7022 => Ok(DETECTOR_ELEMENT_SPACING),
    0x7024 => Ok(DETECTOR_ACTIVE_SHAPE),
    0x7026 => Ok(DETECTOR_ACTIVE_DIMENSIONS),
    0x7028 => Ok(DETECTOR_ACTIVE_ORIGIN),
    0x702A => Ok(DETECTOR_MANUFACTURER_NAME),
    0x702B => Ok(DETECTOR_MANUFACTURER_MODEL_NAME),
    0x7030 => Ok(FIELD_OF_VIEW_ORIGIN),
    0x7032 => Ok(FIELD_OF_VIEW_ROTATION),
    0x7034 => Ok(FIELD_OF_VIEW_HORIZONTAL_FLIP),
    0x7036 => Ok(PIXEL_DATA_AREA_ORIGIN_RELATIVE_TO_FOV),
    0x7038 => Ok(PIXEL_DATA_AREA_ROTATION_ANGLE_RELATIVE_TO_FOV),
    0x7040 => Ok(GRID_ABSORBING_MATERIAL),
    0x7041 => Ok(GRID_SPACING_MATERIAL),
    0x7042 => Ok(GRID_THICKNESS),
    0x7044 => Ok(GRID_PITCH),
    0x7046 => Ok(GRID_ASPECT_RATIO),
    0x7048 => Ok(GRID_PERIOD),
    0x704C => Ok(GRID_FOCAL_DISTANCE),
    0x7050 => Ok(FILTER_MATERIAL),
    0x7052 => Ok(FILTER_THICKNESS_MINIMUM),
    0x7054 => Ok(FILTER_THICKNESS_MAXIMUM),
    0x7056 => Ok(FILTER_BEAM_PATH_LENGTH_MINIMUM),
    0x7058 => Ok(FILTER_BEAM_PATH_LENGTH_MAXIMUM),
    0x7060 => Ok(EXPOSURE_CONTROL_MODE),
    0x7062 => Ok(EXPOSURE_CONTROL_MODE_DESCRIPTION),
    0x7064 => Ok(EXPOSURE_STATUS),
    0x7065 => Ok(PHOTOTIMER_SETTING),
    0x8150 => Ok(EXPOSURE_TIME_IN_MICROSECONDS),
    0x8151 => Ok(X_RAY_TUBE_CURRENT_IN_MICROAMPS),
    0x9004 => Ok(CONTENT_QUALIFICATION),
    0x9005 => Ok(PULSE_SEQUENCE_NAME),
    0x9006 => Ok(MR_IMAGING_MODIFIER_SEQUENCE),
    0x9008 => Ok(ECHO_PULSE_SEQUENCE),
    0x9009 => Ok(INVERSION_RECOVERY),
    0x9010 => Ok(FLOW_COMPENSATION),
    0x9011 => Ok(MULTIPLE_SPIN_ECHO),
    0x9012 => Ok(MULTI_PLANAR_EXCITATION),
    0x9014 => Ok(PHASE_CONTRAST),
    0x9015 => Ok(TIME_OF_FLIGHT_CONTRAST),
    0x9016 => Ok(SPOILING),
    0x9017 => Ok(STEADY_STATE_PULSE_SEQUENCE),
    0x9018 => Ok(ECHO_PLANAR_PULSE_SEQUENCE),
    0x9019 => Ok(TAG_ANGLE_FIRST_AXIS),
    0x9020 => Ok(MAGNETIZATION_TRANSFER),
    0x9021 => Ok(T2_PREPARATION),
    0x9022 => Ok(BLOOD_SIGNAL_NULLING),
    0x9024 => Ok(SATURATION_RECOVERY),
    0x9025 => Ok(SPECTRALLY_SELECTED_SUPPRESSION),
    0x9026 => Ok(SPECTRALLY_SELECTED_EXCITATION),
    0x9027 => Ok(SPATIAL_PRESATURATION),
    0x9028 => Ok(TAGGING),
    0x9029 => Ok(OVERSAMPLING_PHASE),
    0x9030 => Ok(TAG_SPACING_FIRST_DIMENSION),
    0x9032 => Ok(GEOMETRY_OF_K_SPACE_TRAVERSAL),
    0x9033 => Ok(SEGMENTED_K_SPACE_TRAVERSAL),
    0x9034 => Ok(RECTILINEAR_PHASE_ENCODE_REORDERING),
    0x9035 => Ok(TAG_THICKNESS),
    0x9036 => Ok(PARTIAL_FOURIER_DIRECTION),
    0x9037 => Ok(CARDIAC_SYNCHRONIZATION_TECHNIQUE),
    0x9041 => Ok(RECEIVE_COIL_MANUFACTURER_NAME),
    0x9042 => Ok(MR_RECEIVE_COIL_SEQUENCE),
    0x9043 => Ok(RECEIVE_COIL_TYPE),
    0x9044 => Ok(QUADRATURE_RECEIVE_COIL),
    0x9045 => Ok(MULTI_COIL_DEFINITION_SEQUENCE),
    0x9046 => Ok(MULTI_COIL_CONFIGURATION),
    0x9047 => Ok(MULTI_COIL_ELEMENT_NAME),
    0x9048 => Ok(MULTI_COIL_ELEMENT_USED),
    0x9049 => Ok(MR_TRANSMIT_COIL_SEQUENCE),
    0x9050 => Ok(TRANSMIT_COIL_MANUFACTURER_NAME),
    0x9051 => Ok(TRANSMIT_COIL_TYPE),
    0x9052 => Ok(SPECTRAL_WIDTH),
    0x9053 => Ok(CHEMICAL_SHIFT_REFERENCE),
    0x9054 => Ok(VOLUME_LOCALIZATION_TECHNIQUE),
    0x9058 => Ok(MR_ACQUISITION_FREQUENCY_ENCODING_STEPS),
    0x9059 => Ok(DECOUPLING),
    0x9060 => Ok(DECOUPLED_NUCLEUS),
    0x9061 => Ok(DECOUPLING_FREQUENCY),
    0x9062 => Ok(DECOUPLING_METHOD),
    0x9063 => Ok(DECOUPLING_CHEMICAL_SHIFT_REFERENCE),
    0x9064 => Ok(K_SPACE_FILTERING),
    0x9065 => Ok(TIME_DOMAIN_FILTERING),
    0x9066 => Ok(NUMBER_OF_ZERO_FILLS),
    0x9067 => Ok(BASELINE_CORRECTION),
    0x9069 => Ok(PARALLEL_REDUCTION_FACTOR_IN_PLANE),
    0x9070 => Ok(CARDIAC_RR_INTERVAL_SPECIFIED),
    0x9073 => Ok(ACQUISITION_DURATION),
    0x9074 => Ok(FRAME_ACQUISITION_DATE_TIME),
    0x9075 => Ok(DIFFUSION_DIRECTIONALITY),
    0x9076 => Ok(DIFFUSION_GRADIENT_DIRECTION_SEQUENCE),
    0x9077 => Ok(PARALLEL_ACQUISITION),
    0x9078 => Ok(PARALLEL_ACQUISITION_TECHNIQUE),
    0x9079 => Ok(INVERSION_TIMES),
    0x9080 => Ok(METABOLITE_MAP_DESCRIPTION),
    0x9081 => Ok(PARTIAL_FOURIER),
    0x9082 => Ok(EFFECTIVE_ECHO_TIME),
    0x9083 => Ok(METABOLITE_MAP_CODE_SEQUENCE),
    0x9084 => Ok(CHEMICAL_SHIFT_SEQUENCE),
    0x9085 => Ok(CARDIAC_SIGNAL_SOURCE),
    0x9087 => Ok(DIFFUSION_B_VALUE),
    0x9089 => Ok(DIFFUSION_GRADIENT_ORIENTATION),
    0x9090 => Ok(VELOCITY_ENCODING_DIRECTION),
    0x9091 => Ok(VELOCITY_ENCODING_MINIMUM_VALUE),
    0x9092 => Ok(VELOCITY_ENCODING_ACQUISITION_SEQUENCE),
    0x9093 => Ok(NUMBER_OF_K_SPACE_TRAJECTORIES),
    0x9094 => Ok(COVERAGE_OF_K_SPACE),
    0x9095 => Ok(SPECTROSCOPY_ACQUISITION_PHASE_ROWS),
    0x9096 => Ok(PARALLEL_REDUCTION_FACTOR_IN_PLANE_RETIRED),
    0x9098 => Ok(TRANSMITTER_FREQUENCY),
    0x9100 => Ok(RESONANT_NUCLEUS),
    0x9101 => Ok(FREQUENCY_CORRECTION),
    0x9103 => Ok(MR_SPECTROSCOPY_FOV_GEOMETRY_SEQUENCE),
    0x9104 => Ok(SLAB_THICKNESS),
    0x9105 => Ok(SLAB_ORIENTATION),
    0x9106 => Ok(MID_SLAB_POSITION),
    0x9107 => Ok(MR_SPATIAL_SATURATION_SEQUENCE),
    0x9112 => Ok(MR_TIMING_AND_RELATED_PARAMETERS_SEQUENCE),
    0x9114 => Ok(MR_ECHO_SEQUENCE),
    0x9115 => Ok(MR_MODIFIER_SEQUENCE),
    0x9117 => Ok(MR_DIFFUSION_SEQUENCE),
    0x9118 => Ok(CARDIAC_SYNCHRONIZATION_SEQUENCE),
    0x9119 => Ok(MR_AVERAGES_SEQUENCE),
    0x9125 => Ok(MR_FOV_GEOMETRY_SEQUENCE),
    0x9126 => Ok(VOLUME_LOCALIZATION_SEQUENCE),
    0x9127 => Ok(SPECTROSCOPY_ACQUISITION_DATA_COLUMNS),
    0x9147 => Ok(DIFFUSION_ANISOTROPY_TYPE),
    0x9151 => Ok(FRAME_REFERENCE_DATE_TIME),
    0x9152 => Ok(MR_METABOLITE_MAP_SEQUENCE),
    0x9155 => Ok(PARALLEL_REDUCTION_FACTOR_OUT_OF_PLANE),
    0x9159 => Ok(SPECTROSCOPY_ACQUISITION_OUT_OF_PLANE_PHASE_STEPS),
    0x9166 => Ok(BULK_MOTION_STATUS),
    0x9168 => Ok(PARALLEL_REDUCTION_FACTOR_SECOND_IN_PLANE),
    0x9169 => Ok(CARDIAC_BEAT_REJECTION_TECHNIQUE),
    0x9170 => Ok(RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE),
    0x9171 => Ok(RESPIRATORY_SIGNAL_SOURCE),
    0x9172 => Ok(BULK_MOTION_COMPENSATION_TECHNIQUE),
    0x9173 => Ok(BULK_MOTION_SIGNAL_SOURCE),
    0x9174 => Ok(APPLICABLE_SAFETY_STANDARD_AGENCY),
    0x9175 => Ok(APPLICABLE_SAFETY_STANDARD_DESCRIPTION),
    0x9176 => Ok(OPERATING_MODE_SEQUENCE),
    0x9177 => Ok(OPERATING_MODE_TYPE),
    0x9178 => Ok(OPERATING_MODE),
    0x9179 => Ok(SPECIFIC_ABSORPTION_RATE_DEFINITION),
    0x9180 => Ok(GRADIENT_OUTPUT_TYPE),
    0x9181 => Ok(SPECIFIC_ABSORPTION_RATE_VALUE),
    0x9182 => Ok(GRADIENT_OUTPUT),
    0x9183 => Ok(FLOW_COMPENSATION_DIRECTION),
    0x9184 => Ok(TAGGING_DELAY),
    0x9185 => Ok(RESPIRATORY_MOTION_COMPENSATION_TECHNIQUE_DESCRIPTION),
    0x9186 => Ok(RESPIRATORY_SIGNAL_SOURCE_ID),
    0x9195 => Ok(CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_IN_HZ),
    0x9196 => Ok(CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_IN_HZ),
    0x9197 => Ok(MR_VELOCITY_ENCODING_SEQUENCE),
    0x9198 => Ok(FIRST_ORDER_PHASE_CORRECTION),
    0x9199 => Ok(WATER_REFERENCED_PHASE_CORRECTION),
    0x9200 => Ok(MR_SPECTROSCOPY_ACQUISITION_TYPE),
    0x9214 => Ok(RESPIRATORY_CYCLE_POSITION),
    0x9217 => Ok(VELOCITY_ENCODING_MAXIMUM_VALUE),
    0x9218 => Ok(TAG_SPACING_SECOND_DIMENSION),
    0x9219 => Ok(TAG_ANGLE_SECOND_AXIS),
    0x9220 => Ok(FRAME_ACQUISITION_DURATION),
    0x9226 => Ok(MR_IMAGE_FRAME_TYPE_SEQUENCE),
    0x9227 => Ok(MR_SPECTROSCOPY_FRAME_TYPE_SEQUENCE),
    0x9231 => Ok(MR_ACQUISITION_PHASE_ENCODING_STEPS_IN_PLANE),
    0x9232 => Ok(MR_ACQUISITION_PHASE_ENCODING_STEPS_OUT_OF_PLANE),
    0x9234 => Ok(SPECTROSCOPY_ACQUISITION_PHASE_COLUMNS),
    0x9236 => Ok(CARDIAC_CYCLE_POSITION),
    0x9239 => Ok(SPECIFIC_ABSORPTION_RATE_SEQUENCE),
    0x9240 => Ok(RF_ECHO_TRAIN_LENGTH),
    0x9241 => Ok(GRADIENT_ECHO_TRAIN_LENGTH),
    0x9250 => Ok(ARTERIAL_SPIN_LABELING_CONTRAST),
    0x9251 => Ok(MR_ARTERIAL_SPIN_LABELING_SEQUENCE),
    0x9252 => Ok(ASL_TECHNIQUE_DESCRIPTION),
    0x9253 => Ok(ASL_SLAB_NUMBER),
    0x9254 => Ok(ASL_SLAB_THICKNESS),
    0x9255 => Ok(ASL_SLAB_ORIENTATION),
    0x9256 => Ok(ASL_MID_SLAB_POSITION),
    0x9257 => Ok(ASL_CONTEXT),
    0x9258 => Ok(ASL_PULSE_TRAIN_DURATION),
    0x9259 => Ok(ASL_CRUSHER_FLAG),
    0x925A => Ok(ASL_CRUSHER_FLOW_LIMIT),
    0x925B => Ok(ASL_CRUSHER_DESCRIPTION),
    0x925C => Ok(ASL_BOLUS_CUTOFF_FLAG),
    0x925D => Ok(ASL_BOLUS_CUTOFF_TIMING_SEQUENCE),
    0x925E => Ok(ASL_BOLUS_CUTOFF_TECHNIQUE),
    0x925F => Ok(ASL_BOLUS_CUTOFF_DELAY_TIME),
    0x9260 => Ok(ASL_SLAB_SEQUENCE),
    0x9295 => Ok(CHEMICAL_SHIFT_MINIMUM_INTEGRATION_LIMIT_INPPM),
    0x9296 => Ok(CHEMICAL_SHIFT_MAXIMUM_INTEGRATION_LIMIT_INPPM),
    0x9297 => Ok(WATER_REFERENCE_ACQUISITION),
    0x9298 => Ok(ECHO_PEAK_POSITION),
    0x9301 => Ok(CT_ACQUISITION_TYPE_SEQUENCE),
    0x9302 => Ok(ACQUISITION_TYPE),
    0x9303 => Ok(TUBE_ANGLE),
    0x9304 => Ok(CT_ACQUISITION_DETAILS_SEQUENCE),
    0x9305 => Ok(REVOLUTION_TIME),
    0x9306 => Ok(SINGLE_COLLIMATION_WIDTH),
    0x9307 => Ok(TOTAL_COLLIMATION_WIDTH),
    0x9308 => Ok(CT_TABLE_DYNAMICS_SEQUENCE),
    0x9309 => Ok(TABLE_SPEED),
    0x9310 => Ok(TABLE_FEED_PER_ROTATION),
    0x9311 => Ok(SPIRAL_PITCH_FACTOR),
    0x9312 => Ok(CT_GEOMETRY_SEQUENCE),
    0x9313 => Ok(DATA_COLLECTION_CENTER_PATIENT),
    0x9314 => Ok(CT_RECONSTRUCTION_SEQUENCE),
    0x9315 => Ok(RECONSTRUCTION_ALGORITHM),
    0x9316 => Ok(CONVOLUTION_KERNEL_GROUP),
    0x9317 => Ok(RECONSTRUCTION_FIELD_OF_VIEW),
    0x9318 => Ok(RECONSTRUCTION_TARGET_CENTER_PATIENT),
    0x9319 => Ok(RECONSTRUCTION_ANGLE),
    0x9320 => Ok(IMAGE_FILTER),
    0x9321 => Ok(CT_EXPOSURE_SEQUENCE),
    0x9322 => Ok(RECONSTRUCTION_PIXEL_SPACING),
    0x9323 => Ok(EXPOSURE_MODULATION_TYPE),
    0x9324 => Ok(ESTIMATED_DOSE_SAVING),
    0x9325 => Ok(CT_X_RAY_DETAILS_SEQUENCE),
    0x9326 => Ok(CT_POSITION_SEQUENCE),
    0x9327 => Ok(TABLE_POSITION),
    0x9328 => Ok(EXPOSURE_TIME_INMS),
    0x9329 => Ok(CT_IMAGE_FRAME_TYPE_SEQUENCE),
    0x9330 => Ok(X_RAY_TUBE_CURRENT_IN_MILLIAMPS),
    0x9332 => Ok(EXPOSURE_INM_AS),
    0x9333 => Ok(CONSTANT_VOLUME_FLAG),
    0x9334 => Ok(FLUOROSCOPY_FLAG),
    0x9335 => Ok(DISTANCE_SOURCE_TO_DATA_COLLECTION_CENTER),
    0x9337 => Ok(CONTRAST_BOLUS_AGENT_NUMBER),
    0x9338 => Ok(CONTRAST_BOLUS_INGREDIENT_CODE_SEQUENCE),
    0x9340 => Ok(CONTRAST_ADMINISTRATION_PROFILE_SEQUENCE),
    0x9341 => Ok(CONTRAST_BOLUS_USAGE_SEQUENCE),
    0x9342 => Ok(CONTRAST_BOLUS_AGENT_ADMINISTERED),
    0x9343 => Ok(CONTRAST_BOLUS_AGENT_DETECTED),
    0x9344 => Ok(CONTRAST_BOLUS_AGENT_PHASE),
    0x9345 => Ok(CTDI_VOL),
    0x9346 => Ok(CTDI_PHANTOM_TYPE_CODE_SEQUENCE),
    0x9351 => Ok(CALCIUM_SCORING_MASS_FACTOR_PATIENT),
    0x9352 => Ok(CALCIUM_SCORING_MASS_FACTOR_DEVICE),
    0x9353 => Ok(ENERGY_WEIGHTING_FACTOR),
    0x9360 => Ok(CT_ADDITIONAL_X_RAY_SOURCE_SEQUENCE),
    0x9361 => Ok(MULTIENERGY_CT_ACQUISITION),
    0x9362 => Ok(MULTIENERGY_CT_ACQUISITION_SEQUENCE),
    0x9363 => Ok(MULTIENERGY_CT_PROCESSING_SEQUENCE),
    0x9364 => Ok(MULTIENERGY_CT_CHARACTERISTICS_SEQUENCE),
    0x9365 => Ok(MULTIENERGY_CT_X_RAY_SOURCE_SEQUENCE),
    0x9366 => Ok(X_RAY_SOURCE_INDEX),
    0x9367 => Ok(X_RAY_SOURCE_ID),
    0x9368 => Ok(MULTIENERGY_SOURCE_TECHNIQUE),
    0x9369 => Ok(SOURCE_START_DATE_TIME),
    0x936A => Ok(SOURCE_END_DATE_TIME),
    0x936B => Ok(SWITCHING_PHASE_NUMBER),
    0x936C => Ok(SWITCHING_PHASE_NOMINAL_DURATION),
    0x936D => Ok(SWITCHING_PHASE_TRANSITION_DURATION),
    0x936E => Ok(EFFECTIVE_BIN_ENERGY),
    0x936F => Ok(MULTIENERGY_CT_X_RAY_DETECTOR_SEQUENCE),
    0x9370 => Ok(X_RAY_DETECTOR_INDEX),
    0x9371 => Ok(X_RAY_DETECTOR_ID),
    0x9372 => Ok(MULTIENERGY_DETECTOR_TYPE),
    0x9373 => Ok(X_RAY_DETECTOR_LABEL),
    0x9374 => Ok(NOMINAL_MAX_ENERGY),
    0x9375 => Ok(NOMINAL_MIN_ENERGY),
    0x9376 => Ok(REFERENCED_X_RAY_DETECTOR_INDEX),
    0x9377 => Ok(REFERENCED_X_RAY_SOURCE_INDEX),
    0x9378 => Ok(REFERENCED_PATH_INDEX),
    0x9379 => Ok(MULTIENERGY_CT_PATH_SEQUENCE),
    0x937A => Ok(MULTIENERGY_CT_PATH_INDEX),
    0x937B => Ok(MULTIENERGY_ACQUISITION_DESCRIPTION),
    0x937C => Ok(MONOENERGETIC_ENERGY_EQUIVALENT),
    0x937D => Ok(MATERIAL_CODE_SEQUENCE),
    0x937E => Ok(DECOMPOSITION_METHOD),
    0x937F => Ok(DECOMPOSITION_DESCRIPTION),
    0x9380 => Ok(DECOMPOSITION_ALGORITHM_IDENTIFICATION_SEQUENCE),
    0x9381 => Ok(DECOMPOSITION_MATERIAL_SEQUENCE),
    0x9382 => Ok(MATERIAL_ATTENUATION_SEQUENCE),
    0x9383 => Ok(PHOTON_ENERGY),
    0x9384 => Ok(X_RAY_MASS_ATTENUATION_COEFFICIENT),
    0x9401 => Ok(PROJECTION_PIXEL_CALIBRATION_SEQUENCE),
    0x9402 => Ok(DISTANCE_SOURCE_TO_ISOCENTER),
    0x9403 => Ok(DISTANCE_OBJECT_TO_TABLE_TOP),
    0x9404 => Ok(OBJECT_PIXEL_SPACING_IN_CENTER_OF_BEAM),
    0x9405 => Ok(POSITIONER_POSITION_SEQUENCE),
    0x9406 => Ok(TABLE_POSITION_SEQUENCE),
    0x9407 => Ok(COLLIMATOR_SHAPE_SEQUENCE),
    0x9410 => Ok(PLANES_IN_ACQUISITION),
    0x9412 => Ok(XAXRF_FRAME_CHARACTERISTICS_SEQUENCE),
    0x9417 => Ok(FRAME_ACQUISITION_SEQUENCE),
    0x9420 => Ok(X_RAY_RECEPTOR_TYPE),
    0x9423 => Ok(ACQUISITION_PROTOCOL_NAME),
    0x9424 => Ok(ACQUISITION_PROTOCOL_DESCRIPTION),
    0x9425 => Ok(CONTRAST_BOLUS_INGREDIENT_OPAQUE),
    0x9426 => Ok(DISTANCE_RECEPTOR_PLANE_TO_DETECTOR_HOUSING),
    0x9427 => Ok(INTENSIFIER_ACTIVE_SHAPE),
    0x9428 => Ok(INTENSIFIER_ACTIVE_DIMENSIONS),
    0x9429 => Ok(PHYSICAL_DETECTOR_SIZE),
    0x9430 => Ok(POSITION_OF_ISOCENTER_PROJECTION),
    0x9432 => Ok(FIELD_OF_VIEW_SEQUENCE),
    0x9433 => Ok(FIELD_OF_VIEW_DESCRIPTION),
    0x9434 => Ok(EXPOSURE_CONTROL_SENSING_REGIONS_SEQUENCE),
    0x9435 => Ok(EXPOSURE_CONTROL_SENSING_REGION_SHAPE),
    0x9436 => Ok(EXPOSURE_CONTROL_SENSING_REGION_LEFT_VERTICAL_EDGE),
    0x9437 => Ok(EXPOSURE_CONTROL_SENSING_REGION_RIGHT_VERTICAL_EDGE),
    0x9438 => Ok(EXPOSURE_CONTROL_SENSING_REGION_UPPER_HORIZONTAL_EDGE),
    0x9439 => Ok(EXPOSURE_CONTROL_SENSING_REGION_LOWER_HORIZONTAL_EDGE),
    0x9440 => Ok(CENTER_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION),
    0x9441 => Ok(RADIUS_OF_CIRCULAR_EXPOSURE_CONTROL_SENSING_REGION),
    0x9442 => Ok(VERTICES_OF_THE_POLYGONAL_EXPOSURE_CONTROL_SENSING_REGION),
    0x9447 => Ok(COLUMN_ANGULATION_PATIENT),
    0x9449 => Ok(BEAM_ANGLE),
    0x9451 => Ok(FRAME_DETECTOR_PARAMETERS_SEQUENCE),
    0x9452 => Ok(CALCULATED_ANATOMY_THICKNESS),
    0x9455 => Ok(CALIBRATION_SEQUENCE),
    0x9456 => Ok(OBJECT_THICKNESS_SEQUENCE),
    0x9457 => Ok(PLANE_IDENTIFICATION),
    0x9461 => Ok(FIELD_OF_VIEW_DIMENSIONS_IN_FLOAT),
    0x9462 => Ok(ISOCENTER_REFERENCE_SYSTEM_SEQUENCE),
    0x9463 => Ok(POSITIONER_ISOCENTER_PRIMARY_ANGLE),
    0x9464 => Ok(POSITIONER_ISOCENTER_SECONDARY_ANGLE),
    0x9465 => Ok(POSITIONER_ISOCENTER_DETECTOR_ROTATION_ANGLE),
    0x9466 => Ok(TABLE_X_POSITION_TO_ISOCENTER),
    0x9467 => Ok(TABLE_Y_POSITION_TO_ISOCENTER),
    0x9468 => Ok(TABLE_Z_POSITION_TO_ISOCENTER),
    0x9469 => Ok(TABLE_HORIZONTAL_ROTATION_ANGLE),
    0x9470 => Ok(TABLE_HEAD_TILT_ANGLE),
    0x9471 => Ok(TABLE_CRADLE_TILT_ANGLE),
    0x9472 => Ok(FRAME_DISPLAY_SHUTTER_SEQUENCE),
    0x9473 => Ok(ACQUIRED_IMAGE_AREA_DOSE_PRODUCT),
    0x9474 => Ok(C_ARM_POSITIONER_TABLETOP_RELATIONSHIP),
    0x9476 => Ok(X_RAY_GEOMETRY_SEQUENCE),
    0x9477 => Ok(IRRADIATION_EVENT_IDENTIFICATION_SEQUENCE),
    0x9504 => Ok(X_RAY_3D_FRAME_TYPE_SEQUENCE),
    0x9506 => Ok(CONTRIBUTING_SOURCES_SEQUENCE),
    0x9507 => Ok(X_RAY_3D_ACQUISITION_SEQUENCE),
    0x9508 => Ok(PRIMARY_POSITIONER_SCAN_ARC),
    0x9509 => Ok(SECONDARY_POSITIONER_SCAN_ARC),
    0x9510 => Ok(PRIMARY_POSITIONER_SCAN_START_ANGLE),
    0x9511 => Ok(SECONDARY_POSITIONER_SCAN_START_ANGLE),
    0x9514 => Ok(PRIMARY_POSITIONER_INCREMENT),
    0x9515 => Ok(SECONDARY_POSITIONER_INCREMENT),
    0x9516 => Ok(START_ACQUISITION_DATE_TIME),
    0x9517 => Ok(END_ACQUISITION_DATE_TIME),
    0x9518 => Ok(PRIMARY_POSITIONER_INCREMENT_SIGN),
    0x9519 => Ok(SECONDARY_POSITIONER_INCREMENT_SIGN),
    0x9524 => Ok(APPLICATION_NAME),
    0x9525 => Ok(APPLICATION_VERSION),
    0x9526 => Ok(APPLICATION_MANUFACTURER),
    0x9527 => Ok(ALGORITHM_TYPE),
    0x9528 => Ok(ALGORITHM_DESCRIPTION),
    0x9530 => Ok(X_RAY_3D_RECONSTRUCTION_SEQUENCE),
    0x9531 => Ok(RECONSTRUCTION_DESCRIPTION),
    0x9538 => Ok(PER_PROJECTION_ACQUISITION_SEQUENCE),
    0x9541 => Ok(DETECTOR_POSITION_SEQUENCE),
    0x9542 => Ok(X_RAY_ACQUISITION_DOSE_SEQUENCE),
    0x9543 => Ok(X_RAY_SOURCE_ISOCENTER_PRIMARY_ANGLE),
    0x9544 => Ok(X_RAY_SOURCE_ISOCENTER_SECONDARY_ANGLE),
    0x9545 => Ok(BREAST_SUPPORT_ISOCENTER_PRIMARY_ANGLE),
    0x9546 => Ok(BREAST_SUPPORT_ISOCENTER_SECONDARY_ANGLE),
    0x9547 => Ok(BREAST_SUPPORT_X_POSITION_TO_ISOCENTER),
    0x9548 => Ok(BREAST_SUPPORT_Y_POSITION_TO_ISOCENTER),
    0x9549 => Ok(BREAST_SUPPORT_Z_POSITION_TO_ISOCENTER),
    0x9550 => Ok(DETECTOR_ISOCENTER_PRIMARY_ANGLE),
    0x9551 => Ok(DETECTOR_ISOCENTER_SECONDARY_ANGLE),
    0x9552 => Ok(DETECTOR_X_POSITION_TO_ISOCENTER),
    0x9553 => Ok(DETECTOR_Y_POSITION_TO_ISOCENTER),
    0x9554 => Ok(DETECTOR_Z_POSITION_TO_ISOCENTER),
    0x9555 => Ok(X_RAY_GRID_SEQUENCE),
    0x9556 => Ok(X_RAY_FILTER_SEQUENCE),
    0x9557 => Ok(DETECTOR_ACTIVE_AREA_TLHC_POSITION),
    0x9558 => Ok(DETECTOR_ACTIVE_AREA_ORIENTATION),
    0x9559 => Ok(POSITIONER_PRIMARY_ANGLE_DIRECTION),
    0x9601 => Ok(DIFFUSION_B_MATRIX_SEQUENCE),
    0x9602 => Ok(DIFFUSION_B_VALUE_XX),
    0x9603 => Ok(DIFFUSION_B_VALUE_XY),
    0x9604 => Ok(DIFFUSION_B_VALUE_XZ),
    0x9605 => Ok(DIFFUSION_B_VALUE_YY),
    0x9606 => Ok(DIFFUSION_B_VALUE_YZ),
    0x9607 => Ok(DIFFUSION_B_VALUE_ZZ),
    0x9621 => Ok(FUNCTIONAL_MR_SEQUENCE),
    0x9622 => Ok(FUNCTIONAL_SETTLING_PHASE_FRAMES_PRESENT),
    0x9623 => Ok(FUNCTIONAL_SYNC_PULSE),
    0x9624 => Ok(SETTLING_PHASE_FRAME),
    0x9701 => Ok(DECAY_CORRECTION_DATE_TIME),
    0x9715 => Ok(START_DENSITY_THRESHOLD),
    0x9716 => Ok(START_RELATIVE_DENSITY_DIFFERENCE_THRESHOLD),
    0x9717 => Ok(START_CARDIAC_TRIGGER_COUNT_THRESHOLD),
    0x9718 => Ok(START_RESPIRATORY_TRIGGER_COUNT_THRESHOLD),
    0x9719 => Ok(TERMINATION_COUNTS_THRESHOLD),
    0x9720 => Ok(TERMINATION_DENSITY_THRESHOLD),
    0x9721 => Ok(TERMINATION_RELATIVE_DENSITY_THRESHOLD),
    0x9722 => Ok(TERMINATION_TIME_THRESHOLD),
    0x9723 => Ok(TERMINATION_CARDIAC_TRIGGER_COUNT_THRESHOLD),
    0x9724 => Ok(TERMINATION_RESPIRATORY_TRIGGER_COUNT_THRESHOLD),
    0x9725 => Ok(DETECTOR_GEOMETRY),
    0x9726 => Ok(TRANSVERSE_DETECTOR_SEPARATION),
    0x9727 => Ok(AXIAL_DETECTOR_DIMENSION),
    0x9729 => Ok(RADIOPHARMACEUTICAL_AGENT_NUMBER),
    0x9732 => Ok(PET_FRAME_ACQUISITION_SEQUENCE),
    0x9733 => Ok(PET_DETECTOR_MOTION_DETAILS_SEQUENCE),
    0x9734 => Ok(PET_TABLE_DYNAMICS_SEQUENCE),
    0x9735 => Ok(PET_POSITION_SEQUENCE),
    0x9736 => Ok(PET_FRAME_CORRECTION_FACTORS_SEQUENCE),
    0x9737 => Ok(RADIOPHARMACEUTICAL_USAGE_SEQUENCE),
    0x9738 => Ok(ATTENUATION_CORRECTION_SOURCE),
    0x9739 => Ok(NUMBER_OF_ITERATIONS),
    0x9740 => Ok(NUMBER_OF_SUBSETS),
    0x9749 => Ok(PET_RECONSTRUCTION_SEQUENCE),
    0x9751 => Ok(PET_FRAME_TYPE_SEQUENCE),
    0x9755 => Ok(TIME_OF_FLIGHT_INFORMATION_USED),
    0x9756 => Ok(RECONSTRUCTION_TYPE),
    0x9758 => Ok(DECAY_CORRECTED),
    0x9759 => Ok(ATTENUATION_CORRECTED),
    0x9760 => Ok(SCATTER_CORRECTED),
    0x9761 => Ok(DEAD_TIME_CORRECTED),
    0x9762 => Ok(GANTRY_MOTION_CORRECTED),
    0x9763 => Ok(PATIENT_MOTION_CORRECTED),
    0x9764 => Ok(COUNT_LOSS_NORMALIZATION_CORRECTED),
    0x9765 => Ok(RANDOMS_CORRECTED),
    0x9766 => Ok(NON_UNIFORM_RADIAL_SAMPLING_CORRECTED),
    0x9767 => Ok(SENSITIVITY_CALIBRATED),
    0x9768 => Ok(DETECTOR_NORMALIZATION_CORRECTION),
    0x9769 => Ok(ITERATIVE_RECONSTRUCTION_METHOD),
    0x9770 => Ok(ATTENUATION_CORRECTION_TEMPORAL_RELATIONSHIP),
    0x9771 => Ok(PATIENT_PHYSIOLOGICAL_STATE_SEQUENCE),
    0x9772 => Ok(PATIENT_PHYSIOLOGICAL_STATE_CODE_SEQUENCE),
    0x9801 => Ok(DEPTHS_OF_FOCUS),
    0x9803 => Ok(EXCLUDED_INTERVALS_SEQUENCE),
    0x9804 => Ok(EXCLUSION_START_DATE_TIME),
    0x9805 => Ok(EXCLUSION_DURATION),
    0x9806 => Ok(US_IMAGE_DESCRIPTION_SEQUENCE),
    0x9807 => Ok(IMAGE_DATA_TYPE_SEQUENCE),
    0x9808 => Ok(DATA_TYPE),
    0x9809 => Ok(TRANSDUCER_SCAN_PATTERN_CODE_SEQUENCE),
    0x980B => Ok(ALIASED_DATA_TYPE),
    0x980C => Ok(POSITION_MEASURING_DEVICE_USED),
    0x980D => Ok(TRANSDUCER_GEOMETRY_CODE_SEQUENCE),
    0x980E => Ok(TRANSDUCER_BEAM_STEERING_CODE_SEQUENCE),
    0x980F => Ok(TRANSDUCER_APPLICATION_CODE_SEQUENCE),
    0x9810 => Ok(ZERO_VELOCITY_PIXEL_VALUE),
    0x9821 => Ok(PHOTOACOUSTIC_EXCITATION_CHARACTERISTICS_SEQUENCE),
    0x9822 => Ok(EXCITATION_SPECTRAL_WIDTH),
    0x9823 => Ok(EXCITATION_ENERGY),
    0x9824 => Ok(EXCITATION_PULSE_DURATION),
    0x9825 => Ok(EXCITATION_WAVELENGTH_SEQUENCE),
    0x9826 => Ok(EXCITATION_WAVELENGTH),
    0x9828 => Ok(ILLUMINATION_TRANSLATION_FLAG),
    0x9829 => Ok(ACOUSTIC_COUPLING_MEDIUM_FLAG),
    0x982A => Ok(ACOUSTIC_COUPLING_MEDIUM_CODE_SEQUENCE),
    0x982B => Ok(ACOUSTIC_COUPLING_MEDIUM_TEMPERATURE),
    0x982C => Ok(TRANSDUCER_RESPONSE_SEQUENCE),
    0x982D => Ok(CENTER_FREQUENCY),
    0x982E => Ok(FRACTIONAL_BANDWIDTH),
    0x982F => Ok(LOWER_CUTOFF_FREQUENCY),
    0x9830 => Ok(UPPER_CUTOFF_FREQUENCY),
    0x9831 => Ok(TRANSDUCER_TECHNOLOGY_SEQUENCE),
    0x9832 => Ok(SOUND_SPEED_CORRECTION_MECHANISM_CODE_SEQUENCE),
    0x9833 => Ok(OBJECT_SOUND_SPEED),
    0x9834 => Ok(ACOUSTIC_COUPLING_MEDIUM_SOUND_SPEED),
    0x9835 => Ok(PHOTOACOUSTIC_IMAGE_FRAME_TYPE_SEQUENCE),
    0x9836 => Ok(IMAGE_DATA_TYPE_CODE_SEQUENCE),
    0x9900 => Ok(REFERENCE_LOCATION_LABEL),
    0x9901 => Ok(REFERENCE_LOCATION_DESCRIPTION),
    0x9902 => Ok(REFERENCE_BASIS_CODE_SEQUENCE),
    0x9903 => Ok(REFERENCE_GEOMETRY_CODE_SEQUENCE),
    0x9904 => Ok(OFFSET_DISTANCE),
    0x9905 => Ok(OFFSET_DIRECTION),
    0x9906 => Ok(POTENTIAL_SCHEDULED_PROTOCOL_CODE_SEQUENCE),
    0x9907 => Ok(POTENTIAL_REQUESTED_PROCEDURE_CODE_SEQUENCE),
    0x9908 => Ok(POTENTIAL_REASONS_FOR_PROCEDURE),
    0x9909 => Ok(POTENTIAL_REASONS_FOR_PROCEDURE_CODE_SEQUENCE),
    0x990A => Ok(POTENTIAL_DIAGNOSTIC_TASKS),
    0x990B => Ok(CONTRAINDICATIONS_CODE_SEQUENCE),
    0x990C => Ok(REFERENCED_DEFINED_PROTOCOL_SEQUENCE),
    0x990D => Ok(REFERENCED_PERFORMED_PROTOCOL_SEQUENCE),
    0x990E => Ok(PREDECESSOR_PROTOCOL_SEQUENCE),
    0x990F => Ok(PROTOCOL_PLANNING_INFORMATION),
    0x9910 => Ok(PROTOCOL_DESIGN_RATIONALE),
    0x9911 => Ok(PATIENT_SPECIFICATION_SEQUENCE),
    0x9912 => Ok(MODEL_SPECIFICATION_SEQUENCE),
    0x9913 => Ok(PARAMETERS_SPECIFICATION_SEQUENCE),
    0x9914 => Ok(INSTRUCTION_SEQUENCE),
    0x9915 => Ok(INSTRUCTION_INDEX),
    0x9916 => Ok(INSTRUCTION_TEXT),
    0x9917 => Ok(INSTRUCTION_DESCRIPTION),
    0x9918 => Ok(INSTRUCTION_PERFORMED_FLAG),
    0x9919 => Ok(INSTRUCTION_PERFORMED_DATE_TIME),
    0x991A => Ok(INSTRUCTION_PERFORMANCE_COMMENT),
    0x991B => Ok(PATIENT_POSITIONING_INSTRUCTION_SEQUENCE),
    0x991C => Ok(POSITIONING_METHOD_CODE_SEQUENCE),
    0x991D => Ok(POSITIONING_LANDMARK_SEQUENCE),
    0x991E => Ok(TARGET_FRAME_OF_REFERENCE_UID),
    0x991F => Ok(ACQUISITION_PROTOCOL_ELEMENT_SPECIFICATION_SEQUENCE),
    0x9920 => Ok(ACQUISITION_PROTOCOL_ELEMENT_SEQUENCE),
    0x9921 => Ok(PROTOCOL_ELEMENT_NUMBER),
    0x9922 => Ok(PROTOCOL_ELEMENT_NAME),
    0x9923 => Ok(PROTOCOL_ELEMENT_CHARACTERISTICS_SUMMARY),
    0x9924 => Ok(PROTOCOL_ELEMENT_PURPOSE),
    0x9930 => Ok(ACQUISITION_MOTION),
    0x9931 => Ok(ACQUISITION_START_LOCATION_SEQUENCE),
    0x9932 => Ok(ACQUISITION_END_LOCATION_SEQUENCE),
    0x9933 => Ok(RECONSTRUCTION_PROTOCOL_ELEMENT_SPECIFICATION_SEQUENCE),
    0x9934 => Ok(RECONSTRUCTION_PROTOCOL_ELEMENT_SEQUENCE),
    0x9935 => Ok(STORAGE_PROTOCOL_ELEMENT_SPECIFICATION_SEQUENCE),
    0x9936 => Ok(STORAGE_PROTOCOL_ELEMENT_SEQUENCE),
    0x9937 => Ok(REQUESTED_SERIES_DESCRIPTION),
    0x9938 => Ok(SOURCE_ACQUISITION_PROTOCOL_ELEMENT_NUMBER),
    0x9939 => Ok(SOURCE_ACQUISITION_BEAM_NUMBER),
    0x993A => Ok(SOURCE_RECONSTRUCTION_PROTOCOL_ELEMENT_NUMBER),
    0x993B => Ok(RECONSTRUCTION_START_LOCATION_SEQUENCE),
    0x993C => Ok(RECONSTRUCTION_END_LOCATION_SEQUENCE),
    0x993D => Ok(RECONSTRUCTION_ALGORITHM_SEQUENCE),
    0x993E => Ok(RECONSTRUCTION_TARGET_CENTER_LOCATION_SEQUENCE),
    0x9941 => Ok(IMAGE_FILTER_DESCRIPTION),
    0x9942 => Ok(CTDI_VOL_NOTIFICATION_TRIGGER),
    0x9943 => Ok(DLP_NOTIFICATION_TRIGGER),
    0x9944 => Ok(AUTO_KVP_SELECTION_TYPE),
    0x9945 => Ok(AUTO_KVP_UPPER_BOUND),
    0x9946 => Ok(AUTO_KVP_LOWER_BOUND),
    0x9947 => Ok(PROTOCOL_DEFINED_PATIENT_POSITION),
    0xA001 => Ok(CONTRIBUTING_EQUIPMENT_SEQUENCE),
    0xA002 => Ok(CONTRIBUTION_DATE_TIME),
    0xA003 => Ok(CONTRIBUTION_DESCRIPTION),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0020.
///
fn find_element_in_group_0020(element: u16) -> Result<Item, ()> {
  match element {
    0x000D => Ok(STUDY_INSTANCE_UID),
    0x000E => Ok(SERIES_INSTANCE_UID),
    0x0010 => Ok(STUDY_ID),
    0x0011 => Ok(SERIES_NUMBER),
    0x0012 => Ok(ACQUISITION_NUMBER),
    0x0013 => Ok(INSTANCE_NUMBER),
    0x0014 => Ok(ISOTOPE_NUMBER),
    0x0015 => Ok(PHASE_NUMBER),
    0x0016 => Ok(INTERVAL_NUMBER),
    0x0017 => Ok(TIME_SLOT_NUMBER),
    0x0018 => Ok(ANGLE_NUMBER),
    0x0019 => Ok(ITEM_NUMBER),
    0x0020 => Ok(PATIENT_ORIENTATION),
    0x0022 => Ok(OVERLAY_NUMBER),
    0x0024 => Ok(CURVE_NUMBER),
    0x0026 => Ok(LUT_NUMBER),
    0x0027 => Ok(PYRAMID_LABEL),
    0x0030 => Ok(IMAGE_POSITION),
    0x0032 => Ok(IMAGE_POSITION_PATIENT),
    0x0035 => Ok(IMAGE_ORIENTATION),
    0x0037 => Ok(IMAGE_ORIENTATION_PATIENT),
    0x0050 => Ok(LOCATION),
    0x0052 => Ok(FRAME_OF_REFERENCE_UID),
    0x0060 => Ok(LATERALITY),
    0x0062 => Ok(IMAGE_LATERALITY),
    0x0070 => Ok(IMAGE_GEOMETRY_TYPE),
    0x0080 => Ok(MASKING_IMAGE),
    0x00AA => Ok(REPORT_NUMBER),
    0x0100 => Ok(TEMPORAL_POSITION_IDENTIFIER),
    0x0105 => Ok(NUMBER_OF_TEMPORAL_POSITIONS),
    0x0110 => Ok(TEMPORAL_RESOLUTION),
    0x0200 => Ok(SYNCHRONIZATION_FRAME_OF_REFERENCE_UID),
    0x0242 => Ok(SOP_INSTANCE_UID_OF_CONCATENATION_SOURCE),
    0x1000 => Ok(SERIES_IN_STUDY),
    0x1001 => Ok(ACQUISITIONS_IN_SERIES),
    0x1002 => Ok(IMAGES_IN_ACQUISITION),
    0x1003 => Ok(IMAGES_IN_SERIES),
    0x1004 => Ok(ACQUISITIONS_IN_STUDY),
    0x1005 => Ok(IMAGES_IN_STUDY),
    0x1020 => Ok(REFERENCE),
    0x103F => Ok(TARGET_POSITION_REFERENCE_INDICATOR),
    0x1040 => Ok(POSITION_REFERENCE_INDICATOR),
    0x1041 => Ok(SLICE_LOCATION),
    0x1070 => Ok(OTHER_STUDY_NUMBERS),
    0x1200 => Ok(NUMBER_OF_PATIENT_RELATED_STUDIES),
    0x1202 => Ok(NUMBER_OF_PATIENT_RELATED_SERIES),
    0x1204 => Ok(NUMBER_OF_PATIENT_RELATED_INSTANCES),
    0x1206 => Ok(NUMBER_OF_STUDY_RELATED_SERIES),
    0x1208 => Ok(NUMBER_OF_STUDY_RELATED_INSTANCES),
    0x1209 => Ok(NUMBER_OF_SERIES_RELATED_INSTANCES),
    0x3401 => Ok(MODIFYING_DEVICE_ID),
    0x3402 => Ok(MODIFIED_IMAGE_ID),
    0x3403 => Ok(MODIFIED_IMAGE_DATE),
    0x3404 => Ok(MODIFYING_DEVICE_MANUFACTURER),
    0x3405 => Ok(MODIFIED_IMAGE_TIME),
    0x3406 => Ok(MODIFIED_IMAGE_DESCRIPTION),
    0x4000 => Ok(IMAGE_COMMENTS),
    0x5000 => Ok(ORIGINAL_IMAGE_IDENTIFICATION),
    0x5002 => Ok(ORIGINAL_IMAGE_IDENTIFICATION_NOMENCLATURE),
    0x9056 => Ok(STACK_ID),
    0x9057 => Ok(IN_STACK_POSITION_NUMBER),
    0x9071 => Ok(FRAME_ANATOMY_SEQUENCE),
    0x9072 => Ok(FRAME_LATERALITY),
    0x9111 => Ok(FRAME_CONTENT_SEQUENCE),
    0x9113 => Ok(PLANE_POSITION_SEQUENCE),
    0x9116 => Ok(PLANE_ORIENTATION_SEQUENCE),
    0x9128 => Ok(TEMPORAL_POSITION_INDEX),
    0x9153 => Ok(NOMINAL_CARDIAC_TRIGGER_DELAY_TIME),
    0x9154 => Ok(NOMINAL_CARDIAC_TRIGGER_TIME_PRIOR_TO_R_PEAK),
    0x9155 => Ok(ACTUAL_CARDIAC_TRIGGER_TIME_PRIOR_TO_R_PEAK),
    0x9156 => Ok(FRAME_ACQUISITION_NUMBER),
    0x9157 => Ok(DIMENSION_INDEX_VALUES),
    0x9158 => Ok(FRAME_COMMENTS),
    0x9161 => Ok(CONCATENATION_UID),
    0x9162 => Ok(IN_CONCATENATION_NUMBER),
    0x9163 => Ok(IN_CONCATENATION_TOTAL_NUMBER),
    0x9164 => Ok(DIMENSION_ORGANIZATION_UID),
    0x9165 => Ok(DIMENSION_INDEX_POINTER),
    0x9167 => Ok(FUNCTIONAL_GROUP_POINTER),
    0x9170 => Ok(UNASSIGNED_SHARED_CONVERTED_ATTRIBUTES_SEQUENCE),
    0x9171 => Ok(UNASSIGNED_PER_FRAME_CONVERTED_ATTRIBUTES_SEQUENCE),
    0x9172 => Ok(CONVERSION_SOURCE_ATTRIBUTES_SEQUENCE),
    0x9213 => Ok(DIMENSION_INDEX_PRIVATE_CREATOR),
    0x9221 => Ok(DIMENSION_ORGANIZATION_SEQUENCE),
    0x9222 => Ok(DIMENSION_INDEX_SEQUENCE),
    0x9228 => Ok(CONCATENATION_FRAME_OFFSET_NUMBER),
    0x9238 => Ok(FUNCTIONAL_GROUP_PRIVATE_CREATOR),
    0x9241 => Ok(NOMINAL_PERCENTAGE_OF_CARDIAC_PHASE),
    0x9245 => Ok(NOMINAL_PERCENTAGE_OF_RESPIRATORY_PHASE),
    0x9246 => Ok(STARTING_RESPIRATORY_AMPLITUDE),
    0x9247 => Ok(STARTING_RESPIRATORY_PHASE),
    0x9248 => Ok(ENDING_RESPIRATORY_AMPLITUDE),
    0x9249 => Ok(ENDING_RESPIRATORY_PHASE),
    0x9250 => Ok(RESPIRATORY_TRIGGER_TYPE),
    0x9251 => Ok(RR_INTERVAL_TIME_NOMINAL),
    0x9252 => Ok(ACTUAL_CARDIAC_TRIGGER_DELAY_TIME),
    0x9253 => Ok(RESPIRATORY_SYNCHRONIZATION_SEQUENCE),
    0x9254 => Ok(RESPIRATORY_INTERVAL_TIME),
    0x9255 => Ok(NOMINAL_RESPIRATORY_TRIGGER_DELAY_TIME),
    0x9256 => Ok(RESPIRATORY_TRIGGER_DELAY_THRESHOLD),
    0x9257 => Ok(ACTUAL_RESPIRATORY_TRIGGER_DELAY_TIME),
    0x9301 => Ok(IMAGE_POSITION_VOLUME),
    0x9302 => Ok(IMAGE_ORIENTATION_VOLUME),
    0x9307 => Ok(ULTRASOUND_ACQUISITION_GEOMETRY),
    0x9308 => Ok(APEX_POSITION),
    0x9309 => Ok(VOLUME_TO_TRANSDUCER_MAPPING_MATRIX),
    0x930A => Ok(VOLUME_TO_TABLE_MAPPING_MATRIX),
    0x930B => Ok(VOLUME_TO_TRANSDUCER_RELATIONSHIP),
    0x930C => Ok(PATIENT_FRAME_OF_REFERENCE_SOURCE),
    0x930D => Ok(TEMPORAL_POSITION_TIME_OFFSET),
    0x930E => Ok(PLANE_POSITION_VOLUME_SEQUENCE),
    0x930F => Ok(PLANE_ORIENTATION_VOLUME_SEQUENCE),
    0x9310 => Ok(TEMPORAL_POSITION_SEQUENCE),
    0x9311 => Ok(DIMENSION_ORGANIZATION_TYPE),
    0x9312 => Ok(VOLUME_FRAME_OF_REFERENCE_UID),
    0x9313 => Ok(TABLE_FRAME_OF_REFERENCE_UID),
    0x9421 => Ok(DIMENSION_DESCRIPTION_LABEL),
    0x9450 => Ok(PATIENT_ORIENTATION_IN_FRAME_SEQUENCE),
    0x9453 => Ok(FRAME_LABEL),
    0x9518 => Ok(ACQUISITION_INDEX),
    0x9529 => Ok(CONTRIBUTING_SOP_INSTANCES_REFERENCE_SEQUENCE),
    0x9536 => Ok(RECONSTRUCTION_INDEX),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0022.
///
fn find_element_in_group_0022(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(LIGHT_PATH_FILTER_PASS_THROUGH_WAVELENGTH),
    0x0002 => Ok(LIGHT_PATH_FILTER_PASS_BAND),
    0x0003 => Ok(IMAGE_PATH_FILTER_PASS_THROUGH_WAVELENGTH),
    0x0004 => Ok(IMAGE_PATH_FILTER_PASS_BAND),
    0x0005 => Ok(PATIENT_EYE_MOVEMENT_COMMANDED),
    0x0006 => Ok(PATIENT_EYE_MOVEMENT_COMMAND_CODE_SEQUENCE),
    0x0007 => Ok(SPHERICAL_LENS_POWER),
    0x0008 => Ok(CYLINDER_LENS_POWER),
    0x0009 => Ok(CYLINDER_AXIS),
    0x000A => Ok(EMMETROPIC_MAGNIFICATION),
    0x000B => Ok(INTRA_OCULAR_PRESSURE),
    0x000C => Ok(HORIZONTAL_FIELD_OF_VIEW),
    0x000D => Ok(PUPIL_DILATED),
    0x000E => Ok(DEGREE_OF_DILATION),
    0x000F => Ok(VERTEX_DISTANCE),
    0x0010 => Ok(STEREO_BASELINE_ANGLE),
    0x0011 => Ok(STEREO_BASELINE_DISPLACEMENT),
    0x0012 => Ok(STEREO_HORIZONTAL_PIXEL_OFFSET),
    0x0013 => Ok(STEREO_VERTICAL_PIXEL_OFFSET),
    0x0014 => Ok(STEREO_ROTATION),
    0x0015 => Ok(ACQUISITION_DEVICE_TYPE_CODE_SEQUENCE),
    0x0016 => Ok(ILLUMINATION_TYPE_CODE_SEQUENCE),
    0x0017 => Ok(LIGHT_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE),
    0x0018 => Ok(IMAGE_PATH_FILTER_TYPE_STACK_CODE_SEQUENCE),
    0x0019 => Ok(LENSES_CODE_SEQUENCE),
    0x001A => Ok(CHANNEL_DESCRIPTION_CODE_SEQUENCE),
    0x001B => Ok(REFRACTIVE_STATE_SEQUENCE),
    0x001C => Ok(MYDRIATIC_AGENT_CODE_SEQUENCE),
    0x001D => Ok(RELATIVE_IMAGE_POSITION_CODE_SEQUENCE),
    0x001E => Ok(CAMERA_ANGLE_OF_VIEW),
    0x0020 => Ok(STEREO_PAIRS_SEQUENCE),
    0x0021 => Ok(LEFT_IMAGE_SEQUENCE),
    0x0022 => Ok(RIGHT_IMAGE_SEQUENCE),
    0x0028 => Ok(STEREO_PAIRS_PRESENT),
    0x0030 => Ok(AXIAL_LENGTH_OF_THE_EYE),
    0x0031 => Ok(OPHTHALMIC_FRAME_LOCATION_SEQUENCE),
    0x0032 => Ok(REFERENCE_COORDINATES),
    0x0035 => Ok(DEPTH_SPATIAL_RESOLUTION),
    0x0036 => Ok(MAXIMUM_DEPTH_DISTORTION),
    0x0037 => Ok(ALONG_SCAN_SPATIAL_RESOLUTION),
    0x0038 => Ok(MAXIMUM_ALONG_SCAN_DISTORTION),
    0x0039 => Ok(OPHTHALMIC_IMAGE_ORIENTATION),
    0x0041 => Ok(DEPTH_OF_TRANSVERSE_IMAGE),
    0x0042 => Ok(MYDRIATIC_AGENT_CONCENTRATION_UNITS_SEQUENCE),
    0x0048 => Ok(ACROSS_SCAN_SPATIAL_RESOLUTION),
    0x0049 => Ok(MAXIMUM_ACROSS_SCAN_DISTORTION),
    0x004E => Ok(MYDRIATIC_AGENT_CONCENTRATION),
    0x0055 => Ok(ILLUMINATION_WAVE_LENGTH),
    0x0056 => Ok(ILLUMINATION_POWER),
    0x0057 => Ok(ILLUMINATION_BANDWIDTH),
    0x0058 => Ok(MYDRIATIC_AGENT_SEQUENCE),
    0x1007 => Ok(OPHTHALMIC_AXIAL_MEASUREMENTS_RIGHT_EYE_SEQUENCE),
    0x1008 => Ok(OPHTHALMIC_AXIAL_MEASUREMENTS_LEFT_EYE_SEQUENCE),
    0x1009 => Ok(OPHTHALMIC_AXIAL_MEASUREMENTS_DEVICE_TYPE),
    0x1010 => Ok(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_TYPE),
    0x1012 => Ok(OPHTHALMIC_AXIAL_LENGTH_SEQUENCE),
    0x1019 => Ok(OPHTHALMIC_AXIAL_LENGTH),
    0x1024 => Ok(LENS_STATUS_CODE_SEQUENCE),
    0x1025 => Ok(VITREOUS_STATUS_CODE_SEQUENCE),
    0x1028 => Ok(IOL_FORMULA_CODE_SEQUENCE),
    0x1029 => Ok(IOL_FORMULA_DETAIL),
    0x1033 => Ok(KERATOMETER_INDEX),
    0x1035 => Ok(SOURCE_OF_OPHTHALMIC_AXIAL_LENGTH_CODE_SEQUENCE),
    0x1036 => Ok(SOURCE_OF_CORNEAL_SIZE_DATA_CODE_SEQUENCE),
    0x1037 => Ok(TARGET_REFRACTION),
    0x1039 => Ok(REFRACTIVE_PROCEDURE_OCCURRED),
    0x1040 => Ok(REFRACTIVE_SURGERY_TYPE_CODE_SEQUENCE),
    0x1044 => Ok(OPHTHALMIC_ULTRASOUND_METHOD_CODE_SEQUENCE),
    0x1045 => Ok(SURGICALLY_INDUCED_ASTIGMATISM_SEQUENCE),
    0x1046 => Ok(TYPE_OF_OPTICAL_CORRECTION),
    0x1047 => Ok(TORIC_IOL_POWER_SEQUENCE),
    0x1048 => Ok(PREDICTED_TORIC_ERROR_SEQUENCE),
    0x1049 => Ok(PRE_SELECTED_FOR_IMPLANTATION),
    0x104A => Ok(TORIC_IOL_POWER_FOR_EXACT_EMMETROPIA_SEQUENCE),
    0x104B => Ok(TORIC_IOL_POWER_FOR_EXACT_TARGET_REFRACTION_SEQUENCE),
    0x1050 => Ok(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEQUENCE),
    0x1053 => Ok(IOL_POWER),
    0x1054 => Ok(PREDICTED_REFRACTIVE_ERROR),
    0x1059 => Ok(OPHTHALMIC_AXIAL_LENGTH_VELOCITY),
    0x1065 => Ok(LENS_STATUS_DESCRIPTION),
    0x1066 => Ok(VITREOUS_STATUS_DESCRIPTION),
    0x1090 => Ok(IOL_POWER_SEQUENCE),
    0x1092 => Ok(LENS_CONSTANT_SEQUENCE),
    0x1093 => Ok(IOL_MANUFACTURER),
    0x1094 => Ok(LENS_CONSTANT_DESCRIPTION),
    0x1095 => Ok(IMPLANT_NAME),
    0x1096 => Ok(KERATOMETRY_MEASUREMENT_TYPE_CODE_SEQUENCE),
    0x1097 => Ok(IMPLANT_PART_NUMBER),
    0x1100 => Ok(REFERENCED_OPHTHALMIC_AXIAL_MEASUREMENTS_SEQUENCE),
    0x1101 => {
      Ok(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEGMENT_NAME_CODE_SEQUENCE)
    }
    0x1103 => Ok(REFRACTIVE_ERROR_BEFORE_REFRACTIVE_SURGERY_CODE_SEQUENCE),
    0x1121 => Ok(IOL_POWER_FOR_EXACT_EMMETROPIA),
    0x1122 => Ok(IOL_POWER_FOR_EXACT_TARGET_REFRACTION),
    0x1125 => Ok(ANTERIOR_CHAMBER_DEPTH_DEFINITION_CODE_SEQUENCE),
    0x1127 => Ok(LENS_THICKNESS_SEQUENCE),
    0x1128 => Ok(ANTERIOR_CHAMBER_DEPTH_SEQUENCE),
    0x112A => Ok(CALCULATION_COMMENT_SEQUENCE),
    0x112B => Ok(CALCULATION_COMMENT_TYPE),
    0x112C => Ok(CALCULATION_COMMENT),
    0x1130 => Ok(LENS_THICKNESS),
    0x1131 => Ok(ANTERIOR_CHAMBER_DEPTH),
    0x1132 => Ok(SOURCE_OF_LENS_THICKNESS_DATA_CODE_SEQUENCE),
    0x1133 => Ok(SOURCE_OF_ANTERIOR_CHAMBER_DEPTH_DATA_CODE_SEQUENCE),
    0x1134 => Ok(SOURCE_OF_REFRACTIVE_MEASUREMENTS_SEQUENCE),
    0x1135 => Ok(SOURCE_OF_REFRACTIVE_MEASUREMENTS_CODE_SEQUENCE),
    0x1140 => Ok(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENT_MODIFIED),
    0x1150 => Ok(OPHTHALMIC_AXIAL_LENGTH_DATA_SOURCE_CODE_SEQUENCE),
    0x1153 => Ok(OPHTHALMIC_AXIAL_LENGTH_ACQUISITION_METHOD_CODE_SEQUENCE),
    0x1155 => Ok(SIGNAL_TO_NOISE_RATIO),
    0x1159 => Ok(OPHTHALMIC_AXIAL_LENGTH_DATA_SOURCE_DESCRIPTION),
    0x1210 => Ok(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_TOTAL_LENGTH_SEQUENCE),
    0x1211 => {
      Ok(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEGMENTAL_LENGTH_SEQUENCE)
    }
    0x1212 => {
      Ok(OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_LENGTH_SUMMATION_SEQUENCE)
    }
    0x1220 => Ok(ULTRASOUND_OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEQUENCE),
    0x1225 => Ok(OPTICAL_OPHTHALMIC_AXIAL_LENGTH_MEASUREMENTS_SEQUENCE),
    0x1230 => Ok(ULTRASOUND_SELECTED_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE),
    0x1250 => Ok(OPHTHALMIC_AXIAL_LENGTH_SELECTION_METHOD_CODE_SEQUENCE),
    0x1255 => Ok(OPTICAL_SELECTED_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE),
    0x1257 => Ok(SELECTED_SEGMENTAL_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE),
    0x1260 => Ok(SELECTED_TOTAL_OPHTHALMIC_AXIAL_LENGTH_SEQUENCE),
    0x1262 => Ok(OPHTHALMIC_AXIAL_LENGTH_QUALITY_METRIC_SEQUENCE),
    0x1265 => Ok(OPHTHALMIC_AXIAL_LENGTH_QUALITY_METRIC_TYPE_CODE_SEQUENCE),
    0x1273 => Ok(OPHTHALMIC_AXIAL_LENGTH_QUALITY_METRIC_TYPE_DESCRIPTION),
    0x1300 => Ok(INTRAOCULAR_LENS_CALCULATIONS_RIGHT_EYE_SEQUENCE),
    0x1310 => Ok(INTRAOCULAR_LENS_CALCULATIONS_LEFT_EYE_SEQUENCE),
    0x1330 => {
      Ok(REFERENCED_OPHTHALMIC_AXIAL_LENGTH_MEASUREMENT_QC_IMAGE_SEQUENCE)
    }
    0x1415 => Ok(OPHTHALMIC_MAPPING_DEVICE_TYPE),
    0x1420 => Ok(ACQUISITION_METHOD_CODE_SEQUENCE),
    0x1423 => Ok(ACQUISITION_METHOD_ALGORITHM_SEQUENCE),
    0x1436 => Ok(OPHTHALMIC_THICKNESS_MAP_TYPE_CODE_SEQUENCE),
    0x1443 => Ok(OPHTHALMIC_THICKNESS_MAPPING_NORMALS_SEQUENCE),
    0x1445 => Ok(RETINAL_THICKNESS_DEFINITION_CODE_SEQUENCE),
    0x1450 => Ok(PIXEL_VALUE_MAPPING_TO_CODED_CONCEPT_SEQUENCE),
    0x1452 => Ok(MAPPED_PIXEL_VALUE),
    0x1454 => Ok(PIXEL_VALUE_MAPPING_EXPLANATION),
    0x1458 => Ok(OPHTHALMIC_THICKNESS_MAP_QUALITY_THRESHOLD_SEQUENCE),
    0x1460 => Ok(OPHTHALMIC_THICKNESS_MAP_THRESHOLD_QUALITY_RATING),
    0x1463 => Ok(ANATOMIC_STRUCTURE_REFERENCE_POINT),
    0x1465 => Ok(REGISTRATION_TO_LOCALIZER_SEQUENCE),
    0x1466 => Ok(REGISTERED_LOCALIZER_UNITS),
    0x1467 => Ok(REGISTERED_LOCALIZER_TOP_LEFT_HAND_CORNER),
    0x1468 => Ok(REGISTERED_LOCALIZER_BOTTOM_RIGHT_HAND_CORNER),
    0x1470 => Ok(OPHTHALMIC_THICKNESS_MAP_QUALITY_RATING_SEQUENCE),
    0x1472 => Ok(RELEVANT_OPT_ATTRIBUTES_SEQUENCE),
    0x1512 => Ok(TRANSFORMATION_METHOD_CODE_SEQUENCE),
    0x1513 => Ok(TRANSFORMATION_ALGORITHM_SEQUENCE),
    0x1515 => Ok(OPHTHALMIC_AXIAL_LENGTH_METHOD),
    0x1517 => Ok(OPHTHALMIC_FOV),
    0x1518 => Ok(TWO_DIMENSIONAL_TO_THREE_DIMENSIONAL_MAP_SEQUENCE),
    0x1525 => Ok(WIDE_FIELD_OPHTHALMIC_PHOTOGRAPHY_QUALITY_RATING_SEQUENCE),
    0x1526 => Ok(WIDE_FIELD_OPHTHALMIC_PHOTOGRAPHY_QUALITY_THRESHOLD_SEQUENCE),
    0x1527 => Ok(WIDE_FIELD_OPHTHALMIC_PHOTOGRAPHY_THRESHOLD_QUALITY_RATING),
    0x1528 => Ok(X_COORDINATES_CENTER_PIXEL_VIEW_ANGLE),
    0x1529 => Ok(Y_COORDINATES_CENTER_PIXEL_VIEW_ANGLE),
    0x1530 => Ok(NUMBER_OF_MAP_POINTS),
    0x1531 => Ok(TWO_DIMENSIONAL_TO_THREE_DIMENSIONAL_MAP_DATA),
    0x1612 => Ok(DERIVATION_ALGORITHM_SEQUENCE),
    0x1615 => Ok(OPHTHALMIC_IMAGE_TYPE_CODE_SEQUENCE),
    0x1616 => Ok(OPHTHALMIC_IMAGE_TYPE_DESCRIPTION),
    0x1618 => Ok(SCAN_PATTERN_TYPE_CODE_SEQUENCE),
    0x1620 => Ok(REFERENCED_SURFACE_MESH_IDENTIFICATION_SEQUENCE),
    0x1622 => Ok(OPHTHALMIC_VOLUMETRIC_PROPERTIES_FLAG),
    0x1624 => Ok(OPHTHALMIC_ANATOMIC_REFERENCE_POINT_X_COORDINATE),
    0x1626 => Ok(OPHTHALMIC_ANATOMIC_REFERENCE_POINT_Y_COORDINATE),
    0x1628 => Ok(OPHTHALMIC_EN_FACE_IMAGE_QUALITY_RATING_SEQUENCE),
    0x1630 => Ok(QUALITY_THRESHOLD),
    0x1640 => Ok(OCT_BSCAN_ANALYSIS_ACQUISITION_PARAMETERS_SEQUENCE),
    0x1642 => Ok(NUMBER_OF_BSCANS_PER_FRAME),
    0x1643 => Ok(BSCAN_SLAB_THICKNESS),
    0x1644 => Ok(DISTANCE_BETWEEN_BSCAN_SLABS),
    0x1645 => Ok(BSCAN_CYCLE_TIME),
    0x1646 => Ok(BSCAN_CYCLE_TIME_VECTOR),
    0x1649 => Ok(ASCAN_RATE),
    0x1650 => Ok(BSCAN_RATE),
    0x1658 => Ok(SURFACE_MESH_Z_PIXEL_OFFSET),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0024.
///
fn find_element_in_group_0024(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(VISUAL_FIELD_HORIZONTAL_EXTENT),
    0x0011 => Ok(VISUAL_FIELD_VERTICAL_EXTENT),
    0x0012 => Ok(VISUAL_FIELD_SHAPE),
    0x0016 => Ok(SCREENING_TEST_MODE_CODE_SEQUENCE),
    0x0018 => Ok(MAXIMUM_STIMULUS_LUMINANCE),
    0x0020 => Ok(BACKGROUND_LUMINANCE),
    0x0021 => Ok(STIMULUS_COLOR_CODE_SEQUENCE),
    0x0024 => Ok(BACKGROUND_ILLUMINATION_COLOR_CODE_SEQUENCE),
    0x0025 => Ok(STIMULUS_AREA),
    0x0028 => Ok(STIMULUS_PRESENTATION_TIME),
    0x0032 => Ok(FIXATION_SEQUENCE),
    0x0033 => Ok(FIXATION_MONITORING_CODE_SEQUENCE),
    0x0034 => Ok(VISUAL_FIELD_CATCH_TRIAL_SEQUENCE),
    0x0035 => Ok(FIXATION_CHECKED_QUANTITY),
    0x0036 => Ok(PATIENT_NOT_PROPERLY_FIXATED_QUANTITY),
    0x0037 => Ok(PRESENTED_VISUAL_STIMULI_DATA_FLAG),
    0x0038 => Ok(NUMBER_OF_VISUAL_STIMULI),
    0x0039 => Ok(EXCESSIVE_FIXATION_LOSSES_DATA_FLAG),
    0x0040 => Ok(EXCESSIVE_FIXATION_LOSSES),
    0x0042 => Ok(STIMULI_RETESTING_QUANTITY),
    0x0044 => Ok(COMMENTS_ON_PATIENT_PERFORMANCE_OF_VISUAL_FIELD),
    0x0045 => Ok(FALSE_NEGATIVES_ESTIMATE_FLAG),
    0x0046 => Ok(FALSE_NEGATIVES_ESTIMATE),
    0x0048 => Ok(NEGATIVE_CATCH_TRIALS_QUANTITY),
    0x0050 => Ok(FALSE_NEGATIVES_QUANTITY),
    0x0051 => Ok(EXCESSIVE_FALSE_NEGATIVES_DATA_FLAG),
    0x0052 => Ok(EXCESSIVE_FALSE_NEGATIVES),
    0x0053 => Ok(FALSE_POSITIVES_ESTIMATE_FLAG),
    0x0054 => Ok(FALSE_POSITIVES_ESTIMATE),
    0x0055 => Ok(CATCH_TRIALS_DATA_FLAG),
    0x0056 => Ok(POSITIVE_CATCH_TRIALS_QUANTITY),
    0x0057 => Ok(TEST_POINT_NORMALS_DATA_FLAG),
    0x0058 => Ok(TEST_POINT_NORMALS_SEQUENCE),
    0x0059 => Ok(GLOBAL_DEVIATION_PROBABILITY_NORMALS_FLAG),
    0x0060 => Ok(FALSE_POSITIVES_QUANTITY),
    0x0061 => Ok(EXCESSIVE_FALSE_POSITIVES_DATA_FLAG),
    0x0062 => Ok(EXCESSIVE_FALSE_POSITIVES),
    0x0063 => Ok(VISUAL_FIELD_TEST_NORMALS_FLAG),
    0x0064 => Ok(RESULTS_NORMALS_SEQUENCE),
    0x0065 => Ok(AGE_CORRECTED_SENSITIVITY_DEVIATION_ALGORITHM_SEQUENCE),
    0x0066 => Ok(GLOBAL_DEVIATION_FROM_NORMAL),
    0x0067 => Ok(GENERALIZED_DEFECT_SENSITIVITY_DEVIATION_ALGORITHM_SEQUENCE),
    0x0068 => Ok(LOCALIZED_DEVIATION_FROM_NORMAL),
    0x0069 => Ok(PATIENT_RELIABILITY_INDICATOR),
    0x0070 => Ok(VISUAL_FIELD_MEAN_SENSITIVITY),
    0x0071 => Ok(GLOBAL_DEVIATION_PROBABILITY),
    0x0072 => Ok(LOCAL_DEVIATION_PROBABILITY_NORMALS_FLAG),
    0x0073 => Ok(LOCALIZED_DEVIATION_PROBABILITY),
    0x0074 => Ok(SHORT_TERM_FLUCTUATION_CALCULATED),
    0x0075 => Ok(SHORT_TERM_FLUCTUATION),
    0x0076 => Ok(SHORT_TERM_FLUCTUATION_PROBABILITY_CALCULATED),
    0x0077 => Ok(SHORT_TERM_FLUCTUATION_PROBABILITY),
    0x0078 => Ok(CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL_CALCULATED),
    0x0079 => Ok(CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL),
    0x0080 => {
      Ok(CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL_PROBABILITY_CALCULATED)
    }
    0x0081 => Ok(CORRECTED_LOCALIZED_DEVIATION_FROM_NORMAL_PROBABILITY),
    0x0083 => Ok(GLOBAL_DEVIATION_PROBABILITY_SEQUENCE),
    0x0085 => Ok(LOCALIZED_DEVIATION_PROBABILITY_SEQUENCE),
    0x0086 => Ok(FOVEAL_SENSITIVITY_MEASURED),
    0x0087 => Ok(FOVEAL_SENSITIVITY),
    0x0088 => Ok(VISUAL_FIELD_TEST_DURATION),
    0x0089 => Ok(VISUAL_FIELD_TEST_POINT_SEQUENCE),
    0x0090 => Ok(VISUAL_FIELD_TEST_POINT_X_COORDINATE),
    0x0091 => Ok(VISUAL_FIELD_TEST_POINT_Y_COORDINATE),
    0x0092 => Ok(AGE_CORRECTED_SENSITIVITY_DEVIATION_VALUE),
    0x0093 => Ok(STIMULUS_RESULTS),
    0x0094 => Ok(SENSITIVITY_VALUE),
    0x0095 => Ok(RETEST_STIMULUS_SEEN),
    0x0096 => Ok(RETEST_SENSITIVITY_VALUE),
    0x0097 => Ok(VISUAL_FIELD_TEST_POINT_NORMALS_SEQUENCE),
    0x0098 => Ok(QUANTIFIED_DEFECT),
    0x0100 => Ok(AGE_CORRECTED_SENSITIVITY_DEVIATION_PROBABILITY_VALUE),
    0x0102 => Ok(GENERALIZED_DEFECT_CORRECTED_SENSITIVITY_DEVIATION_FLAG),
    0x0103 => Ok(GENERALIZED_DEFECT_CORRECTED_SENSITIVITY_DEVIATION_VALUE),
    0x0104 => {
      Ok(GENERALIZED_DEFECT_CORRECTED_SENSITIVITY_DEVIATION_PROBABILITY_VALUE)
    }
    0x0105 => Ok(MINIMUM_SENSITIVITY_VALUE),
    0x0106 => Ok(BLIND_SPOT_LOCALIZED),
    0x0107 => Ok(BLIND_SPOT_X_COORDINATE),
    0x0108 => Ok(BLIND_SPOT_Y_COORDINATE),
    0x0110 => Ok(VISUAL_ACUITY_MEASUREMENT_SEQUENCE),
    0x0112 => Ok(REFRACTIVE_PARAMETERS_USED_ON_PATIENT_SEQUENCE),
    0x0113 => Ok(MEASUREMENT_LATERALITY),
    0x0114 => Ok(OPHTHALMIC_PATIENT_CLINICAL_INFORMATION_LEFT_EYE_SEQUENCE),
    0x0115 => Ok(OPHTHALMIC_PATIENT_CLINICAL_INFORMATION_RIGHT_EYE_SEQUENCE),
    0x0117 => Ok(FOVEAL_POINT_NORMATIVE_DATA_FLAG),
    0x0118 => Ok(FOVEAL_POINT_PROBABILITY_VALUE),
    0x0120 => Ok(SCREENING_BASELINE_MEASURED),
    0x0122 => Ok(SCREENING_BASELINE_MEASURED_SEQUENCE),
    0x0124 => Ok(SCREENING_BASELINE_TYPE),
    0x0126 => Ok(SCREENING_BASELINE_VALUE),
    0x0202 => Ok(ALGORITHM_SOURCE),
    0x0306 => Ok(DATA_SET_NAME),
    0x0307 => Ok(DATA_SET_VERSION),
    0x0308 => Ok(DATA_SET_SOURCE),
    0x0309 => Ok(DATA_SET_DESCRIPTION),
    0x0317 => Ok(VISUAL_FIELD_TEST_RELIABILITY_GLOBAL_INDEX_SEQUENCE),
    0x0320 => Ok(VISUAL_FIELD_GLOBAL_RESULTS_INDEX_SEQUENCE),
    0x0325 => Ok(DATA_OBSERVATION_SEQUENCE),
    0x0338 => Ok(INDEX_NORMALS_FLAG),
    0x0341 => Ok(INDEX_PROBABILITY),
    0x0344 => Ok(INDEX_PROBABILITY_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0028.
///
fn find_element_in_group_0028(element: u16) -> Result<Item, ()> {
  match element {
    0x0002 => Ok(SAMPLES_PER_PIXEL),
    0x0003 => Ok(SAMPLES_PER_PIXEL_USED),
    0x0004 => Ok(PHOTOMETRIC_INTERPRETATION),
    0x0005 => Ok(IMAGE_DIMENSIONS),
    0x0006 => Ok(PLANAR_CONFIGURATION),
    0x0008 => Ok(NUMBER_OF_FRAMES),
    0x0009 => Ok(FRAME_INCREMENT_POINTER),
    0x000A => Ok(FRAME_DIMENSION_POINTER),
    0x0010 => Ok(ROWS),
    0x0011 => Ok(COLUMNS),
    0x0012 => Ok(PLANES),
    0x0014 => Ok(ULTRASOUND_COLOR_DATA_PRESENT),
    0x0030 => Ok(PIXEL_SPACING),
    0x0031 => Ok(ZOOM_FACTOR),
    0x0032 => Ok(ZOOM_CENTER),
    0x0034 => Ok(PIXEL_ASPECT_RATIO),
    0x0040 => Ok(IMAGE_FORMAT),
    0x0050 => Ok(MANIPULATED_IMAGE),
    0x0051 => Ok(CORRECTED_IMAGE),
    0x005F => Ok(COMPRESSION_RECOGNITION_CODE),
    0x0060 => Ok(COMPRESSION_CODE),
    0x0061 => Ok(COMPRESSION_ORIGINATOR),
    0x0062 => Ok(COMPRESSION_LABEL),
    0x0063 => Ok(COMPRESSION_DESCRIPTION),
    0x0065 => Ok(COMPRESSION_SEQUENCE),
    0x0066 => Ok(COMPRESSION_STEP_POINTERS),
    0x0068 => Ok(REPEAT_INTERVAL),
    0x0069 => Ok(BITS_GROUPED),
    0x0070 => Ok(PERIMETER_TABLE),
    0x0071 => Ok(PERIMETER_VALUE),
    0x0080 => Ok(PREDICTOR_ROWS),
    0x0081 => Ok(PREDICTOR_COLUMNS),
    0x0082 => Ok(PREDICTOR_CONSTANTS),
    0x0090 => Ok(BLOCKED_PIXELS),
    0x0091 => Ok(BLOCK_ROWS),
    0x0092 => Ok(BLOCK_COLUMNS),
    0x0093 => Ok(ROW_OVERLAP),
    0x0094 => Ok(COLUMN_OVERLAP),
    0x0100 => Ok(BITS_ALLOCATED),
    0x0101 => Ok(BITS_STORED),
    0x0102 => Ok(HIGH_BIT),
    0x0103 => Ok(PIXEL_REPRESENTATION),
    0x0104 => Ok(SMALLEST_VALID_PIXEL_VALUE),
    0x0105 => Ok(LARGEST_VALID_PIXEL_VALUE),
    0x0106 => Ok(SMALLEST_IMAGE_PIXEL_VALUE),
    0x0107 => Ok(LARGEST_IMAGE_PIXEL_VALUE),
    0x0108 => Ok(SMALLEST_PIXEL_VALUE_IN_SERIES),
    0x0109 => Ok(LARGEST_PIXEL_VALUE_IN_SERIES),
    0x0110 => Ok(SMALLEST_IMAGE_PIXEL_VALUE_IN_PLANE),
    0x0111 => Ok(LARGEST_IMAGE_PIXEL_VALUE_IN_PLANE),
    0x0120 => Ok(PIXEL_PADDING_VALUE),
    0x0121 => Ok(PIXEL_PADDING_RANGE_LIMIT),
    0x0122 => Ok(FLOAT_PIXEL_PADDING_VALUE),
    0x0123 => Ok(DOUBLE_FLOAT_PIXEL_PADDING_VALUE),
    0x0124 => Ok(FLOAT_PIXEL_PADDING_RANGE_LIMIT),
    0x0125 => Ok(DOUBLE_FLOAT_PIXEL_PADDING_RANGE_LIMIT),
    0x0200 => Ok(IMAGE_LOCATION),
    0x0300 => Ok(QUALITY_CONTROL_IMAGE),
    0x0301 => Ok(BURNED_IN_ANNOTATION),
    0x0302 => Ok(RECOGNIZABLE_VISUAL_FEATURES),
    0x0303 => Ok(LONGITUDINAL_TEMPORAL_INFORMATION_MODIFIED),
    0x0304 => Ok(REFERENCED_COLOR_PALETTE_INSTANCE_UID),
    0x0400 => Ok(TRANSFORM_LABEL),
    0x0401 => Ok(TRANSFORM_VERSION_NUMBER),
    0x0402 => Ok(NUMBER_OF_TRANSFORM_STEPS),
    0x0403 => Ok(SEQUENCE_OF_COMPRESSED_DATA),
    0x0404 => Ok(DETAILS_OF_COEFFICIENTS),
    0x0700 => Ok(DCT_LABEL),
    0x0701 => Ok(DATA_BLOCK_DESCRIPTION),
    0x0702 => Ok(DATA_BLOCK),
    0x0710 => Ok(NORMALIZATION_FACTOR_FORMAT),
    0x0720 => Ok(ZONAL_MAP_NUMBER_FORMAT),
    0x0721 => Ok(ZONAL_MAP_LOCATION),
    0x0722 => Ok(ZONAL_MAP_FORMAT),
    0x0730 => Ok(ADAPTIVE_MAP_FORMAT),
    0x0740 => Ok(CODE_NUMBER_FORMAT),
    0x0A02 => Ok(PIXEL_SPACING_CALIBRATION_TYPE),
    0x0A04 => Ok(PIXEL_SPACING_CALIBRATION_DESCRIPTION),
    0x1040 => Ok(PIXEL_INTENSITY_RELATIONSHIP),
    0x1041 => Ok(PIXEL_INTENSITY_RELATIONSHIP_SIGN),
    0x1050 => Ok(WINDOW_CENTER),
    0x1051 => Ok(WINDOW_WIDTH),
    0x1052 => Ok(RESCALE_INTERCEPT),
    0x1053 => Ok(RESCALE_SLOPE),
    0x1054 => Ok(RESCALE_TYPE),
    0x1055 => Ok(WINDOW_CENTER_WIDTH_EXPLANATION),
    0x1056 => Ok(VOILUT_FUNCTION),
    0x1080 => Ok(GRAY_SCALE),
    0x1090 => Ok(RECOMMENDED_VIEWING_MODE),
    0x1100 => Ok(GRAY_LOOKUP_TABLE_DESCRIPTOR),
    0x1101 => Ok(RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR),
    0x1102 => Ok(GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR),
    0x1103 => Ok(BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR),
    0x1104 => Ok(ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR),
    0x1111 => Ok(LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR),
    0x1112 => Ok(LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR),
    0x1113 => Ok(LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DESCRIPTOR),
    0x1199 => Ok(PALETTE_COLOR_LOOKUP_TABLE_UID),
    0x1200 => Ok(GRAY_LOOKUP_TABLE_DATA),
    0x1201 => Ok(RED_PALETTE_COLOR_LOOKUP_TABLE_DATA),
    0x1202 => Ok(GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA),
    0x1203 => Ok(BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA),
    0x1204 => Ok(ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DATA),
    0x1211 => Ok(LARGE_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA),
    0x1212 => Ok(LARGE_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA),
    0x1213 => Ok(LARGE_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA),
    0x1214 => Ok(LARGE_PALETTE_COLOR_LOOKUP_TABLE_UID),
    0x1221 => Ok(SEGMENTED_RED_PALETTE_COLOR_LOOKUP_TABLE_DATA),
    0x1222 => Ok(SEGMENTED_GREEN_PALETTE_COLOR_LOOKUP_TABLE_DATA),
    0x1223 => Ok(SEGMENTED_BLUE_PALETTE_COLOR_LOOKUP_TABLE_DATA),
    0x1224 => Ok(SEGMENTED_ALPHA_PALETTE_COLOR_LOOKUP_TABLE_DATA),
    0x1230 => Ok(STORED_VALUE_COLOR_RANGE_SEQUENCE),
    0x1231 => Ok(MINIMUM_STORED_VALUE_MAPPED),
    0x1232 => Ok(MAXIMUM_STORED_VALUE_MAPPED),
    0x1300 => Ok(BREAST_IMPLANT_PRESENT),
    0x1350 => Ok(PARTIAL_VIEW),
    0x1351 => Ok(PARTIAL_VIEW_DESCRIPTION),
    0x1352 => Ok(PARTIAL_VIEW_CODE_SEQUENCE),
    0x135A => Ok(SPATIAL_LOCATIONS_PRESERVED),
    0x1401 => Ok(DATA_FRAME_ASSIGNMENT_SEQUENCE),
    0x1402 => Ok(DATA_PATH_ASSIGNMENT),
    0x1403 => Ok(BITS_MAPPED_TO_COLOR_LOOKUP_TABLE),
    0x1404 => Ok(BLENDING_LUT1_SEQUENCE),
    0x1405 => Ok(BLENDING_LUT1_TRANSFER_FUNCTION),
    0x1406 => Ok(BLENDING_WEIGHT_CONSTANT),
    0x1407 => Ok(BLENDING_LOOKUP_TABLE_DESCRIPTOR),
    0x1408 => Ok(BLENDING_LOOKUP_TABLE_DATA),
    0x140B => Ok(ENHANCED_PALETTE_COLOR_LOOKUP_TABLE_SEQUENCE),
    0x140C => Ok(BLENDING_LUT2_SEQUENCE),
    0x140D => Ok(BLENDING_LUT2_TRANSFER_FUNCTION),
    0x140E => Ok(DATA_PATH_ID),
    0x140F => Ok(RGBLUT_TRANSFER_FUNCTION),
    0x1410 => Ok(ALPHA_LUT_TRANSFER_FUNCTION),
    0x2000 => Ok(ICC_PROFILE),
    0x2002 => Ok(COLOR_SPACE),
    0x2110 => Ok(LOSSY_IMAGE_COMPRESSION),
    0x2112 => Ok(LOSSY_IMAGE_COMPRESSION_RATIO),
    0x2114 => Ok(LOSSY_IMAGE_COMPRESSION_METHOD),
    0x3000 => Ok(MODALITY_LUT_SEQUENCE),
    0x3001 => Ok(VARIABLE_MODALITY_LUT_SEQUENCE),
    0x3002 => Ok(LUT_DESCRIPTOR),
    0x3003 => Ok(LUT_EXPLANATION),
    0x3004 => Ok(MODALITY_LUT_TYPE),
    0x3006 => Ok(LUT_DATA),
    0x3010 => Ok(VOILUT_SEQUENCE),
    0x3110 => Ok(SOFTCOPY_VOILUT_SEQUENCE),
    0x4000 => Ok(IMAGE_PRESENTATION_COMMENTS),
    0x5000 => Ok(BI_PLANE_ACQUISITION_SEQUENCE),
    0x6010 => Ok(REPRESENTATIVE_FRAME_NUMBER),
    0x6020 => Ok(FRAME_NUMBERS_OF_INTEREST),
    0x6022 => Ok(FRAME_OF_INTEREST_DESCRIPTION),
    0x6023 => Ok(FRAME_OF_INTEREST_TYPE),
    0x6030 => Ok(MASK_POINTERS),
    0x6040 => Ok(R_WAVE_POINTER),
    0x6100 => Ok(MASK_SUBTRACTION_SEQUENCE),
    0x6101 => Ok(MASK_OPERATION),
    0x6102 => Ok(APPLICABLE_FRAME_RANGE),
    0x6110 => Ok(MASK_FRAME_NUMBERS),
    0x6112 => Ok(CONTRAST_FRAME_AVERAGING),
    0x6114 => Ok(MASK_SUB_PIXEL_SHIFT),
    0x6120 => Ok(TID_OFFSET),
    0x6190 => Ok(MASK_OPERATION_EXPLANATION),
    0x7000 => Ok(EQUIPMENT_ADMINISTRATOR_SEQUENCE),
    0x7001 => Ok(NUMBER_OF_DISPLAY_SUBSYSTEMS),
    0x7002 => Ok(CURRENT_CONFIGURATION_ID),
    0x7003 => Ok(DISPLAY_SUBSYSTEM_ID),
    0x7004 => Ok(DISPLAY_SUBSYSTEM_NAME),
    0x7005 => Ok(DISPLAY_SUBSYSTEM_DESCRIPTION),
    0x7006 => Ok(SYSTEM_STATUS),
    0x7007 => Ok(SYSTEM_STATUS_COMMENT),
    0x7008 => Ok(TARGET_LUMINANCE_CHARACTERISTICS_SEQUENCE),
    0x7009 => Ok(LUMINANCE_CHARACTERISTICS_ID),
    0x700A => Ok(DISPLAY_SUBSYSTEM_CONFIGURATION_SEQUENCE),
    0x700B => Ok(CONFIGURATION_ID),
    0x700C => Ok(CONFIGURATION_NAME),
    0x700D => Ok(CONFIGURATION_DESCRIPTION),
    0x700E => Ok(REFERENCED_TARGET_LUMINANCE_CHARACTERISTICS_ID),
    0x700F => Ok(QA_RESULTS_SEQUENCE),
    0x7010 => Ok(DISPLAY_SUBSYSTEM_QA_RESULTS_SEQUENCE),
    0x7011 => Ok(CONFIGURATION_QA_RESULTS_SEQUENCE),
    0x7012 => Ok(MEASUREMENT_EQUIPMENT_SEQUENCE),
    0x7013 => Ok(MEASUREMENT_FUNCTIONS),
    0x7014 => Ok(MEASUREMENT_EQUIPMENT_TYPE),
    0x7015 => Ok(VISUAL_EVALUATION_RESULT_SEQUENCE),
    0x7016 => Ok(DISPLAY_CALIBRATION_RESULT_SEQUENCE),
    0x7017 => Ok(DDL_VALUE),
    0x7018 => Ok(CI_EXY_WHITE_POINT),
    0x7019 => Ok(DISPLAY_FUNCTION_TYPE),
    0x701A => Ok(GAMMA_VALUE),
    0x701B => Ok(NUMBER_OF_LUMINANCE_POINTS),
    0x701C => Ok(LUMINANCE_RESPONSE_SEQUENCE),
    0x701D => Ok(TARGET_MINIMUM_LUMINANCE),
    0x701E => Ok(TARGET_MAXIMUM_LUMINANCE),
    0x701F => Ok(LUMINANCE_VALUE),
    0x7020 => Ok(LUMINANCE_RESPONSE_DESCRIPTION),
    0x7021 => Ok(WHITE_POINT_FLAG),
    0x7022 => Ok(DISPLAY_DEVICE_TYPE_CODE_SEQUENCE),
    0x7023 => Ok(DISPLAY_SUBSYSTEM_SEQUENCE),
    0x7024 => Ok(LUMINANCE_RESULT_SEQUENCE),
    0x7025 => Ok(AMBIENT_LIGHT_VALUE_SOURCE),
    0x7026 => Ok(MEASURED_CHARACTERISTICS),
    0x7027 => Ok(LUMINANCE_UNIFORMITY_RESULT_SEQUENCE),
    0x7028 => Ok(VISUAL_EVALUATION_TEST_SEQUENCE),
    0x7029 => Ok(TEST_RESULT),
    0x702A => Ok(TEST_RESULT_COMMENT),
    0x702B => Ok(TEST_IMAGE_VALIDATION),
    0x702C => Ok(TEST_PATTERN_CODE_SEQUENCE),
    0x702D => Ok(MEASUREMENT_PATTERN_CODE_SEQUENCE),
    0x702E => Ok(VISUAL_EVALUATION_METHOD_CODE_SEQUENCE),
    0x7FE0 => Ok(PIXEL_DATA_PROVIDER_URL),
    0x9001 => Ok(DATA_POINT_ROWS),
    0x9002 => Ok(DATA_POINT_COLUMNS),
    0x9003 => Ok(SIGNAL_DOMAIN_COLUMNS),
    0x9099 => Ok(LARGEST_MONOCHROME_PIXEL_VALUE),
    0x9108 => Ok(DATA_REPRESENTATION),
    0x9110 => Ok(PIXEL_MEASURES_SEQUENCE),
    0x9132 => Ok(FRAME_VOILUT_SEQUENCE),
    0x9145 => Ok(PIXEL_VALUE_TRANSFORMATION_SEQUENCE),
    0x9235 => Ok(SIGNAL_DOMAIN_ROWS),
    0x9411 => Ok(DISPLAY_FILTER_PERCENTAGE),
    0x9415 => Ok(FRAME_PIXEL_SHIFT_SEQUENCE),
    0x9416 => Ok(SUBTRACTION_ITEM_ID),
    0x9422 => Ok(PIXEL_INTENSITY_RELATIONSHIP_LUT_SEQUENCE),
    0x9443 => Ok(FRAME_PIXEL_DATA_PROPERTIES_SEQUENCE),
    0x9444 => Ok(GEOMETRICAL_PROPERTIES),
    0x9445 => Ok(GEOMETRIC_MAXIMUM_DISTORTION),
    0x9446 => Ok(IMAGE_PROCESSING_APPLIED),
    0x9454 => Ok(MASK_SELECTION_MODE),
    0x9474 => Ok(LUT_FUNCTION),
    0x9478 => Ok(MASK_VISIBILITY_PERCENTAGE),
    0x9501 => Ok(PIXEL_SHIFT_SEQUENCE),
    0x9502 => Ok(REGION_PIXEL_SHIFT_SEQUENCE),
    0x9503 => Ok(VERTICES_OF_THE_REGION),
    0x9505 => Ok(MULTI_FRAME_PRESENTATION_SEQUENCE),
    0x9506 => Ok(PIXEL_SHIFT_FRAME_RANGE),
    0x9507 => Ok(LUT_FRAME_RANGE),
    0x9520 => Ok(IMAGE_TO_EQUIPMENT_MAPPING_MATRIX),
    0x9537 => Ok(EQUIPMENT_COORDINATE_SYSTEM_IDENTIFICATION),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0032.
///
fn find_element_in_group_0032(element: u16) -> Result<Item, ()> {
  match element {
    0x000A => Ok(STUDY_STATUS_ID),
    0x000C => Ok(STUDY_PRIORITY_ID),
    0x0012 => Ok(STUDY_ID_ISSUER),
    0x0032 => Ok(STUDY_VERIFIED_DATE),
    0x0033 => Ok(STUDY_VERIFIED_TIME),
    0x0034 => Ok(STUDY_READ_DATE),
    0x0035 => Ok(STUDY_READ_TIME),
    0x1000 => Ok(SCHEDULED_STUDY_START_DATE),
    0x1001 => Ok(SCHEDULED_STUDY_START_TIME),
    0x1010 => Ok(SCHEDULED_STUDY_STOP_DATE),
    0x1011 => Ok(SCHEDULED_STUDY_STOP_TIME),
    0x1020 => Ok(SCHEDULED_STUDY_LOCATION),
    0x1021 => Ok(SCHEDULED_STUDY_LOCATION_AE_TITLE),
    0x1030 => Ok(REASON_FOR_STUDY),
    0x1031 => Ok(REQUESTING_PHYSICIAN_IDENTIFICATION_SEQUENCE),
    0x1032 => Ok(REQUESTING_PHYSICIAN),
    0x1033 => Ok(REQUESTING_SERVICE),
    0x1034 => Ok(REQUESTING_SERVICE_CODE_SEQUENCE),
    0x1040 => Ok(STUDY_ARRIVAL_DATE),
    0x1041 => Ok(STUDY_ARRIVAL_TIME),
    0x1050 => Ok(STUDY_COMPLETION_DATE),
    0x1051 => Ok(STUDY_COMPLETION_TIME),
    0x1055 => Ok(STUDY_COMPONENT_STATUS_ID),
    0x1060 => Ok(REQUESTED_PROCEDURE_DESCRIPTION),
    0x1064 => Ok(REQUESTED_PROCEDURE_CODE_SEQUENCE),
    0x1065 => Ok(REQUESTED_LATERALITY_CODE_SEQUENCE),
    0x1066 => Ok(REASON_FOR_VISIT),
    0x1067 => Ok(REASON_FOR_VISIT_CODE_SEQUENCE),
    0x1070 => Ok(REQUESTED_CONTRAST_AGENT),
    0x4000 => Ok(STUDY_COMMENTS),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0034.
///
fn find_element_in_group_0034(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(FLOW_IDENTIFIER_SEQUENCE),
    0x0002 => Ok(FLOW_IDENTIFIER),
    0x0003 => Ok(FLOW_TRANSFER_SYNTAX_UID),
    0x0004 => Ok(FLOW_RTP_SAMPLING_RATE),
    0x0005 => Ok(SOURCE_IDENTIFIER),
    0x0007 => Ok(FRAME_ORIGIN_TIMESTAMP),
    0x0008 => Ok(INCLUDES_IMAGING_SUBJECT),
    0x0009 => Ok(FRAME_USEFULNESS_GROUP_SEQUENCE),
    0x000A => Ok(REAL_TIME_BULK_DATA_FLOW_SEQUENCE),
    0x000B => Ok(CAMERA_POSITION_GROUP_SEQUENCE),
    0x000C => Ok(INCLUDES_INFORMATION),
    0x000D => Ok(TIME_OF_FRAME_GROUP_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0038.
///
fn find_element_in_group_0038(element: u16) -> Result<Item, ()> {
  match element {
    0x0004 => Ok(REFERENCED_PATIENT_ALIAS_SEQUENCE),
    0x0008 => Ok(VISIT_STATUS_ID),
    0x0010 => Ok(ADMISSION_ID),
    0x0011 => Ok(ISSUER_OF_ADMISSION_ID),
    0x0014 => Ok(ISSUER_OF_ADMISSION_ID_SEQUENCE),
    0x0016 => Ok(ROUTE_OF_ADMISSIONS),
    0x001A => Ok(SCHEDULED_ADMISSION_DATE),
    0x001B => Ok(SCHEDULED_ADMISSION_TIME),
    0x001C => Ok(SCHEDULED_DISCHARGE_DATE),
    0x001D => Ok(SCHEDULED_DISCHARGE_TIME),
    0x001E => Ok(SCHEDULED_PATIENT_INSTITUTION_RESIDENCE),
    0x0020 => Ok(ADMITTING_DATE),
    0x0021 => Ok(ADMITTING_TIME),
    0x0030 => Ok(DISCHARGE_DATE),
    0x0032 => Ok(DISCHARGE_TIME),
    0x0040 => Ok(DISCHARGE_DIAGNOSIS_DESCRIPTION),
    0x0044 => Ok(DISCHARGE_DIAGNOSIS_CODE_SEQUENCE),
    0x0050 => Ok(SPECIAL_NEEDS),
    0x0060 => Ok(SERVICE_EPISODE_ID),
    0x0061 => Ok(ISSUER_OF_SERVICE_EPISODE_ID),
    0x0062 => Ok(SERVICE_EPISODE_DESCRIPTION),
    0x0064 => Ok(ISSUER_OF_SERVICE_EPISODE_ID_SEQUENCE),
    0x0100 => Ok(PERTINENT_DOCUMENTS_SEQUENCE),
    0x0101 => Ok(PERTINENT_RESOURCES_SEQUENCE),
    0x0102 => Ok(RESOURCE_DESCRIPTION),
    0x0300 => Ok(CURRENT_PATIENT_LOCATION),
    0x0400 => Ok(PATIENT_INSTITUTION_RESIDENCE),
    0x0500 => Ok(PATIENT_STATE),
    0x0502 => Ok(PATIENT_CLINICAL_TRIAL_PARTICIPATION_SEQUENCE),
    0x4000 => Ok(VISIT_COMMENTS),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x003A.
///
fn find_element_in_group_003a(element: u16) -> Result<Item, ()> {
  match element {
    0x0004 => Ok(WAVEFORM_ORIGINALITY),
    0x0005 => Ok(NUMBER_OF_WAVEFORM_CHANNELS),
    0x0010 => Ok(NUMBER_OF_WAVEFORM_SAMPLES),
    0x001A => Ok(SAMPLING_FREQUENCY),
    0x0020 => Ok(MULTIPLEX_GROUP_LABEL),
    0x0200 => Ok(CHANNEL_DEFINITION_SEQUENCE),
    0x0202 => Ok(WAVEFORM_CHANNEL_NUMBER),
    0x0203 => Ok(CHANNEL_LABEL),
    0x0205 => Ok(CHANNEL_STATUS),
    0x0208 => Ok(CHANNEL_SOURCE_SEQUENCE),
    0x0209 => Ok(CHANNEL_SOURCE_MODIFIERS_SEQUENCE),
    0x020A => Ok(SOURCE_WAVEFORM_SEQUENCE),
    0x020C => Ok(CHANNEL_DERIVATION_DESCRIPTION),
    0x0210 => Ok(CHANNEL_SENSITIVITY),
    0x0211 => Ok(CHANNEL_SENSITIVITY_UNITS_SEQUENCE),
    0x0212 => Ok(CHANNEL_SENSITIVITY_CORRECTION_FACTOR),
    0x0213 => Ok(CHANNEL_BASELINE),
    0x0214 => Ok(CHANNEL_TIME_SKEW),
    0x0215 => Ok(CHANNEL_SAMPLE_SKEW),
    0x0218 => Ok(CHANNEL_OFFSET),
    0x021A => Ok(WAVEFORM_BITS_STORED),
    0x0220 => Ok(FILTER_LOW_FREQUENCY),
    0x0221 => Ok(FILTER_HIGH_FREQUENCY),
    0x0222 => Ok(NOTCH_FILTER_FREQUENCY),
    0x0223 => Ok(NOTCH_FILTER_BANDWIDTH),
    0x0230 => Ok(WAVEFORM_DATA_DISPLAY_SCALE),
    0x0231 => Ok(WAVEFORM_DISPLAY_BACKGROUND_CIE_LAB_VALUE),
    0x0240 => Ok(WAVEFORM_PRESENTATION_GROUP_SEQUENCE),
    0x0241 => Ok(PRESENTATION_GROUP_NUMBER),
    0x0242 => Ok(CHANNEL_DISPLAY_SEQUENCE),
    0x0244 => Ok(CHANNEL_RECOMMENDED_DISPLAY_CIE_LAB_VALUE),
    0x0245 => Ok(CHANNEL_POSITION),
    0x0246 => Ok(DISPLAY_SHADING_FLAG),
    0x0247 => Ok(FRACTIONAL_CHANNEL_DISPLAY_SCALE),
    0x0248 => Ok(ABSOLUTE_CHANNEL_DISPLAY_SCALE),
    0x0300 => Ok(MULTIPLEXED_AUDIO_CHANNELS_DESCRIPTION_CODE_SEQUENCE),
    0x0301 => Ok(CHANNEL_IDENTIFICATION_CODE),
    0x0302 => Ok(CHANNEL_MODE),
    0x0310 => Ok(MULTIPLEX_GROUP_UID),
    0x0311 => Ok(POWERLINE_FREQUENCY),
    0x0312 => Ok(CHANNEL_IMPEDANCE_SEQUENCE),
    0x0313 => Ok(IMPEDANCE_VALUE),
    0x0314 => Ok(IMPEDANCE_MEASUREMENT_DATE_TIME),
    0x0315 => Ok(IMPEDANCE_MEASUREMENT_FREQUENCY),
    0x0316 => Ok(IMPEDANCE_MEASUREMENT_CURRENT_TYPE),
    0x0317 => Ok(WAVEFORM_AMPLIFIER_TYPE),
    0x0318 => Ok(FILTER_LOW_FREQUENCY_CHARACTERISTICS_SEQUENCE),
    0x0319 => Ok(FILTER_HIGH_FREQUENCY_CHARACTERISTICS_SEQUENCE),
    0x0320 => Ok(SUMMARIZED_FILTER_LOOKUP_TABLE),
    0x0321 => Ok(NOTCH_FILTER_CHARACTERISTICS_SEQUENCE),
    0x0322 => Ok(WAVEFORM_FILTER_TYPE),
    0x0323 => Ok(ANALOG_FILTER_CHARACTERISTICS_SEQUENCE),
    0x0324 => Ok(ANALOG_FILTER_ROLL_OFF),
    0x0325 => Ok(ANALOG_FILTER_TYPE),
    0x0326 => Ok(DIGITAL_FILTER_CHARACTERISTICS_SEQUENCE),
    0x0327 => Ok(DIGITAL_FILTER_ORDER),
    0x0328 => Ok(DIGITAL_FILTER_TYPE_CODE_SEQUENCE),
    0x0329 => Ok(WAVEFORM_FILTER_DESCRIPTION),
    0x032A => Ok(FILTER_LOOKUP_TABLE_SEQUENCE),
    0x032B => Ok(FILTER_LOOKUP_TABLE_DESCRIPTION),
    0x032C => Ok(FREQUENCY_ENCODING_CODE_SEQUENCE),
    0x032D => Ok(MAGNITUDE_ENCODING_CODE_SEQUENCE),
    0x032E => Ok(FILTER_LOOKUP_TABLE_DATA),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0040.
///
fn find_element_in_group_0040(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(SCHEDULED_STATION_AE_TITLE),
    0x0002 => Ok(SCHEDULED_PROCEDURE_STEP_START_DATE),
    0x0003 => Ok(SCHEDULED_PROCEDURE_STEP_START_TIME),
    0x0004 => Ok(SCHEDULED_PROCEDURE_STEP_END_DATE),
    0x0005 => Ok(SCHEDULED_PROCEDURE_STEP_END_TIME),
    0x0006 => Ok(SCHEDULED_PERFORMING_PHYSICIAN_NAME),
    0x0007 => Ok(SCHEDULED_PROCEDURE_STEP_DESCRIPTION),
    0x0008 => Ok(SCHEDULED_PROTOCOL_CODE_SEQUENCE),
    0x0009 => Ok(SCHEDULED_PROCEDURE_STEP_ID),
    0x000A => Ok(STAGE_CODE_SEQUENCE),
    0x000B => Ok(SCHEDULED_PERFORMING_PHYSICIAN_IDENTIFICATION_SEQUENCE),
    0x0010 => Ok(SCHEDULED_STATION_NAME),
    0x0011 => Ok(SCHEDULED_PROCEDURE_STEP_LOCATION),
    0x0012 => Ok(PRE_MEDICATION),
    0x0020 => Ok(SCHEDULED_PROCEDURE_STEP_STATUS),
    0x0026 => Ok(ORDER_PLACER_IDENTIFIER_SEQUENCE),
    0x0027 => Ok(ORDER_FILLER_IDENTIFIER_SEQUENCE),
    0x0031 => Ok(LOCAL_NAMESPACE_ENTITY_ID),
    0x0032 => Ok(UNIVERSAL_ENTITY_ID),
    0x0033 => Ok(UNIVERSAL_ENTITY_ID_TYPE),
    0x0035 => Ok(IDENTIFIER_TYPE_CODE),
    0x0036 => Ok(ASSIGNING_FACILITY_SEQUENCE),
    0x0039 => Ok(ASSIGNING_JURISDICTION_CODE_SEQUENCE),
    0x003A => Ok(ASSIGNING_AGENCY_OR_DEPARTMENT_CODE_SEQUENCE),
    0x0100 => Ok(SCHEDULED_PROCEDURE_STEP_SEQUENCE),
    0x0220 => Ok(REFERENCED_NON_IMAGE_COMPOSITE_SOP_INSTANCE_SEQUENCE),
    0x0241 => Ok(PERFORMED_STATION_AE_TITLE),
    0x0242 => Ok(PERFORMED_STATION_NAME),
    0x0243 => Ok(PERFORMED_LOCATION),
    0x0244 => Ok(PERFORMED_PROCEDURE_STEP_START_DATE),
    0x0245 => Ok(PERFORMED_PROCEDURE_STEP_START_TIME),
    0x0250 => Ok(PERFORMED_PROCEDURE_STEP_END_DATE),
    0x0251 => Ok(PERFORMED_PROCEDURE_STEP_END_TIME),
    0x0252 => Ok(PERFORMED_PROCEDURE_STEP_STATUS),
    0x0253 => Ok(PERFORMED_PROCEDURE_STEP_ID),
    0x0254 => Ok(PERFORMED_PROCEDURE_STEP_DESCRIPTION),
    0x0255 => Ok(PERFORMED_PROCEDURE_TYPE_DESCRIPTION),
    0x0260 => Ok(PERFORMED_PROTOCOL_CODE_SEQUENCE),
    0x0261 => Ok(PERFORMED_PROTOCOL_TYPE),
    0x0270 => Ok(SCHEDULED_STEP_ATTRIBUTES_SEQUENCE),
    0x0275 => Ok(REQUEST_ATTRIBUTES_SEQUENCE),
    0x0280 => Ok(COMMENTS_ON_THE_PERFORMED_PROCEDURE_STEP),
    0x0281 => Ok(PERFORMED_PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE),
    0x0293 => Ok(QUANTITY_SEQUENCE),
    0x0294 => Ok(QUANTITY),
    0x0295 => Ok(MEASURING_UNITS_SEQUENCE),
    0x0296 => Ok(BILLING_ITEM_SEQUENCE),
    0x0300 => Ok(TOTAL_TIME_OF_FLUOROSCOPY),
    0x0301 => Ok(TOTAL_NUMBER_OF_EXPOSURES),
    0x0302 => Ok(ENTRANCE_DOSE),
    0x0303 => Ok(EXPOSED_AREA),
    0x0306 => Ok(DISTANCE_SOURCE_TO_ENTRANCE),
    0x0307 => Ok(DISTANCE_SOURCE_TO_SUPPORT),
    0x030E => Ok(EXPOSURE_DOSE_SEQUENCE),
    0x0310 => Ok(COMMENTS_ON_RADIATION_DOSE),
    0x0312 => Ok(X_RAY_OUTPUT),
    0x0314 => Ok(HALF_VALUE_LAYER),
    0x0316 => Ok(ORGAN_DOSE),
    0x0318 => Ok(ORGAN_EXPOSED),
    0x0320 => Ok(BILLING_PROCEDURE_STEP_SEQUENCE),
    0x0321 => Ok(FILM_CONSUMPTION_SEQUENCE),
    0x0324 => Ok(BILLING_SUPPLIES_AND_DEVICES_SEQUENCE),
    0x0330 => Ok(REFERENCED_PROCEDURE_STEP_SEQUENCE),
    0x0340 => Ok(PERFORMED_SERIES_SEQUENCE),
    0x0400 => Ok(COMMENTS_ON_THE_SCHEDULED_PROCEDURE_STEP),
    0x0440 => Ok(PROTOCOL_CONTEXT_SEQUENCE),
    0x0441 => Ok(CONTENT_ITEM_MODIFIER_SEQUENCE),
    0x0500 => Ok(SCHEDULED_SPECIMEN_SEQUENCE),
    0x050A => Ok(SPECIMEN_ACCESSION_NUMBER),
    0x0512 => Ok(CONTAINER_IDENTIFIER),
    0x0513 => Ok(ISSUER_OF_THE_CONTAINER_IDENTIFIER_SEQUENCE),
    0x0515 => Ok(ALTERNATE_CONTAINER_IDENTIFIER_SEQUENCE),
    0x0518 => Ok(CONTAINER_TYPE_CODE_SEQUENCE),
    0x051A => Ok(CONTAINER_DESCRIPTION),
    0x0520 => Ok(CONTAINER_COMPONENT_SEQUENCE),
    0x0550 => Ok(SPECIMEN_SEQUENCE),
    0x0551 => Ok(SPECIMEN_IDENTIFIER),
    0x0552 => Ok(SPECIMEN_DESCRIPTION_SEQUENCE_TRIAL),
    0x0553 => Ok(SPECIMEN_DESCRIPTION_TRIAL),
    0x0554 => Ok(SPECIMEN_UID),
    0x0555 => Ok(ACQUISITION_CONTEXT_SEQUENCE),
    0x0556 => Ok(ACQUISITION_CONTEXT_DESCRIPTION),
    0x0560 => Ok(SPECIMEN_DESCRIPTION_SEQUENCE),
    0x0562 => Ok(ISSUER_OF_THE_SPECIMEN_IDENTIFIER_SEQUENCE),
    0x059A => Ok(SPECIMEN_TYPE_CODE_SEQUENCE),
    0x0600 => Ok(SPECIMEN_SHORT_DESCRIPTION),
    0x0602 => Ok(SPECIMEN_DETAILED_DESCRIPTION),
    0x0610 => Ok(SPECIMEN_PREPARATION_SEQUENCE),
    0x0612 => Ok(SPECIMEN_PREPARATION_STEP_CONTENT_ITEM_SEQUENCE),
    0x0620 => Ok(SPECIMEN_LOCALIZATION_CONTENT_ITEM_SEQUENCE),
    0x06FA => Ok(SLIDE_IDENTIFIER),
    0x0710 => Ok(WHOLE_SLIDE_MICROSCOPY_IMAGE_FRAME_TYPE_SEQUENCE),
    0x071A => Ok(IMAGE_CENTER_POINT_COORDINATES_SEQUENCE),
    0x072A => Ok(X_OFFSET_IN_SLIDE_COORDINATE_SYSTEM),
    0x073A => Ok(Y_OFFSET_IN_SLIDE_COORDINATE_SYSTEM),
    0x074A => Ok(Z_OFFSET_IN_SLIDE_COORDINATE_SYSTEM),
    0x08D8 => Ok(PIXEL_SPACING_SEQUENCE),
    0x08DA => Ok(COORDINATE_SYSTEM_AXIS_CODE_SEQUENCE),
    0x08EA => Ok(MEASUREMENT_UNITS_CODE_SEQUENCE),
    0x09F8 => Ok(VITAL_STAIN_CODE_SEQUENCE_TRIAL),
    0x1001 => Ok(REQUESTED_PROCEDURE_ID),
    0x1002 => Ok(REASON_FOR_THE_REQUESTED_PROCEDURE),
    0x1003 => Ok(REQUESTED_PROCEDURE_PRIORITY),
    0x1004 => Ok(PATIENT_TRANSPORT_ARRANGEMENTS),
    0x1005 => Ok(REQUESTED_PROCEDURE_LOCATION),
    0x1006 => Ok(PLACER_ORDER_NUMBER_PROCEDURE),
    0x1007 => Ok(FILLER_ORDER_NUMBER_PROCEDURE),
    0x1008 => Ok(CONFIDENTIALITY_CODE),
    0x1009 => Ok(REPORTING_PRIORITY),
    0x100A => Ok(REASON_FOR_REQUESTED_PROCEDURE_CODE_SEQUENCE),
    0x1010 => Ok(NAMES_OF_INTENDED_RECIPIENTS_OF_RESULTS),
    0x1011 => Ok(INTENDED_RECIPIENTS_OF_RESULTS_IDENTIFICATION_SEQUENCE),
    0x1012 => Ok(REASON_FOR_PERFORMED_PROCEDURE_CODE_SEQUENCE),
    0x1060 => Ok(REQUESTED_PROCEDURE_DESCRIPTION_TRIAL),
    0x1101 => Ok(PERSON_IDENTIFICATION_CODE_SEQUENCE),
    0x1102 => Ok(PERSON_ADDRESS),
    0x1103 => Ok(PERSON_TELEPHONE_NUMBERS),
    0x1104 => Ok(PERSON_TELECOM_INFORMATION),
    0x1400 => Ok(REQUESTED_PROCEDURE_COMMENTS),
    0x2001 => Ok(REASON_FOR_THE_IMAGING_SERVICE_REQUEST),
    0x2004 => Ok(ISSUE_DATE_OF_IMAGING_SERVICE_REQUEST),
    0x2005 => Ok(ISSUE_TIME_OF_IMAGING_SERVICE_REQUEST),
    0x2006 => Ok(PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED),
    0x2007 => Ok(FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST_RETIRED),
    0x2008 => Ok(ORDER_ENTERED_BY),
    0x2009 => Ok(ORDER_ENTERER_LOCATION),
    0x2010 => Ok(ORDER_CALLBACK_PHONE_NUMBER),
    0x2011 => Ok(ORDER_CALLBACK_TELECOM_INFORMATION),
    0x2016 => Ok(PLACER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST),
    0x2017 => Ok(FILLER_ORDER_NUMBER_IMAGING_SERVICE_REQUEST),
    0x2400 => Ok(IMAGING_SERVICE_REQUEST_COMMENTS),
    0x3001 => Ok(CONFIDENTIALITY_CONSTRAINT_ON_PATIENT_DATA_DESCRIPTION),
    0x4001 => Ok(GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_STATUS),
    0x4002 => Ok(GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEP_STATUS),
    0x4003 => Ok(GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_PRIORITY),
    0x4004 => Ok(SCHEDULED_PROCESSING_APPLICATIONS_CODE_SEQUENCE),
    0x4005 => Ok(SCHEDULED_PROCEDURE_STEP_START_DATE_TIME),
    0x4006 => Ok(MULTIPLE_COPIES_FLAG),
    0x4007 => Ok(PERFORMED_PROCESSING_APPLICATIONS_CODE_SEQUENCE),
    0x4008 => Ok(SCHEDULED_PROCEDURE_STEP_EXPIRATION_DATE_TIME),
    0x4009 => Ok(HUMAN_PERFORMER_CODE_SEQUENCE),
    0x4010 => Ok(SCHEDULED_PROCEDURE_STEP_MODIFICATION_DATE_TIME),
    0x4011 => Ok(EXPECTED_COMPLETION_DATE_TIME),
    0x4015 => Ok(RESULTING_GENERAL_PURPOSE_PERFORMED_PROCEDURE_STEPS_SEQUENCE),
    0x4016 => Ok(REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_SEQUENCE),
    0x4018 => Ok(SCHEDULED_WORKITEM_CODE_SEQUENCE),
    0x4019 => Ok(PERFORMED_WORKITEM_CODE_SEQUENCE),
    0x4020 => Ok(INPUT_AVAILABILITY_FLAG),
    0x4021 => Ok(INPUT_INFORMATION_SEQUENCE),
    0x4022 => Ok(RELEVANT_INFORMATION_SEQUENCE),
    0x4023 => {
      Ok(REFERENCED_GENERAL_PURPOSE_SCHEDULED_PROCEDURE_STEP_TRANSACTION_UID)
    }
    0x4025 => Ok(SCHEDULED_STATION_NAME_CODE_SEQUENCE),
    0x4026 => Ok(SCHEDULED_STATION_CLASS_CODE_SEQUENCE),
    0x4027 => Ok(SCHEDULED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE),
    0x4028 => Ok(PERFORMED_STATION_NAME_CODE_SEQUENCE),
    0x4029 => Ok(PERFORMED_STATION_CLASS_CODE_SEQUENCE),
    0x4030 => Ok(PERFORMED_STATION_GEOGRAPHIC_LOCATION_CODE_SEQUENCE),
    0x4031 => Ok(REQUESTED_SUBSEQUENT_WORKITEM_CODE_SEQUENCE),
    0x4032 => Ok(NON_DICOM_OUTPUT_CODE_SEQUENCE),
    0x4033 => Ok(OUTPUT_INFORMATION_SEQUENCE),
    0x4034 => Ok(SCHEDULED_HUMAN_PERFORMERS_SEQUENCE),
    0x4035 => Ok(ACTUAL_HUMAN_PERFORMERS_SEQUENCE),
    0x4036 => Ok(HUMAN_PERFORMER_ORGANIZATION),
    0x4037 => Ok(HUMAN_PERFORMER_NAME),
    0x4040 => Ok(RAW_DATA_HANDLING),
    0x4041 => Ok(INPUT_READINESS_STATE),
    0x4050 => Ok(PERFORMED_PROCEDURE_STEP_START_DATE_TIME),
    0x4051 => Ok(PERFORMED_PROCEDURE_STEP_END_DATE_TIME),
    0x4052 => Ok(PROCEDURE_STEP_CANCELLATION_DATE_TIME),
    0x4070 => Ok(OUTPUT_DESTINATION_SEQUENCE),
    0x4071 => Ok(DICOM_STORAGE_SEQUENCE),
    0x4072 => Ok(STOWRS_STORAGE_SEQUENCE),
    0x4073 => Ok(STORAGE_URL),
    0x4074 => Ok(XDS_STORAGE_SEQUENCE),
    0x8302 => Ok(ENTRANCE_DOSE_INM_GY),
    0x8303 => Ok(ENTRANCE_DOSE_DERIVATION),
    0x9092 => Ok(PARAMETRIC_MAP_FRAME_TYPE_SEQUENCE),
    0x9094 => Ok(REFERENCED_IMAGE_REAL_WORLD_VALUE_MAPPING_SEQUENCE),
    0x9096 => Ok(REAL_WORLD_VALUE_MAPPING_SEQUENCE),
    0x9098 => Ok(PIXEL_VALUE_MAPPING_CODE_SEQUENCE),
    0x9210 => Ok(LUT_LABEL),
    0x9211 => Ok(REAL_WORLD_VALUE_LAST_VALUE_MAPPED),
    0x9212 => Ok(REAL_WORLD_VALUE_LUT_DATA),
    0x9213 => Ok(DOUBLE_FLOAT_REAL_WORLD_VALUE_LAST_VALUE_MAPPED),
    0x9214 => Ok(DOUBLE_FLOAT_REAL_WORLD_VALUE_FIRST_VALUE_MAPPED),
    0x9216 => Ok(REAL_WORLD_VALUE_FIRST_VALUE_MAPPED),
    0x9220 => Ok(QUANTITY_DEFINITION_SEQUENCE),
    0x9224 => Ok(REAL_WORLD_VALUE_INTERCEPT),
    0x9225 => Ok(REAL_WORLD_VALUE_SLOPE),
    0xA007 => Ok(FINDINGS_FLAG_TRIAL),
    0xA010 => Ok(RELATIONSHIP_TYPE),
    0xA020 => Ok(FINDINGS_SEQUENCE_TRIAL),
    0xA021 => Ok(FINDINGS_GROUP_UID_TRIAL),
    0xA022 => Ok(REFERENCED_FINDINGS_GROUP_UID_TRIAL),
    0xA023 => Ok(FINDINGS_GROUP_RECORDING_DATE_TRIAL),
    0xA024 => Ok(FINDINGS_GROUP_RECORDING_TIME_TRIAL),
    0xA026 => Ok(FINDINGS_SOURCE_CATEGORY_CODE_SEQUENCE_TRIAL),
    0xA027 => Ok(VERIFYING_ORGANIZATION),
    0xA028 => Ok(DOCUMENTING_ORGANIZATION_IDENTIFIER_CODE_SEQUENCE_TRIAL),
    0xA030 => Ok(VERIFICATION_DATE_TIME),
    0xA032 => Ok(OBSERVATION_DATE_TIME),
    0xA033 => Ok(OBSERVATION_START_DATE_TIME),
    0xA040 => Ok(VALUE_TYPE),
    0xA043 => Ok(CONCEPT_NAME_CODE_SEQUENCE),
    0xA047 => Ok(MEASUREMENT_PRECISION_DESCRIPTION_TRIAL),
    0xA050 => Ok(CONTINUITY_OF_CONTENT),
    0xA057 => Ok(URGENCY_OR_PRIORITY_ALERTS_TRIAL),
    0xA060 => Ok(SEQUENCING_INDICATOR_TRIAL),
    0xA066 => Ok(DOCUMENT_IDENTIFIER_CODE_SEQUENCE_TRIAL),
    0xA067 => Ok(DOCUMENT_AUTHOR_TRIAL),
    0xA068 => Ok(DOCUMENT_AUTHOR_IDENTIFIER_CODE_SEQUENCE_TRIAL),
    0xA070 => Ok(IDENTIFIER_CODE_SEQUENCE_TRIAL),
    0xA073 => Ok(VERIFYING_OBSERVER_SEQUENCE),
    0xA074 => Ok(OBJECT_BINARY_IDENTIFIER_TRIAL),
    0xA075 => Ok(VERIFYING_OBSERVER_NAME),
    0xA076 => Ok(DOCUMENTING_OBSERVER_IDENTIFIER_CODE_SEQUENCE_TRIAL),
    0xA078 => Ok(AUTHOR_OBSERVER_SEQUENCE),
    0xA07A => Ok(PARTICIPANT_SEQUENCE),
    0xA07C => Ok(CUSTODIAL_ORGANIZATION_SEQUENCE),
    0xA080 => Ok(PARTICIPATION_TYPE),
    0xA082 => Ok(PARTICIPATION_DATE_TIME),
    0xA084 => Ok(OBSERVER_TYPE),
    0xA085 => Ok(PROCEDURE_IDENTIFIER_CODE_SEQUENCE_TRIAL),
    0xA088 => Ok(VERIFYING_OBSERVER_IDENTIFICATION_CODE_SEQUENCE),
    0xA089 => Ok(OBJECT_DIRECTORY_BINARY_IDENTIFIER_TRIAL),
    0xA090 => Ok(EQUIVALENT_CDA_DOCUMENT_SEQUENCE),
    0xA0B0 => Ok(REFERENCED_WAVEFORM_CHANNELS),
    0xA110 => Ok(DATE_OF_DOCUMENT_OR_VERBAL_TRANSACTION_TRIAL),
    0xA112 => Ok(TIME_OF_DOCUMENT_CREATION_OR_VERBAL_TRANSACTION_TRIAL),
    0xA120 => Ok(DATE_TIME),
    0xA121 => Ok(DATE),
    0xA122 => Ok(TIME),
    0xA123 => Ok(PERSON_NAME),
    0xA124 => Ok(UID),
    0xA125 => Ok(REPORT_STATUS_ID_TRIAL),
    0xA130 => Ok(TEMPORAL_RANGE_TYPE),
    0xA132 => Ok(REFERENCED_SAMPLE_POSITIONS),
    0xA136 => Ok(REFERENCED_FRAME_NUMBERS),
    0xA138 => Ok(REFERENCED_TIME_OFFSETS),
    0xA13A => Ok(REFERENCED_DATE_TIME),
    0xA160 => Ok(TEXT_VALUE),
    0xA161 => Ok(FLOATING_POINT_VALUE),
    0xA162 => Ok(RATIONAL_NUMERATOR_VALUE),
    0xA163 => Ok(RATIONAL_DENOMINATOR_VALUE),
    0xA167 => Ok(OBSERVATION_CATEGORY_CODE_SEQUENCE_TRIAL),
    0xA168 => Ok(CONCEPT_CODE_SEQUENCE),
    0xA16A => Ok(BIBLIOGRAPHIC_CITATION_TRIAL),
    0xA170 => Ok(PURPOSE_OF_REFERENCE_CODE_SEQUENCE),
    0xA171 => Ok(OBSERVATION_UID),
    0xA172 => Ok(REFERENCED_OBSERVATION_UID_TRIAL),
    0xA173 => Ok(REFERENCED_OBSERVATION_CLASS_TRIAL),
    0xA174 => Ok(REFERENCED_OBJECT_OBSERVATION_CLASS_TRIAL),
    0xA180 => Ok(ANNOTATION_GROUP_NUMBER),
    0xA192 => Ok(OBSERVATION_DATE_TRIAL),
    0xA193 => Ok(OBSERVATION_TIME_TRIAL),
    0xA194 => Ok(MEASUREMENT_AUTOMATION_TRIAL),
    0xA195 => Ok(MODIFIER_CODE_SEQUENCE),
    0xA224 => Ok(IDENTIFICATION_DESCRIPTION_TRIAL),
    0xA290 => Ok(COORDINATES_SET_GEOMETRIC_TYPE_TRIAL),
    0xA296 => Ok(ALGORITHM_CODE_SEQUENCE_TRIAL),
    0xA297 => Ok(ALGORITHM_DESCRIPTION_TRIAL),
    0xA29A => Ok(PIXEL_COORDINATES_SET_TRIAL),
    0xA300 => Ok(MEASURED_VALUE_SEQUENCE),
    0xA301 => Ok(NUMERIC_VALUE_QUALIFIER_CODE_SEQUENCE),
    0xA307 => Ok(CURRENT_OBSERVER_TRIAL),
    0xA30A => Ok(NUMERIC_VALUE),
    0xA313 => Ok(REFERENCED_ACCESSION_SEQUENCE_TRIAL),
    0xA33A => Ok(REPORT_STATUS_COMMENT_TRIAL),
    0xA340 => Ok(PROCEDURE_CONTEXT_SEQUENCE_TRIAL),
    0xA352 => Ok(VERBAL_SOURCE_TRIAL),
    0xA353 => Ok(ADDRESS_TRIAL),
    0xA354 => Ok(TELEPHONE_NUMBER_TRIAL),
    0xA358 => Ok(VERBAL_SOURCE_IDENTIFIER_CODE_SEQUENCE_TRIAL),
    0xA360 => Ok(PREDECESSOR_DOCUMENTS_SEQUENCE),
    0xA370 => Ok(REFERENCED_REQUEST_SEQUENCE),
    0xA372 => Ok(PERFORMED_PROCEDURE_CODE_SEQUENCE),
    0xA375 => Ok(CURRENT_REQUESTED_PROCEDURE_EVIDENCE_SEQUENCE),
    0xA380 => Ok(REPORT_DETAIL_SEQUENCE_TRIAL),
    0xA385 => Ok(PERTINENT_OTHER_EVIDENCE_SEQUENCE),
    0xA390 => Ok(HL7_STRUCTURED_DOCUMENT_REFERENCE_SEQUENCE),
    0xA402 => Ok(OBSERVATION_SUBJECT_UID_TRIAL),
    0xA403 => Ok(OBSERVATION_SUBJECT_CLASS_TRIAL),
    0xA404 => Ok(OBSERVATION_SUBJECT_TYPE_CODE_SEQUENCE_TRIAL),
    0xA491 => Ok(COMPLETION_FLAG),
    0xA492 => Ok(COMPLETION_FLAG_DESCRIPTION),
    0xA493 => Ok(VERIFICATION_FLAG),
    0xA494 => Ok(ARCHIVE_REQUESTED),
    0xA496 => Ok(PRELIMINARY_FLAG),
    0xA504 => Ok(CONTENT_TEMPLATE_SEQUENCE),
    0xA525 => Ok(IDENTICAL_DOCUMENTS_SEQUENCE),
    0xA600 => Ok(OBSERVATION_SUBJECT_CONTEXT_FLAG_TRIAL),
    0xA601 => Ok(OBSERVER_CONTEXT_FLAG_TRIAL),
    0xA603 => Ok(PROCEDURE_CONTEXT_FLAG_TRIAL),
    0xA730 => Ok(CONTENT_SEQUENCE),
    0xA731 => Ok(RELATIONSHIP_SEQUENCE_TRIAL),
    0xA732 => Ok(RELATIONSHIP_TYPE_CODE_SEQUENCE_TRIAL),
    0xA744 => Ok(LANGUAGE_CODE_SEQUENCE_TRIAL),
    0xA801 => Ok(TABULATED_VALUES_SEQUENCE),
    0xA802 => Ok(NUMBER_OF_TABLE_ROWS),
    0xA803 => Ok(NUMBER_OF_TABLE_COLUMNS),
    0xA804 => Ok(TABLE_ROW_NUMBER),
    0xA805 => Ok(TABLE_COLUMN_NUMBER),
    0xA806 => Ok(TABLE_ROW_DEFINITION_SEQUENCE),
    0xA807 => Ok(TABLE_COLUMN_DEFINITION_SEQUENCE),
    0xA808 => Ok(CELL_VALUES_SEQUENCE),
    0xA992 => Ok(UNIFORM_RESOURCE_LOCATOR_TRIAL),
    0xB020 => Ok(WAVEFORM_ANNOTATION_SEQUENCE),
    0xDB00 => Ok(TEMPLATE_IDENTIFIER),
    0xDB06 => Ok(TEMPLATE_VERSION),
    0xDB07 => Ok(TEMPLATE_LOCAL_VERSION),
    0xDB0B => Ok(TEMPLATE_EXTENSION_FLAG),
    0xDB0C => Ok(TEMPLATE_EXTENSION_ORGANIZATION_UID),
    0xDB0D => Ok(TEMPLATE_EXTENSION_CREATOR_UID),
    0xDB73 => Ok(REFERENCED_CONTENT_ITEM_IDENTIFIER),
    0xE001 => Ok(HL7_INSTANCE_IDENTIFIER),
    0xE004 => Ok(HL7_DOCUMENT_EFFECTIVE_TIME),
    0xE006 => Ok(HL7_DOCUMENT_TYPE_CODE_SEQUENCE),
    0xE008 => Ok(DOCUMENT_CLASS_CODE_SEQUENCE),
    0xE010 => Ok(RETRIEVE_URI),
    0xE011 => Ok(RETRIEVE_LOCATION_UID),
    0xE020 => Ok(TYPE_OF_INSTANCES),
    0xE021 => Ok(DICOM_RETRIEVAL_SEQUENCE),
    0xE022 => Ok(DICOM_MEDIA_RETRIEVAL_SEQUENCE),
    0xE023 => Ok(WADO_RETRIEVAL_SEQUENCE),
    0xE024 => Ok(XDS_RETRIEVAL_SEQUENCE),
    0xE025 => Ok(WADORS_RETRIEVAL_SEQUENCE),
    0xE030 => Ok(REPOSITORY_UNIQUE_ID),
    0xE031 => Ok(HOME_COMMUNITY_ID),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0042.
///
fn find_element_in_group_0042(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(DOCUMENT_TITLE),
    0x0011 => Ok(ENCAPSULATED_DOCUMENT),
    0x0012 => Ok(MIME_TYPE_OF_ENCAPSULATED_DOCUMENT),
    0x0013 => Ok(SOURCE_INSTANCE_SEQUENCE),
    0x0014 => Ok(LIST_OF_MIME_TYPES),
    0x0015 => Ok(ENCAPSULATED_DOCUMENT_LENGTH),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0044.
///
fn find_element_in_group_0044(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(PRODUCT_PACKAGE_IDENTIFIER),
    0x0002 => Ok(SUBSTANCE_ADMINISTRATION_APPROVAL),
    0x0003 => Ok(APPROVAL_STATUS_FURTHER_DESCRIPTION),
    0x0004 => Ok(APPROVAL_STATUS_DATE_TIME),
    0x0007 => Ok(PRODUCT_TYPE_CODE_SEQUENCE),
    0x0008 => Ok(PRODUCT_NAME),
    0x0009 => Ok(PRODUCT_DESCRIPTION),
    0x000A => Ok(PRODUCT_LOT_IDENTIFIER),
    0x000B => Ok(PRODUCT_EXPIRATION_DATE_TIME),
    0x0010 => Ok(SUBSTANCE_ADMINISTRATION_DATE_TIME),
    0x0011 => Ok(SUBSTANCE_ADMINISTRATION_NOTES),
    0x0012 => Ok(SUBSTANCE_ADMINISTRATION_DEVICE_ID),
    0x0013 => Ok(PRODUCT_PARAMETER_SEQUENCE),
    0x0019 => Ok(SUBSTANCE_ADMINISTRATION_PARAMETER_SEQUENCE),
    0x0100 => Ok(APPROVAL_SEQUENCE),
    0x0101 => Ok(ASSERTION_CODE_SEQUENCE),
    0x0102 => Ok(ASSERTION_UID),
    0x0103 => Ok(ASSERTER_IDENTIFICATION_SEQUENCE),
    0x0104 => Ok(ASSERTION_DATE_TIME),
    0x0105 => Ok(ASSERTION_EXPIRATION_DATE_TIME),
    0x0106 => Ok(ASSERTION_COMMENTS),
    0x0107 => Ok(RELATED_ASSERTION_SEQUENCE),
    0x0108 => Ok(REFERENCED_ASSERTION_UID),
    0x0109 => Ok(APPROVAL_SUBJECT_SEQUENCE),
    0x010A => Ok(ORGANIZATIONAL_ROLE_CODE_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0046.
///
fn find_element_in_group_0046(element: u16) -> Result<Item, ()> {
  match element {
    0x0012 => Ok(LENS_DESCRIPTION),
    0x0014 => Ok(RIGHT_LENS_SEQUENCE),
    0x0015 => Ok(LEFT_LENS_SEQUENCE),
    0x0016 => Ok(UNSPECIFIED_LATERALITY_LENS_SEQUENCE),
    0x0018 => Ok(CYLINDER_SEQUENCE),
    0x0028 => Ok(PRISM_SEQUENCE),
    0x0030 => Ok(HORIZONTAL_PRISM_POWER),
    0x0032 => Ok(HORIZONTAL_PRISM_BASE),
    0x0034 => Ok(VERTICAL_PRISM_POWER),
    0x0036 => Ok(VERTICAL_PRISM_BASE),
    0x0038 => Ok(LENS_SEGMENT_TYPE),
    0x0040 => Ok(OPTICAL_TRANSMITTANCE),
    0x0042 => Ok(CHANNEL_WIDTH),
    0x0044 => Ok(PUPIL_SIZE),
    0x0046 => Ok(CORNEAL_SIZE),
    0x0047 => Ok(CORNEAL_SIZE_SEQUENCE),
    0x0050 => Ok(AUTOREFRACTION_RIGHT_EYE_SEQUENCE),
    0x0052 => Ok(AUTOREFRACTION_LEFT_EYE_SEQUENCE),
    0x0060 => Ok(DISTANCE_PUPILLARY_DISTANCE),
    0x0062 => Ok(NEAR_PUPILLARY_DISTANCE),
    0x0063 => Ok(INTERMEDIATE_PUPILLARY_DISTANCE),
    0x0064 => Ok(OTHER_PUPILLARY_DISTANCE),
    0x0070 => Ok(KERATOMETRY_RIGHT_EYE_SEQUENCE),
    0x0071 => Ok(KERATOMETRY_LEFT_EYE_SEQUENCE),
    0x0074 => Ok(STEEP_KERATOMETRIC_AXIS_SEQUENCE),
    0x0075 => Ok(RADIUS_OF_CURVATURE),
    0x0076 => Ok(KERATOMETRIC_POWER),
    0x0077 => Ok(KERATOMETRIC_AXIS),
    0x0080 => Ok(FLAT_KERATOMETRIC_AXIS_SEQUENCE),
    0x0092 => Ok(BACKGROUND_COLOR),
    0x0094 => Ok(OPTOTYPE),
    0x0095 => Ok(OPTOTYPE_PRESENTATION),
    0x0097 => Ok(SUBJECTIVE_REFRACTION_RIGHT_EYE_SEQUENCE),
    0x0098 => Ok(SUBJECTIVE_REFRACTION_LEFT_EYE_SEQUENCE),
    0x0100 => Ok(ADD_NEAR_SEQUENCE),
    0x0101 => Ok(ADD_INTERMEDIATE_SEQUENCE),
    0x0102 => Ok(ADD_OTHER_SEQUENCE),
    0x0104 => Ok(ADD_POWER),
    0x0106 => Ok(VIEWING_DISTANCE),
    0x0110 => Ok(CORNEA_MEASUREMENTS_SEQUENCE),
    0x0111 => Ok(SOURCE_OF_CORNEA_MEASUREMENT_DATA_CODE_SEQUENCE),
    0x0112 => Ok(STEEP_CORNEAL_AXIS_SEQUENCE),
    0x0113 => Ok(FLAT_CORNEAL_AXIS_SEQUENCE),
    0x0114 => Ok(CORNEAL_POWER),
    0x0115 => Ok(CORNEAL_AXIS),
    0x0116 => Ok(CORNEA_MEASUREMENT_METHOD_CODE_SEQUENCE),
    0x0117 => Ok(REFRACTIVE_INDEX_OF_CORNEA),
    0x0118 => Ok(REFRACTIVE_INDEX_OF_AQUEOUS_HUMOR),
    0x0121 => Ok(VISUAL_ACUITY_TYPE_CODE_SEQUENCE),
    0x0122 => Ok(VISUAL_ACUITY_RIGHT_EYE_SEQUENCE),
    0x0123 => Ok(VISUAL_ACUITY_LEFT_EYE_SEQUENCE),
    0x0124 => Ok(VISUAL_ACUITY_BOTH_EYES_OPEN_SEQUENCE),
    0x0125 => Ok(VIEWING_DISTANCE_TYPE),
    0x0135 => Ok(VISUAL_ACUITY_MODIFIERS),
    0x0137 => Ok(DECIMAL_VISUAL_ACUITY),
    0x0139 => Ok(OPTOTYPE_DETAILED_DEFINITION),
    0x0145 => Ok(REFERENCED_REFRACTIVE_MEASUREMENTS_SEQUENCE),
    0x0146 => Ok(SPHERE_POWER),
    0x0147 => Ok(CYLINDER_POWER),
    0x0201 => Ok(CORNEAL_TOPOGRAPHY_SURFACE),
    0x0202 => Ok(CORNEAL_VERTEX_LOCATION),
    0x0203 => Ok(PUPIL_CENTROID_X_COORDINATE),
    0x0204 => Ok(PUPIL_CENTROID_Y_COORDINATE),
    0x0205 => Ok(EQUIVALENT_PUPIL_RADIUS),
    0x0207 => Ok(CORNEAL_TOPOGRAPHY_MAP_TYPE_CODE_SEQUENCE),
    0x0208 => Ok(VERTICES_OF_THE_OUTLINE_OF_PUPIL),
    0x0210 => Ok(CORNEAL_TOPOGRAPHY_MAPPING_NORMALS_SEQUENCE),
    0x0211 => Ok(MAXIMUM_CORNEAL_CURVATURE_SEQUENCE),
    0x0212 => Ok(MAXIMUM_CORNEAL_CURVATURE),
    0x0213 => Ok(MAXIMUM_CORNEAL_CURVATURE_LOCATION),
    0x0215 => Ok(MINIMUM_KERATOMETRIC_SEQUENCE),
    0x0218 => Ok(SIMULATED_KERATOMETRIC_CYLINDER_SEQUENCE),
    0x0220 => Ok(AVERAGE_CORNEAL_POWER),
    0x0224 => Ok(CORNEAL_IS_VALUE),
    0x0227 => Ok(ANALYZED_AREA),
    0x0230 => Ok(SURFACE_REGULARITY_INDEX),
    0x0232 => Ok(SURFACE_ASYMMETRY_INDEX),
    0x0234 => Ok(CORNEAL_ECCENTRICITY_INDEX),
    0x0236 => Ok(KERATOCONUS_PREDICTION_INDEX),
    0x0238 => Ok(DECIMAL_POTENTIAL_VISUAL_ACUITY),
    0x0242 => Ok(CORNEAL_TOPOGRAPHY_MAP_QUALITY_EVALUATION),
    0x0244 => Ok(SOURCE_IMAGE_CORNEAL_PROCESSED_DATA_SEQUENCE),
    0x0247 => Ok(CORNEAL_POINT_LOCATION),
    0x0248 => Ok(CORNEAL_POINT_ESTIMATED),
    0x0249 => Ok(AXIAL_POWER),
    0x0250 => Ok(TANGENTIAL_POWER),
    0x0251 => Ok(REFRACTIVE_POWER),
    0x0252 => Ok(RELATIVE_ELEVATION),
    0x0253 => Ok(CORNEAL_WAVEFRONT),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0048.
///
fn find_element_in_group_0048(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(IMAGED_VOLUME_WIDTH),
    0x0002 => Ok(IMAGED_VOLUME_HEIGHT),
    0x0003 => Ok(IMAGED_VOLUME_DEPTH),
    0x0006 => Ok(TOTAL_PIXEL_MATRIX_COLUMNS),
    0x0007 => Ok(TOTAL_PIXEL_MATRIX_ROWS),
    0x0008 => Ok(TOTAL_PIXEL_MATRIX_ORIGIN_SEQUENCE),
    0x0010 => Ok(SPECIMEN_LABEL_IN_IMAGE),
    0x0011 => Ok(FOCUS_METHOD),
    0x0012 => Ok(EXTENDED_DEPTH_OF_FIELD),
    0x0013 => Ok(NUMBER_OF_FOCAL_PLANES),
    0x0014 => Ok(DISTANCE_BETWEEN_FOCAL_PLANES),
    0x0015 => Ok(RECOMMENDED_ABSENT_PIXEL_CIE_LAB_VALUE),
    0x0100 => Ok(ILLUMINATOR_TYPE_CODE_SEQUENCE),
    0x0102 => Ok(IMAGE_ORIENTATION_SLIDE),
    0x0105 => Ok(OPTICAL_PATH_SEQUENCE),
    0x0106 => Ok(OPTICAL_PATH_IDENTIFIER),
    0x0107 => Ok(OPTICAL_PATH_DESCRIPTION),
    0x0108 => Ok(ILLUMINATION_COLOR_CODE_SEQUENCE),
    0x0110 => Ok(SPECIMEN_REFERENCE_SEQUENCE),
    0x0111 => Ok(CONDENSER_LENS_POWER),
    0x0112 => Ok(OBJECTIVE_LENS_POWER),
    0x0113 => Ok(OBJECTIVE_LENS_NUMERICAL_APERTURE),
    0x0114 => Ok(CONFOCAL_MODE),
    0x0115 => Ok(TISSUE_LOCATION),
    0x0116 => Ok(CONFOCAL_MICROSCOPY_IMAGE_FRAME_TYPE_SEQUENCE),
    0x0117 => Ok(IMAGE_ACQUISITION_DEPTH),
    0x0120 => Ok(PALETTE_COLOR_LOOKUP_TABLE_SEQUENCE),
    0x0200 => Ok(REFERENCED_IMAGE_NAVIGATION_SEQUENCE),
    0x0201 => Ok(TOP_LEFT_HAND_CORNER_OF_LOCALIZER_AREA),
    0x0202 => Ok(BOTTOM_RIGHT_HAND_CORNER_OF_LOCALIZER_AREA),
    0x0207 => Ok(OPTICAL_PATH_IDENTIFICATION_SEQUENCE),
    0x021A => Ok(PLANE_POSITION_SLIDE_SEQUENCE),
    0x021E => Ok(COLUMN_POSITION_IN_TOTAL_IMAGE_PIXEL_MATRIX),
    0x021F => Ok(ROW_POSITION_IN_TOTAL_IMAGE_PIXEL_MATRIX),
    0x0301 => Ok(PIXEL_ORIGIN_INTERPRETATION),
    0x0302 => Ok(NUMBER_OF_OPTICAL_PATHS),
    0x0303 => Ok(TOTAL_PIXEL_MATRIX_FOCAL_PLANES),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0050.
///
fn find_element_in_group_0050(element: u16) -> Result<Item, ()> {
  match element {
    0x0004 => Ok(CALIBRATION_IMAGE),
    0x0010 => Ok(DEVICE_SEQUENCE),
    0x0012 => Ok(CONTAINER_COMPONENT_TYPE_CODE_SEQUENCE),
    0x0013 => Ok(CONTAINER_COMPONENT_THICKNESS),
    0x0014 => Ok(DEVICE_LENGTH),
    0x0015 => Ok(CONTAINER_COMPONENT_WIDTH),
    0x0016 => Ok(DEVICE_DIAMETER),
    0x0017 => Ok(DEVICE_DIAMETER_UNITS),
    0x0018 => Ok(DEVICE_VOLUME),
    0x0019 => Ok(INTER_MARKER_DISTANCE),
    0x001A => Ok(CONTAINER_COMPONENT_MATERIAL),
    0x001B => Ok(CONTAINER_COMPONENT_ID),
    0x001C => Ok(CONTAINER_COMPONENT_LENGTH),
    0x001D => Ok(CONTAINER_COMPONENT_DIAMETER),
    0x001E => Ok(CONTAINER_COMPONENT_DESCRIPTION),
    0x0020 => Ok(DEVICE_DESCRIPTION),
    0x0021 => Ok(LONG_DEVICE_DESCRIPTION),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0052.
///
fn find_element_in_group_0052(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(CONTRAST_BOLUS_INGREDIENT_PERCENT_BY_VOLUME),
    0x0002 => Ok(OCT_FOCAL_DISTANCE),
    0x0003 => Ok(BEAM_SPOT_SIZE),
    0x0004 => Ok(EFFECTIVE_REFRACTIVE_INDEX),
    0x0006 => Ok(OCT_ACQUISITION_DOMAIN),
    0x0007 => Ok(OCT_OPTICAL_CENTER_WAVELENGTH),
    0x0008 => Ok(AXIAL_RESOLUTION),
    0x0009 => Ok(RANGING_DEPTH),
    0x0011 => Ok(A_LINE_RATE),
    0x0012 => Ok(A_LINES_PER_FRAME),
    0x0013 => Ok(CATHETER_ROTATIONAL_RATE),
    0x0014 => Ok(A_LINE_PIXEL_SPACING),
    0x0016 => Ok(MODE_OF_PERCUTANEOUS_ACCESS_SEQUENCE),
    0x0025 => Ok(INTRAVASCULAR_OCT_FRAME_TYPE_SEQUENCE),
    0x0026 => Ok(OCTZ_OFFSET_APPLIED),
    0x0027 => Ok(INTRAVASCULAR_FRAME_CONTENT_SEQUENCE),
    0x0028 => Ok(INTRAVASCULAR_LONGITUDINAL_DISTANCE),
    0x0029 => Ok(INTRAVASCULAR_OCT_FRAME_CONTENT_SEQUENCE),
    0x0030 => Ok(OCTZ_OFFSET_CORRECTION),
    0x0031 => Ok(CATHETER_DIRECTION_OF_ROTATION),
    0x0033 => Ok(SEAM_LINE_LOCATION),
    0x0034 => Ok(FIRST_A_LINE_LOCATION),
    0x0036 => Ok(SEAM_LINE_INDEX),
    0x0038 => Ok(NUMBER_OF_PADDED_A_LINES),
    0x0039 => Ok(INTERPOLATION_TYPE),
    0x003A => Ok(REFRACTIVE_INDEX_APPLIED),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0054.
///
fn find_element_in_group_0054(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(ENERGY_WINDOW_VECTOR),
    0x0011 => Ok(NUMBER_OF_ENERGY_WINDOWS),
    0x0012 => Ok(ENERGY_WINDOW_INFORMATION_SEQUENCE),
    0x0013 => Ok(ENERGY_WINDOW_RANGE_SEQUENCE),
    0x0014 => Ok(ENERGY_WINDOW_LOWER_LIMIT),
    0x0015 => Ok(ENERGY_WINDOW_UPPER_LIMIT),
    0x0016 => Ok(RADIOPHARMACEUTICAL_INFORMATION_SEQUENCE),
    0x0017 => Ok(RESIDUAL_SYRINGE_COUNTS),
    0x0018 => Ok(ENERGY_WINDOW_NAME),
    0x0020 => Ok(DETECTOR_VECTOR),
    0x0021 => Ok(NUMBER_OF_DETECTORS),
    0x0022 => Ok(DETECTOR_INFORMATION_SEQUENCE),
    0x0030 => Ok(PHASE_VECTOR),
    0x0031 => Ok(NUMBER_OF_PHASES),
    0x0032 => Ok(PHASE_INFORMATION_SEQUENCE),
    0x0033 => Ok(NUMBER_OF_FRAMES_IN_PHASE),
    0x0036 => Ok(PHASE_DELAY),
    0x0038 => Ok(PAUSE_BETWEEN_FRAMES),
    0x0039 => Ok(PHASE_DESCRIPTION),
    0x0050 => Ok(ROTATION_VECTOR),
    0x0051 => Ok(NUMBER_OF_ROTATIONS),
    0x0052 => Ok(ROTATION_INFORMATION_SEQUENCE),
    0x0053 => Ok(NUMBER_OF_FRAMES_IN_ROTATION),
    0x0060 => Ok(RR_INTERVAL_VECTOR),
    0x0061 => Ok(NUMBER_OF_RR_INTERVALS),
    0x0062 => Ok(GATED_INFORMATION_SEQUENCE),
    0x0063 => Ok(DATA_INFORMATION_SEQUENCE),
    0x0070 => Ok(TIME_SLOT_VECTOR),
    0x0071 => Ok(NUMBER_OF_TIME_SLOTS),
    0x0072 => Ok(TIME_SLOT_INFORMATION_SEQUENCE),
    0x0073 => Ok(TIME_SLOT_TIME),
    0x0080 => Ok(SLICE_VECTOR),
    0x0081 => Ok(NUMBER_OF_SLICES),
    0x0090 => Ok(ANGULAR_VIEW_VECTOR),
    0x0100 => Ok(TIME_SLICE_VECTOR),
    0x0101 => Ok(NUMBER_OF_TIME_SLICES),
    0x0200 => Ok(START_ANGLE),
    0x0202 => Ok(TYPE_OF_DETECTOR_MOTION),
    0x0210 => Ok(TRIGGER_VECTOR),
    0x0211 => Ok(NUMBER_OF_TRIGGERS_IN_PHASE),
    0x0220 => Ok(VIEW_CODE_SEQUENCE),
    0x0222 => Ok(VIEW_MODIFIER_CODE_SEQUENCE),
    0x0300 => Ok(RADIONUCLIDE_CODE_SEQUENCE),
    0x0302 => Ok(ADMINISTRATION_ROUTE_CODE_SEQUENCE),
    0x0304 => Ok(RADIOPHARMACEUTICAL_CODE_SEQUENCE),
    0x0306 => Ok(CALIBRATION_DATA_SEQUENCE),
    0x0308 => Ok(ENERGY_WINDOW_NUMBER),
    0x0400 => Ok(IMAGE_ID),
    0x0410 => Ok(PATIENT_ORIENTATION_CODE_SEQUENCE),
    0x0412 => Ok(PATIENT_ORIENTATION_MODIFIER_CODE_SEQUENCE),
    0x0414 => Ok(PATIENT_GANTRY_RELATIONSHIP_CODE_SEQUENCE),
    0x0500 => Ok(SLICE_PROGRESSION_DIRECTION),
    0x0501 => Ok(SCAN_PROGRESSION_DIRECTION),
    0x1000 => Ok(SERIES_TYPE),
    0x1001 => Ok(UNITS),
    0x1002 => Ok(COUNTS_SOURCE),
    0x1004 => Ok(REPROJECTION_METHOD),
    0x1006 => Ok(SUV_TYPE),
    0x1100 => Ok(RANDOMS_CORRECTION_METHOD),
    0x1101 => Ok(ATTENUATION_CORRECTION_METHOD),
    0x1102 => Ok(DECAY_CORRECTION),
    0x1103 => Ok(RECONSTRUCTION_METHOD),
    0x1104 => Ok(DETECTOR_LINES_OF_RESPONSE_USED),
    0x1105 => Ok(SCATTER_CORRECTION_METHOD),
    0x1200 => Ok(AXIAL_ACCEPTANCE),
    0x1201 => Ok(AXIAL_MASH),
    0x1202 => Ok(TRANSVERSE_MASH),
    0x1203 => Ok(DETECTOR_ELEMENT_SIZE),
    0x1210 => Ok(COINCIDENCE_WINDOW_WIDTH),
    0x1220 => Ok(SECONDARY_COUNTS_TYPE),
    0x1300 => Ok(FRAME_REFERENCE_TIME),
    0x1310 => Ok(PRIMARY_PROMPTS_COUNTS_ACCUMULATED),
    0x1311 => Ok(SECONDARY_COUNTS_ACCUMULATED),
    0x1320 => Ok(SLICE_SENSITIVITY_FACTOR),
    0x1321 => Ok(DECAY_FACTOR),
    0x1322 => Ok(DOSE_CALIBRATION_FACTOR),
    0x1323 => Ok(SCATTER_FRACTION_FACTOR),
    0x1324 => Ok(DEAD_TIME_FACTOR),
    0x1330 => Ok(IMAGE_INDEX),
    0x1400 => Ok(COUNTS_INCLUDED),
    0x1401 => Ok(DEAD_TIME_CORRECTION_FLAG),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0060.
///
fn find_element_in_group_0060(element: u16) -> Result<Item, ()> {
  match element {
    0x3000 => Ok(HISTOGRAM_SEQUENCE),
    0x3002 => Ok(HISTOGRAM_NUMBER_OF_BINS),
    0x3004 => Ok(HISTOGRAM_FIRST_BIN_VALUE),
    0x3006 => Ok(HISTOGRAM_LAST_BIN_VALUE),
    0x3008 => Ok(HISTOGRAM_BIN_WIDTH),
    0x3010 => Ok(HISTOGRAM_EXPLANATION),
    0x3020 => Ok(HISTOGRAM_DATA),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0062.
///
fn find_element_in_group_0062(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(SEGMENTATION_TYPE),
    0x0002 => Ok(SEGMENT_SEQUENCE),
    0x0003 => Ok(SEGMENTED_PROPERTY_CATEGORY_CODE_SEQUENCE),
    0x0004 => Ok(SEGMENT_NUMBER),
    0x0005 => Ok(SEGMENT_LABEL),
    0x0006 => Ok(SEGMENT_DESCRIPTION),
    0x0007 => Ok(SEGMENTATION_ALGORITHM_IDENTIFICATION_SEQUENCE),
    0x0008 => Ok(SEGMENT_ALGORITHM_TYPE),
    0x0009 => Ok(SEGMENT_ALGORITHM_NAME),
    0x000A => Ok(SEGMENT_IDENTIFICATION_SEQUENCE),
    0x000B => Ok(REFERENCED_SEGMENT_NUMBER),
    0x000C => Ok(RECOMMENDED_DISPLAY_GRAYSCALE_VALUE),
    0x000D => Ok(RECOMMENDED_DISPLAY_CIE_LAB_VALUE),
    0x000E => Ok(MAXIMUM_FRACTIONAL_VALUE),
    0x000F => Ok(SEGMENTED_PROPERTY_TYPE_CODE_SEQUENCE),
    0x0010 => Ok(SEGMENTATION_FRACTIONAL_TYPE),
    0x0011 => Ok(SEGMENTED_PROPERTY_TYPE_MODIFIER_CODE_SEQUENCE),
    0x0012 => Ok(USED_SEGMENTS_SEQUENCE),
    0x0013 => Ok(SEGMENTS_OVERLAP),
    0x0020 => Ok(TRACKING_ID),
    0x0021 => Ok(TRACKING_UID),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0064.
///
fn find_element_in_group_0064(element: u16) -> Result<Item, ()> {
  match element {
    0x0002 => Ok(DEFORMABLE_REGISTRATION_SEQUENCE),
    0x0003 => Ok(SOURCE_FRAME_OF_REFERENCE_UID),
    0x0005 => Ok(DEFORMABLE_REGISTRATION_GRID_SEQUENCE),
    0x0007 => Ok(GRID_DIMENSIONS),
    0x0008 => Ok(GRID_RESOLUTION),
    0x0009 => Ok(VECTOR_GRID_DATA),
    0x000F => Ok(PRE_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE),
    0x0010 => Ok(POST_DEFORMATION_MATRIX_REGISTRATION_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0066.
///
fn find_element_in_group_0066(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(NUMBER_OF_SURFACES),
    0x0002 => Ok(SURFACE_SEQUENCE),
    0x0003 => Ok(SURFACE_NUMBER),
    0x0004 => Ok(SURFACE_COMMENTS),
    0x0009 => Ok(SURFACE_PROCESSING),
    0x000A => Ok(SURFACE_PROCESSING_RATIO),
    0x000B => Ok(SURFACE_PROCESSING_DESCRIPTION),
    0x000C => Ok(RECOMMENDED_PRESENTATION_OPACITY),
    0x000D => Ok(RECOMMENDED_PRESENTATION_TYPE),
    0x000E => Ok(FINITE_VOLUME),
    0x0010 => Ok(MANIFOLD),
    0x0011 => Ok(SURFACE_POINTS_SEQUENCE),
    0x0012 => Ok(SURFACE_POINTS_NORMALS_SEQUENCE),
    0x0013 => Ok(SURFACE_MESH_PRIMITIVES_SEQUENCE),
    0x0015 => Ok(NUMBER_OF_SURFACE_POINTS),
    0x0016 => Ok(POINT_COORDINATES_DATA),
    0x0017 => Ok(POINT_POSITION_ACCURACY),
    0x0018 => Ok(MEAN_POINT_DISTANCE),
    0x0019 => Ok(MAXIMUM_POINT_DISTANCE),
    0x001A => Ok(POINTS_BOUNDING_BOX_COORDINATES),
    0x001B => Ok(AXIS_OF_ROTATION),
    0x001C => Ok(CENTER_OF_ROTATION),
    0x001E => Ok(NUMBER_OF_VECTORS),
    0x001F => Ok(VECTOR_DIMENSIONALITY),
    0x0020 => Ok(VECTOR_ACCURACY),
    0x0021 => Ok(VECTOR_COORDINATE_DATA),
    0x0022 => Ok(DOUBLE_POINT_COORDINATES_DATA),
    0x0023 => Ok(TRIANGLE_POINT_INDEX_LIST),
    0x0024 => Ok(EDGE_POINT_INDEX_LIST),
    0x0025 => Ok(VERTEX_POINT_INDEX_LIST),
    0x0026 => Ok(TRIANGLE_STRIP_SEQUENCE),
    0x0027 => Ok(TRIANGLE_FAN_SEQUENCE),
    0x0028 => Ok(LINE_SEQUENCE),
    0x0029 => Ok(PRIMITIVE_POINT_INDEX_LIST),
    0x002A => Ok(SURFACE_COUNT),
    0x002B => Ok(REFERENCED_SURFACE_SEQUENCE),
    0x002C => Ok(REFERENCED_SURFACE_NUMBER),
    0x002D => Ok(SEGMENT_SURFACE_GENERATION_ALGORITHM_IDENTIFICATION_SEQUENCE),
    0x002E => Ok(SEGMENT_SURFACE_SOURCE_INSTANCE_SEQUENCE),
    0x002F => Ok(ALGORITHM_FAMILY_CODE_SEQUENCE),
    0x0030 => Ok(ALGORITHM_NAME_CODE_SEQUENCE),
    0x0031 => Ok(ALGORITHM_VERSION),
    0x0032 => Ok(ALGORITHM_PARAMETERS),
    0x0034 => Ok(FACET_SEQUENCE),
    0x0035 => Ok(SURFACE_PROCESSING_ALGORITHM_IDENTIFICATION_SEQUENCE),
    0x0036 => Ok(ALGORITHM_NAME),
    0x0037 => Ok(RECOMMENDED_POINT_RADIUS),
    0x0038 => Ok(RECOMMENDED_LINE_THICKNESS),
    0x0040 => Ok(LONG_PRIMITIVE_POINT_INDEX_LIST),
    0x0041 => Ok(LONG_TRIANGLE_POINT_INDEX_LIST),
    0x0042 => Ok(LONG_EDGE_POINT_INDEX_LIST),
    0x0043 => Ok(LONG_VERTEX_POINT_INDEX_LIST),
    0x0101 => Ok(TRACK_SET_SEQUENCE),
    0x0102 => Ok(TRACK_SEQUENCE),
    0x0103 => Ok(RECOMMENDED_DISPLAY_CIE_LAB_VALUE_LIST),
    0x0104 => Ok(TRACKING_ALGORITHM_IDENTIFICATION_SEQUENCE),
    0x0105 => Ok(TRACK_SET_NUMBER),
    0x0106 => Ok(TRACK_SET_LABEL),
    0x0107 => Ok(TRACK_SET_DESCRIPTION),
    0x0108 => Ok(TRACK_SET_ANATOMICAL_TYPE_CODE_SEQUENCE),
    0x0121 => Ok(MEASUREMENTS_SEQUENCE),
    0x0124 => Ok(TRACK_SET_STATISTICS_SEQUENCE),
    0x0125 => Ok(FLOATING_POINT_VALUES),
    0x0129 => Ok(TRACK_POINT_INDEX_LIST),
    0x0130 => Ok(TRACK_STATISTICS_SEQUENCE),
    0x0132 => Ok(MEASUREMENT_VALUES_SEQUENCE),
    0x0133 => Ok(DIFFUSION_ACQUISITION_CODE_SEQUENCE),
    0x0134 => Ok(DIFFUSION_MODEL_CODE_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0068.
///
fn find_element_in_group_0068(element: u16) -> Result<Item, ()> {
  match element {
    0x6210 => Ok(IMPLANT_SIZE),
    0x6221 => Ok(IMPLANT_TEMPLATE_VERSION),
    0x6222 => Ok(REPLACED_IMPLANT_TEMPLATE_SEQUENCE),
    0x6223 => Ok(IMPLANT_TYPE),
    0x6224 => Ok(DERIVATION_IMPLANT_TEMPLATE_SEQUENCE),
    0x6225 => Ok(ORIGINAL_IMPLANT_TEMPLATE_SEQUENCE),
    0x6226 => Ok(EFFECTIVE_DATE_TIME),
    0x6230 => Ok(IMPLANT_TARGET_ANATOMY_SEQUENCE),
    0x6260 => Ok(INFORMATION_FROM_MANUFACTURER_SEQUENCE),
    0x6265 => Ok(NOTIFICATION_FROM_MANUFACTURER_SEQUENCE),
    0x6270 => Ok(INFORMATION_ISSUE_DATE_TIME),
    0x6280 => Ok(INFORMATION_SUMMARY),
    0x62A0 => Ok(IMPLANT_REGULATORY_DISAPPROVAL_CODE_SEQUENCE),
    0x62A5 => Ok(OVERALL_TEMPLATE_SPATIAL_TOLERANCE),
    0x62C0 => Ok(HPGL_DOCUMENT_SEQUENCE),
    0x62D0 => Ok(HPGL_DOCUMENT_ID),
    0x62D5 => Ok(HPGL_DOCUMENT_LABEL),
    0x62E0 => Ok(VIEW_ORIENTATION_CODE_SEQUENCE),
    0x62F0 => Ok(VIEW_ORIENTATION_MODIFIER_CODE_SEQUENCE),
    0x62F2 => Ok(HPGL_DOCUMENT_SCALING),
    0x6300 => Ok(HPGL_DOCUMENT),
    0x6310 => Ok(HPGL_CONTOUR_PEN_NUMBER),
    0x6320 => Ok(HPGL_PEN_SEQUENCE),
    0x6330 => Ok(HPGL_PEN_NUMBER),
    0x6340 => Ok(HPGL_PEN_LABEL),
    0x6345 => Ok(HPGL_PEN_DESCRIPTION),
    0x6346 => Ok(RECOMMENDED_ROTATION_POINT),
    0x6347 => Ok(BOUNDING_RECTANGLE),
    0x6350 => Ok(IMPLANT_TEMPLATE_3D_MODEL_SURFACE_NUMBER),
    0x6360 => Ok(SURFACE_MODEL_DESCRIPTION_SEQUENCE),
    0x6380 => Ok(SURFACE_MODEL_LABEL),
    0x6390 => Ok(SURFACE_MODEL_SCALING_FACTOR),
    0x63A0 => Ok(MATERIALS_CODE_SEQUENCE),
    0x63A4 => Ok(COATING_MATERIALS_CODE_SEQUENCE),
    0x63A8 => Ok(IMPLANT_TYPE_CODE_SEQUENCE),
    0x63AC => Ok(FIXATION_METHOD_CODE_SEQUENCE),
    0x63B0 => Ok(MATING_FEATURE_SETS_SEQUENCE),
    0x63C0 => Ok(MATING_FEATURE_SET_ID),
    0x63D0 => Ok(MATING_FEATURE_SET_LABEL),
    0x63E0 => Ok(MATING_FEATURE_SEQUENCE),
    0x63F0 => Ok(MATING_FEATURE_ID),
    0x6400 => Ok(MATING_FEATURE_DEGREE_OF_FREEDOM_SEQUENCE),
    0x6410 => Ok(DEGREE_OF_FREEDOM_ID),
    0x6420 => Ok(DEGREE_OF_FREEDOM_TYPE),
    0x6430 => Ok(TWO_D_MATING_FEATURE_COORDINATES_SEQUENCE),
    0x6440 => Ok(REFERENCED_HPGL_DOCUMENT_ID),
    0x6450 => Ok(TWO_D_MATING_POINT),
    0x6460 => Ok(TWO_D_MATING_AXES),
    0x6470 => Ok(TWO_D_DEGREE_OF_FREEDOM_SEQUENCE),
    0x6490 => Ok(THREE_D_DEGREE_OF_FREEDOM_AXIS),
    0x64A0 => Ok(RANGE_OF_FREEDOM),
    0x64C0 => Ok(THREE_D_MATING_POINT),
    0x64D0 => Ok(THREE_D_MATING_AXES),
    0x64F0 => Ok(TWO_D_DEGREE_OF_FREEDOM_AXIS),
    0x6500 => Ok(PLANNING_LANDMARK_POINT_SEQUENCE),
    0x6510 => Ok(PLANNING_LANDMARK_LINE_SEQUENCE),
    0x6520 => Ok(PLANNING_LANDMARK_PLANE_SEQUENCE),
    0x6530 => Ok(PLANNING_LANDMARK_ID),
    0x6540 => Ok(PLANNING_LANDMARK_DESCRIPTION),
    0x6545 => Ok(PLANNING_LANDMARK_IDENTIFICATION_CODE_SEQUENCE),
    0x6550 => Ok(TWO_D_POINT_COORDINATES_SEQUENCE),
    0x6560 => Ok(TWO_D_POINT_COORDINATES),
    0x6590 => Ok(THREE_D_POINT_COORDINATES),
    0x65A0 => Ok(TWO_D_LINE_COORDINATES_SEQUENCE),
    0x65B0 => Ok(TWO_D_LINE_COORDINATES),
    0x65D0 => Ok(THREE_D_LINE_COORDINATES),
    0x65E0 => Ok(TWO_D_PLANE_COORDINATES_SEQUENCE),
    0x65F0 => Ok(TWO_D_PLANE_INTERSECTION),
    0x6610 => Ok(THREE_D_PLANE_ORIGIN),
    0x6620 => Ok(THREE_D_PLANE_NORMAL),
    0x7001 => Ok(MODEL_MODIFICATION),
    0x7002 => Ok(MODEL_MIRRORING),
    0x7003 => Ok(MODEL_USAGE_CODE_SEQUENCE),
    0x7004 => Ok(MODEL_GROUP_UID),
    0x7005 => Ok(RELATIVE_URI_REFERENCE_WITHIN_ENCAPSULATED_DOCUMENT),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x006A.
///
fn find_element_in_group_006a(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(ANNOTATION_COORDINATE_TYPE),
    0x0002 => Ok(ANNOTATION_GROUP_SEQUENCE),
    0x0003 => Ok(ANNOTATION_GROUP_UID),
    0x0005 => Ok(ANNOTATION_GROUP_LABEL),
    0x0006 => Ok(ANNOTATION_GROUP_DESCRIPTION),
    0x0007 => Ok(ANNOTATION_GROUP_GENERATION_TYPE),
    0x0008 => Ok(ANNOTATION_GROUP_ALGORITHM_IDENTIFICATION_SEQUENCE),
    0x0009 => Ok(ANNOTATION_PROPERTY_CATEGORY_CODE_SEQUENCE),
    0x000A => Ok(ANNOTATION_PROPERTY_TYPE_CODE_SEQUENCE),
    0x000B => Ok(ANNOTATION_PROPERTY_TYPE_MODIFIER_CODE_SEQUENCE),
    0x000C => Ok(NUMBER_OF_ANNOTATIONS),
    0x000D => Ok(ANNOTATION_APPLIES_TO_ALL_OPTICAL_PATHS),
    0x000E => Ok(REFERENCED_OPTICAL_PATH_IDENTIFIER),
    0x000F => Ok(ANNOTATION_APPLIES_TO_ALL_Z_PLANES),
    0x0010 => Ok(COMMON_Z_COORDINATE_VALUE),
    0x0011 => Ok(ANNOTATION_INDEX_LIST),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0070.
///
fn find_element_in_group_0070(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(GRAPHIC_ANNOTATION_SEQUENCE),
    0x0002 => Ok(GRAPHIC_LAYER),
    0x0003 => Ok(BOUNDING_BOX_ANNOTATION_UNITS),
    0x0004 => Ok(ANCHOR_POINT_ANNOTATION_UNITS),
    0x0005 => Ok(GRAPHIC_ANNOTATION_UNITS),
    0x0006 => Ok(UNFORMATTED_TEXT_VALUE),
    0x0008 => Ok(TEXT_OBJECT_SEQUENCE),
    0x0009 => Ok(GRAPHIC_OBJECT_SEQUENCE),
    0x0010 => Ok(BOUNDING_BOX_TOP_LEFT_HAND_CORNER),
    0x0011 => Ok(BOUNDING_BOX_BOTTOM_RIGHT_HAND_CORNER),
    0x0012 => Ok(BOUNDING_BOX_TEXT_HORIZONTAL_JUSTIFICATION),
    0x0014 => Ok(ANCHOR_POINT),
    0x0015 => Ok(ANCHOR_POINT_VISIBILITY),
    0x0020 => Ok(GRAPHIC_DIMENSIONS),
    0x0021 => Ok(NUMBER_OF_GRAPHIC_POINTS),
    0x0022 => Ok(GRAPHIC_DATA),
    0x0023 => Ok(GRAPHIC_TYPE),
    0x0024 => Ok(GRAPHIC_FILLED),
    0x0040 => Ok(IMAGE_ROTATION_RETIRED),
    0x0041 => Ok(IMAGE_HORIZONTAL_FLIP),
    0x0042 => Ok(IMAGE_ROTATION),
    0x0050 => Ok(DISPLAYED_AREA_TOP_LEFT_HAND_CORNER_TRIAL),
    0x0051 => Ok(DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER_TRIAL),
    0x0052 => Ok(DISPLAYED_AREA_TOP_LEFT_HAND_CORNER),
    0x0053 => Ok(DISPLAYED_AREA_BOTTOM_RIGHT_HAND_CORNER),
    0x005A => Ok(DISPLAYED_AREA_SELECTION_SEQUENCE),
    0x0060 => Ok(GRAPHIC_LAYER_SEQUENCE),
    0x0062 => Ok(GRAPHIC_LAYER_ORDER),
    0x0066 => Ok(GRAPHIC_LAYER_RECOMMENDED_DISPLAY_GRAYSCALE_VALUE),
    0x0067 => Ok(GRAPHIC_LAYER_RECOMMENDED_DISPLAY_RGB_VALUE),
    0x0068 => Ok(GRAPHIC_LAYER_DESCRIPTION),
    0x0080 => Ok(CONTENT_LABEL),
    0x0081 => Ok(CONTENT_DESCRIPTION),
    0x0082 => Ok(PRESENTATION_CREATION_DATE),
    0x0083 => Ok(PRESENTATION_CREATION_TIME),
    0x0084 => Ok(CONTENT_CREATOR_NAME),
    0x0086 => Ok(CONTENT_CREATOR_IDENTIFICATION_CODE_SEQUENCE),
    0x0087 => Ok(ALTERNATE_CONTENT_DESCRIPTION_SEQUENCE),
    0x0100 => Ok(PRESENTATION_SIZE_MODE),
    0x0101 => Ok(PRESENTATION_PIXEL_SPACING),
    0x0102 => Ok(PRESENTATION_PIXEL_ASPECT_RATIO),
    0x0103 => Ok(PRESENTATION_PIXEL_MAGNIFICATION_RATIO),
    0x0207 => Ok(GRAPHIC_GROUP_LABEL),
    0x0208 => Ok(GRAPHIC_GROUP_DESCRIPTION),
    0x0209 => Ok(COMPOUND_GRAPHIC_SEQUENCE),
    0x0226 => Ok(COMPOUND_GRAPHIC_INSTANCE_ID),
    0x0227 => Ok(FONT_NAME),
    0x0228 => Ok(FONT_NAME_TYPE),
    0x0229 => Ok(CSS_FONT_NAME),
    0x0230 => Ok(ROTATION_ANGLE),
    0x0231 => Ok(TEXT_STYLE_SEQUENCE),
    0x0232 => Ok(LINE_STYLE_SEQUENCE),
    0x0233 => Ok(FILL_STYLE_SEQUENCE),
    0x0234 => Ok(GRAPHIC_GROUP_SEQUENCE),
    0x0241 => Ok(TEXT_COLOR_CIE_LAB_VALUE),
    0x0242 => Ok(HORIZONTAL_ALIGNMENT),
    0x0243 => Ok(VERTICAL_ALIGNMENT),
    0x0244 => Ok(SHADOW_STYLE),
    0x0245 => Ok(SHADOW_OFFSET_X),
    0x0246 => Ok(SHADOW_OFFSET_Y),
    0x0247 => Ok(SHADOW_COLOR_CIE_LAB_VALUE),
    0x0248 => Ok(UNDERLINED),
    0x0249 => Ok(BOLD),
    0x0250 => Ok(ITALIC),
    0x0251 => Ok(PATTERN_ON_COLOR_CIE_LAB_VALUE),
    0x0252 => Ok(PATTERN_OFF_COLOR_CIE_LAB_VALUE),
    0x0253 => Ok(LINE_THICKNESS),
    0x0254 => Ok(LINE_DASHING_STYLE),
    0x0255 => Ok(LINE_PATTERN),
    0x0256 => Ok(FILL_PATTERN),
    0x0257 => Ok(FILL_MODE),
    0x0258 => Ok(SHADOW_OPACITY),
    0x0261 => Ok(GAP_LENGTH),
    0x0262 => Ok(DIAMETER_OF_VISIBILITY),
    0x0273 => Ok(ROTATION_POINT),
    0x0274 => Ok(TICK_ALIGNMENT),
    0x0278 => Ok(SHOW_TICK_LABEL),
    0x0279 => Ok(TICK_LABEL_ALIGNMENT),
    0x0282 => Ok(COMPOUND_GRAPHIC_UNITS),
    0x0284 => Ok(PATTERN_ON_OPACITY),
    0x0285 => Ok(PATTERN_OFF_OPACITY),
    0x0287 => Ok(MAJOR_TICKS_SEQUENCE),
    0x0288 => Ok(TICK_POSITION),
    0x0289 => Ok(TICK_LABEL),
    0x0294 => Ok(COMPOUND_GRAPHIC_TYPE),
    0x0295 => Ok(GRAPHIC_GROUP_ID),
    0x0306 => Ok(SHAPE_TYPE),
    0x0308 => Ok(REGISTRATION_SEQUENCE),
    0x0309 => Ok(MATRIX_REGISTRATION_SEQUENCE),
    0x030A => Ok(MATRIX_SEQUENCE),
    0x030B => Ok(
      FRAME_OF_REFERENCE_TO_DISPLAYED_COORDINATE_SYSTEM_TRANSFORMATION_MATRIX,
    ),
    0x030C => Ok(FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX_TYPE),
    0x030D => Ok(REGISTRATION_TYPE_CODE_SEQUENCE),
    0x030F => Ok(FIDUCIAL_DESCRIPTION),
    0x0310 => Ok(FIDUCIAL_IDENTIFIER),
    0x0311 => Ok(FIDUCIAL_IDENTIFIER_CODE_SEQUENCE),
    0x0312 => Ok(CONTOUR_UNCERTAINTY_RADIUS),
    0x0314 => Ok(USED_FIDUCIALS_SEQUENCE),
    0x0315 => Ok(USED_RT_STRUCTURE_SET_ROI_SEQUENCE),
    0x0318 => Ok(GRAPHIC_COORDINATES_DATA_SEQUENCE),
    0x031A => Ok(FIDUCIAL_UID),
    0x031B => Ok(REFERENCED_FIDUCIAL_UID),
    0x031C => Ok(FIDUCIAL_SET_SEQUENCE),
    0x031E => Ok(FIDUCIAL_SEQUENCE),
    0x031F => Ok(FIDUCIALS_PROPERTY_CATEGORY_CODE_SEQUENCE),
    0x0401 => Ok(GRAPHIC_LAYER_RECOMMENDED_DISPLAY_CIE_LAB_VALUE),
    0x0402 => Ok(BLENDING_SEQUENCE),
    0x0403 => Ok(RELATIVE_OPACITY),
    0x0404 => Ok(REFERENCED_SPATIAL_REGISTRATION_SEQUENCE),
    0x0405 => Ok(BLENDING_POSITION),
    0x1101 => Ok(PRESENTATION_DISPLAY_COLLECTION_UID),
    0x1102 => Ok(PRESENTATION_SEQUENCE_COLLECTION_UID),
    0x1103 => Ok(PRESENTATION_SEQUENCE_POSITION_INDEX),
    0x1104 => Ok(RENDERED_IMAGE_REFERENCE_SEQUENCE),
    0x1201 => Ok(VOLUMETRIC_PRESENTATION_STATE_INPUT_SEQUENCE),
    0x1202 => Ok(PRESENTATION_INPUT_TYPE),
    0x1203 => Ok(INPUT_SEQUENCE_POSITION_INDEX),
    0x1204 => Ok(CROP),
    0x1205 => Ok(CROPPING_SPECIFICATION_INDEX),
    0x1206 => Ok(COMPOSITING_METHOD),
    0x1207 => Ok(VOLUMETRIC_PRESENTATION_INPUT_NUMBER),
    0x1208 => Ok(IMAGE_VOLUME_GEOMETRY),
    0x1209 => Ok(VOLUMETRIC_PRESENTATION_INPUT_SET_UID),
    0x120A => Ok(VOLUMETRIC_PRESENTATION_INPUT_SET_SEQUENCE),
    0x120B => Ok(GLOBAL_CROP),
    0x120C => Ok(GLOBAL_CROPPING_SPECIFICATION_INDEX),
    0x120D => Ok(RENDERING_METHOD),
    0x1301 => Ok(VOLUME_CROPPING_SEQUENCE),
    0x1302 => Ok(VOLUME_CROPPING_METHOD),
    0x1303 => Ok(BOUNDING_BOX_CROP),
    0x1304 => Ok(OBLIQUE_CROPPING_PLANE_SEQUENCE),
    0x1305 => Ok(PLANE),
    0x1306 => Ok(PLANE_NORMAL),
    0x1309 => Ok(CROPPING_SPECIFICATION_NUMBER),
    0x1501 => Ok(MULTI_PLANAR_RECONSTRUCTION_STYLE),
    0x1502 => Ok(MPR_THICKNESS_TYPE),
    0x1503 => Ok(MPR_SLAB_THICKNESS),
    0x1505 => Ok(MPR_TOP_LEFT_HAND_CORNER),
    0x1507 => Ok(MPR_VIEW_WIDTH_DIRECTION),
    0x1508 => Ok(MPR_VIEW_WIDTH),
    0x150C => Ok(NUMBER_OF_VOLUMETRIC_CURVE_POINTS),
    0x150D => Ok(VOLUMETRIC_CURVE_POINTS),
    0x1511 => Ok(MPR_VIEW_HEIGHT_DIRECTION),
    0x1512 => Ok(MPR_VIEW_HEIGHT),
    0x1602 => Ok(RENDER_PROJECTION),
    0x1603 => Ok(VIEWPOINT_POSITION),
    0x1604 => Ok(VIEWPOINT_LOOK_AT_POINT),
    0x1605 => Ok(VIEWPOINT_UP_DIRECTION),
    0x1606 => Ok(RENDER_FIELD_OF_VIEW),
    0x1607 => Ok(SAMPLING_STEP_SIZE),
    0x1701 => Ok(SHADING_STYLE),
    0x1702 => Ok(AMBIENT_REFLECTION_INTENSITY),
    0x1703 => Ok(LIGHT_DIRECTION),
    0x1704 => Ok(DIFFUSE_REFLECTION_INTENSITY),
    0x1705 => Ok(SPECULAR_REFLECTION_INTENSITY),
    0x1706 => Ok(SHININESS),
    0x1801 => Ok(PRESENTATION_STATE_CLASSIFICATION_COMPONENT_SEQUENCE),
    0x1802 => Ok(COMPONENT_TYPE),
    0x1803 => Ok(COMPONENT_INPUT_SEQUENCE),
    0x1804 => Ok(VOLUMETRIC_PRESENTATION_INPUT_INDEX),
    0x1805 => Ok(PRESENTATION_STATE_COMPOSITOR_COMPONENT_SEQUENCE),
    0x1806 => Ok(WEIGHTING_TRANSFER_FUNCTION_SEQUENCE),
    0x1807 => Ok(WEIGHTING_LOOKUP_TABLE_DESCRIPTOR),
    0x1808 => Ok(WEIGHTING_LOOKUP_TABLE_DATA),
    0x1901 => Ok(VOLUMETRIC_ANNOTATION_SEQUENCE),
    0x1903 => Ok(REFERENCED_STRUCTURED_CONTEXT_SEQUENCE),
    0x1904 => Ok(REFERENCED_CONTENT_ITEM),
    0x1905 => Ok(VOLUMETRIC_PRESENTATION_INPUT_ANNOTATION_SEQUENCE),
    0x1907 => Ok(ANNOTATION_CLIPPING),
    0x1A01 => Ok(PRESENTATION_ANIMATION_STYLE),
    0x1A03 => Ok(RECOMMENDED_ANIMATION_RATE),
    0x1A04 => Ok(ANIMATION_CURVE_SEQUENCE),
    0x1A05 => Ok(ANIMATION_STEP_SIZE),
    0x1A06 => Ok(SWIVEL_RANGE),
    0x1A07 => Ok(VOLUMETRIC_CURVE_UP_DIRECTIONS),
    0x1A08 => Ok(VOLUME_STREAM_SEQUENCE),
    0x1A09 => Ok(RGBA_TRANSFER_FUNCTION_DESCRIPTION),
    0x1B01 => Ok(ADVANCED_BLENDING_SEQUENCE),
    0x1B02 => Ok(BLENDING_INPUT_NUMBER),
    0x1B03 => Ok(BLENDING_DISPLAY_INPUT_SEQUENCE),
    0x1B04 => Ok(BLENDING_DISPLAY_SEQUENCE),
    0x1B06 => Ok(BLENDING_MODE),
    0x1B07 => Ok(TIME_SERIES_BLENDING),
    0x1B08 => Ok(GEOMETRY_FOR_DISPLAY),
    0x1B11 => Ok(THRESHOLD_SEQUENCE),
    0x1B12 => Ok(THRESHOLD_VALUE_SEQUENCE),
    0x1B13 => Ok(THRESHOLD_TYPE),
    0x1B14 => Ok(THRESHOLD_VALUE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0072.
///
fn find_element_in_group_0072(element: u16) -> Result<Item, ()> {
  match element {
    0x0002 => Ok(HANGING_PROTOCOL_NAME),
    0x0004 => Ok(HANGING_PROTOCOL_DESCRIPTION),
    0x0006 => Ok(HANGING_PROTOCOL_LEVEL),
    0x0008 => Ok(HANGING_PROTOCOL_CREATOR),
    0x000A => Ok(HANGING_PROTOCOL_CREATION_DATE_TIME),
    0x000C => Ok(HANGING_PROTOCOL_DEFINITION_SEQUENCE),
    0x000E => Ok(HANGING_PROTOCOL_USER_IDENTIFICATION_CODE_SEQUENCE),
    0x0010 => Ok(HANGING_PROTOCOL_USER_GROUP_NAME),
    0x0012 => Ok(SOURCE_HANGING_PROTOCOL_SEQUENCE),
    0x0014 => Ok(NUMBER_OF_PRIORS_REFERENCED),
    0x0020 => Ok(IMAGE_SETS_SEQUENCE),
    0x0022 => Ok(IMAGE_SET_SELECTOR_SEQUENCE),
    0x0024 => Ok(IMAGE_SET_SELECTOR_USAGE_FLAG),
    0x0026 => Ok(SELECTOR_ATTRIBUTE),
    0x0028 => Ok(SELECTOR_VALUE_NUMBER),
    0x0030 => Ok(TIME_BASED_IMAGE_SETS_SEQUENCE),
    0x0032 => Ok(IMAGE_SET_NUMBER),
    0x0034 => Ok(IMAGE_SET_SELECTOR_CATEGORY),
    0x0038 => Ok(RELATIVE_TIME),
    0x003A => Ok(RELATIVE_TIME_UNITS),
    0x003C => Ok(ABSTRACT_PRIOR_VALUE),
    0x003E => Ok(ABSTRACT_PRIOR_CODE_SEQUENCE),
    0x0040 => Ok(IMAGE_SET_LABEL),
    0x0050 => Ok(SELECTOR_ATTRIBUTE_VR),
    0x0052 => Ok(SELECTOR_SEQUENCE_POINTER),
    0x0054 => Ok(SELECTOR_SEQUENCE_POINTER_PRIVATE_CREATOR),
    0x0056 => Ok(SELECTOR_ATTRIBUTE_PRIVATE_CREATOR),
    0x005E => Ok(SELECTOR_AE_VALUE),
    0x005F => Ok(SELECTOR_AS_VALUE),
    0x0060 => Ok(SELECTOR_AT_VALUE),
    0x0061 => Ok(SELECTOR_DA_VALUE),
    0x0062 => Ok(SELECTOR_CS_VALUE),
    0x0063 => Ok(SELECTOR_DT_VALUE),
    0x0064 => Ok(SELECTOR_IS_VALUE),
    0x0065 => Ok(SELECTOR_OB_VALUE),
    0x0066 => Ok(SELECTOR_LO_VALUE),
    0x0067 => Ok(SELECTOR_OF_VALUE),
    0x0068 => Ok(SELECTOR_LT_VALUE),
    0x0069 => Ok(SELECTOR_OW_VALUE),
    0x006A => Ok(SELECTOR_PN_VALUE),
    0x006B => Ok(SELECTOR_TM_VALUE),
    0x006C => Ok(SELECTOR_SH_VALUE),
    0x006D => Ok(SELECTOR_UN_VALUE),
    0x006E => Ok(SELECTOR_ST_VALUE),
    0x006F => Ok(SELECTOR_UC_VALUE),
    0x0070 => Ok(SELECTOR_UT_VALUE),
    0x0071 => Ok(SELECTOR_UR_VALUE),
    0x0072 => Ok(SELECTOR_DS_VALUE),
    0x0073 => Ok(SELECTOR_OD_VALUE),
    0x0074 => Ok(SELECTOR_FD_VALUE),
    0x0075 => Ok(SELECTOR_OL_VALUE),
    0x0076 => Ok(SELECTOR_FL_VALUE),
    0x0078 => Ok(SELECTOR_UL_VALUE),
    0x007A => Ok(SELECTOR_US_VALUE),
    0x007C => Ok(SELECTOR_SL_VALUE),
    0x007E => Ok(SELECTOR_SS_VALUE),
    0x007F => Ok(SELECTOR_UI_VALUE),
    0x0080 => Ok(SELECTOR_CODE_SEQUENCE_VALUE),
    0x0081 => Ok(SELECTOR_OV_VALUE),
    0x0082 => Ok(SELECTOR_SV_VALUE),
    0x0083 => Ok(SELECTOR_UV_VALUE),
    0x0100 => Ok(NUMBER_OF_SCREENS),
    0x0102 => Ok(NOMINAL_SCREEN_DEFINITION_SEQUENCE),
    0x0104 => Ok(NUMBER_OF_VERTICAL_PIXELS),
    0x0106 => Ok(NUMBER_OF_HORIZONTAL_PIXELS),
    0x0108 => Ok(DISPLAY_ENVIRONMENT_SPATIAL_POSITION),
    0x010A => Ok(SCREEN_MINIMUM_GRAYSCALE_BIT_DEPTH),
    0x010C => Ok(SCREEN_MINIMUM_COLOR_BIT_DEPTH),
    0x010E => Ok(APPLICATION_MAXIMUM_REPAINT_TIME),
    0x0200 => Ok(DISPLAY_SETS_SEQUENCE),
    0x0202 => Ok(DISPLAY_SET_NUMBER),
    0x0203 => Ok(DISPLAY_SET_LABEL),
    0x0204 => Ok(DISPLAY_SET_PRESENTATION_GROUP),
    0x0206 => Ok(DISPLAY_SET_PRESENTATION_GROUP_DESCRIPTION),
    0x0208 => Ok(PARTIAL_DATA_DISPLAY_HANDLING),
    0x0210 => Ok(SYNCHRONIZED_SCROLLING_SEQUENCE),
    0x0212 => Ok(DISPLAY_SET_SCROLLING_GROUP),
    0x0214 => Ok(NAVIGATION_INDICATOR_SEQUENCE),
    0x0216 => Ok(NAVIGATION_DISPLAY_SET),
    0x0218 => Ok(REFERENCE_DISPLAY_SETS),
    0x0300 => Ok(IMAGE_BOXES_SEQUENCE),
    0x0302 => Ok(IMAGE_BOX_NUMBER),
    0x0304 => Ok(IMAGE_BOX_LAYOUT_TYPE),
    0x0306 => Ok(IMAGE_BOX_TILE_HORIZONTAL_DIMENSION),
    0x0308 => Ok(IMAGE_BOX_TILE_VERTICAL_DIMENSION),
    0x0310 => Ok(IMAGE_BOX_SCROLL_DIRECTION),
    0x0312 => Ok(IMAGE_BOX_SMALL_SCROLL_TYPE),
    0x0314 => Ok(IMAGE_BOX_SMALL_SCROLL_AMOUNT),
    0x0316 => Ok(IMAGE_BOX_LARGE_SCROLL_TYPE),
    0x0318 => Ok(IMAGE_BOX_LARGE_SCROLL_AMOUNT),
    0x0320 => Ok(IMAGE_BOX_OVERLAP_PRIORITY),
    0x0330 => Ok(CINE_RELATIVE_TO_REAL_TIME),
    0x0400 => Ok(FILTER_OPERATIONS_SEQUENCE),
    0x0402 => Ok(FILTER_BY_CATEGORY),
    0x0404 => Ok(FILTER_BY_ATTRIBUTE_PRESENCE),
    0x0406 => Ok(FILTER_BY_OPERATOR),
    0x0420 => Ok(STRUCTURED_DISPLAY_BACKGROUND_CIE_LAB_VALUE),
    0x0421 => Ok(EMPTY_IMAGE_BOX_CIE_LAB_VALUE),
    0x0422 => Ok(STRUCTURED_DISPLAY_IMAGE_BOX_SEQUENCE),
    0x0424 => Ok(STRUCTURED_DISPLAY_TEXT_BOX_SEQUENCE),
    0x0427 => Ok(REFERENCED_FIRST_FRAME_SEQUENCE),
    0x0430 => Ok(IMAGE_BOX_SYNCHRONIZATION_SEQUENCE),
    0x0432 => Ok(SYNCHRONIZED_IMAGE_BOX_LIST),
    0x0434 => Ok(TYPE_OF_SYNCHRONIZATION),
    0x0500 => Ok(BLENDING_OPERATION_TYPE),
    0x0510 => Ok(REFORMATTING_OPERATION_TYPE),
    0x0512 => Ok(REFORMATTING_THICKNESS),
    0x0514 => Ok(REFORMATTING_INTERVAL),
    0x0516 => Ok(REFORMATTING_OPERATION_INITIAL_VIEW_DIRECTION),
    0x0520 => Ok(THREE_D_RENDERING_TYPE),
    0x0600 => Ok(SORTING_OPERATIONS_SEQUENCE),
    0x0602 => Ok(SORT_BY_CATEGORY),
    0x0604 => Ok(SORTING_DIRECTION),
    0x0700 => Ok(DISPLAY_SET_PATIENT_ORIENTATION),
    0x0702 => Ok(VOI_TYPE),
    0x0704 => Ok(PSEUDO_COLOR_TYPE),
    0x0705 => Ok(PSEUDO_COLOR_PALETTE_INSTANCE_REFERENCE_SEQUENCE),
    0x0706 => Ok(SHOW_GRAYSCALE_INVERTED),
    0x0710 => Ok(SHOW_IMAGE_TRUE_SIZE_FLAG),
    0x0712 => Ok(SHOW_GRAPHIC_ANNOTATION_FLAG),
    0x0714 => Ok(SHOW_PATIENT_DEMOGRAPHICS_FLAG),
    0x0716 => Ok(SHOW_ACQUISITION_TECHNIQUES_FLAG),
    0x0717 => Ok(DISPLAY_SET_HORIZONTAL_JUSTIFICATION),
    0x0718 => Ok(DISPLAY_SET_VERTICAL_JUSTIFICATION),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0074.
///
fn find_element_in_group_0074(element: u16) -> Result<Item, ()> {
  match element {
    0x0120 => Ok(CONTINUATION_START_METERSET),
    0x0121 => Ok(CONTINUATION_END_METERSET),
    0x1000 => Ok(PROCEDURE_STEP_STATE),
    0x1002 => Ok(PROCEDURE_STEP_PROGRESS_INFORMATION_SEQUENCE),
    0x1004 => Ok(PROCEDURE_STEP_PROGRESS),
    0x1006 => Ok(PROCEDURE_STEP_PROGRESS_DESCRIPTION),
    0x1007 => Ok(PROCEDURE_STEP_PROGRESS_PARAMETERS_SEQUENCE),
    0x1008 => Ok(PROCEDURE_STEP_COMMUNICATIONS_URI_SEQUENCE),
    0x100A => Ok(CONTACT_URI),
    0x100C => Ok(CONTACT_DISPLAY_NAME),
    0x100E => Ok(PROCEDURE_STEP_DISCONTINUATION_REASON_CODE_SEQUENCE),
    0x1020 => Ok(BEAM_TASK_SEQUENCE),
    0x1022 => Ok(BEAM_TASK_TYPE),
    0x1024 => Ok(BEAM_ORDER_INDEX_TRIAL),
    0x1025 => Ok(AUTOSEQUENCE_FLAG),
    0x1026 => Ok(TABLE_TOP_VERTICAL_ADJUSTED_POSITION),
    0x1027 => Ok(TABLE_TOP_LONGITUDINAL_ADJUSTED_POSITION),
    0x1028 => Ok(TABLE_TOP_LATERAL_ADJUSTED_POSITION),
    0x102A => Ok(PATIENT_SUPPORT_ADJUSTED_ANGLE),
    0x102B => Ok(TABLE_TOP_ECCENTRIC_ADJUSTED_ANGLE),
    0x102C => Ok(TABLE_TOP_PITCH_ADJUSTED_ANGLE),
    0x102D => Ok(TABLE_TOP_ROLL_ADJUSTED_ANGLE),
    0x1030 => Ok(DELIVERY_VERIFICATION_IMAGE_SEQUENCE),
    0x1032 => Ok(VERIFICATION_IMAGE_TIMING),
    0x1034 => Ok(DOUBLE_EXPOSURE_FLAG),
    0x1036 => Ok(DOUBLE_EXPOSURE_ORDERING),
    0x1038 => Ok(DOUBLE_EXPOSURE_METERSET_TRIAL),
    0x103A => Ok(DOUBLE_EXPOSURE_FIELD_DELTA_TRIAL),
    0x1040 => Ok(RELATED_REFERENCE_RT_IMAGE_SEQUENCE),
    0x1042 => Ok(GENERAL_MACHINE_VERIFICATION_SEQUENCE),
    0x1044 => Ok(CONVENTIONAL_MACHINE_VERIFICATION_SEQUENCE),
    0x1046 => Ok(ION_MACHINE_VERIFICATION_SEQUENCE),
    0x1048 => Ok(FAILED_ATTRIBUTES_SEQUENCE),
    0x104A => Ok(OVERRIDDEN_ATTRIBUTES_SEQUENCE),
    0x104C => Ok(CONVENTIONAL_CONTROL_POINT_VERIFICATION_SEQUENCE),
    0x104E => Ok(ION_CONTROL_POINT_VERIFICATION_SEQUENCE),
    0x1050 => Ok(ATTRIBUTE_OCCURRENCE_SEQUENCE),
    0x1052 => Ok(ATTRIBUTE_OCCURRENCE_POINTER),
    0x1054 => Ok(ATTRIBUTE_ITEM_SELECTOR),
    0x1056 => Ok(ATTRIBUTE_OCCURRENCE_PRIVATE_CREATOR),
    0x1057 => Ok(SELECTOR_SEQUENCE_POINTER_ITEMS),
    0x1200 => Ok(SCHEDULED_PROCEDURE_STEP_PRIORITY),
    0x1202 => Ok(WORKLIST_LABEL),
    0x1204 => Ok(PROCEDURE_STEP_LABEL),
    0x1210 => Ok(SCHEDULED_PROCESSING_PARAMETERS_SEQUENCE),
    0x1212 => Ok(PERFORMED_PROCESSING_PARAMETERS_SEQUENCE),
    0x1216 => Ok(UNIFIED_PROCEDURE_STEP_PERFORMED_PROCEDURE_SEQUENCE),
    0x1220 => Ok(RELATED_PROCEDURE_STEP_SEQUENCE),
    0x1222 => Ok(PROCEDURE_STEP_RELATIONSHIP_TYPE),
    0x1224 => Ok(REPLACED_PROCEDURE_STEP_SEQUENCE),
    0x1230 => Ok(DELETION_LOCK),
    0x1234 => Ok(RECEIVING_AE),
    0x1236 => Ok(REQUESTING_AE),
    0x1238 => Ok(REASON_FOR_CANCELLATION),
    0x1242 => Ok(SCP_STATUS),
    0x1244 => Ok(SUBSCRIPTION_LIST_STATUS),
    0x1246 => Ok(UNIFIED_PROCEDURE_STEP_LIST_STATUS),
    0x1324 => Ok(BEAM_ORDER_INDEX),
    0x1338 => Ok(DOUBLE_EXPOSURE_METERSET),
    0x133A => Ok(DOUBLE_EXPOSURE_FIELD_DELTA),
    0x1401 => Ok(BRACHY_TASK_SEQUENCE),
    0x1402 => Ok(CONTINUATION_START_TOTAL_REFERENCE_AIR_KERMA),
    0x1403 => Ok(CONTINUATION_END_TOTAL_REFERENCE_AIR_KERMA),
    0x1404 => Ok(CONTINUATION_PULSE_NUMBER),
    0x1405 => Ok(CHANNEL_DELIVERY_ORDER_SEQUENCE),
    0x1406 => Ok(REFERENCED_CHANNEL_NUMBER),
    0x1407 => Ok(START_CUMULATIVE_TIME_WEIGHT),
    0x1408 => Ok(END_CUMULATIVE_TIME_WEIGHT),
    0x1409 => Ok(OMITTED_CHANNEL_SEQUENCE),
    0x140A => Ok(REASON_FOR_CHANNEL_OMISSION),
    0x140B => Ok(REASON_FOR_CHANNEL_OMISSION_DESCRIPTION),
    0x140C => Ok(CHANNEL_DELIVERY_ORDER_INDEX),
    0x140D => Ok(CHANNEL_DELIVERY_CONTINUATION_SEQUENCE),
    0x140E => Ok(OMITTED_APPLICATION_SETUP_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0076.
///
fn find_element_in_group_0076(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(IMPLANT_ASSEMBLY_TEMPLATE_NAME),
    0x0003 => Ok(IMPLANT_ASSEMBLY_TEMPLATE_ISSUER),
    0x0006 => Ok(IMPLANT_ASSEMBLY_TEMPLATE_VERSION),
    0x0008 => Ok(REPLACED_IMPLANT_ASSEMBLY_TEMPLATE_SEQUENCE),
    0x000A => Ok(IMPLANT_ASSEMBLY_TEMPLATE_TYPE),
    0x000C => Ok(ORIGINAL_IMPLANT_ASSEMBLY_TEMPLATE_SEQUENCE),
    0x000E => Ok(DERIVATION_IMPLANT_ASSEMBLY_TEMPLATE_SEQUENCE),
    0x0010 => Ok(IMPLANT_ASSEMBLY_TEMPLATE_TARGET_ANATOMY_SEQUENCE),
    0x0020 => Ok(PROCEDURE_TYPE_CODE_SEQUENCE),
    0x0030 => Ok(SURGICAL_TECHNIQUE),
    0x0032 => Ok(COMPONENT_TYPES_SEQUENCE),
    0x0034 => Ok(COMPONENT_TYPE_CODE_SEQUENCE),
    0x0036 => Ok(EXCLUSIVE_COMPONENT_TYPE),
    0x0038 => Ok(MANDATORY_COMPONENT_TYPE),
    0x0040 => Ok(COMPONENT_SEQUENCE),
    0x0055 => Ok(COMPONENT_ID),
    0x0060 => Ok(COMPONENT_ASSEMBLY_SEQUENCE),
    0x0070 => Ok(COMPONENT_1_REFERENCED_ID),
    0x0080 => Ok(COMPONENT_1_REFERENCED_MATING_FEATURE_SET_ID),
    0x0090 => Ok(COMPONENT_1_REFERENCED_MATING_FEATURE_ID),
    0x00A0 => Ok(COMPONENT_2_REFERENCED_ID),
    0x00B0 => Ok(COMPONENT_2_REFERENCED_MATING_FEATURE_SET_ID),
    0x00C0 => Ok(COMPONENT_2_REFERENCED_MATING_FEATURE_ID),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0078.
///
fn find_element_in_group_0078(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(IMPLANT_TEMPLATE_GROUP_NAME),
    0x0010 => Ok(IMPLANT_TEMPLATE_GROUP_DESCRIPTION),
    0x0020 => Ok(IMPLANT_TEMPLATE_GROUP_ISSUER),
    0x0024 => Ok(IMPLANT_TEMPLATE_GROUP_VERSION),
    0x0026 => Ok(REPLACED_IMPLANT_TEMPLATE_GROUP_SEQUENCE),
    0x0028 => Ok(IMPLANT_TEMPLATE_GROUP_TARGET_ANATOMY_SEQUENCE),
    0x002A => Ok(IMPLANT_TEMPLATE_GROUP_MEMBERS_SEQUENCE),
    0x002E => Ok(IMPLANT_TEMPLATE_GROUP_MEMBER_ID),
    0x0050 => Ok(THREE_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_POINT),
    0x0060 => Ok(THREE_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_AXES),
    0x0070 => {
      Ok(IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_2D_COORDINATES_SEQUENCE)
    }
    0x0090 => Ok(TWO_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_POINT),
    0x00A0 => Ok(TWO_D_IMPLANT_TEMPLATE_GROUP_MEMBER_MATCHING_AXES),
    0x00B0 => Ok(IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_SEQUENCE),
    0x00B2 => Ok(IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_NAME),
    0x00B4 => Ok(IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_RANK_SEQUENCE),
    0x00B6 => Ok(REFERENCED_IMPLANT_TEMPLATE_GROUP_MEMBER_ID),
    0x00B8 => Ok(IMPLANT_TEMPLATE_GROUP_VARIATION_DIMENSION_RANK),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0080.
///
fn find_element_in_group_0080(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(SURFACE_SCAN_ACQUISITION_TYPE_CODE_SEQUENCE),
    0x0002 => Ok(SURFACE_SCAN_MODE_CODE_SEQUENCE),
    0x0003 => Ok(REGISTRATION_METHOD_CODE_SEQUENCE),
    0x0004 => Ok(SHOT_DURATION_TIME),
    0x0005 => Ok(SHOT_OFFSET_TIME),
    0x0006 => Ok(SURFACE_POINT_PRESENTATION_VALUE_DATA),
    0x0007 => Ok(SURFACE_POINT_COLOR_CIE_LAB_VALUE_DATA),
    0x0008 => Ok(UV_MAPPING_SEQUENCE),
    0x0009 => Ok(TEXTURE_LABEL),
    0x0010 => Ok(U_VALUE_DATA),
    0x0011 => Ok(V_VALUE_DATA),
    0x0012 => Ok(REFERENCED_TEXTURE_SEQUENCE),
    0x0013 => Ok(REFERENCED_SURFACE_DATA_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0082.
///
fn find_element_in_group_0082(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(ASSESSMENT_SUMMARY),
    0x0003 => Ok(ASSESSMENT_SUMMARY_DESCRIPTION),
    0x0004 => Ok(ASSESSED_SOP_INSTANCE_SEQUENCE),
    0x0005 => Ok(REFERENCED_COMPARISON_SOP_INSTANCE_SEQUENCE),
    0x0006 => Ok(NUMBER_OF_ASSESSMENT_OBSERVATIONS),
    0x0007 => Ok(ASSESSMENT_OBSERVATIONS_SEQUENCE),
    0x0008 => Ok(OBSERVATION_SIGNIFICANCE),
    0x000A => Ok(OBSERVATION_DESCRIPTION),
    0x000C => Ok(STRUCTURED_CONSTRAINT_OBSERVATION_SEQUENCE),
    0x0010 => Ok(ASSESSED_ATTRIBUTE_VALUE_SEQUENCE),
    0x0016 => Ok(ASSESSMENT_SET_ID),
    0x0017 => Ok(ASSESSMENT_REQUESTER_SEQUENCE),
    0x0018 => Ok(SELECTOR_ATTRIBUTE_NAME),
    0x0019 => Ok(SELECTOR_ATTRIBUTE_KEYWORD),
    0x0021 => Ok(ASSESSMENT_TYPE_CODE_SEQUENCE),
    0x0022 => Ok(OBSERVATION_BASIS_CODE_SEQUENCE),
    0x0023 => Ok(ASSESSMENT_LABEL),
    0x0032 => Ok(CONSTRAINT_TYPE),
    0x0033 => Ok(SPECIFICATION_SELECTION_GUIDANCE),
    0x0034 => Ok(CONSTRAINT_VALUE_SEQUENCE),
    0x0035 => Ok(RECOMMENDED_DEFAULT_VALUE_SEQUENCE),
    0x0036 => Ok(CONSTRAINT_VIOLATION_SIGNIFICANCE),
    0x0037 => Ok(CONSTRAINT_VIOLATION_CONDITION),
    0x0038 => Ok(MODIFIABLE_CONSTRAINT_FLAG),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0088.
///
fn find_element_in_group_0088(element: u16) -> Result<Item, ()> {
  match element {
    0x0130 => Ok(STORAGE_MEDIA_FILE_SET_ID),
    0x0140 => Ok(STORAGE_MEDIA_FILE_SET_UID),
    0x0200 => Ok(ICON_IMAGE_SEQUENCE),
    0x0904 => Ok(TOPIC_TITLE),
    0x0906 => Ok(TOPIC_SUBJECT),
    0x0910 => Ok(TOPIC_AUTHOR),
    0x0912 => Ok(TOPIC_KEYWORDS),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0100.
///
fn find_element_in_group_0100(element: u16) -> Result<Item, ()> {
  match element {
    0x0410 => Ok(SOP_INSTANCE_STATUS),
    0x0420 => Ok(SOP_AUTHORIZATION_DATE_TIME),
    0x0424 => Ok(SOP_AUTHORIZATION_COMMENT),
    0x0426 => Ok(AUTHORIZATION_EQUIPMENT_CERTIFICATION_NUMBER),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x0400.
///
fn find_element_in_group_0400(element: u16) -> Result<Item, ()> {
  match element {
    0x0005 => Ok(MACID_NUMBER),
    0x0010 => Ok(MAC_CALCULATION_TRANSFER_SYNTAX_UID),
    0x0015 => Ok(MAC_ALGORITHM),
    0x0020 => Ok(DATA_ELEMENTS_SIGNED),
    0x0100 => Ok(DIGITAL_SIGNATURE_UID),
    0x0105 => Ok(DIGITAL_SIGNATURE_DATE_TIME),
    0x0110 => Ok(CERTIFICATE_TYPE),
    0x0115 => Ok(CERTIFICATE_OF_SIGNER),
    0x0120 => Ok(SIGNATURE),
    0x0305 => Ok(CERTIFIED_TIMESTAMP_TYPE),
    0x0310 => Ok(CERTIFIED_TIMESTAMP),
    0x0401 => Ok(DIGITAL_SIGNATURE_PURPOSE_CODE_SEQUENCE),
    0x0402 => Ok(REFERENCED_DIGITAL_SIGNATURE_SEQUENCE),
    0x0403 => Ok(REFERENCED_SOP_INSTANCE_MAC_SEQUENCE),
    0x0404 => Ok(MAC),
    0x0500 => Ok(ENCRYPTED_ATTRIBUTES_SEQUENCE),
    0x0510 => Ok(ENCRYPTED_CONTENT_TRANSFER_SYNTAX_UID),
    0x0520 => Ok(ENCRYPTED_CONTENT),
    0x0550 => Ok(MODIFIED_ATTRIBUTES_SEQUENCE),
    0x0551 => Ok(NONCONFORMING_MODIFIED_ATTRIBUTES_SEQUENCE),
    0x0552 => Ok(NONCONFORMING_DATA_ELEMENT_VALUE),
    0x0561 => Ok(ORIGINAL_ATTRIBUTES_SEQUENCE),
    0x0562 => Ok(ATTRIBUTE_MODIFICATION_DATE_TIME),
    0x0563 => Ok(MODIFYING_SYSTEM),
    0x0564 => Ok(SOURCE_OF_PREVIOUS_VALUES),
    0x0565 => Ok(REASON_FOR_THE_ATTRIBUTE_MODIFICATION),
    0x0600 => Ok(INSTANCE_ORIGIN_STATUS),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x2000.
///
fn find_element_in_group_2000(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(NUMBER_OF_COPIES),
    0x001E => Ok(PRINTER_CONFIGURATION_SEQUENCE),
    0x0020 => Ok(PRINT_PRIORITY),
    0x0030 => Ok(MEDIUM_TYPE),
    0x0040 => Ok(FILM_DESTINATION),
    0x0050 => Ok(FILM_SESSION_LABEL),
    0x0060 => Ok(MEMORY_ALLOCATION),
    0x0061 => Ok(MAXIMUM_MEMORY_ALLOCATION),
    0x0062 => Ok(COLOR_IMAGE_PRINTING_FLAG),
    0x0063 => Ok(COLLATION_FLAG),
    0x0065 => Ok(ANNOTATION_FLAG),
    0x0067 => Ok(IMAGE_OVERLAY_FLAG),
    0x0069 => Ok(PRESENTATION_LUT_FLAG),
    0x006A => Ok(IMAGE_BOX_PRESENTATION_LUT_FLAG),
    0x00A0 => Ok(MEMORY_BIT_DEPTH),
    0x00A1 => Ok(PRINTING_BIT_DEPTH),
    0x00A2 => Ok(MEDIA_INSTALLED_SEQUENCE),
    0x00A4 => Ok(OTHER_MEDIA_AVAILABLE_SEQUENCE),
    0x00A8 => Ok(SUPPORTED_IMAGE_DISPLAY_FORMATS_SEQUENCE),
    0x0500 => Ok(REFERENCED_FILM_BOX_SEQUENCE),
    0x0510 => Ok(REFERENCED_STORED_PRINT_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x2010.
///
fn find_element_in_group_2010(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(IMAGE_DISPLAY_FORMAT),
    0x0030 => Ok(ANNOTATION_DISPLAY_FORMAT_ID),
    0x0040 => Ok(FILM_ORIENTATION),
    0x0050 => Ok(FILM_SIZE_ID),
    0x0052 => Ok(PRINTER_RESOLUTION_ID),
    0x0054 => Ok(DEFAULT_PRINTER_RESOLUTION_ID),
    0x0060 => Ok(MAGNIFICATION_TYPE),
    0x0080 => Ok(SMOOTHING_TYPE),
    0x00A6 => Ok(DEFAULT_MAGNIFICATION_TYPE),
    0x00A7 => Ok(OTHER_MAGNIFICATION_TYPES_AVAILABLE),
    0x00A8 => Ok(DEFAULT_SMOOTHING_TYPE),
    0x00A9 => Ok(OTHER_SMOOTHING_TYPES_AVAILABLE),
    0x0100 => Ok(BORDER_DENSITY),
    0x0110 => Ok(EMPTY_IMAGE_DENSITY),
    0x0120 => Ok(MIN_DENSITY),
    0x0130 => Ok(MAX_DENSITY),
    0x0140 => Ok(TRIM),
    0x0150 => Ok(CONFIGURATION_INFORMATION),
    0x0152 => Ok(CONFIGURATION_INFORMATION_DESCRIPTION),
    0x0154 => Ok(MAXIMUM_COLLATED_FILMS),
    0x015E => Ok(ILLUMINATION),
    0x0160 => Ok(REFLECTED_AMBIENT_LIGHT),
    0x0376 => Ok(PRINTER_PIXEL_SPACING),
    0x0500 => Ok(REFERENCED_FILM_SESSION_SEQUENCE),
    0x0510 => Ok(REFERENCED_IMAGE_BOX_SEQUENCE),
    0x0520 => Ok(REFERENCED_BASIC_ANNOTATION_BOX_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x2020.
///
fn find_element_in_group_2020(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(IMAGE_BOX_POSITION),
    0x0020 => Ok(POLARITY),
    0x0030 => Ok(REQUESTED_IMAGE_SIZE),
    0x0040 => Ok(REQUESTED_DECIMATE_CROP_BEHAVIOR),
    0x0050 => Ok(REQUESTED_RESOLUTION_ID),
    0x00A0 => Ok(REQUESTED_IMAGE_SIZE_FLAG),
    0x00A2 => Ok(DECIMATE_CROP_RESULT),
    0x0110 => Ok(BASIC_GRAYSCALE_IMAGE_SEQUENCE),
    0x0111 => Ok(BASIC_COLOR_IMAGE_SEQUENCE),
    0x0130 => Ok(REFERENCED_IMAGE_OVERLAY_BOX_SEQUENCE),
    0x0140 => Ok(REFERENCED_VOILUT_BOX_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x2030.
///
fn find_element_in_group_2030(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(ANNOTATION_POSITION),
    0x0020 => Ok(TEXT_STRING),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x2040.
///
fn find_element_in_group_2040(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(REFERENCED_OVERLAY_PLANE_SEQUENCE),
    0x0011 => Ok(REFERENCED_OVERLAY_PLANE_GROUPS),
    0x0020 => Ok(OVERLAY_PIXEL_DATA_SEQUENCE),
    0x0060 => Ok(OVERLAY_MAGNIFICATION_TYPE),
    0x0070 => Ok(OVERLAY_SMOOTHING_TYPE),
    0x0072 => Ok(OVERLAY_OR_IMAGE_MAGNIFICATION),
    0x0074 => Ok(MAGNIFY_TO_NUMBER_OF_COLUMNS),
    0x0080 => Ok(OVERLAY_FOREGROUND_DENSITY),
    0x0082 => Ok(OVERLAY_BACKGROUND_DENSITY),
    0x0090 => Ok(OVERLAY_MODE),
    0x0100 => Ok(THRESHOLD_DENSITY),
    0x0500 => Ok(REFERENCED_IMAGE_BOX_SEQUENCE_RETIRED),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x2050.
///
fn find_element_in_group_2050(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(PRESENTATION_LUT_SEQUENCE),
    0x0020 => Ok(PRESENTATION_LUT_SHAPE),
    0x0500 => Ok(REFERENCED_PRESENTATION_LUT_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x2100.
///
fn find_element_in_group_2100(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(PRINT_JOB_ID),
    0x0020 => Ok(EXECUTION_STATUS),
    0x0030 => Ok(EXECUTION_STATUS_INFO),
    0x0040 => Ok(CREATION_DATE),
    0x0050 => Ok(CREATION_TIME),
    0x0070 => Ok(ORIGINATOR),
    0x0140 => Ok(DESTINATION_AE),
    0x0160 => Ok(OWNER_ID),
    0x0170 => Ok(NUMBER_OF_FILMS),
    0x0500 => Ok(REFERENCED_PRINT_JOB_SEQUENCE_PULL_STORED_PRINT),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x2110.
///
fn find_element_in_group_2110(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(PRINTER_STATUS),
    0x0020 => Ok(PRINTER_STATUS_INFO),
    0x0030 => Ok(PRINTER_NAME),
    0x0099 => Ok(PRINT_QUEUE_ID),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x2120.
///
fn find_element_in_group_2120(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(QUEUE_STATUS),
    0x0050 => Ok(PRINT_JOB_DESCRIPTION_SEQUENCE),
    0x0070 => Ok(REFERENCED_PRINT_JOB_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x2130.
///
fn find_element_in_group_2130(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(PRINT_MANAGEMENT_CAPABILITIES_SEQUENCE),
    0x0015 => Ok(PRINTER_CHARACTERISTICS_SEQUENCE),
    0x0030 => Ok(FILM_BOX_CONTENT_SEQUENCE),
    0x0040 => Ok(IMAGE_BOX_CONTENT_SEQUENCE),
    0x0050 => Ok(ANNOTATION_CONTENT_SEQUENCE),
    0x0060 => Ok(IMAGE_OVERLAY_BOX_CONTENT_SEQUENCE),
    0x0080 => Ok(PRESENTATION_LUT_CONTENT_SEQUENCE),
    0x00A0 => Ok(PROPOSED_STUDY_SEQUENCE),
    0x00C0 => Ok(ORIGINAL_IMAGE_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x2200.
///
fn find_element_in_group_2200(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(LABEL_USING_INFORMATION_EXTRACTED_FROM_INSTANCES),
    0x0002 => Ok(LABEL_TEXT),
    0x0003 => Ok(LABEL_STYLE_SELECTION),
    0x0004 => Ok(MEDIA_DISPOSITION),
    0x0005 => Ok(BARCODE_VALUE),
    0x0006 => Ok(BARCODE_SYMBOLOGY),
    0x0007 => Ok(ALLOW_MEDIA_SPLITTING),
    0x0008 => Ok(INCLUDE_NON_DICOM_OBJECTS),
    0x0009 => Ok(INCLUDE_DISPLAY_APPLICATION),
    0x000A => Ok(PRESERVE_COMPOSITE_INSTANCES_AFTER_MEDIA_CREATION),
    0x000B => Ok(TOTAL_NUMBER_OF_PIECES_OF_MEDIA_CREATED),
    0x000C => Ok(REQUESTED_MEDIA_APPLICATION_PROFILE),
    0x000D => Ok(REFERENCED_STORAGE_MEDIA_SEQUENCE),
    0x000E => Ok(FAILURE_ATTRIBUTES),
    0x000F => Ok(ALLOW_LOSSY_COMPRESSION),
    0x0020 => Ok(REQUEST_PRIORITY),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x3002.
///
fn find_element_in_group_3002(element: u16) -> Result<Item, ()> {
  match element {
    0x0002 => Ok(RT_IMAGE_LABEL),
    0x0003 => Ok(RT_IMAGE_NAME),
    0x0004 => Ok(RT_IMAGE_DESCRIPTION),
    0x000A => Ok(REPORTED_VALUES_ORIGIN),
    0x000C => Ok(RT_IMAGE_PLANE),
    0x000D => Ok(X_RAY_IMAGE_RECEPTOR_TRANSLATION),
    0x000E => Ok(X_RAY_IMAGE_RECEPTOR_ANGLE),
    0x0010 => Ok(RT_IMAGE_ORIENTATION),
    0x0011 => Ok(IMAGE_PLANE_PIXEL_SPACING),
    0x0012 => Ok(RT_IMAGE_POSITION),
    0x0020 => Ok(RADIATION_MACHINE_NAME),
    0x0022 => Ok(RADIATION_MACHINE_SAD),
    0x0024 => Ok(RADIATION_MACHINE_SSD),
    0x0026 => Ok(RT_IMAGE_SID),
    0x0028 => Ok(SOURCE_TO_REFERENCE_OBJECT_DISTANCE),
    0x0029 => Ok(FRACTION_NUMBER),
    0x0030 => Ok(EXPOSURE_SEQUENCE),
    0x0032 => Ok(METERSET_EXPOSURE),
    0x0034 => Ok(DIAPHRAGM_POSITION),
    0x0040 => Ok(FLUENCE_MAP_SEQUENCE),
    0x0041 => Ok(FLUENCE_DATA_SOURCE),
    0x0042 => Ok(FLUENCE_DATA_SCALE),
    0x0050 => Ok(PRIMARY_FLUENCE_MODE_SEQUENCE),
    0x0051 => Ok(FLUENCE_MODE),
    0x0052 => Ok(FLUENCE_MODE_ID),
    0x0100 => Ok(SELECTED_FRAME_NUMBER),
    0x0101 => Ok(SELECTED_FRAME_FUNCTIONAL_GROUPS_SEQUENCE),
    0x0102 => Ok(RT_IMAGE_FRAME_GENERAL_CONTENT_SEQUENCE),
    0x0103 => Ok(RT_IMAGE_FRAME_CONTEXT_SEQUENCE),
    0x0104 => Ok(RT_IMAGE_SCOPE_SEQUENCE),
    0x0105 => Ok(BEAM_MODIFIER_COORDINATES_PRESENCE_FLAG),
    0x0106 => Ok(START_CUMULATIVE_METERSET),
    0x0107 => Ok(STOP_CUMULATIVE_METERSET),
    0x0108 => Ok(RT_ACQUISITION_PATIENT_POSITION_SEQUENCE),
    0x0109 => Ok(RT_IMAGE_FRAME_IMAGING_DEVICE_POSITION_SEQUENCE),
    0x010A => Ok(RT_IMAGE_FRAMEK_V_RADIATION_ACQUISITION_SEQUENCE),
    0x010B => Ok(RT_IMAGE_FRAME_MV_RADIATION_ACQUISITION_SEQUENCE),
    0x010C => Ok(RT_IMAGE_FRAME_RADIATION_ACQUISITION_SEQUENCE),
    0x010D => Ok(IMAGING_SOURCE_POSITION_SEQUENCE),
    0x010E => Ok(IMAGE_RECEPTOR_POSITION_SEQUENCE),
    0x010F => Ok(DEVICE_POSITION_TO_EQUIPMENT_MAPPING_MATRIX),
    0x0110 => Ok(DEVICE_POSITION_PARAMETER_SEQUENCE),
    0x0111 => Ok(IMAGING_SOURCE_LOCATION_SPECIFICATION_TYPE),
    0x0112 => Ok(IMAGING_DEVICE_LOCATION_MATRIX_SEQUENCE),
    0x0113 => Ok(IMAGING_DEVICE_LOCATION_PARAMETER_SEQUENCE),
    0x0114 => Ok(IMAGING_APERTURE_SEQUENCE),
    0x0115 => Ok(IMAGING_APERTURE_SPECIFICATION_TYPE),
    0x0116 => Ok(NUMBER_OF_ACQUISITION_DEVICES),
    0x0117 => Ok(ACQUISITION_DEVICE_SEQUENCE),
    0x0118 => Ok(ACQUISITION_TASK_SEQUENCE),
    0x0119 => Ok(ACQUISITION_TASK_WORKITEM_CODE_SEQUENCE),
    0x011A => Ok(ACQUISITION_SUBTASK_SEQUENCE),
    0x011B => Ok(SUBTASK_WORKITEM_CODE_SEQUENCE),
    0x011C => Ok(ACQUISITION_TASK_INDEX),
    0x011D => Ok(ACQUISITION_SUBTASK_INDEX),
    0x011E => Ok(REFERENCED_BASELINE_PARAMETERS_RT_RADIATION_INSTANCE_SEQUENCE),
    0x011F => Ok(POSITION_ACQUISITION_TEMPLATE_IDENTIFICATION_SEQUENCE),
    0x0120 => Ok(POSITION_ACQUISITION_TEMPLATE_ID),
    0x0121 => Ok(POSITION_ACQUISITION_TEMPLATE_NAME),
    0x0122 => Ok(POSITION_ACQUISITION_TEMPLATE_CODE_SEQUENCE),
    0x0123 => Ok(POSITION_ACQUISITION_TEMPLATE_DESCRIPTION),
    0x0124 => Ok(ACQUISITION_TASK_APPLICABILITY_SEQUENCE),
    0x0125 => Ok(PROJECTION_IMAGING_ACQUISITION_PARAMETER_SEQUENCE),
    0x0126 => Ok(CT_IMAGING_ACQUISITION_PARAMETER_SEQUENCE),
    0x0127 => Ok(KV_IMAGING_GENERATION_PARAMETERS_SEQUENCE),
    0x0128 => Ok(MV_IMAGING_GENERATION_PARAMETERS_SEQUENCE),
    0x0129 => Ok(ACQUISITION_SIGNAL_TYPE),
    0x012A => Ok(ACQUISITION_METHOD),
    0x012B => Ok(SCAN_START_POSITION_SEQUENCE),
    0x012C => Ok(SCAN_STOP_POSITION_SEQUENCE),
    0x012D => Ok(IMAGING_SOURCE_TO_BEAM_MODIFIER_DEFINITION_PLANE_DISTANCE),
    0x012E => Ok(SCAN_ARC_TYPE),
    0x012F => Ok(DETECTOR_POSITIONING_TYPE),
    0x0130 => Ok(ADDITIONAL_RT_ACCESSORY_DEVICE_SEQUENCE),
    0x0131 => Ok(DEVICE_SPECIFIC_ACQUISITION_PARAMETER_SEQUENCE),
    0x0132 => Ok(REFERENCED_POSITION_REFERENCE_INSTANCE_SEQUENCE),
    0x0133 => Ok(ENERGY_DERIVATION_CODE_SEQUENCE),
    0x0134 => Ok(MAXIMUM_CUMULATIVE_METERSET_EXPOSURE),
    0x0135 => Ok(ACQUISITION_INITIATION_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x3004.
///
fn find_element_in_group_3004(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(DVH_TYPE),
    0x0002 => Ok(DOSE_UNITS),
    0x0004 => Ok(DOSE_TYPE),
    0x0005 => Ok(SPATIAL_TRANSFORM_OF_DOSE),
    0x0006 => Ok(DOSE_COMMENT),
    0x0008 => Ok(NORMALIZATION_POINT),
    0x000A => Ok(DOSE_SUMMATION_TYPE),
    0x000C => Ok(GRID_FRAME_OFFSET_VECTOR),
    0x000E => Ok(DOSE_GRID_SCALING),
    0x0010 => Ok(RT_DOSE_ROI_SEQUENCE),
    0x0012 => Ok(DOSE_VALUE),
    0x0014 => Ok(TISSUE_HETEROGENEITY_CORRECTION),
    0x0040 => Ok(DVH_NORMALIZATION_POINT),
    0x0042 => Ok(DVH_NORMALIZATION_DOSE_VALUE),
    0x0050 => Ok(DVH_SEQUENCE),
    0x0052 => Ok(DVH_DOSE_SCALING),
    0x0054 => Ok(DVH_VOLUME_UNITS),
    0x0056 => Ok(DVH_NUMBER_OF_BINS),
    0x0058 => Ok(DVH_DATA),
    0x0060 => Ok(DVH_REFERENCED_ROI_SEQUENCE),
    0x0062 => Ok(DVH_ROI_CONTRIBUTION_TYPE),
    0x0070 => Ok(DVH_MINIMUM_DOSE),
    0x0072 => Ok(DVH_MAXIMUM_DOSE),
    0x0074 => Ok(DVH_MEAN_DOSE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x3006.
///
fn find_element_in_group_3006(element: u16) -> Result<Item, ()> {
  match element {
    0x0002 => Ok(STRUCTURE_SET_LABEL),
    0x0004 => Ok(STRUCTURE_SET_NAME),
    0x0006 => Ok(STRUCTURE_SET_DESCRIPTION),
    0x0008 => Ok(STRUCTURE_SET_DATE),
    0x0009 => Ok(STRUCTURE_SET_TIME),
    0x0010 => Ok(REFERENCED_FRAME_OF_REFERENCE_SEQUENCE),
    0x0012 => Ok(RT_REFERENCED_STUDY_SEQUENCE),
    0x0014 => Ok(RT_REFERENCED_SERIES_SEQUENCE),
    0x0016 => Ok(CONTOUR_IMAGE_SEQUENCE),
    0x0018 => Ok(PREDECESSOR_STRUCTURE_SET_SEQUENCE),
    0x0020 => Ok(STRUCTURE_SET_ROI_SEQUENCE),
    0x0022 => Ok(ROI_NUMBER),
    0x0024 => Ok(REFERENCED_FRAME_OF_REFERENCE_UID),
    0x0026 => Ok(ROI_NAME),
    0x0028 => Ok(ROI_DESCRIPTION),
    0x002A => Ok(ROI_DISPLAY_COLOR),
    0x002C => Ok(ROI_VOLUME),
    0x002D => Ok(ROI_DATE_TIME),
    0x002E => Ok(ROI_OBSERVATION_DATE_TIME),
    0x0030 => Ok(RT_RELATED_ROI_SEQUENCE),
    0x0033 => Ok(RTROI_RELATIONSHIP),
    0x0036 => Ok(ROI_GENERATION_ALGORITHM),
    0x0037 => Ok(ROI_DERIVATION_ALGORITHM_IDENTIFICATION_SEQUENCE),
    0x0038 => Ok(ROI_GENERATION_DESCRIPTION),
    0x0039 => Ok(ROI_CONTOUR_SEQUENCE),
    0x0040 => Ok(CONTOUR_SEQUENCE),
    0x0042 => Ok(CONTOUR_GEOMETRIC_TYPE),
    0x0044 => Ok(CONTOUR_SLAB_THICKNESS),
    0x0045 => Ok(CONTOUR_OFFSET_VECTOR),
    0x0046 => Ok(NUMBER_OF_CONTOUR_POINTS),
    0x0048 => Ok(CONTOUR_NUMBER),
    0x0049 => Ok(ATTACHED_CONTOURS),
    0x004A => Ok(SOURCE_PIXEL_PLANES_CHARACTERISTICS_SEQUENCE),
    0x004B => Ok(SOURCE_SERIES_SEQUENCE),
    0x004C => Ok(SOURCE_SERIES_INFORMATION_SEQUENCE),
    0x004D => Ok(ROI_CREATOR_SEQUENCE),
    0x004E => Ok(ROI_INTERPRETER_SEQUENCE),
    0x004F => Ok(ROI_OBSERVATION_CONTEXT_CODE_SEQUENCE),
    0x0050 => Ok(CONTOUR_DATA),
    0x0080 => Ok(RTROI_OBSERVATIONS_SEQUENCE),
    0x0082 => Ok(OBSERVATION_NUMBER),
    0x0084 => Ok(REFERENCED_ROI_NUMBER),
    0x0085 => Ok(ROI_OBSERVATION_LABEL),
    0x0086 => Ok(RTROI_IDENTIFICATION_CODE_SEQUENCE),
    0x0088 => Ok(ROI_OBSERVATION_DESCRIPTION),
    0x00A0 => Ok(RELATED_RTROI_OBSERVATIONS_SEQUENCE),
    0x00A4 => Ok(RTROI_INTERPRETED_TYPE),
    0x00A6 => Ok(ROI_INTERPRETER),
    0x00B0 => Ok(ROI_PHYSICAL_PROPERTIES_SEQUENCE),
    0x00B2 => Ok(ROI_PHYSICAL_PROPERTY),
    0x00B4 => Ok(ROI_PHYSICAL_PROPERTY_VALUE),
    0x00B6 => Ok(ROI_ELEMENTAL_COMPOSITION_SEQUENCE),
    0x00B7 => Ok(ROI_ELEMENTAL_COMPOSITION_ATOMIC_NUMBER),
    0x00B8 => Ok(ROI_ELEMENTAL_COMPOSITION_ATOMIC_MASS_FRACTION),
    0x00B9 => Ok(ADDITIONAL_RTROI_IDENTIFICATION_CODE_SEQUENCE),
    0x00C0 => Ok(FRAME_OF_REFERENCE_RELATIONSHIP_SEQUENCE),
    0x00C2 => Ok(RELATED_FRAME_OF_REFERENCE_UID),
    0x00C4 => Ok(FRAME_OF_REFERENCE_TRANSFORMATION_TYPE),
    0x00C6 => Ok(FRAME_OF_REFERENCE_TRANSFORMATION_MATRIX),
    0x00C8 => Ok(FRAME_OF_REFERENCE_TRANSFORMATION_COMMENT),
    0x00C9 => Ok(PATIENT_LOCATION_COORDINATES_SEQUENCE),
    0x00CA => Ok(PATIENT_LOCATION_COORDINATES_CODE_SEQUENCE),
    0x00CB => Ok(PATIENT_SUPPORT_POSITION_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x3008.
///
fn find_element_in_group_3008(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(MEASURED_DOSE_REFERENCE_SEQUENCE),
    0x0012 => Ok(MEASURED_DOSE_DESCRIPTION),
    0x0014 => Ok(MEASURED_DOSE_TYPE),
    0x0016 => Ok(MEASURED_DOSE_VALUE),
    0x0020 => Ok(TREATMENT_SESSION_BEAM_SEQUENCE),
    0x0021 => Ok(TREATMENT_SESSION_ION_BEAM_SEQUENCE),
    0x0022 => Ok(CURRENT_FRACTION_NUMBER),
    0x0024 => Ok(TREATMENT_CONTROL_POINT_DATE),
    0x0025 => Ok(TREATMENT_CONTROL_POINT_TIME),
    0x002A => Ok(TREATMENT_TERMINATION_STATUS),
    0x002B => Ok(TREATMENT_TERMINATION_CODE),
    0x002C => Ok(TREATMENT_VERIFICATION_STATUS),
    0x0030 => Ok(REFERENCED_TREATMENT_RECORD_SEQUENCE),
    0x0032 => Ok(SPECIFIED_PRIMARY_METERSET),
    0x0033 => Ok(SPECIFIED_SECONDARY_METERSET),
    0x0036 => Ok(DELIVERED_PRIMARY_METERSET),
    0x0037 => Ok(DELIVERED_SECONDARY_METERSET),
    0x003A => Ok(SPECIFIED_TREATMENT_TIME),
    0x003B => Ok(DELIVERED_TREATMENT_TIME),
    0x0040 => Ok(CONTROL_POINT_DELIVERY_SEQUENCE),
    0x0041 => Ok(ION_CONTROL_POINT_DELIVERY_SEQUENCE),
    0x0042 => Ok(SPECIFIED_METERSET),
    0x0044 => Ok(DELIVERED_METERSET),
    0x0045 => Ok(METERSET_RATE_SET),
    0x0046 => Ok(METERSET_RATE_DELIVERED),
    0x0047 => Ok(SCAN_SPOT_METERSETS_DELIVERED),
    0x0048 => Ok(DOSE_RATE_DELIVERED),
    0x0050 => Ok(TREATMENT_SUMMARY_CALCULATED_DOSE_REFERENCE_SEQUENCE),
    0x0052 => Ok(CUMULATIVE_DOSE_TO_DOSE_REFERENCE),
    0x0054 => Ok(FIRST_TREATMENT_DATE),
    0x0056 => Ok(MOST_RECENT_TREATMENT_DATE),
    0x005A => Ok(NUMBER_OF_FRACTIONS_DELIVERED),
    0x0060 => Ok(OVERRIDE_SEQUENCE),
    0x0061 => Ok(PARAMETER_SEQUENCE_POINTER),
    0x0062 => Ok(OVERRIDE_PARAMETER_POINTER),
    0x0063 => Ok(PARAMETER_ITEM_INDEX),
    0x0064 => Ok(MEASURED_DOSE_REFERENCE_NUMBER),
    0x0065 => Ok(PARAMETER_POINTER),
    0x0066 => Ok(OVERRIDE_REASON),
    0x0067 => Ok(PARAMETER_VALUE_NUMBER),
    0x0068 => Ok(CORRECTED_PARAMETER_SEQUENCE),
    0x006A => Ok(CORRECTION_VALUE),
    0x0070 => Ok(CALCULATED_DOSE_REFERENCE_SEQUENCE),
    0x0072 => Ok(CALCULATED_DOSE_REFERENCE_NUMBER),
    0x0074 => Ok(CALCULATED_DOSE_REFERENCE_DESCRIPTION),
    0x0076 => Ok(CALCULATED_DOSE_REFERENCE_DOSE_VALUE),
    0x0078 => Ok(START_METERSET),
    0x007A => Ok(END_METERSET),
    0x0080 => Ok(REFERENCED_MEASURED_DOSE_REFERENCE_SEQUENCE),
    0x0082 => Ok(REFERENCED_MEASURED_DOSE_REFERENCE_NUMBER),
    0x0090 => Ok(REFERENCED_CALCULATED_DOSE_REFERENCE_SEQUENCE),
    0x0092 => Ok(REFERENCED_CALCULATED_DOSE_REFERENCE_NUMBER),
    0x00A0 => Ok(BEAM_LIMITING_DEVICE_LEAF_PAIRS_SEQUENCE),
    0x00A1 => Ok(ENHANCED_RT_BEAM_LIMITING_DEVICE_SEQUENCE),
    0x00A2 => Ok(ENHANCED_RT_BEAM_LIMITING_OPENING_SEQUENCE),
    0x00A3 => Ok(ENHANCED_RT_BEAM_LIMITING_DEVICE_DEFINITION_FLAG),
    0x00A4 => Ok(PARALLEL_RT_BEAM_DELIMITER_OPENING_EXTENTS),
    0x00B0 => Ok(RECORDED_WEDGE_SEQUENCE),
    0x00C0 => Ok(RECORDED_COMPENSATOR_SEQUENCE),
    0x00D0 => Ok(RECORDED_BLOCK_SEQUENCE),
    0x00D1 => Ok(RECORDED_BLOCK_SLAB_SEQUENCE),
    0x00E0 => Ok(TREATMENT_SUMMARY_MEASURED_DOSE_REFERENCE_SEQUENCE),
    0x00F0 => Ok(RECORDED_SNOUT_SEQUENCE),
    0x00F2 => Ok(RECORDED_RANGE_SHIFTER_SEQUENCE),
    0x00F4 => Ok(RECORDED_LATERAL_SPREADING_DEVICE_SEQUENCE),
    0x00F6 => Ok(RECORDED_RANGE_MODULATOR_SEQUENCE),
    0x0100 => Ok(RECORDED_SOURCE_SEQUENCE),
    0x0105 => Ok(SOURCE_SERIAL_NUMBER),
    0x0110 => Ok(TREATMENT_SESSION_APPLICATION_SETUP_SEQUENCE),
    0x0116 => Ok(APPLICATION_SETUP_CHECK),
    0x0120 => Ok(RECORDED_BRACHY_ACCESSORY_DEVICE_SEQUENCE),
    0x0122 => Ok(REFERENCED_BRACHY_ACCESSORY_DEVICE_NUMBER),
    0x0130 => Ok(RECORDED_CHANNEL_SEQUENCE),
    0x0132 => Ok(SPECIFIED_CHANNEL_TOTAL_TIME),
    0x0134 => Ok(DELIVERED_CHANNEL_TOTAL_TIME),
    0x0136 => Ok(SPECIFIED_NUMBER_OF_PULSES),
    0x0138 => Ok(DELIVERED_NUMBER_OF_PULSES),
    0x013A => Ok(SPECIFIED_PULSE_REPETITION_INTERVAL),
    0x013C => Ok(DELIVERED_PULSE_REPETITION_INTERVAL),
    0x0140 => Ok(RECORDED_SOURCE_APPLICATOR_SEQUENCE),
    0x0142 => Ok(REFERENCED_SOURCE_APPLICATOR_NUMBER),
    0x0150 => Ok(RECORDED_CHANNEL_SHIELD_SEQUENCE),
    0x0152 => Ok(REFERENCED_CHANNEL_SHIELD_NUMBER),
    0x0160 => Ok(BRACHY_CONTROL_POINT_DELIVERED_SEQUENCE),
    0x0162 => Ok(SAFE_POSITION_EXIT_DATE),
    0x0164 => Ok(SAFE_POSITION_EXIT_TIME),
    0x0166 => Ok(SAFE_POSITION_RETURN_DATE),
    0x0168 => Ok(SAFE_POSITION_RETURN_TIME),
    0x0171 => Ok(PULSE_SPECIFIC_BRACHY_CONTROL_POINT_DELIVERED_SEQUENCE),
    0x0172 => Ok(PULSE_NUMBER),
    0x0173 => Ok(BRACHY_PULSE_CONTROL_POINT_DELIVERED_SEQUENCE),
    0x0200 => Ok(CURRENT_TREATMENT_STATUS),
    0x0202 => Ok(TREATMENT_STATUS_COMMENT),
    0x0220 => Ok(FRACTION_GROUP_SUMMARY_SEQUENCE),
    0x0223 => Ok(REFERENCED_FRACTION_NUMBER),
    0x0224 => Ok(FRACTION_GROUP_TYPE),
    0x0230 => Ok(BEAM_STOPPER_POSITION),
    0x0240 => Ok(FRACTION_STATUS_SUMMARY_SEQUENCE),
    0x0250 => Ok(TREATMENT_DATE),
    0x0251 => Ok(TREATMENT_TIME),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x300A.
///
fn find_element_in_group_300a(element: u16) -> Result<Item, ()> {
  match element {
    0x0002 => Ok(RT_PLAN_LABEL),
    0x0003 => Ok(RT_PLAN_NAME),
    0x0004 => Ok(RT_PLAN_DESCRIPTION),
    0x0006 => Ok(RT_PLAN_DATE),
    0x0007 => Ok(RT_PLAN_TIME),
    0x0009 => Ok(TREATMENT_PROTOCOLS),
    0x000A => Ok(PLAN_INTENT),
    0x000B => Ok(TREATMENT_SITES),
    0x000C => Ok(RT_PLAN_GEOMETRY),
    0x000E => Ok(PRESCRIPTION_DESCRIPTION),
    0x0010 => Ok(DOSE_REFERENCE_SEQUENCE),
    0x0012 => Ok(DOSE_REFERENCE_NUMBER),
    0x0013 => Ok(DOSE_REFERENCE_UID),
    0x0014 => Ok(DOSE_REFERENCE_STRUCTURE_TYPE),
    0x0015 => Ok(NOMINAL_BEAM_ENERGY_UNIT),
    0x0016 => Ok(DOSE_REFERENCE_DESCRIPTION),
    0x0018 => Ok(DOSE_REFERENCE_POINT_COORDINATES),
    0x001A => Ok(NOMINAL_PRIOR_DOSE),
    0x0020 => Ok(DOSE_REFERENCE_TYPE),
    0x0021 => Ok(CONSTRAINT_WEIGHT),
    0x0022 => Ok(DELIVERY_WARNING_DOSE),
    0x0023 => Ok(DELIVERY_MAXIMUM_DOSE),
    0x0025 => Ok(TARGET_MINIMUM_DOSE),
    0x0026 => Ok(TARGET_PRESCRIPTION_DOSE),
    0x0027 => Ok(TARGET_MAXIMUM_DOSE),
    0x0028 => Ok(TARGET_UNDERDOSE_VOLUME_FRACTION),
    0x002A => Ok(ORGAN_AT_RISK_FULL_VOLUME_DOSE),
    0x002B => Ok(ORGAN_AT_RISK_LIMIT_DOSE),
    0x002C => Ok(ORGAN_AT_RISK_MAXIMUM_DOSE),
    0x002D => Ok(ORGAN_AT_RISK_OVERDOSE_VOLUME_FRACTION),
    0x0040 => Ok(TOLERANCE_TABLE_SEQUENCE),
    0x0042 => Ok(TOLERANCE_TABLE_NUMBER),
    0x0043 => Ok(TOLERANCE_TABLE_LABEL),
    0x0044 => Ok(GANTRY_ANGLE_TOLERANCE),
    0x0046 => Ok(BEAM_LIMITING_DEVICE_ANGLE_TOLERANCE),
    0x0048 => Ok(BEAM_LIMITING_DEVICE_TOLERANCE_SEQUENCE),
    0x004A => Ok(BEAM_LIMITING_DEVICE_POSITION_TOLERANCE),
    0x004B => Ok(SNOUT_POSITION_TOLERANCE),
    0x004C => Ok(PATIENT_SUPPORT_ANGLE_TOLERANCE),
    0x004E => Ok(TABLE_TOP_ECCENTRIC_ANGLE_TOLERANCE),
    0x004F => Ok(TABLE_TOP_PITCH_ANGLE_TOLERANCE),
    0x0050 => Ok(TABLE_TOP_ROLL_ANGLE_TOLERANCE),
    0x0051 => Ok(TABLE_TOP_VERTICAL_POSITION_TOLERANCE),
    0x0052 => Ok(TABLE_TOP_LONGITUDINAL_POSITION_TOLERANCE),
    0x0053 => Ok(TABLE_TOP_LATERAL_POSITION_TOLERANCE),
    0x0055 => Ok(RT_PLAN_RELATIONSHIP),
    0x0070 => Ok(FRACTION_GROUP_SEQUENCE),
    0x0071 => Ok(FRACTION_GROUP_NUMBER),
    0x0072 => Ok(FRACTION_GROUP_DESCRIPTION),
    0x0078 => Ok(NUMBER_OF_FRACTIONS_PLANNED),
    0x0079 => Ok(NUMBER_OF_FRACTION_PATTERN_DIGITS_PER_DAY),
    0x007A => Ok(REPEAT_FRACTION_CYCLE_LENGTH),
    0x007B => Ok(FRACTION_PATTERN),
    0x0080 => Ok(NUMBER_OF_BEAMS),
    0x0082 => Ok(BEAM_DOSE_SPECIFICATION_POINT),
    0x0083 => Ok(REFERENCED_DOSE_REFERENCE_UID),
    0x0084 => Ok(BEAM_DOSE),
    0x0086 => Ok(BEAM_METERSET),
    0x0088 => Ok(BEAM_DOSE_POINT_DEPTH),
    0x0089 => Ok(BEAM_DOSE_POINT_EQUIVALENT_DEPTH),
    0x008A => Ok(BEAM_DOSE_POINT_SSD),
    0x008B => Ok(BEAM_DOSE_MEANING),
    0x008C => Ok(BEAM_DOSE_VERIFICATION_CONTROL_POINT_SEQUENCE),
    0x008D => Ok(AVERAGE_BEAM_DOSE_POINT_DEPTH),
    0x008E => Ok(AVERAGE_BEAM_DOSE_POINT_EQUIVALENT_DEPTH),
    0x008F => Ok(AVERAGE_BEAM_DOSE_POINT_SSD),
    0x0090 => Ok(BEAM_DOSE_TYPE),
    0x0091 => Ok(ALTERNATE_BEAM_DOSE),
    0x0092 => Ok(ALTERNATE_BEAM_DOSE_TYPE),
    0x0093 => Ok(DEPTH_VALUE_AVERAGING_FLAG),
    0x0094 => Ok(BEAM_DOSE_POINT_SOURCE_TO_EXTERNAL_CONTOUR_DISTANCE),
    0x00A0 => Ok(NUMBER_OF_BRACHY_APPLICATION_SETUPS),
    0x00A2 => Ok(BRACHY_APPLICATION_SETUP_DOSE_SPECIFICATION_POINT),
    0x00A4 => Ok(BRACHY_APPLICATION_SETUP_DOSE),
    0x00B0 => Ok(BEAM_SEQUENCE),
    0x00B2 => Ok(TREATMENT_MACHINE_NAME),
    0x00B3 => Ok(PRIMARY_DOSIMETER_UNIT),
    0x00B4 => Ok(SOURCE_AXIS_DISTANCE),
    0x00B6 => Ok(BEAM_LIMITING_DEVICE_SEQUENCE),
    0x00B8 => Ok(RT_BEAM_LIMITING_DEVICE_TYPE),
    0x00BA => Ok(SOURCE_TO_BEAM_LIMITING_DEVICE_DISTANCE),
    0x00BB => Ok(ISOCENTER_TO_BEAM_LIMITING_DEVICE_DISTANCE),
    0x00BC => Ok(NUMBER_OF_LEAF_JAW_PAIRS),
    0x00BE => Ok(LEAF_POSITION_BOUNDARIES),
    0x00C0 => Ok(BEAM_NUMBER),
    0x00C2 => Ok(BEAM_NAME),
    0x00C3 => Ok(BEAM_DESCRIPTION),
    0x00C4 => Ok(BEAM_TYPE),
    0x00C5 => Ok(BEAM_DELIVERY_DURATION_LIMIT),
    0x00C6 => Ok(RADIATION_TYPE),
    0x00C7 => Ok(HIGH_DOSE_TECHNIQUE_TYPE),
    0x00C8 => Ok(REFERENCE_IMAGE_NUMBER),
    0x00CA => Ok(PLANNED_VERIFICATION_IMAGE_SEQUENCE),
    0x00CC => Ok(IMAGING_DEVICE_SPECIFIC_ACQUISITION_PARAMETERS),
    0x00CE => Ok(TREATMENT_DELIVERY_TYPE),
    0x00D0 => Ok(NUMBER_OF_WEDGES),
    0x00D1 => Ok(WEDGE_SEQUENCE),
    0x00D2 => Ok(WEDGE_NUMBER),
    0x00D3 => Ok(WEDGE_TYPE),
    0x00D4 => Ok(WEDGE_ID),
    0x00D5 => Ok(WEDGE_ANGLE),
    0x00D6 => Ok(WEDGE_FACTOR),
    0x00D7 => Ok(TOTAL_WEDGE_TRAY_WATER_EQUIVALENT_THICKNESS),
    0x00D8 => Ok(WEDGE_ORIENTATION),
    0x00D9 => Ok(ISOCENTER_TO_WEDGE_TRAY_DISTANCE),
    0x00DA => Ok(SOURCE_TO_WEDGE_TRAY_DISTANCE),
    0x00DB => Ok(WEDGE_THIN_EDGE_POSITION),
    0x00DC => Ok(BOLUS_ID),
    0x00DD => Ok(BOLUS_DESCRIPTION),
    0x00DE => Ok(EFFECTIVE_WEDGE_ANGLE),
    0x00E0 => Ok(NUMBER_OF_COMPENSATORS),
    0x00E1 => Ok(MATERIAL_ID),
    0x00E2 => Ok(TOTAL_COMPENSATOR_TRAY_FACTOR),
    0x00E3 => Ok(COMPENSATOR_SEQUENCE),
    0x00E4 => Ok(COMPENSATOR_NUMBER),
    0x00E5 => Ok(COMPENSATOR_ID),
    0x00E6 => Ok(SOURCE_TO_COMPENSATOR_TRAY_DISTANCE),
    0x00E7 => Ok(COMPENSATOR_ROWS),
    0x00E8 => Ok(COMPENSATOR_COLUMNS),
    0x00E9 => Ok(COMPENSATOR_PIXEL_SPACING),
    0x00EA => Ok(COMPENSATOR_POSITION),
    0x00EB => Ok(COMPENSATOR_TRANSMISSION_DATA),
    0x00EC => Ok(COMPENSATOR_THICKNESS_DATA),
    0x00ED => Ok(NUMBER_OF_BOLI),
    0x00EE => Ok(COMPENSATOR_TYPE),
    0x00EF => Ok(COMPENSATOR_TRAY_ID),
    0x00F0 => Ok(NUMBER_OF_BLOCKS),
    0x00F2 => Ok(TOTAL_BLOCK_TRAY_FACTOR),
    0x00F3 => Ok(TOTAL_BLOCK_TRAY_WATER_EQUIVALENT_THICKNESS),
    0x00F4 => Ok(BLOCK_SEQUENCE),
    0x00F5 => Ok(BLOCK_TRAY_ID),
    0x00F6 => Ok(SOURCE_TO_BLOCK_TRAY_DISTANCE),
    0x00F7 => Ok(ISOCENTER_TO_BLOCK_TRAY_DISTANCE),
    0x00F8 => Ok(BLOCK_TYPE),
    0x00F9 => Ok(ACCESSORY_CODE),
    0x00FA => Ok(BLOCK_DIVERGENCE),
    0x00FB => Ok(BLOCK_MOUNTING_POSITION),
    0x00FC => Ok(BLOCK_NUMBER),
    0x00FE => Ok(BLOCK_NAME),
    0x0100 => Ok(BLOCK_THICKNESS),
    0x0102 => Ok(BLOCK_TRANSMISSION),
    0x0104 => Ok(BLOCK_NUMBER_OF_POINTS),
    0x0106 => Ok(BLOCK_DATA),
    0x0107 => Ok(APPLICATOR_SEQUENCE),
    0x0108 => Ok(APPLICATOR_ID),
    0x0109 => Ok(APPLICATOR_TYPE),
    0x010A => Ok(APPLICATOR_DESCRIPTION),
    0x010C => Ok(CUMULATIVE_DOSE_REFERENCE_COEFFICIENT),
    0x010E => Ok(FINAL_CUMULATIVE_METERSET_WEIGHT),
    0x0110 => Ok(NUMBER_OF_CONTROL_POINTS),
    0x0111 => Ok(CONTROL_POINT_SEQUENCE),
    0x0112 => Ok(CONTROL_POINT_INDEX),
    0x0114 => Ok(NOMINAL_BEAM_ENERGY),
    0x0115 => Ok(DOSE_RATE_SET),
    0x0116 => Ok(WEDGE_POSITION_SEQUENCE),
    0x0118 => Ok(WEDGE_POSITION),
    0x011A => Ok(BEAM_LIMITING_DEVICE_POSITION_SEQUENCE),
    0x011C => Ok(LEAF_JAW_POSITIONS),
    0x011E => Ok(GANTRY_ANGLE),
    0x011F => Ok(GANTRY_ROTATION_DIRECTION),
    0x0120 => Ok(BEAM_LIMITING_DEVICE_ANGLE),
    0x0121 => Ok(BEAM_LIMITING_DEVICE_ROTATION_DIRECTION),
    0x0122 => Ok(PATIENT_SUPPORT_ANGLE),
    0x0123 => Ok(PATIENT_SUPPORT_ROTATION_DIRECTION),
    0x0124 => Ok(TABLE_TOP_ECCENTRIC_AXIS_DISTANCE),
    0x0125 => Ok(TABLE_TOP_ECCENTRIC_ANGLE),
    0x0126 => Ok(TABLE_TOP_ECCENTRIC_ROTATION_DIRECTION),
    0x0128 => Ok(TABLE_TOP_VERTICAL_POSITION),
    0x0129 => Ok(TABLE_TOP_LONGITUDINAL_POSITION),
    0x012A => Ok(TABLE_TOP_LATERAL_POSITION),
    0x012C => Ok(ISOCENTER_POSITION),
    0x012E => Ok(SURFACE_ENTRY_POINT),
    0x0130 => Ok(SOURCE_TO_SURFACE_DISTANCE),
    0x0131 => Ok(AVERAGE_BEAM_DOSE_POINT_SOURCE_TO_EXTERNAL_CONTOUR_DISTANCE),
    0x0132 => Ok(SOURCE_TO_EXTERNAL_CONTOUR_DISTANCE),
    0x0133 => Ok(EXTERNAL_CONTOUR_ENTRY_POINT),
    0x0134 => Ok(CUMULATIVE_METERSET_WEIGHT),
    0x0140 => Ok(TABLE_TOP_PITCH_ANGLE),
    0x0142 => Ok(TABLE_TOP_PITCH_ROTATION_DIRECTION),
    0x0144 => Ok(TABLE_TOP_ROLL_ANGLE),
    0x0146 => Ok(TABLE_TOP_ROLL_ROTATION_DIRECTION),
    0x0148 => Ok(HEAD_FIXATION_ANGLE),
    0x014A => Ok(GANTRY_PITCH_ANGLE),
    0x014C => Ok(GANTRY_PITCH_ROTATION_DIRECTION),
    0x014E => Ok(GANTRY_PITCH_ANGLE_TOLERANCE),
    0x0150 => Ok(FIXATION_EYE),
    0x0151 => Ok(CHAIR_HEAD_FRAME_POSITION),
    0x0152 => Ok(HEAD_FIXATION_ANGLE_TOLERANCE),
    0x0153 => Ok(CHAIR_HEAD_FRAME_POSITION_TOLERANCE),
    0x0154 => Ok(FIXATION_LIGHT_AZIMUTHAL_ANGLE_TOLERANCE),
    0x0155 => Ok(FIXATION_LIGHT_POLAR_ANGLE_TOLERANCE),
    0x0180 => Ok(PATIENT_SETUP_SEQUENCE),
    0x0182 => Ok(PATIENT_SETUP_NUMBER),
    0x0183 => Ok(PATIENT_SETUP_LABEL),
    0x0184 => Ok(PATIENT_ADDITIONAL_POSITION),
    0x0190 => Ok(FIXATION_DEVICE_SEQUENCE),
    0x0192 => Ok(FIXATION_DEVICE_TYPE),
    0x0194 => Ok(FIXATION_DEVICE_LABEL),
    0x0196 => Ok(FIXATION_DEVICE_DESCRIPTION),
    0x0198 => Ok(FIXATION_DEVICE_POSITION),
    0x0199 => Ok(FIXATION_DEVICE_PITCH_ANGLE),
    0x019A => Ok(FIXATION_DEVICE_ROLL_ANGLE),
    0x01A0 => Ok(SHIELDING_DEVICE_SEQUENCE),
    0x01A2 => Ok(SHIELDING_DEVICE_TYPE),
    0x01A4 => Ok(SHIELDING_DEVICE_LABEL),
    0x01A6 => Ok(SHIELDING_DEVICE_DESCRIPTION),
    0x01A8 => Ok(SHIELDING_DEVICE_POSITION),
    0x01B0 => Ok(SETUP_TECHNIQUE),
    0x01B2 => Ok(SETUP_TECHNIQUE_DESCRIPTION),
    0x01B4 => Ok(SETUP_DEVICE_SEQUENCE),
    0x01B6 => Ok(SETUP_DEVICE_TYPE),
    0x01B8 => Ok(SETUP_DEVICE_LABEL),
    0x01BA => Ok(SETUP_DEVICE_DESCRIPTION),
    0x01BC => Ok(SETUP_DEVICE_PARAMETER),
    0x01D0 => Ok(SETUP_REFERENCE_DESCRIPTION),
    0x01D2 => Ok(TABLE_TOP_VERTICAL_SETUP_DISPLACEMENT),
    0x01D4 => Ok(TABLE_TOP_LONGITUDINAL_SETUP_DISPLACEMENT),
    0x01D6 => Ok(TABLE_TOP_LATERAL_SETUP_DISPLACEMENT),
    0x0200 => Ok(BRACHY_TREATMENT_TECHNIQUE),
    0x0202 => Ok(BRACHY_TREATMENT_TYPE),
    0x0206 => Ok(TREATMENT_MACHINE_SEQUENCE),
    0x0210 => Ok(SOURCE_SEQUENCE),
    0x0212 => Ok(SOURCE_NUMBER),
    0x0214 => Ok(SOURCE_TYPE),
    0x0216 => Ok(SOURCE_MANUFACTURER),
    0x0218 => Ok(ACTIVE_SOURCE_DIAMETER),
    0x021A => Ok(ACTIVE_SOURCE_LENGTH),
    0x021B => Ok(SOURCE_MODEL_ID),
    0x021C => Ok(SOURCE_DESCRIPTION),
    0x0222 => Ok(SOURCE_ENCAPSULATION_NOMINAL_THICKNESS),
    0x0224 => Ok(SOURCE_ENCAPSULATION_NOMINAL_TRANSMISSION),
    0x0226 => Ok(SOURCE_ISOTOPE_NAME),
    0x0228 => Ok(SOURCE_ISOTOPE_HALF_LIFE),
    0x0229 => Ok(SOURCE_STRENGTH_UNITS),
    0x022A => Ok(REFERENCE_AIR_KERMA_RATE),
    0x022B => Ok(SOURCE_STRENGTH),
    0x022C => Ok(SOURCE_STRENGTH_REFERENCE_DATE),
    0x022E => Ok(SOURCE_STRENGTH_REFERENCE_TIME),
    0x0230 => Ok(APPLICATION_SETUP_SEQUENCE),
    0x0232 => Ok(APPLICATION_SETUP_TYPE),
    0x0234 => Ok(APPLICATION_SETUP_NUMBER),
    0x0236 => Ok(APPLICATION_SETUP_NAME),
    0x0238 => Ok(APPLICATION_SETUP_MANUFACTURER),
    0x0240 => Ok(TEMPLATE_NUMBER),
    0x0242 => Ok(TEMPLATE_TYPE),
    0x0244 => Ok(TEMPLATE_NAME),
    0x0250 => Ok(TOTAL_REFERENCE_AIR_KERMA),
    0x0260 => Ok(BRACHY_ACCESSORY_DEVICE_SEQUENCE),
    0x0262 => Ok(BRACHY_ACCESSORY_DEVICE_NUMBER),
    0x0263 => Ok(BRACHY_ACCESSORY_DEVICE_ID),
    0x0264 => Ok(BRACHY_ACCESSORY_DEVICE_TYPE),
    0x0266 => Ok(BRACHY_ACCESSORY_DEVICE_NAME),
    0x026A => Ok(BRACHY_ACCESSORY_DEVICE_NOMINAL_THICKNESS),
    0x026C => Ok(BRACHY_ACCESSORY_DEVICE_NOMINAL_TRANSMISSION),
    0x0271 => Ok(CHANNEL_EFFECTIVE_LENGTH),
    0x0272 => Ok(CHANNEL_INNER_LENGTH),
    0x0273 => Ok(AFTERLOADER_CHANNEL_ID),
    0x0274 => Ok(SOURCE_APPLICATOR_TIP_LENGTH),
    0x0280 => Ok(CHANNEL_SEQUENCE),
    0x0282 => Ok(CHANNEL_NUMBER),
    0x0284 => Ok(CHANNEL_LENGTH),
    0x0286 => Ok(CHANNEL_TOTAL_TIME),
    0x0288 => Ok(SOURCE_MOVEMENT_TYPE),
    0x028A => Ok(NUMBER_OF_PULSES),
    0x028C => Ok(PULSE_REPETITION_INTERVAL),
    0x0290 => Ok(SOURCE_APPLICATOR_NUMBER),
    0x0291 => Ok(SOURCE_APPLICATOR_ID),
    0x0292 => Ok(SOURCE_APPLICATOR_TYPE),
    0x0294 => Ok(SOURCE_APPLICATOR_NAME),
    0x0296 => Ok(SOURCE_APPLICATOR_LENGTH),
    0x0298 => Ok(SOURCE_APPLICATOR_MANUFACTURER),
    0x029C => Ok(SOURCE_APPLICATOR_WALL_NOMINAL_THICKNESS),
    0x029E => Ok(SOURCE_APPLICATOR_WALL_NOMINAL_TRANSMISSION),
    0x02A0 => Ok(SOURCE_APPLICATOR_STEP_SIZE),
    0x02A1 => Ok(APPLICATOR_SHAPE_REFERENCED_ROI_NUMBER),
    0x02A2 => Ok(TRANSFER_TUBE_NUMBER),
    0x02A4 => Ok(TRANSFER_TUBE_LENGTH),
    0x02B0 => Ok(CHANNEL_SHIELD_SEQUENCE),
    0x02B2 => Ok(CHANNEL_SHIELD_NUMBER),
    0x02B3 => Ok(CHANNEL_SHIELD_ID),
    0x02B4 => Ok(CHANNEL_SHIELD_NAME),
    0x02B8 => Ok(CHANNEL_SHIELD_NOMINAL_THICKNESS),
    0x02BA => Ok(CHANNEL_SHIELD_NOMINAL_TRANSMISSION),
    0x02C8 => Ok(FINAL_CUMULATIVE_TIME_WEIGHT),
    0x02D0 => Ok(BRACHY_CONTROL_POINT_SEQUENCE),
    0x02D2 => Ok(CONTROL_POINT_RELATIVE_POSITION),
    0x02D4 => Ok(CONTROL_POINT_3D_POSITION),
    0x02D6 => Ok(CUMULATIVE_TIME_WEIGHT),
    0x02E0 => Ok(COMPENSATOR_DIVERGENCE),
    0x02E1 => Ok(COMPENSATOR_MOUNTING_POSITION),
    0x02E2 => Ok(SOURCE_TO_COMPENSATOR_DISTANCE),
    0x02E3 => Ok(TOTAL_COMPENSATOR_TRAY_WATER_EQUIVALENT_THICKNESS),
    0x02E4 => Ok(ISOCENTER_TO_COMPENSATOR_TRAY_DISTANCE),
    0x02E5 => Ok(COMPENSATOR_COLUMN_OFFSET),
    0x02E6 => Ok(ISOCENTER_TO_COMPENSATOR_DISTANCES),
    0x02E7 => Ok(COMPENSATOR_RELATIVE_STOPPING_POWER_RATIO),
    0x02E8 => Ok(COMPENSATOR_MILLING_TOOL_DIAMETER),
    0x02EA => Ok(ION_RANGE_COMPENSATOR_SEQUENCE),
    0x02EB => Ok(COMPENSATOR_DESCRIPTION),
    0x0302 => Ok(RADIATION_MASS_NUMBER),
    0x0304 => Ok(RADIATION_ATOMIC_NUMBER),
    0x0306 => Ok(RADIATION_CHARGE_STATE),
    0x0308 => Ok(SCAN_MODE),
    0x0309 => Ok(MODULATED_SCAN_MODE_TYPE),
    0x030A => Ok(VIRTUAL_SOURCE_AXIS_DISTANCES),
    0x030C => Ok(SNOUT_SEQUENCE),
    0x030D => Ok(SNOUT_POSITION),
    0x030F => Ok(SNOUT_ID),
    0x0312 => Ok(NUMBER_OF_RANGE_SHIFTERS),
    0x0314 => Ok(RANGE_SHIFTER_SEQUENCE),
    0x0316 => Ok(RANGE_SHIFTER_NUMBER),
    0x0318 => Ok(RANGE_SHIFTER_ID),
    0x0320 => Ok(RANGE_SHIFTER_TYPE),
    0x0322 => Ok(RANGE_SHIFTER_DESCRIPTION),
    0x0330 => Ok(NUMBER_OF_LATERAL_SPREADING_DEVICES),
    0x0332 => Ok(LATERAL_SPREADING_DEVICE_SEQUENCE),
    0x0334 => Ok(LATERAL_SPREADING_DEVICE_NUMBER),
    0x0336 => Ok(LATERAL_SPREADING_DEVICE_ID),
    0x0338 => Ok(LATERAL_SPREADING_DEVICE_TYPE),
    0x033A => Ok(LATERAL_SPREADING_DEVICE_DESCRIPTION),
    0x033C => Ok(LATERAL_SPREADING_DEVICE_WATER_EQUIVALENT_THICKNESS),
    0x0340 => Ok(NUMBER_OF_RANGE_MODULATORS),
    0x0342 => Ok(RANGE_MODULATOR_SEQUENCE),
    0x0344 => Ok(RANGE_MODULATOR_NUMBER),
    0x0346 => Ok(RANGE_MODULATOR_ID),
    0x0348 => Ok(RANGE_MODULATOR_TYPE),
    0x034A => Ok(RANGE_MODULATOR_DESCRIPTION),
    0x034C => Ok(BEAM_CURRENT_MODULATION_ID),
    0x0350 => Ok(PATIENT_SUPPORT_TYPE),
    0x0352 => Ok(PATIENT_SUPPORT_ID),
    0x0354 => Ok(PATIENT_SUPPORT_ACCESSORY_CODE),
    0x0355 => Ok(TRAY_ACCESSORY_CODE),
    0x0356 => Ok(FIXATION_LIGHT_AZIMUTHAL_ANGLE),
    0x0358 => Ok(FIXATION_LIGHT_POLAR_ANGLE),
    0x035A => Ok(METERSET_RATE),
    0x0360 => Ok(RANGE_SHIFTER_SETTINGS_SEQUENCE),
    0x0362 => Ok(RANGE_SHIFTER_SETTING),
    0x0364 => Ok(ISOCENTER_TO_RANGE_SHIFTER_DISTANCE),
    0x0366 => Ok(RANGE_SHIFTER_WATER_EQUIVALENT_THICKNESS),
    0x0370 => Ok(LATERAL_SPREADING_DEVICE_SETTINGS_SEQUENCE),
    0x0372 => Ok(LATERAL_SPREADING_DEVICE_SETTING),
    0x0374 => Ok(ISOCENTER_TO_LATERAL_SPREADING_DEVICE_DISTANCE),
    0x0380 => Ok(RANGE_MODULATOR_SETTINGS_SEQUENCE),
    0x0382 => Ok(RANGE_MODULATOR_GATING_START_VALUE),
    0x0384 => Ok(RANGE_MODULATOR_GATING_STOP_VALUE),
    0x0386 => Ok(RANGE_MODULATOR_GATING_START_WATER_EQUIVALENT_THICKNESS),
    0x0388 => Ok(RANGE_MODULATOR_GATING_STOP_WATER_EQUIVALENT_THICKNESS),
    0x038A => Ok(ISOCENTER_TO_RANGE_MODULATOR_DISTANCE),
    0x038F => Ok(SCAN_SPOT_TIME_OFFSET),
    0x0390 => Ok(SCAN_SPOT_TUNE_ID),
    0x0391 => Ok(SCAN_SPOT_PRESCRIBED_INDICES),
    0x0392 => Ok(NUMBER_OF_SCAN_SPOT_POSITIONS),
    0x0393 => Ok(SCAN_SPOT_REORDERED),
    0x0394 => Ok(SCAN_SPOT_POSITION_MAP),
    0x0395 => Ok(SCAN_SPOT_REORDERING_ALLOWED),
    0x0396 => Ok(SCAN_SPOT_METERSET_WEIGHTS),
    0x0398 => Ok(SCANNING_SPOT_SIZE),
    0x0399 => Ok(SCAN_SPOT_SIZES_DELIVERED),
    0x039A => Ok(NUMBER_OF_PAINTINGS),
    0x03A0 => Ok(ION_TOLERANCE_TABLE_SEQUENCE),
    0x03A2 => Ok(ION_BEAM_SEQUENCE),
    0x03A4 => Ok(ION_BEAM_LIMITING_DEVICE_SEQUENCE),
    0x03A6 => Ok(ION_BLOCK_SEQUENCE),
    0x03A8 => Ok(ION_CONTROL_POINT_SEQUENCE),
    0x03AA => Ok(ION_WEDGE_SEQUENCE),
    0x03AC => Ok(ION_WEDGE_POSITION_SEQUENCE),
    0x0401 => Ok(REFERENCED_SETUP_IMAGE_SEQUENCE),
    0x0402 => Ok(SETUP_IMAGE_COMMENT),
    0x0410 => Ok(MOTION_SYNCHRONIZATION_SEQUENCE),
    0x0412 => Ok(CONTROL_POINT_ORIENTATION),
    0x0420 => Ok(GENERAL_ACCESSORY_SEQUENCE),
    0x0421 => Ok(GENERAL_ACCESSORY_ID),
    0x0422 => Ok(GENERAL_ACCESSORY_DESCRIPTION),
    0x0423 => Ok(GENERAL_ACCESSORY_TYPE),
    0x0424 => Ok(GENERAL_ACCESSORY_NUMBER),
    0x0425 => Ok(SOURCE_TO_GENERAL_ACCESSORY_DISTANCE),
    0x0426 => Ok(ISOCENTER_TO_GENERAL_ACCESSORY_DISTANCE),
    0x0431 => Ok(APPLICATOR_GEOMETRY_SEQUENCE),
    0x0432 => Ok(APPLICATOR_APERTURE_SHAPE),
    0x0433 => Ok(APPLICATOR_OPENING),
    0x0434 => Ok(APPLICATOR_OPENING_X),
    0x0435 => Ok(APPLICATOR_OPENING_Y),
    0x0436 => Ok(SOURCE_TO_APPLICATOR_MOUNTING_POSITION_DISTANCE),
    0x0440 => Ok(NUMBER_OF_BLOCK_SLAB_ITEMS),
    0x0441 => Ok(BLOCK_SLAB_SEQUENCE),
    0x0442 => Ok(BLOCK_SLAB_THICKNESS),
    0x0443 => Ok(BLOCK_SLAB_NUMBER),
    0x0450 => Ok(DEVICE_MOTION_CONTROL_SEQUENCE),
    0x0451 => Ok(DEVICE_MOTION_EXECUTION_MODE),
    0x0452 => Ok(DEVICE_MOTION_OBSERVATION_MODE),
    0x0453 => Ok(DEVICE_MOTION_PARAMETER_CODE_SEQUENCE),
    0x0501 => Ok(DISTAL_DEPTH_FRACTION),
    0x0502 => Ok(DISTAL_DEPTH),
    0x0503 => Ok(NOMINAL_RANGE_MODULATION_FRACTIONS),
    0x0504 => Ok(NOMINAL_RANGE_MODULATED_REGION_DEPTHS),
    0x0505 => Ok(DEPTH_DOSE_PARAMETERS_SEQUENCE),
    0x0506 => Ok(DELIVERED_DEPTH_DOSE_PARAMETERS_SEQUENCE),
    0x0507 => Ok(DELIVERED_DISTAL_DEPTH_FRACTION),
    0x0508 => Ok(DELIVERED_DISTAL_DEPTH),
    0x0509 => Ok(DELIVERED_NOMINAL_RANGE_MODULATION_FRACTIONS),
    0x0510 => Ok(DELIVERED_NOMINAL_RANGE_MODULATED_REGION_DEPTHS),
    0x0511 => Ok(DELIVERED_REFERENCE_DOSE_DEFINITION),
    0x0512 => Ok(REFERENCE_DOSE_DEFINITION),
    0x0600 => Ok(RT_CONTROL_POINT_INDEX),
    0x0601 => Ok(RADIATION_GENERATION_MODE_INDEX),
    0x0602 => Ok(REFERENCED_DEFINED_DEVICE_INDEX),
    0x0603 => Ok(RADIATION_DOSE_IDENTIFICATION_INDEX),
    0x0604 => Ok(NUMBER_OF_RT_CONTROL_POINTS),
    0x0605 => Ok(REFERENCED_RADIATION_GENERATION_MODE_INDEX),
    0x0606 => Ok(TREATMENT_POSITION_INDEX),
    0x0607 => Ok(REFERENCED_DEVICE_INDEX),
    0x0608 => Ok(TREATMENT_POSITION_GROUP_LABEL),
    0x0609 => Ok(TREATMENT_POSITION_GROUP_UID),
    0x060A => Ok(TREATMENT_POSITION_GROUP_SEQUENCE),
    0x060B => Ok(REFERENCED_TREATMENT_POSITION_INDEX),
    0x060C => Ok(REFERENCED_RADIATION_DOSE_IDENTIFICATION_INDEX),
    0x060D => Ok(RT_ACCESSORY_HOLDER_WATER_EQUIVALENT_THICKNESS),
    0x060E => Ok(REFERENCED_RT_ACCESSORY_HOLDER_DEVICE_INDEX),
    0x060F => Ok(RT_ACCESSORY_HOLDER_SLOT_EXISTENCE_FLAG),
    0x0610 => Ok(RT_ACCESSORY_HOLDER_SLOT_SEQUENCE),
    0x0611 => Ok(RT_ACCESSORY_HOLDER_SLOT_ID),
    0x0612 => Ok(RT_ACCESSORY_HOLDER_SLOT_DISTANCE),
    0x0613 => Ok(RT_ACCESSORY_SLOT_DISTANCE),
    0x0614 => Ok(RT_ACCESSORY_HOLDER_DEFINITION_SEQUENCE),
    0x0615 => Ok(RT_ACCESSORY_DEVICE_SLOT_ID),
    0x0616 => Ok(RT_RADIATION_SEQUENCE),
    0x0617 => Ok(RADIATION_DOSE_SEQUENCE),
    0x0618 => Ok(RADIATION_DOSE_IDENTIFICATION_SEQUENCE),
    0x0619 => Ok(RADIATION_DOSE_IDENTIFICATION_LABEL),
    0x061A => Ok(REFERENCE_DOSE_TYPE),
    0x061B => Ok(PRIMARY_DOSE_VALUE_INDICATOR),
    0x061C => Ok(DOSE_VALUES_SEQUENCE),
    0x061D => Ok(DOSE_VALUE_PURPOSE),
    0x061E => Ok(REFERENCE_DOSE_POINT_COORDINATES),
    0x061F => Ok(RADIATION_DOSE_VALUES_PARAMETERS_SEQUENCE),
    0x0620 => Ok(METERSET_TO_DOSE_MAPPING_SEQUENCE),
    0x0621 => Ok(EXPECTED_IN_VIVO_MEASUREMENT_VALUES_SEQUENCE),
    0x0622 => Ok(EXPECTED_IN_VIVO_MEASUREMENT_VALUE_INDEX),
    0x0623 => Ok(RADIATION_DOSE_IN_VIVO_MEASUREMENT_LABEL),
    0x0624 => Ok(RADIATION_DOSE_CENTRAL_AXIS_DISPLACEMENT),
    0x0625 => Ok(RADIATION_DOSE_VALUE),
    0x0626 => Ok(RADIATION_DOSE_SOURCE_TO_SKIN_DISTANCE),
    0x0627 => Ok(RADIATION_DOSE_MEASUREMENT_POINT_COORDINATES),
    0x0628 => Ok(RADIATION_DOSE_SOURCE_TO_EXTERNAL_CONTOUR_DISTANCE),
    0x0629 => Ok(RT_TOLERANCE_SET_SEQUENCE),
    0x062A => Ok(RT_TOLERANCE_SET_LABEL),
    0x062B => Ok(ATTRIBUTE_TOLERANCE_VALUES_SEQUENCE),
    0x062C => Ok(TOLERANCE_VALUE),
    0x062D => Ok(PATIENT_SUPPORT_POSITION_TOLERANCE_SEQUENCE),
    0x062E => Ok(TREATMENT_TIME_LIMIT),
    0x062F => Ok(C_ARM_PHOTON_ELECTRON_CONTROL_POINT_SEQUENCE),
    0x0630 => Ok(REFERENCED_RT_RADIATION_SEQUENCE),
    0x0631 => Ok(REFERENCED_RT_INSTANCE_SEQUENCE),
    0x0632 => Ok(REFERENCED_RT_PATIENT_SETUP_SEQUENCE),
    0x0634 => Ok(SOURCE_TO_PATIENT_SURFACE_DISTANCE),
    0x0635 => Ok(TREATMENT_MACHINE_SPECIAL_MODE_CODE_SEQUENCE),
    0x0636 => Ok(INTENDED_NUMBER_OF_FRACTIONS),
    0x0637 => Ok(RT_RADIATION_SET_INTENT),
    0x0638 => Ok(RT_RADIATION_PHYSICAL_AND_GEOMETRIC_CONTENT_DETAIL_FLAG),
    0x0639 => Ok(RT_RECORD_FLAG),
    0x063A => Ok(TREATMENT_DEVICE_IDENTIFICATION_SEQUENCE),
    0x063B => Ok(REFERENCED_RT_PHYSICIAN_INTENT_SEQUENCE),
    0x063C => Ok(CUMULATIVE_METERSET),
    0x063D => Ok(DELIVERY_RATE),
    0x063E => Ok(DELIVERY_RATE_UNIT_SEQUENCE),
    0x063F => Ok(TREATMENT_POSITION_SEQUENCE),
    0x0640 => Ok(RADIATION_SOURCE_AXIS_DISTANCE),
    0x0641 => Ok(NUMBER_OF_RT_BEAM_LIMITING_DEVICES),
    0x0642 => Ok(RT_BEAM_LIMITING_DEVICE_PROXIMAL_DISTANCE),
    0x0643 => Ok(RT_BEAM_LIMITING_DEVICE_DISTAL_DISTANCE),
    0x0644 => {
      Ok(PARALLEL_RT_BEAM_DELIMITER_DEVICE_ORIENTATION_LABEL_CODE_SEQUENCE)
    }
    0x0645 => Ok(BEAM_MODIFIER_ORIENTATION_ANGLE),
    0x0646 => Ok(FIXED_RT_BEAM_DELIMITER_DEVICE_SEQUENCE),
    0x0647 => Ok(PARALLEL_RT_BEAM_DELIMITER_DEVICE_SEQUENCE),
    0x0648 => Ok(NUMBER_OF_PARALLEL_RT_BEAM_DELIMITERS),
    0x0649 => Ok(PARALLEL_RT_BEAM_DELIMITER_BOUNDARIES),
    0x064A => Ok(PARALLEL_RT_BEAM_DELIMITER_POSITIONS),
    0x064B => Ok(RT_BEAM_LIMITING_DEVICE_OFFSET),
    0x064C => Ok(RT_BEAM_DELIMITER_GEOMETRY_SEQUENCE),
    0x064D => Ok(RT_BEAM_LIMITING_DEVICE_DEFINITION_SEQUENCE),
    0x064E => Ok(PARALLEL_RT_BEAM_DELIMITER_OPENING_MODE),
    0x064F => Ok(PARALLEL_RT_BEAM_DELIMITER_LEAF_MOUNTING_SIDE),
    0x0650 => Ok(PATIENT_SETUP_UID),
    0x0651 => Ok(WEDGE_DEFINITION_SEQUENCE),
    0x0652 => Ok(RADIATION_BEAM_WEDGE_ANGLE),
    0x0653 => Ok(RADIATION_BEAM_WEDGE_THIN_EDGE_DISTANCE),
    0x0654 => Ok(RADIATION_BEAM_EFFECTIVE_WEDGE_ANGLE),
    0x0655 => Ok(NUMBER_OF_WEDGE_POSITIONS),
    0x0656 => Ok(RT_BEAM_LIMITING_DEVICE_OPENING_SEQUENCE),
    0x0657 => Ok(NUMBER_OF_RT_BEAM_LIMITING_DEVICE_OPENINGS),
    0x0658 => Ok(RADIATION_DOSIMETER_UNIT_SEQUENCE),
    0x0659 => Ok(RT_DEVICE_DISTANCE_REFERENCE_LOCATION_CODE_SEQUENCE),
    0x065A => Ok(RADIATION_DEVICE_CONFIGURATION_AND_COMMISSIONING_KEY_SEQUENCE),
    0x065B => Ok(PATIENT_SUPPORT_POSITION_PARAMETER_SEQUENCE),
    0x065C => Ok(PATIENT_SUPPORT_POSITION_SPECIFICATION_METHOD),
    0x065D => Ok(PATIENT_SUPPORT_POSITION_DEVICE_PARAMETER_SEQUENCE),
    0x065E => Ok(DEVICE_ORDER_INDEX),
    0x065F => Ok(PATIENT_SUPPORT_POSITION_PARAMETER_ORDER_INDEX),
    0x0660 => Ok(PATIENT_SUPPORT_POSITION_DEVICE_TOLERANCE_SEQUENCE),
    0x0661 => Ok(PATIENT_SUPPORT_POSITION_TOLERANCE_ORDER_INDEX),
    0x0662 => Ok(COMPENSATOR_DEFINITION_SEQUENCE),
    0x0663 => Ok(COMPENSATOR_MAP_ORIENTATION),
    0x0664 => Ok(COMPENSATOR_PROXIMAL_THICKNESS_MAP),
    0x0665 => Ok(COMPENSATOR_DISTAL_THICKNESS_MAP),
    0x0666 => Ok(COMPENSATOR_BASE_PLANE_OFFSET),
    0x0667 => Ok(COMPENSATOR_SHAPE_FABRICATION_CODE_SEQUENCE),
    0x0668 => Ok(COMPENSATOR_SHAPE_SEQUENCE),
    0x0669 => Ok(RADIATION_BEAM_COMPENSATOR_MILLING_TOOL_DIAMETER),
    0x066A => Ok(BLOCK_DEFINITION_SEQUENCE),
    0x066B => Ok(BLOCK_EDGE_DATA),
    0x066C => Ok(BLOCK_ORIENTATION),
    0x066D => Ok(RADIATION_BEAM_BLOCK_THICKNESS),
    0x066E => Ok(RADIATION_BEAM_BLOCK_SLAB_THICKNESS),
    0x066F => Ok(BLOCK_EDGE_DATA_SEQUENCE),
    0x0670 => Ok(NUMBER_OF_RT_ACCESSORY_HOLDERS),
    0x0671 => Ok(GENERAL_ACCESSORY_DEFINITION_SEQUENCE),
    0x0672 => Ok(NUMBER_OF_GENERAL_ACCESSORIES),
    0x0673 => Ok(BOLUS_DEFINITION_SEQUENCE),
    0x0674 => Ok(NUMBER_OF_BOLUSES),
    0x0675 => Ok(EQUIPMENT_FRAME_OF_REFERENCE_UID),
    0x0676 => Ok(EQUIPMENT_FRAME_OF_REFERENCE_DESCRIPTION),
    0x0677 => Ok(EQUIPMENT_REFERENCE_POINT_COORDINATES_SEQUENCE),
    0x0678 => Ok(EQUIPMENT_REFERENCE_POINT_CODE_SEQUENCE),
    0x0679 => Ok(RT_BEAM_LIMITING_DEVICE_ANGLE),
    0x067A => Ok(SOURCE_ROLL_ANGLE),
    0x067B => Ok(RADIATION_GENERATION_MODE_SEQUENCE),
    0x067C => Ok(RADIATION_GENERATION_MODE_LABEL),
    0x067D => Ok(RADIATION_GENERATION_MODE_DESCRIPTION),
    0x067E => Ok(RADIATION_GENERATION_MODE_MACHINE_CODE_SEQUENCE),
    0x067F => Ok(RADIATION_TYPE_CODE_SEQUENCE),
    0x0680 => Ok(NOMINAL_ENERGY),
    0x0681 => Ok(MINIMUM_NOMINAL_ENERGY),
    0x0682 => Ok(MAXIMUM_NOMINAL_ENERGY),
    0x0683 => Ok(RADIATION_FLUENCE_MODIFIER_CODE_SEQUENCE),
    0x0684 => Ok(ENERGY_UNIT_CODE_SEQUENCE),
    0x0685 => Ok(NUMBER_OF_RADIATION_GENERATION_MODES),
    0x0686 => Ok(PATIENT_SUPPORT_DEVICES_SEQUENCE),
    0x0687 => Ok(NUMBER_OF_PATIENT_SUPPORT_DEVICES),
    0x0688 => Ok(RT_BEAM_MODIFIER_DEFINITION_DISTANCE),
    0x0689 => Ok(BEAM_AREA_LIMIT_SEQUENCE),
    0x068A => Ok(REFERENCED_RT_PRESCRIPTION_SEQUENCE),
    0x068B => Ok(DOSE_VALUE_INTERPRETATION),
    0x0700 => Ok(TREATMENT_SESSION_UID),
    0x0701 => Ok(RT_RADIATION_USAGE),
    0x0702 => Ok(REFERENCED_RT_RADIATION_SET_SEQUENCE),
    0x0703 => Ok(REFERENCED_RT_RADIATION_RECORD_SEQUENCE),
    0x0704 => Ok(RT_RADIATION_SET_DELIVERY_NUMBER),
    0x0705 => Ok(CLINICAL_FRACTION_NUMBER),
    0x0706 => Ok(RT_TREATMENT_FRACTION_COMPLETION_STATUS),
    0x0707 => Ok(RT_RADIATION_SET_USAGE),
    0x0708 => Ok(TREATMENT_DELIVERY_CONTINUATION_FLAG),
    0x0709 => Ok(TREATMENT_RECORD_CONTENT_ORIGIN),
    0x0714 => Ok(RT_TREATMENT_TERMINATION_STATUS),
    0x0715 => Ok(RT_TREATMENT_TERMINATION_REASON_CODE_SEQUENCE),
    0x0716 => Ok(MACHINE_SPECIFIC_TREATMENT_TERMINATION_CODE_SEQUENCE),
    0x0722 => Ok(RT_RADIATION_SALVAGE_RECORD_CONTROL_POINT_SEQUENCE),
    0x0723 => Ok(STARTING_METERSET_VALUE_KNOWN_FLAG),
    0x0730 => Ok(TREATMENT_TERMINATION_DESCRIPTION),
    0x0731 => Ok(TREATMENT_TOLERANCE_VIOLATION_SEQUENCE),
    0x0732 => Ok(TREATMENT_TOLERANCE_VIOLATION_CATEGORY),
    0x0733 => Ok(TREATMENT_TOLERANCE_VIOLATION_ATTRIBUTE_SEQUENCE),
    0x0734 => Ok(TREATMENT_TOLERANCE_VIOLATION_DESCRIPTION),
    0x0735 => Ok(TREATMENT_TOLERANCE_VIOLATION_IDENTIFICATION),
    0x0736 => Ok(TREATMENT_TOLERANCE_VIOLATION_DATE_TIME),
    0x073A => Ok(RECORDED_RT_CONTROL_POINT_DATE_TIME),
    0x073B => Ok(REFERENCED_RADIATION_RT_CONTROL_POINT_INDEX),
    0x073E => Ok(ALTERNATE_VALUE_SEQUENCE),
    0x073F => Ok(CONFIRMATION_SEQUENCE),
    0x0740 => Ok(INTERLOCK_SEQUENCE),
    0x0741 => Ok(INTERLOCK_DATE_TIME),
    0x0742 => Ok(INTERLOCK_DESCRIPTION),
    0x0743 => Ok(INTERLOCK_ORIGINATING_DEVICE_SEQUENCE),
    0x0744 => Ok(INTERLOCK_CODE_SEQUENCE),
    0x0745 => Ok(INTERLOCK_RESOLUTION_CODE_SEQUENCE),
    0x0746 => Ok(INTERLOCK_RESOLUTION_USER_SEQUENCE),
    0x0760 => Ok(OVERRIDE_DATE_TIME),
    0x0761 => Ok(TREATMENT_TOLERANCE_VIOLATION_TYPE_CODE_SEQUENCE),
    0x0762 => Ok(TREATMENT_TOLERANCE_VIOLATION_CAUSE_CODE_SEQUENCE),
    0x0772 => Ok(MEASURED_METERSET_TO_DOSE_MAPPING_SEQUENCE),
    0x0773 => Ok(REFERENCED_EXPECTED_IN_VIVO_MEASUREMENT_VALUE_INDEX),
    0x0774 => Ok(DOSE_MEASUREMENT_DEVICE_CODE_SEQUENCE),
    0x0780 => Ok(ADDITIONAL_PARAMETER_RECORDING_INSTANCE_SEQUENCE),
    0x0783 => Ok(INTERLOCK_ORIGIN_DESCRIPTION),
    0x0784 => Ok(RT_PATIENT_POSITION_SCOPE_SEQUENCE),
    0x0785 => Ok(REFERENCED_TREATMENT_POSITION_GROUP_UID),
    0x0786 => Ok(RADIATION_ORDER_INDEX),
    0x0787 => Ok(OMITTED_RADIATION_SEQUENCE),
    0x0788 => Ok(REASON_FOR_OMISSION_CODE_SEQUENCE),
    0x0789 => Ok(RT_DELIVERY_START_PATIENT_POSITION_SEQUENCE),
    0x078A => Ok(RT_TREATMENT_PREPARATION_PATIENT_POSITION_SEQUENCE),
    0x078B => Ok(REFERENCED_RT_TREATMENT_PREPARATION_SEQUENCE),
    0x078C => Ok(REFERENCED_PATIENT_SETUP_PHOTO_SEQUENCE),
    0x078D => Ok(PATIENT_TREATMENT_PREPARATION_METHOD_CODE_SEQUENCE),
    0x078E => Ok(PATIENT_TREATMENT_PREPARATION_PROCEDURE_PARAMETER_DESCRIPTION),
    0x078F => Ok(PATIENT_TREATMENT_PREPARATION_DEVICE_SEQUENCE),
    0x0790 => Ok(PATIENT_TREATMENT_PREPARATION_PROCEDURE_SEQUENCE),
    0x0791 => Ok(PATIENT_TREATMENT_PREPARATION_PROCEDURE_CODE_SEQUENCE),
    0x0792 => Ok(PATIENT_TREATMENT_PREPARATION_METHOD_DESCRIPTION),
    0x0793 => Ok(PATIENT_TREATMENT_PREPARATION_PROCEDURE_PARAMETER_SEQUENCE),
    0x0794 => Ok(PATIENT_SETUP_PHOTO_DESCRIPTION),
    0x0795 => Ok(PATIENT_TREATMENT_PREPARATION_PROCEDURE_INDEX),
    0x0796 => Ok(REFERENCED_PATIENT_SETUP_PROCEDURE_INDEX),
    0x0797 => Ok(RT_RADIATION_TASK_SEQUENCE),
    0x0798 => Ok(RT_PATIENT_POSITION_DISPLACEMENT_SEQUENCE),
    0x0799 => Ok(RT_PATIENT_POSITION_SEQUENCE),
    0x079A => Ok(DISPLACEMENT_REFERENCE_LABEL),
    0x079B => Ok(DISPLACEMENT_MATRIX),
    0x079C => Ok(PATIENT_SUPPORT_DISPLACEMENT_SEQUENCE),
    0x079D => Ok(DISPLACEMENT_REFERENCE_LOCATION_CODE_SEQUENCE),
    0x079E => Ok(RT_RADIATION_SET_DELIVERY_USAGE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x300C.
///
fn find_element_in_group_300c(element: u16) -> Result<Item, ()> {
  match element {
    0x0002 => Ok(REFERENCED_RT_PLAN_SEQUENCE),
    0x0004 => Ok(REFERENCED_BEAM_SEQUENCE),
    0x0006 => Ok(REFERENCED_BEAM_NUMBER),
    0x0007 => Ok(REFERENCED_REFERENCE_IMAGE_NUMBER),
    0x0008 => Ok(START_CUMULATIVE_METERSET_WEIGHT),
    0x0009 => Ok(END_CUMULATIVE_METERSET_WEIGHT),
    0x000A => Ok(REFERENCED_BRACHY_APPLICATION_SETUP_SEQUENCE),
    0x000C => Ok(REFERENCED_BRACHY_APPLICATION_SETUP_NUMBER),
    0x000E => Ok(REFERENCED_SOURCE_NUMBER),
    0x0020 => Ok(REFERENCED_FRACTION_GROUP_SEQUENCE),
    0x0022 => Ok(REFERENCED_FRACTION_GROUP_NUMBER),
    0x0040 => Ok(REFERENCED_VERIFICATION_IMAGE_SEQUENCE),
    0x0042 => Ok(REFERENCED_REFERENCE_IMAGE_SEQUENCE),
    0x0050 => Ok(REFERENCED_DOSE_REFERENCE_SEQUENCE),
    0x0051 => Ok(REFERENCED_DOSE_REFERENCE_NUMBER),
    0x0055 => Ok(BRACHY_REFERENCED_DOSE_REFERENCE_SEQUENCE),
    0x0060 => Ok(REFERENCED_STRUCTURE_SET_SEQUENCE),
    0x006A => Ok(REFERENCED_PATIENT_SETUP_NUMBER),
    0x0080 => Ok(REFERENCED_DOSE_SEQUENCE),
    0x00A0 => Ok(REFERENCED_TOLERANCE_TABLE_NUMBER),
    0x00B0 => Ok(REFERENCED_BOLUS_SEQUENCE),
    0x00C0 => Ok(REFERENCED_WEDGE_NUMBER),
    0x00D0 => Ok(REFERENCED_COMPENSATOR_NUMBER),
    0x00E0 => Ok(REFERENCED_BLOCK_NUMBER),
    0x00F0 => Ok(REFERENCED_CONTROL_POINT_INDEX),
    0x00F2 => Ok(REFERENCED_CONTROL_POINT_SEQUENCE),
    0x00F4 => Ok(REFERENCED_START_CONTROL_POINT_INDEX),
    0x00F6 => Ok(REFERENCED_STOP_CONTROL_POINT_INDEX),
    0x0100 => Ok(REFERENCED_RANGE_SHIFTER_NUMBER),
    0x0102 => Ok(REFERENCED_LATERAL_SPREADING_DEVICE_NUMBER),
    0x0104 => Ok(REFERENCED_RANGE_MODULATOR_NUMBER),
    0x0111 => Ok(OMITTED_BEAM_TASK_SEQUENCE),
    0x0112 => Ok(REASON_FOR_OMISSION),
    0x0113 => Ok(REASON_FOR_OMISSION_DESCRIPTION),
    0x0114 => Ok(PRESCRIPTION_OVERVIEW_SEQUENCE),
    0x0115 => Ok(TOTAL_PRESCRIPTION_DOSE),
    0x0116 => Ok(PLAN_OVERVIEW_SEQUENCE),
    0x0117 => Ok(PLAN_OVERVIEW_INDEX),
    0x0118 => Ok(REFERENCED_PLAN_OVERVIEW_INDEX),
    0x0119 => Ok(NUMBER_OF_FRACTIONS_INCLUDED),
    0x0120 => Ok(DOSE_CALIBRATION_CONDITIONS_SEQUENCE),
    0x0121 => Ok(ABSORBED_DOSE_TO_METERSET_RATIO),
    0x0122 => Ok(DELINEATED_RADIATION_FIELD_SIZE),
    0x0123 => Ok(DOSE_CALIBRATION_CONDITIONS_VERIFIED_FLAG),
    0x0124 => Ok(CALIBRATION_REFERENCE_POINT_DEPTH),
    0x0125 => Ok(GATING_BEAM_HOLD_TRANSITION_SEQUENCE),
    0x0126 => Ok(BEAM_HOLD_TRANSITION),
    0x0127 => Ok(BEAM_HOLD_TRANSITION_DATE_TIME),
    0x0128 => Ok(BEAM_HOLD_ORIGINATING_DEVICE_SEQUENCE),
    0x0129 => Ok(BEAM_HOLD_TRANSITION_TRIGGER_SOURCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x300E.
///
fn find_element_in_group_300e(element: u16) -> Result<Item, ()> {
  match element {
    0x0002 => Ok(APPROVAL_STATUS),
    0x0004 => Ok(REVIEW_DATE),
    0x0005 => Ok(REVIEW_TIME),
    0x0008 => Ok(REVIEWER_NAME),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x3010.
///
fn find_element_in_group_3010(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(RADIOBIOLOGICAL_DOSE_EFFECT_SEQUENCE),
    0x0002 => Ok(RADIOBIOLOGICAL_DOSE_EFFECT_FLAG),
    0x0003 => Ok(EFFECTIVE_DOSE_CALCULATION_METHOD_CATEGORY_CODE_SEQUENCE),
    0x0004 => Ok(EFFECTIVE_DOSE_CALCULATION_METHOD_CODE_SEQUENCE),
    0x0005 => Ok(EFFECTIVE_DOSE_CALCULATION_METHOD_DESCRIPTION),
    0x0006 => Ok(CONCEPTUAL_VOLUME_UID),
    0x0007 => Ok(ORIGINATING_SOP_INSTANCE_REFERENCE_SEQUENCE),
    0x0008 => Ok(CONCEPTUAL_VOLUME_CONSTITUENT_SEQUENCE),
    0x0009 => Ok(EQUIVALENT_CONCEPTUAL_VOLUME_INSTANCE_REFERENCE_SEQUENCE),
    0x000A => Ok(EQUIVALENT_CONCEPTUAL_VOLUMES_SEQUENCE),
    0x000B => Ok(REFERENCED_CONCEPTUAL_VOLUME_UID),
    0x000C => Ok(CONCEPTUAL_VOLUME_COMBINATION_EXPRESSION),
    0x000D => Ok(CONCEPTUAL_VOLUME_CONSTITUENT_INDEX),
    0x000E => Ok(CONCEPTUAL_VOLUME_COMBINATION_FLAG),
    0x000F => Ok(CONCEPTUAL_VOLUME_COMBINATION_DESCRIPTION),
    0x0010 => Ok(CONCEPTUAL_VOLUME_SEGMENTATION_DEFINED_FLAG),
    0x0011 => Ok(CONCEPTUAL_VOLUME_SEGMENTATION_REFERENCE_SEQUENCE),
    0x0012 => Ok(CONCEPTUAL_VOLUME_CONSTITUENT_SEGMENTATION_REFERENCE_SEQUENCE),
    0x0013 => Ok(CONSTITUENT_CONCEPTUAL_VOLUME_UID),
    0x0014 => Ok(DERIVATION_CONCEPTUAL_VOLUME_SEQUENCE),
    0x0015 => Ok(SOURCE_CONCEPTUAL_VOLUME_UID),
    0x0016 => Ok(CONCEPTUAL_VOLUME_DERIVATION_ALGORITHM_SEQUENCE),
    0x0017 => Ok(CONCEPTUAL_VOLUME_DESCRIPTION),
    0x0018 => Ok(SOURCE_CONCEPTUAL_VOLUME_SEQUENCE),
    0x0019 => Ok(AUTHOR_IDENTIFICATION_SEQUENCE),
    0x001A => Ok(MANUFACTURER_MODEL_VERSION),
    0x001B => Ok(DEVICE_ALTERNATE_IDENTIFIER),
    0x001C => Ok(DEVICE_ALTERNATE_IDENTIFIER_TYPE),
    0x001D => Ok(DEVICE_ALTERNATE_IDENTIFIER_FORMAT),
    0x001E => Ok(SEGMENTATION_CREATION_TEMPLATE_LABEL),
    0x001F => Ok(SEGMENTATION_TEMPLATE_UID),
    0x0020 => Ok(REFERENCED_SEGMENT_REFERENCE_INDEX),
    0x0021 => Ok(SEGMENT_REFERENCE_SEQUENCE),
    0x0022 => Ok(SEGMENT_REFERENCE_INDEX),
    0x0023 => Ok(DIRECT_SEGMENT_REFERENCE_SEQUENCE),
    0x0024 => Ok(COMBINATION_SEGMENT_REFERENCE_SEQUENCE),
    0x0025 => Ok(CONCEPTUAL_VOLUME_SEQUENCE),
    0x0026 => Ok(SEGMENTED_RT_ACCESSORY_DEVICE_SEQUENCE),
    0x0027 => Ok(SEGMENT_CHARACTERISTICS_SEQUENCE),
    0x0028 => Ok(RELATED_SEGMENT_CHARACTERISTICS_SEQUENCE),
    0x0029 => Ok(SEGMENT_CHARACTERISTICS_PRECEDENCE),
    0x002A => Ok(RT_SEGMENT_ANNOTATION_SEQUENCE),
    0x002B => Ok(SEGMENT_ANNOTATION_CATEGORY_CODE_SEQUENCE),
    0x002C => Ok(SEGMENT_ANNOTATION_TYPE_CODE_SEQUENCE),
    0x002D => Ok(DEVICE_LABEL),
    0x002E => Ok(DEVICE_TYPE_CODE_SEQUENCE),
    0x002F => Ok(SEGMENT_ANNOTATION_TYPE_MODIFIER_CODE_SEQUENCE),
    0x0030 => Ok(PATIENT_EQUIPMENT_RELATIONSHIP_CODE_SEQUENCE),
    0x0031 => Ok(REFERENCED_FIDUCIALS_UID),
    0x0032 => Ok(PATIENT_TREATMENT_ORIENTATION_SEQUENCE),
    0x0033 => Ok(USER_CONTENT_LABEL),
    0x0034 => Ok(USER_CONTENT_LONG_LABEL),
    0x0035 => Ok(ENTITY_LABEL),
    0x0036 => Ok(ENTITY_NAME),
    0x0037 => Ok(ENTITY_DESCRIPTION),
    0x0038 => Ok(ENTITY_LONG_LABEL),
    0x0039 => Ok(DEVICE_INDEX),
    0x003A => Ok(RT_TREATMENT_PHASE_INDEX),
    0x003B => Ok(RT_TREATMENT_PHASE_UID),
    0x003C => Ok(RT_PRESCRIPTION_INDEX),
    0x003D => Ok(RT_SEGMENT_ANNOTATION_INDEX),
    0x003E => Ok(BASIS_RT_TREATMENT_PHASE_INDEX),
    0x003F => Ok(RELATED_RT_TREATMENT_PHASE_INDEX),
    0x0040 => Ok(REFERENCED_RT_TREATMENT_PHASE_INDEX),
    0x0041 => Ok(REFERENCED_RT_PRESCRIPTION_INDEX),
    0x0042 => Ok(REFERENCED_PARENT_RT_PRESCRIPTION_INDEX),
    0x0043 => Ok(MANUFACTURER_DEVICE_IDENTIFIER),
    0x0044 => Ok(INSTANCE_LEVEL_REFERENCED_PERFORMED_PROCEDURE_STEP_SEQUENCE),
    0x0045 => Ok(RT_TREATMENT_PHASE_INTENT_PRESENCE_FLAG),
    0x0046 => Ok(RADIOTHERAPY_TREATMENT_TYPE),
    0x0047 => Ok(TELETHERAPY_RADIATION_TYPE),
    0x0048 => Ok(BRACHYTHERAPY_SOURCE_TYPE),
    0x0049 => Ok(REFERENCED_RT_TREATMENT_PHASE_SEQUENCE),
    0x004A => Ok(REFERENCED_DIRECT_SEGMENT_INSTANCE_SEQUENCE),
    0x004B => Ok(INTENDED_RT_TREATMENT_PHASE_SEQUENCE),
    0x004C => Ok(INTENDED_PHASE_START_DATE),
    0x004D => Ok(INTENDED_PHASE_END_DATE),
    0x004E => Ok(RT_TREATMENT_PHASE_INTERVAL_SEQUENCE),
    0x004F => Ok(TEMPORAL_RELATIONSHIP_INTERVAL_ANCHOR),
    0x0050 => Ok(MINIMUM_NUMBER_OF_INTERVAL_DAYS),
    0x0051 => Ok(MAXIMUM_NUMBER_OF_INTERVAL_DAYS),
    0x0052 => Ok(PERTINENT_SOP_CLASSES_IN_STUDY),
    0x0053 => Ok(PERTINENT_SOP_CLASSES_IN_SERIES),
    0x0054 => Ok(RT_PRESCRIPTION_LABEL),
    0x0055 => Ok(RT_PHYSICIAN_INTENT_PREDECESSOR_SEQUENCE),
    0x0056 => Ok(RT_TREATMENT_APPROACH_LABEL),
    0x0057 => Ok(RT_PHYSICIAN_INTENT_SEQUENCE),
    0x0058 => Ok(RT_PHYSICIAN_INTENT_INDEX),
    0x0059 => Ok(RT_TREATMENT_INTENT_TYPE),
    0x005A => Ok(RT_PHYSICIAN_INTENT_NARRATIVE),
    0x005B => Ok(RT_PROTOCOL_CODE_SEQUENCE),
    0x005C => Ok(REASON_FOR_SUPERSEDING),
    0x005D => Ok(RT_DIAGNOSIS_CODE_SEQUENCE),
    0x005E => Ok(REFERENCED_RT_PHYSICIAN_INTENT_INDEX),
    0x005F => Ok(RT_PHYSICIAN_INTENT_INPUT_INSTANCE_SEQUENCE),
    0x0060 => Ok(RT_ANATOMIC_PRESCRIPTION_SEQUENCE),
    0x0061 => Ok(PRIOR_TREATMENT_DOSE_DESCRIPTION),
    0x0062 => Ok(PRIOR_TREATMENT_REFERENCE_SEQUENCE),
    0x0063 => Ok(DOSIMETRIC_OBJECTIVE_EVALUATION_SCOPE),
    0x0064 => Ok(THERAPEUTIC_ROLE_CATEGORY_CODE_SEQUENCE),
    0x0065 => Ok(THERAPEUTIC_ROLE_TYPE_CODE_SEQUENCE),
    0x0066 => Ok(CONCEPTUAL_VOLUME_OPTIMIZATION_PRECEDENCE),
    0x0067 => Ok(CONCEPTUAL_VOLUME_CATEGORY_CODE_SEQUENCE),
    0x0068 => Ok(CONCEPTUAL_VOLUME_BLOCKING_CONSTRAINT),
    0x0069 => Ok(CONCEPTUAL_VOLUME_TYPE_CODE_SEQUENCE),
    0x006A => Ok(CONCEPTUAL_VOLUME_TYPE_MODIFIER_CODE_SEQUENCE),
    0x006B => Ok(RT_PRESCRIPTION_SEQUENCE),
    0x006C => Ok(DOSIMETRIC_OBJECTIVE_SEQUENCE),
    0x006D => Ok(DOSIMETRIC_OBJECTIVE_TYPE_CODE_SEQUENCE),
    0x006E => Ok(DOSIMETRIC_OBJECTIVE_UID),
    0x006F => Ok(REFERENCED_DOSIMETRIC_OBJECTIVE_UID),
    0x0070 => Ok(DOSIMETRIC_OBJECTIVE_PARAMETER_SEQUENCE),
    0x0071 => Ok(REFERENCED_DOSIMETRIC_OBJECTIVES_SEQUENCE),
    0x0073 => Ok(ABSOLUTE_DOSIMETRIC_OBJECTIVE_FLAG),
    0x0074 => Ok(DOSIMETRIC_OBJECTIVE_WEIGHT),
    0x0075 => Ok(DOSIMETRIC_OBJECTIVE_PURPOSE),
    0x0076 => Ok(PLANNING_INPUT_INFORMATION_SEQUENCE),
    0x0077 => Ok(TREATMENT_SITE),
    0x0078 => Ok(TREATMENT_SITE_CODE_SEQUENCE),
    0x0079 => Ok(FRACTION_PATTERN_SEQUENCE),
    0x007A => Ok(TREATMENT_TECHNIQUE_NOTES),
    0x007B => Ok(PRESCRIPTION_NOTES),
    0x007C => Ok(NUMBER_OF_INTERVAL_FRACTIONS),
    0x007D => Ok(NUMBER_OF_FRACTIONS),
    0x007E => Ok(INTENDED_DELIVERY_DURATION),
    0x007F => Ok(FRACTIONATION_NOTES),
    0x0080 => Ok(RT_TREATMENT_TECHNIQUE_CODE_SEQUENCE),
    0x0081 => Ok(PRESCRIPTION_NOTES_SEQUENCE),
    0x0082 => Ok(FRACTION_BASED_RELATIONSHIP_SEQUENCE),
    0x0083 => Ok(FRACTION_BASED_RELATIONSHIP_INTERVAL_ANCHOR),
    0x0084 => Ok(MINIMUM_HOURS_BETWEEN_FRACTIONS),
    0x0085 => Ok(INTENDED_FRACTION_START_TIME),
    0x0086 => Ok(INTENDED_START_DAY_OF_WEEK),
    0x0087 => Ok(WEEKDAY_FRACTION_PATTERN_SEQUENCE),
    0x0088 => Ok(DELIVERY_TIME_STRUCTURE_CODE_SEQUENCE),
    0x0089 => Ok(TREATMENT_SITE_MODIFIER_CODE_SEQUENCE),
    0x0090 => Ok(ROBOTIC_BASE_LOCATION_INDICATOR),
    0x0091 => Ok(ROBOTIC_PATH_NODE_SET_CODE_SEQUENCE),
    0x0092 => Ok(ROBOTIC_NODE_IDENTIFIER),
    0x0093 => Ok(RT_TREATMENT_SOURCE_COORDINATES),
    0x0094 => Ok(RADIATION_SOURCE_COORDINATE_SYSTEM_YAW_ANGLE),
    0x0095 => Ok(RADIATION_SOURCE_COORDINATE_SYSTEM_ROLL_ANGLE),
    0x0096 => Ok(RADIATION_SOURCE_COORDINATE_SYSTEM_PITCH_ANGLE),
    0x0097 => Ok(ROBOTIC_PATH_CONTROL_POINT_SEQUENCE),
    0x0098 => Ok(TOMOTHERAPEUTIC_CONTROL_POINT_SEQUENCE),
    0x0099 => Ok(TOMOTHERAPEUTIC_LEAF_OPEN_DURATIONS),
    0x009A => Ok(TOMOTHERAPEUTIC_LEAF_INITIAL_CLOSED_DURATIONS),
    0x00A0 => Ok(CONCEPTUAL_VOLUME_IDENTIFICATION_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x4000.
///
fn find_element_in_group_4000(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(ARBITRARY),
    0x4000 => Ok(TEXT_COMMENTS),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x4008.
///
fn find_element_in_group_4008(element: u16) -> Result<Item, ()> {
  match element {
    0x0040 => Ok(RESULTS_ID),
    0x0042 => Ok(RESULTS_ID_ISSUER),
    0x0050 => Ok(REFERENCED_INTERPRETATION_SEQUENCE),
    0x00FF => Ok(REPORT_PRODUCTION_STATUS_TRIAL),
    0x0100 => Ok(INTERPRETATION_RECORDED_DATE),
    0x0101 => Ok(INTERPRETATION_RECORDED_TIME),
    0x0102 => Ok(INTERPRETATION_RECORDER),
    0x0103 => Ok(REFERENCE_TO_RECORDED_SOUND),
    0x0108 => Ok(INTERPRETATION_TRANSCRIPTION_DATE),
    0x0109 => Ok(INTERPRETATION_TRANSCRIPTION_TIME),
    0x010A => Ok(INTERPRETATION_TRANSCRIBER),
    0x010B => Ok(INTERPRETATION_TEXT),
    0x010C => Ok(INTERPRETATION_AUTHOR),
    0x0111 => Ok(INTERPRETATION_APPROVER_SEQUENCE),
    0x0112 => Ok(INTERPRETATION_APPROVAL_DATE),
    0x0113 => Ok(INTERPRETATION_APPROVAL_TIME),
    0x0114 => Ok(PHYSICIAN_APPROVING_INTERPRETATION),
    0x0115 => Ok(INTERPRETATION_DIAGNOSIS_DESCRIPTION),
    0x0117 => Ok(INTERPRETATION_DIAGNOSIS_CODE_SEQUENCE),
    0x0118 => Ok(RESULTS_DISTRIBUTION_LIST_SEQUENCE),
    0x0119 => Ok(DISTRIBUTION_NAME),
    0x011A => Ok(DISTRIBUTION_ADDRESS),
    0x0200 => Ok(INTERPRETATION_ID),
    0x0202 => Ok(INTERPRETATION_ID_ISSUER),
    0x0210 => Ok(INTERPRETATION_TYPE_ID),
    0x0212 => Ok(INTERPRETATION_STATUS_ID),
    0x0300 => Ok(IMPRESSIONS),
    0x4000 => Ok(RESULTS_COMMENTS),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x4010.
///
fn find_element_in_group_4010(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(LOW_ENERGY_DETECTORS),
    0x0002 => Ok(HIGH_ENERGY_DETECTORS),
    0x0004 => Ok(DETECTOR_GEOMETRY_SEQUENCE),
    0x1001 => Ok(THREAT_ROI_VOXEL_SEQUENCE),
    0x1004 => Ok(THREAT_ROI_BASE),
    0x1005 => Ok(THREAT_ROI_EXTENTS),
    0x1006 => Ok(THREAT_ROI_BITMAP),
    0x1007 => Ok(ROUTE_SEGMENT_ID),
    0x1008 => Ok(GANTRY_TYPE),
    0x1009 => Ok(OOI_OWNER_TYPE),
    0x100A => Ok(ROUTE_SEGMENT_SEQUENCE),
    0x1010 => Ok(POTENTIAL_THREAT_OBJECT_ID),
    0x1011 => Ok(THREAT_SEQUENCE),
    0x1012 => Ok(THREAT_CATEGORY),
    0x1013 => Ok(THREAT_CATEGORY_DESCRIPTION),
    0x1014 => Ok(ATD_ABILITY_ASSESSMENT),
    0x1015 => Ok(ATD_ASSESSMENT_FLAG),
    0x1016 => Ok(ATD_ASSESSMENT_PROBABILITY),
    0x1017 => Ok(MASS),
    0x1018 => Ok(DENSITY),
    0x1019 => Ok(Z_EFFECTIVE),
    0x101A => Ok(BOARDING_PASS_ID),
    0x101B => Ok(CENTER_OF_MASS),
    0x101C => Ok(CENTER_OF_PTO),
    0x101D => Ok(BOUNDING_POLYGON),
    0x101E => Ok(ROUTE_SEGMENT_START_LOCATION_ID),
    0x101F => Ok(ROUTE_SEGMENT_END_LOCATION_ID),
    0x1020 => Ok(ROUTE_SEGMENT_LOCATION_ID_TYPE),
    0x1021 => Ok(ABORT_REASON),
    0x1023 => Ok(VOLUME_OF_PTO),
    0x1024 => Ok(ABORT_FLAG),
    0x1025 => Ok(ROUTE_SEGMENT_START_TIME),
    0x1026 => Ok(ROUTE_SEGMENT_END_TIME),
    0x1027 => Ok(TDR_TYPE),
    0x1028 => Ok(INTERNATIONAL_ROUTE_SEGMENT),
    0x1029 => Ok(THREAT_DETECTION_ALGORITHM_AND_VERSION),
    0x102A => Ok(ASSIGNED_LOCATION),
    0x102B => Ok(ALARM_DECISION_TIME),
    0x1031 => Ok(ALARM_DECISION),
    0x1033 => Ok(NUMBER_OF_TOTAL_OBJECTS),
    0x1034 => Ok(NUMBER_OF_ALARM_OBJECTS),
    0x1037 => Ok(PTO_REPRESENTATION_SEQUENCE),
    0x1038 => Ok(ATD_ASSESSMENT_SEQUENCE),
    0x1039 => Ok(TIP_TYPE),
    0x103A => Ok(DICOS_VERSION),
    0x1041 => Ok(OOI_OWNER_CREATION_TIME),
    0x1042 => Ok(OOI_TYPE),
    0x1043 => Ok(OOI_SIZE),
    0x1044 => Ok(ACQUISITION_STATUS),
    0x1045 => Ok(BASIS_MATERIALS_CODE_SEQUENCE),
    0x1046 => Ok(PHANTOM_TYPE),
    0x1047 => Ok(OOI_OWNER_SEQUENCE),
    0x1048 => Ok(SCAN_TYPE),
    0x1051 => Ok(ITINERARY_ID),
    0x1052 => Ok(ITINERARY_ID_TYPE),
    0x1053 => Ok(ITINERARY_ID_ASSIGNING_AUTHORITY),
    0x1054 => Ok(ROUTE_ID),
    0x1055 => Ok(ROUTE_ID_ASSIGNING_AUTHORITY),
    0x1056 => Ok(INBOUND_ARRIVAL_TYPE),
    0x1058 => Ok(CARRIER_ID),
    0x1059 => Ok(CARRIER_ID_ASSIGNING_AUTHORITY),
    0x1060 => Ok(SOURCE_ORIENTATION),
    0x1061 => Ok(SOURCE_POSITION),
    0x1062 => Ok(BELT_HEIGHT),
    0x1064 => Ok(ALGORITHM_ROUTING_CODE_SEQUENCE),
    0x1067 => Ok(TRANSPORT_CLASSIFICATION),
    0x1068 => Ok(OOI_TYPE_DESCRIPTOR),
    0x1069 => Ok(TOTAL_PROCESSING_TIME),
    0x106C => Ok(DETECTOR_CALIBRATION_DATA),
    0x106D => Ok(ADDITIONAL_SCREENING_PERFORMED),
    0x106E => Ok(ADDITIONAL_INSPECTION_SELECTION_CRITERIA),
    0x106F => Ok(ADDITIONAL_INSPECTION_METHOD_SEQUENCE),
    0x1070 => Ok(AIT_DEVICE_TYPE),
    0x1071 => Ok(QR_MEASUREMENTS_SEQUENCE),
    0x1072 => Ok(TARGET_MATERIAL_SEQUENCE),
    0x1073 => Ok(SNR_THRESHOLD),
    0x1075 => Ok(IMAGE_SCALE_REPRESENTATION),
    0x1076 => Ok(REFERENCED_PTO_SEQUENCE),
    0x1077 => Ok(REFERENCED_TDR_INSTANCE_SEQUENCE),
    0x1078 => Ok(PTO_LOCATION_DESCRIPTION),
    0x1079 => Ok(ANOMALY_LOCATOR_INDICATOR_SEQUENCE),
    0x107A => Ok(ANOMALY_LOCATOR_INDICATOR),
    0x107B => Ok(PTO_REGION_SEQUENCE),
    0x107C => Ok(INSPECTION_SELECTION_CRITERIA),
    0x107D => Ok(SECONDARY_INSPECTION_METHOD_SEQUENCE),
    0x107E => Ok(PRCS_TO_RCS_ORIENTATION),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x4FFE.
///
fn find_element_in_group_4ffe(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(MAC_PARAMETERS_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x5200.
///
fn find_element_in_group_5200(element: u16) -> Result<Item, ()> {
  match element {
    0x9229 => Ok(SHARED_FUNCTIONAL_GROUPS_SEQUENCE),
    0x9230 => Ok(PER_FRAME_FUNCTIONAL_GROUPS_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x5400.
///
fn find_element_in_group_5400(element: u16) -> Result<Item, ()> {
  match element {
    0x0100 => Ok(WAVEFORM_SEQUENCE),
    0x0110 => Ok(CHANNEL_MINIMUM_VALUE),
    0x0112 => Ok(CHANNEL_MAXIMUM_VALUE),
    0x1004 => Ok(WAVEFORM_BITS_ALLOCATED),
    0x1006 => Ok(WAVEFORM_SAMPLE_INTERPRETATION),
    0x100A => Ok(WAVEFORM_PADDING_VALUE),
    0x1010 => Ok(WAVEFORM_DATA),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x5600.
///
fn find_element_in_group_5600(element: u16) -> Result<Item, ()> {
  match element {
    0x0010 => Ok(FIRST_ORDER_PHASE_CORRECTION_ANGLE),
    0x0020 => Ok(SPECTROSCOPY_DATA),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0x7FE0.
///
fn find_element_in_group_7fe0(element: u16) -> Result<Item, ()> {
  match element {
    0x0001 => Ok(EXTENDED_OFFSET_TABLE),
    0x0002 => Ok(EXTENDED_OFFSET_TABLE_LENGTHS),
    0x0003 => Ok(ENCAPSULATED_PIXEL_DATA_VALUE_TOTAL_LENGTH),
    0x0008 => Ok(FLOAT_PIXEL_DATA),
    0x0009 => Ok(DOUBLE_FLOAT_PIXEL_DATA),
    0x0010 => Ok(PIXEL_DATA),
    0x0020 => Ok(COEFFICIENTS_SDVN),
    0x0030 => Ok(COEFFICIENTS_SDHN),
    0x0040 => Ok(COEFFICIENTS_SDDN),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0xFFFA.
///
fn find_element_in_group_fffa(element: u16) -> Result<Item, ()> {
  match element {
    0xFFFA => Ok(DIGITAL_SIGNATURES_SEQUENCE),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0xFFFC.
///
fn find_element_in_group_fffc(element: u16) -> Result<Item, ()> {
  match element {
    0xFFFC => Ok(DATA_SET_TRAILING_PADDING),
    _ => Err(()),
  }
}

/// Returns details for a data element in group 0xFFFE.
///
fn find_element_in_group_fffe(element: u16) -> Result<Item, ()> {
  match element {
    0xE000 => Ok(ITEM),
    0xE00D => Ok(ITEM_DELIMITATION_ITEM),
    0xE0DD => Ok(SEQUENCE_DELIMITATION_ITEM),
    _ => Err(()),
  }
}

/// Returns details for a data element based on a tag. The private creator is
/// required in order to look up well-known privately defined data elements.
///
pub fn find(
  tag: DataElementTag,
  private_creator: Option<&str>,
) -> Result<Item, ()> {
  match tag.group {
    0x0002 => find_element_in_group_0002(tag.element),
    0x0004 => find_element_in_group_0004(tag.element),
    0x0006 => find_element_in_group_0006(tag.element),
    0x0008 => find_element_in_group_0008(tag.element),
    0x0010 => find_element_in_group_0010(tag.element),
    0x0012 => find_element_in_group_0012(tag.element),
    0x0014 => find_element_in_group_0014(tag.element),
    0x0016 => find_element_in_group_0016(tag.element),
    0x0018 => find_element_in_group_0018(tag.element),
    0x0020 => find_element_in_group_0020(tag.element),
    0x0022 => find_element_in_group_0022(tag.element),
    0x0024 => find_element_in_group_0024(tag.element),
    0x0028 => find_element_in_group_0028(tag.element),
    0x0032 => find_element_in_group_0032(tag.element),
    0x0034 => find_element_in_group_0034(tag.element),
    0x0038 => find_element_in_group_0038(tag.element),
    0x003A => find_element_in_group_003a(tag.element),
    0x0040 => find_element_in_group_0040(tag.element),
    0x0042 => find_element_in_group_0042(tag.element),
    0x0044 => find_element_in_group_0044(tag.element),
    0x0046 => find_element_in_group_0046(tag.element),
    0x0048 => find_element_in_group_0048(tag.element),
    0x0050 => find_element_in_group_0050(tag.element),
    0x0052 => find_element_in_group_0052(tag.element),
    0x0054 => find_element_in_group_0054(tag.element),
    0x0060 => find_element_in_group_0060(tag.element),
    0x0062 => find_element_in_group_0062(tag.element),
    0x0064 => find_element_in_group_0064(tag.element),
    0x0066 => find_element_in_group_0066(tag.element),
    0x0068 => find_element_in_group_0068(tag.element),
    0x006A => find_element_in_group_006a(tag.element),
    0x0070 => find_element_in_group_0070(tag.element),
    0x0072 => find_element_in_group_0072(tag.element),
    0x0074 => find_element_in_group_0074(tag.element),
    0x0076 => find_element_in_group_0076(tag.element),
    0x0078 => find_element_in_group_0078(tag.element),
    0x0080 => find_element_in_group_0080(tag.element),
    0x0082 => find_element_in_group_0082(tag.element),
    0x0088 => find_element_in_group_0088(tag.element),
    0x0100 => find_element_in_group_0100(tag.element),
    0x0400 => find_element_in_group_0400(tag.element),
    0x2000 => find_element_in_group_2000(tag.element),
    0x2010 => find_element_in_group_2010(tag.element),
    0x2020 => find_element_in_group_2020(tag.element),
    0x2030 => find_element_in_group_2030(tag.element),
    0x2040 => find_element_in_group_2040(tag.element),
    0x2050 => find_element_in_group_2050(tag.element),
    0x2100 => find_element_in_group_2100(tag.element),
    0x2110 => find_element_in_group_2110(tag.element),
    0x2120 => find_element_in_group_2120(tag.element),
    0x2130 => find_element_in_group_2130(tag.element),
    0x2200 => find_element_in_group_2200(tag.element),
    0x3002 => find_element_in_group_3002(tag.element),
    0x3004 => find_element_in_group_3004(tag.element),
    0x3006 => find_element_in_group_3006(tag.element),
    0x3008 => find_element_in_group_3008(tag.element),
    0x300A => find_element_in_group_300a(tag.element),
    0x300C => find_element_in_group_300c(tag.element),
    0x300E => find_element_in_group_300e(tag.element),
    0x3010 => find_element_in_group_3010(tag.element),
    0x4000 => find_element_in_group_4000(tag.element),
    0x4008 => find_element_in_group_4008(tag.element),
    0x4010 => find_element_in_group_4010(tag.element),
    0x4FFE => find_element_in_group_4ffe(tag.element),
    0x5200 => find_element_in_group_5200(tag.element),
    0x5400 => find_element_in_group_5400(tag.element),
    0x5600 => find_element_in_group_5600(tag.element),
    0x7FE0 => find_element_in_group_7fe0(tag.element),
    0xFFFA => find_element_in_group_fffa(tag.element),
    0xFFFC => find_element_in_group_fffc(tag.element),
    0xFFFE => find_element_in_group_fffe(tag.element),

    _ => match (tag.group, tag.element) {
      // Handle the '(0020,31XX) Source Image IDs' range of data elements
      (0x0020, element) if (0x3100..=0x31FF).contains(&element) => Ok(Item {
        tag,
        ..SOURCE_IMAGE_IDS
      }),

      // Handle the '(0028,04X0) Rows For Nth Order Coefficients' range of data elements
      (0x0028, element)
        if element == 0x0400
          || element == 0x0410
          || element == 0x0420
          || element == 0x0430
          || element == 0x0440
          || element == 0x0450
          || element == 0x0460
          || element == 0x0470
          || element == 0x0480
          || element == 0x0490
          || element == 0x04A0
          || element == 0x04B0
          || element == 0x04C0
          || element == 0x04D0
          || element == 0x04E0
          || element == 0x04F0 =>
      {
        Ok(Item {
          tag,
          ..ROWS_FOR_NTH_ORDER_COEFFICIENTS
        })
      }

      // Handle the '(0028,04X1) Columns For Nth Order Coefficients' range of data elements
      (0x0028, element)
        if element == 0x0401
          || element == 0x0411
          || element == 0x0421
          || element == 0x0431
          || element == 0x0441
          || element == 0x0451
          || element == 0x0461
          || element == 0x0471
          || element == 0x0481
          || element == 0x0491
          || element == 0x04A1
          || element == 0x04B1
          || element == 0x04C1
          || element == 0x04D1
          || element == 0x04E1
          || element == 0x04F1 =>
      {
        Ok(Item {
          tag,
          ..COLUMNS_FOR_NTH_ORDER_COEFFICIENTS
        })
      }

      // Handle the '(0028,04X2) Coefficient Coding' range of data elements
      (0x0028, element)
        if element == 0x0402
          || element == 0x0412
          || element == 0x0422
          || element == 0x0432
          || element == 0x0442
          || element == 0x0452
          || element == 0x0462
          || element == 0x0472
          || element == 0x0482
          || element == 0x0492
          || element == 0x04A2
          || element == 0x04B2
          || element == 0x04C2
          || element == 0x04D2
          || element == 0x04E2
          || element == 0x04F2 =>
      {
        Ok(Item {
          tag,
          ..COEFFICIENT_CODING
        })
      }

      // Handle the '(0028,04X3) Coefficient Coding Pointers' range of data elements
      (0x0028, element)
        if element == 0x0403
          || element == 0x0413
          || element == 0x0423
          || element == 0x0433
          || element == 0x0443
          || element == 0x0453
          || element == 0x0463
          || element == 0x0473
          || element == 0x0483
          || element == 0x0493
          || element == 0x04A3
          || element == 0x04B3
          || element == 0x04C3
          || element == 0x04D3
          || element == 0x04E3
          || element == 0x04F3 =>
      {
        Ok(Item {
          tag,
          ..COEFFICIENT_CODING_POINTERS
        })
      }

      // Handle the '(0028,08X0) Code Label' range of data elements
      (0x0028, element)
        if element == 0x0800
          || element == 0x0810
          || element == 0x0820
          || element == 0x0830
          || element == 0x0840
          || element == 0x0850
          || element == 0x0860
          || element == 0x0870
          || element == 0x0880
          || element == 0x0890
          || element == 0x08A0
          || element == 0x08B0
          || element == 0x08C0
          || element == 0x08D0
          || element == 0x08E0
          || element == 0x08F0 =>
      {
        Ok(Item { tag, ..CODE_LABEL })
      }

      // Handle the '(0028,08X2) Number of Tables' range of data elements
      (0x0028, element)
        if element == 0x0802
          || element == 0x0812
          || element == 0x0822
          || element == 0x0832
          || element == 0x0842
          || element == 0x0852
          || element == 0x0862
          || element == 0x0872
          || element == 0x0882
          || element == 0x0892
          || element == 0x08A2
          || element == 0x08B2
          || element == 0x08C2
          || element == 0x08D2
          || element == 0x08E2
          || element == 0x08F2 =>
      {
        Ok(Item {
          tag,
          ..NUMBER_OF_TABLES
        })
      }

      // Handle the '(0028,08X3) Code Table Location' range of data elements
      (0x0028, element)
        if element == 0x0803
          || element == 0x0813
          || element == 0x0823
          || element == 0x0833
          || element == 0x0843
          || element == 0x0853
          || element == 0x0863
          || element == 0x0873
          || element == 0x0883
          || element == 0x0893
          || element == 0x08A3
          || element == 0x08B3
          || element == 0x08C3
          || element == 0x08D3
          || element == 0x08E3
          || element == 0x08F3 =>
      {
        Ok(Item {
          tag,
          ..CODE_TABLE_LOCATION
        })
      }

      // Handle the '(0028,08X4) Bits For Code Word' range of data elements
      (0x0028, element)
        if element == 0x0804
          || element == 0x0814
          || element == 0x0824
          || element == 0x0834
          || element == 0x0844
          || element == 0x0854
          || element == 0x0864
          || element == 0x0874
          || element == 0x0884
          || element == 0x0894
          || element == 0x08A4
          || element == 0x08B4
          || element == 0x08C4
          || element == 0x08D4
          || element == 0x08E4
          || element == 0x08F4 =>
      {
        Ok(Item {
          tag,
          ..BITS_FOR_CODE_WORD
        })
      }

      // Handle the '(0028,08X8) Image Data Location' range of data elements
      (0x0028, element)
        if element == 0x0808
          || element == 0x0818
          || element == 0x0828
          || element == 0x0838
          || element == 0x0848
          || element == 0x0858
          || element == 0x0868
          || element == 0x0878
          || element == 0x0888
          || element == 0x0898
          || element == 0x08A8
          || element == 0x08B8
          || element == 0x08C8
          || element == 0x08D8
          || element == 0x08E8
          || element == 0x08F8 =>
      {
        Ok(Item {
          tag,
          ..IMAGE_DATA_LOCATION
        })
      }

      // Handle the '(1010,XXXX) Zonal Map' range of data elements
      (0x1010, _) => Ok(Item { tag, ..ZONAL_MAP }),

      // Handle the '(50XX,0005) Curve Dimensions' range of data elements
      (group, 0x0005) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..CURVE_DIMENSIONS
      }),

      // Handle the '(50XX,0010) Number of Points' range of data elements
      (group, 0x0010) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..NUMBER_OF_POINTS
      }),

      // Handle the '(50XX,0020) Type of Data' range of data elements
      (group, 0x0020) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..TYPE_OF_DATA
      }),

      // Handle the '(50XX,0022) Curve Description' range of data elements
      (group, 0x0022) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..CURVE_DESCRIPTION
      }),

      // Handle the '(50XX,0030) Axis Units' range of data elements
      (group, 0x0030) if (0x5000..=0x50FF).contains(&group) => {
        Ok(Item { tag, ..AXIS_UNITS })
      }

      // Handle the '(50XX,0040) Axis Labels' range of data elements
      (group, 0x0040) if (0x5000..=0x50FF).contains(&group) => {
        Ok(Item { tag, ..AXIS_LABELS })
      }

      // Handle the '(50XX,0103) Data Value Representation' range of data elements
      (group, 0x0103) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..DATA_VALUE_REPRESENTATION
      }),

      // Handle the '(50XX,0104) Minimum Coordinate Value' range of data elements
      (group, 0x0104) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..MINIMUM_COORDINATE_VALUE
      }),

      // Handle the '(50XX,0105) Maximum Coordinate Value' range of data elements
      (group, 0x0105) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..MAXIMUM_COORDINATE_VALUE
      }),

      // Handle the '(50XX,0106) Curve Range' range of data elements
      (group, 0x0106) if (0x5000..=0x50FF).contains(&group) => {
        Ok(Item { tag, ..CURVE_RANGE })
      }

      // Handle the '(50XX,0110) Curve Data Descriptor' range of data elements
      (group, 0x0110) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..CURVE_DATA_DESCRIPTOR
      }),

      // Handle the '(50XX,0112) Coordinate Start Value' range of data elements
      (group, 0x0112) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..COORDINATE_START_VALUE
      }),

      // Handle the '(50XX,0114) Coordinate Step Value' range of data elements
      (group, 0x0114) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..COORDINATE_STEP_VALUE
      }),

      // Handle the '(50XX,1001) Curve Activation Layer' range of data elements
      (group, 0x1001) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..CURVE_ACTIVATION_LAYER
      }),

      // Handle the '(50XX,2000) Audio Type' range of data elements
      (group, 0x2000) if (0x5000..=0x50FF).contains(&group) => {
        Ok(Item { tag, ..AUDIO_TYPE })
      }

      // Handle the '(50XX,2002) Audio Sample Format' range of data elements
      (group, 0x2002) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..AUDIO_SAMPLE_FORMAT
      }),

      // Handle the '(50XX,2004) Number of Channels' range of data elements
      (group, 0x2004) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..NUMBER_OF_CHANNELS
      }),

      // Handle the '(50XX,2006) Number of Samples' range of data elements
      (group, 0x2006) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..NUMBER_OF_SAMPLES
      }),

      // Handle the '(50XX,2008) Sample Rate' range of data elements
      (group, 0x2008) if (0x5000..=0x50FF).contains(&group) => {
        Ok(Item { tag, ..SAMPLE_RATE })
      }

      // Handle the '(50XX,200A) Total Time' range of data elements
      (group, 0x200A) if (0x5000..=0x50FF).contains(&group) => {
        Ok(Item { tag, ..TOTAL_TIME })
      }

      // Handle the '(50XX,200C) Audio Sample Data' range of data elements
      (group, 0x200C) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..AUDIO_SAMPLE_DATA
      }),

      // Handle the '(50XX,200E) Audio Comments' range of data elements
      (group, 0x200E) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..AUDIO_COMMENTS
      }),

      // Handle the '(50XX,2500) Curve Label' range of data elements
      (group, 0x2500) if (0x5000..=0x50FF).contains(&group) => {
        Ok(Item { tag, ..CURVE_LABEL })
      }

      // Handle the '(50XX,2600) Curve Referenced Overlay Sequence' range of data elements
      (group, 0x2600) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..CURVE_REFERENCED_OVERLAY_SEQUENCE
      }),

      // Handle the '(50XX,2610) Curve Referenced Overlay Group' range of data elements
      (group, 0x2610) if (0x5000..=0x50FF).contains(&group) => Ok(Item {
        tag,
        ..CURVE_REFERENCED_OVERLAY_GROUP
      }),

      // Handle the '(50XX,3000) Curve Data' range of data elements
      (group, 0x3000) if (0x5000..=0x50FF).contains(&group) => {
        Ok(Item { tag, ..CURVE_DATA })
      }

      // Handle the '(60XX,0010) Overlay Rows' range of data elements
      (group, 0x0010) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_ROWS
      }),

      // Handle the '(60XX,0011) Overlay Columns' range of data elements
      (group, 0x0011) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_COLUMNS
      }),

      // Handle the '(60XX,0012) Overlay Planes' range of data elements
      (group, 0x0012) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_PLANES
      }),

      // Handle the '(60XX,0015) Number of Frames in Overlay' range of data elements
      (group, 0x0015) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..NUMBER_OF_FRAMES_IN_OVERLAY
      }),

      // Handle the '(60XX,0022) Overlay Description' range of data elements
      (group, 0x0022) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_DESCRIPTION
      }),

      // Handle the '(60XX,0040) Overlay Type' range of data elements
      (group, 0x0040) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_TYPE
      }),

      // Handle the '(60XX,0045) Overlay Subtype' range of data elements
      (group, 0x0045) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_SUBTYPE
      }),

      // Handle the '(60XX,0050) Overlay Origin' range of data elements
      (group, 0x0050) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_ORIGIN
      }),

      // Handle the '(60XX,0051) Image Frame Origin' range of data elements
      (group, 0x0051) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..IMAGE_FRAME_ORIGIN
      }),

      // Handle the '(60XX,0052) Overlay Plane Origin' range of data elements
      (group, 0x0052) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_PLANE_ORIGIN
      }),

      // Handle the '(60XX,0060) Overlay Compression Code' range of data elements
      (group, 0x0060) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_COMPRESSION_CODE
      }),

      // Handle the '(60XX,0061) Overlay Compression Originator' range of data elements
      (group, 0x0061) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_COMPRESSION_ORIGINATOR
      }),

      // Handle the '(60XX,0062) Overlay Compression Label' range of data elements
      (group, 0x0062) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_COMPRESSION_LABEL
      }),

      // Handle the '(60XX,0063) Overlay Compression Description' range of data elements
      (group, 0x0063) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_COMPRESSION_DESCRIPTION
      }),

      // Handle the '(60XX,0066) Overlay Compression Step Pointers' range of data elements
      (group, 0x0066) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_COMPRESSION_STEP_POINTERS
      }),

      // Handle the '(60XX,0068) Overlay Repeat Interval' range of data elements
      (group, 0x0068) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_REPEAT_INTERVAL
      }),

      // Handle the '(60XX,0069) Overlay Bits Grouped' range of data elements
      (group, 0x0069) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_BITS_GROUPED
      }),

      // Handle the '(60XX,0100) Overlay Bits Allocated' range of data elements
      (group, 0x0100) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_BITS_ALLOCATED
      }),

      // Handle the '(60XX,0102) Overlay Bit Position' range of data elements
      (group, 0x0102) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_BIT_POSITION
      }),

      // Handle the '(60XX,0110) Overlay Format' range of data elements
      (group, 0x0110) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_FORMAT
      }),

      // Handle the '(60XX,0200) Overlay Location' range of data elements
      (group, 0x0200) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_LOCATION
      }),

      // Handle the '(60XX,0800) Overlay Code Label' range of data elements
      (group, 0x0800) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_CODE_LABEL
      }),

      // Handle the '(60XX,0802) Overlay Number of Tables' range of data elements
      (group, 0x0802) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_NUMBER_OF_TABLES
      }),

      // Handle the '(60XX,0803) Overlay Code Table Location' range of data elements
      (group, 0x0803) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_CODE_TABLE_LOCATION
      }),

      // Handle the '(60XX,0804) Overlay Bits For Code Word' range of data elements
      (group, 0x0804) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_BITS_FOR_CODE_WORD
      }),

      // Handle the '(60XX,1001) Overlay Activation Layer' range of data elements
      (group, 0x1001) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_ACTIVATION_LAYER
      }),

      // Handle the '(60XX,1100) Overlay Descriptor - Gray' range of data elements
      (group, 0x1100) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_DESCRIPTOR_GRAY
      }),

      // Handle the '(60XX,1101) Overlay Descriptor - Red' range of data elements
      (group, 0x1101) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_DESCRIPTOR_RED
      }),

      // Handle the '(60XX,1102) Overlay Descriptor - Green' range of data elements
      (group, 0x1102) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_DESCRIPTOR_GREEN
      }),

      // Handle the '(60XX,1103) Overlay Descriptor - Blue' range of data elements
      (group, 0x1103) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_DESCRIPTOR_BLUE
      }),

      // Handle the '(60XX,1200) Overlays - Gray' range of data elements
      (group, 0x1200) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAYS_GRAY
      }),

      // Handle the '(60XX,1201) Overlays - Red' range of data elements
      (group, 0x1201) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAYS_RED
      }),

      // Handle the '(60XX,1202) Overlays - Green' range of data elements
      (group, 0x1202) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAYS_GREEN
      }),

      // Handle the '(60XX,1203) Overlays - Blue' range of data elements
      (group, 0x1203) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAYS_BLUE
      }),

      // Handle the '(60XX,1301) ROI Area' range of data elements
      (group, 0x1301) if (0x6000..=0x60FF).contains(&group) => {
        Ok(Item { tag, ..ROI_AREA })
      }

      // Handle the '(60XX,1302) ROI Mean' range of data elements
      (group, 0x1302) if (0x6000..=0x60FF).contains(&group) => {
        Ok(Item { tag, ..ROI_MEAN })
      }

      // Handle the '(60XX,1303) ROI Standard Deviation' range of data elements
      (group, 0x1303) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..ROI_STANDARD_DEVIATION
      }),

      // Handle the '(60XX,1500) Overlay Label' range of data elements
      (group, 0x1500) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_LABEL
      }),

      // Handle the '(60XX,3000) Overlay Data' range of data elements
      (group, 0x3000) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_DATA
      }),

      // Handle the '(60XX,4000) Overlay Comments' range of data elements
      (group, 0x4000) if (0x6000..=0x60FF).contains(&group) => Ok(Item {
        tag,
        ..OVERLAY_COMMENTS
      }),

      // Handle the '(7FXX,0010) Variable Pixel Data' range of data elements
      (group, 0x0010) if (0x7F00..=0x7FFF).contains(&group) => Ok(Item {
        tag,
        ..VARIABLE_PIXEL_DATA
      }),

      // Handle the '(7FXX,0011) Variable Next Data Group' range of data elements
      (group, 0x0011) if (0x7F00..=0x7FFF).contains(&group) => Ok(Item {
        tag,
        ..VARIABLE_NEXT_DATA_GROUP
      }),

      // Handle the '(7FXX,0020) Variable Coefficients SDVN' range of data elements
      (group, 0x0020) if (0x7F00..=0x7FFF).contains(&group) => Ok(Item {
        tag,
        ..VARIABLE_COEFFICIENTS_SDVN
      }),

      // Handle the '(7FXX,0030) Variable Coefficients SDHN' range of data elements
      (group, 0x0030) if (0x7F00..=0x7FFF).contains(&group) => Ok(Item {
        tag,
        ..VARIABLE_COEFFICIENTS_SDHN
      }),

      // Handle the '(7FXX,0040) Variable Coefficients SDDN' range of data elements
      (group, 0x0040) if (0x7F00..=0x7FFF).contains(&group) => Ok(Item {
        tag,
        ..VARIABLE_COEFFICIENTS_SDDN
      }),

      // Handle the '(1000,XXXY)' range of data elements, where Y is in the range 0-5
      (0x1000, element) => match element % 16 {
        0 => Ok(Item {
          tag,
          ..ESCAPE_TRIPLET
        }),
        1 => Ok(Item {
          tag,
          ..RUN_LENGTH_TRIPLET
        }),
        2 => Ok(Item {
          tag,
          ..HUFFMAN_TABLE_SIZE
        }),
        3 => Ok(Item {
          tag,
          ..HUFFMAN_TABLE_TRIPLET
        }),
        4 => Ok(Item {
          tag,
          ..SHIFT_TABLE_SIZE
        }),
        5 => Ok(Item {
          tag,
          ..SHIFT_TABLE_TRIPLET
        }),
        _ => Err(()),
      },

      // Handle private range tags
      _ => {
        // Check this is a private range tag
        if !tag.is_private() {
          return Err(());
        }

        // Handle the '(gggg,00XX) Private Creator' data elements.
        // Ref: PS3.5 7.8.1.
        if tag.is_private_creator() {
          return Ok(Item {
            tag,
            name: "Private Creator",
            vrs: &[ValueRepresentation::LongString],
            multiplicity: VM_1,
          });
        }

        // Handle other private range tags
        match private_creator {
          Some(private_creator) => find_private(tag, private_creator),
          None => Err(()),
        }
      }
    },
  }
}

/// Returns details for a well-known privately defined data element.
///
fn find_private(
  tag: DataElementTag,
  private_creator: &str,
) -> Result<Item, ()> {
  // Get the high and low bytes of the group and element to match against
  let g0 = tag.group >> 8;
  let g1 = tag.group & 0xFF;
  let e0 = tag.element >> 8;
  let e1 = tag.element & 0xFF;

  match private_creator {
    "SIEMENS MEDCOM HEADER2" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "Series Workflow Status",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-XSB-VISUB Release 1" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x3f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "V1" => match (g0, g1, e0, e1) {
      (0x00, 0x11, _, 0x01) => Ok(Item {
        tag,
        name: "User Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x02) => Ok(Item {
        tag,
        name: "Normalization Coefficient",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x03) => Ok(Item {
        tag,
        name: "Receiving Gain",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x04) => Ok(Item {
        tag,
        name: "Mean Image Noise",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PRIVATE ORIGINAL ATTRIBUTES" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Private Original Attribute Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x05) => Ok(Item {
        tag,
        name: "Replacement Date and Time",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Replacement Originator Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "Replacement Reason",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x70) => Ok(Item {
        tag,
        name: "Original Operators' Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS SITE NAME" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x78) => Ok(Item {
        tag,
        name: "Site Name",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIENET" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "SIENET Command Field",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x14) => Ok(Item {
        tag,
        name: "Receiver PLA",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x16) => Ok(Item {
        tag,
        name: "Transfer Priority",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x29) => Ok(Item {
        tag,
        name: "Actual User",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x72) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x73) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x74) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x75) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x91, _, 0x20) => Ok(Item {
        tag,
        name: "Patient Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x95, _, 0x01) => Ok(Item {
        tag,
        name: "Examination Folder ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x95, _, 0x04) => Ok(Item {
        tag,
        name: "Folder Reported Status",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x95, _, 0x05) => Ok(Item {
        tag,
        name: "Folder Reporting Radiologist",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x95, _, 0x07) => Ok(Item {
        tag,
        name: "SIENET ISA PLA",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x95, _, 0x0c) => Ok(Item {
        tag,
        name: "Folder Rebuild Status",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x95, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x99, _, 0x02) => Ok(Item {
        tag,
        name: "Key Images",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x99, _, 0x05) => Ok(Item {
        tag,
        name: "Image Number",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_SERS_01" => match (g0, g1, e0, e1) {
      (0x00, 0x25, 0x10, _) => Ok(Item {
        tag,
        name: "Private Element Creator",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x06) => Ok(Item {
        tag,
        name: "Last pulse sequence used",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x07) => Ok(Item {
        tag,
        name: "Images in Series",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x10) => Ok(Item {
        tag,
        name: "Landmark Counter",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x11) => Ok(Item {
        tag,
        name: "Number of Acquisitions",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x14) => Ok(Item {
        tag,
        name: "Indicates no. of updates to header",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x17) => Ok(Item {
        tag,
        name: "Series Complete Flag",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x18) => Ok(Item {
        tag,
        name: "Number of images archived",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x19) => Ok(Item {
        tag,
        name: "Last image number used",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x1a) => Ok(Item {
        tag,
        name: "Primary Receiver Suite and Host",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x1b) => Ok(Item {
        tag,
        name: "Protocol Data Block (compressed)",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI RELEASE 1" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Comments",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x15) => Ok(Item {
        tag,
        name: "Unique Identifier",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Data Object Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x41) => Ok(Item {
        tag,
        name: "Data Object Subtype",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "Organ",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x15) => Ok(Item {
        tag,
        name: "Allergy Indication",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x20) => Ok(Item {
        tag,
        name: "Pregnancy",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "Compression Algorithm",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED SP DXMG WH AWS 1" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x00, 0x41, _, 0x02) => Ok(Item {
        tag,
        name: "Reason for the Requested Procedure",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x01) => Ok(Item {
        tag,
        name: "Projection View Display String",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "REPORT_FROM_APP" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x95) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_IT_US_REPORT" => match (g0, g1, e0, e1) {
      (0x00, 0x45, _, 0x11) => Ok(Item {
        tag,
        name: "Vivid excel file",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x12) => Ok(Item {
        tag,
        name: "Vivid CHM file",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x13) => Ok(Item {
        tag,
        name: "Vivid PDF file",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS NUMBER OF SUB FRAMES" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x77) => Ok(Item {
        tag,
        name: "Number of Sub-Frames",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MITRA LINKED ATTRIBUTES 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x31, _, 0x20) => Ok(Item {
        tag,
        name: "Global Patient ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_ACRQA_1.0 BLOCK2" => match (g0, g1, e0, e1) {
      (0x00, 0x23, _, 0x00) => Ok(Item {
        tag,
        name: "CR S-Shift",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x10) => Ok(Item {
        tag,
        name: "CR C-Shift",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x20) => Ok(Item {
        tag,
        name: "CR GT",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x30) => Ok(Item {
        tag,
        name: "CR GA",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x40) => Ok(Item {
        tag,
        name: "CR GC",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x50) => Ok(Item {
        tag,
        name: "CR GS",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x60) => Ok(Item {
        tag,
        name: "CR RT",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x70) => Ok(Item {
        tag,
        name: "CR RE",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x80) => Ok(Item {
        tag,
        name: "CR RN",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x90) => Ok(Item {
        tag,
        name: "CR DRT",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS TABLE VERTICAL POSITION" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x75) => Ok(Item {
        tag,
        name: "vertical Table Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_DL_SERIES" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x86) => Ok(Item {
        tag,
        name: "Calibration time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x95) => Ok(Item {
        tag,
        name: "Image sweep",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0x93) => Ok(Item {
        tag,
        name: "Spatial change",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "default spatial filter strength",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd4) => Ok(Item {
        tag,
        name: "Detection gain value",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x83) => Ok(Item {
        tag,
        name: "Calibration object size mm",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xca) => Ok(Item {
        tag,
        name: "3Dspin expected number of frames",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Calibration object",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "ABD value",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa6) => Ok(Item {
        tag,
        name: "injection delay",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8c) => Ok(Item {
        tag,
        name: "Calibration points row",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x97) => Ok(Item {
        tag,
        name: "Angle 1 increment",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xa9) => Ok(Item {
        tag,
        name: "EPT",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xae) => Ok(Item {
        tag,
        name: "SUB operator LUTs names",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x8f) => Ok(Item {
        tag,
        name: "Calibration sw version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x98) => Ok(Item {
        tag,
        name: "Angle 2 increment",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x9a) => Ok(Item {
        tag,
        name: "sensor feedback",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x9d) => Ok(Item {
        tag,
        name: "applicable review mode",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaa) => Ok(Item {
        tag,
        name: "can downscan 512",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc5) => Ok(Item {
        tag,
        name: "Preselected pivot rotation speed",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc4) => Ok(Item {
        tag,
        name: "Default spatial filter family",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9e) => Ok(Item {
        tag,
        name: "log LUT control points",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Extend calib sw version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xad) => Ok(Item {
        tag,
        name: "exp LUT NOSUB control points",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xd5) => Ok(Item {
        tag,
        name: "mR mAs calibration value",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8a) => Ok(Item {
        tag,
        name: "Calibration frame original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa5) => Ok(Item {
        tag,
        name: "injection phase",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4e) => Ok(Item {
        tag,
        name: "def_bright_contr",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "default spatial filter family",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xdc) => Ok(Item {
        tag,
        name: "DRM LUT file name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x85) => Ok(Item {
        tag,
        name: "Calibration date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0b) => Ok(Item {
        tag,
        name: "fov dimension double",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_2,
      }),
      (0x00, 0x19, _, 0xc7) => Ok(Item {
        tag,
        name: "Patient position per image",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xdd) => Ok(Item {
        tag,
        name: "DRM Strength",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xa2) => Ok(Item {
        tag,
        name: "Sub window width",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc8) => Ok(Item {
        tag,
        name: "3D structure of interest",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "detector_rot_angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x89) => Ok(Item {
        tag,
        name: "Calibration image original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x87) => Ok(Item {
        tag,
        name: "Number of images",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x99) => Ok(Item {
        tag,
        name: "Angle 3 increment",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xa4) => Ok(Item {
        tag,
        name: "Auto injection enabled",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa7) => Ok(Item {
        tag,
        name: "reference injection frame number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4b) => Ok(Item {
        tag,
        name: "Detector origin",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0x8b) => Ok(Item {
        tag,
        name: "Calibration nb points uif",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9f) => Ok(Item {
        tag,
        name: "exp LUT SUB control points",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Sub window center",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x87) => Ok(Item {
        tag,
        name: "Calibration accuracy",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8e) => Ok(Item {
        tag,
        name: "Calibration mag ratio",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x88) => Ok(Item {
        tag,
        name: "Calibration extended",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "Calibration frame",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc9) => Ok(Item {
        tag,
        name: "3D calibration out of date flag",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x84) => Ok(Item {
        tag,
        name: "Calibration factor",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x91) => Ok(Item {
        tag,
        name: "Calibration return code",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8d) => Ok(Item {
        tag,
        name: "Calibration points column",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x4f) => Ok(Item {
        tag,
        name: "user_bright_contr",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0xab) => Ok(Item {
        tag,
        name: "current spatial filter strength",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_CT_HINO_01" => match (g0, g1, e0, e1) {
      (0x00, 0x4b, _, 0x01) => Ok(Item {
        tag,
        name: "Beam Thickess",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x4b, _, 0x02) => Ok(Item {
        tag,
        name: "R Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x4b, _, 0x03) => Ok(Item {
        tag,
        name: "HBC Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-Private-CWS Release 1" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "Window Of Images ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Window Of Images Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "WindowOfImagesScope",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "Silhouette ROI V1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "ROI Name",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x12) => Ok(Item {
        tag,
        name: "ROI Name Font",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x13) => Ok(Item {
        tag,
        name: "ROI Normal Color",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x14) => Ok(Item {
        tag,
        name: "ROI Fill Pattern",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x15) => Ok(Item {
        tag,
        name: "ROI Bp Seg",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x16) => Ok(Item {
        tag,
        name: "ROI Bp Seg Pairs",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x17) => Ok(Item {
        tag,
        name: "ROI Seed Space",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x18) => Ok(Item {
        tag,
        name: "ROI Seeds",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x19) => Ok(Item {
        tag,
        name: "ROI Line Thickness",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "ROI Line Style",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x21) => Ok(Item {
        tag,
        name: "ROI Line Dash Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x22) => Ok(Item {
        tag,
        name: "ROI Interactivity",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x23) => Ok(Item {
        tag,
        name: "ROI Name Position",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x24) => Ok(Item {
        tag,
        name: "ROI Name Display",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x25) => Ok(Item {
        tag,
        name: "ROI Label",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x26) => Ok(Item {
        tag,
        name: "ROI Shape",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x27) => Ok(Item {
        tag,
        name: "ROI Shape Tilt",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x28) => Ok(Item {
        tag,
        name: "ROI Shape Points Count",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x29) => Ok(Item {
        tag,
        name: "ROI Shape Points Space",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "ROI Shape Points",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "ROI Shape Control Points Count",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "ROI Shape Control Points Space",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x33) => Ok(Item {
        tag,
        name: "ROI Shape Control Points",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "ROI Don't Save",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MeVis eatDicom" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "EatDicomVersion",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "EatDicomOptions",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x21) => Ok(Item {
        tag,
        name: "TimepointsID",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_ACQU_01" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "Recon post proc. Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xbe) => Ok(Item {
        tag,
        name: "Projection angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xba) => Ok(Item {
        tag,
        name: "User data 19",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xcb) => Ok(Item {
        tag,
        name: "Phase Contrast flow axis",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9b) => Ok(Item {
        tag,
        name: "Pulse Sequence Mode",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb3) => Ok(Item {
        tag,
        name: "User data 12",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa3) => Ok(Item {
        tag,
        name: "Calibrated Field strength",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xce) => Ok(Item {
        tag,
        name: "Prescan type",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd6) => Ok(Item {
        tag,
        name: "Prep pulse",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x19) => Ok(Item {
        tag,
        name: "First scan location",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd9) => Ok(Item {
        tag,
        name: "Concatenated SAT {# DTI Diffusion Dir., release 9.0 & below}",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x86) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe2) => Ok(Item {
        tag,
        name: "Velocity Encode Scale",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "Last pseq",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x95) => Ok(Item {
        tag,
        name: "Auto Prescan Analog receiver gain",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6a) => Ok(Item {
        tag,
        name: "Dependent on #views processed",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x93) => Ok(Item {
        tag,
        name: "Auto Prescan Center Frequency",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1e) => Ok(Item {
        tag,
        name: "Display field of view",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xbb) => Ok(Item {
        tag,
        name: "User data 20",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xbd) => Ok(Item {
        tag,
        name: "User data 22",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2a) => Ok(Item {
        tag,
        name: "x-ray On position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0f) => Ok(Item {
        tag,
        name: "Horiz. Frame of ref.",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaf) => Ok(Item {
        tag,
        name: "User data 8",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc1) => Ok(Item {
        tag,
        name: "Surface coil intensity",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb1) => Ok(Item {
        tag,
        name: "User data 10",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5a) => Ok(Item {
        tag,
        name: "Acquisition Duration",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x94) => Ok(Item {
        tag,
        name: "Auto Prescan Transmit Gain",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe6) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xde) => Ok(Item {
        tag,
        name: "Dynamic Z alpha value",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6b) => Ok(Item {
        tag,
        name: "Field of view in detector cells",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x83) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb7) => Ok(Item {
        tag,
        name: "User data 16",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "Increment between views",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd2) => Ok(Item {
        tag,
        name: "Projection Algorithm",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xec) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf2) => Ok(Item {
        tag,
        name: "Fast phases",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2f) => Ok(Item {
        tag,
        name: "Trigger frequency",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xca) => Ok(Item {
        tag,
        name: "SAT thickness H/F",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x44) => Ok(Item {
        tag,
        name: "Interscan delay",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Cell number at Theta",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xf8) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd7) => Ok(Item {
        tag,
        name: "Cardiac phase number",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "Surface Coil Type",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x43) => Ok(Item {
        tag,
        name: "Total Segments Required",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd8) => Ok(Item {
        tag,
        name: "Variable echoflag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x49) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x97) => Ok(Item {
        tag,
        name: "Bitmap defining CVs",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa9) => Ok(Item {
        tag,
        name: "User data 2",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xae) => Ok(Item {
        tag,
        name: "User data 7",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Stat recon flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8f) => Ok(Item {
        tag,
        name: "Swappf",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc3) => Ok(Item {
        tag,
        name: "SAT location L",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2b) => Ok(Item {
        tag,
        name: "x-ray Off position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x98) => Ok(Item {
        tag,
        name: "Center freq. Method",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd3) => Ok(Item {
        tag,
        name: "Projection Algorithm Name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe0) => Ok(Item {
        tag,
        name: "User data 24 {# DTI Diffusion Dir., release 10.0 & above}",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xac) => Ok(Item {
        tag,
        name: "User data 5",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x58) => Ok(Item {
        tag,
        name: "CT bone number",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9d) => Ok(Item {
        tag,
        name: "Pulse Sequence Date",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xda) => Ok(Item {
        tag,
        name: "Reference channel used",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaa) => Ok(Item {
        tag,
        name: "User data 3",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc5) => Ok(Item {
        tag,
        name: "SAT location P",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc6) => Ok(Item {
        tag,
        name: "SAT location H",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc4) => Ok(Item {
        tag,
        name: "SAT location A",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb0) => Ok(Item {
        tag,
        name: "User data 9",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xcf) => Ok(Item {
        tag,
        name: "Prescan status",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x76) => Ok(Item {
        tag,
        name: "Max right chan over views",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "Table Speed [mm/rotation]",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf9) => Ok(Item {
        tag,
        name: "Transmit gain",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xdf) => Ok(Item {
        tag,
        name: "User data 23 {# DTI Diffusion Dir., release 9.0 & below}",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Tube Azimuth [degree]",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7d) => Ok(Item {
        tag,
        name: "Second echo",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x3f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "Mid Scan Time [sec]",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1a) => Ok(Item {
        tag,
        name: "Last scan ras",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Series contrast",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x47) => Ok(Item {
        tag,
        name: "View compression factor",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2c) => Ok(Item {
        tag,
        name: "Number of triggers",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9e) => Ok(Item {
        tag,
        name: "Internal Pulse Sequence Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x75) => Ok(Item {
        tag,
        name: "Avg of right ref chans over views",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x39) => Ok(Item {
        tag,
        name: "SFOV Type",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7f) => Ok(Item {
        tag,
        name: "Table delta",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb8) => Ok(Item {
        tag,
        name: "User data 17",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc2) => Ok(Item {
        tag,
        name: "SAT location R",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Pause Interval",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "Start number for enhanced scans",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xad) => Ok(Item {
        tag,
        name: "User data 6",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "Rotation Speed [msec]",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x17) => Ok(Item {
        tag,
        name: "Series plane",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "First scan ras",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd5) => Ok(Item {
        tag,
        name: "Fractional echo",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, 0x10, _) => Ok(Item {
        tag,
        name: "Private Element Creator",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc0) => Ok(Item {
        tag,
        name: "Saturation planes",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8a) => Ok(Item {
        tag,
        name: "Actual receive gain analog",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9c) => Ok(Item {
        tag,
        name: "Pulse Sequence Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x57) => Ok(Item {
        tag,
        name: "CT water number",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa5) => Ok(Item {
        tag,
        name: "Receive bandwidth",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x73) => Ok(Item {
        tag,
        name: "Avg of left ref chans over views",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xdc) => Ok(Item {
        tag,
        name: "Primary speed correction used",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "Compute type",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x85) => Ok(Item {
        tag,
        name: "Monitor SAR",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc7) => Ok(Item {
        tag,
        name: "SAT location F",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xdd) => Ok(Item {
        tag,
        name: "Overrange correction used",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xdb) => Ok(Item {
        tag,
        name: "Back projector coefficient",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb9) => Ok(Item {
        tag,
        name: "User data 18",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa2) => Ok(Item {
        tag,
        name: "Raw data run number",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "End number for enhanced scans",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Detector Channel",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2e) => Ok(Item {
        tag,
        name: "Angle of first view",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc8) => Ok(Item {
        tag,
        name: "SAT thickness R/L",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "Set if fatq estimates were used",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "Start number for baseline",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "Slice offset on freq axis",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5f) => Ok(Item {
        tag,
        name: "Increment between channels",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe8) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5e) => Ok(Item {
        tag,
        name: "Number of channels (1...512)",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "Number of views",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb6) => Ok(Item {
        tag,
        name: "User data 15",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xbc) => Ok(Item {
        tag,
        name: "User data 21",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x74) => Ok(Item {
        tag,
        name: "Max left chan over views",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb2) => Ok(Item {
        tag,
        name: "User data 11",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x99) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa4) => Ok(Item {
        tag,
        name: "SAT fat/water/bone",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7e) => Ok(Item {
        tag,
        name: "Number of echoes",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa7) => Ok(Item {
        tag,
        name: "User data 0",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4b) => Ok(Item {
        tag,
        name: "Data size for scan data",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8b) => Ok(Item {
        tag,
        name: "Actual receive gain digital",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xcc) => Ok(Item {
        tag,
        name: "Velocity encoding",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xfb) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Value of back projection button",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb4) => Ok(Item {
        tag,
        name: "User data 13",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9f) => Ok(Item {
        tag,
        name: "Transmitting Coil Type",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa8) => Ok(Item {
        tag,
        name: "User data 1",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Extremity Coil flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xeb) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x87) => Ok(Item {
        tag,
        name: "Cardiac repetition time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x3e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xcd) => Ok(Item {
        tag,
        name: "Thickness disclaimer",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "Mid scan flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "Segment Number",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe9) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd0) => Ok(Item {
        tag,
        name: "Raw data type",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x88) => Ok(Item {
        tag,
        name: "Images per cardiac cycle",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Starting view",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "End number for baseline",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x96) => Ok(Item {
        tag,
        name: "Auto Prescan Digital receiver gain",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "Contiguous",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "Z chan avg over views",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4a) => Ok(Item {
        tag,
        name: "Total no. of ref channels",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc9) => Ok(Item {
        tag,
        name: "SAT thickness A/P",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x84) => Ok(Item {
        tag,
        name: "Peak SAR",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x91) => Ok(Item {
        tag,
        name: "Pause Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8d) => Ok(Item {
        tag,
        name: "Delay after trigger",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Cell spacing",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1b) => Ok(Item {
        tag,
        name: "Last scan loc",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb5) => Ok(Item {
        tag,
        name: "User data 14",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xab) => Ok(Item {
        tag,
        name: "User data 4",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "CEMAX-ICON" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "CR Processing Parameters",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "CR Exposure Menu Code",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "CR Exposure Menu String",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "CR EDR Mode",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "CR Latitude",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "CR Group Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "CR Equipment ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "CR Image Serial Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "CR Bar Code Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "CR Film Output Exposure",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Key Image",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Note",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Annotation Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "X Start Position",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x40) => Ok(Item {
        tag,
        name: "Y Start Position",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "X End Position",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "Y End Position",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x70) => Ok(Item {
        tag,
        name: "Annotation Text",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x80) => Ok(Item {
        tag,
        name: "Which Marker",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x90) => Ok(Item {
        tag,
        name: "Annotation Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x91) => Ok(Item {
        tag,
        name: "X Coordinates",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x92) => Ok(Item {
        tag,
        name: "Y Coordinates",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x93) => Ok(Item {
        tag,
        name: "Annotation Type",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x94) => Ok(Item {
        tag,
        name: "Number of points",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x95) => Ok(Item {
        tag,
        name: "Fill Type",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x30, 0x33, _, 0x00) => Ok(Item {
        tag,
        name: "Study Priority Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_Ultrasound_MovieGroup_001" => match (g0, g1, e0, e1) {
      (0x7f, 0xe1, _, 0x57) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x77) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xe1, _, 0x86) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x7f, 0xe1, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x84) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x55) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x74) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_2,
      }),
      (0x7f, 0xe1, _, 0x37) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x79) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x54) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x36) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x73) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x87) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_4,
      }),
      (0x7f, 0xe1, _, 0x72) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x49) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x83) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x88) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x75) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x61) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x85) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_IQTB_IDEN_47" => match (g0, g1, e0, e1) {
      (0x00, 0x47, _, 0x01) => Ok(Item {
        tag,
        name: "Image Path",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x02) => Ok(Item {
        tag,
        name: "Image Date/Time",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x03) => Ok(Item {
        tag,
        name: "Queue Sequence Number",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x04) => Ok(Item {
        tag,
        name: "Recon Sequence ID",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_LUNAR_RAW" => match (g0, g1, e0, e1) {
      (0x70, 0x03, _, 0x01) => Ok(Item {
        tag,
        name: "enCORE File Name",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x70, 0x03, _, 0x02) => Ok(Item {
        tag,
        name: "enCORE File Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x03, _, 0x03) => Ok(Item {
        tag,
        name: "enCORE File Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x70, 0x03, _, 0x04) => Ok(Item {
        tag,
        name: "enCORE File Modified Time",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS REFERENCE LOCKED" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x88) => Ok(Item {
        tag,
        name: "Locked Flag",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS TABLE LATERAL POSITION" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x98) => Ok(Item {
        tag,
        name: "Lateral Table Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "HOLOGIC" => match (g0, g1, e0, e1) {
      (0x00, 0x11, _, 0x00) => Ok(Item {
        tag,
        name: "Hx Questionnaire",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Image Analysis Data in XML",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x00) => Ok(Item {
        tag,
        name: "Encoding Scheme Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x01) => Ok(Item {
        tag,
        name: "P File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x02) => Ok(Item {
        tag,
        name: "P File Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x03) => Ok(Item {
        tag,
        name: "P File Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x04) => Ok(Item {
        tag,
        name: "R File Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x05) => Ok(Item {
        tag,
        name: "R File Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "BrainLAB_BeamProfile" => match (g0, g1, e0, e1) {
      (0x34, 0x11, _, 0x01) => Ok(Item {
        tag,
        name: "Beam Profile Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x34, 0x11, _, 0x02) => Ok(Item {
        tag,
        name: "Beam Profile Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x34, 0x11, _, 0x03) => Ok(Item {
        tag,
        name: "Beam Parameter Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x34, 0x11, _, 0x04) => Ok(Item {
        tag,
        name: "Parameter Description",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x34, 0x11, _, 0x05) => Ok(Item {
        tag,
        name: "Parameter Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x34, 0x11, _, 0x06) => Ok(Item {
        tag,
        name: "Referenced Beam Profile Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips MR Imaging DD 003" => match (g0, g1, e0, e1) {
      (0x20, 0x05, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x45) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x49) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x56) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x57) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x81) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x82) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-CTBE-Private Release 1" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ISG Image" => match (g0, g1, e0, e1) {
      (0x00, 0x65, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "LORAD Selenia" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Paddle ID",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "Paddle Position",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Collimation Size",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x33) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x35) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "TOSHIBA_SR" => match (g0, g1, e0, e1) {
      (0x70, 0x15, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x15, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "KINETDX_GRAPHICS" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0xa4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MeVis eD: Timepoint Information" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "TPDateTime",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "TPDateTimeType",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "TPSeriesDescription",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x13) => Ok(Item {
        tag,
        name: "TPGradientDirections",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x21) => Ok(Item {
        tag,
        name: "GeometryID",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Silhouette V1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x54) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x55) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x56) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x57) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "HMC - CT - ID" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Image ID Information (e.g. Patient Name, Patient ID)",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Image ID Information (e.g. Patient Comment)",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AGFA PACS Archive Mirroring 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x31, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MR VA0  GEN" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x46) => Ok(Item {
        tag,
        name: "AC Combination Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "Number of 3D Raw Partitions nominal",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x86) => Ok(Item {
        tag,
        name: "Filter Parameter for Phase Correction",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(4),
        },
      }),
      (0x00, 0x21, _, 0x58) => Ok(Item {
        tag,
        name: "Gate Threshold",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "Start Delay Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x93) => Ok(Item {
        tag,
        name: "EPI Stimulation Monitor Mode",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x92) => Ok(Item {
        tag,
        name: "Saturation Readout Vector Transversal Component",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Acquisition Columns",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x4f) => Ok(Item {
        tag,
        name: "Order of Slices",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x4a) => Ok(Item {
        tag,
        name: "MIP Stop Slice",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x94) => Ok(Item {
        tag,
        name: "Image Rotation Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x49) => Ok(Item {
        tag,
        name: "MIP Start Slice",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x45) => Ok(Item {
        tag,
        name: "MIP Start Row",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Signal Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x83) => Ok(Item {
        tag,
        name: "Filter Type for Image Data",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x44) => Ok(Item {
        tag,
        name: "AC Element Noise Level",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x34) => Ok(Item {
        tag,
        name: "Number of 3D Image Partitions",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "First Measured Fourier Line",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x93) => Ok(Item {
        tag,
        name: "EPI Change Value of Magnitude",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x43) => Ok(Item {
        tag,
        name: "Current Group Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Filter Parameter for Raw Data",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(4),
        },
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "EPI Reconstruction Phase",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x60) => Ok(Item {
        tag,
        name: "Number of Interpolated Images",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x43) => Ok(Item {
        tag,
        name: "AC Element To ADC Connect",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x97) => Ok(Item {
        tag,
        name: "Coil Class Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "AC Element Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x31) => Ok(Item {
        tag,
        name: "Number of 3D Raw Partitions current",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Phase Corrections Rows sequence",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x98) => Ok(Item {
        tag,
        name: "Coil Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x54) => Ok(Item {
        tag,
        name: "Number of Trigger Pulses",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x22) => Ok(Item {
        tag,
        name: "Phase Corrections Rows reconstruction",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x53) => Ok(Item {
        tag,
        name: "RRInterval",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x48) => Ok(Item {
        tag,
        name: "MIP Stop Column",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x70) => Ok(Item {
        tag,
        name: "Number of Echoes",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x41) => Ok(Item {
        tag,
        name: "Number of Slices current",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Total Measurement Time nominal",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x91) => Ok(Item {
        tag,
        name: "Saturation Phase Encoding Vector Transversal Co...",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Number of Fourier Lines after Zero",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Total Measurement Time current",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Number of Saturation Regions",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x24) => Ok(Item {
        tag,
        name: "Phase Corrections Columns reconstruction",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x52) => Ok(Item {
        tag,
        name: "Delay after Trigger",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "Measurement Status Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x47) => Ok(Item {
        tag,
        name: "MIP Start Column",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Number of Averages current",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "Reconstruction Columns",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "AC Element Select Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x39) => Ok(Item {
        tag,
        name: "Slab Thickness",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x85) => Ok(Item {
        tag,
        name: "Filter Type for Phase Correction",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "Sequence Control Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x95) => Ok(Item {
        tag,
        name: "EPI Change Value of Y Component",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x94) => Ok(Item {
        tag,
        name: "EPI Change Value of X Component",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x44) => Ok(Item {
        tag,
        name: "Current Slice Distance Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "Dwell Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "Saturation Readout Vector Sagittal Component",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(5),
        },
      }),
      (0x00, 0x21, _, 0x80) => Ok(Item {
        tag,
        name: "Cardiac Code",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x56) => Ok(Item {
        tag,
        name: "Repetition Time effective",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x73) => Ok(Item {
        tag,
        name: "Second Repetition Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x72) => Ok(Item {
        tag,
        name: "Second Echo Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x57) => Ok(Item {
        tag,
        name: "Gate Phase",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x42) => Ok(Item {
        tag,
        name: "Current Slice Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Number of Prescans",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "EPI Reconstruction Slope",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x46) => Ok(Item {
        tag,
        name: "MIP Stop Row",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x87) => Ok(Item {
        tag,
        name: "Normalization Filter Type for Image Data",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Number of Fourier Lines nominal",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x45) => Ok(Item {
        tag,
        name: "AC ADC Pair Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "AC Element Data Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x36) => Ok(Item {
        tag,
        name: "Actual 3D Image Partition Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x40) => Ok(Item {
        tag,
        name: "Number of Slices nominal",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x88) => Ok(Item {
        tag,
        name: "Normalization Filter Parameter for Image Data",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(4),
        },
      }),
      (0x00, 0x21, _, 0x96) => Ok(Item {
        tag,
        name: "EPI Change Value of Z Component",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Flip Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "Number of Phases",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x21) => Ok(Item {
        tag,
        name: "Phase Corrections Columns sequence",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "Number of Fourier Lines current",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x96) => Ok(Item {
        tag,
        name: "Coil ID Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "Filter Type for Raw Data",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x59) => Ok(Item {
        tag,
        name: "Gated Ratio",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x84) => Ok(Item {
        tag,
        name: "Filter Parameter for Image Data",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(4),
        },
      }),
      (0x00, 0x19, _, 0x91) => Ok(Item {
        tag,
        name: "Saturation Phase Encoding Vector Sagittal Compo...",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(5),
        },
      }),
      _ => Err(()),
    },
    "TOSHIBA_MEC_MR3" => match (g0, g1, e0, e1) {
      (0x70, 0x0d, _, 0x00) => Ok(Item {
        tag,
        name: "Scale Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x01) => Ok(Item {
        tag,
        name: "Acquisition Order",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x02) => Ok(Item {
        tag,
        name: "Orientation Vector",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 9,
          max: Some(9),
        },
      }),
      (0x70, 0x0d, _, 0x03) => Ok(Item {
        tag,
        name: "Flip Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x04) => Ok(Item {
        tag,
        name: "Rotate Information",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x05) => Ok(Item {
        tag,
        name: "FOV",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x06) => Ok(Item {
        tag,
        name: "Image Matrix",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_4,
      }),
      (0x70, 0x0d, _, 0x07) => Ok(Item {
        tag,
        name: "Image Information",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x08) => Ok(Item {
        tag,
        name: "Original Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x09) => Ok(Item {
        tag,
        name: "Original Data Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x0c) => Ok(Item {
        tag,
        name: "Receiver Gain Correction Check Flag",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x20) => Ok(Item {
        tag,
        name: "Identification Flag of 3D GDC",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x80) => Ok(Item {
        tag,
        name: "Number of PAC channel",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x81) => Ok(Item {
        tag,
        name: "Reference mode",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x82) => Ok(Item {
        tag,
        name: "Gain value group for MRS",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x83) => Ok(Item {
        tag,
        name: "Gain value of each channel for MRS",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x84) => Ok(Item {
        tag,
        name: "Phase value of each channel for MRS",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x85) => Ok(Item {
        tag,
        name: "Reference gain value of each channel for MRS",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x86) => Ok(Item {
        tag,
        name: "Reference gain value of each channel for MRS",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x87) => Ok(Item {
        tag,
        name: "Receiver gain of reference scan",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x88) => Ok(Item {
        tag,
        name: "Flag of water Sat pulse",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x89) => Ok(Item {
        tag,
        name: "Selected contrast TE",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x8a) => Ok(Item {
        tag,
        name: "Raw Data Set Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x8b) => Ok(Item {
        tag,
        name: "Multi Slice number",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x8c) => Ok(Item {
        tag,
        name: "Multi Coverage number",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x8d) => Ok(Item {
        tag,
        name: "Raw Data Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x8e) => Ok(Item {
        tag,
        name: "Coil Channel No.",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x8f) => Ok(Item {
        tag,
        name: "MRS Raw Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x90) => Ok(Item {
        tag,
        name: "MRS Ref Raw Data",
        vrs: &[ValueRepresentation::OtherFloatString],
        multiplicity: VM_1,
      }),
      (0x70, 0x0d, _, 0x91) => Ok(Item {
        tag,
        name: "Receiver gain of prescan",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED SMS USG S2000" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x46) => Ok(Item {
        tag,
        name: "Color Flow Smooth Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "M-Mode Dynamic Range",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2d) => Ok(Item {
        tag,
        name: "B-Mode Tint Index",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x86) => Ok(Item {
        tag,
        name: "M-Mode Tint Type",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x66) => Ok(Item {
        tag,
        name: "Doppler Submode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6a) => Ok(Item {
        tag,
        name: "Doppler Trace Inverted",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3c) => Ok(Item {
        tag,
        name: "Thumbnail Data",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2a) => Ok(Item {
        tag,
        name: "B-Mode Tint Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3a) => Ok(Item {
        tag,
        name: "Image Flag",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x83) => Ok(Item {
        tag,
        name: "M-Mode Map Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "S2000 Private Doppler Wall Filter",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x44) => Ok(Item {
        tag,
        name: "Color Flow Res/Speed Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Frame Rate",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "??",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x65) => Ok(Item {
        tag,
        name: "Doppler Map Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "M-Mode Edge Enhance Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x43) => Ok(Item {
        tag,
        name: "Color Flow Overall Gain",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x49) => Ok(Item {
        tag,
        name: "Color Flow Priority Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Color Flow state",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Private Creator Version",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "Burned in Graphics",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x48) => Ok(Item {
        tag,
        name: "Color Flow Map Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "B-Mode Res/Speed Index",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "B-Mode Map Index",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "B-Mode Edge Enhance Index",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x47) => Ok(Item {
        tag,
        name: "Color Flow Persistence Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x29) => Ok(Item {
        tag,
        name: "??",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0d) => Ok(Item {
        tag,
        name: "SieClear Index",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "??",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "Color Flow Maximum Velocity",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "Color Flow Wall Filter Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2e) => Ok(Item {
        tag,
        name: "ClarifyVE Index",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "Doppler Overall Gain",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x69) => Ok(Item {
        tag,
        name: "Doppler Time/Freq Res Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "B-Mode Overall Gain",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6c) => Ok(Item {
        tag,
        name: "Doppler Tint Type",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x87) => Ok(Item {
        tag,
        name: "M-Mode Submode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3b) => Ok(Item {
        tag,
        name: "IPDA/MDA Data",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "B-Mode Submode",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "B-Mode Persistence Index",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "Color Flow Submode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x88) => Ok(Item {
        tag,
        name: "M-Mode Tint Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Doppler Dynamic Range",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "B-Mode Dynamic Range",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "M-Mode Overall Gain",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "Doppler Tint Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x63) => Ok(Item {
        tag,
        name: "Attributes Doppler Gate Size",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips Imaging DD 070" => match (g0, g1, e0, e1) {
      (0x40, 0x01, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x40, 0x01, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x40, 0x01, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x40, 0x01, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x40, 0x01, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x40, 0x01, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x40, 0x01, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x40, 0x01, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_Ultrasound_ImageGroup_001" => match (g0, g1, e0, e1) {
      (0x60, 0x03, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x60, 0x03, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Eclipse 60" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0xff) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0a) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x59) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x20) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x08) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x35) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x50) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x54) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x33) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x52) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0e) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x34) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x77, 0x77, _, 0x10) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x77, 0x77, _, 0x01) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x33) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x09) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x37) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x05) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x52) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x30) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x5e) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x56) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x77, 0x77, _, 0x02) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x06) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x1a) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x28) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0f) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x04) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x38) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x10) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x33) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x36) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x1b) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x58) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x36) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x77, 0x77, _, 0x14) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x5d) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x32) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x57) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x07) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x15) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x39) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x54) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x53) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x02) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x31) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x01) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x11) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x55) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x40) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x5a) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x51) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0c) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x14) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x56) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x53) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x32) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0b) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x12) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x34) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x55) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x03) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x51) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0d) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x13) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x77, 0x77, _, 0x03) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x3a) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x35) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x31) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x27) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x30) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CBT RECON FILTER TYPE" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x90) => Ok(Item {
        tag,
        name: "Reconstruction Filter Type",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_DL_IMG_01" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "Source Frame Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x46) => Ok(Item {
        tag,
        name: "Max Object Speed",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xbe) => Ok(Item {
        tag,
        name: "Source to image distance per frame vector",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xba) => Ok(Item {
        tag,
        name: "Acquisition region",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Image Dose",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9b) => Ok(Item {
        tag,
        name: "Grid",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb3) => Ok(Item {
        tag,
        name: "Acquisition Protocol User Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa3) => Ok(Item {
        tag,
        name: "Image Rotation",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x86) => Ok(Item {
        tag,
        name: "Calibration Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe2) => Ok(Item {
        tag,
        name: "Carm Lateral Angle",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x95) => Ok(Item {
        tag,
        name: "Image Sweep",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x93) => Ok(Item {
        tag,
        name: "Spatial Change",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Image File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xbb) => Ok(Item {
        tag,
        name: "Acquisition SUB mode",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "Default Spatial Filter Strength",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xbd) => Ok(Item {
        tag,
        name: "Table rotation status vector",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xaf) => Ok(Item {
        tag,
        name: "kVp actual vector",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x3a) => Ok(Item {
        tag,
        name: "Sensor Roi x Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb1) => Ok(Item {
        tag,
        name: "Acquisition Mode Description",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe4) => Ok(Item {
        tag,
        name: "Carm Lateral Angle increment",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x94) => Ok(Item {
        tag,
        name: "Inconsistent Flag",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xde) => Ok(Item {
        tag,
        name: "Acquisition Plane",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x55) => Ok(Item {
        tag,
        name: "Source Frame Item Id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd4) => Ok(Item {
        tag,
        name: "Detection gain value",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x83) => Ok(Item {
        tag,
        name: "Calibration Object Size mm",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xed) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xec) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xca) => Ok(Item {
        tag,
        name: "3Dspin expected number of frames",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x44) => Ok(Item {
        tag,
        name: "Min Object Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3e) => Ok(Item {
        tag,
        name: "Sharp Sensitivity",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe1) => Ok(Item {
        tag,
        name: "Pivot Lateral Angle",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x51) => Ok(Item {
        tag,
        name: "Source Image Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Calibration Object",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "ABD Value",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa6) => Ok(Item {
        tag,
        name: "Injection Delay",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x34) => Ok(Item {
        tag,
        name: "Detector Gain",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x43) => Ok(Item {
        tag,
        name: "Detector Size Columns",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8c) => Ok(Item {
        tag,
        name: "Calibration Points Row",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x49) => Ok(Item {
        tag,
        name: "Window Time Duration",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x97) => Ok(Item {
        tag,
        name: "Angle 1 Increment",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa9) => Ok(Item {
        tag,
        name: "EPT",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xae) => Ok(Item {
        tag,
        name: "SUB operator LUTs names",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Lag Sensitivity",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8f) => Ok(Item {
        tag,
        name: "Calibration Sw Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2b) => Ok(Item {
        tag,
        name: "Distance to table top",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x98) => Ok(Item {
        tag,
        name: "Angle 2 Increment",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe0) => Ok(Item {
        tag,
        name: "DAP of current record",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xac) => Ok(Item {
        tag,
        name: "Brightness Sensitivity",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9a) => Ok(Item {
        tag,
        name: "Sensor Feedback",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x37) => Ok(Item {
        tag,
        name: "Sensor Roi Shape",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "LV Diastolic contour",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_2_TO_N,
      }),
      (0x00, 0x19, _, 0x48) => Ok(Item {
        tag,
        name: "Exposure Trajectory Family",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9d) => Ok(Item {
        tag,
        name: "Applicable Review Mode",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaa) => Ok(Item {
        tag,
        name: "Can Downscan 512",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc5) => Ok(Item {
        tag,
        name: "Preselected pivot rotation speed",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc4) => Ok(Item {
        tag,
        name: "Spectral filter thickness",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb0) => Ok(Item {
        tag,
        name: "mAs actual vector",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xdf) => Ok(Item {
        tag,
        name: "LP off longitudinal position Z",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x4c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x33) => Ok(Item {
        tag,
        name: "Min Saturation Dose",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x35) => Ok(Item {
        tag,
        name: "Patient Dose Limit",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x47) => Ok(Item {
        tag,
        name: "Object Back Motion",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x38) => Ok(Item {
        tag,
        name: "Sensor Roi x Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9e) => Ok(Item {
        tag,
        name: "Log Lut Control Points",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x39) => Ok(Item {
        tag,
        name: "Sensor Roi y Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb8) => Ok(Item {
        tag,
        name: "Recommended display frame rate float",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc2) => Ok(Item {
        tag,
        name: "pw actual vector",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Extend Calibration Sw Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0d) => Ok(Item {
        tag,
        name: "LV Systolic contour",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_2_TO_N,
      }),
      (0x00, 0x19, _, 0x3d) => Ok(Item {
        tag,
        name: "Noise Sensitivity",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xad) => Ok(Item {
        tag,
        name: "Exp Lut NOSUB Control Points",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "Source Image Item Id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd5) => Ok(Item {
        tag,
        name: "mR mAs calibration value",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8a) => Ok(Item {
        tag,
        name: "Calibration Frame Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9c) => Ok(Item {
        tag,
        name: "Default Mask Pixel Shift",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Source Series Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa5) => Ok(Item {
        tag,
        name: "Injection Phase",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4e) => Ok(Item {
        tag,
        name: "Default Brightness Contrast",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "Default Spatial Filter Family",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xdc) => Ok(Item {
        tag,
        name: "DRM LUT file name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "Tube",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x85) => Ok(Item {
        tag,
        name: "Calibration Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0b) => Ok(Item {
        tag,
        name: "Fov Dimension Double",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc7) => Ok(Item {
        tag,
        name: "Patient position per image",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xdd) => Ok(Item {
        tag,
        name: "DRM Strength",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xb9) => Ok(Item {
        tag,
        name: "ABD Vector",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xa2) => Ok(Item {
        tag,
        name: "Sub Window Width",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x36) => Ok(Item {
        tag,
        name: "Preproc Image Rate Max",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc8) => Ok(Item {
        tag,
        name: "3D structure of interest",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe7) => Ok(Item {
        tag,
        name: "LP off long pos Z first frame",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "Detector Rotation Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3f) => Ok(Item {
        tag,
        name: "Contrast Sensitivity",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe8) => Ok(Item {
        tag,
        name: "LP off long pos Z increment",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x89) => Ok(Item {
        tag,
        name: "Calibration Image Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xbc) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb2) => Ok(Item {
        tag,
        name: "Acquisition Mode Display Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x99) => Ok(Item {
        tag,
        name: "Angle 3 Increment",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa4) => Ok(Item {
        tag,
        name: "Auto Injection Enabled",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa7) => Ok(Item {
        tag,
        name: "Reference Injection Frame Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4b) => Ok(Item {
        tag,
        name: "Detector Origin",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8b) => Ok(Item {
        tag,
        name: "Calibration Number Of Points Uif",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9f) => Ok(Item {
        tag,
        name: "Exp Lut Control Points",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa8) => Ok(Item {
        tag,
        name: "Injection Duration",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe3) => Ok(Item {
        tag,
        name: "Pivot Lateral Angle increment",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Sub Window Center",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xeb) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x87) => Ok(Item {
        tag,
        name: "Calibration Accuracy",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3b) => Ok(Item {
        tag,
        name: "Sensor Roi y Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x45) => Ok(Item {
        tag,
        name: "Max Object Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "Detector Size Rows",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x53) => Ok(Item {
        tag,
        name: "Source Series Item Id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xea) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe9) => Ok(Item {
        tag,
        name: "Source to detector distance per frame vector",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x8e) => Ok(Item {
        tag,
        name: "Calibration Magnification Ratio",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x88) => Ok(Item {
        tag,
        name: "Calibration Extended",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x96) => Ok(Item {
        tag,
        name: "Internal Label Image",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "Calibration Frame",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4a) => Ok(Item {
        tag,
        name: "Positioner Angle Display Mode",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc9) => Ok(Item {
        tag,
        name: "3D calibration out of date flag",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x84) => Ok(Item {
        tag,
        name: "Calibration Factor",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x91) => Ok(Item {
        tag,
        name: "Calibration Return Code",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8d) => Ok(Item {
        tag,
        name: "Calibration Points Column",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4f) => Ok(Item {
        tag,
        name: "User Brightness Contrast",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xab) => Ok(Item {
        tag,
        name: "Current Spatial Filter Strength",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AgilityRuntime" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SECTRA_ImageInfo_01" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Image info",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Marking",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "No Decompression",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Image Info new",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MITRA OBJECT ATTRIBUTES 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x33, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_HELIOS_01" => match (g0, g1, e0, e1) {
      (0x00, 0x45, _, 0x0c) => Ok(Item {
        tag,
        name: "Number of Views shifted",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x21) => Ok(Item {
        tag,
        name: "Iterbone Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x30) => Ok(Item {
        tag,
        name: "CardiacReconAlgorithm",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x09) => Ok(Item {
        tag,
        name: "Sigma Row number",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x20) => Ok(Item {
        tag,
        name: "Cross Talk Calibration Time",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x04) => Ok(Item {
        tag,
        name: "DAS gain",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x06) => Ok(Item {
        tag,
        name: "Table Direction",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x1e) => Ok(Item {
        tag,
        name: "Z Slope Calibration Time",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x14) => Ok(Item {
        tag,
        name: "Number of Views 1A",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x05) => Ok(Item {
        tag,
        name: "DAS Temperature",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x36) => Ok(Item {
        tag,
        name: "EkgFullMaStartPhase",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x0f) => Ok(Item {
        tag,
        name: "Z tracking Error",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x12) => Ok(Item {
        tag,
        name: "Start View 1A",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x02) => Ok(Item {
        tag,
        name: "Macro width at ISO Center",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x13) => Ok(Item {
        tag,
        name: "Sigma Mode",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x11) => Ok(Item {
        tag,
        name: "Number of Views 2A",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x03) => Ok(Item {
        tag,
        name: "DAS type",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x01) => Ok(Item {
        tag,
        name: "Number of Macro Rows in Detector",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x1b) => Ok(Item {
        tag,
        name: "Phantom Calibration Date",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x22) => Ok(Item {
        tag,
        name: "Perisstaltic Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x1d) => Ok(Item {
        tag,
        name: "Z Slope Calibration Date",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x07) => Ok(Item {
        tag,
        name: "Z smoothing Factor",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x10) => Ok(Item {
        tag,
        name: "Start View 2A",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x15) => Ok(Item {
        tag,
        name: "Start View 2B",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x32) => Ok(Item {
        tag,
        name: "TemporalResolution",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x08) => Ok(Item {
        tag,
        name: "View Weighting Mode",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x19) => Ok(Item {
        tag,
        name: "Air Calibration Date",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x33) => Ok(Item {
        tag,
        name: "PctRpeakDelay",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x3b) => Ok(Item {
        tag,
        name: "NoiseReductionImageFilterDesc",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x1f) => Ok(Item {
        tag,
        name: "Cross Talk Calibration Date",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x1c) => Ok(Item {
        tag,
        name: "Phantom Calibration Time",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x39) => Ok(Item {
        tag,
        name: "EkgModulationMinMa",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x0d) => Ok(Item {
        tag,
        name: "Z tracking Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x34) => Ok(Item {
        tag,
        name: "ActualPctRpeakDelay",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x31) => Ok(Item {
        tag,
        name: "AvgHeartRateForImage",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x1a) => Ok(Item {
        tag,
        name: "Air Calibration Time",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x0a) => Ok(Item {
        tag,
        name: "Minimum DAS value",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x17) => Ok(Item {
        tag,
        name: "Start View 1B",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x0e) => Ok(Item {
        tag,
        name: "Mean Z error",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x0b) => Ok(Item {
        tag,
        name: "Maximum Offset Value",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x18) => Ok(Item {
        tag,
        name: "Number of Views 1B",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x16) => Ok(Item {
        tag,
        name: "Number Views 2B",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x38) => Ok(Item {
        tag,
        name: "EkgModulationMaxMa",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x37) => Ok(Item {
        tag,
        name: "EkgFullMaEndPhase",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "APEX_PRIVATE" => match (g0, g1, e0, e1) {
      (0x00, 0x27, _, 0x10) => Ok(Item {
        tag,
        name: "Private Creator",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x11) => Ok(Item {
        tag,
        name: "Bed Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "TMDTK" => match (g0, g1, e0, e1) {
      (0x7e, 0xff, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x7e, 0xff, _, 0x2e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips Imaging DD 129" => match (g0, g1, e0, e1) {
      (0x20, 0x01, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CBT RECON SLICE WIDTH" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x87) => Ok(Item {
        tag,
        name: "Reconstruction Slice Width",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CM VA0  LAB" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Generator Identification Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "Gantry Identification Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "XRay Tube Identification Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x13) => Ok(Item {
        tag,
        name: "Detector Identification Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x14) => Ok(Item {
        tag,
        name: "DAS Identification Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x15) => Ok(Item {
        tag,
        name: "SMI Identification Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x16) => Ok(Item {
        tag,
        name: "CPU Identification Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "Header Version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "TOSHIBA_MEC_XA3" => match (g0, g1, e0, e1) {
      (0x70, 0x79, _, 0x43) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x3f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x6c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x41) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x64) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x6a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x74) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: ValueMultiplicity {
          min: 28,
          max: Some(28),
        },
      }),
      (0x70, 0x79, _, 0x5a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x31) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x33) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x2c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_3,
      }),
      (0x70, 0x79, _, 0x80) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x2a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_5,
      }),
      (0x70, 0x79, _, 0x7b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x2f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x3b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x27) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x58) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x6d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x45) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x32) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x61) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: ValueMultiplicity { min: 30, max: None },
      }),
      (0x70, 0x79, _, 0x5b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x5d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x2d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x68) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x5f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: ValueMultiplicity { min: 4, max: None },
      }),
      (0x70, 0x79, _, 0x3e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x2e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x67) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x42) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x76) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x28) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x59) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2_TO_N,
      }),
      (0x70, 0x79, _, 0x51) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x38) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x60) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x48) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: ValueMultiplicity {
          min: 12,
          max: Some(12),
        },
      }),
      (0x70, 0x79, _, 0x2b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x49) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_3,
      }),
      (0x70, 0x79, _, 0x54) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_5,
      }),
      (0x70, 0x79, _, 0x4f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_3,
      }),
      (0x70, 0x79, _, 0x62) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_4,
      }),
      (0x70, 0x79, _, 0x5c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2_TO_N,
      }),
      (0x70, 0x79, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x73) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x70, 0x79, _, 0x46) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x55) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: ValueMultiplicity { min: 47, max: None },
      }),
      (0x70, 0x79, _, 0x37) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_4,
      }),
      (0x70, 0x79, _, 0x3d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x4c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x30) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x70) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x47) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: ValueMultiplicity {
          min: 18,
          max: Some(18),
        },
      }),
      (0x70, 0x79, _, 0x25) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x79) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x65) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x82) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x52) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x22) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x56) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x35) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x3a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x81) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x72) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x63) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x21) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_5,
      }),
      (0x70, 0x79, _, 0x4e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: ValueMultiplicity {
          min: 35,
          max: Some(35),
        },
      }),
      (0x70, 0x79, _, 0x3c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x26) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x44) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x34) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x40) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x6e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x4b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_3,
      }),
      (0x70, 0x79, _, 0x69) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x6b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x39) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x24) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x78) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x36) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x57) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x6f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x66) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x23) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x50) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x4d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_3,
      }),
      (0x70, 0x79, _, 0x4a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x75) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x53) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x5e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x70, 0x79, _, 0x71) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x79, _, 0x77) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x70, 0x79, _, 0x29) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: ValueMultiplicity {
          min: 10,
          max: Some(10),
        },
      }),
      _ => Err(()),
    },
    "http://www.gemedicalsystems.com/it_solutions/orthoview/2.1" => {
      match (g0, g1, e0, e1) {
        (0x31, 0x17, _, 0x10) => Ok(Item {
          tag,
          name: "OrthoView Session Date/Time",
          vrs: &[ValueRepresentation::DateTime],
          multiplicity: VM_1,
        }),
        (0x31, 0x17, _, 0x20) => Ok(Item {
          tag,
          name: "OrthoView Session Creator",
          vrs: &[ValueRepresentation::PersonName],
          multiplicity: VM_1,
        }),
        (0x31, 0x17, _, 0x30) => Ok(Item {
          tag,
          name: "OrthoView Session Completion Flag",
          vrs: &[ValueRepresentation::CodeString],
          multiplicity: VM_1,
        }),
        (0x31, 0x17, _, 0x40) => Ok(Item {
          tag,
          name: "OrthoView File Sequence",
          vrs: &[ValueRepresentation::Sequence],
          multiplicity: VM_1,
        }),
        (0x31, 0x17, _, 0x50) => Ok(Item {
          tag,
          name: "OrthoView File Name",
          vrs: &[ValueRepresentation::ShortText],
          multiplicity: VM_1,
        }),
        (0x31, 0x17, _, 0x60) => Ok(Item {
          tag,
          name: "OrthoView File Content",
          vrs: &[ValueRepresentation::OtherByteString],
          multiplicity: VM_1,
        }),
        _ => Err(()),
      }
    }
    "AMI StudyExtensions_01" => match (g0, g1, e0, e1) {
      (0x31, 0x11, _, 0x01) => Ok(Item {
        tag,
        name: "AMI Last Released Annot Label (RET)",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ISG shadow" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED DISPLAY" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Photometric Interpretation",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Rows",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "Columns",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "Origin",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x00, 0x29, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x99) => Ok(Item {
        tag,
        name: "Shutter Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xa0) => Ok(Item {
        tag,
        name: "Rows of Rectangular Shutter",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xa1) => Ok(Item {
        tag,
        name: "Columns of Rectangular Shutter",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xa2) => Ok(Item {
        tag,
        name: "Origin of Rectangular Shutter",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb0) => Ok(Item {
        tag,
        name: "Radius of Circular Shutter",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb2) => Ok(Item {
        tag,
        name: "Origin of Circular Shutter",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xc1) => Ok(Item {
        tag,
        name: "Contour of Irregular Shutter",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P Release 1;2" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Subtraction Mask ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Masking Function",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0c) => Ok(Item {
        tag,
        name: "Proprietary Masking Parameters",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1e) => Ok(Item {
        tag,
        name: "Subtraction Mask Enable Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1f) => Ok(Item {
        tag,
        name: "Subtraction Mask Select Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SCHICK TECHNOLOGIES - Change List Creator ID" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Reference Image Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS PI VALID PIXEL MAP" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x92) => Ok(Item {
        tag,
        name: "Valid Pixel Map Flag",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Applicare/Workflow/Version 1.0" => match (g0, g1, e0, e1) {
      (0x31, 0x13, _, 0x01) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x10) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x11) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x12) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x15) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x16) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x17) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x20) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x21) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x22) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x25) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x26) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x27) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x30) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x31) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0xe0) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0xe1) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0xe2) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "VEPRO DICOM RECEIVE DATA 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x59, _, 0x40) => Ok(Item {
        tag,
        name: "Receive date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x59, _, 0x41) => Ok(Item {
        tag,
        name: "Receive time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x59, _, 0x42) => Ok(Item {
        tag,
        name: "Receive node",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x59, _, 0x43) => Ok(Item {
        tag,
        name: "Receive application",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x59, _, 0x50) => Ok(Item {
        tag,
        name: "Receive local computer",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x59, _, 0x51) => Ok(Item {
        tag,
        name: "Receive local ae title",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x59, _, 0x60) => Ok(Item {
        tag,
        name: "Receive remote computer",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x59, _, 0x61) => Ok(Item {
        tag,
        name: "Receive remote ae title",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x59, _, 0x70) => Ok(Item {
        tag,
        name: "Receive original transfer syntax",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GE_GROUP" => match (g0, g1, e0, e1) {
      (0x60, 0x05, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_ACRQA_2.0 BLOCK1" => match (g0, g1, e0, e1) {
      (0x00, 0x23, _, 0x00) => Ok(Item {
        tag,
        name: "CR Exposure Menu Code",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x10) => Ok(Item {
        tag,
        name: "CR Exposure Menu String",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x20) => Ok(Item {
        tag,
        name: "CR EDR Mode",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x30) => Ok(Item {
        tag,
        name: "CR Latitude",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x40) => Ok(Item {
        tag,
        name: "CR Group Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x50) => Ok(Item {
        tag,
        name: "CR Image Serial Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x60) => Ok(Item {
        tag,
        name: "CR Bar Code Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x70) => Ok(Item {
        tag,
        name: "CR Film Output Exposure",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x80) => Ok(Item {
        tag,
        name: "CR Film Format",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x90) => Ok(Item {
        tag,
        name: "CR S Shift String",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 041" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_PATI_01" => match (g0, g1, e0, e1) {
      (0x00, 0x11, 0x10, _) => Ok(Item {
        tag,
        name: "Private Element Creator",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "Patient Status",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Silhouette VRS 3.0" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_2,
      }),
      (0x00, 0x29, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_2,
      }),
      (0x00, 0x29, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_3,
      }),
      (0x00, 0x29, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_3,
      }),
      (0x00, 0x29, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x35) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x36) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SCHICK TECHNOLOGIES - Image Security Creator ID" => match (g0, g1, e0, e1)
    {
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Image Checksum",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_YMHD_01" => match (g0, g1, e0, e1) {
      (0x00, 0x33, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "IDEXX" => match (g0, g1, e0, e1) {
      (0x00, 0x11, _, 0x00) => Ok(Item {
        tag,
        name: "Breed Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x01) => Ok(Item {
        tag,
        name: "Species Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x02) => Ok(Item {
        tag,
        name: "Owner",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Applicare/RadStore/Version 1.0" => match (g0, g1, e0, e1) {
      (0x31, 0x13, _, 0x21) => Ok(Item {
        tag,
        name: "Version",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x36) => Ok(Item {
        tag,
        name: "ImageMediumLabel",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x04) => Ok(Item {
        tag,
        name: "Id3",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x14) => Ok(Item {
        tag,
        name: "DateLastAccessed",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x69) => Ok(Item {
        tag,
        name: "DeletedTags",
        vrs: &[ValueRepresentation::AttributeTag],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x37) => Ok(Item {
        tag,
        name: "ImageMediumState",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x3a) => Ok(Item {
        tag,
        name: "SeriesMediumState",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x15) => Ok(Item {
        tag,
        name: "OBSOLETE",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x22) => Ok(Item {
        tag,
        name: "OBSOLETE",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x57) => Ok(Item {
        tag,
        name: "StudyStateText",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x16) => Ok(Item {
        tag,
        name: "ByteSize",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x02) => Ok(Item {
        tag,
        name: "Id1",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x53) => Ok(Item {
        tag,
        name: "SeriesState",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x55) => Ok(Item {
        tag,
        name: "ImageStateText",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x56) => Ok(Item {
        tag,
        name: "SeriesStateText",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x1e) => Ok(Item {
        tag,
        name: "Origin",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x31) => Ok(Item {
        tag,
        name: "OBSOLETE",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x60) => Ok(Item {
        tag,
        name: "Expiration",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x18) => Ok(Item {
        tag,
        name: "Pathnames",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x1d) => Ok(Item {
        tag,
        name: "ArchiveId",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x3d) => Ok(Item {
        tag,
        name: "StudyMediumState",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x38) => Ok(Item {
        tag,
        name: "SeriesMediumLocation",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x17) => Ok(Item {
        tag,
        name: "LibraryId",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x13) => Ok(Item {
        tag,
        name: "DateLastModified",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x32) => Ok(Item {
        tag,
        name: "OBSOLETE",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x1b) => Ok(Item {
        tag,
        name: "Destination",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x01) => Ok(Item {
        tag,
        name: "OBSOLETE",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x33) => Ok(Item {
        tag,
        name: "OBSOLETE",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x23) => Ok(Item {
        tag,
        name: "InstanceFileLocation",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x1a) => Ok(Item {
        tag,
        name: "Source",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x3c) => Ok(Item {
        tag,
        name: "StudyMediumLabel",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x3b) => Ok(Item {
        tag,
        name: "StudyMediumLocation",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x52) => Ok(Item {
        tag,
        name: "StudyState",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x1c) => Ok(Item {
        tag,
        name: "MediumId",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x39) => Ok(Item {
        tag,
        name: "SeriesMediumLabel",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x03) => Ok(Item {
        tag,
        name: "Id2",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x19) => Ok(Item {
        tag,
        name: "DriverPath",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x35) => Ok(Item {
        tag,
        name: "ImageMediumLocation",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x12) => Ok(Item {
        tag,
        name: "State",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x13, _, 0x11) => Ok(Item {
        tag,
        name: "OBSOLETE",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips EnVisor" => match (g0, g1, e0, e1) {
      (0x77, 0x77, _, 0x01) => Ok(Item {
        tag,
        name: "Date 3D/PanView internal 'dataset' file was acquired",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x77, 0x77, _, 0x02) => Ok(Item {
        tag,
        name: "Type of 3D or PanView",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x77, 0x77, _, 0x03) => Ok(Item {
        tag,
        name: "Internal 3D/PanView software version number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x77, 0x77, _, 0x14) => Ok(Item {
        tag,
        name: "Private string",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CBT PATIENT_ORIENTATION" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x93) => Ok(Item {
        tag,
        name: "Patient Orientation",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_AWSoft_SB1" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x50) => Ok(Item {
        tag,
        name: "Reference to Study UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x51) => Ok(Item {
        tag,
        name: "Reference to Series UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x52) => Ok(Item {
        tag,
        name: "Reference to Original Instance Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x95) => Ok(Item {
        tag,
        name: "Private Entity Launch Command",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-GV-CT Release 1" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x33) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xb0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x65) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x75) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xd1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xd0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x64) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xc0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x63) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS COMMON EDGE" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x83) => Ok(Item {
        tag,
        name: "Common Edge",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 038" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MeVis eD: Slice Information" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "SlicesSOPInstanceUID",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS FIELD NAME" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x79) => Ok(Item {
        tag,
        name: "Field Name",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_AWSOFT_CD1" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x65) => Ok(Item {
        tag,
        name: "Reference to Study UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x70) => Ok(Item {
        tag,
        name: "Reference to Series UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x75) => Ok(Item {
        tag,
        name: "Reference to Original Instance",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x80) => Ok(Item {
        tag,
        name: "DPO Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x85) => Ok(Item {
        tag,
        name: "DPO Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x90) => Ok(Item {
        tag,
        name: "DPO Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x95) => Ok(Item {
        tag,
        name: "DPO Invocation String",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xaa) => Ok(Item {
        tag,
        name: "DPO type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xff) => Ok(Item {
        tag,
        name: "DPO data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_ACRQA_2.0 BLOCK2" => match (g0, g1, e0, e1) {
      (0x00, 0x23, _, 0x00) => Ok(Item {
        tag,
        name: "CR S Shift",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x10) => Ok(Item {
        tag,
        name: "CR C Shift",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x20) => Ok(Item {
        tag,
        name: "CR GT",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x30) => Ok(Item {
        tag,
        name: "CR GA",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x40) => Ok(Item {
        tag,
        name: "CR GC",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x50) => Ok(Item {
        tag,
        name: "CR GS",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x60) => Ok(Item {
        tag,
        name: "CR RT",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x70) => Ok(Item {
        tag,
        name: "CR RE",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x80) => Ok(Item {
        tag,
        name: "CR RN",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x90) => Ok(Item {
        tag,
        name: "CR DRT",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ACUSON: 1.2.840.11386.1.0" => match (g0, g1, e0, e1) {
      (0x7f, 0xdf, _, 0x00) => Ok(Item {
        tag,
        name: "Lossy Compression Ratio",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x01) => Ok(Item {
        tag,
        name: "Image Format",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x02) => Ok(Item {
        tag,
        name: "Acuson Region Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x0b) => Ok(Item {
        tag,
        name: "Acuson Image Apex X",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x0c) => Ok(Item {
        tag,
        name: "Acuson Image Apex Y",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x0d) => Ok(Item {
        tag,
        name: "B-Color-On Flag",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "KRETZ_US" => match (g0, g1, e0, e1) {
      (0x7f, 0xe1, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "1.2.840.113663.1" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips EV Imaging DD 021" => match (g0, g1, e0, e1) {
      (0x20, 0x07, _, 0x04) => Ok(Item {
        tag,
        name: "Vol Seg Edit Connectivity",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Picker MR Private Group" => match (g0, g1, e0, e1) {
      (0x71, 0x01, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x71, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x71, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x71, 0x01, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x71, 0x01, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x71, 0x01, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_2,
      }),
      (0x71, 0x01, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_4,
      }),
      (0x71, 0x01, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CM VA0  CMS" => match (g0, g1, e0, e1) {
      (0x60, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "Image Graphics Format Code",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Storage Mode",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x61) => Ok(Item {
        tag,
        name: "Image Normal",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x63) => Ok(Item {
        tag,
        name: "Image Distance",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x65) => Ok(Item {
        tag,
        name: "Image Positioning History Mask",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "Splash",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "View Direction",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Pixel Quality Code",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "Archive Code",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x23) => Ok(Item {
        tag,
        name: "Used Patient Weight",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Calculation Mode",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x13) => Ok(Item {
        tag,
        name: "Window Scale",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x52) => Ok(Item {
        tag,
        name: "Sort Code",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x6b) => Ok(Item {
        tag,
        name: "Image Column",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x12) => Ok(Item {
        tag,
        name: "Window Table Index",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x71) => Ok(Item {
        tag,
        name: "Patient Orientation Set 2",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x32) => Ok(Item {
        tag,
        name: "Rest Direction",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x60) => Ok(Item {
        tag,
        name: "Image Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Number of Measurements",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "Registration Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x33) => Ok(Item {
        tag,
        name: "Referring Physician",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x40) => Ok(Item {
        tag,
        name: "Procedure Description",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Field of View",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x13, _, 0x34) => Ok(Item {
        tag,
        name: "Admitting Diagnosis",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x27) => Ok(Item {
        tag,
        name: "Table Zero Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x32) => Ok(Item {
        tag,
        name: "Patient Maiden Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x42) => Ok(Item {
        tag,
        name: "Rest Direction",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x20) => Ok(Item {
        tag,
        name: "Patient Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x22) => Ok(Item {
        tag,
        name: "Image Magnification Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x60, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Image Graphics",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x70) => Ok(Item {
        tag,
        name: "Patient Orientation Set 1",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x13, _, 0x30) => Ok(Item {
        tag,
        name: "Patient Birthdate",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Net Frequency",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Window Style",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x55) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x56) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x31) => Ok(Item {
        tag,
        name: "Patient Weight",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x24) => Ok(Item {
        tag,
        name: "Image Scroll Offset",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x6a) => Ok(Item {
        tag,
        name: "Image Row",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x53) => Ok(Item {
        tag,
        name: "Remote Copy Code",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Noise Level",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x26) => Ok(Item {
        tag,
        name: "Table Zero Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x12) => Ok(Item {
        tag,
        name: "Modification Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x26) => Ok(Item {
        tag,
        name: "Image Pixel Offset",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x22) => Ok(Item {
        tag,
        name: "Pixel Quality Value",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x13, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "Window Look",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "Evaluation Mask Image",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x80) => Ok(Item {
        tag,
        name: "Study Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x00) => Ok(Item {
        tag,
        name: "Modifying Physician",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x46) => Ok(Item {
        tag,
        name: "View Direction",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x51) => Ok(Item {
        tag,
        name: "Exposure Code",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x22) => Ok(Item {
        tag,
        name: "Patient Id",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x44) => Ok(Item {
        tag,
        name: "Patient Position",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x13, _, 0x35) => Ok(Item {
        tag,
        name: "Patient Sex",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x10) => Ok(Item {
        tag,
        name: "Modification Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Measurement Mode",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x54) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x00) => Ok(Item {
        tag,
        name: "Binary Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x82) => Ok(Item {
        tag,
        name: "Study Type",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x11) => Ok(Item {
        tag,
        name: "Registration Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Number of Data Bytes",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x40) => Ok(Item {
        tag,
        name: "Organ Code",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x10) => Ok(Item {
        tag,
        name: "Image Text",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "ALOKA:1.2.392.200039.103.2" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x46) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x56) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips EV Imaging DD 017" => match (g0, g1, e0, e1) {
      (0x20, 0x07, _, 0xc1) => Ok(Item {
        tag,
        name: "? SOP Instance UID ?",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x20, 0x07, _, 0xc2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x20, 0x07, _, 0xc3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x20, 0x07, _, 0xc4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Mitra Presentation 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Mitra Rotation",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Mitra Window Width",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Mitra Window Centre",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "Mitra Invert",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Mitra Has Tabstop",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x05) => Ok(Item {
        tag,
        name: "Smooth Rotation",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_PETD_01" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x1c) => Ok(Item {
        tag,
        name: "PET sel_stop_cond",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xeb) => Ok(Item {
        tag,
        name: "3D Filter cutoff",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x65) => Ok(Item {
        tag,
        name: "PET patient_entry",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x1d) => Ok(Item {
        tag,
        name: "GE Advance Graph.y_axis_min",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x9c) => Ok(Item {
        tag,
        name: "PET emiss_sub_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x48) => Ok(Item {
        tag,
        name: "PET source2_meas_dt",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "PET hospital_name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x6e) => Ok(Item {
        tag,
        name: "PET acq_bin_dur",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x02) => Ok(Item {
        tag,
        name: "GE Advance Graph.graph_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x04) => Ok(Item {
        tag,
        name: "GE Advance Graph.software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xde) => Ok(Item {
        tag,
        name: "PET num_of_time_slots",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2a) => Ok(Item {
        tag,
        name: "PET collimation",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x58) => Ok(Item {
        tag,
        name: "PET blank_cal_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x07) => Ok(Item {
        tag,
        name: "PET exam_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x16) => Ok(Item {
        tag,
        name: "GE Advance Graph.x_axis_units",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x44) => Ok(Item {
        tag,
        name: "PET source1_radnuclide",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x7f) => Ok(Item {
        tag,
        name: "PET is_reference",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x00, 0x09, _, 0x98) => Ok(Item {
        tag,
        name: "PET norm_cal_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x07) => Ok(Item {
        tag,
        name: "GE Advance Curve.multi_patient",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xc2) => Ok(Item {
        tag,
        name: "PET ac_img_smooth_parm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x6b) => Ok(Item {
        tag,
        name: "PET acq_delay",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x4b) => Ok(Item {
        tag,
        name: "PET source_speed",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x05) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation.compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xa2) => Ok(Item {
        tag,
        name: "PET axial_spacing",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x0d) => Ok(Item {
        tag,
        name: "GE Advance Graph.background_color",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x5f) => Ok(Item {
        tag,
        name: "PET patient_id",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xa1) => Ok(Item {
        tag,
        name: "PET axial_start",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x4d) => Ok(Item {
        tag,
        name: "PET emission_present",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x13) => Ok(Item {
        tag,
        name: "GE Advance Annotation.annotation_size",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xa4) => Ok(Item {
        tag,
        name: "PET compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x0c) => Ok(Item {
        tag,
        name: "GE Advance ROI.height",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xd7) => Ok(Item {
        tag,
        name: "PET image_index_loc",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x60) => Ok(Item {
        tag,
        name: "PET compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x41) => Ok(Item {
        tag,
        name: "PET source1_holder",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x6c) => Ok(Item {
        tag,
        name: "PET acq_start",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x13) => Ok(Item {
        tag,
        name: "GE Advance Graph.label_font_size",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xb6) => Ok(Item {
        tag,
        name: "PET ir_loop_filter",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "PET scanner_desc",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x31) => Ok(Item {
        tag,
        name: "PET number_for_reject",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "PET axial_cutoff_3d",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xdc) => Ok(Item {
        tag,
        name: "PET ir_z_filter_ratio",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xbe) => Ok(Item {
        tag,
        name: "PET ac_bp_filter",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x55) => Ok(Item {
        tag,
        name: "PET lower_energy_limit",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x5d) => Ok(Item {
        tag,
        name: "PET scan_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x82) => Ok(Item {
        tag,
        name: "PET color_map_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0c) => Ok(Item {
        tag,
        name: "PET software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xd2) => Ok(Item {
        tag,
        name: "PET image_set_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xec) => Ok(Item {
        tag,
        name: "3D Filter order",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2f) => Ok(Item {
        tag,
        name: "PET binning_mode",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x43) => Ok(Item {
        tag,
        name: "PET source1_meas_dt",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x01) => Ok(Item {
        tag,
        name: "GE Advance ROI Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x87) => Ok(Item {
        tag,
        name: "PET pan_x",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x49) => Ok(Item {
        tag,
        name: "PET source2_radnuclide",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x11) => Ok(Item {
        tag,
        name: "GE Advance Annotation.end_symbol",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xb2) => Ok(Item {
        tag,
        name: "PET ir_num_iterations",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xd3) => Ok(Item {
        tag,
        name: "PET constrast_route",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xcb) => Ok(Item {
        tag,
        name: "PET vqc_x_axis_trans",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0f) => Ok(Item {
        tag,
        name: "PET meas_activity",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x12) => Ok(Item {
        tag,
        name: "GE Advance ROI.line_type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x05) => Ok(Item {
        tag,
        name: "PET cal_description",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x7b) => Ok(Item {
        tag,
        name: "PET is_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x23) => Ok(Item {
        tag,
        name: "GE Advance Graph.legend_width",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x0a) => Ok(Item {
        tag,
        name: "GE Advance ROI.center_y",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x97) => Ok(Item {
        tag,
        name: "PET trans_scan_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x8e) => Ok(Item {
        tag,
        name: "PET bp_filter",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x74) => Ok(Item {
        tag,
        name: "PET validity_info",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x12) => Ok(Item {
        tag,
        name: "GE Advance Graph.label_font_name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x0b) => Ok(Item {
        tag,
        name: "PET norm_2d_cal_id",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x76) => Ok(Item {
        tag,
        name: "PET compression",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x06) => Ok(Item {
        tag,
        name: "PET type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x08) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation.color",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xc3) => Ok(Item {
        tag,
        name: "PET scatter_method",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x03) => Ok(Item {
        tag,
        name: "GE Advance Graph.compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x02) => Ok(Item {
        tag,
        name: "PET raw_data_blob",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x0f) => Ok(Item {
        tag,
        name: "GE Advance Graph.graph_width",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x1d) => Ok(Item {
        tag,
        name: "PET sel_stop_cond_data",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x99) => Ok(Item {
        tag,
        name: "PET blnk_cal_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x72) => Ok(Item {
        tag,
        name: "PET total_delays",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x25) => Ok(Item {
        tag,
        name: "GE Advance Graph.legend_border",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x33) => Ok(Item {
        tag,
        name: "PET upper_reject_limit",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x93) => Ok(Item {
        tag,
        name: "PET atten_smooth",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x11) => Ok(Item {
        tag,
        name: "GE Advance Graph.grid",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xae) => Ok(Item {
        tag,
        name: "PET tpluse_frame_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x90) => Ok(Item {
        tag,
        name: "PET bp_filter_order",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xb7) => Ok(Item {
        tag,
        name: "PET ir_pre_filt_parm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe5) => Ok(Item {
        tag,
        name: "PET left shift",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x05) => Ok(Item {
        tag,
        name: "GE Advance Annotation.software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x78) => Ok(Item {
        tag,
        name: "PET accum_bin_dur",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x0c) => Ok(Item {
        tag,
        name: "GE Advance Graph.foreground_color",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xcc) => Ok(Item {
        tag,
        name: "PET vqc_x_axis_tilt",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x67) => Ok(Item {
        tag,
        name: "PET table_z_position",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x02) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation.curvepresent_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xb1) => Ok(Item {
        tag,
        name: "PET profile_spacing",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x14) => Ok(Item {
        tag,
        name: "PET landmark_name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xac) => Ok(Item {
        tag,
        name: "PET bp_center_y",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x16) => Ok(Item {
        tag,
        name: "GE Advance ROI.atten_corr_flag",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2c) => Ok(Item {
        tag,
        name: "PET axial_fov",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x26) => Ok(Item {
        tag,
        name: "GE Advance Graph.multi_patient",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x1a) => Ok(Item {
        tag,
        name: "GE Advance Graph.y_axis_label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe6) => Ok(Item {
        tag,
        name: "PET posterior shift",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x0d) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation.point_color",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x29) => Ok(Item {
        tag,
        name: "PET gantry_tilt_angle",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "PET software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xcf) => Ok(Item {
        tag,
        name: "PET vqc_z_axis_trans",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "PET cal_type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x08) => Ok(Item {
        tag,
        name: "GE Advance ROI.roi_type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x75) => Ok(Item {
        tag,
        name: "PET archived",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x23) => Ok(Item {
        tag,
        name: "PET delayed_bias",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x96) => Ok(Item {
        tag,
        name: "PET wellcountercal_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x21) => Ok(Item {
        tag,
        name: "PET countrate_period",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x17) => Ok(Item {
        tag,
        name: "GE Advance Graph.x_major_tics",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x95) => Ok(Item {
        tag,
        name: "PET angle_smooth_param",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe8) => Ok(Item {
        tag,
        name: "PET acq_bin_num",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "GE Advance Curve.curve_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x91) => Ok(Item {
        tag,
        name: "PET bp_center_l",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x22) => Ok(Item {
        tag,
        name: "GE Advance Graph.legend_location_y",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x05) => Ok(Item {
        tag,
        name: "PET patient_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xbb) => Ok(Item {
        tag,
        name: "PET post_filt_parm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x06) => Ok(Item {
        tag,
        name: "GE Advance Curve.how_derived_size",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x08) => Ok(Item {
        tag,
        name: "GE Advance Graph.title_font_name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xa9) => Ok(Item {
        tag,
        name: "PET other_atts_size",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x06) => Ok(Item {
        tag,
        name: "GE Advance ROI.roi_name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x07) => Ok(Item {
        tag,
        name: "GE Advance Graph.graph_description",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "PET coefficients",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x9f) => Ok(Item {
        tag,
        name: "PET axial_filter_3d",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2b) => Ok(Item {
        tag,
        name: "PET scan_fov",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "GE Advance ROI.roi_size",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x77) => Ok(Item {
        tag,
        name: "PET uncompressed_size",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x03) => Ok(Item {
        tag,
        name: "GE Advance Annotation.image_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x38) => Ok(Item {
        tag,
        name: "PET tracer_activity",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x01) => Ok(Item {
        tag,
        name: "raw_data_blob",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x54) => Ok(Item {
        tag,
        name: "PET upper_energy_limit",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x6a) => Ok(Item {
        tag,
        name: "PET start_location",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x02) => Ok(Item {
        tag,
        name: "GE Advance Annotation.annotation_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x53) => Ok(Item {
        tag,
        name: "PET coinc_output_mode",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x89) => Ok(Item {
        tag,
        name: "PET window_level_min",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x0c) => Ok(Item {
        tag,
        name: "PET hosp_identifier",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x08) => Ok(Item {
        tag,
        name: "PET corr_file_size",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xb3) => Ok(Item {
        tag,
        name: "PET ir_num_subsets",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x7d) => Ok(Item {
        tag,
        name: "PET is_contents",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x18) => Ok(Item {
        tag,
        name: "PET scan_type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x1a) => Ok(Item {
        tag,
        name: "PET start_condition",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x15) => Ok(Item {
        tag,
        name: "PET landmark_abbrev",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xc8) => Ok(Item {
        tag,
        name: "PET ovlp_frm_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x37) => Ok(Item {
        tag,
        name: "PET batch_description",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x1b) => Ok(Item {
        tag,
        name: "GE Advance Graph.y_axis_units",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x08) => Ok(Item {
        tag,
        name: "GE Advance Annotation.font_size",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x0f) => Ok(Item {
        tag,
        name: "GE Advance Annotation.end_y",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xc5) => Ok(Item {
        tag,
        name: "PET scatter_parm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x56) => Ok(Item {
        tag,
        name: "PET normal_cal_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x27) => Ok(Item {
        tag,
        name: "PET theta_compression",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x04) => Ok(Item {
        tag,
        name: "GE Advance Curve.statistics_type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x15) => Ok(Item {
        tag,
        name: "GE Advance ROI.convex",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe7) => Ok(Item {
        tag,
        name: "PET superior shift",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x09) => Ok(Item {
        tag,
        name: "PET scan_id",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x64) => Ok(Item {
        tag,
        name: "PET file_exists",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x09) => Ok(Item {
        tag,
        name: "GE Advance Annotation.foreground_color",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xcd) => Ok(Item {
        tag,
        name: "PET vqc_y_axis_trans",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xab) => Ok(Item {
        tag,
        name: "PET bp_center_x",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x28) => Ok(Item {
        tag,
        name: "PET axial_compression",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "PET scan_id",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xd8) => Ok(Item {
        tag,
        name: "PET frame_number",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x0a) => Ok(Item {
        tag,
        name: "GE Advance Graph.footer",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xaa) => Ok(Item {
        tag,
        name: "PET archived",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x32) => Ok(Item {
        tag,
        name: "PET lower_reject_limit",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x0e) => Ok(Item {
        tag,
        name: "GE Advance Annotation.end_x",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "PET cal_description",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x42) => Ok(Item {
        tag,
        name: "PET source1_activity",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x0e) => Ok(Item {
        tag,
        name: "GE Advance ROI.number_of_points",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x8b) => Ok(Item {
        tag,
        name: "PET recon_method",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x0f) => Ok(Item {
        tag,
        name: "GE Advance ROI.roi_data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x0d) => Ok(Item {
        tag,
        name: "GE Advance ROI.angle",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x8a) => Ok(Item {
        tag,
        name: "PET window_level_max",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x69) => Ok(Item {
        tag,
        name: "PET slice_count",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x04) => Ok(Item {
        tag,
        name: "GE Advance ROI.compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x01) => Ok(Item {
        tag,
        name: "PET correction_cal_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x03) => Ok(Item {
        tag,
        name: "GE Advance ROI.image_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x19) => Ok(Item {
        tag,
        name: "GE Advance Graph.x_axis_max",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x19) => Ok(Item {
        tag,
        name: "PET scan_mode",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x14) => Ok(Item {
        tag,
        name: "GE Advance ROI.roi_number",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "PET meas_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x50) => Ok(Item {
        tag,
        name: "PET lower_coinc_limit",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xdb) => Ok(Item {
        tag,
        name: "PET ir_z_filter_flag",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x71) => Ok(Item {
        tag,
        name: "PET total_prompts",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "PET positron_fraction",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x10) => Ok(Item {
        tag,
        name: "GE Advance Graph.graph_height",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe9) => Ok(Item {
        tag,
        name: "PET acq_bin_dur_percent",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x1e) => Ok(Item {
        tag,
        name: "GE Advance Graph.y_axis_max",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xea) => Ok(Item {
        tag,
        name: "3D Filter flag",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xc1) => Ok(Item {
        tag,
        name: "PET ac_img_smooth",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x04) => Ok(Item {
        tag,
        name: "GE Advance Annotation.compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x03) => Ok(Item {
        tag,
        name: "PET software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x03) => Ok(Item {
        tag,
        name: "PET compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x3f) => Ok(Item {
        tag,
        name: "PET half_life",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x83) => Ok(Item {
        tag,
        name: "PET window_level_type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe3) => Ok(Item {
        tag,
        name: "PET phase percentage",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x0b) => Ok(Item {
        tag,
        name: "GE Advance ROI.width",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe0) => Ok(Item {
        tag,
        name: "PET num_of_time_slices",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x17) => Ok(Item {
        tag,
        name: "PET scan_perspective",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xa5) => Ok(Item {
        tag,
        name: "PET software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x08) => Ok(Item {
        tag,
        name: "GE Advance Curve.deadtime",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "PET axial_filter_3d",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2d) => Ok(Item {
        tag,
        name: "PET event_separation",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x7a) => Ok(Item {
        tag,
        name: "PET software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x47) => Ok(Item {
        tag,
        name: "PET source2_activity",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe2) => Ok(Item {
        tag,
        name: "PET rest_stress",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x86) => Ok(Item {
        tag,
        name: "PET zoom",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "PET raw_data_size",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xd5) => Ok(Item {
        tag,
        name: "PET loop_filter_parm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "GE Discovery PET Implementation Version Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_2,
      }),
      (0x00, 0x09, _, 0x52) => Ok(Item {
        tag,
        name: "PET coinc_delay_offset",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x51) => Ok(Item {
        tag,
        name: "PET upper_coinc_limit",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0a) => Ok(Item {
        tag,
        name: "PET activity_factor_hs",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x02) => Ok(Item {
        tag,
        name: "PET compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x0b) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation.point_symbol",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x09) => Ok(Item {
        tag,
        name: "GE Advance ROI.center_x",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x18) => Ok(Item {
        tag,
        name: "GE Advance Graph.x_axis_min",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x07) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation.curve_label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x04) => Ok(Item {
        tag,
        name: "PET cal_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0d) => Ok(Item {
        tag,
        name: "PET scan_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "PET wc_cal_rec_method",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe1) => Ok(Item {
        tag,
        name: "PET unlisted_scan",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xa6) => Ok(Item {
        tag,
        name: "PET slice_number",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x14) => Ok(Item {
        tag,
        name: "GE Advance Graph.axes_color",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xce) => Ok(Item {
        tag,
        name: "PET vqc_y_axis_swivel",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x1f) => Ok(Item {
        tag,
        name: "GE Advance Graph.legend_font_name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x5b) => Ok(Item {
        tag,
        name: "PET contrast_agent",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xd0) => Ok(Item {
        tag,
        name: "PET vqc_z_axis_roll",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x61) => Ok(Item {
        tag,
        name: "PET software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xa8) => Ok(Item {
        tag,
        name: "PET other_atts",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x24) => Ok(Item {
        tag,
        name: "PET word_size",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x05) => Ok(Item {
        tag,
        name: "GE Advance Graph.title",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x45) => Ok(Item {
        tag,
        name: "PET source1_half_life",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x3d) => Ok(Item {
        tag,
        name: "PET post_inj_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x17) => Ok(Item {
        tag,
        name: "PET isotope",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x8c) => Ok(Item {
        tag,
        name: "PET attenuation",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x4e) => Ok(Item {
        tag,
        name: "PET lower_axial_acc",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xf0) => Ok(Item {
        tag,
        name: "Reformat group",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xda) => Ok(Item {
        tag,
        name: "PET where_is_list_frame",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x03) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation.graph_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x39) => Ok(Item {
        tag,
        name: "PET meas_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xd6) => Ok(Item {
        tag,
        name: "PET image_one_loc",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x05) => Ok(Item {
        tag,
        name: "GE Advance Curve.how_derived",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x26) => Ok(Item {
        tag,
        name: "PET axial_angle_3d",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "PET activity_factor_hr",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x30) => Ok(Item {
        tag,
        name: "PET trig_rej_method",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0e) => Ok(Item {
        tag,
        name: "PET scan_ready",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x12) => Ok(Item {
        tag,
        name: "GE Advance Annotation.annotation_data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x07) => Ok(Item {
        tag,
        name: "PET where_is_corr",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xb9) => Ok(Item {
        tag,
        name: "PET response_filt_parm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xdf) => Ok(Item {
        tag,
        name: "PET num_of_slices",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x3b) => Ok(Item {
        tag,
        name: "PET admin_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x0c) => Ok(Item {
        tag,
        name: "GE Advance Annotation.start_x",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x01) => Ok(Item {
        tag,
        name: "GE Advance Annotation Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x79) => Ok(Item {
        tag,
        name: "PET compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x5a) => Ok(Item {
        tag,
        name: "PET derived",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xba) => Ok(Item {
        tag,
        name: "PET post_filter",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x02) => Ok(Item {
        tag,
        name: "GE Advance ROI.roi_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x22) => Ok(Item {
        tag,
        name: "PET delayed_events",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "GE Advance Curve.compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x0e) => Ok(Item {
        tag,
        name: "GE Advance Graph.graph_border",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x59) => Ok(Item {
        tag,
        name: "PET wc_cal_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xd4) => Ok(Item {
        tag,
        name: "PET ctac_conv_scale",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0b) => Ok(Item {
        tag,
        name: "PET activity_factor_3d",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x5e) => Ok(Item {
        tag,
        name: "PET exam_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x16) => Ok(Item {
        tag,
        name: "PET patient_position",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0b) => Ok(Item {
        tag,
        name: "PET compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xc9) => Ok(Item {
        tag,
        name: "PET ovlp_trans_frm_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x36) => Ok(Item {
        tag,
        name: "PET tracer_name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x13) => Ok(Item {
        tag,
        name: "PET for_identifier",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "PET activity_factor_2d",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x9a) => Ok(Item {
        tag,
        name: "PET cac_edge_threshold",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x46) => Ok(Item {
        tag,
        name: "PET source2_holder",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "PET cal_hardware",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "PET compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xad) => Ok(Item {
        tag,
        name: "PET trans_frame_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x20) => Ok(Item {
        tag,
        name: "GE Advance Graph.legend_font_size",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x68) => Ok(Item {
        tag,
        name: "PET landmark_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x04) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation.curve_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x4a) => Ok(Item {
        tag,
        name: "PET source2_half_life",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "PET default_flag",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xa3) => Ok(Item {
        tag,
        name: "PET axial_angles_used",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x57) => Ok(Item {
        tag,
        name: "PET normal_2d_cal_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x84) => Ok(Item {
        tag,
        name: "PET rotate",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "PET manufacturer",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x66) => Ok(Item {
        tag,
        name: "PET table_height",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x0b) => Ok(Item {
        tag,
        name: "GE Advance Annotation.coordinate_system",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x0d) => Ok(Item {
        tag,
        name: "GE Advance Annotation.start_y",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x5c) => Ok(Item {
        tag,
        name: "PET frame_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x06) => Ok(Item {
        tag,
        name: "GE Advance Annotation.type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "GE Advance Patient.software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x70) => Ok(Item {
        tag,
        name: "PET actual_stop_cond",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x94) => Ok(Item {
        tag,
        name: "PET atten_smooth_param",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x05) => Ok(Item {
        tag,
        name: "GE Advance ROI.software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xca) => Ok(Item {
        tag,
        name: "PET ovlp_tpulse_frm_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "PET wc_cal_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x06) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation.software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xbc) => Ok(Item {
        tag,
        name: "PET ir_regularize",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x63) => Ok(Item {
        tag,
        name: "PET frame_size",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xa7) => Ok(Item {
        tag,
        name: "PET total_counts",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x0a) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation.line_width",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x8f) => Ok(Item {
        tag,
        name: "PET bp_filter_cutoff",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x08) => Ok(Item {
        tag,
        name: "PET compatible_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x14) => Ok(Item {
        tag,
        name: "GE Advance Annotation.label_id",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x81) => Ok(Item {
        tag,
        name: "PET number_of_normals",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x25) => Ok(Item {
        tag,
        name: "PET axial_acceptance",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xd1) => Ok(Item {
        tag,
        name: "PET ctac_conv_scale",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x09) => Ok(Item {
        tag,
        name: "PET software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe4) => Ok(Item {
        tag,
        name: "Recon Protocol",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x07) => Ok(Item {
        tag,
        name: "GE Advance Annotation.font_name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x85) => Ok(Item {
        tag,
        name: "PET flip",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xb8) => Ok(Item {
        tag,
        name: "PET ir_loop_filt_parm",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "PET patient_id",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x0b) => Ok(Item {
        tag,
        name: "GE Advance Graph.footer_font_size",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x3a) => Ok(Item {
        tag,
        name: "PET pre_inj_volume",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x4c) => Ok(Item {
        tag,
        name: "PET source_location",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x09) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation.line_type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x24) => Ok(Item {
        tag,
        name: "GE Advance Graph.legend_height",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x80) => Ok(Item {
        tag,
        name: "PET multi_patient",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x0d) => Ok(Item {
        tag,
        name: "PET archived",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0a) => Ok(Item {
        tag,
        name: "PET scan_id",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x7c) => Ok(Item {
        tag,
        name: "PET is_source",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x07) => Ok(Item {
        tag,
        name: "GE Advance ROI.roi_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x9b) => Ok(Item {
        tag,
        name: "PET cac_skull_offset",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xc6) => Ok(Item {
        tag,
        name: "PET seg_qc_parm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x10) => Ok(Item {
        tag,
        name: "GE Advance Annotation.start_symbol",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "PET collect_countrate",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xbd) => Ok(Item {
        tag,
        name: "PET regularize_parm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0d) => Ok(Item {
        tag,
        name: "PET scan_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x06) => Ok(Item {
        tag,
        name: "GE Advance Graph.graph_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xc7) => Ok(Item {
        tag,
        name: "PET overlap",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x13) => Ok(Item {
        tag,
        name: "GE Advance ROI.line_width",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x0c) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation.point_symbol_dim",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x6d) => Ok(Item {
        tag,
        name: "PET acq_duration",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0e) => Ok(Item {
        tag,
        name: "PET hosp_identifier",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x3e) => Ok(Item {
        tag,
        name: "PET radionuclide_name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x1b) => Ok(Item {
        tag,
        name: "PET start_cond_data",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xa0) => Ok(Item {
        tag,
        name: "PET axial_cutoff_3d",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x3c) => Ok(Item {
        tag,
        name: "PET post_inj_activity",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x62) => Ok(Item {
        tag,
        name: "PET where_is_frame",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x88) => Ok(Item {
        tag,
        name: "PET pan_y",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x09) => Ok(Item {
        tag,
        name: "GE Advance Graph.title_font_size",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x9d) => Ok(Item {
        tag,
        name: "PET radial_filter_3d",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x9e) => Ok(Item {
        tag,
        name: "PET radial_cutoff_3d",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xc0) => Ok(Item {
        tag,
        name: "PET ac_bp_filt_order",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x34) => Ok(Item {
        tag,
        name: "PET triggers_acquired",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x35) => Ok(Item {
        tag,
        name: "PET triggers_rejected",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x21) => Ok(Item {
        tag,
        name: "GE Advance Graph.legend_location_x",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x06) => Ok(Item {
        tag,
        name: "PET cal_type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x05, _, 0x01) => Ok(Item {
        tag,
        name: "GE Advance CurvePresentation Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x4f) => Ok(Item {
        tag,
        name: "PET upper_axial_acc",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x11) => Ok(Item {
        tag,
        name: "GE Advance ROI.color",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x8d) => Ok(Item {
        tag,
        name: "PET atten_coefficient",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x0a) => Ok(Item {
        tag,
        name: "GE Advance Annotation.background_color",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x7e) => Ok(Item {
        tag,
        name: "PET is_type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "PET archived",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x73) => Ok(Item {
        tag,
        name: "PET frame_valid",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x1f) => Ok(Item {
        tag,
        name: "PET collect_singles",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0f) => Ok(Item {
        tag,
        name: "PET scan_description",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xd9) => Ok(Item {
        tag,
        name: "PET list_file_exists",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xb5) => Ok(Item {
        tag,
        name: "PET ir_corr_model",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x0a) => Ok(Item {
        tag,
        name: "PET scan_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xc4) => Ok(Item {
        tag,
        name: "PET scatter_num_iter",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x03) => Ok(Item {
        tag,
        name: "GE Advance Curve.software_version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x01) => Ok(Item {
        tag,
        name: "GE Advance Graph Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x92) => Ok(Item {
        tag,
        name: "PET bp_center_p",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "PET raw_data_type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x1e) => Ok(Item {
        tag,
        name: "PET collect_deadtime",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xbf) => Ok(Item {
        tag,
        name: "PET ac_bp_filt_cut_off",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2e) => Ok(Item {
        tag,
        name: "PET mask_width",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x6f) => Ok(Item {
        tag,
        name: "PET acq_bin_start",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x1c) => Ok(Item {
        tag,
        name: "GE Advance Graph.y_major_tics",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "PET cal_datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xdd) => Ok(Item {
        tag,
        name: "PET num_of_rr_interval",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xb4) => Ok(Item {
        tag,
        name: "PET ir_recon_fov",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x03, _, 0x15) => Ok(Item {
        tag,
        name: "GE Advance Graph.x_axis_label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Siemens: Thorax/Multix FD Image Stamp" => match (g0, g1, e0, e1) {
      (0x00, 0x23, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P Release 1" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "Series Unique Identifier",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Acquisition Delay",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x70) => Ok(Item {
        tag,
        name: "Window ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x31) => Ok(Item {
        tag,
        name: "PACS Unique Identifier",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x8e) => Ok(Item {
        tag,
        name: "Physiological Display Enable Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Pixel Aspect Ratio",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xbf) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "ECG Triggering",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "ECG 2 Offset 1",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x80) => Ok(Item {
        tag,
        name: "Physiological Display ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x8f) => Ok(Item {
        tag,
        name: "Physiological Display Select Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xc5) => Ok(Item {
        tag,
        name: "Field Of Shutter Rectangle",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x10) => Ok(Item {
        tag,
        name: "Pixel Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xc1) => Ok(Item {
        tag,
        name: "Field Of Shutter",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "Iris Diaphragm",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x81) => Ok(Item {
        tag,
        name: "Preferred Physiological Channel Display",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x79) => Ok(Item {
        tag,
        name: "ECG Display Printing",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x51) => Ok(Item {
        tag,
        name: "Video LineRate",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x65) => Ok(Item {
        tag,
        name: "Cine Master",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "Angulation",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x91) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xf3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Data Object Recognition Code",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "Patient Entry ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x38) => Ok(Item {
        tag,
        name: "System Unique Identifier",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x77) => Ok(Item {
        tag,
        name: "Window Select Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x72) => Ok(Item {
        tag,
        name: "Video Invert Nonsubtracted",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x15) => Ok(Item {
        tag,
        name: "Unique Identifier",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xce) => Ok(Item {
        tag,
        name: "Shutter Enable Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x64) => Ok(Item {
        tag,
        name: "Cine Parallel",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Mains Frequency",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x33) => Ok(Item {
        tag,
        name: "ECG 2 Offset 2",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x91) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xf2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x51) => Ok(Item {
        tag,
        name: "Study Unique Identifier",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x7e) => Ok(Item {
        tag,
        name: "ECG Display Printing Enable Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_4,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Video White Compression",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x61) => Ok(Item {
        tag,
        name: "Series Unique Identifier",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xcf) => Ok(Item {
        tag,
        name: "Shutter Select Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x39) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Video Scan Mode",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "ECG 1 Offset",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0xa1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "Exposure Channel First Image",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x78) => Ok(Item {
        tag,
        name: "ECG Display Printing ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xaf) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "Image Identifier Format",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xf4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x71) => Ok(Item {
        tag,
        name: "Video Invert Subtracted",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xc0) => Ok(Item {
        tag,
        name: "Functional Shutter ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Image Data Consistency",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x67) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x25) => Ok(Item {
        tag,
        name: "Processed Pixel Data Quality",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Exposure Channel",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x38) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Rotation",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "Original Pixel Data Quality",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0x34) => Ok(Item {
        tag,
        name: "Cluster Unique Identifier",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xf7) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x9f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Xray Technique",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "Relative Image Time",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x7f) => Ok(Item {
        tag,
        name: "ECG Display Printing Select Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "Processing Channel",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x61) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0xf5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x63) => Ok(Item {
        tag,
        name: "Filter",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS TABLE LONGITUDINAL POSITION" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x99) => Ok(Item {
        tag,
        name: "Longitudinal Table Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "VEPRO BROKER 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x57, _, 0x10) => Ok(Item {
        tag,
        name: "VEPRO Data replace sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "TOSHIBA ENCRYPTED SR DATA" => match (g0, g1, e0, e1) {
      (0x70, 0x15, _, 0x00) => Ok(Item {
        tag,
        name: "Toshiba US Private Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "TOSHIBA_MEC_CT3" => match (g0, g1, e0, e1) {
      (0x70, 0x05, _, 0x04) => Ok(Item {
        tag,
        name: "Cardiac Reconstruction Gating Phase in Percent",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x24) => Ok(Item {
        tag,
        name: "The Acquisition Date of NRA",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x03) => Ok(Item {
        tag,
        name: "Cardiac R-R Mean Time",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x0b) => Ok(Item {
        tag,
        name: "Filter",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x0f) => Ok(Item {
        tag,
        name: "Direction",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x19) => Ok(Item {
        tag,
        name: "Frame Sort Key",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x0d) => Ok(Item {
        tag,
        name: "Organ",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x10) => Ok(Item {
        tag,
        name: "CT Private Data 2",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x05, _, 0x1d) => Ok(Item {
        tag,
        name: "Reconstruction Number",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x23) => Ok(Item {
        tag,
        name: "Pitch Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x39) => Ok(Item {
        tag,
        name: "End Frame",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x20) => Ok(Item {
        tag,
        name: "Local Series Number",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x00) => Ok(Item {
        tag,
        name: "CT Private Data 1",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x05, _, 0x06) => Ok(Item {
        tag,
        name: "Cardiac Reconstruction Mode",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x0e) => Ok(Item {
        tag,
        name: "File Type Remarks",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0xf1) => Ok(Item {
        tag,
        name: "Protect Mark for Image, Curve or Private Record",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x35) => Ok(Item {
        tag,
        name: "Scan Range",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x70, 0x05, _, 0x43) => Ok(Item {
        tag,
        name: "Volume Vector",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x70, 0x05, _, 0x1c) => Ok(Item {
        tag,
        name: "Contrast/Bolus Agent",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0xf2) => Ok(Item {
        tag,
        name: "Protect Mark for Series Record",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x42) => Ok(Item {
        tag,
        name: "Local Frame No",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x48) => Ok(Item {
        tag,
        name: "Respiratory Gating Inf.",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x26) => Ok(Item {
        tag,
        name: "Large Data File Name",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(8),
        },
      }),
      (0x70, 0x05, _, 0x18) => Ok(Item {
        tag,
        name: "Frame No.",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x13) => Ok(Item {
        tag,
        name: "Expert Plan No.",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x0a) => Ok(Item {
        tag,
        name: "Table Speed in mm/rot",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x07) => Ok(Item {
        tag,
        name: "Reconstruction Center",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x70, 0x05, _, 0x22) => Ok(Item {
        tag,
        name: "Reconstruction Interval",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x17) => Ok(Item {
        tag,
        name: "Total Frame Count in the Volume",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x41) => Ok(Item {
        tag,
        name: "Raw Slice Information",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x1e) => Ok(Item {
        tag,
        name: "Raw Data Number",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x29) => Ok(Item {
        tag,
        name: "Frame UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x05) => Ok(Item {
        tag,
        name: "Cardiac Reconstruction Gating Phase in ms",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x25) => Ok(Item {
        tag,
        name: "Large Data File Attribute",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x49) => Ok(Item {
        tag,
        name: "Respiration Phase",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x15) => Ok(Item {
        tag,
        name: "Special Helical ACQ No.",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x37) => Ok(Item {
        tag,
        name: "Total Frames",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x47) => Ok(Item {
        tag,
        name: "Slice Pitch of 4D Volume",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x21) => Ok(Item {
        tag,
        name: "Decrease in Artifact Filter",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x1f) => Ok(Item {
        tag,
        name: "Volume Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x30) => Ok(Item {
        tag,
        name: "Main Modality in Study",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x46) => Ok(Item {
        tag,
        name: "Absolute Table Position of 4D Volume",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x08) => Ok(Item {
        tag,
        name: "Detector Slice Thickness in mm",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x1b) => Ok(Item {
        tag,
        name: "Convolution Kernel",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x40) => Ok(Item {
        tag,
        name: "DLP Dose Length Product",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x45) => Ok(Item {
        tag,
        name: "Relative Table Position of 4D Volume",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x28) => Ok(Item {
        tag,
        name: "Enhanced CT Private Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x09) => Ok(Item {
        tag,
        name: "Number of Detector rows to Reconstruct",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x38) => Ok(Item {
        tag,
        name: "Start Frame",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x12) => Ok(Item {
        tag,
        name: "Position",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x36) => Ok(Item {
        tag,
        name: "CT Private Data 3",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x70, 0x05, _, 0x14) => Ok(Item {
        tag,
        name: "Reconstruction ROI No.",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x44) => Ok(Item {
        tag,
        name: "Volume Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x16) => Ok(Item {
        tag,
        name: "Volume UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x11) => Ok(Item {
        tag,
        name: "Series Comment",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0xf3) => Ok(Item {
        tag,
        name: "Protect Mark for Study Record",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x1a) => Ok(Item {
        tag,
        name: "Frame Sort Order",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x0c) => Ok(Item {
        tag,
        name: "Reconstruction Correction Type",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Mitra Object Document 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "IMPAX object document",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "IMPAX markup XML stored",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "QVA" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Calibration Frame",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x41) => Ok(Item {
        tag,
        name: "End Diastolic Frame",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x42) => Ok(Item {
        tag,
        name: "End Systolic Frame",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x43) => Ok(Item {
        tag,
        name: "End Diastolic Volume",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x44) => Ok(Item {
        tag,
        name: "End Systolic Volume",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x45) => Ok(Item {
        tag,
        name: "Stroke Volume",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x46) => Ok(Item {
        tag,
        name: "Cardiac Output",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x47) => Ok(Item {
        tag,
        name: "Ejection Fraction",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x48) => Ok(Item {
        tag,
        name: "Body Surface Area",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x49) => Ok(Item {
        tag,
        name: "Artery Territory Region",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x50) => Ok(Item {
        tag,
        name: "Number of Diseased Vessels",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x51) => Ok(Item {
        tag,
        name: "Hypokinesis in Region",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x52) => Ok(Item {
        tag,
        name: "Hyperkinesis in Region",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x53) => Ok(Item {
        tag,
        name: "percent of chords with hyperkinesis <- 2 SD",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x54) => Ok(Item {
        tag,
        name: "percent of chords with alkinesis/dyskinesis",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x55) => Ok(Item {
        tag,
        name: "Calibration Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_IMAG_01" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x15) => Ok(Item {
        tag,
        name: "Lower range of Pixels1",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x26) => Ok(Item {
        tag,
        name: "Version of the hdr struct",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x33) => Ok(Item {
        tag,
        name: "Imaging Options",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x51) => Ok(Item {
        tag,
        name: "Scan End Location",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x53) => Ok(Item {
        tag,
        name: "RAS letter for anterior/posterior",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x41) => Ok(Item {
        tag,
        name: "Image location",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x47) => Ok(Item {
        tag,
        name: "Normal S coord",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x35) => Ok(Item {
        tag,
        name: "Plane Type",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x17) => Ok(Item {
        tag,
        name: "Lower range of Pixels2",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, 0x10, _) => Ok(Item {
        tag,
        name: "Private Element Creator",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x4c) => Ok(Item {
        tag,
        name: "A Coord of Bottom Right Corner",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x55) => Ok(Item {
        tag,
        name: "RAS letter for scout end loc",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x4d) => Ok(Item {
        tag,
        name: "S Coord of Bottom Right Corner",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x45) => Ok(Item {
        tag,
        name: "Normal R coord",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x40) => Ok(Item {
        tag,
        name: "RAS letter of image location",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x61) => Ok(Item {
        tag,
        name: "Image dimension - Y",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x54) => Ok(Item {
        tag,
        name: "RAS letter for scout start loc",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x1d) => Ok(Item {
        tag,
        name: "Vma phase",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x50) => Ok(Item {
        tag,
        name: "Scan Start Location",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x1c) => Ok(Item {
        tag,
        name: "Vma mamp",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x32) => Ok(Item {
        tag,
        name: "Pulse Sequence",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x4b) => Ok(Item {
        tag,
        name: "R Coord of Bottom Right Corner",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x62) => Ok(Item {
        tag,
        name: "Number of Excitations",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x46) => Ok(Item {
        tag,
        name: "Normal A coord",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x20) => Ok(Item {
        tag,
        name: "Smart scan ON/OFF flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x36) => Ok(Item {
        tag,
        name: "Oblique Plane",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x52) => Ok(Item {
        tag,
        name: "RAS letter for side of image",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x30) => Ok(Item {
        tag,
        name: "Foreign Image Revision",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x1e) => Ok(Item {
        tag,
        name: "Vma mod",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x18) => Ok(Item {
        tag,
        name: "Upper range of Pixels2",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x43) => Ok(Item {
        tag,
        name: "Center A coord of plane image",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x10) => Ok(Item {
        tag,
        name: "Scout Type",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x06) => Ok(Item {
        tag,
        name: "Image archive flag",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x42) => Ok(Item {
        tag,
        name: "Center R coord of plane image",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "Advantage comp. Overflow",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x4a) => Ok(Item {
        tag,
        name: "S Coord of Top Right Corner",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x44) => Ok(Item {
        tag,
        name: "Center S coord of plane image",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x16) => Ok(Item {
        tag,
        name: "Lower range of Pixels1",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x35) => Ok(Item {
        tag,
        name: "Advantage comp. Underflow",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x60) => Ok(Item {
        tag,
        name: "Image dimension - X",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x49) => Ok(Item {
        tag,
        name: "A Coord of Top Right Corner",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x1f) => Ok(Item {
        tag,
        name: "Vma clip",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1a) => Ok(Item {
        tag,
        name: "Len of tot hdr in bytes No longer supported",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x48) => Ok(Item {
        tag,
        name: "R Coord of Top Right Corner",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x31) => Ok(Item {
        tag,
        name: "Imaging Mode",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "CARDIO-SMS 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x03) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x05) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x06) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x08) => Ok(Item {
        tag,
        name: "ACOM flags",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0a) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0b) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0c) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x80) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x01) => Ok(Item {
        tag,
        name: "Private Data stream",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Canon Inc." => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Canon Internal Data 1",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Performed number of series",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Performed number of images",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7f) => Ok(Item {
        tag,
        name: "Canon Internal Data 111",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GE LUT Asymmetry Parameter" => match (g0, g1, e0, e1) {
      (0x00, 0x45, _, 0x67) => Ok(Item {
        tag,
        name: "LUT Assymetry",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips MR Imaging DD 004" => match (g0, g1, e0, e1) {
      (0x20, 0x05, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x81) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x38) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x55) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x05, _, 0x78) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x82) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x62) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x05, _, 0x54) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x61) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_2,
      }),
      (0x20, 0x05, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x58) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x44) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x05, _, 0x57) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x49) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x64) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x36) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x76) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x72) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x96) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x89) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x79) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_2,
      }),
      (0x20, 0x05, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x77) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x97) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x33) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_3,
      }),
      (0x20, 0x05, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x46) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x98) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x92) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x73) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x45) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x47) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x91) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x39) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_2,
      }),
      (0x20, 0x05, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x05, _, 0x37) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x93) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x56) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x63) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x59) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x75) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x74) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x35) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x99) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x95) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips Imaging DD 067" => match (g0, g1, e0, e1) {
      (0x40, 0x01, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x40, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x40, 0x01, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "BioPri3D" => match (g0, g1, e0, e1) {
      (0x00, 0x11, 0x10, _) => Ok(Item {
        tag,
        name: "Private Segmentation Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x63, 0x10, _) => Ok(Item {
        tag,
        name: "Private Creator",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GDCM CONFORMANCE TESTS" => match (g0, g1, e0, e1) {
      (0x4d, 0x4d, _, 0x01) => Ok(Item {
        tag,
        name: "Array Container Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x4d, 0x4d, _, 0x02) => Ok(Item {
        tag,
        name: "0-Filled Array",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS_FLCOMPACT_VA01A_PROC" => match (g0, g1, e0, e1) {
      (0x00, 0x17, _, 0x17) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xc0) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa2) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x51) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x4b) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x87) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x52) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x1e) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x55) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x1c) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x8b) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x0b) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x18) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x68) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x1f) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x1a) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x25) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x67) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x28) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x16) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x29) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa5) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x0c) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x48) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x4d) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x88) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x0e) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xb0) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa3) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x20) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa1) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa0) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x0f) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x8f) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x64) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa4) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x53) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x8d) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x1b) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x24) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x23) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x21) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x5a) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x8e) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x5c) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x5b) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x8a) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x85) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x22) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x50) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x66) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x0d) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa6) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x8c) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x4f) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x4e) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x27) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x19) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x89) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x49) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x4c) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x26) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x0a) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x14) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x4a) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x54) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x86) => Ok(Item {
        tag,
        name: "Internal Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Siemens: Thorax/Multix FD Raw Image Settings" => match (g0, g1, e0, e1) {
      (0x00, 0x25, _, 0x30) => Ok(Item {
        tag,
        name: "Manual Cropping",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x1b) => Ok(Item {
        tag,
        name: "Image Crop Upper Right",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x00, 0x25, _, 0x14) => Ok(Item {
        tag,
        name: "Image Alignment",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0c) => Ok(Item {
        tag,
        name: "Harmonization Kernel",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x1c) => Ok(Item {
        tag,
        name: "Image Crop Lower Left",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x00, 0x25, _, 0x06) => Ok(Item {
        tag,
        name: "Collimator Low Right X Percentage",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x32) => Ok(Item {
        tag,
        name: "Gamma LUT Parameter 2",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x17) => Ok(Item {
        tag,
        name: "System Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x10) => Ok(Item {
        tag,
        name: "Raw Image File Name",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x02) => Ok(Item {
        tag,
        name: "Collimator Manual",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x01) => Ok(Item {
        tag,
        name: "Gamma LUT",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x04) => Ok(Item {
        tag,
        name: "Collimator Up Right X Percentage",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0f) => Ok(Item {
        tag,
        name: "Edge Enhancement Gain",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0b) => Ok(Item {
        tag,
        name: "Set Gray",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x13) => Ok(Item {
        tag,
        name: "Image Rows",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x15) => Ok(Item {
        tag,
        name: "Active Image Columns",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x05) => Ok(Item {
        tag,
        name: "Collimator Low Left X Percentage",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x07) => Ok(Item {
        tag,
        name: "Collimator Up Left Y Percentage",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x1a) => Ok(Item {
        tag,
        name: "Image Crop Upper Left",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x00, 0x25, _, 0x11) => Ok(Item {
        tag,
        name: "Global Offset",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x09) => Ok(Item {
        tag,
        name: "Collimator Low Left Y Percentage",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x31) => Ok(Item {
        tag,
        name: "Gamma LUT Parameter 1",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x12) => Ok(Item {
        tag,
        name: "Image Columns",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x03) => Ok(Item {
        tag,
        name: "Collimator Up Left X Percentage",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x18) => Ok(Item {
        tag,
        name: "Auto Gain",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x34) => Ok(Item {
        tag,
        name: "Gamma LUT Parameter 4",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x1d) => Ok(Item {
        tag,
        name: "Image Crop Lower Right",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x00, 0x25, _, 0x0a) => Ok(Item {
        tag,
        name: "Collimator Low Right Y Percentage",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x16) => Ok(Item {
        tag,
        name: "Active Image Rows",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0e) => Ok(Item {
        tag,
        name: "Edge Enhancement Kernel",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x00) => Ok(Item {
        tag,
        name: "Raw Image Amplification",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0d) => Ok(Item {
        tag,
        name: "Harmonization Gain",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x33) => Ok(Item {
        tag,
        name: "Gamma LUT Parameter 3",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x08) => Ok(Item {
        tag,
        name: "Collimator Up Right Y Percentage",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x19) => Ok(Item {
        tag,
        name: "Ortho Sub Sampling",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS SC IMG SAD" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x86) => Ok(Item {
        tag,
        name: "Non-RT Image SAD",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_ACRQA_1.0 BLOCK3" => match (g0, g1, e0, e1) {
      (0x00, 0x23, _, 0x00) => Ok(Item {
        tag,
        name: "CR DRE",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x10) => Ok(Item {
        tag,
        name: "CR DRN",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x20) => Ok(Item {
        tag,
        name: "CR ORE",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x30) => Ok(Item {
        tag,
        name: "CR ORN",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x40) => Ok(Item {
        tag,
        name: "CR ORD",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x50) => Ok(Item {
        tag,
        name: "CR Cassette Size",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x60) => Ok(Item {
        tag,
        name: "CR Machine ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x70) => Ok(Item {
        tag,
        name: "CR Machine Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x80) => Ok(Item {
        tag,
        name: "CR Technician Code",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x90) => Ok(Item {
        tag,
        name: "CR ES Parameters",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SCHICK TECHNOLOGIES - Change Item Creator ID" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Change List Item UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "Operation",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x03) => Ok(Item {
        tag,
        name: "Date",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x04) => Ok(Item {
        tag,
        name: "User Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x05) => Ok(Item {
        tag,
        name: "Additional Change Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_ADWSoft_3D1" => match (g0, g1, e0, e1) {
      (0x00, 0x47, _, 0xc2) => Ok(Item {
        tag,
        name: "Volume Upper Left High Corner TLOC",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x63) => Ok(Item {
        tag,
        name: "Volume Skew Base",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x9c) => Ok(Item {
        tag,
        name: "Transform Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x89) => Ok(Item {
        tag,
        name: "Contrast Agent Volume List",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0xf8) => Ok(Item {
        tag,
        name: "Max Converted Density",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0xb8) => Ok(Item {
        tag,
        name: "Wireframe Attributes",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xfc) => Ok(Item {
        tag,
        name: "Volume midscan times list",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x65) => Ok(Item {
        tag,
        name: "Volume Registration Transform Translation Vector",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x00, 0x47, _, 0x66) => Ok(Item {
        tag,
        name: "Volume Tilt",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xbb) => Ok(Item {
        tag,
        name: "Wireframe Point List",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x85) => Ok(Item {
        tag,
        name: "Acquisition DLX 2D Series Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xff) => Ok(Item {
        tag,
        name: "Protocol Title",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x51) => Ok(Item {
        tag,
        name: "Volume Segment Count",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0x50) => Ok(Item {
        tag,
        name: "Volume Voxel Count",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xfe) => Ok(Item {
        tag,
        name: "Protocol Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x9a) => Ok(Item {
        tag,
        name: "Transform Rotation Matrix",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 9,
          max: Some(9),
        },
      }),
      (0x00, 0x47, _, 0x93) => Ok(Item {
        tag,
        name: "DLX Calibration Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xb9) => Ok(Item {
        tag,
        name: "Wireframe Point Count",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x64) => Ok(Item {
        tag,
        name: "Volume Registration Transform Rotation Matrix",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 9,
          max: Some(9),
        },
      }),
      (0x00, 0x47, _, 0xb2) => Ok(Item {
        tag,
        name: "Location System",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x8b) => Ok(Item {
        tag,
        name: "Frame Count",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xd2) => Ok(Item {
        tag,
        name: "Volume Gradient List",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xb6) => Ok(Item {
        tag,
        name: "Wireframe Group Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x72) => Ok(Item {
        tag,
        name: "Exposure List",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0xbc) => Ok(Item {
        tag,
        name: "Wireframe Points Coordinates",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x00, 0x47, _, 0xb1) => Ok(Item {
        tag,
        name: "Wireframe Count",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x58) => Ok(Item {
        tag,
        name: "Volume Voxel Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xd3) => Ok(Item {
        tag,
        name: "Volume Density List",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x9b) => Ok(Item {
        tag,
        name: "Transform Translation Vector",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x00, 0x47, _, 0x57) => Ok(Item {
        tag,
        name: "Volume Voxel Ratio",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x99) => Ok(Item {
        tag,
        name: "Transform Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xd1) => Ok(Item {
        tag,
        name: "Volume Segment List",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x95) => Ok(Item {
        tag,
        name: "DLX Calibration Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xf5) => Ok(Item {
        tag,
        name: "Min original density",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0xba) => Ok(Item {
        tag,
        name: "Wireframe Timestamp",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xb7) => Ok(Item {
        tag,
        name: "Wireframe Color",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xf4) => Ok(Item {
        tag,
        name: "Volume Name(s)",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0x80) => Ok(Item {
        tag,
        name: "Acquisition DLX Identifier",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x61) => Ok(Item {
        tag,
        name: "Volume Center Point",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x00, 0x47, _, 0x55) => Ok(Item {
        tag,
        name: "Volume Threshold Value",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x92) => Ok(Item {
        tag,
        name: "XA 3D Reconstruction Algorithm Version",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x98) => Ok(Item {
        tag,
        name: "Transform Count",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xb5) => Ok(Item {
        tag,
        name: "Wireframe Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x8a) => Ok(Item {
        tag,
        name: "Number Of Injections",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xfd) => Ok(Item {
        tag,
        name: "Volume Registered Phases List",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x54) => Ok(Item {
        tag,
        name: "Volume Slice Count",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x01) => Ok(Item {
        tag,
        name: "Reconstruction Parameters Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x96) => Ok(Item {
        tag,
        name: "Used Frames",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0x91) => Ok(Item {
        tag,
        name: "XA 3D Reconstruction Algorithm Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x81) => Ok(Item {
        tag,
        name: "Acquisition DLX 2D Series Count",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x70) => Ok(Item {
        tag,
        name: "KPV List",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0x53) => Ok(Item {
        tag,
        name: "Volume Slice Size",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x49) => Ok(Item {
        tag,
        name: "Volume Color",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_3_TO_N,
      }),
      (0x00, 0x47, _, 0xfb) => Ok(Item {
        tag,
        name: "Phase Number (percent)",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xd4) => Ok(Item {
        tag,
        name: "Volume Z Position List",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xf7) => Ok(Item {
        tag,
        name: "Min Converted Density",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0xf6) => Ok(Item {
        tag,
        name: "Max original density",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0xfa) => Ok(Item {
        tag,
        name: "Protocol Resolution",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xc1) => Ok(Item {
        tag,
        name: "Volume Slice To RAS Rotation Matrix",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 9,
          max: Some(9),
        },
      }),
      (0x00, 0x47, _, 0xd5) => Ok(Item {
        tag,
        name: "Volume Original Index List",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xc0) => Ok(Item {
        tag,
        name: "Volume Upper Left High Corner RAS",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x00, 0x47, _, 0x71) => Ok(Item {
        tag,
        name: "X-Ray Tube Current List",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0x59) => Ok(Item {
        tag,
        name: "Volume Z Position Size",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x94) => Ok(Item {
        tag,
        name: "DLX Calibration Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xf9) => Ok(Item {
        tag,
        name: "Protocol Film Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xb0) => Ok(Item {
        tag,
        name: "Wireframe List",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0x60) => Ok(Item {
        tag,
        name: "Volume Base Line",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 9,
          max: Some(9),
        },
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS I0 MU SCALE FACTOR" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x97) => Ok(Item {
        tag,
        name: "I0-MU Scale Factor",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_HINO_CT_01" => match (g0, g1, e0, e1) {
      (0x00, 0x4b, _, 0x01) => Ok(Item {
        tag,
        name: "Beam Thickness",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x4b, _, 0x02) => Ok(Item {
        tag,
        name: "R Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x4b, _, 0x03) => Ok(Item {
        tag,
        name: "HBC number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "QCA_RESULTS" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Analysis Views",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Segment",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "Pre Catheter Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "Pre Catheter Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x13) => Ok(Item {
        tag,
        name: "Pre Reference Diameter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x14) => Ok(Item {
        tag,
        name: "Pre Minimum Lumen Diameter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x15) => Ok(Item {
        tag,
        name: "Pre Average Diameter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x16) => Ok(Item {
        tag,
        name: "Pre Stenosis Length",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x17) => Ok(Item {
        tag,
        name: "Pre Stenosis %",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x18) => Ok(Item {
        tag,
        name: "Pre Geometric Area Reduction %",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x21) => Ok(Item {
        tag,
        name: "Post Catheter Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x22) => Ok(Item {
        tag,
        name: "Post Catheter Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x23) => Ok(Item {
        tag,
        name: "Post Reference Diameter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x24) => Ok(Item {
        tag,
        name: "Post Minimum Lumen Diameter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x25) => Ok(Item {
        tag,
        name: "Post Average Diameter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x26) => Ok(Item {
        tag,
        name: "Post Stenosis Length",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x27) => Ok(Item {
        tag,
        name: "Post Stenosis %",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x28) => Ok(Item {
        tag,
        name: "Post Geometric Area Reduction %",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Calibration Frame",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x41) => Ok(Item {
        tag,
        name: "End Diastolic Frame",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x42) => Ok(Item {
        tag,
        name: "End Systolic Frame",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x43) => Ok(Item {
        tag,
        name: "End Diastolic Volume",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x44) => Ok(Item {
        tag,
        name: "End Systolic Volume",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x45) => Ok(Item {
        tag,
        name: "Stroke Volume",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x47) => Ok(Item {
        tag,
        name: "Ejection Fraction",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x48) => Ok(Item {
        tag,
        name: "Body Surface Area",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x49) => Ok(Item {
        tag,
        name: "Artery Territory Region",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x50) => Ok(Item {
        tag,
        name: "Number of Diseased Vessels",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x51) => Ok(Item {
        tag,
        name: "Hypokinesis in Region",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x52) => Ok(Item {
        tag,
        name: "Hyperkinesis in Opposite Region",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x53) => Ok(Item {
        tag,
        name: "Percent Total LV Hypokinesis",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x55) => Ok(Item {
        tag,
        name: "Calibration Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "POLYTRON-SMS 2.5" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "Private Data 1",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x03) => Ok(Item {
        tag,
        name: "Private Data 2",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Private Data 3",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x06) => Ok(Item {
        tag,
        name: "Private Data 3",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Private Data 4",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "Private Data 5",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "Private Data 6",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x89, _, 0x10) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CSA ENVELOPE" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "syngo Report Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "syngo Report Presentation",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CT VA0  OST" => match (g0, g1, e0, e1) {
      (0x60, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "Osteo Contour Comment",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x60, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Osteo Contour Buffer",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: ValueMultiplicity {
          min: 256,
          max: Some(256),
        },
      }),
      _ => Err(()),
    },
    "SIEMENS MR HEADER" => match (g0, g1, e0, e1) {
      (0x00, 0x51, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "TablePositionOrigin",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_3,
      }),
      (0x00, 0x51, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0f) => Ok(Item {
        tag,
        name: "GradientMode",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x0b) => Ok(Item {
        tag,
        name: "AcquisitionMatrixText",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "BandwidthPerPixelPhaseEncode",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x0f) => Ok(Item {
        tag,
        name: "CoilString",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "CSA Image Header Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x08) => Ok(Item {
        tag,
        name: "CSA Image Header Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "B_value",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "FMRIStimulInfo",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "RBMoCoRot",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_3,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "FlowCompensation",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0a) => Ok(Item {
        tag,
        name: "NumberOfImagesInMosaic",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x29) => Ok(Item {
        tag,
        name: "MosaicRefAcqTimes",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0d) => Ok(Item {
        tag,
        name: "DiffusionDirectionality",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "SlicePosition_PCS",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_3,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "B_matrix",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_6,
      }),
      (0x00, 0x51, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x17) => Ok(Item {
        tag,
        name: "SliceResolution",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "RealDwellTime",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "CSA Image Header Version ??",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0b) => Ok(Item {
        tag,
        name: "SliceMeasurementDuration",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x09) => Ok(Item {
        tag,
        name: "CSA Image Header Version ??",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "TimeAfterStart",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x11) => Ok(Item {
        tag,
        name: "PATModeText",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "ImaAbsTablePosition",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_3,
      }),
      (0x00, 0x51, _, 0x13) => Ok(Item {
        tag,
        name: "PositivePCSDirections",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0e) => Ok(Item {
        tag,
        name: "DiffusionGradientDirection",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_3,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "RBMoCoTrans",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_3,
      }),
      (0x00, 0x51, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "ImaRelTablePosition",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_3,
      }),
      (0x00, 0x51, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SET WINDOW" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Set Window Image Filter",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Set Window Magnification Power",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS FIELD ID" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x80) => Ok(Item {
        tag,
        name: "Field ID",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_ADWSoft_DPO" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x80) => Ok(Item {
        tag,
        name: "Private Entity Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x85) => Ok(Item {
        tag,
        name: "Private Entity Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x90) => Ok(Item {
        tag,
        name: "Private Entity Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x95) => Ok(Item {
        tag,
        name: "Private Entity Launch Command",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xaa) => Ok(Item {
        tag,
        name: "Private Entity Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SCHICK TECHNOLOGIES - Note Item Creator ID" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Text",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "Date",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x03) => Ok(Item {
        tag,
        name: "User Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x04) => Ok(Item {
        tag,
        name: "Coordinates (X, Y)",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      _ => Err(()),
    },
    "SPI" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Comments",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x15) => Ok(Item {
        tag,
        name: "Unique Identifier",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Data Object Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x41) => Ok(Item {
        tag,
        name: "Data Object Subtype",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "Organ",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x15) => Ok(Item {
        tag,
        name: "Allergy Indication",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x20) => Ok(Item {
        tag,
        name: "Pregnancy",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "Compression Algorithm",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "DLX_EXAMS_01" => match (g0, g1, e0, e1) {
      (0x00, 0x15, _, 0x01) => Ok(Item {
        tag,
        name: "Stenos_calibr_ratio;",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x02) => Ok(Item {
        tag,
        name: "Stenos_magnification;",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x03) => Ok(Item {
        tag,
        name: "Cardiac_calibr_ratio;",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS RA GEN" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "Table Tilt",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x46) => Ok(Item {
        tag,
        name: "InversNot Invers",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x7a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "Images in All Scenes",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x86) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x66) => Ok(Item {
        tag,
        name: "PERI Overlap Bottom",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6a) => Ok(Item {
        tag,
        name: "XRay Data Valid",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x30) => Ok(Item {
        tag,
        name: "Patient DOB",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "FramesPhase",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "Stepping Direction",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2a) => Ok(Item {
        tag,
        name: "Number of Positions",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x78) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x3a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5a) => Ok(Item {
        tag,
        name: "Table Isocenter Height",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x94) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "PERI Total Scenes",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x44) => Ok(Item {
        tag,
        name: "Image Transfer Delay",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "Mixed Pulse Mode",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x15) => Ok(Item {
        tag,
        name: "Images in Study",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Scenes in Study",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x98) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x58) => Ok(Item {
        tag,
        name: "Table Side Offset",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x76) => Ok(Item {
        tag,
        name: "Filling Average Factor",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x64) => Ok(Item {
        tag,
        name: "PERI Overlap Top",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Acquisition Index",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4c) => Ok(Item {
        tag,
        name: "Blanking Circle Diameter",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "Scene Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x38) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2c) => Ok(Item {
        tag,
        name: "Number of Phases",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9e) => Ok(Item {
        tag,
        name: "Nativ Review Flag",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x56) => Ok(Item {
        tag,
        name: "Table Longitudinal Position",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "Acquired Plane",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "Table Axis Rotation",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x20) => Ok(Item {
        tag,
        name: "Total Fluoro TimePatient",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9c) => Ok(Item {
        tag,
        name: "II Level CalibrationFactor",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Stand Data Valid",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x25) => Ok(Item {
        tag,
        name: "Dose Area ProductPatient",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x36) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2e) => Ok(Item {
        tag,
        name: "Framerate for 8 Positions",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x5e) => Ok(Item {
        tag,
        name: "Collimation Data Valid",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x25) => Ok(Item {
        tag,
        name: "Images in Photofile",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x35) => Ok(Item {
        tag,
        name: "Patient Initial Puck Counter",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x74) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x7e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "ReferencePhotofile Flag",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x68) => Ok(Item {
        tag,
        name: "Raw Image Number",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Scene Flag",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x88) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "PERI Sequence Number",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x96) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x4a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x84) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x40) => Ok(Item {
        tag,
        name: "Patient Initial Position",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "RadWorksTBR" => match (g0, g1, e0, e1) {
      (0x31, 0x11, _, 0x02) => Ok(Item {
        tag,
        name: "AMI Compression Type (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x11, _, 0xff) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_DL_FRAME_01" => match (g0, g1, e0, e1) {
      (0x00, 0x25, _, 0x36) => Ok(Item {
        tag,
        name: "Collimator Up Horizontal Edge",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x30) => Ok(Item {
        tag,
        name: "Fov Dimension",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x1b) => Ok(Item {
        tag,
        name: "Table Vertical Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x3a) => Ok(Item {
        tag,
        name: "Contour Filter Angle",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x3c) => Ok(Item {
        tag,
        name: "Internal Label Frame",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x2b) => Ok(Item {
        tag,
        name: "Spectral Filter Znb",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x1e) => Ok(Item {
        tag,
        name: "Beam Cover Area",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x1c) => Ok(Item {
        tag,
        name: "Table Longitudinal Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x06) => Ok(Item {
        tag,
        name: "Positioner Primary Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x39) => Ok(Item {
        tag,
        name: "Contour Filter Distance",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x24) => Ok(Item {
        tag,
        name: "Pw Commanded",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x10) => Ok(Item {
        tag,
        name: "Pivot Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x23) => Ok(Item {
        tag,
        name: "Mas Commanded",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x38) => Ok(Item {
        tag,
        name: "Vertices Polygonal Collimator",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x02) => Ok(Item {
        tag,
        name: "Frame Id",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x26) => Ok(Item {
        tag,
        name: "Sensor Feedback",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x04) => Ok(Item {
        tag,
        name: "Distance Source To Patient",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x22) => Ok(Item {
        tag,
        name: "Kvp Commanded",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0b) => Ok(Item {
        tag,
        name: "Target Cnr",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x29) => Ok(Item {
        tag,
        name: "Contrast Commanded",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x05) => Ok(Item {
        tag,
        name: "Distance Source To Skin",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x07) => Ok(Item {
        tag,
        name: "Positioner Secondary Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x1f) => Ok(Item {
        tag,
        name: "Kvp Actual",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x2d) => Ok(Item {
        tag,
        name: "Spectral Filter Density",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x1a) => Ok(Item {
        tag,
        name: "Arc Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x2c) => Ok(Item {
        tag,
        name: "Spectral Filter Weight",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x09) => Ok(Item {
        tag,
        name: "Larm Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x2f) => Ok(Item {
        tag,
        name: "Spectral Filter Status",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x37) => Ok(Item {
        tag,
        name: "Collimator Low Horizontal Edge",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x28) => Ok(Item {
        tag,
        name: "Cnr Commanded",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x03) => Ok(Item {
        tag,
        name: "Distance Source To Detector",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x3b) => Ok(Item {
        tag,
        name: "Table Rotation Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x27) => Ok(Item {
        tag,
        name: "Target Entrance Dose",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x2a) => Ok(Item {
        tag,
        name: "Ept Actual",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x35) => Ok(Item {
        tag,
        name: "Collimator Right Vertical Edge",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x34) => Ok(Item {
        tag,
        name: "Collimator Left Vertical Edge",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x1d) => Ok(Item {
        tag,
        name: "Table Lateral Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x25) => Ok(Item {
        tag,
        name: "Grid",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0a) => Ok(Item {
        tag,
        name: "Frame Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x20) => Ok(Item {
        tag,
        name: "Mas Actual",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x33) => Ok(Item {
        tag,
        name: "Fov Origin",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x21) => Ok(Item {
        tag,
        name: "Pw Actual",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x08) => Ok(Item {
        tag,
        name: "Beam Orientation",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x2e) => Ok(Item {
        tag,
        name: "Spectral Filter Thickness",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ACUSON:1.2.840.113680.1.0:7f10" => match (g0, g1, e0, e1) {
      (0x7f, 0xdf, _, 0x34) => Ok(Item {
        tag,
        name: "Gamma coefficient",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x8c) => Ok(Item {
        tag,
        name: "ECG Sample Size",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x64) => Ok(Item {
        tag,
        name: "CD Velocity Scale Max",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0xf5) => Ok(Item {
        tag,
        name: "Teaching Study",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x80) => Ok(Item {
        tag,
        name: "B-mode 1D Post Processing Curve",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x7f) => Ok(Item {
        tag,
        name: "B Delta",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x93) => Ok(Item {
        tag,
        name: "Perspective Capture Type",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x69) => Ok(Item {
        tag,
        name: "CD Pan Box Min X0",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x36) => Ok(Item {
        tag,
        name: "Persistence adaptive flag",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x28) => Ok(Item {
        tag,
        name: "CD Color Mix Points X1",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x50) => Ok(Item {
        tag,
        name: "Capture Type Name",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x6a) => Ok(Item {
        tag,
        name: "CD Pan Box Min Y0",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x87) => Ok(Item {
        tag,
        name: "Last Destruction Timestamp",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x0d) => Ok(Item {
        tag,
        name: "B-Color-On Flag",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x88) => Ok(Item {
        tag,
        name: "Pixels Per Second",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x6f) => Ok(Item {
        tag,
        name: "CPS Balance Setting",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x67) => Ok(Item {
        tag,
        name: "CD Balance",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x54) => Ok(Item {
        tag,
        name: "Number of Capture Types",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x66) => Ok(Item {
        tag,
        name: "CD Frequency",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x20) => Ok(Item {
        tag,
        name: "Left angle",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x7d) => Ok(Item {
        tag,
        name: "B-mode Post Processing",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x8b) => Ok(Item {
        tag,
        name: "ECG Sample Count",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x10) => Ok(Item {
        tag,
        name: "Acquisition Type:",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x40) => Ok(Item {
        tag,
        name: "Observation Date Time SQ",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0xf1) => Ok(Item {
        tag,
        name: "Trigger Mask.",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x38) => Ok(Item {
        tag,
        name: "Persistence ID",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x73) => Ok(Item {
        tag,
        name: "B-mode Dynamic Range",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x26) => Ok(Item {
        tag,
        name: "Color Invert",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x78) => Ok(Item {
        tag,
        name: "B-mode Display Depth End",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x62) => Ok(Item {
        tag,
        name: "CD Dynamic Range",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x6c) => Ok(Item {
        tag,
        name: "CD Pan Box Min Y1",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0xf6) => Ok(Item {
        tag,
        name: "Series Base UID",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x72) => Ok(Item {
        tag,
        name: "B-mode Frequency",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x76) => Ok(Item {
        tag,
        name: "B-mode Persistence",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x18) => Ok(Item {
        tag,
        name: "Transformation Matrix Sequence",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x8d) => Ok(Item {
        tag,
        name: "ECG Data Value",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x7c) => Ok(Item {
        tag,
        name: "B Preset Image Look",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x8a) => Ok(Item {
        tag,
        name: "ECG Sampling Interval (milliseconds)",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x7e) => Ok(Item {
        tag,
        name: "B Edge",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x6b) => Ok(Item {
        tag,
        name: "CD Pan Box Min X1",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x33) => Ok(Item {
        tag,
        name: "Alpha coefficient",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x52) => Ok(Item {
        tag,
        name: "Capture Type Number",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x75) => Ok(Item {
        tag,
        name: "B-mode Space Time",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x89) => Ok(Item {
        tag,
        name: "ECG Reference Timestamp",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x8f) => Ok(Item {
        tag,
        name: "Live Dual Mode Indicator",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x71) => Ok(Item {
        tag,
        name: "3DCard Xdcr Angle",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x81) => Ok(Item {
        tag,
        name: "B-mode Delta (ECRI) Map Diagonal",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x92) => Ok(Item {
        tag,
        name: "3DCard HRWave Max",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x83) => Ok(Item {
        tag,
        name: "Microseconds in unit timestamp",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x02) => Ok(Item {
        tag,
        name: "Acuson Region Type",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0xf4) => Ok(Item {
        tag,
        name: "Last Modify Time",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x82) => Ok(Item {
        tag,
        name: "Bytes Per Timestamp",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x30) => Ok(Item {
        tag,
        name: "Persistence SQ",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x25) => Ok(Item {
        tag,
        name: "Full Colormap.",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x24) => Ok(Item {
        tag,
        name: "Color Map Family",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x63) => Ok(Item {
        tag,
        name: "CD Velocity Scale Min",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x70) => Ok(Item {
        tag,
        name: "3DCard Step Angle",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x6d) => Ok(Item {
        tag,
        name: "CPS Map Type",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x2c) => Ok(Item {
        tag,
        name: "Color Accent",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x32) => Ok(Item {
        tag,
        name: "Persistence Coefficient Mode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0xf3) => Ok(Item {
        tag,
        name: "Last Modify Date",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x0f) => Ok(Item {
        tag,
        name: "Acuson Mechanical Apex Y",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x6e) => Ok(Item {
        tag,
        name: "CPS Map Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x2b) => Ok(Item {
        tag,
        name: "CD Color Mix Points Y2",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x31) => Ok(Item {
        tag,
        name: "Persistence Mode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x79) => Ok(Item {
        tag,
        name: "B-mode Res Mode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x86) => Ok(Item {
        tag,
        name: "R-Wave Timestamp",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x65) => Ok(Item {
        tag,
        name: "CD Color Mode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x35) => Ok(Item {
        tag,
        name: "Persistence Time Flag",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x84) => Ok(Item {
        tag,
        name: "Start Stopwatch Timestamp",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x77) => Ok(Item {
        tag,
        name: "B-mode Display Depth Start",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x7a) => Ok(Item {
        tag,
        name: "B-mode Preset Application",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0xf2) => Ok(Item {
        tag,
        name: "Study Directory",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x7b) => Ok(Item {
        tag,
        name: "Image Spec Name",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x0e) => Ok(Item {
        tag,
        name: "Acuson Mechanical Apex X",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x61) => Ok(Item {
        tag,
        name: "CD PRI",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x85) => Ok(Item {
        tag,
        name: "Acoustic Frame Timestamp",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x0c) => Ok(Item {
        tag,
        name: "Acuson Image Apex Y",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x01) => Ok(Item {
        tag,
        name: "Image Format",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x0b) => Ok(Item {
        tag,
        name: "Acuson Image Apex X",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x8e) => Ok(Item {
        tag,
        name: "Contrast/Active Image Indicator",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x90) => Ok(Item {
        tag,
        name: "3DCard Clipset ID",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x2a) => Ok(Item {
        tag,
        name: "CD Color Mix Points X2",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x22) => Ok(Item {
        tag,
        name: "Right angle",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x68) => Ok(Item {
        tag,
        name: "CD Delta",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x27) => Ok(Item {
        tag,
        name: "Color Baseline",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x91) => Ok(Item {
        tag,
        name: "3DCard HRWave Min",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x29) => Ok(Item {
        tag,
        name: "CD Color Mix Points Y1",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x37) => Ok(Item {
        tag,
        name: "Persistence Frame Rate",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x00) => Ok(Item {
        tag,
        name: "Lossy Compression Ratio",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x60) => Ok(Item {
        tag,
        name: "CD Steering Angle",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x74) => Ok(Item {
        tag,
        name: "B-mode Frame Rate",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Imaging Dynamics Company Ltd." => match (g0, g1, e0, e1) {
      (0x43, 0x21, _, 0x05) => Ok(Item {
        tag,
        name: "Custom Tag",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x43, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Custom Tag",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x43, 0x21, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x43, 0x21, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x43, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Custom Tag",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x43, 0x21, _, 0x51) => Ok(Item {
        tag,
        name: "Custom Tag",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x43, 0x21, _, 0x64) => Ok(Item {
        tag,
        name: "Custom Tag",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AMICAS0" => match (g0, g1, e0, e1) {
      (0x00, 0x23, _, 0x01) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x08) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x16) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS RIS" => match (g0, g1, e0, e1) {
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "Patient UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x11) => Ok(Item {
        tag,
        name: "Patient ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x20) => Ok(Item {
        tag,
        name: "Patient Registration Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x21) => Ok(Item {
        tag,
        name: "Patient Registration Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x30) => Ok(Item {
        tag,
        name: "Patient NameRIS",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x31) => Ok(Item {
        tag,
        name: "Patient Prename",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x40) => Ok(Item {
        tag,
        name: "Patient Hospital Status",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x41) => Ok(Item {
        tag,
        name: "Medical Alerts",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x42) => Ok(Item {
        tag,
        name: "Contrast Allergy",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x10) => Ok(Item {
        tag,
        name: "Request UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x45) => Ok(Item {
        tag,
        name: "Requesting Physician",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x50) => Ok(Item {
        tag,
        name: "Requested Physician",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x10) => Ok(Item {
        tag,
        name: "Patient Study UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "IMS s.r.l. Biopsy Private Code" => match (g0, g1, e0, e1) {
      (0x12, 0x69, _, 0x01) => Ok(Item {
        tag,
        name: "Biopsy Image",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x69, _, 0x10) => Ok(Item {
        tag,
        name: "Biopsy Markers X",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x12, 0x69, _, 0x11) => Ok(Item {
        tag,
        name: "Biopsy Markers Y",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x12, 0x69, _, 0x12) => Ok(Item {
        tag,
        name: "Biopsy Markers Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x69, _, 0x20) => Ok(Item {
        tag,
        name: "Biopsy Area Left Border",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x69, _, 0x21) => Ok(Item {
        tag,
        name: "Biopsy Area Right Border",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x69, _, 0x22) => Ok(Item {
        tag,
        name: "Biopsy Area Top Border",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x69, _, 0x23) => Ok(Item {
        tag,
        name: "Biopsy Area Bottom Border",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Picker NM Private Group" => match (g0, g1, e0, e1) {
      (0x70, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x03) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x04) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x05) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x06) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x07) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x08) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x09) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x10) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x11) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x12) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x13) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x14) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x15) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x16) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x17) => Ok(Item {
        tag,
        name: "Contains a text string that includes some of the same information that appears on the Odyssey Clinical Index (image directory) for this Image.",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x43, _, 0x00) => Ok(Item {
        tag,
        name: "Private.",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SVISION" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "Ref. Image Instance UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x00) => Ok(Item {
        tag,
        name: "Extended Body Part",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Rel. Presentation State Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Bucky Format",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "Lower Window Offset",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xf0) => Ok(Item {
        tag,
        name: "Images SOP Class",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x93) => Ok(Item {
        tag,
        name: "Tube Turn Angle",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x92) => Ok(Item {
        tag,
        name: "Shape Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Bucky Grid",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x90) => Ok(Item {
        tag,
        name: "Brightness",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x78) => Ok(Item {
        tag,
        name: "Filter Thickness 1",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x00) => Ok(Item {
        tag,
        name: "Image Laterality",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb1) => Ok(Item {
        tag,
        name: "Shift Reference Value",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x02) => Ok(Item {
        tag,
        name: "Burned In Annotation",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x94) => Ok(Item {
        tag,
        name: "Stand drive level",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x51) => Ok(Item {
        tag,
        name: "Max. Window Latitude",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x00) => Ok(Item {
        tag,
        name: "Number of Series",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Min. Window Latitude",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x06) => Ok(Item {
        tag,
        name: "New Image",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x13) => Ok(Item {
        tag,
        name: "Newest Study",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "Threshold C-Algorithm",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x02) => Ok(Item {
        tag,
        name: "Cut Out Image",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x01) => Ok(Item {
        tag,
        name: "Not Processed Image",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "Tube Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Find Range Algorithm",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x04) => Ok(Item {
        tag,
        name: "Stored Image",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "Extended Exposure Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x60) => Ok(Item {
        tag,
        name: "Decomposition Layer",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x34) => Ok(Item {
        tag,
        name: "Focus",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x01) => Ok(Item {
        tag,
        name: "Letter Position",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Collimator Distance X",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x31) => Ok(Item {
        tag,
        name: "Upper Window Offset",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Sensometric Curve",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "AEC Field",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x05) => Ok(Item {
        tag,
        name: "Retrieved Image",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x07) => Ok(Item {
        tag,
        name: "Media Stored Image",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x41) => Ok(Item {
        tag,
        name: "Max. Printable Density",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb0) => Ok(Item {
        tag,
        name: "Dose Indicator",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Patient Thickness",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x91) => Ok(Item {
        tag,
        name: "Contrast",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x38) => Ok(Item {
        tag,
        name: "Age Group",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x20) => Ok(Item {
        tag,
        name: "Scheduled Procedure Step",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "Edge Contrast Boosting",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x75) => Ok(Item {
        tag,
        name: "Filter Material 2",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa0) => Ok(Item {
        tag,
        name: "Fixed Grid System",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Key Note Instance UID",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Desk Command",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x09) => Ok(Item {
        tag,
        name: "Image Stitched Manually",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x52) => Ok(Item {
        tag,
        name: "Rel. Window Alignment",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "Beam Distance",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Bucky Height",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x11) => Ok(Item {
        tag,
        name: "Newest Series",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x03) => Ok(Item {
        tag,
        name: "Latitude Reduction",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Referenced Image SOP Class",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x79) => Ok(Item {
        tag,
        name: "Filter Thickness 2",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x01) => Ok(Item {
        tag,
        name: "Number of Studies",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "Collimator Distance Y",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0xf0) => Ok(Item {
        tag,
        name: "Image SOP Class",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "AEC Density",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x10) => Ok(Item {
        tag,
        name: "Extended View Position",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "Noise Reduction",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x03) => Ok(Item {
        tag,
        name: "Duplicated Image",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "Central Beam Y",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "AEC Film Screen",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x69) => Ok(Item {
        tag,
        name: "Collimator Angle",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x74) => Ok(Item {
        tag,
        name: "Filter Material 1",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x12) => Ok(Item {
        tag,
        name: "Oldest Study",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Filter Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa8) => Ok(Item {
        tag,
        name: "Extended X-ray Tube Current",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0a) => Ok(Item {
        tag,
        name: "Image Stitched Automatically",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x00) => Ok(Item {
        tag,
        name: "Original Image",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Actual Exposure Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x68) => Ok(Item {
        tag,
        name: "C-Arm Angle",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x10) => Ok(Item {
        tag,
        name: "Oldest Series",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Workstation Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x20) => Ok(Item {
        tag,
        name: "Source Image File",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x40) => Ok(Item {
        tag,
        name: "Min. Printable Density",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Bucky Angle",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "Object Position",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x21) => Ok(Item {
        tag,
        name: "Source UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x08) => Ok(Item {
        tag,
        name: "Image State",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Storage State",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x91) => Ok(Item {
        tag,
        name: "Central Beam X",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Contrast Amplification",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x05) => Ok(Item {
        tag,
        name: "Rel. Presentation State UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Mortara_Inc" => match (g0, g1, e0, e1) {
      (0x14, 0x55, _, 0x00) => Ok(Item {
        tag,
        name: "ELI Interpretation Vector",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x14, 0x55, _, 0x01) => Ok(Item {
        tag,
        name: "Custom ID",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x14, 0x55, _, 0x02) => Ok(Item {
        tag,
        name: "Race",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x14, 0x55, _, 0x03) => Ok(Item {
        tag,
        name: "Social Security Number",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x14, 0x55, _, 0x04) => Ok(Item {
        tag,
        name: "Attending Physician",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x14, 0x55, _, 0x05) => Ok(Item {
        tag,
        name: "Procedural Diagnosis",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x14, 0x55, _, 0x06) => Ok(Item {
        tag,
        name: "Note1",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x14, 0x55, _, 0x07) => Ok(Item {
        tag,
        name: "Note2",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x14, 0x55, _, 0x08) => Ok(Item {
        tag,
        name: "Order Request Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x14, 0x55, _, 0x10) => Ok(Item {
        tag,
        name: "Manufacturer Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-Private_ICS Release 1;6" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_2,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x66) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x37) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x39) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x36) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x5d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x44) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x4f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x3d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x69) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x5c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x6d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x67) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x5e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x68) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x63) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x38) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x5f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x35) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x65) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-Private_ICS Release 1;1" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x6b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xc1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xcb) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xcc) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xcd) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xd4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xd5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xd6) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "EMAGEON STUDY HOME" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_XR3DCAL_01" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "3Dcal image rows",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "3Dcal image columns",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x03) => Ok(Item {
        tag,
        name: "3Dcal field of view",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x04) => Ok(Item {
        tag,
        name: "3Dcal acquisition date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x05) => Ok(Item {
        tag,
        name: "3Dcal acquisition time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x06) => Ok(Item {
        tag,
        name: "3Dcal calibration processing date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x07) => Ok(Item {
        tag,
        name: "3Dcal calibration processing time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x08) => Ok(Item {
        tag,
        name: "3Dcal L arm angle",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x09) => Ok(Item {
        tag,
        name: "3Dcal Pivot angle vector",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x0a) => Ok(Item {
        tag,
        name: "3Dcal C arm angle",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0b) => Ok(Item {
        tag,
        name: "3Dcal matrix sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0c) => Ok(Item {
        tag,
        name: "3Dcal matrix elements",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x0d) => Ok(Item {
        tag,
        name: "3Dcal algorithm version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0e) => Ok(Item {
        tag,
        name: "3Dcal 3D frame unit size",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0f) => Ok(Item {
        tag,
        name: "3Dcal calibration mode",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "3Dcal image frame origin row",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "3Dcal image frame origin column",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "3Dcal positioner pivot rotation speed",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x13) => Ok(Item {
        tag,
        name: "3Dcal number of images",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x14) => Ok(Item {
        tag,
        name: "3Dcal Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x15) => Ok(Item {
        tag,
        name: "3Dcal image pixel spacing",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_2,
      }),
      (0x00, 0x21, _, 0x16) => Ok(Item {
        tag,
        name: "3Dcal centering mode",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AGFA" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Private Identification Code",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Identification Data (Note 2)",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_3,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "Sensitometry Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "Window/Level List (Note 3)",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_3,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "Dose Monitoring List",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "Other Info (Note 5)",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_3,
      }),
      (0x00, 0x19, _, 0x1a) => Ok(Item {
        tag,
        name: "Clipped Exposure Deviation",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1b) => Ok(Item {
        tag,
        name: "Logarithmic PLT Full Scale",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Total number of series",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "Session Number",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "ID Station name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x65) => Ok(Item {
        tag,
        name: "Number of images in study to be transmitted (only sent with autoverify: on)",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Total number of images",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Geometrical Transformations",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "Roam Origin",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Zoom factor",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x93) => Ok(Item {
        tag,
        name: "Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Applicare/Print/Version 5.1" => match (g0, g1, e0, e1) {
      (0x41, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x41, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x41, 0x01, _, 0x03) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x41, 0x01, _, 0x04) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x41, 0x01, _, 0x05) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x41, 0x01, _, 0x06) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x41, 0x01, _, 0x07) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x41, 0x01, _, 0x08) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x41, 0x01, _, 0x09) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_GENIE_1" => match (g0, g1, e0, e1) {
      (0x00, 0x11, _, 0x84) => Ok(Item {
        tag,
        name: "Interpolation Center Y",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x18) => Ok(Item {
        tag,
        name: "Time",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x3d) => Ok(Item {
        tag,
        name: "Energy Peak (retired)",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x50, 0x01, _, 0x14) => Ok(Item {
        tag,
        name: "StylePSize",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Study Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x45) => Ok(Item {
        tag,
        name: "SOPClassUID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2a) => Ok(Item {
        tag,
        name: "Number View Sets",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x59) => Ok(Item {
        tag,
        name: "ShapePtsSpace",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x57) => Ok(Item {
        tag,
        name: "FOV",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_2,
      }),
      (0x00, 0x33, _, 0x08) => Ok(Item {
        tag,
        name: "Xeleris Data Object Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x7e) => Ok(Item {
        tag,
        name: "Ref Slice Width",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x44) => Ok(Item {
        tag,
        name: "Num Views Acquired (retired)",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x2e) => Ok(Item {
        tag,
        name: "Pixel Overflow Flag",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x24) => Ok(Item {
        tag,
        name: "FOV Mask Y Cutoff Distance",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x54) => Ok(Item {
        tag,
        name: "Seeds",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x50, 0x01, _, 0x07) => Ok(Item {
        tag,
        name: "CurveType",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x20) => Ok(Item {
        tag,
        name: "BulkDataFormat",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1_TO_N,
      }),
      (0x50, 0x01, _, 0x3a) => Ok(Item {
        tag,
        name: "Software version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x60) => Ok(Item {
        tag,
        name: "DatasetROIMapping",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x50, 0x01, _, 0x46) => Ok(Item {
        tag,
        name: "SOPInstanceUID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x13) => Ok(Item {
        tag,
        name: "Xeleris Frame Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x0c) => Ok(Item {
        tag,
        name: "Num Beats",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x17) => Ok(Item {
        tag,
        name: "Preceding Beat",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x25) => Ok(Item {
        tag,
        name: "TxtText",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x1c) => Ok(Item {
        tag,
        name: "Axial Acceptance Angle",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x41) => Ok(Item {
        tag,
        name: "Patient Flags",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x42) => Ok(Item {
        tag,
        name: "Rotation Angle",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x2a) => Ok(Item {
        tag,
        name: "Phase Duration (retired)",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x24) => Ok(Item {
        tag,
        name: "TxtY",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "Study Flags",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x6a) => Ok(Item {
        tag,
        name: "Cursor Coordinates",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x0a) => Ok(Item {
        tag,
        name: "XUnits",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x35, _, 0x01) => Ok(Item {
        tag,
        name: "Start Angle",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x50, 0x01, _, 0x34) => Ok(Item {
        tag,
        name: "CurveName",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2f) => Ok(Item {
        tag,
        name: "Table Direction",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x43) => Ok(Item {
        tag,
        name: "Patient Creation Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x23) => Ok(Item {
        tag,
        name: "Use FOV Mask",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x19) => Ok(Item {
        tag,
        name: "SegStyleLine",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x30) => Ok(Item {
        tag,
        name: "Picture Object Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x69) => Ok(Item {
        tag,
        name: "Number of Cursors",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x4b) => Ok(Item {
        tag,
        name: "LineDashLength",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x11) => Ok(Item {
        tag,
        name: "Source Translator",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x12) => Ok(Item {
        tag,
        name: "Dataset Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x1d) => Ok(Item {
        tag,
        name: "Energy Range",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x33) => Ok(Item {
        tag,
        name: "Number of triggers",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x0a) => Ok(Item {
        tag,
        name: "Series Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x41) => Ok(Item {
        tag,
        name: "Modified",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x4d) => Ok(Item {
        tag,
        name: "Interactivity",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x31) => Ok(Item {
        tag,
        name: "DerivedFromImageUID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x71) => Ok(Item {
        tag,
        name: "Back Proj Filter Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x1a) => Ok(Item {
        tag,
        name: "Copper Attenuator Thickness",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x33) => Ok(Item {
        tag,
        name: "Rotational Continuous Speed",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x7b) => Ok(Item {
        tag,
        name: "Back Proj Filter Param",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x65) => Ok(Item {
        tag,
        name: "Reference Dataset UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x55) => Ok(Item {
        tag,
        name: "Shape",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x33, _, 0x1a) => Ok(Item {
        tag,
        name: "ProtocolName",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x27) => Ok(Item {
        tag,
        name: "ROI Top Left",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_2,
      }),
      (0x00, 0x11, _, 0x43) => Ok(Item {
        tag,
        name: "Window Inverse Flag",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x5d) => Ok(Item {
        tag,
        name: "ROIFlags",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x36) => Ok(Item {
        tag,
        name: "CurveUID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x39) => Ok(Item {
        tag,
        name: "Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x6d) => Ok(Item {
        tag,
        name: "Motion Curve UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x0d) => Ok(Item {
        tag,
        name: "Suspend",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x15) => Ok(Item {
        tag,
        name: "Fscalar",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x7f) => Ok(Item {
        tag,
        name: "Ref Trans Pixel Volume",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x16) => Ok(Item {
        tag,
        name: "Energy Number",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2c) => Ok(Item {
        tag,
        name: "Series Comments",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x55) => Ok(Item {
        tag,
        name: "Period",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x65) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1b) => Ok(Item {
        tag,
        name: "RelevantDataUID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x63) => Ok(Item {
        tag,
        name: "Xeleris Data Information Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x29) => Ok(Item {
        tag,
        name: "Number MG Time Slots",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x44) => Ok(Item {
        tag,
        name: "Threshold Center",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x30) => Ok(Item {
        tag,
        name: "ROIName",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x41) => Ok(Item {
        tag,
        name: "Orientation Angle",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x0c) => Ok(Item {
        tag,
        name: "Edit",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x5b) => Ok(Item {
        tag,
        name: "ShapeCtrlPts",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x50, 0x01, _, 0x3b) => Ok(Item {
        tag,
        name: "StartDate",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x4c) => Ok(Item {
        tag,
        name: "LineThickness",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x14) => Ok(Item {
        tag,
        name: "ECT Phase Num",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x2f) => Ok(Item {
        tag,
        name: "Overflow Level",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x0f) => Ok(Item {
        tag,
        name: "StyleFill",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x1b) => Ok(Item {
        tag,
        name: "Det Ang Separation",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x44) => Ok(Item {
        tag,
        name: "Name",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x23) => Ok(Item {
        tag,
        name: "Initiation Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x22) => Ok(Item {
        tag,
        name: "TextAnnots",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x75) => Ok(Item {
        tag,
        name: "Recon Area",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x5c) => Ok(Item {
        tag,
        name: "ShapeCPSpace",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x21) => Ok(Item {
        tag,
        name: "Series Flags",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x22) => Ok(Item {
        tag,
        name: "Xeleris Detector Information Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x3a) => Ok(Item {
        tag,
        name: "Picture Format",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x21) => Ok(Item {
        tag,
        name: "SegAllowDirInt",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x33, _, 0x22) => Ok(Item {
        tag,
        name: "DoubleDataFormat",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1_TO_N,
      }),
      (0x50, 0x01, _, 0x38) => Ok(Item {
        tag,
        name: "Modified",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "Modified",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x5f) => Ok(Item {
        tag,
        name: "Id",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x30) => Ok(Item {
        tag,
        name: "Allocate trigger buffer",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x06) => Ok(Item {
        tag,
        name: "SOPInstanceUID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x64) => Ok(Item {
        tag,
        name: "SDODoubleData SQ",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2b) => Ok(Item {
        tag,
        name: "Trigger History UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x3c) => Ok(Item {
        tag,
        name: "CompletionDate",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x21) => Ok(Item {
        tag,
        name: "Acq Zoom (retired)",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x4a) => Ok(Item {
        tag,
        name: "LineStyle",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "Dataset Object Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x37) => Ok(Item {
        tag,
        name: "ROIArea",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x4f) => Ok(Item {
        tag,
        name: "NameDisplay",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x8d) => Ok(Item {
        tag,
        name: "Three-D Zero In",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x38) => Ok(Item {
        tag,
        name: "RR Window Width",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x1d) => Ok(Item {
        tag,
        name: "SegStylePoint",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x76) => Ok(Item {
        tag,
        name: "Start View",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x56) => Ok(Item {
        tag,
        name: "ShapeTilt",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x50, 0x01, _, 0x47) => Ok(Item {
        tag,
        name: "NormalColor",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x64) => Ok(Item {
        tag,
        name: "Spatial Orientation",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x19) => Ok(Item {
        tag,
        name: "Transmission Mask Width",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x1e) => Ok(Item {
        tag,
        name: "SegStylePColour",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x13) => Ok(Item {
        tag,
        name: "Xeleris Energy Window Range Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x37) => Ok(Item {
        tag,
        name: "Starting Heart Rate",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x1a) => Ok(Item {
        tag,
        name: "SegStyleFill",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0x27) => Ok(Item {
        tag,
        name: "Number Detectors",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x17) => Ok(Item {
        tag,
        name: "RR Interval Window Number",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x04) => Ok(Item {
        tag,
        name: "Srid",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x15) => Ok(Item {
        tag,
        name: "Detector Number",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x09) => Ok(Item {
        tag,
        name: "Legend",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x20) => Ok(Item {
        tag,
        name: "SegName",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x85) => Ok(Item {
        tag,
        name: "Quant Filter Flag",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x42) => Ok(Item {
        tag,
        name: "Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x6c) => Ok(Item {
        tag,
        name: "Motion Threshold",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x24) => Ok(Item {
        tag,
        name: "Description",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x62) => Ok(Item {
        tag,
        name: "Linear FOV",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x33) => Ok(Item {
        tag,
        name: "Energy Correct Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x20) => Ok(Item {
        tag,
        name: "Accepted Beats Time",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x28) => Ok(Item {
        tag,
        name: "Number RR Windows",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x22) => Ok(Item {
        tag,
        name: "Acq Pan (retired)",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1e) => Ok(Item {
        tag,
        name: "DoubleData",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x13, _, 0x24) => Ok(Item {
        tag,
        name: "Series Accepted Beats",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x7d) => Ok(Item {
        tag,
        name: "Attenuation Coef",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1d) => Ok(Item {
        tag,
        name: "IntData",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x50, 0x01, _, 0x0b) => Ok(Item {
        tag,
        name: "YUnits",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x35) => Ok(Item {
        tag,
        name: "DatasetName",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x21) => Ok(Item {
        tag,
        name: "Threshold",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_2,
      }),
      (0x00, 0x11, _, 0x34) => Ok(Item {
        tag,
        name: "Spatial Correct Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x42) => Ok(Item {
        tag,
        name: "Patient Creation Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x36) => Ok(Item {
        tag,
        name: "Trigger data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x0d) => Ok(Item {
        tag,
        name: "Radio Nuclide Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x12) => Ok(Item {
        tag,
        name: "Xeleris Energy Window Information Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x14) => Ok(Item {
        tag,
        name: "Completion Time",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x3e) => Ok(Item {
        tag,
        name: "FOV Shape",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x81) => Ok(Item {
        tag,
        name: "Attenuation Threshold",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Patient Object Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x7c) => Ok(Item {
        tag,
        name: "Back Proj Filter Param 2",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x12) => Ok(Item {
        tag,
        name: "StylePoint",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x49) => Ok(Item {
        tag,
        name: "FillPattern",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x0b) => Ok(Item {
        tag,
        name: "Effective Series Duration",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x53) => Ok(Item {
        tag,
        name: "SeedSpace",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x17) => Ok(Item {
        tag,
        name: "AutoTrack Width",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x0e) => Ok(Item {
        tag,
        name: "StyleLine",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x7a) => Ok(Item {
        tag,
        name: "Pre Filter Param 2",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x08) => Ok(Item {
        tag,
        name: "GraphType",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x36) => Ok(Item {
        tag,
        name: "Uniformity Correct Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x66) => Ok(Item {
        tag,
        name: "Starcam Reference Dataset",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2d) => Ok(Item {
        tag,
        name: "Track Beat Average",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x68) => Ok(Item {
        tag,
        name: "Cursor Length",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x34) => Ok(Item {
        tag,
        name: "Trigger size",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x78) => Ok(Item {
        tag,
        name: "Dual Energy Processing",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x23) => Ok(Item {
        tag,
        name: "TxtX",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x1f) => Ok(Item {
        tag,
        name: "Image Orientation",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x17) => Ok(Item {
        tag,
        name: "Date",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x23) => Ok(Item {
        tag,
        name: "StringDataFormat",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x3b) => Ok(Item {
        tag,
        name: "Pixel Scale",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x12) => Ok(Item {
        tag,
        name: "Num ECT Phases",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x45) => Ok(Item {
        tag,
        name: "Threshold Width",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x77) => Ok(Item {
        tag,
        name: "Attenuation Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x38) => Ok(Item {
        tag,
        name: "Byte Order",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x1f) => Ok(Item {
        tag,
        name: "SegStylePSize",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x61) => Ok(Item {
        tag,
        name: "Image Size",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x79) => Ok(Item {
        tag,
        name: "Pre Filter Param",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x82) => Ok(Item {
        tag,
        name: "Interpolation Distance",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x37) => Ok(Item {
        tag,
        name: "Acquisition Specific Correction Name",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x32) => Ok(Item {
        tag,
        name: "DerivedFromImages",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x8b) => Ok(Item {
        tag,
        name: "Three-D Zero",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x15) => Ok(Item {
        tag,
        name: "Segments",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x24) => Ok(Item {
        tag,
        name: "Initiation Delay",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x45) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x15) => Ok(Item {
        tag,
        name: "WB Scan Num",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x63) => Ok(Item {
        tag,
        name: "Spatial Offset",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x74) => Ok(Item {
        tag,
        name: "Recon Pan LR Offset",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x32) => Ok(Item {
        tag,
        name: "Processing Parent UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x39) => Ok(Item {
        tag,
        name: "RR Window Offset",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x6e) => Ok(Item {
        tag,
        name: "Recon Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x05) => Ok(Item {
        tag,
        name: "SOPClassUID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x25) => Ok(Item {
        tag,
        name: "FOV Mask Cutoff Angle",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x26) => Ok(Item {
        tag,
        name: "Number Energy Sets",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x89) => Ok(Item {
        tag,
        name: "Rfmtr Trans Ref mm",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x18) => Ok(Item {
        tag,
        name: "MG Bin Number",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x19) => Ok(Item {
        tag,
        name: "ProtocoldataFlags",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x12) => Ok(Item {
        tag,
        name: "RAL Flags",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1c) => Ok(Item {
        tag,
        name: "BulkData",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x26) => Ok(Item {
        tag,
        name: "Study Comments",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x16) => Ok(Item {
        tag,
        name: "Comb Head Number",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x8c) => Ok(Item {
        tag,
        name: "Three-D Zero Length",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x8a) => Ok(Item {
        tag,
        name: "Two Line Trans Ref",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x33) => Ok(Item {
        tag,
        name: "CurveFlags",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x22) => Ok(Item {
        tag,
        name: "User Orientation",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x52) => Ok(Item {
        tag,
        name: "BpSegPairs",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x87) => Ok(Item {
        tag,
        name: "Slice Width Pixels",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x72) => Ok(Item {
        tag,
        name: "Recon Arc",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x16) => Ok(Item {
        tag,
        name: "ProtocolDataUID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x51) => Ok(Item {
        tag,
        name: "BpSeg",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x13, _, 0x1d) => Ok(Item {
        tag,
        name: "Theta Acceptance Value",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x5a) => Ok(Item {
        tag,
        name: "ShapeCtrlPtsCounts",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x2d) => Ok(Item {
        tag,
        name: "View Y Adjustment",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x28) => Ok(Item {
        tag,
        name: "ROI Bottom Right",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_2,
      }),
      (0x00, 0x15, _, 0x11) => Ok(Item {
        tag,
        name: "Frame Termination Value",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x29) => Ok(Item {
        tag,
        name: "Uniformity Mean",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x83) => Ok(Item {
        tag,
        name: "Interpolation Center X",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x1e) => Ok(Item {
        tag,
        name: "Energy Width (retired)",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x00, 0x11, _, 0x31) => Ok(Item {
        tag,
        name: "Acquisition Parent UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x18) => Ok(Item {
        tag,
        name: "SegEnd",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x5f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x1a) => Ok(Item {
        tag,
        name: "Detector Count Zone",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "Study Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x62) => Ok(Item {
        tag,
        name: "Xeleris Gated Information Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x52) => Ok(Item {
        tag,
        name: "Xeleris Rotation Information Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x35) => Ok(Item {
        tag,
        name: "Tuning Calib Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x56) => Ok(Item {
        tag,
        name: "Elapsed Time",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x43) => Ok(Item {
        tag,
        name: "Name",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x19) => Ok(Item {
        tag,
        name: "Radius Of Rotation",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x86) => Ok(Item {
        tag,
        name: "Head Conversion",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x50) => Ok(Item {
        tag,
        name: "Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x21) => Ok(Item {
        tag,
        name: "IntDataFormat",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x13, _, 0x22) => Ok(Item {
        tag,
        name: "Linear Depth",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_2,
      }),
      (0x00, 0x13, _, 0x25) => Ok(Item {
        tag,
        name: "Series Rejected Beats",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x14) => Ok(Item {
        tag,
        name: "Original Image Num",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x25) => Ok(Item {
        tag,
        name: "Initiation Count Rate",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x13) => Ok(Item {
        tag,
        name: "Num WB Scans",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x07) => Ok(Item {
        tag,
        name: "Orig SOP Instance UID",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x33, _, 0x1f) => Ok(Item {
        tag,
        name: "StringData",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x23) => Ok(Item {
        tag,
        name: "Unif Date Time",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x16) => Ok(Item {
        tag,
        name: "SegType",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x3a) => Ok(Item {
        tag,
        name: "Percent Cycle Imaged",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x1e) => Ok(Item {
        tag,
        name: "Tomo View Offset",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x50, 0x01, _, 0x3d) => Ok(Item {
        tag,
        name: "DetectorName",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x50) => Ok(Item {
        tag,
        name: "Where Object Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x3c) => Ok(Item {
        tag,
        name: "Pixel Offset",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x26) => Ok(Item {
        tag,
        name: "TxtName",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x73) => Ok(Item {
        tag,
        name: "Recon Pan AP Offset",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x3f) => Ok(Item {
        tag,
        name: "Dataset Flags",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x10) => Ok(Item {
        tag,
        name: "Digital FOV",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_2,
      }),
      (0x00, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "Series Object Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x48) => Ok(Item {
        tag,
        name: "NameFont",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x18) => Ok(Item {
        tag,
        name: "Transmission Scan Time",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x5e) => Ok(Item {
        tag,
        name: "FrameNumber",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x88) => Ok(Item {
        tag,
        name: "Rfmtr Trans Ref",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x4e) => Ok(Item {
        tag,
        name: "NamePos",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x39) => Ok(Item {
        tag,
        name: "Compression Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x17) => Ok(Item {
        tag,
        name: "SegStart",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x13) => Ok(Item {
        tag,
        name: "Dataset Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x13) => Ok(Item {
        tag,
        name: "StylePColour",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x35) => Ok(Item {
        tag,
        name: "Trigger data size",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x46) => Ok(Item {
        tag,
        name: "Interpolation Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x1b) => Ok(Item {
        tag,
        name: "SegStyleColour",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x34) => Ok(Item {
        tag,
        name: "Gantry Motion Type (retired)",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x35) => Ok(Item {
        tag,
        name: "Gantry Locus Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x6f) => Ok(Item {
        tag,
        name: "Pre Filter Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x1c) => Ok(Item {
        tag,
        name: "Energy Offset",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x00, 0x11, _, 0x2c) => Ok(Item {
        tag,
        name: "View X Adjustment",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x11) => Ok(Item {
        tag,
        name: "Dataset Modified",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x10) => Ok(Item {
        tag,
        name: "Modified",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x6b) => Ok(Item {
        tag,
        name: "Recon Options Flag",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x11) => Ok(Item {
        tag,
        name: "Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x1b) => Ok(Item {
        tag,
        name: "Num Energy Windows",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x11) => Ok(Item {
        tag,
        name: "StyleWidth",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x10) => Ok(Item {
        tag,
        name: "Frame Termination Condition",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x03) => Ok(Item {
        tag,
        name: "Cid",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x16) => Ok(Item {
        tag,
        name: "AutoTrack Peak",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x1e) => Ok(Item {
        tag,
        name: "Dataset UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2e) => Ok(Item {
        tag,
        name: "Distance Prescribed",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x26) => Ok(Item {
        tag,
        name: "Table Orientation",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x40) => Ok(Item {
        tag,
        name: "Viewing Object Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x67) => Ok(Item {
        tag,
        name: "Reference Frame Number",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x10) => Ok(Item {
        tag,
        name: "StyleColour",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x1c) => Ok(Item {
        tag,
        name: "SegStyleWidth",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "SCHICK TECHNOLOGIES - Note List Creator ID" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Reference Image Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "Item",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips PET Private Group" => match (g0, g1, e0, e1) {
      (0x05, 0x11, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x05, 0x11, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x05, 0x11, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x05, 0x11, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x05, 0x11, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x05, 0x11, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x00) => Ok(Item {
        tag,
        name: "SUV Scale Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x01) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x02) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x03) => Ok(Item {
        tag,
        name: "Original image file name",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x04) => Ok(Item {
        tag,
        name: "File Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x05) => Ok(Item {
        tag,
        name: "Worklist Info File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x07) => Ok(Item {
        tag,
        name: "Acquisition File Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x09) => Ok(Item {
        tag,
        name: "Activity Concentration Scale Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x0f) => Ok(Item {
        tag,
        name: "Segment Size",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x10) => Ok(Item {
        tag,
        name: "Segment Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x11) => Ok(Item {
        tag,
        name: "Number of Segments",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x12) => Ok(Item {
        tag,
        name: "File Data Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x53, _, 0xc2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_FALCON_03" => match (g0, g1, e0, e1) {
      (0x00, 0x45, _, 0x55) => Ok(Item {
        tag,
        name: "A_Coefficients",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 8,
          max: Some(8),
        },
      }),
      (0x00, 0x45, _, 0x62) => Ok(Item {
        tag,
        name: "User Window Center",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x63) => Ok(Item {
        tag,
        name: "User Window Width",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x65) => Ok(Item {
        tag,
        name: "Requested Detector Entrance Dose",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x67) => Ok(Item {
        tag,
        name: "VOI LUT Assymmetry parameter beta",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x00, 0x45, _, 0x69) => Ok(Item {
        tag,
        name: "Collimator rotation",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x72) => Ok(Item {
        tag,
        name: "Collimator Width",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x73) => Ok(Item {
        tag,
        name: "Collimator Height",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PHILIPS MR SPECTRO;1" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x46) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x78) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0x49) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x76) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x47) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x73) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x79) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x77) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x74) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x45) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Siemens: Thorax/Multix FD Post Processing" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "Label Left",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Label Left Orientation",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "Label Left Percentage X",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x03) => Ok(Item {
        tag,
        name: "Label Left Percentage X",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x04) => Ok(Item {
        tag,
        name: "Label Right",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x05) => Ok(Item {
        tag,
        name: "Label Right Orientation",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x06) => Ok(Item {
        tag,
        name: "Label Right Percentage X",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x07) => Ok(Item {
        tag,
        name: "Label Right Percentage X",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x08) => Ok(Item {
        tag,
        name: "Auto Window Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x09) => Ok(Item {
        tag,
        name: "Auto Window Center",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0a) => Ok(Item {
        tag,
        name: "Auto Window Width",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0b) => Ok(Item {
        tag,
        name: "Filter ID",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0c) => Ok(Item {
        tag,
        name: "Degree of Edge Enhancement",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0d) => Ok(Item {
        tag,
        name: "Half Kernel Size",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0e) => Ok(Item {
        tag,
        name: "Dose Control Value",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0f) => Ok(Item {
        tag,
        name: "Deleted Image Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Same Size Support",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "Label Left Init Position",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "Label Right Init Position",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x13) => Ok(Item {
        tag,
        name: "Patient Rotation",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x14) => Ok(Item {
        tag,
        name: "Anatomic Correct View Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x15) => Ok(Item {
        tag,
        name: "Auto Window Shift",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x16) => Ok(Item {
        tag,
        name: "Auto Window Expansion",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Applicare/Centricity Radiology Web/Version 1.0" => {
      match (g0, g1, e0, e1) {
        (0x41, 0x09, _, 0x01) => Ok(Item {
          tag,
          name: "Mammography Laterality",
          vrs: &[ValueRepresentation::ShortString],
          multiplicity: VM_1,
        }),
        (0x41, 0x09, _, 0x02) => Ok(Item {
          tag,
          name: "Mammography View Name",
          vrs: &[ValueRepresentation::ShortString],
          multiplicity: VM_1,
        }),
        (0x41, 0x09, _, 0x03) => Ok(Item {
          tag,
          name: "Mammography View Modifier",
          vrs: &[ValueRepresentation::ShortString],
          multiplicity: VM_1,
        }),
        _ => Err(()),
      }
    }
    "Philips Imaging DD 073" => match (g0, g1, e0, e1) {
      (0x40, 0x07, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEHC_CT_ADVAPP_001" => match (g0, g1, e0, e1) {
      (0x00, 0x53, _, 0x20) => Ok(Item {
        tag,
        name: "ShuttleFlag",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x21) => Ok(Item {
        tag,
        name: "TableSpeedNotReachesTargetFlag",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x40) => Ok(Item {
        tag,
        name: "IterativeReconAnnotation",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x41) => Ok(Item {
        tag,
        name: "IterativeReconMode",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x42) => Ok(Item {
        tag,
        name: "IterativeReconConfiguration",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x43) => Ok(Item {
        tag,
        name: "IterativeReconLevel",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x60) => Ok(Item {
        tag,
        name: "reconFlipRotateAnno",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x61) => Ok(Item {
        tag,
        name: "highResolutionFlag",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x62) => Ok(Item {
        tag,
        name: "RespiratoryFlag",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ACUSON" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Siemens: Thorax/Multix FD Version" => match (g0, g1, e0, e1) {
      (0x00, 0x17, _, 0x00) => Ok(Item {
        tag,
        name: "Build Date",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x01) => Ok(Item {
        tag,
        name: "IOD Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P Release 1;1" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x6e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "Zoom Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x61) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Zoom Function",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x6d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x19) => Ok(Item {
        tag,
        name: "Sample Data 2",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0e) => Ok(Item {
        tag,
        name: "Zoom Enable Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x6f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "Sample Bits Allocated 2",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x4e) => Ok(Item {
        tag,
        name: "Magnifying Glass Enable Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x6b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x45) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Sample Bits Stored",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x67) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Sample Representation",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Number Of Samples",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x43) => Ok(Item {
        tag,
        name: "Magnifying Glass Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x41) => Ok(Item {
        tag,
        name: "Magnifying Glass Rectangle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Physiological Data Type",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Smallest Sample Value",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x44) => Ok(Item {
        tag,
        name: "Magnifying Glass Function",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Physiological Data Type 2",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0f) => Ok(Item {
        tag,
        name: "Zoom Select Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xc1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x4f) => Ok(Item {
        tag,
        name: "Magnifying Glass Select Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1a) => Ok(Item {
        tag,
        name: "Sample Rate 2",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Physiological Data Channel And Kind 2",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0a) => Ok(Item {
        tag,
        name: "Sample Rate",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Zoom ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "Sample Representation 2",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x6a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x17) => Ok(Item {
        tag,
        name: "Largest Sample Value 2",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "Number Of Samples 2",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "Sample Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "Smallest Sample Value 2",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "Largest Sample Value",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Sample Bits Allocated",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x6c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x40) => Ok(Item {
        tag,
        name: "Magnifying Glass ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x44) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "Sample Bits Stored 2",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Physiological Data Channel And Kind",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xc0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "Sample High Bit 2",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Zoom Rectangle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Sample High Bit",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CBT RECON SLICE HEIGHT" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x88) => Ok(Item {
        tag,
        name: "Reconstruction Slice Height",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "DL_INTERNAL_USE" => match (g0, g1, e0, e1) {
      (0x00, 0x15, _, 0x8f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips EV Imaging DD 019" => match (g0, g1, e0, e1) {
      (0x20, 0x07, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x07, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CM VA0  OST" => match (g0, g1, e0, e1) {
      (0x60, 0x23, _, 0x00) => Ok(Item {
        tag,
        name: "Osteo Contour Comment",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x60, 0x23, _, 0x10) => Ok(Item {
        tag,
        name: "Osteo Contour Buffer",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "Applicare/RadWorks/Version 6.0" => match (g0, g1, e0, e1) {
      (0x41, 0x03, _, 0x01) => Ok(Item {
        tag,
        name: "Internal: non-existent tags",
        vrs: &[ValueRepresentation::AttributeTag],
        multiplicity: VM_1,
      }),
      (0x41, 0x03, _, 0x02) => Ok(Item {
        tag,
        name: "Internal: non-existent objects",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x01) => Ok(Item {
        tag,
        name: "Annotation Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x02) => Ok(Item {
        tag,
        name: "Annotation Value",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x03) => Ok(Item {
        tag,
        name: "Cutline Image UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x04) => Ok(Item {
        tag,
        name: "Cutline Set UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x05) => Ok(Item {
        tag,
        name: "Annotation Color",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x06) => Ok(Item {
        tag,
        name: "Annotation Line Style",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x07) => Ok(Item {
        tag,
        name: "Annotation Label",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x08) => Ok(Item {
        tag,
        name: "Annotation Creator",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x09) => Ok(Item {
        tag,
        name: "Annotation Creation Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x0a) => Ok(Item {
        tag,
        name: "Annotation Creation Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x0b) => Ok(Item {
        tag,
        name: "Annotation Modification Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x0c) => Ok(Item {
        tag,
        name: "Annotation Modifier",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x0d) => Ok(Item {
        tag,
        name: "Annotation Modification Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x0e) => Ok(Item {
        tag,
        name: "Annotation Modification Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x0f) => Ok(Item {
        tag,
        name: "Palette Color LUT Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x41, 0x05, _, 0x10) => Ok(Item {
        tag,
        name: "Annotation Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x41, 0x07, _, 0x01) => Ok(Item {
        tag,
        name: "Requested Palette Color LUT",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED DISPLAY 0000" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x99) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xc1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "SPI-P Release 1;3" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Image Enhancement ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Image Enhancement",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Convolution ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "Convolution Type",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Convolution Kernel Size ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x05) => Ok(Item {
        tag,
        name: "Convolution Kernel Size",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x00, 0x29, _, 0x06) => Ok(Item {
        tag,
        name: "Convolution Kernel",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x0c) => Ok(Item {
        tag,
        name: "Enhancement Gain",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1e) => Ok(Item {
        tag,
        name: "Image Enhancement Enable Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1f) => Ok(Item {
        tag,
        name: "Image Enhancement Select Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "A.L.I. Technologies, Inc." => match (g0, g1, e0, e1) {
      (0x37, 0x11, _, 0x01) => Ok(Item {
        tag,
        name: "Filename",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x37, 0x11, _, 0x02) => Ok(Item {
        tag,
        name: "Data Blob of a Visit",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x37, 0x11, _, 0x03) => Ok(Item {
        tag,
        name: "Revision Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x37, 0x11, _, 0x04) => Ok(Item {
        tag,
        name: "Unix Timestamp",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x37, 0x11, _, 0x05) => Ok(Item {
        tag,
        name: "Bag ID",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x37, 0x11, _, 0x0c) => Ok(Item {
        tag,
        name: "Original Study UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x37, 0x11, _, 0x0d) => Ok(Item {
        tag,
        name: "Overlay Grayscale Value",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x37, 0x11, _, 0x0e) => Ok(Item {
        tag,
        name: "Anonymization Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "TOSHIBA_MEC_OT3" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "HIS/RIS Study ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "Indicator of creator",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "ID of quality assurance reviewer",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x73) => Ok(Item {
        tag,
        name: "Name of quality assurance reviewer",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x74) => Ok(Item {
        tag,
        name: "Date of completion of quality assurance",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x75) => Ok(Item {
        tag,
        name: "Time of completion of quality assurance",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x76) => Ok(Item {
        tag,
        name: "Host name of quality assurance station",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x77) => Ok(Item {
        tag,
        name: "Station name and version of quality assurance station",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x78) => Ok(Item {
        tag,
        name: "Flag of completion of quality assurance",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x79) => Ok(Item {
        tag,
        name: "Status of quality assurance review",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x7a) => Ok(Item {
        tag,
        name: "Original SOP Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x7b) => Ok(Item {
        tag,
        name: "Original Series Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x7c) => Ok(Item {
        tag,
        name: "Original Study Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x7d) => Ok(Item {
        tag,
        name: "Rotation information for image display from original image",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x7e) => Ok(Item {
        tag,
        name: "Sequence of LR mark",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x7f) => Ok(Item {
        tag,
        name: "Rotation status at creation of LR mark",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Original image data on area of original LR mark",
        vrs: &[
          ValueRepresentation::OtherByteString,
          ValueRepresentation::OtherWordString,
        ],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "X start position of LR mark",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Y start position of LR mark",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x83) => Ok(Item {
        tag,
        name: "Size of LR mark in X direction",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x84) => Ok(Item {
        tag,
        name: "Size of LR mark in Y direction",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x85) => Ok(Item {
        tag,
        name: "Previous Patient ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x70, 0x19, _, 0x86) => Ok(Item {
        tag,
        name: "Previous modality",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MR VA0  RAW" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "Sequence Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Vector Size original",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "Vector Size extended",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x03) => Ok(Item {
        tag,
        name: "Acquired Spectral Range",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x04) => Ok(Item {
        tag,
        name: "VOI Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x05) => Ok(Item {
        tag,
        name: "VOI Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x06) => Ok(Item {
        tag,
        name: "CSI Matrix Size original",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x07) => Ok(Item {
        tag,
        name: "CSI Matrix Size extended",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x08) => Ok(Item {
        tag,
        name: "Spatial Grid Shift",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x09) => Ok(Item {
        tag,
        name: "Signal Limits Minimum",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Signal Limits Maximum",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "Spec Info Mask",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "EPI Time Rate of Change of Magnitude",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x13) => Ok(Item {
        tag,
        name: "EPI Time Rate of Change of X Component",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x14) => Ok(Item {
        tag,
        name: "EPI Time Rate of Change of Y Component",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x15) => Ok(Item {
        tag,
        name: "EPI Time Rate of Change of Z Component",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x16) => Ok(Item {
        tag,
        name: "EPI Time Rate of Change Legal Limit 1",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x17) => Ok(Item {
        tag,
        name: "EPI Operation Mode Flag",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x18) => Ok(Item {
        tag,
        name: "EPI Field Calculation Safety Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x19) => Ok(Item {
        tag,
        name: "EPI Legal Limit 1 of Change Value",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "EPI Legal Limit 2 of Change Value",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x21) => Ok(Item {
        tag,
        name: "EPI Rise Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "AC ADC Offset",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x31) => Ok(Item {
        tag,
        name: "AC Preamplifier Gain",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Saturation Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x51) => Ok(Item {
        tag,
        name: "Saturation Normal Vector",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x52) => Ok(Item {
        tag,
        name: "Saturation Position Vector",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x53) => Ok(Item {
        tag,
        name: "Saturation Thickness",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x54) => Ok(Item {
        tag,
        name: "Saturation Width",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x55) => Ok(Item {
        tag,
        name: "Saturation Distance",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "SIEMENS DLR.01" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "Cassette Submatrix",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Reader Header",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x66) => Ok(Item {
        tag,
        name: "RT Frequency Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Orientation",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "Rotation on DRC",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x20) => Ok(Item {
        tag,
        name: "Film Format",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "GC Rotation Center",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "Subregion",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x51) => Ok(Item {
        tag,
        name: "Cassette Matrix",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x65) => Ok(Item {
        tag,
        name: "RE Frequency Enhancement",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Reader Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x76) => Ok(Item {
        tag,
        name: "Filterset",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x64) => Ok(Item {
        tag,
        name: "RN Frequency Rank",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "EDR",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Measurement Mode",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Preset Mode",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x31) => Ok(Item {
        tag,
        name: "Full Film Format",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "l fix",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Image Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x75) => Ok(Item {
        tag,
        name: "UID Original Image",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "PLA of Secondary Destination",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "Software Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "Region",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Cassette Scale",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "Mark on Film",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "Sub Modality",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "PLA Destination",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "GA Rotation Amount",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x69) => Ok(Item {
        tag,
        name: "Convulsion Mode",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "PLA Source",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "Sensitivity",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x68) => Ok(Item {
        tag,
        name: "Kernel Mode",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "MPM Code",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "s fix",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "Reader Serial Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x53) => Ok(Item {
        tag,
        name: "Barcode",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x30) => Ok(Item {
        tag,
        name: "Film Size",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x10) => Ok(Item {
        tag,
        name: "Number of Hardcopies",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "GT Contrast Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "Latitude",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x63) => Ok(Item {
        tag,
        name: "GS Density Shift",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x67) => Ok(Item {
        tag,
        name: "Kernel Length",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CSA REPORT" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "syngo Report Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "syngo Report",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x15) => Ok(Item {
        tag,
        name: "SR Variant",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x17) => Ok(Item {
        tag,
        name: "SC SOP Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS ACKNOWLEDGE FLAG" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x81) => Ok(Item {
        tag,
        name: "Acknowledge Flag",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS SC IMG PIX SPC" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x87) => Ok(Item {
        tag,
        name: "Non-RT Image Pixel Spacing",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      _ => Err(()),
    },
    "GEMS_IMPS_01" => match (g0, g1, e0, e1) {
      (0x00, 0x29, 0x10, _) => Ok(Item {
        tag,
        name: "Private Element Creator",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Lower range of Pixels1",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x05) => Ok(Item {
        tag,
        name: "Lower range of Pixels1",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x06) => Ok(Item {
        tag,
        name: "Lower range of Pixels1",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x07) => Ok(Item {
        tag,
        name: "Lower range of Pixels1",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "Lower range of Pixels1",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "Lower range of Pixels1",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0a) => Ok(Item {
        tag,
        name: "Lower range of Pixels1",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x15) => Ok(Item {
        tag,
        name: "Lower range of Pixels1",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x16) => Ok(Item {
        tag,
        name: "Upper range of Pixels1",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x17) => Ok(Item {
        tag,
        name: "Lower range of Pixels2",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x18) => Ok(Item {
        tag,
        name: "Upper range of Pixels2",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1a) => Ok(Item {
        tag,
        name: "Len of tot hdr in bytes",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x26) => Ok(Item {
        tag,
        name: "Version of the hdr struct",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "Advantage comp. Overflow",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x35) => Ok(Item {
        tag,
        name: "Advantage comp. Underflow",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x13) => Ok(Item {
        tag,
        name: "Decon kernel parameters",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_5,
      }),
      _ => Err(()),
    },
    "INTELERAD MEDICAL SYSTEMS" => match (g0, g1, e0, e1) {
      (0x3f, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "Institution Code",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x3f, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "Routed Transfer AE",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x3f, 0x01, _, 0x03) => Ok(Item {
        tag,
        name: "Source AE",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x3f, 0x01, _, 0x04) => Ok(Item {
        tag,
        name: "Deferred Validation",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x3f, 0x01, _, 0x05) => Ok(Item {
        tag,
        name: "Series Owner",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_ACRQA_1.0 BLOCK1" => match (g0, g1, e0, e1) {
      (0x00, 0x23, _, 0x00) => Ok(Item {
        tag,
        name: "CR Exposure Menu Code",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x10) => Ok(Item {
        tag,
        name: "CR Exposure Menu String",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x20) => Ok(Item {
        tag,
        name: "CR EDR Mode",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x30) => Ok(Item {
        tag,
        name: "CR Latitude",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x40) => Ok(Item {
        tag,
        name: "CR Group Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x50) => Ok(Item {
        tag,
        name: "CR Image Serial Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x60) => Ok(Item {
        tag,
        name: "CR Bar Code Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x70) => Ok(Item {
        tag,
        name: "CR Film Output Exposure",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x80) => Ok(Item {
        tag,
        name: "CR Film Format",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x90) => Ok(Item {
        tag,
        name: "CR S-Shift String",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS SMS-AX  VIEW 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Review Mode",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Anatomical Background Percent",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Number of Phases",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Apply Anatomical Background",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Pixel Shift Array",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: ValueMultiplicity { min: 4, max: None },
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Brightness",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Contrast",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "Enabled",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Native Edge Enh. Percent Gain",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "Native Edge Enh. LUT Index",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0a) => Ok(Item {
        tag,
        name: "Native Edge Enh. Kernel Size",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0b) => Ok(Item {
        tag,
        name: "Subtr. Edge Enh. Percent Gain",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "Subtr. Edge Enh. LUT Index",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0d) => Ok(Item {
        tag,
        name: "Subtr. Edge Enh. Kernel Size",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0e) => Ok(Item {
        tag,
        name: "Fade Percent",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0f) => Ok(Item {
        tag,
        name: "Flipped Before Laterality Applied",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Apply Fade",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "RefImages Taken",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "Zoom",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "Pan X",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "Pan Y",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "Native Edge Enh. Adv Perc. Gain",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "Subtr. Edge Enh. Adv Perc. Gain",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x17) => Ok(Item {
        tag,
        name: "Invert Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1a) => Ok(Item {
        tag,
        name: "Quant 1K Overlay",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1b) => Ok(Item {
        tag,
        name: "Original Resolution",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1c) => Ok(Item {
        tag,
        name: "Auto Window Center",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1d) => Ok(Item {
        tag,
        name: "Auto Window Width",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "INTEGRIS 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x08) => Ok(Item {
        tag,
        name: "Exposure Channel",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x32) => Ok(Item {
        tag,
        name: "Exposure Start Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "APR Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Frame Rate",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "Exposure Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Edge Enhancement Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Convolution Kernel Size",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Convolution Kernel Coefficients",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "Edge Enhancement Gain",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "Number of Exposure Results",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x20) => Ok(Item {
        tag,
        name: "Accumulated Fluoroscopy Dose",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x30) => Ok(Item {
        tag,
        name: "Accumulated Exposure Dose",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x40) => Ok(Item {
        tag,
        name: "Total Dose",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x41) => Ok(Item {
        tag,
        name: "Total Number of Frames",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x50) => Ok(Item {
        tag,
        name: "Exposure Information Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PHILIPS UNKNOWN" => match (g0, g1, e0, e1) {
      (0x20, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "MRSeriesNrOfEchoes",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "MRSeriesScanningTechniqueDescription",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x05) => Ok(Item {
        tag,
        name: "StackSequence",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x06) => Ok(Item {
        tag,
        name: "Examination Source",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x07) => Ok(Item {
        tag,
        name: "MRSeriesAcquisitionNumber",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x08) => Ok(Item {
        tag,
        name: "MRSeriesNrOfDynamicScans",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x02) => Ok(Item {
        tag,
        name: "MRSeriesNrOfChemicalShifts",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x03) => Ok(Item {
        tag,
        name: "MRSeriesRepetitionTime",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x36) => Ok(Item {
        tag,
        name: "MRVolumeSelection",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PMOD_GENPET" => match (g0, g1, e0, e1) {
      (0x7f, 0xe1, _, 0x01) => Ok(Item {
        tag,
        name: "Slices Names",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x02) => Ok(Item {
        tag,
        name: "Gene Codes",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x03) => Ok(Item {
        tag,
        name: "Gene Labels",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MITRA OBJECT UTF8 ATTRIBUTES 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x33, _, 0x02) => Ok(Item {
        tag,
        name: "Patient's Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x04) => Ok(Item {
        tag,
        name: "Study Description",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x06) => Ok(Item {
        tag,
        name: "Referring Physician's Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x08) => Ok(Item {
        tag,
        name: "Requesting Physician's Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x0a) => Ok(Item {
        tag,
        name: "Performing Physician's Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x0c) => Ok(Item {
        tag,
        name: "Reason for Study",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x0e) => Ok(Item {
        tag,
        name: "Study Comments",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x13) => Ok(Item {
        tag,
        name: "Patient's Name Single Byte",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x14) => Ok(Item {
        tag,
        name: "Patient's Name Ideographic",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x15) => Ok(Item {
        tag,
        name: "Patient's Name Phonetic",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x16) => Ok(Item {
        tag,
        name: "Referring Physician's Name Single Byte",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x17) => Ok(Item {
        tag,
        name: "Referring Physician's Name Ideographic",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x18) => Ok(Item {
        tag,
        name: "Referring Physician's Name Phonetic",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x19) => Ok(Item {
        tag,
        name: "Requesting Physician's Name Single Byte",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1a) => Ok(Item {
        tag,
        name: "Requesting Physician's Name Ideographic",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1b) => Ok(Item {
        tag,
        name: "Requesting Physician's Name Phonetic",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1c) => Ok(Item {
        tag,
        name: "Performing Physician's Name Single Byte",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1d) => Ok(Item {
        tag,
        name: "Performing Physician's Name Ideographic",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1e) => Ok(Item {
        tag,
        name: "Performing Physician's Name Phonetic",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MR VA0  COAD" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "Receiver Preamplifier Gain",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Gradient Delay Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xd6) => Ok(Item {
        tag,
        name: "3D Phase Oversampling Part",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd9) => Ok(Item {
        tag,
        name: "Lines per Segment",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "Magnetic Field Strength",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc1) => Ok(Item {
        tag,
        name: "EPI Capacity",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x55) => Ok(Item {
        tag,
        name: "Receiver Reference Gain",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd4) => Ok(Item {
        tag,
        name: "Base Raw Matrix Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "Reference Scale Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd2) => Ok(Item {
        tag,
        name: "Calculation Submode",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x51) => Ok(Item {
        tag,
        name: "Receiver Amplifier Gain",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd7) => Ok(Item {
        tag,
        name: "Echo Line Position",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Total Gradient Delay Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "RF Watchdog Mask",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa6) => Ok(Item {
        tag,
        name: "Specific Energy Dose SED",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xd8) => Ok(Item {
        tag,
        name: "Echo Column Position",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc3) => Ok(Item {
        tag,
        name: "EPI Switch Configuration Code",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xd1) => Ok(Item {
        tag,
        name: "Flow Sensitivity",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd3) => Ok(Item {
        tag,
        name: "Field of View Ratio",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xda) => Ok(Item {
        tag,
        name: "Phase Coding Direction",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc5) => Ok(Item {
        tag,
        name: "EPI Switch Delay Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xc4) => Ok(Item {
        tag,
        name: "EPI Switch Hardware Code",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xb0) => Ok(Item {
        tag,
        name: "Adjustment Status Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Transmitter Reference",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "Transmitter Calibration",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc2) => Ok(Item {
        tag,
        name: "EPI Inductance",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Sensitivity Correction Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x56) => Ok(Item {
        tag,
        name: "Receiver Filter Frequency",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "Receiver Cable Attenuation",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd5) => Ok(Item {
        tag,
        name: "2D Phase Oversampling Lines",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Receiver Total Gain",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa5) => Ok(Item {
        tag,
        name: "Specific Absorption Rate SAR",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xa2) => Ok(Item {
        tag,
        name: "RF Power Error Indicator",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "ADC Offset",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "Readout Gradient Amplitude",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "Saturation Readout Vector Coronal Component",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(5),
        },
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Phase Gradient Amplitude",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "Transmitter Attenuator",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "EPI Reconstruction Slope",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Transmitter Amplitude",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Reconstruction Scale Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "ADC Voltage",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "Number of Transmitter Amplitudes",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "Selection Gradient Amplitude",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x91) => Ok(Item {
        tag,
        name: "Saturation Phase Encoding Vector Coronal Component",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(5),
        },
      }),
      _ => Err(()),
    },
    "SIEMENS MED MG" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "List of Group Numbers",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x15) => Ok(Item {
        tag,
        name: "List of Shadow Owner Codes",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "List of Element Numbers",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "List of Total Display Length",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x40) => Ok(Item {
        tag,
        name: "List of Display Prefix",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "List of Display Postfix",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "List of Text Position",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x70) => Ok(Item {
        tag,
        name: "List of Text Concatenation",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Voxar 2.16.124.113543.6003.1999.12.20.12.5.0" => match (g0, g1, e0, e1) {
      (0x11, 0x35, _, 0x00) => Ok(Item {
        tag,
        name: "Private Voxar Capture UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x01) => Ok(Item {
        tag,
        name: "Private Voxar Saved State",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x02) => Ok(Item {
        tag,
        name: "Private Voxar Icon Image Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x03) => Ok(Item {
        tag,
        name: "Private Voxar Top Right Display Demographics",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x04) => Ok(Item {
        tag,
        name: "Private Voxar Bottom Left Display Demographics",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x05) => Ok(Item {
        tag,
        name: "Private Voxar Span State Schema",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x06) => Ok(Item {
        tag,
        name: "Private Voxar Live Image Restored Size",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x07) => Ok(Item {
        tag,
        name: "Private Voxar CaptureType",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x08) => Ok(Item {
        tag,
        name: "Private Voxar Capture Source Series UID Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x09) => Ok(Item {
        tag,
        name: "Private Voxar Capture Source Series UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x10) => Ok(Item {
        tag,
        name: "Private Voxar Background Gray For Capture",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x11) => Ok(Item {
        tag,
        name: "Private Voxar Calcium Scoring Report Schema",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x12) => Ok(Item {
        tag,
        name: "Private Voxar Source Series Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x11, 0x35, _, 0x13) => Ok(Item {
        tag,
        name: "Private Voxar Bottom Left Display Demographics",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 042" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_3,
      }),
      (0x20, 0x0d, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x54) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x55) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x56) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x57) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x58) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x59) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x5a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x5b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x5c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x5d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x5e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x5f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x72) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x73) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x74) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x75) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x76) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x77) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEIIS" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "GE IIS Thumbnail Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Shift Count",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x12) => Ok(Item {
        tag,
        name: "Offset",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x14) => Ok(Item {
        tag,
        name: "Actual Frame Number",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x4b, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x4b, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x09, 0x05, _, 0x30) => Ok(Item {
        tag,
        name: "Assigning Authority For Patient ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x09, 0x07, _, 0x10) => Ok(Item {
        tag,
        name: "Original Study Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x09, 0x07, _, 0x20) => Ok(Item {
        tag,
        name: "Original Series Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x09, 0x07, _, 0x30) => Ok(Item {
        tag,
        name: "Original SOP Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x7f, 0xd1, _, 0x10) => Ok(Item {
        tag,
        name: "GE IIS Compression ID",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xd1, _, 0x20) => Ok(Item {
        tag,
        name: "GE IIS Multiframe Offsets",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xd1, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xd1, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xd1, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xd1, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "SIEMENS DFR.01 ORIGINAL" => match (g0, g1, e0, e1) {
      (0x00, 0x17, _, 0x51) => Ok(Item {
        tag,
        name: "Image Intensifier Zoom",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x52) => Ok(Item {
        tag,
        name: "ROSA Receiver ErrCount",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x2a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x37) => Ok(Item {
        tag,
        name: "Rectangle Shutter Horizontal Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x72) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xb2) => Ok(Item {
        tag,
        name: "L2 Acquisition Monitor",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x71) => Ok(Item {
        tag,
        name: "Landmark Original",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x7b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x32) => Ok(Item {
        tag,
        name: "Number of Maske Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xb1) => Ok(Item {
        tag,
        name: "L2 Image",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x45) => Ok(Item {
        tag,
        name: "Image Intensifer Format",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x79) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x41) => Ok(Item {
        tag,
        name: "Dose",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x62) => Ok(Item {
        tag,
        name: "Series Numbers of Petri",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x17, _, 0x11) => Ok(Item {
        tag,
        name: "Window Width Native Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x44) => Ok(Item {
        tag,
        name: "SDM",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x25) => Ok(Item {
        tag,
        name: "Edge Enhancement Native Original",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x42) => Ok(Item {
        tag,
        name: "Dose Area Product",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x16) => Ok(Item {
        tag,
        name: "LUT Number for Autowindow",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x74) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x43) => Ok(Item {
        tag,
        name: "Focus",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x34) => Ok(Item {
        tag,
        name: "Slice Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xc2) => Ok(Item {
        tag,
        name: "Series UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x31) => Ok(Item {
        tag,
        name: "DSA Representation Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x24) => Ok(Item {
        tag,
        name: "Filter Type Native Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x23) => Ok(Item {
        tag,
        name: "Edge Enhancement LUTs Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x17, _, 0x21) => Ok(Item {
        tag,
        name: "Edge Enhancement Kernelsize Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xc3) => Ok(Item {
        tag,
        name: "Subseries UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x10) => Ok(Item {
        tag,
        name: "Image Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x22) => Ok(Item {
        tag,
        name: "Edge Enhancement Mode Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x46) => Ok(Item {
        tag,
        name: "Density Correction",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x47) => Ok(Item {
        tag,
        name: "Exposure Curves",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x38) => Ok(Item {
        tag,
        name: "Rectangle Vertical Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x61) => Ok(Item {
        tag,
        name: "Table Position Peri",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x33) => Ok(Item {
        tag,
        name: "RightLeft Mark Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x12) => Ok(Item {
        tag,
        name: "Window Center Native",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xc1) => Ok(Item {
        tag,
        name: "Folder UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x27) => Ok(Item {
        tag,
        name: "Edge Enhancement Subtraction Original",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x49) => Ok(Item {
        tag,
        name: "Organ Program Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x73) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x26) => Ok(Item {
        tag,
        name: "Filter Type Subtraction Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x14) => Ok(Item {
        tag,
        name: "Window Width Subtraction Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x4a) => Ok(Item {
        tag,
        name: "Count of Images in Series",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x7a) => Ok(Item {
        tag,
        name: "Invers Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x15) => Ok(Item {
        tag,
        name: "Window Center Subtraction Original",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "BrainLAB_Conversion" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Export Platform Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "Export Platform Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "VEPRO VIF 3.0 DATA" => match (g0, g1, e0, e1) {
      (0x00, 0x55, _, 0x30) => Ok(Item {
        tag,
        name: "Icon data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x65) => Ok(Item {
        tag,
        name: "Image hash value",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "BrainLAB_PatientSetup" => match (g0, g1, e0, e1) {
      (0x32, 0x73, _, 0x00) => Ok(Item {
        tag,
        name: "Isocenter Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x32, 0x73, _, 0x01) => Ok(Item {
        tag,
        name: "Patient Position",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Silhouette Sequence Ids V1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging 60" => match (g0, g1, e0, e1) {
      (0x00, 0x31, _, 0x30) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x31) => Ok(Item {
        tag,
        name: "Private data",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AMI Sequence AnnotElements_01" => match (g0, g1, e0, e1) {
      (0x31, 0x05, _, 0x10) => Ok(Item {
        tag,
        name: "AMI Annotation Element Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x31, 0x05, _, 0x20) => Ok(Item {
        tag,
        name: "AMI Annotation Element Text",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CBT TOTAL_MU" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x96) => Ok(Item {
        tag,
        name: "Total MU delivered during Cone Beam",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips X-ray Imaging DD 001" => match (g0, g1, e0, e1) {
      (0x20, 0x03, _, 0x2b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_4,
      }),
      (0x20, 0x03, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x04) => Ok(Item {
        tag,
        name: "Private enhanced Table Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x2e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x2d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x03, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_3,
      }),
      (0x20, 0x03, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x2c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x2f) => Ok(Item {
        tag,
        name: "IsResolvePatientMixApplied",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x2a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x03, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SEGAMI MIML" => match (g0, g1, e0, e1) {
      (0x00, 0x31, _, 0x98) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED HG" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "List of Group Numbers",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x15) => Ok(Item {
        tag,
        name: "List of Shadow Owner Codes",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "List of Element Numbers",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "List of Total Display Length",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x40) => Ok(Item {
        tag,
        name: "List of Display Prefix",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "List of Display Postfix",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "List of Text Position",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x70) => Ok(Item {
        tag,
        name: "List of Text Concatenation",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ATL PRIVATE TAGS" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Loop Mode",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "Trigger mode",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "Number of Loops",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x33) => Ok(Item {
        tag,
        name: "Loop Indexes",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "Loop Heart Rates",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x35) => Ok(Item {
        tag,
        name: "Medications",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MAROTECH Inc." => match (g0, g1, e0, e1) {
      (0x00, 0x37, _, 0x01) => Ok(Item {
        tag,
        name: "Some kind of version number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x21) => Ok(Item {
        tag,
        name: "Icon Row",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x22) => Ok(Item {
        tag,
        name: "Icon Col",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x23) => Ok(Item {
        tag,
        name: "JPEG Compressed Icon",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_IDEN_01" => match (g0, g1, e0, e1) {
      (0x00, 0x09, 0x10, _) => Ok(Item {
        tag,
        name: "Private Element Creator",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Full fidelity",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "Suite id",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Product id",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x17) => Ok(Item {
        tag,
        name: "Series Description",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x27) => Ok(Item {
        tag,
        name: "Image actual date",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x30) => Ok(Item {
        tag,
        name: "Service id",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x31) => Ok(Item {
        tag,
        name: "Mobile location number",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe2) => Ok(Item {
        tag,
        name: "Image Type (ORIGINAL\\PROSPECTIVE ...)",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0xe3) => Ok(Item {
        tag,
        name: "Equipment UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe6) => Ok(Item {
        tag,
        name: "Genesis Version - now",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe7) => Ok(Item {
        tag,
        name: "Exam Record checksum",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe8) => Ok(Item {
        tag,
        name: "Series Suite Id",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xe9) => Ok(Item {
        tag,
        name: "Actual series data time stamp",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CSA HEADER" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "CSA Image Header Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "CSA Image Header Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "CSA Image Header Info",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x18) => Ok(Item {
        tag,
        name: "CSA Series Header Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x19) => Ok(Item {
        tag,
        name: "CSA Series Header Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "CSA Series Header Info",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Acuson X500" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "(a)View Name",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2a) => Ok(Item {
        tag,
        name: "View List",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "Siemens Medical",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x11) => Ok(Item {
        tag,
        name: "DIMAQ Software",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x20) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x21) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x10) => Ok(Item {
        tag,
        name: "Siemens Medical",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x11) => Ok(Item {
        tag,
        name: "DIMAQ Software",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x13, _, 0x20) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x10) => Ok(Item {
        tag,
        name: "Siemens Medical",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x11) => Ok(Item {
        tag,
        name: "DIMAQ Software",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x20) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x10) => Ok(Item {
        tag,
        name: "Siemens Medical",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x11) => Ok(Item {
        tag,
        name: "DIMAQ Software",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x20) => Ok(Item {
        tag,
        name: "Private Data",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Import Structured",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MMCPrivate" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x4e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x2c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips Imaging DD 065" => match (g0, g1, e0, e1) {
      (0x40, 0x07, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips NM Private Group" => match (g0, g1, e0, e1) {
      (0x70, 0x43, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "TOSHIBA MDW NON-IMAGE" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "Application Header Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "Application Header Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Application Header Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Application Header Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x10) => Ok(Item {
        tag,
        name: "Toshiba US Private Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_QVA_PHOTO_01" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x60) => Ok(Item {
        tag,
        name: "Dodge End Diastolic Volume ml",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x61) => Ok(Item {
        tag,
        name: "Dodge End Systolic Volume ml",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x62) => Ok(Item {
        tag,
        name: "Dodge Stroke Volume ml",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x63) => Ok(Item {
        tag,
        name: "Dodge Ejection Fraction",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x64) => Ok(Item {
        tag,
        name: "Simpson End Diastolic Volume ml",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x65) => Ok(Item {
        tag,
        name: "Simpson End Systolic Volume ml",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x66) => Ok(Item {
        tag,
        name: "Simpson Stroke Volume ml",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x67) => Ok(Item {
        tag,
        name: "Simpson Ejection Fraction",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x68) => Ok(Item {
        tag,
        name: "CFX Single Hypokinesia in Region",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x69) => Ok(Item {
        tag,
        name: "CFX Single Hyperkinesia in Opposite Region",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x6a) => Ok(Item {
        tag,
        name: "CFX Single Total LV contour Percent",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x6b) => Ok(Item {
        tag,
        name: "CFX Multiple Hypokinesia in Region",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x6c) => Ok(Item {
        tag,
        name: "CFX Multiple Hyperkinesia in Opposite Region",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x6d) => Ok(Item {
        tag,
        name: "CFX Multiple Total LV contour Percent",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x6e) => Ok(Item {
        tag,
        name: "RCA Single Hypokinesia in Region",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x6f) => Ok(Item {
        tag,
        name: "RCA Single Hyperkinesia in Opposite Region",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x70) => Ok(Item {
        tag,
        name: "RCA Single Total LV contour Percent",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x71) => Ok(Item {
        tag,
        name: "RCA Multiple Hypokinesia in Region",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x72) => Ok(Item {
        tag,
        name: "RCA Multiple Hyperkinesia in Opposite Region",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x73) => Ok(Item {
        tag,
        name: "RCA Multiple Total LV contour Percent",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x74) => Ok(Item {
        tag,
        name: "LAD Single Hypokinesia in Region",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x75) => Ok(Item {
        tag,
        name: "LAD Single Hyperkinesia in Opposite Region",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x76) => Ok(Item {
        tag,
        name: "LAD Single Total LV contour Percent",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x77) => Ok(Item {
        tag,
        name: "LAD Multiple Hypokinesia in Region",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x78) => Ok(Item {
        tag,
        name: "LAD Multiple Hyperkinesia in Opposite Region",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x79) => Ok(Item {
        tag,
        name: "LAD Multiple Total LV contour Percent",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x7a) => Ok(Item {
        tag,
        name: "Dodge End Diastolic Volume ml/m2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x7c) => Ok(Item {
        tag,
        name: "Dodge End Systolic Volume ml/m2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x7e) => Ok(Item {
        tag,
        name: "Dodge Stroke Volume ml/m2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x80) => Ok(Item {
        tag,
        name: "Simpson End Diastolic Volume ml/m2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x82) => Ok(Item {
        tag,
        name: "Simpson End Systolic Volume ml/m2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x84) => Ok(Item {
        tag,
        name: "Simpson Stroke Volume ml/m2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MITRA OBJECT DOCUMENT 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-Private_CDS Release 1" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "BRIT Systems, Inc." => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0xa1) => Ok(Item {
        tag,
        name: "Object Action",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "Original Study Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0d) => Ok(Item {
        tag,
        name: "Physician ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "QC Done Time",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x92) => Ok(Item {
        tag,
        name: "Software Version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x90) => Ok(Item {
        tag,
        name: "Original Sender AE Title",
        vrs: &[ValueRepresentation::ApplicationEntity],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x07) => Ok(Item {
        tag,
        name: "Person Pager Phone",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x16) => Ok(Item {
        tag,
        name: "Patient ICN",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x18) => Ok(Item {
        tag,
        name: "Patient Class",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "QC Deletion Requested",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa5) => Ok(Item {
        tag,
        name: "Local AE Title",
        vrs: &[ValueRepresentation::ApplicationEntity],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "Original Patient ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x34) => Ok(Item {
        tag,
        name: "QC Done Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x32) => Ok(Item {
        tag,
        name: "QC Image Accepted By",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x93) => Ok(Item {
        tag,
        name: "Serial Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x15) => Ok(Item {
        tag,
        name: "Order Category",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x33) => Ok(Item {
        tag,
        name: "QC Image Rejected By",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa7) => Ok(Item {
        tag,
        name: "Remote AE Title",
        vrs: &[ValueRepresentation::ApplicationEntity],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x13) => Ok(Item {
        tag,
        name: "Original Series Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x17) => Ok(Item {
        tag,
        name: "Patient DFS",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x31) => Ok(Item {
        tag,
        name: "QC Last Modification Time",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "QC Study Assigned By",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa8) => Ok(Item {
        tag,
        name: "Remote IP Address",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa3) => Ok(Item {
        tag,
        name: "Object Action Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x22) => Ok(Item {
        tag,
        name: "QC Study Moved By",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x19) => Ok(Item {
        tag,
        name: "Patient Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x05) => Ok(Item {
        tag,
        name: "Person Work Phone",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x91) => Ok(Item {
        tag,
        name: "Software Title",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa0) => Ok(Item {
        tag,
        name: "Object Action Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "Person Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x24) => Ok(Item {
        tag,
        name: "QC Series Split By",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0b) => Ok(Item {
        tag,
        name: "Person Password",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x06) => Ok(Item {
        tag,
        name: "Person Cell Phone",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x03) => Ok(Item {
        tag,
        name: "Person Role",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0a) => Ok(Item {
        tag,
        name: "Person Address",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x26) => Ok(Item {
        tag,
        name: "QC Series Edited By",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x04) => Ok(Item {
        tag,
        name: "Person Home Phone",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "Person Information Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa2) => Ok(Item {
        tag,
        name: "Object Action Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x27) => Ok(Item {
        tag,
        name: "QC Image Moved By",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x25) => Ok(Item {
        tag,
        name: "QC Series Moved By",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa6) => Ok(Item {
        tag,
        name: "Local IP Address",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x28) => Ok(Item {
        tag,
        name: "QC Image Edited By",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x14) => Ok(Item {
        tag,
        name: "Master Accession Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x08) => Ok(Item {
        tag,
        name: "Person Fax Phone",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x23) => Ok(Item {
        tag,
        name: "QC Study Edited By",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x1f) => Ok(Item {
        tag,
        name: "Generic String",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x21) => Ok(Item {
        tag,
        name: "QC Study Split By",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x09) => Ok(Item {
        tag,
        name: "Person EMail",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Person ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0c) => Ok(Item {
        tag,
        name: "Person Emergency Phone",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CBT MISSING PROJECTION FRAMES" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x91) => Ok(Item {
        tag,
        name: "Missing Projection Frames",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "Philips Imaging DD 002" => match (g0, g1, e0, e1) {
      (0x20, 0x01, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x33) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x3b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x2c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x1f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x36) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x2e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x2a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x2b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x37) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x2d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x3e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x1b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x35) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x2f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x3c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x3a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x3f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x39) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x3d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Mayo/IBM Archive Project" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x1b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x1f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x65) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS DFR.01 MANIPULATED" => match (g0, g1, e0, e1) {
      (0x00, 0x17, _, 0x35) => Ok(Item {
        tag,
        name: "Number of Series Representative",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa2) => Ok(Item {
        tag,
        name: "Image Name Extension 1",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x37) => Ok(Item {
        tag,
        name: "Rectangle Shutter Horizontal Current",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x72) => Ok(Item {
        tag,
        name: "Zoom Factor",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x71) => Ok(Item {
        tag,
        name: "Landmark Current",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x32) => Ok(Item {
        tag,
        name: "Number of Mask Current",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x78) => Ok(Item {
        tag,
        name: "Pixel Shift Vertical",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x79) => Ok(Item {
        tag,
        name: "Image Flip",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x92) => Ok(Item {
        tag,
        name: "Summation Count Mask",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x11) => Ok(Item {
        tag,
        name: "Window Width Native Current",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x25) => Ok(Item {
        tag,
        name: "Edge Enhancement Native Current",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x74) => Ok(Item {
        tag,
        name: "Roam Vertical",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x93) => Ok(Item {
        tag,
        name: "PeakOp Start",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x29) => Ok(Item {
        tag,
        name: "Edge Enhancement %",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa3) => Ok(Item {
        tag,
        name: "Image Name Extension 2",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x31) => Ok(Item {
        tag,
        name: "DSA Representation Current",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa1) => Ok(Item {
        tag,
        name: "Image Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0xa0) => Ok(Item {
        tag,
        name: "Cine Rate",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x91) => Ok(Item {
        tag,
        name: "Summation Count Filling",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x77) => Ok(Item {
        tag,
        name: "Pixel Shift Horizontal",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x84) => Ok(Item {
        tag,
        name: "Right Marker",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x94) => Ok(Item {
        tag,
        name: "PeakOp End",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x83) => Ok(Item {
        tag,
        name: "Documentation Flag",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x38) => Ok(Item {
        tag,
        name: "Rectangle Shutter Vertical Aktuell",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x33) => Ok(Item {
        tag,
        name: "RightLeft Mark Current",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x12) => Ok(Item {
        tag,
        name: "Window Center Native",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x30) => Ok(Item {
        tag,
        name: "Harmonization %",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x27) => Ok(Item {
        tag,
        name: "Edge Enhancement Subtraction Current",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x73) => Ok(Item {
        tag,
        name: "Roam Horizontal",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x14) => Ok(Item {
        tag,
        name: "Window Width Subtraction Current",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x7a) => Ok(Item {
        tag,
        name: "Invers Current",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x15) => Ok(Item {
        tag,
        name: "Window Center Subtraction Current",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ELGEMS_XPERT" => match (g0, g1, e0, e1) {
      (0x7f, 0xa1, _, 0x00) => Ok(Item {
        tag,
        name: "XPert Composite Report Item buffer",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xa1, _, 0x10) => Ok(Item {
        tag,
        name: "Xpert Composite Report Item Identificator",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_MR_RAW_01" => match (g0, g1, e0, e1) {
      (0x70, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "rdb_hdr_rec",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "rdb_hdr_per_pass_tab",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x03) => Ok(Item {
        tag,
        name: "rdb_hdr_unlock_raw",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x04) => Ok(Item {
        tag,
        name: "rdb_hdr_data_acq_tab",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x05) => Ok(Item {
        tag,
        name: "rdb_hdr_nex_tab",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x06) => Ok(Item {
        tag,
        name: "rdb_hdr_nex_abort_tab",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x07) => Ok(Item {
        tag,
        name: "rdb_hdr_tool",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x08) => Ok(Item {
        tag,
        name: "rdb_raw_data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x09) => Ok(Item {
        tag,
        name: "SSP save",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x0a) => Ok(Item {
        tag,
        name: "UDA save",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x0b) => Ok(Item {
        tag,
        name: "rdb_chemsat_data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "CAMTRONICS IP" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-Private_ICS Release 1;5" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x55) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "IMPAC" => match (g0, g1, e0, e1) {
      (0x30, 0x0b, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x30, 0x0b, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x30, 0x0b, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Mitra Markup 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Markup1",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Markup2",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Markup3",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "Markup4",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Markup5",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x05) => Ok(Item {
        tag,
        name: "Markup6",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x06) => Ok(Item {
        tag,
        name: "Markup7",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x07) => Ok(Item {
        tag,
        name: "Markup8",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "Markup9",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "Markup10",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Markup11",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "Markup12",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x12) => Ok(Item {
        tag,
        name: "Markup13",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x13) => Ok(Item {
        tag,
        name: "Markup14",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x14) => Ok(Item {
        tag,
        name: "Markup15",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x25, _, 0x00) => Ok(Item {
        tag,
        name: "View Native",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x01) => Ok(Item {
        tag,
        name: "Original Series Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x02) => Ok(Item {
        tag,
        name: "Original Image Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x03) => Ok(Item {
        tag,
        name: "Win Center",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x04) => Ok(Item {
        tag,
        name: "Win Width",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x05) => Ok(Item {
        tag,
        name: "Win Brightness",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x06) => Ok(Item {
        tag,
        name: "Win Contrast",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x07) => Ok(Item {
        tag,
        name: "Original Frame Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x08) => Ok(Item {
        tag,
        name: "Original Mask Frame Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x09) => Ok(Item {
        tag,
        name: "Opac",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0a) => Ok(Item {
        tag,
        name: "Original Number of Frames",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0b) => Ok(Item {
        tag,
        name: "Original Scene Duration",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0c) => Ok(Item {
        tag,
        name: "Identifier LOID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0d) => Ok(Item {
        tag,
        name: "Original Scene VFR Info",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x25, _, 0x0e) => Ok(Item {
        tag,
        name: "Original Frame ECG Position",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x0f) => Ok(Item {
        tag,
        name: "Original ECG 1st Frame Offset (retired)",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x10) => Ok(Item {
        tag,
        name: "Zoom Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x11) => Ok(Item {
        tag,
        name: "Flex",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x12) => Ok(Item {
        tag,
        name: "Number of Mask Frames",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x13) => Ok(Item {
        tag,
        name: "Number of Fill Frames",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x14) => Ok(Item {
        tag,
        name: "Series Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x15) => Ok(Item {
        tag,
        name: "Image Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_DRS_1" => match (g0, g1, e0, e1) {
      (0x00, 0x37, _, 0x10) => Ok(Item {
        tag,
        name: "Referring Department",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x20) => Ok(Item {
        tag,
        name: "Screen Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x40) => Ok(Item {
        tag,
        name: "Left Orientation",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x42) => Ok(Item {
        tag,
        name: "Right Orientation",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x50) => Ok(Item {
        tag,
        name: "Inversion",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x60) => Ok(Item {
        tag,
        name: "DSA",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_XELPRV_01" => match (g0, g1, e0, e1) {
      (0x00, 0x57, _, 0x5e) => Ok(Item {
        tag,
        name: "FrameNumber",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x59) => Ok(Item {
        tag,
        name: "ShapePtsSpace",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x33, _, 0x18) => Ok(Item {
        tag,
        name: "Time",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x51) => Ok(Item {
        tag,
        name: "PDOSOPClassUID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x08) => Ok(Item {
        tag,
        name: "Object Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x20) => Ok(Item {
        tag,
        name: "BulkDataFormat",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x60) => Ok(Item {
        tag,
        name: "DatasetROIMapping",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x57, _, 0x5b) => Ok(Item {
        tag,
        name: "Shap CtrlPts",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x33, _, 0x29) => Ok(Item {
        tag,
        name: "RTSpecification",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x56) => Ok(Item {
        tag,
        name: "ShapeTilt",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x33, _, 0x60) => Ok(Item {
        tag,
        name: "ReviewtemplateSQ",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x13) => Ok(Item {
        tag,
        name: "Type",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x2b) => Ok(Item {
        tag,
        name: "DataValidationSpec",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x42) => Ok(Item {
        tag,
        name: "Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x73) => Ok(Item {
        tag,
        name: "SDODoubleDataSQ",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x4c) => Ok(Item {
        tag,
        name: "LineThickness",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x12) => Ok(Item {
        tag,
        name: "Points",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x14) => Ok(Item {
        tag,
        name: "StudyId",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1a) => Ok(Item {
        tag,
        name: "ProtocolName",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x72) => Ok(Item {
        tag,
        name: "SDOSOPInstanceUID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x5c) => Ok(Item {
        tag,
        name: "ShapeCPSpace",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1b) => Ok(Item {
        tag,
        name: "StudyId",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x61) => Ok(Item {
        tag,
        name: "RTOSOPClassUID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x22) => Ok(Item {
        tag,
        name: "DoubleDataFormat",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x4a) => Ok(Item {
        tag,
        name: "LineStyle",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x03) => Ok(Item {
        tag,
        name: "SOPInstanceUID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x54) => Ok(Item {
        tag,
        name: "Seeds",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x33, _, 0x28) => Ok(Item {
        tag,
        name: "RTName",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x24) => Ok(Item {
        tag,
        name: "Description",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x47) => Ok(Item {
        tag,
        name: "Normal Colour",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x02) => Ok(Item {
        tag,
        name: "SOPClassUID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x10) => Ok(Item {
        tag,
        name: "ROINumber",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x2d) => Ok(Item {
        tag,
        name: "IconDescription",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x45) => Ok(Item {
        tag,
        name: "SOPClassUID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1e) => Ok(Item {
        tag,
        name: "DoubleData",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x57, _, 0x5d) => Ok(Item {
        tag,
        name: "ROIFlags",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x33, _, 0x1d) => Ok(Item {
        tag,
        name: "IntData",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x33, _, 0x70) => Ok(Item {
        tag,
        name: "SeriesdataSQ",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x71) => Ok(Item {
        tag,
        name: "SDOSOPClassUID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x43) => Ok(Item {
        tag,
        name: "Rid",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x15) => Ok(Item {
        tag,
        name: "Data value Representation",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x14) => Ok(Item {
        tag,
        name: "Description",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x17) => Ok(Item {
        tag,
        name: "Date",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x23) => Ok(Item {
        tag,
        name: "StringDataFormat",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x50) => Ok(Item {
        tag,
        name: "ProtocoldataSQ",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x5a) => Ok(Item {
        tag,
        name: "ShapeCtrlPtsCount",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x33, _, 0x19) => Ok(Item {
        tag,
        name: "ProtocoldataFlags",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x1c) => Ok(Item {
        tag,
        name: "BulkData",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x52) => Ok(Item {
        tag,
        name: "PDOSOPInstanceUID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x4f) => Ok(Item {
        tag,
        name: "NameDisplay",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x16) => Ok(Item {
        tag,
        name: "ProtocolDataUID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x2a) => Ok(Item {
        tag,
        name: "ReviewTemplatesFlags",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x21) => Ok(Item {
        tag,
        name: "IntDataFormat",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x51) => Ok(Item {
        tag,
        name: "BpSeg",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x57, _, 0x53) => Ok(Item {
        tag,
        name: "SeedSpace",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x55) => Ok(Item {
        tag,
        name: "Shape",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x33, _, 0x1f) => Ok(Item {
        tag,
        name: "StringData",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x11) => Ok(Item {
        tag,
        name: "Dimensions",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x50) => Ok(Item {
        tag,
        name: "Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x4e) => Ok(Item {
        tag,
        name: "NamePos",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x46) => Ok(Item {
        tag,
        name: "SOPInstanceUID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x16) => Ok(Item {
        tag,
        name: "Label",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x41) => Ok(Item {
        tag,
        name: "Modified",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x48) => Ok(Item {
        tag,
        name: "NameFont",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x4b) => Ok(Item {
        tag,
        name: "LineDashLength",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x01) => Ok(Item {
        tag,
        name: "ROISQ",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x52) => Ok(Item {
        tag,
        name: "BpSegpairs",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x57, _, 0x17) => Ok(Item {
        tag,
        name: "Data",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x10) => Ok(Item {
        tag,
        name: "Modified",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x4d) => Ok(Item {
        tag,
        name: "Interactivity",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x11) => Ok(Item {
        tag,
        name: "Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x49) => Ok(Item {
        tag,
        name: "FillPattern",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x2c) => Ok(Item {
        tag,
        name: "Description",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x62) => Ok(Item {
        tag,
        name: "RTOSOPInstanceUID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CT VA0  ORI" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "Original Data Set Owner",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x30) => Ok(Item {
        tag,
        name: "Original Modality",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS ISI" => match (g0, g1, e0, e1) {
      (0x01, 0x93, _, 0x02) => Ok(Item {
        tag,
        name: "RIS Key",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0xbc) => Ok(Item {
        tag,
        name: "Current Location Time",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x42) => Ok(Item {
        tag,
        name: "Contrast Allergy",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x40, 0x09, _, 0xe2) => Ok(Item {
        tag,
        name: "Report Transcriber",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x03, _, 0x08) => Ok(Item {
        tag,
        name: "ISI Command Field",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x23) => Ok(Item {
        tag,
        name: "Examination UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x33) => Ok(Item {
        tag,
        name: "Worklist Request End Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x12) => Ok(Item {
        tag,
        name: "Examination Reason",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x0a) => Ok(Item {
        tag,
        name: "Case ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0xa1) => Ok(Item {
        tag,
        name: "Patient Registration Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x14) => Ok(Item {
        tag,
        name: "RIS Patient Info IMGEF",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0xd0) => Ok(Item {
        tag,
        name: "Patient Billing Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x41) => Ok(Item {
        tag,
        name: "Medical Alerts",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x30) => Ok(Item {
        tag,
        name: "Requested Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x03, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "RIS Report IMGEF",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x4a) => Ok(Item {
        tag,
        name: "Requested Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x03, 0x07, _, 0x01) => Ok(Item {
        tag,
        name: "RIS Worklist IMGEF",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0xb0) => Ok(Item {
        tag,
        name: "Patient Last Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x03, _, 0x12) => Ok(Item {
        tag,
        name: "Attach ID Message Count",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0xd2) => Ok(Item {
        tag,
        name: "Patient Billing Address",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x22) => Ok(Item {
        tag,
        name: "Request ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x40, 0x09, _, 0xe1) => Ok(Item {
        tag,
        name: "Report Author",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x03, _, 0x11) => Ok(Item {
        tag,
        name: "Attach ID Application Code",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x04) => Ok(Item {
        tag,
        name: "Patient ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x03) => Ok(Item {
        tag,
        name: "Patient UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0xa2) => Ok(Item {
        tag,
        name: "Patient Registration Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x03, _, 0x30) => Ok(Item {
        tag,
        name: "Max Waiting Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x03, _, 0x31) => Ok(Item {
        tag,
        name: "Max Waiting Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "RIS Patient Info IMGEF",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x03, _, 0x14) => Ok(Item {
        tag,
        name: "Attach ID Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0xc0) => Ok(Item {
        tag,
        name: "Patient Insurance Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0xb2) => Ok(Item {
        tag,
        name: "Patient First Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x03, _, 0x13) => Ok(Item {
        tag,
        name: "Attach ID Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x40, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "Report Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x40, 0x09, _, 0xe3) => Ok(Item {
        tag,
        name: "Reporting Radiologist",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x40, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Report ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x32) => Ok(Item {
        tag,
        name: "Worklist Request Start Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x40, 0x09, _, 0x30) => Ok(Item {
        tag,
        name: "Report Creation Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x40, 0x09, _, 0x70) => Ok(Item {
        tag,
        name: "Report Approving Physician",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x40, 0x09, _, 0xe0) => Ok(Item {
        tag,
        name: "Report Text",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x03, _, 0x20) => Ok(Item {
        tag,
        name: "Message Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x80) => Ok(Item {
        tag,
        name: "Requested Location",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x46) => Ok(Item {
        tag,
        name: "Current Ward",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0xb4) => Ok(Item {
        tag,
        name: "Patient Hospital Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "DLX_PATNT_01" => match (g0, g1, e0, e1) {
      (0x00, 0x11, _, 0x01) => Ok(Item {
        tag,
        name: "patient DOB",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_DL_STUDY_01" => match (g0, g1, e0, e1) {
      (0x00, 0x15, _, 0x80) => Ok(Item {
        tag,
        name: "Study Dose",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x81) => Ok(Item {
        tag,
        name: "Study Total Dap",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x82) => Ok(Item {
        tag,
        name: "Study Fluoro Dap",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x83) => Ok(Item {
        tag,
        name: "Study Fluoro Time",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x84) => Ok(Item {
        tag,
        name: "Study Record Dap",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x85) => Ok(Item {
        tag,
        name: "Study Record Time",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x86) => Ok(Item {
        tag,
        name: "Last Xa Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x88) => Ok(Item {
        tag,
        name: "Default Operator Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x89) => Ok(Item {
        tag,
        name: "Default Performing Physician Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x8a) => Ok(Item {
        tag,
        name: "Default Patient Orientation",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x8b) => Ok(Item {
        tag,
        name: "Last Sc Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x8e) => Ok(Item {
        tag,
        name: "Common Series Instance Uid",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x8f) => Ok(Item {
        tag,
        name: "Study Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x92) => Ok(Item {
        tag,
        name: "Study dose Frontal",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x93) => Ok(Item {
        tag,
        name: "Study total dap Frontal",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x94) => Ok(Item {
        tag,
        name: "Study fluoro dap frontal",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x95) => Ok(Item {
        tag,
        name: "Study fluoro time frontal",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x96) => Ok(Item {
        tag,
        name: "Study record dap frontal",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x97) => Ok(Item {
        tag,
        name: "Study record time frontal",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x98) => Ok(Item {
        tag,
        name: "Study dose lateral",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x99) => Ok(Item {
        tag,
        name: "Study total dap lateral",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x9a) => Ok(Item {
        tag,
        name: "Study fluoro dap lateral",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x9b) => Ok(Item {
        tag,
        name: "Study fluoro time lateral",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x9c) => Ok(Item {
        tag,
        name: "Study record dap leteral",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x9d) => Ok(Item {
        tag,
        name: "Study record time lateral",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-Private_ICS Release 1" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x4c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x4d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x4e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x4f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x66) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_4,
      }),
      (0x00, 0x29, _, 0x67) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x68) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x6a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x6b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x72) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x91) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x93) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x94) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "SCHICK TECHNOLOGIES - Viewset Item Creator ID" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Image Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x03) => Ok(Item {
        tag,
        name: "Order",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x05) => Ok(Item {
        tag,
        name: "Orientation",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x06) => Ok(Item {
        tag,
        name: "Rect (Left, Top, Width, Height)",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_4,
      }),
      (0x00, 0x09, _, 0x07) => Ok(Item {
        tag,
        name: "Caption Height",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x08) => Ok(Item {
        tag,
        name: "Source",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x09) => Ok(Item {
        tag,
        name: "Default Width",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0a) => Ok(Item {
        tag,
        name: "Default Height",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "http://www.gemedicalsystems.com/it_solutions/bamwallthickness/1.0" => {
      match (g0, g1, e0, e1) {
        (0x31, 0x19, _, 0x10) => Ok(Item {
          tag,
          name: "BAM WallThickness Session Date/Time",
          vrs: &[ValueRepresentation::DateTime],
          multiplicity: VM_1,
        }),
        (0x31, 0x19, _, 0x20) => Ok(Item {
          tag,
          name: "BAM WallThickness Session Creator",
          vrs: &[ValueRepresentation::PersonName],
          multiplicity: VM_1,
        }),
        (0x31, 0x19, _, 0x30) => Ok(Item {
          tag,
          name: "BAM WallThickness Session Completion Flag",
          vrs: &[ValueRepresentation::CodeString],
          multiplicity: VM_1,
        }),
        (0x31, 0x19, _, 0x40) => Ok(Item {
          tag,
          name: "BAM WallThickness File Sequence",
          vrs: &[ValueRepresentation::Sequence],
          multiplicity: VM_1,
        }),
        (0x31, 0x19, _, 0x50) => Ok(Item {
          tag,
          name: "BAM WallThickness File Name",
          vrs: &[ValueRepresentation::ShortText],
          multiplicity: VM_1,
        }),
        (0x31, 0x19, _, 0x60) => Ok(Item {
          tag,
          name: "BAM WallThickness File Content",
          vrs: &[ValueRepresentation::OtherByteString],
          multiplicity: VM_1,
        }),
        _ => Err(()),
      }
    }
    "GEMS_VXTLSTATE_001" => match (g0, g1, e0, e1) {
      (0x00, 0x57, _, 0x20) => Ok(Item {
        tag,
        name: "SegList_Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x56) => Ok(Item {
        tag,
        name: "Slider_Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x29) => Ok(Item {
        tag,
        name: "Wireframe",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x25) => Ok(Item {
        tag,
        name: "Count",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x13) => Ok(Item {
        tag,
        name: "SUV_HalfLife",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x34) => Ok(Item {
        tag,
        name: "Proto_Title",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x42) => Ok(Item {
        tag,
        name: "VT_Meas",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x12) => Ok(Item {
        tag,
        name: "SUV_PostInjectedActivity",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x27) => Ok(Item {
        tag,
        name: "View_Slot",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x35) => Ok(Item {
        tag,
        name: "Proto_FilmName",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x38) => Ok(Item {
        tag,
        name: "SegList_Slots",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x54) => Ok(Item {
        tag,
        name: "HTML_Page",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x18) => Ok(Item {
        tag,
        name: "SegList_Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x44) => Ok(Item {
        tag,
        name: "VT_Tree",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x40) => Ok(Item {
        tag,
        name: "VT_Points",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x47) => Ok(Item {
        tag,
        name: "VT_Preset",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x10) => Ok(Item {
        tag,
        name: "SUV_PostInjectedTime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x28) => Ok(Item {
        tag,
        name: "Wireframe_Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x43) => Ok(Item {
        tag,
        name: "VT_Tree_Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x08) => Ok(Item {
        tag,
        name: "SUV_AdministredTime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x19) => Ok(Item {
        tag,
        name: "Volume_Filename",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x15) => Ok(Item {
        tag,
        name: "SegList_Seq",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x14) => Ok(Item {
        tag,
        name: "SState_Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x07) => Ok(Item {
        tag,
        name: "SUV_ScanTime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x32) => Ok(Item {
        tag,
        name: "Slider_State",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x05) => Ok(Item {
        tag,
        name: "Volumes_info",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x58) => Ok(Item {
        tag,
        name: "SegList_Pretty_Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x21) => Ok(Item {
        tag,
        name: "Bookmark_Seq",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x06) => Ok(Item {
        tag,
        name: "Image_UIDs",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x24) => Ok(Item {
        tag,
        name: "Color_Value_Field",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_3_TO_N,
      }),
      (0x00, 0x57, _, 0x22) => Ok(Item {
        tag,
        name: "Bookmark",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x31) => Ok(Item {
        tag,
        name: "Annotation",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x39) => Ok(Item {
        tag,
        name: "VT_Points_Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x51) => Ok(Item {
        tag,
        name: "Preferences",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x53) => Ok(Item {
        tag,
        name: "HTML_Page_Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x55) => Ok(Item {
        tag,
        name: "Camera_Position",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_3,
      }),
      (0x00, 0x57, _, 0x26) => Ok(Item {
        tag,
        name: "Views_info",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x11) => Ok(Item {
        tag,
        name: "SUV_TracerActivity",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x36) => Ok(Item {
        tag,
        name: "Proto_Step",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x50) => Ok(Item {
        tag,
        name: "Preferences_Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x46) => Ok(Item {
        tag,
        name: "VT_Preset_Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x33) => Ok(Item {
        tag,
        name: "Proto_Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x57) => Ok(Item {
        tag,
        name: "Slider",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x16) => Ok(Item {
        tag,
        name: "SegList_Count",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x41) => Ok(Item {
        tag,
        name: "VT_Meas_Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x30) => Ok(Item {
        tag,
        name: "Annotation_Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x48) => Ok(Item {
        tag,
        name: "VT_State_Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x23) => Ok(Item {
        tag,
        name: "Cursor_position",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_3,
      }),
      (0x00, 0x57, _, 0x52) => Ok(Item {
        tag,
        name: "Volume_ZComb_Filter",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x17) => Ok(Item {
        tag,
        name: "SegList_List",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x09) => Ok(Item {
        tag,
        name: "SUV_MeasuredTime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x49) => Ok(Item {
        tag,
        name: "VT_State",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-Private_ICS Release 1;3" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb9) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xc0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xc1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xc2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xc3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xc4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xc5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS RA PLANE A" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "Side Offset",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x46) => Ok(Item {
        tag,
        name: "Peak Opacified",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Collimator Finger Turn Angle",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7a) => Ok(Item {
        tag,
        name: "Collimator Square Breadth",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x86) => Ok(Item {
        tag,
        name: "Collimator Diagphragm Position 1",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x66) => Ok(Item {
        tag,
        name: "Calibration Isocenter to Source Distance",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6a) => Ok(Item {
        tag,
        name: "Calibration II Zoom",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Native Filter Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "Subtracted Filter Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3c) => Ok(Item {
        tag,
        name: "Window Brightness Phase 1 Sub",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x78) => Ok(Item {
        tag,
        name: "Calibration Gantry Data Valid",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3a) => Ok(Item {
        tag,
        name: "Window Lower Limit Native",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5a) => Ok(Item {
        tag,
        name: "Mechanical Magnet Factor",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x94) => Ok(Item {
        tag,
        name: "XRay System",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "Calibration Table to Floor Distance",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x44) => Ok(Item {
        tag,
        name: "Filter Factor Subtraction",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3e) => Ok(Item {
        tag,
        name: "Window Brightness Phase 2 Sub",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "Acquired Display Mode",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Collimator Finger Position",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "Pulse Time",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa6) => Ok(Item {
        tag,
        name: "Pulses per Scene",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x34) => Ok(Item {
        tag,
        name: "Filter Factor Native",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8c) => Ok(Item {
        tag,
        name: "Collimator Beam Limit Breadth",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Window Contrast Phase 1 Sub",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x98) => Ok(Item {
        tag,
        name: "Exposure Control",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xac) => Ok(Item {
        tag,
        name: "Dose Rate",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x58) => Ok(Item {
        tag,
        name: "SourceImage Distance",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9a) => Ok(Item {
        tag,
        name: "XRay Voltage",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x48) => Ok(Item {
        tag,
        name: "Mask Frame",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaa) => Ok(Item {
        tag,
        name: "Dose",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x76) => Ok(Item {
        tag,
        name: "Calibration System II Formats",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x64) => Ok(Item {
        tag,
        name: "Calibration Isocenter to Floor Distance",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4c) => Ok(Item {
        tag,
        name: "Center Beam Angulation CaudCran",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "XRay System",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x38) => Ok(Item {
        tag,
        name: "Window Upper Limit Native",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2c) => Ok(Item {
        tag,
        name: "Acquisition Framerate",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9e) => Ok(Item {
        tag,
        name: "XRay Current Time Product",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Collimator Beam Limit Diameter",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x56) => Ok(Item {
        tag,
        name: "Image Twist",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7c) => Ok(Item {
        tag,
        name: "Collimator Square Height",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "Isocenter Height",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8a) => Ok(Item {
        tag,
        name: "Collimator Diaphragm Mode",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9c) => Ok(Item {
        tag,
        name: "XRay Current",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Longitudinal Position",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4e) => Ok(Item {
        tag,
        name: "Center Beam Angulation LR Anterior",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa2) => Ok(Item {
        tag,
        name: "Scene Time Fluoro Clock",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x36) => Ok(Item {
        tag,
        name: "Anatomic Blackground Factor",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2e) => Ok(Item {
        tag,
        name: "Maximum Frame Limit",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "XRay Control Mode",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5e) => Ok(Item {
        tag,
        name: "Calibration Angle CranCaud",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5c) => Ok(Item {
        tag,
        name: "Calibration Flag",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x74) => Ok(Item {
        tag,
        name: "Calibration System Correction",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xa4) => Ok(Item {
        tag,
        name: "Maximum PulseRate",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7e) => Ok(Item {
        tag,
        name: "Collimator Square Diameter",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Calibration Object to Image Distance",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa8) => Ok(Item {
        tag,
        name: "Dose Area Product of Scene",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "XRay Parameter Set Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6c) => Ok(Item {
        tag,
        name: "Calibration II Field",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x68) => Ok(Item {
        tag,
        name: "Calibration Source to II Distance",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "System Calibration Factor Plane A",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "Window Contrast Phase 2 Sub",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8e) => Ok(Item {
        tag,
        name: "Collimator Beam Limit Height",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x88) => Ok(Item {
        tag,
        name: "Collimator Diaphragm Position 2",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Calibration Angle RAOLAO",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6e) => Ok(Item {
        tag,
        name: "Calibration Factor",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x96) => Ok(Item {
        tag,
        name: "Focal Spot",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "Calibration System Factor",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x4a) => Ok(Item {
        tag,
        name: "BIH Frame",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x84) => Ok(Item {
        tag,
        name: "Collimator Diaphragm Turn Angle",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "VEPRO DICOM TRANSFER 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x59, _, 0x10) => Ok(Item {
        tag,
        name: "Dicom Transfer Info",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS RA PLANE B" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "Side Offset",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x46) => Ok(Item {
        tag,
        name: "Peak Opacified",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Collimator Finger Turn Angle",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7a) => Ok(Item {
        tag,
        name: "Collimator Square Breadth",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x86) => Ok(Item {
        tag,
        name: "Collimator Diagphragm Position 1",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x66) => Ok(Item {
        tag,
        name: "Calibration Isocenter to Source Distance",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6a) => Ok(Item {
        tag,
        name: "Calibration II Zoom",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Native Filter Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "Subtracted Filter Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3c) => Ok(Item {
        tag,
        name: "Window Brightness Phase 1 Sub",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x78) => Ok(Item {
        tag,
        name: "Calibration Gantry Data Valid",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3a) => Ok(Item {
        tag,
        name: "Window Lower Limit Native",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5a) => Ok(Item {
        tag,
        name: "Mechanical Magnet Factor",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x94) => Ok(Item {
        tag,
        name: "XRay System",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "Calibration Table to Floor Distance",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x44) => Ok(Item {
        tag,
        name: "Filter Factor Subtraction",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3e) => Ok(Item {
        tag,
        name: "Window Brightness Phase 2 Sub",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "Acquired Display Mode",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Collimator Finger Position",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "Pulse Time",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa6) => Ok(Item {
        tag,
        name: "Pulses per Scene",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x34) => Ok(Item {
        tag,
        name: "Filter Factor Native",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8c) => Ok(Item {
        tag,
        name: "Collimator Beam Limit Breadth",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Window Contrast Phase 1 Sub",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x98) => Ok(Item {
        tag,
        name: "Exposure Control",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xac) => Ok(Item {
        tag,
        name: "Dose Rate",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x58) => Ok(Item {
        tag,
        name: "SourceImage Distance",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9a) => Ok(Item {
        tag,
        name: "XRay Voltage",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x48) => Ok(Item {
        tag,
        name: "Mask Frame",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaa) => Ok(Item {
        tag,
        name: "Dose",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x76) => Ok(Item {
        tag,
        name: "Calibration System II Formats",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x64) => Ok(Item {
        tag,
        name: "Calibration Isocenter to Floor Distance",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4c) => Ok(Item {
        tag,
        name: "Center Beam Angulation CaudCran",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "XRay System",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x38) => Ok(Item {
        tag,
        name: "Window Upper Limit Native",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2c) => Ok(Item {
        tag,
        name: "Acquisition Framerate",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9e) => Ok(Item {
        tag,
        name: "XRay Current Time Product",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Collimator Beam Limit Diameter",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x56) => Ok(Item {
        tag,
        name: "Image Twist",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7c) => Ok(Item {
        tag,
        name: "Collimator Square Height",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "Isocenter Height",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8a) => Ok(Item {
        tag,
        name: "Collimator Diaphragm Mode",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9c) => Ok(Item {
        tag,
        name: "XRay Current",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Longitudinal Position",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4e) => Ok(Item {
        tag,
        name: "Center Beam Angulation LR Anterior",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa2) => Ok(Item {
        tag,
        name: "Scene Time Fluoro Clock",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x36) => Ok(Item {
        tag,
        name: "Anatomic Blackground Factor",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2e) => Ok(Item {
        tag,
        name: "Maximum Frame Limit",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "XRay Control Mode",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5e) => Ok(Item {
        tag,
        name: "Calibration Angle CranCaud",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5c) => Ok(Item {
        tag,
        name: "Calibration Flag",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x74) => Ok(Item {
        tag,
        name: "Calibration System Correction",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xa4) => Ok(Item {
        tag,
        name: "Maximum PulseRate",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7e) => Ok(Item {
        tag,
        name: "Collimator Square Diameter",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Calibration Object to Image Distance",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa8) => Ok(Item {
        tag,
        name: "Dose Area Product of Scene",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "XRay Parameter Set Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6c) => Ok(Item {
        tag,
        name: "Calibration II Field",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x68) => Ok(Item {
        tag,
        name: "Calibration Source to II Distance",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "System Calibration Factor Plane B",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "Window Contrast Phase 2 Sub",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8e) => Ok(Item {
        tag,
        name: "Collimator Beam Limit Height",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x88) => Ok(Item {
        tag,
        name: "Collimator Diaphragm Position 2",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Calibration Angle RAOLAO",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6e) => Ok(Item {
        tag,
        name: "Calibration Factor",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x96) => Ok(Item {
        tag,
        name: "Focal Spot",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "Calibration System Factor",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x4a) => Ok(Item {
        tag,
        name: "BIH Frame",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x84) => Ok(Item {
        tag,
        name: "Collimator Diaphragm Turn Angle",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 036" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x01) => Ok(Item {
        tag,
        name: "Cols/Rows/Frames",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_3,
      }),
      (0x20, 0x0d, _, 0x02) => Ok(Item {
        tag,
        name: "Cols/Rows/Frames",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_3,
      }),
      (0x20, 0x0d, _, 0x03) => Ok(Item {
        tag,
        name: "Voxel Spacing",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_3,
      }),
      (0x20, 0x0d, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_3,
      }),
      _ => Err(()),
    },
    "GEMS_FUNCTOOL_01" => match (g0, g1, e0, e1) {
      (0x00, 0x51, _, 0x01) => Ok(Item {
        tag,
        name: "Functional Proc Group Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x02) => Ok(Item {
        tag,
        name: "Functional Processing Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x03) => Ok(Item {
        tag,
        name: "Bias of Functional Image",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x04) => Ok(Item {
        tag,
        name: "Scale of Functional Image",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x05) => Ok(Item {
        tag,
        name: "Length of Parameters String",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x06) => Ok(Item {
        tag,
        name: "Store Parameters string, delimited by character ESC=0x1B (27)",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x07) => Ok(Item {
        tag,
        name: "Functional Image Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x08) => Ok(Item {
        tag,
        name: "Store Color Ramp",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x09) => Ok(Item {
        tag,
        name: "Store Width of Functional Image",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x0a) => Ok(Item {
        tag,
        name: "Store level of Functional Image",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x0b) => Ok(Item {
        tag,
        name: "Store B-Value with Functional Image",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x0c) => Ok(Item {
        tag,
        name: "Analysis Package",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ACUSON:1.2.840.113680.1.0:0921" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "View Name",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x2a) => Ok(Item {
        tag,
        name: "View List",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "IMS s.r.l. Mammography Private Code" => match (g0, g1, e0, e1) {
      (0x12, 0x71, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x38) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x39) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x45) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x46) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x47) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x49) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x12, 0x71, _, 0x54) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED SMS USG ANTARES 3D VOLUME" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x5a) => Ok(Item {
        tag,
        name: "BVrGrayMapIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x5d) => Ok(Item {
        tag,
        name: "BVrThresholdLow",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x8e) => Ok(Item {
        tag,
        name: "CFlowStateIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x88) => Ok(Item {
        tag,
        name: "ZoomLevelVolume",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x00) => Ok(Item {
        tag,
        name: "Release Version",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x84) => Ok(Item {
        tag,
        name: "VolumeArbMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x63) => Ok(Item {
        tag,
        name: "CVolumeRenderMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x79) => Ok(Item {
        tag,
        name: "ScreenMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x16) => Ok(Item {
        tag,
        name: "IsLeftRightFlippedEn",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x27) => Ok(Item {
        tag,
        name: "NumDisplaySamples",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xe8) => Ok(Item {
        tag,
        name: "DICOMAttrNameVoiPivotZ",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x56) => Ok(Item {
        tag,
        name: "BVrBrightness",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x26) => Ok(Item {
        tag,
        name: "BeamAxialMin",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x05) => Ok(Item {
        tag,
        name: "ScanType",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x52) => Ok(Item {
        tag,
        name: "BMprColorMapIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x83) => Ok(Item {
        tag,
        name: "ToolLoopMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x6c) => Ok(Item {
        tag,
        name: "VoiSizeRatioY",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x08) => Ok(Item {
        tag,
        name: "ZRadiusOfCurvature",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x61) => Ok(Item {
        tag,
        name: "CMprColorMapIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x28) => Ok(Item {
        tag,
        name: "DVolumeWidth",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x20) => Ok(Item {
        tag,
        name: "BByteMaskSize",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x35) => Ok(Item {
        tag,
        name: "DBeamAxialSpan",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x32) => Ok(Item {
        tag,
        name: "DVolumePosY",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x5c) => Ok(Item {
        tag,
        name: "BVrThresholdHigh",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x6b) => Ok(Item {
        tag,
        name: "VoiSizeRatioX",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x95) => Ok(Item {
        tag,
        name: "VolumeRateHz",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x5f) => Ok(Item {
        tag,
        name: "CCutPlaneEnable",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x86) => Ok(Item {
        tag,
        name: "IsVolumeZoomEn",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x75) => Ok(Item {
        tag,
        name: "QualityFactor",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x19) => Ok(Item {
        tag,
        name: "BByteMaskOffset",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x64) => Ok(Item {
        tag,
        name: "CVrColorMapIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x40) => Ok(Item {
        tag,
        name: "DByteMaskSize",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x17) => Ok(Item {
        tag,
        name: "IsUpDownFlippedEn",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xe2) => Ok(Item {
        tag,
        name: "DICOMAttrNameSliceLayout",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x78) => Ok(Item {
        tag,
        name: "ActiveQuad",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x18) => Ok(Item {
        tag,
        name: "IsVolumeGeomAccurate",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x04) => Ok(Item {
        tag,
        name: "VolumeRawDataType",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x51) => Ok(Item {
        tag,
        name: "BCutPlaneEnable",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x91) => Ok(Item {
        tag,
        name: "DICOMAttrNameCutPlane",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x34) => Ok(Item {
        tag,
        name: "DBeamAxialMin",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x29) => Ok(Item {
        tag,
        name: "DVolumeDepth",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x9d) => Ok(Item {
        tag,
        name: "VrToolIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x57) => Ok(Item {
        tag,
        name: "BVrContrast",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x5b) => Ok(Item {
        tag,
        name: "BVrOpacity",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x7e) => Ok(Item {
        tag,
        name: "VolumeDisplayType",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x13) => Ok(Item {
        tag,
        name: "BufferSize",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x12) => Ok(Item {
        tag,
        name: "ScaleAlongDepth",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x87) => Ok(Item {
        tag,
        name: "ZoomLevelMpr",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x14) => Ok(Item {
        tag,
        name: "AcquisitionRate",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x66) => Ok(Item {
        tag,
        name: "CVrOpacity",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x11) => Ok(Item {
        tag,
        name: "ScaleAlongHeight",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x92) => Ok(Item {
        tag,
        name: "BookmarkChunkId",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xe9) => Ok(Item {
        tag,
        name: "DICOMAttrNameCTopVoiQuad",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x54) => Ok(Item {
        tag,
        name: "BMprGrayMapIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x30) => Ok(Item {
        tag,
        name: "DVolumeHeight",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x09) => Ok(Item {
        tag,
        name: "WobbleCorrection",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x8a) => Ok(Item {
        tag,
        name: "AutoRotateAxis",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x81) => Ok(Item {
        tag,
        name: "MprToolIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x10) => Ok(Item {
        tag,
        name: "ScaleAlongWidth",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x59) => Ok(Item {
        tag,
        name: "BVrDynamicRangeDb",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x76) => Ok(Item {
        tag,
        name: "RendererType",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x6f) => Ok(Item {
        tag,
        name: "VoiViewMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x15) => Ok(Item {
        tag,
        name: "DepthMinCm",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x38) => Ok(Item {
        tag,
        name: "NumOfVolumesInSequence",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x7c) => Ok(Item {
        tag,
        name: "CrossmarkMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x7b) => Ok(Item {
        tag,
        name: "WireframeMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x55) => Ok(Item {
        tag,
        name: "BVolumeRenderMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x82) => Ok(Item {
        tag,
        name: "VoiToolIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x73) => Ok(Item {
        tag,
        name: "BlendingRatio",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x9f) => Ok(Item {
        tag,
        name: "VolumeType",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x80) => Ok(Item {
        tag,
        name: "LastNonFullScreenMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x7d) => Ok(Item {
        tag,
        name: "MprDisplayType",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x9a) => Ok(Item {
        tag,
        name: "VoiPositionOffsetX",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x8f) => Ok(Item {
        tag,
        name: "BSubmodeIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x93) => Ok(Item {
        tag,
        name: "SequenceMinChunkId",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x65) => Ok(Item {
        tag,
        name: "CVrColorFlowPriorityIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x6a) => Ok(Item {
        tag,
        name: "VoiRotationOffsetDeg",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x07) => Ok(Item {
        tag,
        name: "ZlateralSpan",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x89) => Ok(Item {
        tag,
        name: "IsAutoRotateEn",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x39) => Ok(Item {
        tag,
        name: "DByteMaskOffset",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x69) => Ok(Item {
        tag,
        name: "VoiMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x22) => Ok(Item {
        tag,
        name: "AcqPlaneRotationDeg",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x23) => Ok(Item {
        tag,
        name: "BeamAxialSpan",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x71) => Ok(Item {
        tag,
        name: "MprOrientationA",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x85) => Ok(Item {
        tag,
        name: "MprZoomEn",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x33) => Ok(Item {
        tag,
        name: "DVolumePosZ",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x9b) => Ok(Item {
        tag,
        name: "VoiPositionOffsetY",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x36) => Ok(Item {
        tag,
        name: "DBeamLateralMin",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xe5) => Ok(Item {
        tag,
        name: "DICOMAttrNameThinVrThickness",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x37) => Ok(Item {
        tag,
        name: "DBeamLateralSpan",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x90) => Ok(Item {
        tag,
        name: "CSubmodeIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x60) => Ok(Item {
        tag,
        name: "CFrontClipMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x58) => Ok(Item {
        tag,
        name: "BVrColorMapIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x9c) => Ok(Item {
        tag,
        name: "VoiPositionOffsetZ",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xe4) => Ok(Item {
        tag,
        name: "DICOMAttrNameThinVrMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xe7) => Ok(Item {
        tag,
        name: "DICOMAttrNameVoiPivotY",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x7a) => Ok(Item {
        tag,
        name: "CutPlaneSide",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x8c) => Ok(Item {
        tag,
        name: "AutoRotateSpeedIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x50) => Ok(Item {
        tag,
        name: "PrivateCreatorVersionOfBookmark",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x31) => Ok(Item {
        tag,
        name: "DVolumePosX",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x77) => Ok(Item {
        tag,
        name: "SliceMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x21) => Ok(Item {
        tag,
        name: "DepthMaxCm",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x8b) => Ok(Item {
        tag,
        name: "AutoRotateRangeIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x7f) => Ok(Item {
        tag,
        name: "LastReset",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x68) => Ok(Item {
        tag,
        name: "CVrThresholdLow",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x72) => Ok(Item {
        tag,
        name: "VrOffsetVector",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x25) => Ok(Item {
        tag,
        name: "BeamLateralSpan",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x70) => Ok(Item {
        tag,
        name: "VrOrientationA",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xe0) => Ok(Item {
        tag,
        name: "DICOMAttrNameSliceRangeType",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x03) => Ok(Item {
        tag,
        name: "VolumeAcquisitionDuration",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x6e) => Ok(Item {
        tag,
        name: "VoiSyncPlane",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x8d) => Ok(Item {
        tag,
        name: "CVrBrightness",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xa1) => Ok(Item {
        tag,
        name: "DICOMAttrNameMprCenterLocation",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x67) => Ok(Item {
        tag,
        name: "CVrThresholdHigh",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x94) => Ok(Item {
        tag,
        name: "SequenceMaxChunkId",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x62) => Ok(Item {
        tag,
        name: "CMprColorFlowPriorityIndex",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xe3) => Ok(Item {
        tag,
        name: "DICOMAttrNameSliceSpacing",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x53) => Ok(Item {
        tag,
        name: "BMprDynamicRangeDb",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xe6) => Ok(Item {
        tag,
        name: "DICOMAttrNameVoiPivotX",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x6d) => Ok(Item {
        tag,
        name: "VoiSizeRatioZ",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x24) => Ok(Item {
        tag,
        name: "BeamLateralMin",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x06) => Ok(Item {
        tag,
        name: "ZlateralMin",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xe1) => Ok(Item {
        tag,
        name: "DICOMAttrNameSliceMPRPlane",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x74) => Ok(Item {
        tag,
        name: "FusionBlendMode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x5e) => Ok(Item {
        tag,
        name: "BPreProcessFilterMix",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x9e) => Ok(Item {
        tag,
        name: "ShadingPercent",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xa0) => Ok(Item {
        tag,
        name: "DICOMAttrNameVrQuadDisplayType",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PHILIPS MR R5.6/PART" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Field of View",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS WH SR 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x71, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x71, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CBT ENDING GANTRY ANGLE" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x83) => Ok(Item {
        tag,
        name: "Ending Projection Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "WG12 Supplement 43" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "Bits Mapped to Color Lookup Table",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Opacity 1 LUT Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0d) => Ok(Item {
        tag,
        name: "Temporal Position Time Offset",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0e) => Ok(Item {
        tag,
        name: "Data Path ID",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x07) => Ok(Item {
        tag,
        name: "Ultrasound Acquisition Geometry",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0f) => Ok(Item {
        tag,
        name: "Transducer Access Code Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "Dimension Organization Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Excluded Intervals Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Exclusion Duration",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Temporal Position Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Data Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x06) => Ok(Item {
        tag,
        name: "Opacity Constant",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "Position Measuring Device Used",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "US Image Description Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0f) => Ok(Item {
        tag,
        name: "RGB LUT Transfer Function",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Alpha LUT Transfer Function",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x03) => Ok(Item {
        tag,
        name: "Event Code Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "Image Orientation (Volume)",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Event Timer Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0d) => Ok(Item {
        tag,
        name: "Transducer Scanning Configuration Code Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x07) => Ok(Item {
        tag,
        name: "Opacity Lookup Table Descriptor",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0d) => Ok(Item {
        tag,
        name: "Opacity 2 LUT Transfer Function",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x01) => Ok(Item {
        tag,
        name: "Performed Protocol Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "Transducer Scan Geometry Code Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0b) => Ok(Item {
        tag,
        name: "Enhanced Palette Color Lookup Table Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Data Path Assignment",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0a) => Ok(Item {
        tag,
        name: "Volume to Table Mapping Matrix",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0b) => Ok(Item {
        tag,
        name: "Aliased Data Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "Image Data Type Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Focus Depth(s)",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0e) => Ok(Item {
        tag,
        name: "Plane Position (Volume) Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "Event Time Interval",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0c) => Ok(Item {
        tag,
        name: "Opacity 2 LUT Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0e) => Ok(Item {
        tag,
        name: "Transducer Beam Steering Code Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x08) => Ok(Item {
        tag,
        name: "Apex Position",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0f) => Ok(Item {
        tag,
        name: "Plane Orientation (Volume) Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x09) => Ok(Item {
        tag,
        name: "Volume to Transducer Mapping Matrix",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "Opacity Lookup Table Data",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Data Frame Assignment Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Image Position (Volume)",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x05) => Ok(Item {
        tag,
        name: "Opacity 1 LUT Transfer Function",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Exclusion Start Datetime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0c) => Ok(Item {
        tag,
        name: "Patient Frame of Reference Source",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_VXTL_USERDATA_01" => match (g0, g1, e0, e1) {
      (0x00, 0x47, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CBT RECON NUM OF SLICES" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x89) => Ok(Item {
        tag,
        name: "Number of Reconstruction Slices",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 040" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED MAMMO" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x5a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-PCR Release 2" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Reader Mode",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "MRM Code",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Latitude",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "View Name",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa6) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa7) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa8) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa9) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaa) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xab) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xac) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xad) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xae) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaf) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb6) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb7) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb8) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb9) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xba) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "TOSHIBA_MEC_CT_1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Orientation Head Feet",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "View Direction",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0a) => Ok(Item {
        tag,
        name: "Orientation Supine Prone",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0b) => Ok(Item {
        tag,
        name: "Location",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "Scan View Direction",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0d) => Ok(Item {
        tag,
        name: "Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xf1, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xf1, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xf1, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xf1, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xf1, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xf1, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xf1, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xf1, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xf1, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x7f, 0xf1, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xf1, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xf1, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "Philips RAD Imaging DD 097" => match (g0, g1, e0, e1) {
      (0x20, 0x0b, _, 0x76) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x99) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x7d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x0b, _, 0x65) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x7e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x88) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x6e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x54) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x86) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x78) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x0b, _, 0x79) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x7c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x96) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x72) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x7a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x82) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x74) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x75) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x85) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x81) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x89) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x9b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x63) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x9a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x73) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x7b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "syngoDynamics" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0xae) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AMI Annotations_02" => match (g0, g1, e0, e1) {
      (0x31, 0x01, _, 0x20) => Ok(Item {
        tag,
        name: "AMI Annotation Sequence (RET)",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 035" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MITRA PRESENTATION 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Mitra Rotation",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Mitra Window Width",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Mitra Window Centre",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "Mitra Invert",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Mitra Has Tabstop",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x05) => Ok(Item {
        tag,
        name: "Smooth Rotation",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Breast Box x0",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "Breast Box y0",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x12) => Ok(Item {
        tag,
        name: "Breast Box x1",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x13) => Ok(Item {
        tag,
        name: "Breast Box y1",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "STENTOR" => match (g0, g1, e0, e1) {
      (0x00, 0x73, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x73, _, 0x02) => Ok(Item {
        tag,
        name: "Private Creator",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x73, _, 0x03) => Ok(Item {
        tag,
        name: "Stentor Remote AETitle Element",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x00, 0x73, _, 0x04) => Ok(Item {
        tag,
        name: "Stentor Local AETitle Element",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x00, 0x73, _, 0x06) => Ok(Item {
        tag,
        name: "Stentor Transfer Syntax Value",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Silhouette Annot V1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x15) => Ok(Item {
        tag,
        name: "Annotation Text Backing Mode",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x26) => Ok(Item {
        tag,
        name: "Annotation Line Style",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x27) => Ok(Item {
        tag,
        name: "Annotation Line Dash Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Annotation Text Cursor Mode",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x37) => Ok(Item {
        tag,
        name: "Annotation Geom Color",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x29) => Ok(Item {
        tag,
        name: "Annotation Line Point Count",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x13) => Ok(Item {
        tag,
        name: "Annotation Text Foreground Color",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x12) => Ok(Item {
        tag,
        name: "Annotation Font",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x17) => Ok(Item {
        tag,
        name: "Annotation Text Location",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x33) => Ok(Item {
        tag,
        name: "Annotation Marker Type",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x39) => Ok(Item {
        tag,
        name: "Annotation Geom Line Style",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "Annotation Marker Color",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x42) => Ok(Item {
        tag,
        name: "Annotation Interactivity",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x43) => Ok(Item {
        tag,
        name: "Annotation Arrow Length",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x28) => Ok(Item {
        tag,
        name: "Annotation Line Attach Mode",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x41) => Ok(Item {
        tag,
        name: "Annotation Geom Fill Pattern",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Annotation Line Points",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x36) => Ok(Item {
        tag,
        name: "Annotation Marker Attach Mode",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x44) => Ok(Item {
        tag,
        name: "Annotation Arrow Angle",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x19) => Ok(Item {
        tag,
        name: "Annotation Text Attach Mode",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x14) => Ok(Item {
        tag,
        name: "Annotation Text Background Color",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x22) => Ok(Item {
        tag,
        name: "Annotation Text Shadow Offset Y",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x45) => Ok(Item {
        tag,
        name: "Annotation Don't Save",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x21) => Ok(Item {
        tag,
        name: "Annotation Text Shadow Offset X",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x40) => Ok(Item {
        tag,
        name: "Annotation Geom Dash Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "Annotation Name",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x24) => Ok(Item {
        tag,
        name: "Annotation Line Thickness",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x23) => Ok(Item {
        tag,
        name: "Annotation Line Color",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x25) => Ok(Item {
        tag,
        name: "Annotation Line Type",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x18) => Ok(Item {
        tag,
        name: "Annotation Text String",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x38) => Ok(Item {
        tag,
        name: "Annotation Geom Thickness",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "Annotation Marker Size",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x16) => Ok(Item {
        tag,
        name: "Annotation Text Justification",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x35) => Ok(Item {
        tag,
        name: "Annotation Marker Location",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "Annotation Line Control Size",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "RadWorksMarconi" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x24) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "FDMS 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x27, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Exposure Unit Type Code",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x92) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x50, 0xf1, _, 0x07) => Ok(Item {
        tag,
        name: "Subtraction Registration Result",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Reading Position Specification",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "Set No.",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Image Scanning Direction",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x0c) => Ok(Item {
        tag,
        name: "Film UID",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x73) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_6,
      }),
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "Data Compression Code",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Menu Character String",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "Kanji Menu Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0xa2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_2,
      }),
      (0x00, 0x21, _, 0x90) => Ok(Item {
        tag,
        name: "LUT Number",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x50, 0xf1, _, 0x20) => Ok(Item {
        tag,
        name: "Image Processing Modification Flag",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x32, _, 0x33) => Ok(Item {
        tag,
        name: "Requesting Service",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x11, _, 0x11) => Ok(Item {
        tag,
        name: "Image Position Specifying Flag",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x06) => Ok(Item {
        tag,
        name: "Route Image UID",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x72) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x11, _, 0x00) => Ok(Item {
        tag,
        name: "Trim Density",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x74) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_6,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Pair Processing Information",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x90) => Ok(Item {
        tag,
        name: "Distribution Code",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0xa3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x10) => Ok(Item {
        tag,
        name: "Relative Light Emission Amount Sk",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x95) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x11, _, 0x02) => Ok(Item {
        tag,
        name: "Image Mag./Reduc. Range",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "Image Display Format",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "FCR Image ID",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "Exposure Status Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xf1) => Ok(Item {
        tag,
        name: "Processing Information Flag",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x82) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x05) => Ok(Item {
        tag,
        name: "Image UID",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x50, 0xf1, _, 0x0a) => Ok(Item {
        tag,
        name: "FNC Parameters",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x84) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_6,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Image Processing Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0xa1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_2,
      }),
      (0x00, 0x27, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x11, _, 0x20) => Ok(Item {
        tag,
        name: "Interpolation A-VRS System Format",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Extended Reading Size Value",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x70) => Ok(Item {
        tag,
        name: "Film Number within the Series",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x93) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x44) => Ok(Item {
        tag,
        name: "Line Density Code",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0xa2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x96) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x50, 0xf1, _, 0x06) => Ok(Item {
        tag,
        name: "Energy Subtraction Param.",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x11) => Ok(Item {
        tag,
        name: "Term of Correction for Each IP Type St",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x83) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_6,
      }),
      (0x50, 0xf1, _, 0x09) => Ok(Item {
        tag,
        name: "Afin Conversion Coefficient",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x32, _, 0x32) => Ok(Item {
        tag,
        name: "Requesting Physician",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Film Annotation Character String 1",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "Kanji Body Part for Exposure",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x63) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xf0) => Ok(Item {
        tag,
        name: "Blackening Process Flag",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "EDR Mode",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x50, 0xf1, _, 0x08) => Ok(Item {
        tag,
        name: "Energy Subtraction Param. 2",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x62) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa2) => Ok(Item {
        tag,
        name: "Exposure Kind",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x12) => Ok(Item {
        tag,
        name: "Reading Gain Gp",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x81) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "No. of Split Exposure Frames",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x80) => Ok(Item {
        tag,
        name: "Equipment Type-Specific Information",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Image Control Unit",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x94) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x08) => Ok(Item {
        tag,
        name: "Image Display Information Version No.",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x09) => Ok(Item {
        tag,
        name: "Patient Information Version No.",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x50, 0xf1, _, 0x10) => Ok(Item {
        tag,
        name: "Film Output Format",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x25) => Ok(Item {
        tag,
        name: "Image Rotation/Reversal Information",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Split Exposure Format",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x80) => Ok(Item {
        tag,
        name: "Kanji Hospital Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Exposure Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x61) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x91) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x11, _, 0x01) => Ok(Item {
        tag,
        name: "Trim Width",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x00, 0x25, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x40) => Ok(Item {
        tag,
        name: "Image No. in the Set",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Radiographer's Code",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "Reading Sensitivity Center",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x33) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "Mag./Reduc. Ratio",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x91) => Ok(Item {
        tag,
        name: "Film Annotation Character String 2",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x25, _, 0xa1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x92) => Ok(Item {
        tag,
        name: "Kanji Department Name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0xa3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "GEMS_GDXE_ATHENAV2_INTERNAL_USE" => match (g0, g1, e0, e1) {
      (0x7f, 0xdf, _, 0x10) => Ok(Item {
        tag,
        name: "PPS Stream",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x11) => Ok(Item {
        tag,
        name: "Pixel Data References (temporary)",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x20) => Ok(Item {
        tag,
        name: "Auto Push Tag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0x25) => Ok(Item {
        tag,
        name: "PPS Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS NUMBER OF FRAMES" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x76) => Ok(Item {
        tag,
        name: "Number of Frames",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 033" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_6,
      }),
      (0x20, 0x0d, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_6,
      }),
      (0x20, 0x0d, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x0d, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_6,
      }),
      (0x20, 0x0d, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0b) => Ok(Item {
        tag,
        name: "Raw Data US",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CT VA0  RAW" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Creation Mask service",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Evaluation Mask service",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "Extended Processing Mask",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x40) => Ok(Item {
        tag,
        name: "Manipulation Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x41) => Ok(Item {
        tag,
        name: "Composition Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x42) => Ok(Item {
        tag,
        name: "Alteration Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x43) => Ok(Item {
        tag,
        name: "Generation Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x44) => Ok(Item {
        tag,
        name: "Function Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Mode Mirroring Code",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GE_GENESIS_REV3.0" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x39) => Ok(Item {
        tag,
        name: "Axial Type",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8f) => Ok(Item {
        tag,
        name: "Swap Phase / Frequency Axis",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9c) => Ok(Item {
        tag,
        name: "Pulse Sequence Name",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x9f) => Ok(Item {
        tag,
        name: "Coil Type",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa4) => Ok(Item {
        tag,
        name: "SAT fat/water/none",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc0) => Ok(Item {
        tag,
        name: "Bitmap of SAT Selections",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc1) => Ok(Item {
        tag,
        name: "Surfacel Coil Iintensity Correction Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xcb) => Ok(Item {
        tag,
        name: "Phase Contrast Flow Axis",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xcc) => Ok(Item {
        tag,
        name: "Phase Contrast Velocity Encoding",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd5) => Ok(Item {
        tag,
        name: "Fractional Echo",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd8) => Ok(Item {
        tag,
        name: "Variable Echo Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd9) => Ok(Item {
        tag,
        name: "Concatenated Sat",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf2) => Ok(Item {
        tag,
        name: "Number of Phases",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x1e) => Ok(Item {
        tag,
        name: "Delta Start Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x27) => Ok(Item {
        tag,
        name: "Pitch Ratio",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS TRANS MATRIX" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x80) => Ok(Item {
        tag,
        name: "Transformation Matrix",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_5,
      }),
      _ => Err(()),
    },
    "PHILIPS NM -Private" => match (g0, g1, e0, e1) {
      (0x70, 0x51, _, 0x00) => Ok(Item {
        tag,
        name: "Current Segment",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x51, _, 0x01) => Ok(Item {
        tag,
        name: "Number of Segments",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x51, _, 0x02) => Ok(Item {
        tag,
        name: "Segment Start Position",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x70, 0x51, _, 0x03) => Ok(Item {
        tag,
        name: "Segment Stop Position",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x70, 0x51, _, 0x04) => Ok(Item {
        tag,
        name: "Rel. COR offset - X dir.",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x70, 0x51, _, 0x05) => Ok(Item {
        tag,
        name: "Rel. COR offset - Z dir.",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x70, 0x51, _, 0x06) => Ok(Item {
        tag,
        name: "Current Rotation Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x51, _, 0x07) => Ok(Item {
        tag,
        name: "Number of Rotations",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x51, _, 0x10) => Ok(Item {
        tag,
        name: "Alignment Translations",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x51, _, 0x11) => Ok(Item {
        tag,
        name: "Alignment Rotations",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x70, 0x51, _, 0x12) => Ok(Item {
        tag,
        name: "Alignment Timestamp",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEIIS PACS" => match (g0, g1, e0, e1) {
      (0x09, 0x03, _, 0x10) => Ok(Item {
        tag,
        name: "Reject Image Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x09, 0x03, _, 0x11) => Ok(Item {
        tag,
        name: "Significant Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x09, 0x03, _, 0x12) => Ok(Item {
        tag,
        name: "Confidential Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x09, 0x03, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x09, 0x07, _, 0x21) => Ok(Item {
        tag,
        name: "GEIIS_PREFETCH_ALGORITHM",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x09, 0x07, _, 0x22) => Ok(Item {
        tag,
        name: "GEIIS_LIMIT_RECENT_STUDIES",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x09, 0x07, _, 0x23) => Ok(Item {
        tag,
        name: "GEIIS_LIMIT_OLDEST_STUDIES",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x09, 0x07, _, 0x24) => Ok(Item {
        tag,
        name: "GEIIS_LIMIT_RECENT_MONTHS",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x09, 0x07, _, 0x31) => Ok(Item {
        tag,
        name: "GEIIS_EXCLUDE_STUDY_UIDS",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "GEMS_DLX_DOSE_01" => match (g0, g1, e0, e1) {
      (0x00, 0x27, _, 0x01) => Ok(Item {
        tag,
        name: "Private Radiation Dose Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x02) => Ok(Item {
        tag,
        name: "Run Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x03) => Ok(Item {
        tag,
        name: "Run Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x04) => Ok(Item {
        tag,
        name: "Number of Frames",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x05) => Ok(Item {
        tag,
        name: "Frames per Second",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x06) => Ok(Item {
        tag,
        name: "Plane",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x07) => Ok(Item {
        tag,
        name: "KV",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x08) => Ok(Item {
        tag,
        name: "MA",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x09) => Ok(Item {
        tag,
        name: "Mas",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x10) => Ok(Item {
        tag,
        name: "Ms",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x11) => Ok(Item {
        tag,
        name: "Angulation",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x12) => Ok(Item {
        tag,
        name: "Rotation",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x13) => Ok(Item {
        tag,
        name: "Focal Distance",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x14) => Ok(Item {
        tag,
        name: "Image Intensifier Mode",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AMI ImageContext_01" => match (g0, g1, e0, e1) {
      (0x31, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "AMI Window Invert (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "AMI Window Center (RET)",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x30) => Ok(Item {
        tag,
        name: "AMI Window Widith (RET)",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "AMI Pixel Aspect Ratio Swap (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x50) => Ok(Item {
        tag,
        name: "AMI Enable Averaging (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x60) => Ok(Item {
        tag,
        name: "AMI Quality (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x70) => Ok(Item {
        tag,
        name: "AMI Viewport Annotation Level (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x80) => Ok(Item {
        tag,
        name: "AMI Show Image Annotation (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x90) => Ok(Item {
        tag,
        name: "AMI Show Image Overlay (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AEGIS_DICOM_2.00" => match (g0, g1, e0, e1) {
      (0x00, 0x03, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x05, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x13, 0x69, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "ACUSON:1.2.840.113680.1.0:7ffe" => match (g0, g1, e0, e1) {
      (0x7f, 0xdf, _, 0x00) => Ok(Item {
        tag,
        name: "Data Padding",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CT VA0  ORMR" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x80) => Ok(Item {
        tag,
        name: "Repetition Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x81) => Ok(Item {
        tag,
        name: "Echo Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x82) => Ok(Item {
        tag,
        name: "Inversion Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x83) => Ok(Item {
        tag,
        name: "Number of Averages",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x84) => Ok(Item {
        tag,
        name: "Imaging Frequency",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x85) => Ok(Item {
        tag,
        name: "Imaged Nucleus",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x86) => Ok(Item {
        tag,
        name: "Echo Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x90) => Ok(Item {
        tag,
        name: "Flip Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED" => match (g0, g1, e0, e1) {
      (0x00, 0x17, _, 0x00) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x8d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x0d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x81) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x21) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Recognition Code",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x66) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x02) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x1f, _, 0x70) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x55) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x08) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "Tube Angle During Topogram",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x19) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x07) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x38) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x80) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x20) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x42) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa3) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x70, 0x05, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa8) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x6c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x95) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x19) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x41) => Ok(Item {
        tag,
        name: "Length of Pixel Matrix",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x50) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x31) => Ok(Item {
        tag,
        name: "Length of Original Header",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x86) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x1b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x70, 0x01, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x87) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x0a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x12) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x5f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x09) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x5d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x66) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x95) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x60) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x93) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x56) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x60) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x85) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x92) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x78) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x9d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x13) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x17) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc1) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x15) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa7) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x94) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x12) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x89) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x03) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x31) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x55) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x78) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x8c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x83) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xb1) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x6b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x29) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x33) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x24) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x83) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x90) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x39) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x59) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "Target",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x44) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x43) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x65) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x21) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x40) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x97) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x98) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x8e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x0e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x1f, _, 0x02) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x54) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x14) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x51) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x65) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x75) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x74) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Zoom",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x99) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x1a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x25) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x5a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x22) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x53) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x58) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x06) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x76) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x18) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x40) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x64) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x9f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x43) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x01) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x69) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x44) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x49) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x97) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x23) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x9b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x02) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x32) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x34) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x16) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x31) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa9) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x50) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "ROI Mask",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x32) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x20) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x04) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x09) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x35) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x8b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x57) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa2) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x15) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x88) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x36) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x06) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x34) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x58) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa5) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x48) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x30) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x1f, _, 0x00) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x22) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x0b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x73) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x59) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x25) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x5c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x76) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x94) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x64) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x86) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Byte Offset of Pixel Matrix",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x0a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x14) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x24) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x1c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x08) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x82) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x1b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x93) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x6d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x47) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x1c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x80) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x20) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x84) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x75) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x68) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc2) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa6) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x18) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x15) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa3) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x1e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x61) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x56) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x19) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x11) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x40) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x23) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x18) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x52) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x17) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x2a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x9a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x0b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x03) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x0c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc0) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x20) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x57) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x05) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x70) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x73) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x30) => Ok(Item {
        tag,
        name: "Byte Offset of Original Header",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x77) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x1a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x85) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x16) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x41) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x9c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa2) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x14) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x05) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x11) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x3a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x11) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x52) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x21) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xb0) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x89) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x96) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x01) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x60) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x0f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x69) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x51) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x77) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x71) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x74) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa4) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x91) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x17) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x6a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x70, 0x03, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x80) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa4) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x13) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x01) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x9e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x07) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x5b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x71) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x13) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x32) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa1) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x30) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x1d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xf6) => Ok(Item {
        tag,
        name: "PDM Data Object Type Extension",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6c) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x87) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x5e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x68) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x67) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x45) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x04) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x53) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x30) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x1f, _, 0x50) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x12) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x8a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x03) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x72) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x70) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x88) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6e) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x96) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa0) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4a) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x03) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x84) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf0) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x91) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0xf5) => Ok(Item {
        tag,
        name: "PDM EFID Placeholder",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8d) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x63) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1b) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x33) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x67) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x48) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x1f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x8f) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PAPYRUS 3.0" => match (g0, g1, e0, e1) {
      (0x60, _, _, 0xc0) => Ok(Item {
        tag,
        name: "UIN Overlay Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x00) => Ok(Item {
        tag,
        name: "Comments",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0x10) => Ok(Item {
        tag,
        name: "Overlay Rows",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x13) => Ok(Item {
        tag,
        name: "Image Identifier Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0xa4) => Ok(Item {
        tag,
        name: "Anchor Point",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x60, _, _, 0x72) => Ok(Item {
        tag,
        name: "Overlay Style",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0x60) => Ok(Item {
        tag,
        name: "Editable",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0xa2) => Ok(Item {
        tag,
        name: "Post It Text",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0xba) => Ok(Item {
        tag,
        name: "Contour Points",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0x21) => Ok(Item {
        tag,
        name: "Referenced SOP Class UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0x00) => Ok(Item {
        tag,
        name: "Overlay ID",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0x50) => Ok(Item {
        tag,
        name: "Overlay Origin",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x60, _, _, 0x01) => Ok(Item {
        tag,
        name: "Linked Overlays",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0x15) => Ok(Item {
        tag,
        name: "Number of images",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x50) => Ok(Item {
        tag,
        name: "Image Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x32) => Ok(Item {
        tag,
        name: "Referenced File Path",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x60, _, _, 0x70) => Ok(Item {
        tag,
        name: "Overlay Font",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0x80) => Ok(Item {
        tag,
        name: "Fill Pattern",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0x76) => Ok(Item {
        tag,
        name: "Overlay Color",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x31) => Ok(Item {
        tag,
        name: "Referenced File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0xa0) => Ok(Item {
        tag,
        name: "Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0xb2) => Ok(Item {
        tag,
        name: "Attached Annotation",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x14) => Ok(Item {
        tag,
        name: "External PAPYRUS-File Reference Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x41) => Ok(Item {
        tag,
        name: "Referenced Image SOP Class UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x42) => Ok(Item {
        tag,
        name: "Referenced Image SOP Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0xbc) => Ok(Item {
        tag,
        name: "Mask Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x60, _, _, 0x74) => Ok(Item {
        tag,
        name: "Overlay Font Size",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0x82) => Ok(Item {
        tag,
        name: "Overlay Pen Size",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0xb0) => Ok(Item {
        tag,
        name: "ROI Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x11) => Ok(Item {
        tag,
        name: "Image Pointer",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0x40) => Ok(Item {
        tag,
        name: "Overlay Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x12) => Ok(Item {
        tag,
        name: "Pixel Offset",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x22) => Ok(Item {
        tag,
        name: "Referenced SOP Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x10) => Ok(Item {
        tag,
        name: "Pointer Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0x11) => Ok(Item {
        tag,
        name: "Overlay Columns",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x60, _, _, 0x78) => Ok(Item {
        tag,
        name: "Shadow Size",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AGFA-AG_HPState" => match (g0, g1, e0, e1) {
      (0x00, 0x71, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x71, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x71, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x71, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x71, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x71, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x71, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x71, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x71, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x71, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x73, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x73, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x73, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x73, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x75, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x87, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x87, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED NM" => match (g0, g1, e0, e1) {
      (0x00, 0x17, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown 0017 0000",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x18) => Ok(Item {
        tag,
        name: "NCO Data for detector 1",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x55, _, 0x8d) => Ok(Item {
        tag,
        name: "Sagittal Right Limit",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x0d) => Ok(Item {
        tag,
        name: "WAM Mode",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x0a) => Ok(Item {
        tag,
        name: "Decay factor",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x81) => Ok(Item {
        tag,
        name: "Raw Data Extension",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x21) => Ok(Item {
        tag,
        name: "ROI Total Counts",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x55, _, 0xc4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x66) => Ok(Item {
        tag,
        name: "Y1",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x02) => Ok(Item {
        tag,
        name: "Terminate on List Buffer Overflow Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x00) => Ok(Item {
        tag,
        name: "Toshiba CBF activity results",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "CTQ Female Entry Count",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x55) => Ok(Item {
        tag,
        name: "Start Angle",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x08) => Ok(Item {
        tag,
        name: "CCD Autopeak Function",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x53, _, 0x19) => Ok(Item {
        tag,
        name: "Manual Stop Flag 0 No 1 Yes",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x07) => Ok(Item {
        tag,
        name: "Curve Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x20) => Ok(Item {
        tag,
        name: "Bed correction angle",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Number of Segments",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x38) => Ok(Item {
        tag,
        name: "COR Data",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x80) => Ok(Item {
        tag,
        name: "File Altered Flag 1 Altered",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x20) => Ok(Item {
        tag,
        name: "Vertical Oblique Image",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x42) => Ok(Item {
        tag,
        name: "Stop Count Condition Status 0 None 1 Any 2 All",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa3) => Ok(Item {
        tag,
        name: "Frames per Phase",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x4c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa8) => Ok(Item {
        tag,
        name: "Gated SPECT Bins Reconstructed",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x6c) => Ok(Item {
        tag,
        name: "Y4",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x95) => Ok(Item {
        tag,
        name: "Filter Order",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x19) => Ok(Item {
        tag,
        name: "Save Screen Flag 1 SaveScreen",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1d) => Ok(Item {
        tag,
        name: "MicroDELTA Mystery2",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x00) => Ok(Item {
        tag,
        name: "Flood correction matrix Detector 1",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x50) => Ok(Item {
        tag,
        name: "Prone Flag 0 Supine 1 Prone",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x86) => Ok(Item {
        tag,
        name: "Time per Segment msec",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xe3, _, 0x1b) => Ok(Item {
        tag,
        name: "Pixel Overflow Flag 1 Pixel Overflow",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x29) => Ok(Item {
        tag,
        name: "Crystal thickness",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "MicroDELTA Trend",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x87) => Ok(Item {
        tag,
        name: "Plane of Transverse Top Slice",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x0a) => Ok(Item {
        tag,
        name: "Y Axis Label",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x12) => Ok(Item {
        tag,
        name: "Accepted Beats in Window",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x5f) => Ok(Item {
        tag,
        name: "Arm Length in cm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x09) => Ok(Item {
        tag,
        name: "CCD Count Rate Mode",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x35, _, 0x01) => Ok(Item {
        tag,
        name: "Energy window type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x5d) => Ok(Item {
        tag,
        name: "Angle Type 1 360o 2 128 Steps",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5d) => Ok(Item {
        tag,
        name: "CTQ Line Counts",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x4d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x66) => Ok(Item {
        tag,
        name: "WB Scan Start 0 Head 1 Feet",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x95) => Ok(Item {
        tag,
        name: "Number of Beats to Average",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6a) => Ok(Item {
        tag,
        name: "WB Scan Time msec",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown Element 0031 02",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x60) => Ok(Item {
        tag,
        name: "Auto Window Beats",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x93) => Ok(Item {
        tag,
        name: "Phase Start msec",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x56) => Ok(Item {
        tag,
        name: "Decay Corr. Flag 1 Corr",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x60) => Ok(Item {
        tag,
        name: "KVP",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x85) => Ok(Item {
        tag,
        name: "Volume Rendered Extension",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "CTQ Normal Margin",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "CTQ Abnormal Oblique Margin",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0f) => Ok(Item {
        tag,
        name: "Siemens ICON Data Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x78) => Ok(Item {
        tag,
        name: "WB Post Pixel Overflow 1 Yes",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x9d) => Ok(Item {
        tag,
        name: "Rotation Matrix",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x33) => Ok(Item {
        tag,
        name: "Gantry step for COIN acquisitions",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x17) => Ok(Item {
        tag,
        name: "Duration of THIS Frame msec",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc1) => Ok(Item {
        tag,
        name: "Uniformity Correction Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x15) => Ok(Item {
        tag,
        name: "Hottest Pixel in Window",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa7) => Ok(Item {
        tag,
        name: "Regions File Extension",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x04) => Ok(Item {
        tag,
        name: "Prompt window width",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5a) => Ok(Item {
        tag,
        name: "CTQ Find Max or Average Flag",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x35, _, 0x02) => Ok(Item {
        tag,
        name: "Start and end row illuminated by wind position",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x94) => Ok(Item {
        tag,
        name: "Window Center Method 0 Avg 1 Peak",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x12) => Ok(Item {
        tag,
        name: "Count Rate Start Condition 0 None 1 Any 2 All",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x35, _, 0x00) => Ok(Item {
        tag,
        name: "Specialized tomo type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x35, _, 0x04) => Ok(Item {
        tag,
        name: "Repeat number of the original dynamic SPECT",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x14) => Ok(Item {
        tag,
        name: "MHR ( Y-Shift) data for detector 1",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x03) => Ok(Item {
        tag,
        name: "First Frame by Counts",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6b) => Ok(Item {
        tag,
        name: "WB Anterior kCounts View 1",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x10) => Ok(Item {
        tag,
        name: "Compressed Pixel Data",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x31) => Ok(Item {
        tag,
        name: "COR Acquisition Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x55) => Ok(Item {
        tag,
        name: "CTQ Min Oblique Stack Count",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x78) => Ok(Item {
        tag,
        name: "Total Flood Counts",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x8c) => Ok(Item {
        tag,
        name: "Attenuation Flag 1 Chang 2 Sorenson",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x83) => Ok(Item {
        tag,
        name: "Total Beats Framed",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xb1) => Ok(Item {
        tag,
        name: "Oblique Region Last Slice",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x6b) => Ok(Item {
        tag,
        name: "X4",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xd0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "WB Display Field Length in cm",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x33) => Ok(Item {
        tag,
        name: "Info Density Stop Count",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x24) => Ok(Item {
        tag,
        name: "ROI Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x83) => Ok(Item {
        tag,
        name: "Coronal Extension",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x90) => Ok(Item {
        tag,
        name: "Coronal Anterior Limit",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x59) => Ok(Item {
        tag,
        name: "CTQ Min Radius Percent",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x44) => Ok(Item {
        tag,
        name: "Beats Rejected Post PVC",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x43) => Ok(Item {
        tag,
        name: "Stop Time",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x65) => Ok(Item {
        tag,
        name: "X1",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x21) => Ok(Item {
        tag,
        name: "Text Relating to Data Object",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x40) => Ok(Item {
        tag,
        name: "Folder Owner Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x97) => Ok(Item {
        tag,
        name: "Percent Ray",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x98) => Ok(Item {
        tag,
        name: "Astigmatic Collimator 1 Neuro 2 Cardiac",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x8e) => Ok(Item {
        tag,
        name: "Sagittal Left Limit",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Scaler Index",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x0e) => Ok(Item {
        tag,
        name: "Event Control Mode",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5b) => Ok(Item {
        tag,
        name: "CTQ Basal Slice Index Offset",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x54) => Ok(Item {
        tag,
        name: "Angular Step",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x14) => Ok(Item {
        tag,
        name: "Start Heart Beat Count Condition 0 None 1 Any 2",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x25) => Ok(Item {
        tag,
        name: "Backprojection angle head 2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Radiopharmaceutical",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x51) => Ok(Item {
        tag,
        name: "CTQ Male Entry Count",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x65) => Ok(Item {
        tag,
        name: "WB Scan Speed Mode 0 Manual 1 Auto",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x75) => Ok(Item {
        tag,
        name: "Y Offset",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x05) => Ok(Item {
        tag,
        name: "Random window width",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x01) => Ok(Item {
        tag,
        name: "Flood correction Matrix Det 2 up to SR 2.0",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x55, _, 0x74) => Ok(Item {
        tag,
        name: "X Offset",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x99) => Ok(Item {
        tag,
        name: "XP0",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x1a) => Ok(Item {
        tag,
        name: "View Number",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x7e) => Ok(Item {
        tag,
        name: "Collimator thickness",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x55, _, 0x5a) => Ok(Item {
        tag,
        name: "Table Traverse cm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xc2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x22) => Ok(Item {
        tag,
        name: "Bed U/D correction data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Total Counts Framed",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "VPDs Detected",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa6) => Ok(Item {
        tag,
        name: "Cycles per repeat",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x6d) => Ok(Item {
        tag,
        name: "WB Count Density",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x53) => Ok(Item {
        tag,
        name: "Zero Location (T=Top B=Bottom)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x30) => Ok(Item {
        tag,
        name: "Preset name used for acquisition",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x58) => Ok(Item {
        tag,
        name: "Radial Map Info in 0.1 mm Inc.",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x06) => Ok(Item {
        tag,
        name: "Maximal Value on Y-Axis",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x03) => Ok(Item {
        tag,
        name: "Units",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x76) => Ok(Item {
        tag,
        name: "X Principal Ray",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x18) => Ok(Item {
        tag,
        name: "Start Heart Rate",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x40) => Ok(Item {
        tag,
        name: "Stop Condition Status 0 None 1 Any 2 All",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x64) => Ok(Item {
        tag,
        name: "TIC Error Values",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Processed Flag 0 Raw 1 Process",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x0b) => Ok(Item {
        tag,
        name: "Counts source",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "Organ System",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x9f) => Ok(Item {
        tag,
        name: "X1",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x43) => Ok(Item {
        tag,
        name: "Percent of R-R Interval Framed",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x69) => Ok(Item {
        tag,
        name: "X3",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x44) => Ok(Item {
        tag,
        name: "Stop Time Condition Status 0 None 1 Any 2 All",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x49) => Ok(Item {
        tag,
        name: "PVC Threshold msec",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x97) => Ok(Item {
        tag,
        name: "Counts in Peak Bin",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x15) => Ok(Item {
        tag,
        name: "MHR ( Y-Shift) data for detector 2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x23) => Ok(Item {
        tag,
        name: "ROI Center Coordinates",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa9) => Ok(Item {
        tag,
        name: "Effective repeat time",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x55, _, 0x9b) => Ok(Item {
        tag,
        name: "XP1",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown 55-02",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x32) => Ok(Item {
        tag,
        name: "Info Density Stop Region",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x7f) => Ok(Item {
        tag,
        name: "Collimator angular resolution",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xe3, _, 0x16) => Ok(Item {
        tag,
        name: "Total Counts in THIS Frame",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x31) => Ok(Item {
        tag,
        name: "Info Density Stop Scaler",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa9) => Ok(Item {
        tag,
        name: "Vertical Oblique Image",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x38) => Ok(Item {
        tag,
        name: "Pixel scale factor",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x50) => Ok(Item {
        tag,
        name: "Folder Status",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x32) => Ok(Item {
        tag,
        name: "Folder Creation Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x20) => Ok(Item {
        tag,
        name: "Flood Corr. Flag 1 Corr",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x04) => Ok(Item {
        tag,
        name: "Maximal Value on X-Axis",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x09) => Ok(Item {
        tag,
        name: "X Axis Label",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x17, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x28) => Ok(Item {
        tag,
        name: "Number of point sources used for NCO and MHR",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x8b) => Ok(Item {
        tag,
        name: "Number of Transverse Slices",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x57) => Ok(Item {
        tag,
        name: "Scatter Corr. Flag 1 Corr",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa2) => Ok(Item {
        tag,
        name: "Z0",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x15) => Ok(Item {
        tag,
        name: "Highest Pixel Value in THIS Frame",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x24) => Ok(Item {
        tag,
        name: "Backprojection angle head 1",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x88) => Ok(Item {
        tag,
        name: "Slice Step in Pixels",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x36) => Ok(Item {
        tag,
        name: "Folder Modification Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x06) => Ok(Item {
        tag,
        name: "CCD Window Offset",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x02) => Ok(Item {
        tag,
        name: "Dose calibration factor",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x34) => Ok(Item {
        tag,
        name: "Folder Modification Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x58) => Ok(Item {
        tag,
        name: "CTQ Max Sagittal Stack Count",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x10) => Ok(Item {
        tag,
        name: "Low Count",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa5) => Ok(Item {
        tag,
        name: "Pixel Size X Direction mm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "MicroDELTA Write Version",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x48) => Ok(Item {
        tag,
        name: "Rejection Scheme",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x30) => Ok(Item {
        tag,
        name: "COR Corr. Flag 1 Corr",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x22) => Ok(Item {
        tag,
        name: "ROI Total Pixels",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x0b) => Ok(Item {
        tag,
        name: "Curve Data",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Display Magnification",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x73) => Ok(Item {
        tag,
        name: "Y Gains",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x59) => Ok(Item {
        tag,
        name: "Direction H HeadIn F FeetIn",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x36) => Ok(Item {
        tag,
        name: "Transaxial acceptance width for coincidence",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaa) => Ok(Item {
        tag,
        name: "Acquired cycles per repeat",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xe3, _, 0x25) => Ok(Item {
        tag,
        name: "ROI Data",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x5c) => Ok(Item {
        tag,
        name: "Pixel Acquisition Date",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x76) => Ok(Item {
        tag,
        name: "WB Post Scan Time msec",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x94) => Ok(Item {
        tag,
        name: "Filter Alpha Coefficient",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x64) => Ok(Item {
        tag,
        name: "WB Scan Speed cm/min",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x35, _, 0x03) => Ok(Item {
        tag,
        name: "Blank scan image for profile",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "Bladder Image Extension",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "MicroDELTA Expansion Blocks",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "TER Lower Limit",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x86) => Ok(Item {
        tag,
        name: "Plane of Transverse Bottom Slice",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x0a) => Ok(Item {
        tag,
        name: "Analog Output Device",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x14) => Ok(Item {
        tag,
        name: "Lowest Pixel Value in THIS Frame",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4c) => Ok(Item {
        tag,
        name: "MicroDELTA Acquisition Time per Window msec",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x08) => Ok(Item {
        tag,
        name: "Frame reference time",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x1c) => Ok(Item {
        tag,
        name: "Buffer Overflow Flag 1 Buffer Overflow",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "Serum Creatinine mg/dl",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x08) => Ok(Item {
        tag,
        name: "Curve Function Label",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x82) => Ok(Item {
        tag,
        name: "Sagittal Extension",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1a) => Ok(Item {
        tag,
        name: "MicroDELTA Overlay Map",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x1b) => Ok(Item {
        tag,
        name: "Elapsed Time Stop",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x93) => Ok(Item {
        tag,
        name: "Filter Cutoff Frequency",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x6d) => Ok(Item {
        tag,
        name: "Pixel Size Flag 1 Valid Size",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "MicroDELTA Version",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x47) => Ok(Item {
        tag,
        name: "Beat Rejection Parameter",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x1c) => Ok(Item {
        tag,
        name: "Stop Heart Beat Count Condition 0 None 1 Any 2 A",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x17, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown 0017 0080",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x17, _, 0x20) => Ok(Item {
        tag,
        name: "Scanning Sequence",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x34) => Ok(Item {
        tag,
        name: "Bed step for wholebody or Coin acquisitions",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x07) => Ok(Item {
        tag,
        name: "Rescale Slope",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x84) => Ok(Item {
        tag,
        name: "Transverse Extension",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x75) => Ok(Item {
        tag,
        name: "WB Post View Status No Img 1 Complete 2 Aborted",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x55, _, 0x68) => Ok(Item {
        tag,
        name: "Y2",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0a) => Ok(Item {
        tag,
        name: "MicroDELTA File Extension",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x7f) => Ok(Item {
        tag,
        name: "Segment Type 0 Segments 2 Time/Segment",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x05) => Ok(Item {
        tag,
        name: "Radio nuclide half life",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xc2) => Ok(Item {
        tag,
        name: "Overflow Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa6) => Ok(Item {
        tag,
        name: "Pixel Size Y Direction mm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x18) => Ok(Item {
        tag,
        name: "Frame Angle",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x15) => Ok(Item {
        tag,
        name: "Start Heart Beat Count",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa3) => Ok(Item {
        tag,
        name: "Z1",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x1e) => Ok(Item {
        tag,
        name: "Start Time of THIS Frame From Start of Study",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x61) => Ok(Item {
        tag,
        name: "Non-gated File Extension",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0d) => Ok(Item {
        tag,
        name: "MicroDELTA Mode",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x56) => Ok(Item {
        tag,
        name: "CTQ Max Oblique Stack Count",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "MicroDELTA Color Table Extra",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x19) => Ok(Item {
        tag,
        name: "Frame Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x11) => Ok(Item {
        tag,
        name: "Gantry Zero Position",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x40) => Ok(Item {
        tag,
        name: "Noncircular Orbit Flag 1 NCO",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "Body Surface Area m2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x18) => Ok(Item {
        tag,
        name: "Total Counts in Window",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xe3, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x17) => Ok(Item {
        tag,
        name: "MicroDELTA Thyroid Markers",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xc3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x9a) => Ok(Item {
        tag,
        name: "ZP0",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "MicroDELTA Color Table Used",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "CTQ Time Delay Units",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x0b) => Ok(Item {
        tag,
        name: "Communication Type",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x0c) => Ok(Item {
        tag,
        name: "Control Unit 1 ICON 2 DOT 3 ScintiView",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc0) => Ok(Item {
        tag,
        name: "Head Tilt degrees",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8a) => Ok(Item {
        tag,
        name: "R-R Interval msec",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x20) => Ok(Item {
        tag,
        name: "ROI Average Pixel Value",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x57) => Ok(Item {
        tag,
        name: "CTQ Min Sagittal Stack Count",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "CTQ has been used",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x05) => Ok(Item {
        tag,
        name: "Minimal Value on Y-Axis",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x06) => Ok(Item {
        tag,
        name: "Rescale intercept",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa5) => Ok(Item {
        tag,
        name: "Number of repeats per phase",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0x70) => Ok(Item {
        tag,
        name: "Number of Images in Folder",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "MicroDELTA Parameter Blocks",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x73) => Ok(Item {
        tag,
        name: "WB Posterior kCounts View 2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4e) => Ok(Item {
        tag,
        name: "CTQ Unknown Entry Count",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x77) => Ok(Item {
        tag,
        name: "Y Principal Ray",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x37) => Ok(Item {
        tag,
        name: "Starburst flags",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x19) => Ok(Item {
        tag,
        name: "NCO Data for detector 2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x53, _, 0x1a) => Ok(Item {
        tag,
        name: "Elapsed Time Stop Condition 0 None 1 Any 2 All",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "CTQ Abnormal Sagittal Margin",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "Accepted Beats",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x10) => Ok(Item {
        tag,
        name: "Zoom Y Offset 0.1 mm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x85) => Ok(Item {
        tag,
        name: "Framed Counts",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "Number of Points",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x0c) => Ok(Item {
        tag,
        name: "Radio Nuclide positron fraction",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x53, _, 0x16) => Ok(Item {
        tag,
        name: "Start Heart Rate Threshold Condition",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0b) => Ok(Item {
        tag,
        name: "MicroDELTA Write ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x41) => Ok(Item {
        tag,
        name: "Stop Count",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x9c) => Ok(Item {
        tag,
        name: "ZP1",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa2) => Ok(Item {
        tag,
        name: "Requested Frame Duration msec",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x14) => Ok(Item {
        tag,
        name: "Window Width %",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "Number of Views",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x05) => Ok(Item {
        tag,
        name: "CCD Window Width",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "Scaler Counts",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Number of scalers",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x11) => Ok(Item {
        tag,
        name: "Average Heart Rate BPM",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "WB IRIS Corr. File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "ECAT File Menu Header",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "MicroDELTA Number of Overlays",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "Phase Pause msec",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x11) => Ok(Item {
        tag,
        name: "Elapsed Time Start msec",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5f) => Ok(Item {
        tag,
        name: "CTQ Radial Angle Increment",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5e) => Ok(Item {
        tag,
        name: "CTQ Radii Counts",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "Whole Body View",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x5c) => Ok(Item {
        tag,
        name: "CTQ Starting Line Index",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x52) => Ok(Item {
        tag,
        name: "Total Rotation in Degrees",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x21) => Ok(Item {
        tag,
        name: "Flood Acquisition Date",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xb0) => Ok(Item {
        tag,
        name: "Oblique Region First Slice",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6f) => Ok(Item {
        tag,
        name: "WB Coun Density Speed cm/min",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x35, _, 0x05) => Ok(Item {
        tag,
        name: "Phase number of the original dynamic SPECT",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x89) => Ok(Item {
        tag,
        name: "SWG",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x96) => Ok(Item {
        tag,
        name: "Attenuation Cooefficient",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x01) => Ok(Item {
        tag,
        name: "Camera Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x80) => Ok(Item {
        tag,
        name: "Flood correction matrix Detector 2",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x0f) => Ok(Item {
        tag,
        name: "Zoom X Offset 0.1 mm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x21) => Ok(Item {
        tag,
        name: "Gantry correction angle",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Number of detectors",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x69) => Ok(Item {
        tag,
        name: "WB Number of Passes",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x51) => Ok(Item {
        tag,
        name: "Orbit 0 Circular 1 Elliptical",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x77) => Ok(Item {
        tag,
        name: "WB Ant Pixel Overflow 1 Yes",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x71) => Ok(Item {
        tag,
        name: "Y Focal Length",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x74) => Ok(Item {
        tag,
        name: "WB Ant View Status No Img 1 Complete 2 Aborted",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xa4) => Ok(Item {
        tag,
        name: "Frame Pause msec",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x91) => Ok(Item {
        tag,
        name: "Isotope Used in Reconstruction",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x10) => Ok(Item {
        tag,
        name: "Elapsed Time Start Condition 0 None 1 Any 2 All",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x32) => Ok(Item {
        tag,
        name: "Crystal type Startburst or not",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x17) => Ok(Item {
        tag,
        name: "Start Heart Rate Increasing Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x31) => Ok(Item {
        tag,
        name: "Camera config angle",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa7) => Ok(Item {
        tag,
        name: "Repeat start time",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x4b) => Ok(Item {
        tag,
        name: "Autobeat Window 0 No 1 Yes",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x6a) => Ok(Item {
        tag,
        name: "Y3",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "WB Scan Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x80) => Ok(Item {
        tag,
        name: "Main Acquisition View",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa4) => Ok(Item {
        tag,
        name: "Transverse Scale",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x13) => Ok(Item {
        tag,
        name: "Average R-R Interval msec",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x01) => Ok(Item {
        tag,
        name: "Terminate on Pixel Overflow Flag 1 Terminate",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa8) => Ok(Item {
        tag,
        name: "Repeat stop time",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x55, _, 0xc0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x55, _, 0x9e) => Ok(Item {
        tag,
        name: "X0",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x07) => Ok(Item {
        tag,
        name: "CCD Peaking Mode",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x5b) => Ok(Item {
        tag,
        name: "Multiplexor Flag 1 Multiplexed",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "Bladder Esidual Volume cc",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x71) => Ok(Item {
        tag,
        name: "Number of Non-Image Objects",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x13) => Ok(Item {
        tag,
        name: "Count Rate Start",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Number of Phases",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1c) => Ok(Item {
        tag,
        name: "MicroDELTA Mystery1",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa1) => Ok(Item {
        tag,
        name: "Y1",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x30) => Ok(Item {
        tag,
        name: "Info Density Stop Condition",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0e) => Ok(Item {
        tag,
        name: "MicroDELTA ESFR",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x53, _, 0x1d) => Ok(Item {
        tag,
        name: "Stop Heart Beat Count",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x6c) => Ok(Item {
        tag,
        name: "WB Anterior kCounts View 2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x87) => Ok(Item {
        tag,
        name: "BBA Miscellaneous Info",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x5e) => Ok(Item {
        tag,
        name: "Orbit Definition",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x68) => Ok(Item {
        tag,
        name: "WB Aperature Width in cm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x35) => Ok(Item {
        tag,
        name: "Weight factor table for coincidence acquisitions",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Time of Lasix Administration",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "TER",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x00) => Ok(Item {
        tag,
        name: "Length of Group 0x7FE3",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x67) => Ok(Item {
        tag,
        name: "X2",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x45) => Ok(Item {
        tag,
        name: "Trigger Source",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x04) => Ok(Item {
        tag,
        name: "CCD Energy Level",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "Rejected Beats",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x53) => Ok(Item {
        tag,
        name: "CTQ Stress/Rest Time Delay",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x30) => Ok(Item {
        tag,
        name: "Folder Creation Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x1f, _, 0x50) => Ok(Item {
        tag,
        name: "Location RET",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x01) => Ok(Item {
        tag,
        name: "e.soft DICOM original image type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x8a) => Ok(Item {
        tag,
        name: "Y-Axis Smooth Slice Weights",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x03) => Ok(Item {
        tag,
        name: "External Zoom",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x72) => Ok(Item {
        tag,
        name: "X Gains",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x70) => Ok(Item {
        tag,
        name: "X Focal Length",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8e) => Ok(Item {
        tag,
        name: "Rejection Type",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x10) => Ok(Item {
        tag,
        name: "COR Data for Detector 1",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x88) => Ok(Item {
        tag,
        name: "Tolerance %",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x11) => Ok(Item {
        tag,
        name: "COR Data for Detector 2",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Whole Body Processed Flag 0:Raw 1:Img1-Img2 2:Im",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "MicroDELTA Overlay Block",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "Lasix Dose mg",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6e) => Ok(Item {
        tag,
        name: "WB Reference View Flag 1 Ref",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x96) => Ok(Item {
        tag,
        name: "Histogram Bin Interval msec",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "PVC Rejection Flag 1 Reject",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x09) => Ok(Item {
        tag,
        name: "Number of Radiopharmaceutical information seq",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "WB Posterior kCounts View 1",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0xa0) => Ok(Item {
        tag,
        name: "Y0",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4a) => Ok(Item {
        tag,
        name: "Framing Mode 1 Forward 2 F/B",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x00) => Ok(Item {
        tag,
        name: "Flood correction Matrix Det 1 up to SR 2.0",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x50, 0x01, _, 0x03) => Ok(Item {
        tag,
        name: "Minimal Value on X-Axis",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x84) => Ok(Item {
        tag,
        name: "Present Time of Day",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf0) => Ok(Item {
        tag,
        name: "Pixel Dimensions",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x91) => Ok(Item {
        tag,
        name: "Phase Total Counts",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8d) => Ok(Item {
        tag,
        name: "Total Counts in Acquisition",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "ECAT File Subheader",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x31, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Radionuclide Units",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x63) => Ok(Item {
        tag,
        name: "WB Scan Length in cm",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1b) => Ok(Item {
        tag,
        name: "SGI Converted LookUp Table",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4f) => Ok(Item {
        tag,
        name: "CTQ Matrix Size",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x67) => Ok(Item {
        tag,
        name: "WB Scan Direction 0 Lt to Rt 1 Rt to Lt",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x48) => Ok(Item {
        tag,
        name: "NCO Values",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x04) => Ok(Item {
        tag,
        name: "Decay correction",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x10) => Ok(Item {
        tag,
        name: "Number of Windows",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x1f) => Ok(Item {
        tag,
        name: "ROI Maximum Pixel Value",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x8f) => Ok(Item {
        tag,
        name: "Coronal Posterior Limit",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PHILIPS UNDOCUMENTED" => match (g0, g1, e0, e1) {
      (0x55, 0x03, _, 0x12) => Ok(Item {
        tag,
        name: "Slice Thickness",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x55, 0x03, _, 0x24) => Ok(Item {
        tag,
        name: "Plane",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x55, 0x03, _, 0x30) => Ok(Item {
        tag,
        name: "Number of Slices",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x55, 0x03, _, 0xa5) => Ok(Item {
        tag,
        name: "Prepulse",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x55, 0x03, _, 0xae) => Ok(Item {
        tag,
        name: "Contrast Agent Flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x55, 0x03, _, 0xbb) => Ok(Item {
        tag,
        name: "Coil ID",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x55, 0x03, _, 0xc2) => Ok(Item {
        tag,
        name: "Anatomy",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x55, 0x03, _, 0xc3) => Ok(Item {
        tag,
        name: "Indication",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SECTRA_Ident_01" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Request number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "Examination number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Series ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x05) => Ok(Item {
        tag,
        name: "Series Order",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x06) => Ok(Item {
        tag,
        name: "File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x07) => Ok(Item {
        tag,
        name: "Image Data ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 017" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CT VA0  COAD" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "Table Feed",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xbe) => Ok(Item {
        tag,
        name: "Expiratoric Reserve",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Patient Region",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xbf) => Ok(Item {
        tag,
        name: "Vital Capacity",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa3) => Ok(Item {
        tag,
        name: "Spiral Reconstruction Direction",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x66) => Ok(Item {
        tag,
        name: "Focal Spot Deflection Phase",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x93) => Ok(Item {
        tag,
        name: "Osteo Regression Line Intercept",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xbd) => Ok(Item {
        tag,
        name: "Pulmo Trigger Level",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaf) => Ok(Item {
        tag,
        name: "Correction Table Reference Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc1) => Ok(Item {
        tag,
        name: "Pulmo Air",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x94) => Ok(Item {
        tag,
        name: "Osteo Standardization Code",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x65) => Ok(Item {
        tag,
        name: "Focal Spot Deflection Amplitude",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Patient Phase of Life",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "Spiral Location Begin",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa6) => Ok(Item {
        tag,
        name: "Mode Processing Step Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xa9) => Ok(Item {
        tag,
        name: "Mode Store Step",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xae) => Ok(Item {
        tag,
        name: "Number of Readings per Rotation",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc3) => Ok(Item {
        tag,
        name: "Pulmo Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xac) => Ok(Item {
        tag,
        name: "Mode MBH Kind",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaa) => Ok(Item {
        tag,
        name: "Focus Size Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb0) => Ok(Item {
        tag,
        name: "Feed per Rotation",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "Detector Center",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Distance Source to SourceSide Collimator",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "Reading Integration Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Distance Source to DetectorSide Collimator",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc2) => Ok(Item {
        tag,
        name: "Pulmo Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Osteo Offset",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xad) => Ok(Item {
        tag,
        name: "Mode Balancing Kind",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "Rotation Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc0) => Ok(Item {
        tag,
        name: "Pulmo Water",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Detector Alignment",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa5) => Ok(Item {
        tag,
        name: "Scan Tilt Plane Distance",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa2) => Ok(Item {
        tag,
        name: "Spiral z Profile",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "Interpolation Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "Osteo Regression Line Slope",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa4) => Ok(Item {
        tag,
        name: "Spiral Reconstruction Increment",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa7) => Ok(Item {
        tag,
        name: "Mode Processing Control Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Water Scaling Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa8) => Ok(Item {
        tag,
        name: "Mode Master Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "Detector Spacing",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Spiral Location End",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Number of Possible Channels",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Focus Alignment",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "Mean Channel Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x96) => Ok(Item {
        tag,
        name: "Osteo Phantom Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x67) => Ok(Item {
        tag,
        name: "Focal Spot Deflection Offset",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xab) => Ok(Item {
        tag,
        name: "Mode Adaptive Filter Kind",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MDS NORDION OTP ANATOMY MODELLING" => match (g0, g1, e0, e1) {
      (0x30, 0x05, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x30, 0x05, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x30, 0x05, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x30, 0x05, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x30, 0x05, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x30, 0x05, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x30, 0x05, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x30, 0x05, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x30, 0x05, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x30, 0x05, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 023" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x37) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x38) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_DL_SERIES_01" => match (g0, g1, e0, e1) {
      (0x00, 0x15, _, 0x85) => Ok(Item {
        tag,
        name: "Series File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x87) => Ok(Item {
        tag,
        name: "Number Of Images",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x8c) => Ok(Item {
        tag,
        name: "Sent Flag",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x8d) => Ok(Item {
        tag,
        name: "Item Locked",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4c) => Ok(Item {
        tag,
        name: "internal label",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x4d) => Ok(Item {
        tag,
        name: "browser hide",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED ECAT FILE INFO" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "ECAT_Main_Header",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "ECAT_Image_Subheader",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ELSCINT1" => match (g0, g1, e0, e1) {
      (0x01, 0xf7, _, 0x73) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x6b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x07, 0xa1, _, 0x50) => Ok(Item {
        tag,
        name: "Tamar Site Id",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x39) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x06, 0x01, _, 0x72) => Ok(Item {
        tag,
        name: "Batch Slice Number",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x61) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x2a) => Ok(Item {
        tag,
        name: "Tamar Study Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x83) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x01, 0xf1, _, 0x0c) => Ok(Item {
        tag,
        name: "Scanner Relative Center",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0xe1, _, 0x6a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x23) => Ok(Item {
        tag,
        name: "Presentation Relative Part",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x01, 0xf7, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x11) => Ok(Item {
        tag,
        name: "PS Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x06, 0x01, _, 0x70) => Ok(Item {
        tag,
        name: "Batch Number",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x10) => Ok(Item {
        tag,
        name: "Tamar Original Curve Desc",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x01) => Ok(Item {
        tag,
        name: "Data Dictionary Version",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x2d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x60, 0x01, _, 0x10) => Ok(Item {
        tag,
        name: "Text Overlay Flag",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x06, 0x01, _, 0x31) => Ok(Item {
        tag,
        name: "Surview Length",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x65) => Ok(Item {
        tag,
        name: "Patient Data Modification Date",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x44) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x2a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe3, _, 0x1f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x0a) => Ok(Item {
        tag,
        name: "Edge Enhancement Weight",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x06, 0x01, _, 0x21) => Ok(Item {
        tag,
        name: "Relative Table Height",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x40) => Ok(Item {
        tag,
        name: "Tamar Study Body Part",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x06, 0x01, _, 0x00) => Ok(Item {
        tag,
        name: "Implementation Version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x81) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x37) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x01, 0xf3, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x01, 0xe1, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x06, 0x01, _, 0x20) => Ok(Item {
        tag,
        name: "Relative Table Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x2c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x01, 0xf1, _, 0x4c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x24) => Ok(Item {
        tag,
        name: "Presentation Horizontal Invert",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x9f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x03) => Ok(Item {
        tag,
        name: "Tamar Study Has Sticky Note",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x01) => Ok(Item {
        tag,
        name: "Acquisition Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x06, 0x01, _, 0x71) => Ok(Item {
        tag,
        name: "Batch Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x85) => Ok(Item {
        tag,
        name: "Tamar Translate Flags",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x22) => Ok(Item {
        tag,
        name: "Presentation Relative Center",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x01, 0xf3, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x39) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x11) => Ok(Item {
        tag,
        name: "Tamar Compression Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x99) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x4d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0xf0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x01) => Ok(Item {
        tag,
        name: "number of series in study",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x75) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_2,
      }),
      (0x00, 0xe1, _, 0x50) => Ok(Item {
        tag,
        name: "Acquisition Duration",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0xe3, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x26) => Ok(Item {
        tag,
        name: "Pitch",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x66) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x62) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x04) => Ok(Item {
        tag,
        name: "last update date",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x27) => Ok(Item {
        tag,
        name: "Rotation Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_2,
      }),
      (0x01, 0xf7, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x0d) => Ok(Item {
        tag,
        name: "Rotation Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x2e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x40) => Ok(Item {
        tag,
        name: "Image Label",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x01, 0xe1, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x06, 0x01, _, 0x50) => Ok(Item {
        tag,
        name: "Image View Type",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x03) => Ok(Item {
        tag,
        name: "Concurrent Slices Generation",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xe1, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x45) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x01) => Ok(Item {
        tag,
        name: "Tamar Exe Software Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x4e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x84) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x10) => Ok(Item {
        tag,
        name: "Tamar Software Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x2b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0xc2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x56) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_2,
      }),
      (0x01, 0xf1, _, 0x4a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x34) => Ok(Item {
        tag,
        name: "Tamar Study Age",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x1b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe3, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x32) => Ok(Item {
        tag,
        name: "Image View Convention",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x03) => Ok(Item {
        tag,
        name: "last update time",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x06, 0x01, _, 0x30) => Ok(Item {
        tag,
        name: "Surview Direction",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x1f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x3f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x9f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x01, 0xf1, _, 0x37) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x74) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x55) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x05) => Ok(Item {
        tag,
        name: "Reconstruction Arc",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x14) => Ok(Item {
        tag,
        name: "protection flag",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x63) => Ok(Item {
        tag,
        name: "Patient Language",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x03, _, 0x01) => Ok(Item {
        tag,
        name: "Offset List Structure",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x0a) => Ok(Item {
        tag,
        name: "Tamar Compressed Pixel Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x36) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x62) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x50, 0x01, _, 0x82) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_3,
      }),
      (0x50, 0x01, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_3,
      }),
      (0x01, 0xf1, _, 0x04) => Ok(Item {
        tag,
        name: "Angular Sampling Density",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x33) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x49) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x75) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x61) => Ok(Item {
        tag,
        name: "Protocol File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x08) => Ok(Item {
        tag,
        name: "Acquisition Length",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x07) => Ok(Item {
        tag,
        name: "Table Velocity",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xdf, _, 0xff) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0xe1, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf7, _, 0x2b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x07, 0xa3, _, 0x9c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x02) => Ok(Item {
        tag,
        name: "number of images in series",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x63) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x47) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf3, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_2,
      }),
      (0x01, 0xf1, _, 0x38) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x4b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x07, 0xa3, _, 0x64) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x07, 0xa1, _, 0x36) => Ok(Item {
        tag,
        name: "Tamar Source Ae",
        vrs: &[ValueRepresentation::ApplicationEntity],
        multiplicity: VM_1,
      }),
      (0x07, 0xa1, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x01, 0xf1, _, 0x46) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ISI" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "SIENET General Purpose IMGF",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PHILIPS MR/LAST" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0xb3) => Ok(Item {
        tag,
        name: "Number of Rejections",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xce) => Ok(Item {
        tag,
        name: "REST",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd6) => Ok(Item {
        tag,
        name: "Fourier Interpolation",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "Window Maximum",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd9) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xe2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x83) => Ok(Item {
        tag,
        name: "View Transform",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "FP Max",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "Window Minimum",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x80) => Ok(Item {
        tag,
        name: "View Center",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x00, 0x41, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x62) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb1) => Ok(Item {
        tag,
        name: "Minimum RR Interval",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb7) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xf2) => Ok(Item {
        tag,
        name: "WS Protocol String 3",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x82) => Ok(Item {
        tag,
        name: "View Zoom",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x60, 0x01, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x81) => Ok(Item {
        tag,
        name: "View Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0xe1) => Ok(Item {
        tag,
        name: "Prepulse Delay",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x72) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe0) => Ok(Item {
        tag,
        name: "Prepulse",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf3) => Ok(Item {
        tag,
        name: "WS Protocol String 4",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x22) => Ok(Item {
        tag,
        name: "Stack Radial Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Scaled Minimum",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc6) => Ok(Item {
        tag,
        name: "Cycled Multiple Slice",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "FP Min",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x27, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "Main Magnetic Field",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x40) => Ok(Item {
        tag,
        name: "Scaled Maximum",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb2) => Ok(Item {
        tag,
        name: "Maximum RR Interval",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x27, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xb4) => Ok(Item {
        tag,
        name: "Number of RR Intervals",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xe3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf1) => Ok(Item {
        tag,
        name: "WS Protocol String 2",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0e) => Ok(Item {
        tag,
        name: "Flow Compensation",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x21) => Ok(Item {
        tag,
        name: "Slice Gap",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x61) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf0) => Ok(Item {
        tag,
        name: "WS Protocol String 1",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb5) => Ok(Item {
        tag,
        name: "Arrhythmia Rejection",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS DFR.01" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Graphic Evaluation Mask",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "Type 1st Graphic Element",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "Description 1st Graphic Element",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x13) => Ok(Item {
        tag,
        name: "Type 2nd Graphic Element",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x14) => Ok(Item {
        tag,
        name: "Description 2nd Graphic Element",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x15) => Ok(Item {
        tag,
        name: "Type 3rd Graphic Element",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x16) => Ok(Item {
        tag,
        name: "Description 3rd Graphic Element",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x17) => Ok(Item {
        tag,
        name: "Type 4th Graphic Element",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x18) => Ok(Item {
        tag,
        name: "Description 4th Graphic Element",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x19) => Ok(Item {
        tag,
        name: "Type 5th Graphic Element",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Description 5th Graphic Element",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x21) => Ok(Item {
        tag,
        name: "Type 6th Graphic Element",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x22) => Ok(Item {
        tag,
        name: "Description 6th Graphic Element",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x23) => Ok(Item {
        tag,
        name: "Type 7th Graphic Element",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x24) => Ok(Item {
        tag,
        name: "Description 7th Graphic Element",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x25) => Ok(Item {
        tag,
        name: "Type 8th Graphic Element",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x26) => Ok(Item {
        tag,
        name: "Description 8th Graphic Element",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x27) => Ok(Item {
        tag,
        name: "Type 9th Graphic Element",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x28) => Ok(Item {
        tag,
        name: "Description 9th Graphic Element",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x29) => Ok(Item {
        tag,
        name: "Type 10th Graphic Element",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "Description 10th Graphic Element",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "VEPRO BROKER 1.0 DATA REPLACE" => match (g0, g1, e0, e1) {
      (0x00, 0x57, _, 0x20) => Ok(Item {
        tag,
        name: "Original data sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x30) => Ok(Item {
        tag,
        name: "Replaced data sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x40) => Ok(Item {
        tag,
        name: "Date of data replacement",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x41) => Ok(Item {
        tag,
        name: "Time of data replacement",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x42) => Ok(Item {
        tag,
        name: "Dicom receive node",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x43) => Ok(Item {
        tag,
        name: "Application name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x44) => Ok(Item {
        tag,
        name: "Computer name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CBT STARTING GANTRY ANGLE" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x82) => Ok(Item {
        tag,
        name: "Starting Projection Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "MedIns HP Extensions" => match (g0, g1, e0, e1) {
      (0x54, 0x73, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-CTBE Release 1" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CSA NON-IMAGE" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "CSA Data Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "CSA Data Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "CSA Data Info",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe1, _, 0x10) => Ok(Item {
        tag,
        name: "CSA Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 034" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS DFR.01 SERVICE" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "1 Plot",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "Width 1 Plot",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "2 Plot",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x13) => Ok(Item {
        tag,
        name: "Width 2 Plot",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "xCoordinate Region of Interest",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(5),
        },
      }),
      (0x00, 0x21, _, 0x21) => Ok(Item {
        tag,
        name: "yCoordinate Region of Interest",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(5),
        },
      }),
      (0x00, 0x21, _, 0x22) => Ok(Item {
        tag,
        name: "Width Region of Interest",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(5),
        },
      }),
      (0x00, 0x21, _, 0x23) => Ok(Item {
        tag,
        name: "Height Region of Interest",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(5),
        },
      }),
      _ => Err(()),
    },
    "PMOD_1" => match (g0, g1, e0, e1) {
      (0x00, 0x55, _, 0x01) => Ok(Item {
        tag,
        name: "Frame Start Times Vector",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x55, _, 0x02) => Ok(Item {
        tag,
        name: "Frame Positions Vector",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_3_TO_N,
      }),
      (0x00, 0x55, _, 0x03) => Ok(Item {
        tag,
        name: "Frame Orientations Vector",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: ValueMultiplicity { min: 6, max: None },
      }),
      (0x00, 0x55, _, 0x04) => Ok(Item {
        tag,
        name: "Frame Durations (ms) Vector",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x55, _, 0x05) => Ok(Item {
        tag,
        name: "Frame Rescale Slope Vector",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 109" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x20, 0x0d, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_3,
      }),
      (0x20, 0x0d, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_3,
      }),
      (0x20, 0x0d, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS SCALED IMG PIX SPC" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x84) => Ok(Item {
        tag,
        name: "Scaled Image Pixel Spacing",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      _ => Err(()),
    },
    "TOSHIBA COMAPL OOG" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "COMAPL OOG Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "COMAPL OOG Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x33) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "Hologic" => match (g0, g1, e0, e1) {
      (0x00, 0x11, _, 0x00) => Ok(Item {
        tag,
        name: "Hx Questionnaire",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Image Analysis Data in XML",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x00) => Ok(Item {
        tag,
        name: "Encoding Scheme Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x01) => Ok(Item {
        tag,
        name: "P File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x02) => Ok(Item {
        tag,
        name: "P File Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x03) => Ok(Item {
        tag,
        name: "P File Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x04) => Ok(Item {
        tag,
        name: "R File Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x05) => Ok(Item {
        tag,
        name: "R File Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CM VA0  ACQU" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Parameter File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Sequence File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "Sequence File Owner",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "Sequence Description",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "EPI File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Mode File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Convolution Kernel Comment 1",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "Convolution Kernel Comment 2",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "Convolution Kernel Comment 3",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x33) => Ok(Item {
        tag,
        name: "Convolution Kernel Comment 4",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x34) => Ok(Item {
        tag,
        name: "Convolution Kernel Comment 5",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x35) => Ok(Item {
        tag,
        name: "Convolution Kernel Comment 6",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x36) => Ok(Item {
        tag,
        name: "Convolution Kernel Comment 7",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x37) => Ok(Item {
        tag,
        name: "Convolution Kernel Comment 8",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x38) => Ok(Item {
        tag,
        name: "Convolution Kernel Comment 9",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x39) => Ok(Item {
        tag,
        name: "Convolution Kernel Comment 10",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3a) => Ok(Item {
        tag,
        name: "Reading Code RZ1 Comment 1",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3b) => Ok(Item {
        tag,
        name: "Reading Code RZ1 Comment 2",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3c) => Ok(Item {
        tag,
        name: "Reading Code RZ2 Comment 1",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "NUD_PRIVATE" => match (g0, g1, e0, e1) {
      (0x77, 0x77, _, 0x02) => Ok(Item {
        tag,
        name: "Interfile",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x77, 0x77, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Agfa ADC NX" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf5) => Ok(Item {
        tag,
        name: "Cassette Orientation",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf6) => Ok(Item {
        tag,
        name: "Plate Sensitivity",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf7) => Ok(Item {
        tag,
        name: "Plate Erasability",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf8) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xfe) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS SIENET" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Private 3D" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x0a) => Ok(Item {
        tag,
        name: "Threedpr Xres Filtering Enabled",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x20) => Ok(Item {
        tag,
        name: "Private Native Data Stream Array",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x08) => Ok(Item {
        tag,
        name: "Threedpr Low Threshold",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0e) => Ok(Item {
        tag,
        name: "Threedpr Reference Graphic Enabled",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x34) => Ok(Item {
        tag,
        name: "Threedpr Trim Plane Equation",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x1e) => Ok(Item {
        tag,
        name: "Threedpr Num Completed Trim Planes",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x09) => Ok(Item {
        tag,
        name: "Threedpr Image Layout",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x37) => Ok(Item {
        tag,
        name: "Threedpr Arbitrary Crop Dist From Center",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x06) => Ok(Item {
        tag,
        name: "Threedpr Vision Vol Brightness",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x1a) => Ok(Item {
        tag,
        name: "Threedpr Echo Smoothing",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x28) => Ok(Item {
        tag,
        name: "Threedpr Zoom Factor",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x16) => Ok(Item {
        tag,
        name: "Private Native Threed Data Sequence(1)",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x2b) => Ok(Item {
        tag,
        name: "Threedpr Rotation Angle Y",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0f) => Ok(Item {
        tag,
        name: "Threedpr Map Inverted",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x04) => Ok(Item {
        tag,
        name: "Threedpr Transparency",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x38) => Ok(Item {
        tag,
        name: "Threedpr Arbitrary Crop Rotation Matrix",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x42) => Ok(Item {
        tag,
        name: "Threedpr Bondbox Graphic Enabled",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x10) => Ok(Item {
        tag,
        name: "Threedpr Color Stream Display Enabled",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x41) => Ok(Item {
        tag,
        name: "Threedpr Cursor Enabled",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x33) => Ok(Item {
        tag,
        name: "Threedpr Vol Rotation Matrix",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x1b) => Ok(Item {
        tag,
        name: "Threedpr Color Smoothing",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x36) => Ok(Item {
        tag,
        name: "Threedpr Is Arbitrary Crop",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x32) => Ok(Item {
        tag,
        name: "Threedpr Mpr Rotation Matrix",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x21) => Ok(Item {
        tag,
        name: "Threedpr Wall Filter",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x15) => Ok(Item {
        tag,
        name: "Vdb Param Echo 3d Estimate Dimension(2)",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x39) => Ok(Item {
        tag,
        name: "Threedpr Color Gain",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x2d) => Ok(Item {
        tag,
        name: "Threedpr View Translation",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x02) => Ok(Item {
        tag,
        name: "Threedpr Echo Vision Setting",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x31) => Ok(Item {
        tag,
        name: "Threedpr Box Crop Max Point",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x29) => Ok(Item {
        tag,
        name: "Threedpr Color Write Priority",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x11) => Ok(Item {
        tag,
        name: "Threedpr Echo Stream Display Enabled",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x40) => Ok(Item {
        tag,
        name: "Threedpr Color Wall Filter Index",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x24) => Ok(Item {
        tag,
        name: "Threedpr Gain",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x23) => Ok(Item {
        tag,
        name: "Threedpr Baseline",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x18) => Ok(Item {
        tag,
        name: "Vdb Param Echo 3d Estimate Apex Position (2)",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0c) => Ok(Item {
        tag,
        name: "Threedpr Box Outlined Enabled",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x14) => Ok(Item {
        tag,
        name: "Vdb Param Color 3d Estimate Color Offset",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x25) => Ok(Item {
        tag,
        name: "Threedpr Compress",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x2a) => Ok(Item {
        tag,
        name: "Threedpr Rotation Angle X",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x2c) => Ok(Item {
        tag,
        name: "Threedpr Data Voi Center",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0b) => Ok(Item {
        tag,
        name: "Threedpr Echo Twod Chroma Map Enabled",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x12) => Ok(Item {
        tag,
        name: "Vdb Param Color 3d Estimate Scale(2)",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x03) => Ok(Item {
        tag,
        name: "Threedpr Color Vision Setting",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x26) => Ok(Item {
        tag,
        name: "Threedpr Light Brightness",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0d) => Ok(Item {
        tag,
        name: "Threedpr Smoothing Enabled",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x13) => Ok(Item {
        tag,
        name: "Vdb Param Color 3d Estimate Apex Position (1)",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x2e) => Ok(Item {
        tag,
        name: "Threedpr Data Voi Min Point",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x2f) => Ok(Item {
        tag,
        name: "Threedpr Data Voi Max Point",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x1f) => Ok(Item {
        tag,
        name: "Threedpr Depth",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x35) => Ok(Item {
        tag,
        name: "Threedpr Subpage Data Version",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x27) => Ok(Item {
        tag,
        name: "Threedpr Elevation Scale Factor",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x17) => Ok(Item {
        tag,
        name: "Threedpr Basic Vol Brightness",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x30) => Ok(Item {
        tag,
        name: "Threedpr Box Crop Min Point",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS PI ALIGNMENT IMAGE" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x94) => Ok(Item {
        tag,
        name: "Alignment Offset Valid Flag",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CBT PROJECTION GANTRY POSITIONS" => match (g0, g1, e0, e1)
    {
      (0x00, 0x39, _, 0x86) => Ok(Item {
        tag,
        name: "Gantry Positions",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "DIGISCAN IMAGE" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x33) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "CARDIO-D.R. 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "File Location",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "File Size",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Alternate Image Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Image Blanking Shape",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_2,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Image Blanking Left Vertical Edge",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Image Blanking Right Vertical Edge",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Image Blanking Upper Horizontal Edge",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Image Blanking Lower Horizontal Edge",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Center Of Circular Image Blanking",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "Radius Of Circular Image Blanking",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Maximum Frame Size",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x13) => Ok(Item {
        tag,
        name: "Image Sequence Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Standard Edge Enhancement Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Convolution Kernel Size",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Convolution Kernel Coefficients",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "Edge Enhancement Gain",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS SC IMG SID" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x85) => Ok(Item {
        tag,
        name: "Non-RT Image SID",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CBT ARC INCREMENT" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x84) => Ok(Item {
        tag,
        name: "Arc Increment",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "PHILIPS-MR-1" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Chemical Shift Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "Phase Number (Philips)",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Reconstruction Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "Slice Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS FP Alignment Calibration Date / Time" => {
      match (g0, g1, e0, e1) {
        (0x00, 0x39, _, 0x95) => Ok(Item {
          tag,
          name: "Flat Panel Alignment last calibration Date and Time",
          vrs: &[ValueRepresentation::DateTime],
          multiplicity: VM_1,
        }),
        _ => Err(()),
      }
    }
    "SCHICK TECHNOLOGIES - Viewset Creator ID" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x03) => Ok(Item {
        tag,
        name: "Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Mode",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x05) => Ok(Item {
        tag,
        name: "Type",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "QUASAR_INTERNAL_USE" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "WholeBody Spots",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x07) => Ok(Item {
        tag,
        name: "Angle Vector",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0x44) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "Worklist Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x14) => Ok(Item {
        tag,
        name: "Sequence Name",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x1b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x18) => Ok(Item {
        tag,
        name: "Begin Index Vector",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x1a) => Ok(Item {
        tag,
        name: "Raw Time Vector",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x15) => Ok(Item {
        tag,
        name: "Avr RR Time Vector",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x19) => Ok(Item {
        tag,
        name: "End Index Vector",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x03) => Ok(Item {
        tag,
        name: "Time Vector",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0x17) => Ok(Item {
        tag,
        name: "High Limit Vector",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Rate Vector",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x37, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x39) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x16) => Ok(Item {
        tag,
        name: "Low Limit Vector",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x13) => Ok(Item {
        tag,
        name: "Sequence Type",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x37, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x08) => Ok(Item {
        tag,
        name: "Camera Shape",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "Count Vector",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x37, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x1b) => Ok(Item {
        tag,
        name: "Image Type String",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "DR Systems, Inc." => match (g0, g1, e0, e1) {
      (0x44, 0x53, _, 0x01) => Ok(Item {
        tag,
        name: "DR Exam ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x44, 0x53, _, 0x02) => Ok(Item {
        tag,
        name: "DR Image Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x44, 0x53, _, 0x04) => Ok(Item {
        tag,
        name: "DR File Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x44, 0x53, _, 0x05) => Ok(Item {
        tag,
        name: "DR File Suffix",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x44, 0x53, _, 0x0a) => Ok(Item {
        tag,
        name: "DR Annotation Type",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x44, 0x53, _, 0x0c) => Ok(Item {
        tag,
        name: "DR Original Instance UID Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS AE TITLE" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x79) => Ok(Item {
        tag,
        name: "AE Title",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Silhouette Line V1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "Line Name",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x12) => Ok(Item {
        tag,
        name: "Line Name Font",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x13) => Ok(Item {
        tag,
        name: "Line Name Display",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x14) => Ok(Item {
        tag,
        name: "Line Normal Color",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x15) => Ok(Item {
        tag,
        name: "Line Type",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x16) => Ok(Item {
        tag,
        name: "Line Thickness",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x17) => Ok(Item {
        tag,
        name: "Line Style",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x18) => Ok(Item {
        tag,
        name: "Line Dash Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x19) => Ok(Item {
        tag,
        name: "Line Interactivity",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Line Measurement Color",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x21) => Ok(Item {
        tag,
        name: "Line Measurement Font",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x22) => Ok(Item {
        tag,
        name: "Line Measurement Dash Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x23) => Ok(Item {
        tag,
        name: "Line Point Space",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x24) => Ok(Item {
        tag,
        name: "Line Points",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x25) => Ok(Item {
        tag,
        name: "Line Control Point Size",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x26) => Ok(Item {
        tag,
        name: "Line Control Point Space",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x27) => Ok(Item {
        tag,
        name: "Line Control Points",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x28) => Ok(Item {
        tag,
        name: "Line Label",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x29) => Ok(Item {
        tag,
        name: "Line Don't Save",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MeVis eD: Geometry Information" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "GeoScannerOrigin",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x21) => Ok(Item {
        tag,
        name: "SlicesID",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS TABLE OFFSET" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x78) => Ok(Item {
        tag,
        name: "Offset",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      _ => Err(()),
    },
    "AGFA_ADC_Compact" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Data stream from cassette",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Private Identification Code",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Set of destination types",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Set of destination Ids",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Set of processing codes",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Number of series in study",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "Session Number",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "ID station name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Number of images in series",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "Break condition",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "Wait (or Hold) flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x73) => Ok(Item {
        tag,
        name: "ScanRes flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x74) => Ok(Item {
        tag,
        name: "Operation code",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x95) => Ok(Item {
        tag,
        name: "Image quality",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AMI ImageContextExt_01" => match (g0, g1, e0, e1) {
      (0x31, 0x07, _, 0xa0) => Ok(Item {
        tag,
        name: "AMI Window Function (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x07, _, 0xb0) => Ok(Item {
        tag,
        name: "AMI Window Slope (RET)",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Varian Medical Systems VISION 3253" => match (g0, g1, e0, e1) {
      (0x32, 0x53, _, 0x00) => Ok(Item {
        tag,
        name: "XML stream.",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x32, 0x53, _, 0x01) => Ok(Item {
        tag,
        name: "Data length of the XML stream",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x32, 0x53, _, 0x02) => Ok(Item {
        tag,
        name: "Extended Interface Format tag",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-Private-DCI Release 1" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_SENO_02" => match (g0, g1, e0, e1) {
      (0x00, 0x45, _, 0x0c) => Ok(Item {
        tag,
        name: "Integration Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x3f) => Ok(Item {
        tag,
        name: "Vignette Pixel Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x3e) => Ok(Item {
        tag,
        name: "Vignette Pixel Representation",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x21) => Ok(Item {
        tag,
        name: "Mean Of Log Region Gray Levels",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x09) => Ok(Item {
        tag,
        name: "Real Magnification Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x3c) => Ok(Item {
        tag,
        name: "Vignette Bits Stored",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x20) => Ok(Item {
        tag,
        name: "Estimated Anat mean",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x25) => Ok(Item {
        tag,
        name: "Standard Deviation Of Log Region Gray Levels",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x04) => Ok(Item {
        tag,
        name: "AES",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x59) => Ok(Item {
        tag,
        name: "Threshold",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x27) => Ok(Item {
        tag,
        name: "Set Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x64) => Ok(Item {
        tag,
        name: "Segm Threshold",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x06) => Ok(Item {
        tag,
        name: "Stereo angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x1e) => Ok(Item {
        tag,
        name: "Mean Of Offset Gray Levels",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x3d) => Ok(Item {
        tag,
        name: "Vignette High Bit",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x2b) => Ok(Item {
        tag,
        name: "2DLocY",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x14) => Ok(Item {
        tag,
        name: "Pixel Pitch Microns",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x2a) => Ok(Item {
        tag,
        name: "2DLocX",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x65) => Ok(Item {
        tag,
        name: "Detector Entrance Dose",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x28) => Ok(Item {
        tag,
        name: "WindowingType (LINEAR or GAMMA)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x12) => Ok(Item {
        tag,
        name: "Receptor Size Pixels X and Y",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x00, 0x45, _, 0x13) => Ok(Item {
        tag,
        name: "Screen",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x23) => Ok(Item {
        tag,
        name: "Standard Deviation Of Corrected Gray Levels",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x11) => Ok(Item {
        tag,
        name: "Receptor Size cm X and Y",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x45, _, 0x56) => Ok(Item {
        tag,
        name: "Noise Reduction Sensitivity",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x1b) => Ok(Item {
        tag,
        name: "Clinical View",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x22) => Ok(Item {
        tag,
        name: "Standard Deviation Of Raw Gray Levels",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x1d) => Ok(Item {
        tag,
        name: "Mean Of Raw Gray Levels",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x15) => Ok(Item {
        tag,
        name: "Pixel Depth Bits",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x57) => Ok(Item {
        tag,
        name: "Noise Reduction Threshold",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x50) => Ok(Item {
        tag,
        name: "SC Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x3a) => Ok(Item {
        tag,
        name: "Vignette Columns",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x72) => Ok(Item {
        tag,
        name: "Image Crop point",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x45, _, 0x61) => Ok(Item {
        tag,
        name: "Breast ROI Y",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_4,
      }),
      (0x00, 0x45, _, 0x66) => Ok(Item {
        tag,
        name: "Asymmetrical Collimation Information",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x29) => Ok(Item {
        tag,
        name: "Windowing parameters",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x45, _, 0x3b) => Ok(Item {
        tag,
        name: "Vignette Bits Allocated",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x51) => Ok(Item {
        tag,
        name: "SC series UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x1f) => Ok(Item {
        tag,
        name: "Mean Of Corrected Gray Levels",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x62) => Ok(Item {
        tag,
        name: "User Window Center",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x71) => Ok(Item {
        tag,
        name: "STX buffer",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x54) => Ok(Item {
        tag,
        name: "Exponent",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x39) => Ok(Item {
        tag,
        name: "Vignette Rows",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x0d) => Ok(Item {
        tag,
        name: "ROI Origin X and Y",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x52) => Ok(Item {
        tag,
        name: "Raw Diagnostic Low",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x58) => Ok(Item {
        tag,
        name: "mu",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x53) => Ok(Item {
        tag,
        name: "Raw Diagnostic High",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x63) => Ok(Item {
        tag,
        name: "User Window Width",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x55) => Ok(Item {
        tag,
        name: "A Coefficients",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x0b) => Ok(Item {
        tag,
        name: "Senograph Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x60) => Ok(Item {
        tag,
        name: "Breast ROI X",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_4,
      }),
      (0x00, 0x45, _, 0x26) => Ok(Item {
        tag,
        name: "MAO Buffer",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x16) => Ok(Item {
        tag,
        name: "Binning Factor X and Y",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x00, 0x45, _, 0x49) => Ok(Item {
        tag,
        name: "Radiological Thickness",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x45, _, 0x24) => Ok(Item {
        tag,
        name: "Standard Deviation Of Region Gray Levels",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MeVis BreastCare" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x71, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CT VA0  IDE" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "SOMATOM Software Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x30) => Ok(Item {
        tag,
        name: "Data Set Subtype 1",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x31) => Ok(Item {
        tag,
        name: "Data Set Subtype 2",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x32) => Ok(Item {
        tag,
        name: "Data Set Subtype 3",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x33) => Ok(Item {
        tag,
        name: "Data Set Subtype 4",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x34) => Ok(Item {
        tag,
        name: "Data Set Subtype 5",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Directory Text",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x42) => Ok(Item {
        tag,
        name: "Exposure Time Text",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x50) => Ok(Item {
        tag,
        name: "Scan Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x51) => Ok(Item {
        tag,
        name: "Scan Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PHILIPS MR R5.5/PART" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Field of View",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      _ => Err(()),
    },
    "GEMS_DL_PATNT_01" => match (g0, g1, e0, e1) {
      (0x00, 0x11, _, 0x80) => Ok(Item {
        tag,
        name: "Patient Instance Uid",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x81) => Ok(Item {
        tag,
        name: "Last Study Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x82) => Ok(Item {
        tag,
        name: "Patient Repaired",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x83) => Ok(Item {
        tag,
        name: "Lock Demographics",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "EMAGEON JPEG2K INFO" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "QCA" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Analysis Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Segment Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "Pre Catheter size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x13) => Ok(Item {
        tag,
        name: "Pre Reference Diameter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x14) => Ok(Item {
        tag,
        name: "Pre Minimum Lumen Diameter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x15) => Ok(Item {
        tag,
        name: "Pre Average Diameter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x16) => Ok(Item {
        tag,
        name: "Pre Stenosis Length",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x17) => Ok(Item {
        tag,
        name: "Pre Stenosis %",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x18) => Ok(Item {
        tag,
        name: "Pre Geometric Area Reduction %",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x22) => Ok(Item {
        tag,
        name: "Post Catheter Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x23) => Ok(Item {
        tag,
        name: "Post Reference Diameter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x24) => Ok(Item {
        tag,
        name: "Post Minimum Lumen Diameter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x25) => Ok(Item {
        tag,
        name: "Post Average Diameter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x26) => Ok(Item {
        tag,
        name: "Post Stenosis Length",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x27) => Ok(Item {
        tag,
        name: "Post Stenosis %",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x28) => Ok(Item {
        tag,
        name: "Post Geometric Area Reduction %",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "VEPRO VIM 5.0 DATA" => match (g0, g1, e0, e1) {
      (0x00, 0x55, _, 0x10) => Ok(Item {
        tag,
        name: "VIFHEADER2",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x20) => Ok(Item {
        tag,
        name: "VIMDATA2",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x30) => Ok(Item {
        tag,
        name: "ICONDATA2",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x51) => Ok(Item {
        tag,
        name: "VEPRO UID ??",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x55, _, 0x65) => Ok(Item {
        tag,
        name: "??",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "DIDI TO PCR 1.1" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Original Filename",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb3) => Ok(Item {
        tag,
        name: "Key Percentile 2",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa3) => Ok(Item {
        tag,
        name: "Fixed Brightness",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x89, _, 0x10) => Ok(Item {
        tag,
        name: "Stamp Image Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaf) => Ok(Item {
        tag,
        name: "Smooth Gain",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb1) => Ok(Item {
        tag,
        name: "Measure Field 2",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Stitching",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa6) => Ok(Item {
        tag,
        name: "Structure Boost",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8c) => Ok(Item {
        tag,
        name: "Print Marker",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa9) => Ok(Item {
        tag,
        name: "Noise Dose Limit",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xae) => Ok(Item {
        tag,
        name: "Structure Boost Offset",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8f) => Ok(Item {
        tag,
        name: "Processing Category",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xac) => Ok(Item {
        tag,
        name: "Weak Contrast Limit",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Post Mode String",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xaa) => Ok(Item {
        tag,
        name: "Noise Dose Step",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb0) => Ok(Item {
        tag,
        name: "Measure Field 1",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "PCR Print Scale",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Image Header",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "PCR Film Layout Position",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "PCR Print Job End",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Unprocessed Flag",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xad) => Ok(Item {
        tag,
        name: "Strong Contrast Limit",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "PCR Print Report Name",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8a) => Ok(Item {
        tag,
        name: "Collimator X",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa5) => Ok(Item {
        tag,
        name: "Contrast Balance",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa2) => Ok(Item {
        tag,
        name: "Abdomen Brightness",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "RAD Protocol Medium",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x92) => Ok(Item {
        tag,
        name: "Destination Postprocessing Function",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x89) => Ok(Item {
        tag,
        name: "Exposure Index",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb6) => Ok(Item {
        tag,
        name: "Gamma",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Post Data",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb2) => Ok(Item {
        tag,
        name: "Key Percentile 1",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa4) => Ok(Item {
        tag,
        name: "Detail Contrast",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa7) => Ok(Item {
        tag,
        name: "Structure Preference",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8b) => Ok(Item {
        tag,
        name: "Collimator Y",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "RAD Protocol Printer",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb4) => Ok(Item {
        tag,
        name: "Density LUT",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa8) => Ok(Item {
        tag,
        name: "Noise Robustness",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "Route AET",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Ranging Mode",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "PCR No Film Copies",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8e) => Ok(Item {
        tag,
        name: "Acqd Sensitivity",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "Filter Type",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x91) => Ok(Item {
        tag,
        name: "Key Values",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0x8d) => Ok(Item {
        tag,
        name: "RGDV Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb5) => Ok(Item {
        tag,
        name: "Brightness",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xab) => Ok(Item {
        tag,
        name: "Noise Frequency Limit",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CM VA0  COAD" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x3d) => Ok(Item {
        tag,
        name: "Reading Code RZ2 Comment 2",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "DLX_ANNOT_01" => match (g0, g1, e0, e1) {
      (0x70, _, _, 0x04) => Ok(Item {
        tag,
        name: "Text_annotation",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x70, _, _, 0x05) => Ok(Item {
        tag,
        name: "Box",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x70, _, _, 0x07) => Ok(Item {
        tag,
        name: "Arrow end",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      _ => Err(()),
    },
    "SIEMENS SMS-AX  ACQ 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "SH_STPAR",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x0d) => Ok(Item {
        tag,
        name: "Dyna Angles",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_2_TO_N,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x58) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x07) => Ok(Item {
        tag,
        name: "Skin Dose Accumulation",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x16) => Ok(Item {
        tag,
        name: "DR Single Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x1e) => Ok(Item {
        tag,
        name: "EVE",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: ValueMultiplicity {
          min: 8,
          max: Some(8),
        },
      }),
      (0x00, 0x21, _, 0x18) => Ok(Item {
        tag,
        name: "Pressure Data",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "Modality LUT Output Gamma",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Modality LUT Input Gamma",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x15) => Ok(Item {
        tag,
        name: "Harmonization",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x13) => Ok(Item {
        tag,
        name: "Acquisition Zoom",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x17) => Ok(Item {
        tag,
        name: "Source to Isocenter",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Restore Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x22) => Ok(Item {
        tag,
        name: "FD Rows",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x19) => Ok(Item {
        tag,
        name: "ECG Index Array",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x05) => Ok(Item {
        tag,
        name: "Dose",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x1d) => Ok(Item {
        tag,
        name: "K-Factor",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "Footswitch Index",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x24) => Ok(Item {
        tag,
        name: "Table Movement Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0b) => Ok(Item {
        tag,
        name: "Measuring Field",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x06) => Ok(Item {
        tag,
        name: "Skin Dose Percent",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x03) => Ok(Item {
        tag,
        name: "Acquisition Room",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0a) => Ok(Item {
        tag,
        name: "Copper Filter",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x26) => Ok(Item {
        tag,
        name: "Crispy XPI Filter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x04) => Ok(Item {
        tag,
        name: "Current Time Product",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x1a) => Ok(Item {
        tag,
        name: "FD Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x1c) => Ok(Item {
        tag,
        name: "SH_COLPAR",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "Acquisition Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x25) => Ok(Item {
        tag,
        name: "Original Organ Program Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0e) => Ok(Item {
        tag,
        name: "Total Steps",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x57) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: ValueMultiplicity {
          min: 1,
          max: Some(3),
        },
      }),
      (0x00, 0x21, _, 0x14) => Ok(Item {
        tag,
        name: "Dyna Angulation Step Width",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x1b) => Ok(Item {
        tag,
        name: "SH_ZOOM",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x08) => Ok(Item {
        tag,
        name: "Skin Dose Rate",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0f) => Ok(Item {
        tag,
        name: "Dyna X-Ray Info",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_3_TO_N,
      }),
      (0x00, 0x21, _, 0x23) => Ok(Item {
        tag,
        name: "FD Columns",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x1f) => Ok(Item {
        tag,
        name: "Total Scene Time",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_3,
      }),
      (0x00, 0x21, _, 0x21) => Ok(Item {
        tag,
        name: "Stand Movement Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x09) => Ok(Item {
        tag,
        name: "Impac Filename",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Acquisition Mode",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0c) => Ok(Item {
        tag,
        name: "Post Blanking Circle",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_3,
      }),
      _ => Err(()),
    },
    "SIEMENS MEDCOM OOG" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "MedCom OOG Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "MedCom OOG Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "MedCom OOG Info",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI Release 1" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Comments",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x15) => Ok(Item {
        tag,
        name: "UID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Data Object Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x41) => Ok(Item {
        tag,
        name: "Data Object Subtype",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "Organ",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x15) => Ok(Item {
        tag,
        name: "Allergy Indication",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x20) => Ok(Item {
        tag,
        name: "Pregnancy",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "Compression Algorithm",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_RELA_01" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x84) => Ok(Item {
        tag,
        name: "Auto window/level level",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x5d) => Ok(Item {
        tag,
        name: "Tag Spacing",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x58) => Ok(Item {
        tag,
        name: "Overlaps",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x4e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x92) => Ok(Item {
        tag,
        name: "Biopsy T location",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x4f) => Ok(Item {
        tag,
        name: "Locations in acquisition",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x90) => Ok(Item {
        tag,
        name: "Tube focal spot position",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x07) => Ok(Item {
        tag,
        name: "Series Record checksum",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x4a) => Ok(Item {
        tag,
        name: "Anatomical reference for scout",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x18) => Ok(Item {
        tag,
        name: "Genesis version - Now",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x51) => Ok(Item {
        tag,
        name: "Rotation from source x rot",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Graphically prescribed",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x93) => Ok(Item {
        tag,
        name: "Biopsy ref location",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x35) => Ok(Item {
        tag,
        name: "Series from which prescribed",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x81) => Ok(Item {
        tag,
        name: "Auto window/level alpha",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Table start location",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x83) => Ok(Item {
        tag,
        name: "Auto window/level window",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x54) => Ok(Item {
        tag,
        name: "Image position",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_3,
      }),
      (0x00, 0x21, _, 0x53) => Ok(Item {
        tag,
        name: "Rotation from source z rot",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x19) => Ok(Item {
        tag,
        name: "Acq recon record checksum",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x05) => Ok(Item {
        tag,
        name: "Genesis Version - now",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x5e) => Ok(Item {
        tag,
        name: "RTIA_timer",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x91) => Ok(Item {
        tag,
        name: "Biopsy position",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x5f) => Ok(Item {
        tag,
        name: "Fps",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x5c) => Ok(Item {
        tag,
        name: "Tagging Orientation",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x52) => Ok(Item {
        tag,
        name: "Rotation from source y rot",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x03) => Ok(Item {
        tag,
        name: "Series from which Prescribed",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x56) => Ok(Item {
        tag,
        name: "Num 3D slabs",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x55) => Ok(Item {
        tag,
        name: "Image orientation",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_6,
      }),
      (0x00, 0x21, 0x10, _) => Ok(Item {
        tag,
        name: "Private Element Creator",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x57) => Ok(Item {
        tag,
        name: "Locs per 3D slab",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x5b) => Ok(Item {
        tag,
        name: "Tagging Flip Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x36) => Ok(Item {
        tag,
        name: "Image from which prescribed",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x82) => Ok(Item {
        tag,
        name: "Auto window/level beta",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x59) => Ok(Item {
        tag,
        name: "Image Filtering 0.5/0.2T",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x37) => Ok(Item {
        tag,
        name: "Screen Format",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x5a) => Ok(Item {
        tag,
        name: "Diffusion direction",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "HOLOGIC, Inc." => match (g0, g1, e0, e1) {
      (0x7f, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x46) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x7e, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x7f, 0x01, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x44) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x7e, 0x01, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x7e, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x37) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x33) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x35) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x7e, 0x01, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x7e, 0x01, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x85) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x7f, 0x01, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x7f, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x45) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "DLX_SERIE_01" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x19) => Ok(Item {
        tag,
        name: "X Zoom",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1d) => Ok(Item {
        tag,
        name: "Side Mark",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1e) => Ok(Item {
        tag,
        name: "Percent Landscape",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Angle Value 3",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "Image chain FWHM psf mm max",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Angle Label 2",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Adx Exam Name",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1f) => Ok(Item {
        tag,
        name: "Adx Exposure Duration",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Angle Label 3",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "Table Lateral Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Adx Injector Delay",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Intercept LV Regression",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "Lambda cm Pincushion Distortion",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1a) => Ok(Item {
        tag,
        name: "Y Zoom",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Adx Auto Inject",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0a) => Ok(Item {
        tag,
        name: "Adx Record View",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "Adx Camera Rotation Enable",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "Image chain FWHM psf mm min",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x17) => Ok(Item {
        tag,
        name: "User Spatial Filter Strength",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "User Zoom Factor",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "Adx Patient Size",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x16) => Ok(Item {
        tag,
        name: "Adx Reverse Sweep",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "Adx Procedure Name",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Angle Value 2",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Angle Value 1",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "Table Longitudinal Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1c) => Ok(Item {
        tag,
        name: "Adx Dose",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Ip Address",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "Slope LV Regression",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "Adx Acq Mode",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "Table Vertical Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Angle Label 1",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1b) => Ok(Item {
        tag,
        name: "Adx Focus",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PHILIPS MR/PART 6" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CALIBRATION DATE" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x81) => Ok(Item {
        tag,
        name: "Calibration Date",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips MR Imaging DD 002" => match (g0, g1, e0, e1) {
      (0x20, 0x05, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x37) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x38) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x39) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x44) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherWordString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x47) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x99) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PHILIPS MR" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "SPI Release",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PHILIPS MR/PART" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x61) => Ok(Item {
        tag,
        name: "Row Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0xc3) => Ok(Item {
        tag,
        name: "Scan Resolution",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xcb) => Ok(Item {
        tag,
        name: "Foldover Direction Coronal",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Number of Chemical Shifts",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xce) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd6) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x19) => Ok(Item {
        tag,
        name: "Repetition Time FFE",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd9) => Ok(Item {
        tag,
        name: "EPI Factor",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "Echo Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x66) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x95) => Ok(Item {
        tag,
        name: "Spectral Presaturation With Inversion Recovery",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6a) => Ok(Item {
        tag,
        name: "Cardiac Frequency",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0f) => Ok(Item {
        tag,
        name: "Number of Slices",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xfa) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x94) => Ok(Item {
        tag,
        name: "Magnetization Transfer Contrast",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Dynamic Scan Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6b) => Ok(Item {
        tag,
        name: "Inversion Delay",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x55) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd4) => Ok(Item {
        tag,
        name: "Artifact Reduction",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd2) => Ok(Item {
        tag,
        name: "Water Fat Shift",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0x59) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xca) => Ok(Item {
        tag,
        name: "Foldover Direction Sagittal",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe1) => Ok(Item {
        tag,
        name: "Prepulse Delay",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "CC Angulation",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x65) => Ok(Item {
        tag,
        name: "Repetition Time IR",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Image Type",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd7) => Ok(Item {
        tag,
        name: "Scan Percentage",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x60) => Ok(Item {
        tag,
        name: "Number of Rows In Object",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6d) => Ok(Item {
        tag,
        name: "Gate Width",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Patient Orientation 1",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd8) => Ok(Item {
        tag,
        name: "Halfscan",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x35) => Ok(Item {
        tag,
        name: "Chemical Shift Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x97) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x31) => Ok(Item {
        tag,
        name: "Patient Reference ID",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Slice Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe0) => Ok(Item {
        tag,
        name: "Percentage of Scan Completed",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Field of View",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x58) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xfc) => Ok(Item {
        tag,
        name: "Resonance Frequency",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "CC Offcenter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xd5) => Ok(Item {
        tag,
        name: "Slice Thickness",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xda) => Ok(Item {
        tag,
        name: "Turbo Factor",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "AP Angulation",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf8) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xcf) => Ok(Item {
        tag,
        name: "Number of Echoes",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x64) => Ok(Item {
        tag,
        name: "Repetition Time SE",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xf9) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Slice Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xfb) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1a) => Ok(Item {
        tag,
        name: "FFE Flip Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Echo Times",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x0a) => Ok(Item {
        tag,
        name: "Slice Orientation",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x29, _, 0xc4) => Ok(Item {
        tag,
        name: "Field of View",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0d) => Ok(Item {
        tag,
        name: "AP Offcenter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x56) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x15) => Ok(Item {
        tag,
        name: "Dynamic Study",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x18) => Ok(Item {
        tag,
        name: "Heartbeat Interval",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc0) => Ok(Item {
        tag,
        name: "Trigger Delay Times",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x57) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x09) => Ok(Item {
        tag,
        name: "Patient Orientation",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x85) => Ok(Item {
        tag,
        name: "Number of Samples",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0b) => Ok(Item {
        tag,
        name: "LR Offcenter",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xdb) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "LR Angulation",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xc8) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x00) => Ok(Item {
        tag,
        name: "Scan Date",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x62) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xf6) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf7) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb6) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Stack Type",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x69) => Ok(Item {
        tag,
        name: "Number of Phases",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x99) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xcc) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0xb4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xe3) => Ok(Item {
        tag,
        name: "Phase Contrast Velocity",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "Dynamic Scan Time Begin",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6c) => Ok(Item {
        tag,
        name: "Gate Delay",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xcd) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x45) => Ok(Item {
        tag,
        name: "Reconstruction Resolution",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xd0) => Ok(Item {
        tag,
        name: "Scan Resolution",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x40) => Ok(Item {
        tag,
        name: "Phase Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x21) => Ok(Item {
        tag,
        name: "Slice Gap",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x6e) => Ok(Item {
        tag,
        name: "Trigger Delay Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x96) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "Chemical Shift",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xc9) => Ok(Item {
        tag,
        name: "Foldover Direction Transverse",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x84) => Ok(Item {
        tag,
        name: "Number of Rows",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xf0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x8d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x63) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x1b) => Ok(Item {
        tag,
        name: "Number of Scans",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x67) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xb5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      _ => Err(()),
    },
    "GEMS_ACRQA_2.0 BLOCK3" => match (g0, g1, e0, e1) {
      (0x00, 0x23, _, 0x00) => Ok(Item {
        tag,
        name: "CR DRE",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x10) => Ok(Item {
        tag,
        name: "CR DRN",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x20) => Ok(Item {
        tag,
        name: "CR ORE",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x30) => Ok(Item {
        tag,
        name: "CR ORN",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x40) => Ok(Item {
        tag,
        name: "CR ORD",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x50) => Ok(Item {
        tag,
        name: "CR Cassette Size",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x60) => Ok(Item {
        tag,
        name: "CR Machine ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x70) => Ok(Item {
        tag,
        name: "CR Machine Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x80) => Ok(Item {
        tag,
        name: "CR Technician Code",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x90) => Ok(Item {
        tag,
        name: "CR Energy Subtraction Parameters",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0xf0) => Ok(Item {
        tag,
        name: "CR Distribution Code",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0xff) => Ok(Item {
        tag,
        name: "CR Shutters Applied",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 113" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x0d, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x1b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x1f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Kodak Image Information" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Viewing Protocol" => match (g0, g1, e0, e1) {
      (0x00, 0x65, _, 0x93) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ADAC_IMG" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Ver200 ADAC Pegasys File Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "ADAC Header Signature",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_2,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Number of ADAC Headers",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "ADAC Header/Image Sizes",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "ADAC Pegasys Headers",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "Ver200 Number of ADAC Headers",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "Ver200 ADAC Header/Image Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "Ver200 ADAC Pegasys Headers",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x43, _, 0x00) => Ok(Item {
        tag,
        name: "Cardiac Stress State",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x70, 0x43, _, 0x10) => Ok(Item {
        tag,
        name: "Philips NM Private Group",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 039" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0d, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips RAD Imaging DD 001" => match (g0, g1, e0, e1) {
      (0x20, 0x0b, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x2a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x2b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x2c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x2d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x3b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x47) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x4c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x4d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x4f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0x20, 0x0b, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "KINETDX" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0xa5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa8) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xaa) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PHILIPS MR/PART 7" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "1.2.840.113681" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "CR Image Params Common",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "CR Image IP Params Single",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "CR Image IP Params Left",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "CR Image IP Params Right",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_CTHD_01" => match (g0, g1, e0, e1) {
      (0x00, 0x33, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_0039" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x95) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips MR Imaging DD 001" => match (g0, g1, e0, e1) {
      (0x20, 0x05, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x20) => Ok(Item {
        tag,
        name: "Number of Chemical Shift",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xc0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x81) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x69) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xa7) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x38) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xb0) => Ok(Item {
        tag,
        name: "Diffusion Direction RL",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x2a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x55) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x6b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x78) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xa4) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x1f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x53) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x7e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x54) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x05) => Ok(Item {
        tag,
        name: "Synergy Reconstruction Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x61) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x2e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x9f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x58) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x4f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x7a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x4d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x57) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x83) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x49) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x6d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x84) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x2f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xb1) => Ok(Item {
        tag,
        name: "Diffusion Direction AP",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x66) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x6c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x64) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x4b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x6f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x5a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x6e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x36) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x76) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x7b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x70) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x68) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x72) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x1b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x2d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x9e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x79) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xa3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xb2) => Ok(Item {
        tag,
        name: "Diffusion Direction FH",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x5b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x5d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x3b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xa5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x85) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xa2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x33) => Ok(Item {
        tag,
        name: "Acquisition Duration",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x17) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x3a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x73) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x5f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x3e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x05, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xa8) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xa6) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x39) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x86) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x30) => Ok(Item {
        tag,
        name: "Repetition Time",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x37) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x10) => Ok(Item {
        tag,
        name: "Window Width",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x5e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x4c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x80) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x56) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x6a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xa9) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x2c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x3d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x63) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x2b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x59) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x65) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x75) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x4e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x3c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x0f) => Ok(Item {
        tag,
        name: "Window Center",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x5c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x74) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x67) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x4a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x35) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xa1) => Ok(Item {
        tag,
        name: "Syncra Scan Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "1.2.840.113708.794.1.1.2.0" => match (g0, g1, e0, e1) {
      (0x00, 0x87, _, 0x10) => Ok(Item {
        tag,
        name: "Media Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x87, _, 0x20) => Ok(Item {
        tag,
        name: "Media Location",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x87, _, 0x30) => Ok(Item {
        tag,
        name: "Storage File ID",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x87, _, 0x40) => Ok(Item {
        tag,
        name: "Study or Image Size in MB",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x87, _, 0x50) => Ok(Item {
        tag,
        name: "Estimated Retrieve Time",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AMI Annotations_01" => match (g0, g1, e0, e1) {
      (0x31, 0x01, _, 0x10) => Ok(Item {
        tag,
        name: "AMI Annotation Sequence (RET)",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MEDCOM HEADER" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "MedCom Header Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "MedCom Header Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "MedCom Header Info",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "MedCom History Information",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "PMTF Information 1",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "PMTF Information 2",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x33) => Ok(Item {
        tag,
        name: "PMTF Information 3",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "PMTF Information 4",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x35) => Ok(Item {
        tag,
        name: "PMTF Information 5",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x40) => Ok(Item {
        tag,
        name: "Application Header Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x41) => Ok(Item {
        tag,
        name: "Application Header Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x42) => Ok(Item {
        tag,
        name: "Application Header ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x43) => Ok(Item {
        tag,
        name: "Application Header Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x44) => Ok(Item {
        tag,
        name: "Application Header Info",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "Workflow Control Flags",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: ValueMultiplicity {
          min: 8,
          max: Some(8),
        },
      }),
      (0x00, 0x29, _, 0x51) => Ok(Item {
        tag,
        name: "Arch. Management Flag Keep Online",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x52) => Ok(Item {
        tag,
        name: "Arch. Mgmnt Flag Do Not Archive",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x53) => Ok(Item {
        tag,
        name: "Image Location Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x54) => Ok(Item {
        tag,
        name: "Estimated Retrieve Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x55) => Ok(Item {
        tag,
        name: "Data Size of Retrieved Images",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x70) => Ok(Item {
        tag,
        name: "Siemens Link Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x71) => Ok(Item {
        tag,
        name: "Referenced Tag",
        vrs: &[ValueRepresentation::AttributeTag],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x72) => Ok(Item {
        tag,
        name: "Referenced Tag Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x73) => Ok(Item {
        tag,
        name: "Referenced Value Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x74) => Ok(Item {
        tag,
        name: "Referenced Object Device Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x75) => Ok(Item {
        tag,
        name: "Referenced Object Device Location",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x76) => Ok(Item {
        tag,
        name: "Referenced Object ID",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "TOSHIBA_MEC_1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xf1, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xf1, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xf1, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x7f, 0xf1, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS ICC MATRIX" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x82) => Ok(Item {
        tag,
        name: "Image Center in Image Coordinates",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      _ => Err(()),
    },
    "SPI-P-Private_ICS Release 1;2" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xa1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xa2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xa3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xa5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xa6) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xd9) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PAPYRUS" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Original File Name",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Original File Location",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x18) => Ok(Item {
        tag,
        name: "Data Set Identifier",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x00) => Ok(Item {
        tag,
        name: "Papyrus Comments",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0x10) => Ok(Item {
        tag,
        name: "Folder Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x11) => Ok(Item {
        tag,
        name: "Patient Folder Data Set ID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x20) => Ok(Item {
        tag,
        name: "Folder Name",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x30) => Ok(Item {
        tag,
        name: "Creation Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x32) => Ok(Item {
        tag,
        name: "Creation Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x34) => Ok(Item {
        tag,
        name: "Modified Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x36) => Ok(Item {
        tag,
        name: "Modified Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x40) => Ok(Item {
        tag,
        name: "Owner Name",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0x50) => Ok(Item {
        tag,
        name: "Folder Status",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x60) => Ok(Item {
        tag,
        name: "Number of Images",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0x62) => Ok(Item {
        tag,
        name: "Number of Other",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x41, _, 0xa0) => Ok(Item {
        tag,
        name: "External Folder Element DSID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0xa1) => Ok(Item {
        tag,
        name: "External Folder Element Data Set Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0xa2) => Ok(Item {
        tag,
        name: "External Folder Element File Location",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0xa3) => Ok(Item {
        tag,
        name: "External Folder Element Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0xb0) => Ok(Item {
        tag,
        name: "Internal Folder Element DSID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0xb1) => Ok(Item {
        tag,
        name: "Internal Folder Element Data Set Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0xb2) => Ok(Item {
        tag,
        name: "Internal Offset To Data Set",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x41, _, 0xb3) => Ok(Item {
        tag,
        name: "Internal Offset To Image",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "GEMS_GNHD_01" => match (g0, g1, e0, e1) {
      (0x00, 0x33, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x33, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PMTF INFORMATION DATA" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "PMTF Information 1",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "PMTF Information 2",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x33) => Ok(Item {
        tag,
        name: "PMTF Information 3",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "PMTF Information 4",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x89) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x70, 0x15, _, 0x73) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AMI Sequence Annotations_01" => match (g0, g1, e0, e1) {
      (0x31, 0x03, _, 0x10) => Ok(Item {
        tag,
        name: "AMI Annotation Sequence (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x20) => Ok(Item {
        tag,
        name: "AMI Annotation UID (RET)",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x30) => Ok(Item {
        tag,
        name: "AMI Annotation Color (RET)",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x40) => Ok(Item {
        tag,
        name: "FontSize",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x50) => Ok(Item {
        tag,
        name: "AMI Annotation Line Style (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x60) => Ok(Item {
        tag,
        name: "AMI Annotation Elements (RET)",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x70) => Ok(Item {
        tag,
        name: "AMI Annotation Label (RET)",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x80) => Ok(Item {
        tag,
        name: "AMI Annotation Creator (RET)",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x90) => Ok(Item {
        tag,
        name: "AMI Annotation Modifiers (RET)",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0xa0) => Ok(Item {
        tag,
        name: "AMI Annotation Creation Date (RET)",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0xb0) => Ok(Item {
        tag,
        name: "AMI Annotation Creation Time (RET)",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0xc0) => Ok(Item {
        tag,
        name: "AMI Annotation Modification Dates (RET)",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0xd0) => Ok(Item {
        tag,
        name: "AMI Annotation Modification Times (RET)",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0xe0) => Ok(Item {
        tag,
        name: "AMI Annotation Frame Number (RET)",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips US Imaging DD 043" => match (g0, g1, e0, e1) {
      (0x20, 0x0d, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips MR Imaging DD 005" => match (g0, g1, e0, e1) {
      (0x20, 0x05, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x38) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x2a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x1d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x1f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x2e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x4f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x44) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x4d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x25) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x49) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x2f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_3,
      }),
      (0x20, 0x05, _, 0x16) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x4b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x36) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x3f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x1b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x1a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x2d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_3,
      }),
      (0x20, 0x05, _, 0x48) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x3b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x13) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x46) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x3a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x1c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x3e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x45) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x47) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x24) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x39) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x37) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x43) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x4c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x15) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x2c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x3d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x2b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x4e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x3c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x4a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x35) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "LODOX_STATSCAN" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MEDIFACE" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x40) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x41) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x42) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x51) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x60) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xf1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xf2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Window Center",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "Window Width",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x21) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_STDY_01" => match (g0, g1, e0, e1) {
      (0x00, 0x23, 0x10, _) => Ok(Item {
        tag,
        name: "Private Element Creator",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x01) => Ok(Item {
        tag,
        name: "Number of series in Study",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x02) => Ok(Item {
        tag,
        name: "Number of unarchived Series",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x10) => Ok(Item {
        tag,
        name: "Reference image field",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x50) => Ok(Item {
        tag,
        name: "Summary image",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x70) => Ok(Item {
        tag,
        name: "Start time(secs) in first axial",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x74) => Ok(Item {
        tag,
        name: "No. of updates to header",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x7d) => Ok(Item {
        tag,
        name: "Indicates study has complete info (DICOM/genesis)",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ObjectModel (ID, Version, Place, PlaceDescription)" => {
      match (g0, g1, e0, e1) {
        (0x81, 0x01, _, 0x00) => Ok(Item {
          tag,
          name: "ID",
          vrs: &[ValueRepresentation::LongString],
          multiplicity: VM_1,
        }),
        (0x81, 0x01, _, 0x10) => Ok(Item {
          tag,
          name: "Version",
          vrs: &[ValueRepresentation::LongString],
          multiplicity: VM_1,
        }),
        _ => Err(()),
      }
    }
    "Siemens: Thorax/Multix FD Lab Settings" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Internal Value",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x02) => Ok(Item {
        tag,
        name: "Total Area Dose Product",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x05) => Ok(Item {
        tag,
        name: "Cassette Image",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Table Object Distance",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "Table Detector Distance",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Ortho Step Distance",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x08) => Ok(Item {
        tag,
        name: "Auto Window Flag",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x09) => Ok(Item {
        tag,
        name: "Auto Window Center",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0a) => Ok(Item {
        tag,
        name: "Auto Window Width",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x0b) => Ok(Item {
        tag,
        name: "Filter ID",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x14) => Ok(Item {
        tag,
        name: "Anatomic Correct View",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x15) => Ok(Item {
        tag,
        name: "Auto Window Shift",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x16) => Ok(Item {
        tag,
        name: "Auto Window Expansion",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x17) => Ok(Item {
        tag,
        name: "System Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "Anatomic Sort Number",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x31) => Ok(Item {
        tag,
        name: "Acquisition Sort Number",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Applicare/RadWorks/Version 6.0/Summary" => match (g0, g1, e0, e1) {
      (0x31, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "Receive Origin Description",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "Receive Origin Description",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS CBT ROTATION DIRECTION" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x85) => Ok(Item {
        tag,
        name: "Gantry Rotation Direction",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "SPI-P Release 2;1" => match (g0, g1, e0, e1) {
      (0x00, 0x11, _, 0x18) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x0d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Image (ID, Version, Size, Dump, GUID)" => match (g0, g1, e0, e1) {
      (0x80, 0x03, _, 0x00) => Ok(Item {
        tag,
        name: "ID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x80, 0x03, _, 0x10) => Ok(Item {
        tag,
        name: "Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x80, 0x03, _, 0x20) => Ok(Item {
        tag,
        name: "Size",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x80, 0x03, _, 0x30) => Ok(Item {
        tag,
        name: "Dump",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x80, 0x03, _, 0x40) => Ok(Item {
        tag,
        name: "GUID",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "DLX_LKUP_01" => match (g0, g1, e0, e1) {
      (0x60, _, _, 0x01) => Ok(Item {
        tag,
        name: "Gray Palette color lookup table descriptor",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_3,
      }),
      (0x60, _, _, 0x02) => Ok(Item {
        tag,
        name: "Gray Palette color lookup table data",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SHS MagicView 300" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Zoom Factor",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Pan Factor X",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x03) => Ok(Item {
        tag,
        name: "Pan Factor Y",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x04) => Ok(Item {
        tag,
        name: "NmPalette",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-XSB-DCI Release 1" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Video Beam Boost",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Channel Generating Video Sync",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x12) => Ok(Item {
        tag,
        name: "Video Gain",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x13) => Ok(Item {
        tag,
        name: "Video Offset",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "RTD Data Compression Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "2.16.840.1.114059.1.1.6.1.50.1" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Description",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x21) => Ok(Item {
        tag,
        name: "Orientation",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x22) => Ok(Item {
        tag,
        name: "Parameter 1",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x23) => Ok(Item {
        tag,
        name: "Parameter 2",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x24) => Ok(Item {
        tag,
        name: "Teeth",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x25) => Ok(Item {
        tag,
        name: "Jaw",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x26) => Ok(Item {
        tag,
        name: "Quadrant",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x27) => Ok(Item {
        tag,
        name: "CRC",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Sound Technologies" => match (g0, g1, e0, e1) {
      (0xf0, 0x01, _, 0x00) => Ok(Item {
        tag,
        name: "Patient Species",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "Patient Breed",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "Patient Category Size",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x03) => Ok(Item {
        tag,
        name: "Patient Sex Extended (including spay/neuter)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x04) => Ok(Item {
        tag,
        name: "Image View",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x05) => Ok(Item {
        tag,
        name: "Anatomy Imaged",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x06) => Ok(Item {
        tag,
        name: "Image enhancements",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x07) => Ok(Item {
        tag,
        name: "Detector Settings",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x08) => Ok(Item {
        tag,
        name: "Application Version",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x09) => Ok(Item {
        tag,
        name: "Image Laterality Extended",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x0a) => Ok(Item {
        tag,
        name: "Client Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x0b) => Ok(Item {
        tag,
        name: "Reference Study Instance Uid",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x0c) => Ok(Item {
        tag,
        name: "Reference Series Instance Uid",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x0d) => Ok(Item {
        tag,
        name: "Exam Ref Id",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x0e) => Ok(Item {
        tag,
        name: "Physician Of Record Address",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x0f) => Ok(Item {
        tag,
        name: "Physician Of Record Phone Numbers",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x10) => Ok(Item {
        tag,
        name: "Reason For Study",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x11) => Ok(Item {
        tag,
        name: "Protocol",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x12) => Ok(Item {
        tag,
        name: "CaptureInputType",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x13) => Ok(Item {
        tag,
        name: "Exam Complaint",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x14) => Ok(Item {
        tag,
        name: "Exam Web Code",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x15) => Ok(Item {
        tag,
        name: "Exam Category",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x16) => Ok(Item {
        tag,
        name: "Exam Diagnosis",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x17) => Ok(Item {
        tag,
        name: "Exam Created By",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x18) => Ok(Item {
        tag,
        name: "Exam Created By Group",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x19) => Ok(Item {
        tag,
        name: "Exam Required By DateTime",
        vrs: &[ValueRepresentation::DateTime],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x1a) => Ok(Item {
        tag,
        name: "Capture Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x1b) => Ok(Item {
        tag,
        name: "Telemed Exam ID",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x1c) => Ok(Item {
        tag,
        name: "Exam Created By Guid",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0xf0, 0x01, _, 0x1d) => Ok(Item {
        tag,
        name: "Client Name Guid",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS MED OCS REFERENCE IMAGE" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x76) => Ok(Item {
        tag,
        name: "Reference Image",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SPI-P-Private-DiDi Release 1" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Post Mode String",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x01) => Ok(Item {
        tag,
        name: "Post Data",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Image Header",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "SCPreName",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "SCPostNo",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "SCSOPInstanceUID",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "SCCreationDate",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "SCProcessingCategory",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "SCPostMethod",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "SCPostString",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "SCPostString2",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "SCMode",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x29) => Ok(Item {
        tag,
        name: "SCStCommit",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2a) => Ok(Item {
        tag,
        name: "SCExported",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2b) => Ok(Item {
        tag,
        name: "SCPrinted",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2c) => Ok(Item {
        tag,
        name: "SCOperator",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "SCPreName",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "SCPreType",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS SMS-AX  QUANT 1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x23, _, 0x00) => Ok(Item {
        tag,
        name: "Horizontal Calibration Pixel Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x23, _, 0x01) => Ok(Item {
        tag,
        name: "Vertical Calibration Pixel Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x23, _, 0x02) => Ok(Item {
        tag,
        name: "Calibration Object",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x03) => Ok(Item {
        tag,
        name: "Calibration Object Size",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x04) => Ok(Item {
        tag,
        name: "Calibration Method",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x05) => Ok(Item {
        tag,
        name: "Filename",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x06) => Ok(Item {
        tag,
        name: "Frame Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x23, _, 0x07) => Ok(Item {
        tag,
        name: "Calibration Factor Multiplicity",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_2,
      }),
      (0x00, 0x23, _, 0x08) => Ok(Item {
        tag,
        name: "Calibration TOD Value",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "INFINITT_FMX" => match (g0, g1, e0, e1) {
      (0x00, 0x15, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x15, _, 0x11) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AMI ImageTransform_01" => match (g0, g1, e0, e1) {
      (0x31, 0x07, _, 0x10) => Ok(Item {
        tag,
        name: "AMI Transformation Matrix (RET)",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x31, 0x07, _, 0x20) => Ok(Item {
        tag,
        name: "AMI Center Offset (RET)",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x31, 0x07, _, 0x30) => Ok(Item {
        tag,
        name: "AMI Magnification (RET)",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x31, 0x07, _, 0x40) => Ok(Item {
        tag,
        name: "AMI Magnification Type (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x07, _, 0x50) => Ok(Item {
        tag,
        name: "AMI Displayed Area (RET)",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x31, 0x07, _, 0x60) => Ok(Item {
        tag,
        name: "AMI Calibration Factor (RET)",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_CT_VES_01" => match (g0, g1, e0, e1) {
      (0x00, 0x51, _, 0x01) => Ok(Item {
        tag,
        name: "CTVESSequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SEGAMI__MEMO" => match (g0, g1, e0, e1) {
      (0x00, 0x35, _, 0x97) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x35, _, 0x98) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "ATL HDI V1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x30) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x50) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x60) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x70) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x80) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x90) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x91) => Ok(Item {
        tag,
        name: "Private",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x30) => Ok(Item {
        tag,
        name: "Loop Mode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "Trigger mode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "Number of Loops",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x33) => Ok(Item {
        tag,
        name: "Loop Indexes",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "Loop Heart Rates",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x35) => Ok(Item {
        tag,
        name: "Medications",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS CT VA0  GEN" => match (g0, g1, e0, e1) {
      (0x00, 0x21, _, 0xa1) => Ok(Item {
        tag,
        name: "Image Filter Label",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "Reconstruction Algorithm Set",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x30) => Ok(Item {
        tag,
        name: "Tube Position",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x4a) => Ok(Item {
        tag,
        name: "VOI Stop Slice",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x51) => Ok(Item {
        tag,
        name: "Vector Row Step",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x49) => Ok(Item {
        tag,
        name: "VOI Start Slice",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x45) => Ok(Item {
        tag,
        name: "VOI Start Row",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x50) => Ok(Item {
        tag,
        name: "Vector Start Row",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa5) => Ok(Item {
        tag,
        name: "Reference Data Set 1",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x75) => Ok(Item {
        tag,
        name: "Light Brightness",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "Number of Virtual Channels",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x11) => Ok(Item {
        tag,
        name: "Start Angle",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x44) => Ok(Item {
        tag,
        name: "IRS Data Number",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x34) => Ok(Item {
        tag,
        name: "Correction Factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x32) => Ok(Item {
        tag,
        name: "Length of Topogram",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x10) => Ok(Item {
        tag,
        name: "Rotation Angle",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "Regeneration Software Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x60) => Ok(Item {
        tag,
        name: "Range Type Code",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa7) => Ok(Item {
        tag,
        name: "Window Program Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa4) => Ok(Item {
        tag,
        name: "Exemplary Element 3",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Master Control Mask",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x20) => Ok(Item {
        tag,
        name: "Scan",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa3) => Ok(Item {
        tag,
        name: "Exemplary Element 2",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x53) => Ok(Item {
        tag,
        name: "Vector Column Step",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x48) => Ok(Item {
        tag,
        name: "VOI Stop Column",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x70) => Ok(Item {
        tag,
        name: "Object Orientation",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x7a) => Ok(Item {
        tag,
        name: "Overlay Threshold",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x10) => Ok(Item {
        tag,
        name: "Source Side Collimator Aperture",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Generator Voltage current",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa0) => Ok(Item {
        tag,
        name: "Field of Interest",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x11) => Ok(Item {
        tag,
        name: "Detector Side Collimator Aperture",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x75) => Ok(Item {
        tag,
        name: "Number of Bytes",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x52) => Ok(Item {
        tag,
        name: "Vector Start Column",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x47) => Ok(Item {
        tag,
        name: "VOI Start Column",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x85) => Ok(Item {
        tag,
        name: "Multiscan Reconstruction Width",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x71) => Ok(Item {
        tag,
        name: "Reading Code",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0xa2) => Ok(Item {
        tag,
        name: "Exemplary Element 1",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x62) => Ok(Item {
        tag,
        name: "Reference Type Code",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x7b) => Ok(Item {
        tag,
        name: "Surface Threshold",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0xa6) => Ok(Item {
        tag,
        name: "Reference Data Set 2",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x74) => Ok(Item {
        tag,
        name: "Number of Projections",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x72) => Ok(Item {
        tag,
        name: "Light Orientation",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "Number of Reading",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x7c) => Ok(Item {
        tag,
        name: "Grey Scale Threshold",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x46) => Ok(Item {
        tag,
        name: "VOI Stop Row",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Exposure Time current",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "Generator Power current",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x45) => Ok(Item {
        tag,
        name: "IRS Data Length",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "Processing Mask",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x21, _, 0x36) => Ok(Item {
        tag,
        name: "Maximum Table Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x76) => Ok(Item {
        tag,
        name: "Light Contrast",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x21, _, 0x40) => Ok(Item {
        tag,
        name: "Table Move Direction Code",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x88) => Ok(Item {
        tag,
        name: "Range Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "Exposure current",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "Reconstruction Algorithm Index",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x84) => Ok(Item {
        tag,
        name: "Multiscan Reconstruction Increment",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "MERGE TECHNOLOGIES, INC." => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS Selma" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x32) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x33) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x34) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x35) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_RTEN_01" => match (g0, g1, e0, e1) {
      (0x02, 0x49, _, 0x14) => Ok(Item {
        tag,
        name: "Operator Name",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x74) => Ok(Item {
        tag,
        name: "Block Shape",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2_TO_N,
      }),
      (0x02, 0x49, _, 0xb6) => Ok(Item {
        tag,
        name: "Leaf Positions",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2_TO_N,
      }),
      (0x02, 0x49, _, 0x36) => Ok(Item {
        tag,
        name: "Z Plus Thickness",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xa4) => Ok(Item {
        tag,
        name: "Gantry Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x72) => Ok(Item {
        tag,
        name: "Block Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x66) => Ok(Item {
        tag,
        name: "Particle Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x18) => Ok(Item {
        tag,
        name: "Plan Image Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xa6) => Ok(Item {
        tag,
        name: "Collimator Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x64) => Ok(Item {
        tag,
        name: "Beam Name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x84) => Ok(Item {
        tag,
        name: "Cutout Shape",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2_TO_N,
      }),
      (0x02, 0x49, _, 0x3a) => Ok(Item {
        tag,
        name: "Slab Shape",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3_TO_N,
      }),
      (0x02, 0x49, _, 0x92) => Ok(Item {
        tag,
        name: "Collimator Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xa9) => Ok(Item {
        tag,
        name: "Source-Surface Distance",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x80) => Ok(Item {
        tag,
        name: "Cutout Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x68) => Ok(Item {
        tag,
        name: "Nominal Particle Energy",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x1c) => Ok(Item {
        tag,
        name: "Build Resolution",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x51) => Ok(Item {
        tag,
        name: "Group Name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x1a) => Ok(Item {
        tag,
        name: "Exam/Series/Image Identifier",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x38) => Ok(Item {
        tag,
        name: "Z Minus Thickness",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xac) => Ok(Item {
        tag,
        name: "Y Symmetric Opening",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x32) => Ok(Item {
        tag,
        name: "Slab Image Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x46) => Ok(Item {
        tag,
        name: "Marker Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x02, 0x49, _, 0x28) => Ok(Item {
        tag,
        name: "Structure Color",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x40) => Ok(Item {
        tag,
        name: "Marker Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xa8) => Ok(Item {
        tag,
        name: "Isocenter Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x02, 0x49, _, 0x20) => Ok(Item {
        tag,
        name: "Structure Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x42) => Ok(Item {
        tag,
        name: "Marker Name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x13) => Ok(Item {
        tag,
        name: "Plan Creation Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x50) => Ok(Item {
        tag,
        name: "Beam Group Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x11) => Ok(Item {
        tag,
        name: "Plan Creation Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x70) => Ok(Item {
        tag,
        name: "Block Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x24) => Ok(Item {
        tag,
        name: "Structure Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x90) => Ok(Item {
        tag,
        name: "Collimator Name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x54) => Ok(Item {
        tag,
        name: "Beam Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xae) => Ok(Item {
        tag,
        name: "X Positive Jaw Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xa0) => Ok(Item {
        tag,
        name: "Dynamic Segment Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x22) => Ok(Item {
        tag,
        name: "Structure Name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x16) => Ok(Item {
        tag,
        name: "Plan Comment",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x30) => Ok(Item {
        tag,
        name: "Slab Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xb4) => Ok(Item {
        tag,
        name: "Y Negative Jaw Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xb2) => Ok(Item {
        tag,
        name: "Y Positive Jaw Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x82) => Ok(Item {
        tag,
        name: "Cutout Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x60) => Ok(Item {
        tag,
        name: "Machine Reference Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x62) => Ok(Item {
        tag,
        name: "Machine Name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xd0) => Ok(Item {
        tag,
        name: "Treatment Position",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xa2) => Ok(Item {
        tag,
        name: "Table Angle",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x1b) => Ok(Item {
        tag,
        name: "Additional Image Identifier",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xb0) => Ok(Item {
        tag,
        name: "X Negative Jaw Position",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0xaa) => Ok(Item {
        tag,
        name: "X Symmetric Opening",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x44) => Ok(Item {
        tag,
        name: "Marker Color",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x02, 0x49, _, 0x52) => Ok(Item {
        tag,
        name: "Group Properties",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "TOSHIBA COMAPL HEADER" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "COMAPL Header Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "COMAPL Header Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "COMAPL History Information",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x33) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_N,
      }),
      _ => Err(()),
    },
    "SPI-P-Private_ICS Release 1;4" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0xdc) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x9c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb5) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xbc) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xd7) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb6) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb2) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xbd) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x06) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xbe) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xd8) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xd6) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb3) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x9a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xa1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xb1) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xe0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xda) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0xd9) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_2,
      }),
      (0x00, 0x29, _, 0xdd) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GE ??? From Adantage Review CS" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x30) => Ok(Item {
        tag,
        name: "CR EDR Mode",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "CR Latitude",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x50) => Ok(Item {
        tag,
        name: "CR Group Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x70) => Ok(Item {
        tag,
        name: "CR Image Serial Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "CR Bar Code Number",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x90) => Ok(Item {
        tag,
        name: "CR Film Output Exposures",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_ADWSoft_DPO1" => match (g0, g1, e0, e1) {
      (0x00, 0x39, _, 0x80) => Ok(Item {
        tag,
        name: "Private Entity Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x85) => Ok(Item {
        tag,
        name: "Private Entity Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x90) => Ok(Item {
        tag,
        name: "Private Entity Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0x95) => Ok(Item {
        tag,
        name: "Private Entity Launch Command",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x39, _, 0xaa) => Ok(Item {
        tag,
        name: "Private Entity Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Siemens Ultrasound Miscellaneous" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PHILIPS MR/PART 12" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_3DSTATE_001" => match (g0, g1, e0, e1) {
      (0x00, 0x47, _, 0xd6) => Ok(Item {
        tag,
        name: "General Description",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xd7) => Ok(Item {
        tag,
        name: "TDRT",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xd8) => Ok(Item {
        tag,
        name: "NVRP",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xd9) => Ok(Item {
        tag,
        name: "CVRPN",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xda) => Ok(Item {
        tag,
        name: "Volume Rendering Presets Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xdb) => Ok(Item {
        tag,
        name: "Preset Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xdc) => Ok(Item {
        tag,
        name: "Opacity Curve X",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0xdd) => Ok(Item {
        tag,
        name: "Opacity Curve Y",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0xde) => Ok(Item {
        tag,
        name: "NOCP",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xdf) => Ok(Item {
        tag,
        name: "Color Curve X",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x47, _, 0xe1) => Ok(Item {
        tag,
        name: "NCCP",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xe2) => Ok(Item {
        tag,
        name: "GSA",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xe3) => Ok(Item {
        tag,
        name: "VRSF",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xe4) => Ok(Item {
        tag,
        name: "AF",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xe5) => Ok(Item {
        tag,
        name: "DF",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xe6) => Ok(Item {
        tag,
        name: "SCF",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xe7) => Ok(Item {
        tag,
        name: "SPF",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xe8) => Ok(Item {
        tag,
        name: "Orthogonal Clipping Planes",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: ValueMultiplicity {
          min: 24,
          max: Some(24),
        },
      }),
      (0x00, 0x47, _, 0xe9) => Ok(Item {
        tag,
        name: "CP",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_3,
      }),
      (0x00, 0x47, _, 0xea) => Ok(Item {
        tag,
        name: "CFP",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x00, 0x47, _, 0xeb) => Ok(Item {
        tag,
        name: "CVU",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x00, 0x47, _, 0xec) => Ok(Item {
        tag,
        name: "RFOV",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xed) => Ok(Item {
        tag,
        name: "PPRP",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xee) => Ok(Item {
        tag,
        name: "3DWW",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xef) => Ok(Item {
        tag,
        name: "3DWL",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xf0) => Ok(Item {
        tag,
        name: "BBV",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xf1) => Ok(Item {
        tag,
        name: "ERF",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xf2) => Ok(Item {
        tag,
        name: "TDRMS",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x47, _, 0xf3) => Ok(Item {
        tag,
        name: "TDSSS",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "TOSHIBA MDW HEADER" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x08) => Ok(Item {
        tag,
        name: "Application Header Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x09) => Ok(Item {
        tag,
        name: "Application Header Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Image Header Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x11) => Ok(Item {
        tag,
        name: "Image Header Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x12) => Ok(Item {
        tag,
        name: "Image Header Info",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x18) => Ok(Item {
        tag,
        name: "Series Header Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x19) => Ok(Item {
        tag,
        name: "Series Header Version",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Series Header Info",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x31) => Ok(Item {
        tag,
        name: "PMTF Information 1",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x32) => Ok(Item {
        tag,
        name: "PMTF Information 2",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x33) => Ok(Item {
        tag,
        name: "PMTF Information 3",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x34) => Ok(Item {
        tag,
        name: "PMTF Information 4",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Applicare/Centricity Radiology Web/Version 2.0" => {
      match (g0, g1, e0, e1) {
        (0x41, 0x11, _, 0x01) => Ok(Item {
          tag,
          name: "Secondary Spine Label",
          vrs: &[ValueRepresentation::CodeString],
          multiplicity: VM_1,
        }),
        (0x41, 0x11, _, 0x02) => Ok(Item {
          tag,
          name: "Additional tags for Presentation State",
          vrs: &[ValueRepresentation::IntegerString],
          multiplicity: VM_1,
        }),
        _ => Err(()),
      }
    }
    "SIEMENS MED SMS USG ANTARES" => match (g0, g1, e0, e1) {
      (0x00, 0x19, _, 0x46) => Ok(Item {
        tag,
        name: "Color Flow Smooth Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x80) => Ok(Item {
        tag,
        name: "M-Mode Dynamic Range",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2d) => Ok(Item {
        tag,
        name: "B-Mode Tint Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x86) => Ok(Item {
        tag,
        name: "M-Mode Tint Type",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x66) => Ok(Item {
        tag,
        name: "Doppler Submode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6a) => Ok(Item {
        tag,
        name: "Doppler Trace Inverted",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2a) => Ok(Item {
        tag,
        name: "B-Mode Tint Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3a) => Ok(Item {
        tag,
        name: "Image Flag",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x83) => Ok(Item {
        tag,
        name: "M-Mode Map Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x62) => Ok(Item {
        tag,
        name: "Doppler Wall Filter",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x44) => Ok(Item {
        tag,
        name: "Color Flow Res/Speed Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x03) => Ok(Item {
        tag,
        name: "Frame Rate",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x28) => Ok(Item {
        tag,
        name: "???",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x65) => Ok(Item {
        tag,
        name: "Doppler Map Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x82) => Ok(Item {
        tag,
        name: "M-Mode Edge Enhance Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0xa0) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x43) => Ok(Item {
        tag,
        name: "Color Flow Overall Gain",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x49) => Ok(Item {
        tag,
        name: "Color Flow Priority Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x40) => Ok(Item {
        tag,
        name: "Color Flow state",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x00) => Ok(Item {
        tag,
        name: "Private Creator Version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0c) => Ok(Item {
        tag,
        name: "Burned in Graphics",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x48) => Ok(Item {
        tag,
        name: "Color Flow Map Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x23) => Ok(Item {
        tag,
        name: "B-Mode Res/Speed Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x26) => Ok(Item {
        tag,
        name: "B-Mode Map Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x24) => Ok(Item {
        tag,
        name: "B-Mode Edge Enhance Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x47) => Ok(Item {
        tag,
        name: "Color Flow Persistence Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x29) => Ok(Item {
        tag,
        name: "???",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x0d) => Ok(Item {
        tag,
        name: "SieClear Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x27) => Ok(Item {
        tag,
        name: "???",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x54) => Ok(Item {
        tag,
        name: "Color Flow Maximum Velocity",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x31) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x41) => Ok(Item {
        tag,
        name: "Color Flow Wall Filter Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x2e) => Ok(Item {
        tag,
        name: "ClarifyVE Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x61) => Ok(Item {
        tag,
        name: "Doppler Overall Gain",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x69) => Ok(Item {
        tag,
        name: "Doppler Time/Freq Res Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x22) => Ok(Item {
        tag,
        name: "B-Mode Overall Gain",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x6c) => Ok(Item {
        tag,
        name: "Doppler Tint Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x87) => Ok(Item {
        tag,
        name: "M-Mode Submode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x3b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x20) => Ok(Item {
        tag,
        name: "B-Mode Submode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x25) => Ok(Item {
        tag,
        name: "B-Mode Persistence Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x42) => Ok(Item {
        tag,
        name: "Color Flow Submode",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x88) => Ok(Item {
        tag,
        name: "M-Mode Tint Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x60) => Ok(Item {
        tag,
        name: "Doppler Dynamic Range",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x21) => Ok(Item {
        tag,
        name: "B-Mode Dynamic Range",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x81) => Ok(Item {
        tag,
        name: "M-Mode Overall Gain",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x72) => Ok(Item {
        tag,
        name: "Doppler Tint Index",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x63) => Ok(Item {
        tag,
        name: "Doppler Gate Size",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x19, _, 0x67) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_GDXE_FALCON_04" => match (g0, g1, e0, e1) {
      (0x00, 0x11, _, 0x42) => Ok(Item {
        tag,
        name: "View IP",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x47) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x30) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x12) => Ok(Item {
        tag,
        name: "Patient Size String",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x27) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x43) => Ok(Item {
        tag,
        name: "Key-stone Co-ordinates",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: ValueMultiplicity {
          min: 24,
          max: Some(24),
        },
      }),
      (0x00, 0x11, _, 0x16) => Ok(Item {
        tag,
        name: "Processing Debug Info",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x44) => Ok(Item {
        tag,
        name: "Receptor Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x41) => Ok(Item {
        tag,
        name: "Sub-image Collimator Vertices",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: ValueMultiplicity {
          min: 24,
          max: Some(24),
        },
      }),
      (0x00, 0x11, _, 0x08) => Ok(Item {
        tag,
        name: "Study DAP",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x06) => Ok(Item {
        tag,
        name: "Image Dose",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x10) => Ok(Item {
        tag,
        name: "Total Exposures",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x17) => Ok(Item {
        tag,
        name: "Override mode",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x15) => Ok(Item {
        tag,
        name: "Detector ARC Gain",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x33) => Ok(Item {
        tag,
        name: "Detected Exposure Index",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x34) => Ok(Item {
        tag,
        name: "Compensated Detector Exposure",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x04) => Ok(Item {
        tag,
        name: "Acquisition Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x03) => Ok(Item {
        tag,
        name: "Processed Series UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x14) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x36) => Ok(Item {
        tag,
        name: "Median Anatomy Count Value",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x09) => Ok(Item {
        tag,
        name: "Non-Digital Exposures",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x38) => Ok(Item {
        tag,
        name: "Shift Vector for Pasting",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_6,
      }),
      (0x00, 0x11, _, 0x37) => Ok(Item {
        tag,
        name: "DEI lower and upper limit values",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x00, 0x11, _, 0x32) => Ok(Item {
        tag,
        name: "Adjusted Field of View",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: ValueMultiplicity {
          min: 8,
          max: Some(8),
        },
      }),
      (0x00, 0x11, _, 0x28) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x29) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x31) => Ok(Item {
        tag,
        name: "Detected Field of View",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: ValueMultiplicity {
          min: 8,
          max: Some(8),
        },
      }),
      (0x00, 0x11, _, 0x35) => Ok(Item {
        tag,
        name: "Uncompensated Detector Exposure",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x19) => Ok(Item {
        tag,
        name: "Film Speed Selection",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x05) => Ok(Item {
        tag,
        name: "Acquisition UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x07) => Ok(Item {
        tag,
        name: "Study Dose",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x39) => Ok(Item {
        tag,
        name: "Image Number in Pasting",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x13) => Ok(Item {
        tag,
        name: "SPS UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x46) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x11, _, 0x11) => Ok(Item {
        tag,
        name: "ROI",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x11, _, 0x40) => Ok(Item {
        tag,
        name: "Pasting Overlap",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_CT_CARDIAC_001" => match (g0, g1, e0, e1) {
      (0x00, 0x49, _, 0x01) => Ok(Item {
        tag,
        name: "CT Cardiac Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x49, _, 0x02) => Ok(Item {
        tag,
        name: "HeartRateAtConfirm",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x49, _, 0x03) => Ok(Item {
        tag,
        name: "AvgHeartRatePriorToConfirm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x49, _, 0x04) => Ok(Item {
        tag,
        name: "MinHeartRatePriorToConfirm",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x49, _, 0x05) => Ok(Item {
        tag,
        name: "MaxHeartRatePriorToConfirm",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x49, _, 0x06) => Ok(Item {
        tag,
        name: "StdDevHeartRatePriorToConfirm",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x49, _, 0x07) => Ok(Item {
        tag,
        name: "NumHeartRateSamplesPriorToConfirm",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x49, _, 0x08) => Ok(Item {
        tag,
        name: "AutoHeartRateDetectPredict",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x49, _, 0x09) => Ok(Item {
        tag,
        name: "SystemOptimizedHeartRate",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x49, _, 0x0a) => Ok(Item {
        tag,
        name: "EkgMonitorType",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x49, _, 0x0b) => Ok(Item {
        tag,
        name: "NumReconSectors",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x49, _, 0x0c) => Ok(Item {
        tag,
        name: "RpeakTimeStamps",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: ValueMultiplicity {
          min: 256,
          max: Some(256),
        },
      }),
      _ => Err(()),
    },
    "SECTRA_OverlayInfo_01" => match (g0, g1, e0, e1) {
      (0x60, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "Sectra Overlay",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "CAMTRONICS" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x10) => Ok(Item {
        tag,
        name: "Commentline",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x20) => Ok(Item {
        tag,
        name: "Edge Enhancement Coefficient",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x50) => Ok(Item {
        tag,
        name: "Scene Text",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x60) => Ok(Item {
        tag,
        name: "Image Text",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x70) => Ok(Item {
        tag,
        name: "Pixel Shift Horizontal",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x80) => Ok(Item {
        tag,
        name: "Pixel Shift Vertical",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x29, _, 0x90) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips Imaging DD 001" => match (g0, g1, e0, e1) {
      (0x20, 0x01, _, 0x60) => Ok(Item {
        tag,
        name: "Number of Stacks",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x64) => Ok(Item {
        tag,
        name: "Text Type",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x22) => Ok(Item {
        tag,
        name: "Water Fat Shift",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x93) => Ok(Item {
        tag,
        name: "Text Style",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x33) => Ok(Item {
        tag,
        name: "Stack Radial Axis",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x05, _, 0x20) => Ok(Item {
        tag,
        name: "Number of Chemical Shifts",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x0e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xf2) => Ok(Item {
        tag,
        name: "Retrospective Motion Correction",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x6b) => Ok(Item {
        tag,
        name: "Has Edge Enhancement Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x1a) => Ok(Item {
        tag,
        name: "PC Velocity",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x01, _, 0x4b) => Ok(Item {
        tag,
        name: "Poly Line Interpolation Method",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x13) => Ok(Item {
        tag,
        name: "EPI Factor",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x30) => Ok(Item {
        tag,
        name: "Log Subtraction Gain Step",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x74) => Ok(Item {
        tag,
        name: "Window Center Sub",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x01, _, 0x5f) => Ok(Item {
        tag,
        name: "Stack Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xa1) => Ok(Item {
        tag,
        name: "Is Raw Image",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x9b) => Ok(Item {
        tag,
        name: "Graphic Number",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x06) => Ok(Item {
        tag,
        name: "Image Enhanced",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x7e) => Ok(Item {
        tag,
        name: "Edge Enhancement Gain Taste",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xa4) => Ok(Item {
        tag,
        name: "Text Color Background",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x6a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x26) => Ok(Item {
        tag,
        name: "Presentation State Subtraction Active",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x9f) => Ok(Item {
        tag,
        name: "Spectral Selective Excitation Pulse",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x5a) => Ok(Item {
        tag,
        name: "Graphic Annotation Model",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x29) => Ok(Item {
        tag,
        name: "Edge Enhancement Gain Factor Non Sub",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x4e) => Ok(Item {
        tag,
        name: "Window Smoothing Taste",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x14) => Ok(Item {
        tag,
        name: "Number of Echoes",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x68) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x21) => Ok(Item {
        tag,
        name: "SPIR",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x7f) => Ok(Item {
        tag,
        name: "Edge Enhancement Gain Taste Sub",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x94) => Ok(Item {
        tag,
        name: "Processing Order Specialization",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x2c) => Ok(Item {
        tag,
        name: "Harmonization Factor",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x48) => Ok(Item {
        tag,
        name: "Graphic Annotation ID",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x24) => Ok(Item {
        tag,
        name: "Interactive",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x1e) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x8b) => Ok(Item {
        tag,
        name: "Transmitting Coil",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x04) => Ok(Item {
        tag,
        name: "Diffusion Direction",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x82) => Ok(Item {
        tag,
        name: "Echo Train Length",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x6e) => Ok(Item {
        tag,
        name: "Series Type",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x1f) => Ok(Item {
        tag,
        name: "Respiration Sync",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x8b) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x47) => Ok(Item {
        tag,
        name: "Graphic Line Width",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x85) => Ok(Item {
        tag,
        name: "Magnetic Field Strength",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x36) => Ok(Item {
        tag,
        name: "Stack Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x01, _, 0x67) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xa3) => Ok(Item {
        tag,
        name: "Text Color Foreground",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x0f) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x65) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x2a) => Ok(Item {
        tag,
        name: "Edge Enhancement Taste Adapt Sub",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xc1) => Ok(Item {
        tag,
        name: "Nested Object Type Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x2b) => Ok(Item {
        tag,
        name: "Edge Enhancement Taste Non Sub",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x80) => Ok(Item {
        tag,
        name: "Text Anchor Point Alignment",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x0b) => Ok(Item {
        tag,
        name: "Slice Orientation",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x46) => Ok(Item {
        tag,
        name: "Graphic Line Style",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x37) => Ok(Item {
        tag,
        name: "Mixing Operation Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xcc) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x28) => Ok(Item {
        tag,
        name: "Edge Enhancement Gain Factor Sub",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x17) => Ok(Item {
        tag,
        name: "Number of Phases MR",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x69) => Ok(Item {
        tag,
        name: "Display Shutter Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x4d) => Ok(Item {
        tag,
        name: "Poly Line End Point Style",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x88) => Ok(Item {
        tag,
        name: "Number of Averages",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x1d) => Ok(Item {
        tag,
        name: "Reconstruction Number MR",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x84) => Ok(Item {
        tag,
        name: "Inversion Time",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x16) => Ok(Item {
        tag,
        name: "Number of PC Directions",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x23) => Ok(Item {
        tag,
        name: "Flip Angle Philips",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x75) => Ok(Item {
        tag,
        name: "Window Width Sub",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x01, _, 0x42) => Ok(Item {
        tag,
        name: "Subtraction Land Marking Active",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x79) => Ok(Item {
        tag,
        name: "Harmonisation Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x53) => Ok(Item {
        tag,
        name: "Window Invert",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x87) => Ok(Item {
        tag,
        name: "Imaged Nucleus",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x2d) => Ok(Item {
        tag,
        name: "Number of Stack Slices",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x7b) => Ok(Item {
        tag,
        name: "Acquisition Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xf1) => Ok(Item {
        tag,
        name: "Prospective Motion Correction",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x01, _, 0x5d) => Ok(Item {
        tag,
        name: "Measurement Text Units",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x02) => Ok(Item {
        tag,
        name: "Chemical Shift Number MR",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x33) => Ok(Item {
        tag,
        name: "Scan Duration",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x89) => Ok(Item {
        tag,
        name: "Phase FOV Percent",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x56) => Ok(Item {
        tag,
        name: "Graphic Type (Private)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x81) => Ok(Item {
        tag,
        name: "Number of Dynamic Scans",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x6f) => Ok(Item {
        tag,
        name: "Mixing Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x55) => Ok(Item {
        tag,
        name: "Graphic Line Color",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xa5) => Ok(Item {
        tag,
        name: "Text Color Shadow",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x1c) => Ok(Item {
        tag,
        name: "Prepulse Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x08) => Ok(Item {
        tag,
        name: "Phase Number",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x19) => Ok(Item {
        tag,
        name: "Partial Matrix Scanned",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x34) => Ok(Item {
        tag,
        name: "Mixing Mask Operation",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x15) => Ok(Item {
        tag,
        name: "Number of Locations",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x1b) => Ok(Item {
        tag,
        name: "Prepulse Delay",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x6d) => Ok(Item {
        tag,
        name: "Text Font",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x0c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x0a) => Ok(Item {
        tag,
        name: "Slice Number MR",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x35) => Ok(Item {
        tag,
        name: "Stack Slice Number",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x01, _, 0x11) => Ok(Item {
        tag,
        name: "Diffusion Echo Time",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x9f) => Ok(Item {
        tag,
        name: "Pixel Processing Kernel Size",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_2,
      }),
      (0x20, 0x01, _, 0x12) => Ok(Item {
        tag,
        name: "Dynamic Series",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x71) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x50) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x14) => Ok(Item {
        tag,
        name: "Diffusion",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x52) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x4f) => Ok(Item {
        tag,
        name: "Harmonization Offset",
        vrs: &[ValueRepresentation::FloatingPointDouble],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x9a) => Ok(Item {
        tag,
        name: "Graphic Number Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x62) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x7a) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xa2) => Ok(Item {
        tag,
        name: "LOG Subtraction Curve Taste",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x2f) => Ok(Item {
        tag,
        name: "Harmonization Gain",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x83) => Ok(Item {
        tag,
        name: "Imaging Frequency",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x30) => Ok(Item {
        tag,
        name: "Repetition Time",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x86) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x76) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x77) => Ok(Item {
        tag,
        name: "GL TrafoType",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xda) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x3a) => Ok(Item {
        tag,
        name: "Pixel Shift",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x5e) => Ok(Item {
        tag,
        name: "Measurement Text Type",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x73) => Ok(Item {
        tag,
        name: "Referenced Mask Image Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x31) => Ok(Item {
        tag,
        name: "Mixing NR of Mask Image Numbers",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x4c) => Ok(Item {
        tag,
        name: "Poly Line Begin Point Style",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x8a) => Ok(Item {
        tag,
        name: "Sampling Percent",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x32) => Ok(Item {
        tag,
        name: "Stack Radial Angle",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x01, _, 0x25) => Ok(Item {
        tag,
        name: "Echo Time Display MR",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x9c) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x3f) => Ok(Item {
        tag,
        name: "Interpolation Method",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x01) => Ok(Item {
        tag,
        name: "Chemical Shift",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x97) => Ok(Item {
        tag,
        name: "Nucleus",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x63) => Ok(Item {
        tag,
        name: "Examination Source",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x03) => Ok(Item {
        tag,
        name: "Diffusion B-Factor",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x9d) => Ok(Item {
        tag,
        name: "PIIM Subtraction Type",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x39) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0x35) => Ok(Item {
        tag,
        name: "Data Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x10) => Ok(Item {
        tag,
        name: "Cardiac Sync",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x05, _, 0xa1) => Ok(Item {
        tag,
        name: "Syncra Scan Type",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x61) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x20) => Ok(Item {
        tag,
        name: "Scanning Technique Description MR",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x18) => Ok(Item {
        tag,
        name: "Number of Slices MR",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x07) => Ok(Item {
        tag,
        name: "Image Type ED ES",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x3d) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Philips EV Imaging DD 022" => match (g0, g1, e0, e1) {
      (0x20, 0x07, _, 0x00) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x20, 0x07, _, 0x12) => Ok(Item {
        tag,
        name: "Volume Sequence Capture",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x20, 0x07, _, 0x17) => Ok(Item {
        tag,
        name: "Original SOP Instance",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x20, 0x07, _, 0x33) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x07, _, 0x34) => Ok(Item {
        tag,
        name: "",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Silhouette Graphics Export V1.0" => match (g0, g1, e0, e1) {
      (0x00, 0x29, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "BioPri" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x00) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x03) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x05) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x07) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x08) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x09) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS DICOM" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      (0x00, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "Applicare/RadWorks/Version 5.0" => match (g0, g1, e0, e1) {
      (0x31, 0x09, _, 0x27) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x09) => Ok(Item {
        tag,
        name: "Folder",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x06) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x08) => Ok(Item {
        tag,
        name: "Receive Origin",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x2c) => Ok(Item {
        tag,
        name: "Archive Flag",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x19) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x25) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x22) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::ApplicationEntity],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x32) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x24) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x0a) => Ok(Item {
        tag,
        name: "Receive Date",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x41) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x21) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x11) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x07) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0xef) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x42) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x13) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x12) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x0e) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x30) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x2a) => Ok(Item {
        tag,
        name: "Send Flag",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x0c) => Ok(Item {
        tag,
        name: "Prior",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x38) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x43) => Ok(Item {
        tag,
        name: "Archive Status",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x40) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x04) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x26) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x0d) => Ok(Item {
        tag,
        name: "STAT Study",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x36) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x2b) => Ok(Item {
        tag,
        name: "Print Flag",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x33) => Ok(Item {
        tag,
        name: "Request Storage Commitment",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x03) => Ok(Item {
        tag,
        name: "Delete Lock",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x10) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x05) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x31) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x0b) => Ok(Item {
        tag,
        name: "Receive Time",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x14) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x23) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x34) => Ok(Item {
        tag,
        name: "Requested Compression",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x20) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x37) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x39) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0xee) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x02) => Ok(Item {
        tag,
        name: "NEW/SEEN Status",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x29) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x35) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x31, 0x09, _, 0x28) => Ok(Item {
        tag,
        name: "<internal",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "FFP DATA" => match (g0, g1, e0, e1) {
      (0x00, 0x09, _, 0x01) => Ok(Item {
        tag,
        name: "CR Header Information",
        vrs: &[ValueRepresentation::Unknown],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_PARM_01" => match (g0, g1, e0, e1) {
      (0x00, 0x43, _, 0x90) => Ok(Item {
        tag,
        name: "SAR Definition",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x03) => Ok(Item {
        tag,
        name: "Gradient offset in Y",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x60) => Ok(Item {
        tag,
        name: "BW Image Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x0a) => Ok(Item {
        tag,
        name: "Type of receiver used",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x4b) => Ok(Item {
        tag,
        name: "DAS xm pattern",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x00, 0x43, _, 0x73) => Ok(Item {
        tag,
        name: "Experiment Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x9b) => Ok(Item {
        tag,
        name: "NPW factor",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x9a) => Ok(Item {
        tag,
        name: "Rx Stack Identification",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x29) => Ok(Item {
        tag,
        name: "Histogram tables",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x72) => Ok(Item {
        tag,
        name: "Paradigm Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x93) => Ok(Item {
        tag,
        name: "Tracts",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x7e) => Ok(Item {
        tag,
        name: "PACC specific information",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x6d) => Ok(Item {
        tag,
        name: "Area Size",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0xa5) => Ok(Item {
        tag,
        name: "Duration of the label or control pulse",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x88) => Ok(Item {
        tag,
        name: "PURE Acquisition Calibration Series UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0xa1) => Ok(Item {
        tag,
        name: "Spectroscopy Default Display Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x78) => Ok(Item {
        tag,
        name: "Application Version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x01) => Ok(Item {
        tag,
        name: "Bitmap of prescan options",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x1e) => Ok(Item {
        tag,
        name: "Delta Start Time [msec]",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x2d) => Ok(Item {
        tag,
        name: "Filter Mode (String slop field 1 in legacy GE MR",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x42) => Ok(Item {
        tag,
        name: "DAS trigger source",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x00, 0x43, _, 0x68) => Ok(Item {
        tag,
        name: "XT Correction Indicator",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x38) => Ok(Item {
        tag,
        name: "User data 25...User data 48 {User48=Effective Resolution for spiral}",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: ValueMultiplicity {
          min: 24,
          max: Some(24),
        },
      }),
      (0x00, 0x43, _, 0x19) => Ok(Item {
        tag,
        name: "Number of BBH chains to blend",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x30) => Ok(Item {
        tag,
        name: "Vas collapse flag",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x65) => Ok(Item {
        tag,
        name: "Motion Correction Indicator",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x13) => Ok(Item {
        tag,
        name: "Decon kernel parameters",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_5,
      }),
      (0x00, 0x43, _, 0x83) => Ok(Item {
        tag,
        name: "Asset R Factors",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_2,
      }),
      (0x00, 0x43, _, 0x31) => Ok(Item {
        tag,
        name: "Recon Center Coordinates",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_2,
      }),
      (0x20, 0x01, _, 0x13) => Ok(Item {
        tag,
        name: "Application Name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x7d) => Ok(Item {
        tag,
        name: "Recon mode flag word",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x9f) => Ok(Item {
        tag,
        name: "Research Tag 4",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x33) => Ok(Item {
        tag,
        name: "Neg_scanspacing",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x02) => Ok(Item {
        tag,
        name: "Gradient offset in X",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0xa4) => Ok(Item {
        tag,
        name: "Detailed text for ASL labeling technique",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xa1) => Ok(Item {
        tag,
        name: "Registration Parameters",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x86) => Ok(Item {
        tag,
        name: "Debug Data (binary format)",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x75) => Ok(Item {
        tag,
        name: "#active volumes",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x0a) => Ok(Item {
        tag,
        name: "Store level of Functional Image",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x89) => Ok(Item {
        tag,
        name: "Governing Body, dB/dt, and SAR definition",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_3,
      }),
      (0x00, 0x43, _, 0x7f) => Ok(Item {
        tag,
        name: "Reserved",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x98) => Ok(Item {
        tag,
        name: "ASSET Acquisition Calibration Series UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x51, _, 0x0b) => Ok(Item {
        tag,
        name: "Store B-Value with Functional Image",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x60) => Ok(Item {
        tag,
        name: "Slop_int_10...slop_int_17",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: ValueMultiplicity {
          min: 8,
          max: Some(8),
        },
      }),
      (0x20, 0x01, _, 0x14) => Ok(Item {
        tag,
        name: "Application Version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x93) => Ok(Item {
        tag,
        name: "Spectro Quantitation Values",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x01, _, 0x21) => Ok(Item {
        tag,
        name: "Referenced Series UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x49) => Ok(Item {
        tag,
        name: "DAS auto zero",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x00, 0x43, _, 0x67) => Ok(Item {
        tag,
        name: "IBO Correction Indicator",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x1a) => Ok(Item {
        tag,
        name: "Starting channel number",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x91) => Ok(Item {
        tag,
        name: "Motion Plot",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x70) => Ok(Item {
        tag,
        name: "Paradigm Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x94) => Ok(Item {
        tag,
        name: "Report",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x6a) => Ok(Item {
        tag,
        name: "AV Correction Indicator",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x48) => Ok(Item {
        tag,
        name: "DAS reg xm",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x00, 0x43, _, 0x8a) => Ok(Item {
        tag,
        name: "Private In-Plane Phase Encoding Direction",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x8b) => Ok(Item {
        tag,
        name: "FMRI Binary Data Block",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x4d) => Ok(Item {
        tag,
        name: "Start scan to X-ray on delay",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_4,
      }),
      (0x20, 0x01, _, 0x90) => Ok(Item {
        tag,
        name: "Processing parameters",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x1d) => Ok(Item {
        tag,
        name: "Level value",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x7c) => Ok(Item {
        tag,
        name: "Delay after slice group",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x44) => Ok(Item {
        tag,
        name: "DAS output source",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x00, 0x43, _, 0xa2) => Ok(Item {
        tag,
        name: "MEG Data",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x21) => Ok(Item {
        tag,
        name: "Corrected after glow terms",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x9e) => Ok(Item {
        tag,
        name: "Research Tag 3",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x6c) => Ok(Item {
        tag,
        name: "Detector Row",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x64) => Ok(Item {
        tag,
        name: "Image Filter",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x9d) => Ok(Item {
        tag,
        name: "Research Tag 2",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x8b) => Ok(Item {
        tag,
        name: "p Threshold",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x95) => Ok(Item {
        tag,
        name: "Prescan Reuse String",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x4e) => Ok(Item {
        tag,
        name: "Duration of X-ray on",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_4,
      }),
      (0x00, 0x43, _, 0x46) => Ok(Item {
        tag,
        name: "DAS cal mode",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x20, 0x01, _, 0xa0) => Ok(Item {
        tag,
        name: "Motion Parameters",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, 0x10, _) => Ok(Item {
        tag,
        name: "Private Element Creator",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x0b) => Ok(Item {
        tag,
        name: "DB/dt Peak rate of change of gradient field",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x2c) => Ok(Item {
        tag,
        name: "Effective echo spacing",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x6b) => Ok(Item {
        tag,
        name: "L-MDK Correction Indicator",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x8e) => Ok(Item {
        tag,
        name: "Spectro Prescan Values",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x00, 0x43, _, 0x1c) => Ok(Item {
        tag,
        name: "GE image integrity",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x7b) => Ok(Item {
        tag,
        name: "Regressor Values",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x87) => Ok(Item {
        tag,
        name: "Reserved",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x18) => Ok(Item {
        tag,
        name: "BBH coefficients",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x20, 0x01, _, 0x80) => Ok(Item {
        tag,
        name: "Contrast",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x84) => Ok(Item {
        tag,
        name: "Additional Asset Data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_5,
      }),
      (0x00, 0x43, _, 0x66) => Ok(Item {
        tag,
        name: "Helical Correction Indicator",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x1f) => Ok(Item {
        tag,
        name: "Max overranges in a view",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x0c) => Ok(Item {
        tag,
        name: "dB/dt Limits in units of percent",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x69) => Ok(Item {
        tag,
        name: "Q-cal Correction Indicator",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x32) => Ok(Item {
        tag,
        name: "Vas flags",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x94) => Ok(Item {
        tag,
        name: "Spectro Ratio Values",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x99) => Ok(Item {
        tag,
        name: "Extended Options",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x15) => Ok(Item {
        tag,
        name: "Total output views",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_3,
      }),
      (0x00, 0x43, _, 0x0d) => Ok(Item {
        tag,
        name: "PSD estimated limit",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x08) => Ok(Item {
        tag,
        name: "Respiratory rate, bpm",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x8c) => Ok(Item {
        tag,
        name: "Voxel Location",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_6,
      }),
      (0x00, 0x43, _, 0x74) => Ok(Item {
        tag,
        name: "#rest volumes",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x14) => Ok(Item {
        tag,
        name: "Calibration parameters",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_3,
      }),
      (0x00, 0x43, _, 0x72) => Ok(Item {
        tag,
        name: "Paradigm UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x05) => Ok(Item {
        tag,
        name: "Img is original or unoriginal",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0xa3) => Ok(Item {
        tag,
        name: "ASL Contrast technique",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x04) => Ok(Item {
        tag,
        name: "Gradient offset in Z",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x36) => Ok(Item {
        tag,
        name: "User_fill_map_MSW",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x77) => Ok(Item {
        tag,
        name: "Application Name",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x11) => Ok(Item {
        tag,
        name: "Total input views",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x61) => Ok(Item {
        tag,
        name: "Scanner Study Entity UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x07) => Ok(Item {
        tag,
        name: "Views per segment",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x62) => Ok(Item {
        tag,
        name: "Scanner Study ID",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x63) => Ok(Item {
        tag,
        name: "Raw Data ID",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x92) => Ok(Item {
        tag,
        name: "Image Error Text",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x92) => Ok(Item {
        tag,
        name: "ROIs",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x06) => Ok(Item {
        tag,
        name: "Number of EPI shots",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x81) => Ok(Item {
        tag,
        name: "Regressor Values",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x8d) => Ok(Item {
        tag,
        name: "SAT Band Locations",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity { min: 7, max: None },
      }),
      (0x00, 0x43, _, 0x16) => Ok(Item {
        tag,
        name: "Number of overranges",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_5,
      }),
      (0x00, 0x43, _, 0x6f) => Ok(Item {
        tag,
        name: "Scanner Table Entry (single gradient coil systems only)/Scanner Table Entry + Gradient Coil Selected",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: ValueMultiplicity {
          min: 3,
          max: Some(4),
        },
      }),
      (0x00, 0x43, _, 0x79) => Ok(Item {
        tag,
        name: "Slices Per Volume",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x20) => Ok(Item {
        tag,
        name: "Avg overranges all views",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x28) => Ok(Item {
        tag,
        name: "Unique image iden",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x15) => Ok(Item {
        tag,
        name: "Compatibility Version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x1b) => Ok(Item {
        tag,
        name: "Ppscan parameters",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x9c) => Ok(Item {
        tag,
        name: "Research Tag 1",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x4a) => Ok(Item {
        tag,
        name: "Starting channel of view",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_4,
      }),
      (0x20, 0x01, _, 0x11) => Ok(Item {
        tag,
        name: "DICOM Implementation Version",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x12) => Ok(Item {
        tag,
        name: "Within-DICOM-Implementation SOP Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x2e) => Ok(Item {
        tag,
        name: "String slop field 2",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x26) => Ok(Item {
        tag,
        name: "No views ref chans blocked",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_6,
      }),
      (0x00, 0x43, _, 0x43) => Ok(Item {
        tag,
        name: "DAS fpa gain",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x00, 0x43, _, 0x80) => Ok(Item {
        tag,
        name: "Coil ID Data",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x85) => Ok(Item {
        tag,
        name: "Debug Data (text format)",
        vrs: &[ValueRepresentation::UnlimitedText],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x71) => Ok(Item {
        tag,
        name: "Paradigm UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x2b) => Ok(Item {
        tag,
        name: "Private Scan Options",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_4,
      }),
      (0x00, 0x43, _, 0x91) => Ok(Item {
        tag,
        name: "SAR value",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x09) => Ok(Item {
        tag,
        name: "Respiratory trigger point",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xa2) => Ok(Item {
        tag,
        name: "Subject Data",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1_TO_N,
      }),
      (0x20, 0x01, _, 0x86) => Ok(Item {
        tag,
        name: "Number of Degrees of Freedom",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x12) => Ok(Item {
        tag,
        name: "X-ray chain",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_3,
      }),
      (0x00, 0x43, _, 0x0e) => Ok(Item {
        tag,
        name: "PSD estimated limit in tesla per second",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x76) => Ok(Item {
        tag,
        name: "#dummy scans",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x25) => Ok(Item {
        tag,
        name: "Reference channels",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_6,
      }),
      (0x00, 0x43, _, 0xa0) => Ok(Item {
        tag,
        name: "Spectroscopy Pixel Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x7a) => Ok(Item {
        tag,
        name: "Expected Time Points",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xb0) => Ok(Item {
        tag,
        name: "DTI Parameters",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x17) => Ok(Item {
        tag,
        name: "IBH image scale factors",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x40) => Ok(Item {
        tag,
        name: "Trigger on position",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_4,
      }),
      (0x20, 0x01, _, 0x73) => Ok(Item {
        tag,
        name: "Paradigm Description",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x2a) => Ok(Item {
        tag,
        name: "User defined data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x71) => Ok(Item {
        tag,
        name: "Paradigm Description",
        vrs: &[ValueRepresentation::ShortText],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x31) => Ok(Item {
        tag,
        name: "Number of Objects Averaged",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x4c) => Ok(Item {
        tag,
        name: "TGGC trigger mode",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_4,
      }),
      (0x20, 0x01, _, 0x8a) => Ok(Item {
        tag,
        name: "Z Threshold",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x95) => Ok(Item {
        tag,
        name: "Response Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x81) => Ok(Item {
        tag,
        name: "GE Coil Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x35) => Ok(Item {
        tag,
        name: "User_usage_tag",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x37) => Ok(Item {
        tag,
        name: "User_fill_map_LSW",
        vrs: &[ValueRepresentation::UnsignedLong],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x97) => Ok(Item {
        tag,
        name: "Image Filtering Parameters",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: ValueMultiplicity {
          min: 8,
          max: Some(8),
        },
      }),
      (0x00, 0x43, _, 0x2f) => Ok(Item {
        tag,
        name: "Image Type (real, imaginary, phase, magnitude)",
        vrs: &[ValueRepresentation::SignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x51) => Ok(Item {
        tag,
        name: "Number of Slices Per Volume",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x41) => Ok(Item {
        tag,
        name: "Degree of rotation",
        vrs: &[ValueRepresentation::FloatingPointSingle],
        multiplicity: VM_4,
      }),
      (0x20, 0x01, _, 0x41) => Ok(Item {
        tag,
        name: "Number of Expected Time Points",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0xc0) => Ok(Item {
        tag,
        name: "Paradigm Info",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x34) => Ok(Item {
        tag,
        name: "Offset Frequency",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x82) => Ok(Item {
        tag,
        name: "System Configuration Information",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1_TO_N,
      }),
      (0x00, 0x43, _, 0x45) => Ok(Item {
        tag,
        name: "DAS ad input",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x00, 0x43, _, 0x0f) => Ok(Item {
        tag,
        name: "Saravghead",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x10) => Ok(Item {
        tag,
        name: "Window value",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x10) => Ok(Item {
        tag,
        name: "DICOM Implementation UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x39) => Ok(Item {
        tag,
        name: "Slop_int_6... slop_int_9",
        vrs: &[ValueRepresentation::IntegerString],
        multiplicity: VM_4,
      }),
      (0x00, 0x43, _, 0x27) => Ok(Item {
        tag,
        name: "Scan Pitch Ratio",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x20, 0x01, _, 0x61) => Ok(Item {
        tag,
        name: "Experiment Type",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x96) => Ok(Item {
        tag,
        name: "Content Qualification",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x00, 0x43, _, 0x47) => Ok(Item {
        tag,
        name: "DAS cal frequency",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_4,
      }),
      (0x00, 0x43, _, 0x8f) => Ok(Item {
        tag,
        name: "Spectro Parameters",
        vrs: &[ValueRepresentation::DecimalString],
        multiplicity: VM_3,
      }),
      (0x00, 0x43, _, 0x6e) => Ok(Item {
        tag,
        name: "Auto mA Mode",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "PMS-THORA-5.1" => match (g0, g1, e0, e1) {
      (0x00, 0x89, _, 0x20) => Ok(Item {
        tag,
        name: "Stamp Image Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS_ADWSoft_3D2" => match (g0, g1, e0, e1) {
      (0x00, 0x57, _, 0x01) => Ok(Item {
        tag,
        name: "Cardiac Reconstruction Algorithm List",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x02) => Ok(Item {
        tag,
        name: "Average Heart Rate for Image List",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x03) => Ok(Item {
        tag,
        name: "Temporal Resolution List",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x00, 0x57, _, 0x04) => Ok(Item {
        tag,
        name: "Layout View Preset",
        vrs: &[ValueRepresentation::LongText],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "GEMS-IT/Centricity RA600/7.0" => match (g0, g1, e0, e1) {
      (0x41, 0x13, _, 0x10) => Ok(Item {
        tag,
        name: "Number of images in study",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "http://www.gemedicalsystems.com/it_solutions/rad_pacs/" => {
      match (g0, g1, e0, e1) {
        (0x31, 0x15, _, 0x01) => Ok(Item {
          tag,
          name: "Reference to pacs study",
          vrs: &[ValueRepresentation::UnlimitedText],
          multiplicity: VM_1,
        }),
        (0x31, 0x15, _, 0x02) => Ok(Item {
          tag,
          name: "Reference to pacs image",
          vrs: &[ValueRepresentation::UnlimitedText],
          multiplicity: VM_1,
        }),
        (0x31, 0x15, _, 0x03) => Ok(Item {
          tag,
          name: "Pacs examnotes flag",
          vrs: &[ValueRepresentation::CodeString],
          multiplicity: VM_1,
        }),
        _ => Err(()),
      }
    }
    "Vital Images SW 3.4" => match (g0, g1, e0, e1) {
      (0x56, 0x53, _, 0x10) => Ok(Item {
        tag,
        name: "Saved Workflow",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x56, 0x53, _, 0x11) => Ok(Item {
        tag,
        name: "Saved Workflow File Name",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x56, 0x53, _, 0x12) => Ok(Item {
        tag,
        name: "Saved Workflow File Data",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x56, 0x53, _, 0x13) => Ok(Item {
        tag,
        name: "Saved Workflow File Length",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x56, 0x53, _, 0x14) => Ok(Item {
        tag,
        name: "Saved Workflow File Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x56, 0x53, _, 0x15) => Ok(Item {
        tag,
        name: "Image Sequence",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x56, 0x53, _, 0x16) => Ok(Item {
        tag,
        name: "Volume Interpolated Slices",
        vrs: &[ValueRepresentation::SignedLong],
        multiplicity: VM_1,
      }),
      (0x56, 0x53, _, 0x17) => Ok(Item {
        tag,
        name: "Volume SOP Instance UID",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x56, 0x53, _, 0x18) => Ok(Item {
        tag,
        name: "Saved Workflow Mark",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x56, 0x53, _, 0x19) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x56, 0x53, _, 0x22) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x56, 0x53, _, 0x23) => Ok(Item {
        tag,
        name: "Unknown",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "AMI Sequence Annotations_02" => match (g0, g1, e0, e1) {
      (0x31, 0x03, _, 0x10) => Ok(Item {
        tag,
        name: "AMI Annotation Sequence (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x20) => Ok(Item {
        tag,
        name: "AMI Annotation UID (RET)",
        vrs: &[ValueRepresentation::UniqueIdentifier],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x30) => Ok(Item {
        tag,
        name: "AMI Annotation Color (RET)",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x50) => Ok(Item {
        tag,
        name: "AMI Annotation Line Style (RET)",
        vrs: &[ValueRepresentation::CodeString],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x60) => Ok(Item {
        tag,
        name: "AMI Annotation Elements (RET)",
        vrs: &[ValueRepresentation::Sequence],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x70) => Ok(Item {
        tag,
        name: "AMI Annotation Label (RET)",
        vrs: &[ValueRepresentation::ShortString],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x80) => Ok(Item {
        tag,
        name: "AMI Annotation Creator (RET)",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0x90) => Ok(Item {
        tag,
        name: "AMI Annotation Modifiers (RET)",
        vrs: &[ValueRepresentation::PersonName],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0xa0) => Ok(Item {
        tag,
        name: "AMI Annotation Creation Date (RET)",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0xb0) => Ok(Item {
        tag,
        name: "AMI Annotation Creation Time (RET)",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0xc0) => Ok(Item {
        tag,
        name: "AMI Annotation Modification Dates (RET)",
        vrs: &[ValueRepresentation::Date],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0xd0) => Ok(Item {
        tag,
        name: "AMI Annotation Modification Times (RET)",
        vrs: &[ValueRepresentation::Time],
        multiplicity: VM_1,
      }),
      (0x31, 0x03, _, 0xe0) => Ok(Item {
        tag,
        name: "AMI Annotation Frame Number (RET)",
        vrs: &[ValueRepresentation::UnsignedShort],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    "SIEMENS NUMARIS II" => match (g0, g1, e0, e1) {
      (0x7f, 0xe3, _, 0x00) => Ok(Item {
        tag,
        name: "Image Graphics Format Code",
        vrs: &[ValueRepresentation::LongString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x10) => Ok(Item {
        tag,
        name: "Image Graphics",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      (0x7f, 0xe3, _, 0x20) => Ok(Item {
        tag,
        name: "Image Graphics Dummy",
        vrs: &[ValueRepresentation::OtherByteString],
        multiplicity: VM_1,
      }),
      _ => Err(()),
    },
    _ => Err(()),
  }
}

/// Returns the display name for a UID defined in the DICOM standard.
///
#[allow(clippy::result_unit_err)]
pub fn uid_name(uid: &str) -> Result<&'static str, ()> {
  match uid {
    "1.2.840.10008.1.1" => Ok("Verification SOP Class"),
    "1.2.840.10008.1.2" => Ok("Implicit VR Little Endian"),
    "1.2.840.10008.1.2.1" => Ok("Explicit VR Little Endian"),
    "1.2.840.10008.1.2.1.98" => {
      Ok("Encapsulated Uncompressed Explicit VR Little Endian")
    }
    "1.2.840.10008.1.2.1.99" => Ok("Deflated Explicit VR Little Endian"),
    "1.2.840.10008.1.2.2" => Ok("Explicit VR Big Endian"),
    "1.2.840.10008.1.2.4.100" => Ok("MPEG2 Main Profile / Main Level"),
    "1.2.840.10008.1.2.4.100.1" => {
      Ok("Fragmentable MPEG2 Main Profile / Main Level")
    }
    "1.2.840.10008.1.2.4.101" => Ok("MPEG2 Main Profile / High Level"),
    "1.2.840.10008.1.2.4.101.1" => {
      Ok("Fragmentable MPEG2 Main Profile / High Level")
    }
    "1.2.840.10008.1.2.4.102" => {
      Ok("MPEG-4 AVC/H.264 High Profile / Level 4.1")
    }
    "1.2.840.10008.1.2.4.102.1" => {
      Ok("Fragmentable MPEG-4 AVC/H.264 High Profile / Level 4.1")
    }
    "1.2.840.10008.1.2.4.103" => {
      Ok("MPEG-4 AVC/H.264 BD-compatible High Profile / Level 4.1")
    }
    "1.2.840.10008.1.2.4.103.1" => {
      Ok("Fragmentable MPEG-4 AVC/H.264 BD-compatible High Profile / Level 4.1")
    }
    "1.2.840.10008.1.2.4.104" => {
      Ok("MPEG-4 AVC/H.264 High Profile / Level 4.2 For 2D Video")
    }
    "1.2.840.10008.1.2.4.104.1" => {
      Ok("Fragmentable MPEG-4 AVC/H.264 High Profile / Level 4.2 For 2D Video")
    }
    "1.2.840.10008.1.2.4.105" => {
      Ok("MPEG-4 AVC/H.264 High Profile / Level 4.2 For 3D Video")
    }
    "1.2.840.10008.1.2.4.105.1" => {
      Ok("Fragmentable MPEG-4 AVC/H.264 High Profile / Level 4.2 For 3D Video")
    }
    "1.2.840.10008.1.2.4.106" => {
      Ok("MPEG-4 AVC/H.264 Stereo High Profile / Level 4.2")
    }
    "1.2.840.10008.1.2.4.106.1" => {
      Ok("Fragmentable MPEG-4 AVC/H.264 Stereo High Profile / Level 4.2")
    }
    "1.2.840.10008.1.2.4.107" => Ok("HEVC/H.265 Main Profile / Level 5.1"),
    "1.2.840.10008.1.2.4.108" => Ok("HEVC/H.265 Main 10 Profile / Level 5.1"),
    "1.2.840.10008.1.2.4.110" => Ok("JPEG XL Lossless"),
    "1.2.840.10008.1.2.4.111" => Ok("JPEG XL JPEG Recompression"),
    "1.2.840.10008.1.2.4.112" => Ok("JPEG XL"),
    "1.2.840.10008.1.2.4.201" => {
      Ok("High-Throughput JPEG 2000 Image Compression (Lossless Only)")
    }
    "1.2.840.10008.1.2.4.202" => Ok(
      "High-Throughput JPEG 2000 with RPCL Options Image Compression (Lossless Only)",
    ),
    "1.2.840.10008.1.2.4.203" => {
      Ok("High-Throughput JPEG 2000 Image Compression")
    }
    "1.2.840.10008.1.2.4.204" => Ok("JPIP HTJ2K Referenced"),
    "1.2.840.10008.1.2.4.205" => Ok("JPIP HTJ2K Referenced Deflate"),
    "1.2.840.10008.1.2.4.50" => Ok("JPEG Baseline (Process 1)"),
    "1.2.840.10008.1.2.4.51" => Ok("JPEG Extended (Process 2 and 4)"),
    "1.2.840.10008.1.2.4.52" => Ok("JPEG Extended (Process 3 and 5)"),
    "1.2.840.10008.1.2.4.53" => {
      Ok("JPEG Spectral Selection, Non-Hierarchical (Process 6 and 8)")
    }
    "1.2.840.10008.1.2.4.54" => {
      Ok("JPEG Spectral Selection, Non-Hierarchical (Process 7 and 9)")
    }
    "1.2.840.10008.1.2.4.55" => {
      Ok("JPEG Full Progression, Non-Hierarchical (Process 10 and 12)")
    }
    "1.2.840.10008.1.2.4.56" => {
      Ok("JPEG Full Progression, Non-Hierarchical (Process 11 and 13)")
    }
    "1.2.840.10008.1.2.4.57" => {
      Ok("JPEG Lossless, Non-Hierarchical (Process 14)")
    }
    "1.2.840.10008.1.2.4.58" => {
      Ok("JPEG Lossless, Non-Hierarchical (Process 15)")
    }
    "1.2.840.10008.1.2.4.59" => {
      Ok("JPEG Extended, Hierarchical (Process 16 and 18)")
    }
    "1.2.840.10008.1.2.4.60" => {
      Ok("JPEG Extended, Hierarchical (Process 17 and 19)")
    }
    "1.2.840.10008.1.2.4.61" => {
      Ok("JPEG Spectral Selection, Hierarchical (Process 20 and 22)")
    }
    "1.2.840.10008.1.2.4.62" => {
      Ok("JPEG Spectral Selection, Hierarchical (Process 21 and 23)")
    }
    "1.2.840.10008.1.2.4.63" => {
      Ok("JPEG Full Progression, Hierarchical (Process 24 and 26)")
    }
    "1.2.840.10008.1.2.4.64" => {
      Ok("JPEG Full Progression, Hierarchical (Process 25 and 27)")
    }
    "1.2.840.10008.1.2.4.65" => Ok("JPEG Lossless, Hierarchical (Process 28)"),
    "1.2.840.10008.1.2.4.66" => Ok("JPEG Lossless, Hierarchical (Process 29)"),
    "1.2.840.10008.1.2.4.70" => Ok(
      "JPEG Lossless, Non-Hierarchical, First-Order Prediction (Process 14 [Selection Value 1])",
    ),
    "1.2.840.10008.1.2.4.80" => Ok("JPEG-LS Lossless Image Compression"),
    "1.2.840.10008.1.2.4.81" => {
      Ok("JPEG-LS Lossy (Near-Lossless) Image Compression")
    }
    "1.2.840.10008.1.2.4.90" => {
      Ok("JPEG 2000 Image Compression (Lossless Only)")
    }
    "1.2.840.10008.1.2.4.91" => Ok("JPEG 2000 Image Compression"),
    "1.2.840.10008.1.2.4.92" => {
      Ok("JPEG 2000 Part 2 Multi-component Image Compression (Lossless Only)")
    }
    "1.2.840.10008.1.2.4.93" => {
      Ok("JPEG 2000 Part 2 Multi-component Image Compression")
    }
    "1.2.840.10008.1.2.4.94" => Ok("JPIP Referenced"),
    "1.2.840.10008.1.2.4.95" => Ok("JPIP Referenced Deflate"),
    "1.2.840.10008.1.2.5" => Ok("RLE Lossless"),
    "1.2.840.10008.1.2.6.1" => Ok("RFC 2557 MIME encapsulation"),
    "1.2.840.10008.1.2.6.2" => Ok("XML Encoding"),
    "1.2.840.10008.1.2.7.1" => {
      Ok("SMPTE ST 2110-20 Uncompressed Progressive Active Video")
    }
    "1.2.840.10008.1.2.7.2" => {
      Ok("SMPTE ST 2110-20 Uncompressed Interlaced Active Video")
    }
    "1.2.840.10008.1.2.7.3" => Ok("SMPTE ST 2110-30 PCM Digital Audio"),
    "1.2.840.10008.1.20" => Ok("Papyrus 3 Implicit VR Little Endian"),
    "1.2.840.10008.1.20.1" => Ok("Storage Commitment Push Model SOP Class"),
    "1.2.840.10008.1.20.1.1" => {
      Ok("Storage Commitment Push Model SOP Instance")
    }
    "1.2.840.10008.1.20.2" => Ok("Storage Commitment Pull Model SOP Class"),
    "1.2.840.10008.1.20.2.1" => {
      Ok("Storage Commitment Pull Model SOP Instance")
    }
    "1.2.840.10008.1.3.10" => Ok("Media Storage Directory Storage"),
    "1.2.840.10008.1.4.1.1" => Ok("Talairach Brain Atlas Frame of Reference"),
    "1.2.840.10008.1.4.1.10" => Ok("SPM2 GRAY Frame of Reference"),
    "1.2.840.10008.1.4.1.11" => Ok("SPM2 WHITE Frame of Reference"),
    "1.2.840.10008.1.4.1.12" => Ok("SPM2 CSF Frame of Reference"),
    "1.2.840.10008.1.4.1.13" => Ok("SPM2 BRAINMASK Frame of Reference"),
    "1.2.840.10008.1.4.1.14" => Ok("SPM2 AVG305T1 Frame of Reference"),
    "1.2.840.10008.1.4.1.15" => Ok("SPM2 AVG152T1 Frame of Reference"),
    "1.2.840.10008.1.4.1.16" => Ok("SPM2 AVG152T2 Frame of Reference"),
    "1.2.840.10008.1.4.1.17" => Ok("SPM2 AVG152PD Frame of Reference"),
    "1.2.840.10008.1.4.1.18" => Ok("SPM2 SINGLESUBJT1 Frame of Reference"),
    "1.2.840.10008.1.4.1.2" => Ok("SPM2 T1 Frame of Reference"),
    "1.2.840.10008.1.4.1.3" => Ok("SPM2 T2 Frame of Reference"),
    "1.2.840.10008.1.4.1.4" => Ok("SPM2 PD Frame of Reference"),
    "1.2.840.10008.1.4.1.5" => Ok("SPM2 EPI Frame of Reference"),
    "1.2.840.10008.1.4.1.6" => Ok("SPM2 FIL T1 Frame of Reference"),
    "1.2.840.10008.1.4.1.7" => Ok("SPM2 PET Frame of Reference"),
    "1.2.840.10008.1.4.1.8" => Ok("SPM2 TRANSM Frame of Reference"),
    "1.2.840.10008.1.4.1.9" => Ok("SPM2 SPECT Frame of Reference"),
    "1.2.840.10008.1.4.2.1" => Ok("ICBM 452 T1 Frame of Reference"),
    "1.2.840.10008.1.4.2.2" => Ok("ICBM Single Subject MRI Frame of Reference"),
    "1.2.840.10008.1.4.3.1" => {
      Ok("IEC 61217 Fixed Coordinate System Frame of Reference")
    }
    "1.2.840.10008.1.4.3.2" => {
      Ok("Standard Robotic-Arm Coordinate System Frame of Reference")
    }
    "1.2.840.10008.1.4.3.3" => {
      Ok("IEC 61217 Table Top Coordinate System Frame of Reference")
    }
    "1.2.840.10008.1.4.4.1" => Ok("SRI24 Frame of Reference"),
    "1.2.840.10008.1.4.5.1" => Ok("Colin27 Frame of Reference"),
    "1.2.840.10008.1.4.6.1" => Ok("LPBA40/AIR Frame of Reference"),
    "1.2.840.10008.1.4.6.2" => Ok("LPBA40/FLIRT Frame of Reference"),
    "1.2.840.10008.1.4.6.3" => Ok("LPBA40/SPM5 Frame of Reference"),
    "1.2.840.10008.1.40" => Ok("Procedural Event Logging SOP Class"),
    "1.2.840.10008.1.40.1" => Ok("Procedural Event Logging SOP Instance"),
    "1.2.840.10008.1.42" => Ok("Substance Administration Logging SOP Class"),
    "1.2.840.10008.1.42.1" => {
      Ok("Substance Administration Logging SOP Instance")
    }
    "1.2.840.10008.1.5.1" => Ok("Hot Iron Color Palette SOP Instance"),
    "1.2.840.10008.1.5.2" => Ok("PET Color Palette SOP Instance"),
    "1.2.840.10008.1.5.3" => Ok("Hot Metal Blue Color Palette SOP Instance"),
    "1.2.840.10008.1.5.4" => Ok("PET 20 Step Color Palette SOP Instance"),
    "1.2.840.10008.1.5.5" => Ok("Spring Color Palette SOP Instance"),
    "1.2.840.10008.1.5.6" => Ok("Summer Color Palette SOP Instance"),
    "1.2.840.10008.1.5.7" => Ok("Fall Color Palette SOP Instance"),
    "1.2.840.10008.1.5.8" => Ok("Winter Color Palette SOP Instance"),
    "1.2.840.10008.1.9" => Ok("Basic Study Content Notification SOP Class"),
    "1.2.840.10008.10.1" => {
      Ok("Video Endoscopic Image Real-Time Communication")
    }
    "1.2.840.10008.10.2" => {
      Ok("Video Photographic Image Real-Time Communication")
    }
    "1.2.840.10008.10.3" => Ok("Audio Waveform Real-Time Communication"),
    "1.2.840.10008.10.4" => {
      Ok("Rendition Selection Document Real-Time Communication")
    }
    "1.2.840.10008.15.0.3.1" => Ok("dicomDeviceName"),
    "1.2.840.10008.15.0.3.10" => Ok("dicomAssociationInitiator"),
    "1.2.840.10008.15.0.3.11" => Ok("dicomAssociationAcceptor"),
    "1.2.840.10008.15.0.3.12" => Ok("dicomHostname"),
    "1.2.840.10008.15.0.3.13" => Ok("dicomPort"),
    "1.2.840.10008.15.0.3.14" => Ok("dicomSOPClass"),
    "1.2.840.10008.15.0.3.15" => Ok("dicomTransferRole"),
    "1.2.840.10008.15.0.3.16" => Ok("dicomTransferSyntax"),
    "1.2.840.10008.15.0.3.17" => Ok("dicomPrimaryDeviceType"),
    "1.2.840.10008.15.0.3.18" => Ok("dicomRelatedDeviceReference"),
    "1.2.840.10008.15.0.3.19" => Ok("dicomPreferredCalledAETitle"),
    "1.2.840.10008.15.0.3.2" => Ok("dicomDescription"),
    "1.2.840.10008.15.0.3.20" => Ok("dicomTLSCyphersuite"),
    "1.2.840.10008.15.0.3.21" => Ok("dicomAuthorizedNodeCertificateReference"),
    "1.2.840.10008.15.0.3.22" => Ok("dicomThisNodeCertificateReference"),
    "1.2.840.10008.15.0.3.23" => Ok("dicomInstalled"),
    "1.2.840.10008.15.0.3.24" => Ok("dicomStationName"),
    "1.2.840.10008.15.0.3.25" => Ok("dicomDeviceSerialNumber"),
    "1.2.840.10008.15.0.3.26" => Ok("dicomInstitutionName"),
    "1.2.840.10008.15.0.3.27" => Ok("dicomInstitutionAddress"),
    "1.2.840.10008.15.0.3.28" => Ok("dicomInstitutionDepartmentName"),
    "1.2.840.10008.15.0.3.29" => Ok("dicomIssuerOfPatientID"),
    "1.2.840.10008.15.0.3.3" => Ok("dicomManufacturer"),
    "1.2.840.10008.15.0.3.30" => Ok("dicomPreferredCallingAETitle"),
    "1.2.840.10008.15.0.3.31" => Ok("dicomSupportedCharacterSet"),
    "1.2.840.10008.15.0.3.4" => Ok("dicomManufacturerModelName"),
    "1.2.840.10008.15.0.3.5" => Ok("dicomSoftwareVersion"),
    "1.2.840.10008.15.0.3.6" => Ok("dicomVendorData"),
    "1.2.840.10008.15.0.3.7" => Ok("dicomAETitle"),
    "1.2.840.10008.15.0.3.8" => Ok("dicomNetworkConnectionReference"),
    "1.2.840.10008.15.0.3.9" => Ok("dicomApplicationCluster"),
    "1.2.840.10008.15.0.4.1" => Ok("dicomConfigurationRoot"),
    "1.2.840.10008.15.0.4.2" => Ok("dicomDevicesRoot"),
    "1.2.840.10008.15.0.4.3" => Ok("dicomUniqueAETitlesRegistryRoot"),
    "1.2.840.10008.15.0.4.4" => Ok("dicomDevice"),
    "1.2.840.10008.15.0.4.5" => Ok("dicomNetworkAE"),
    "1.2.840.10008.15.0.4.6" => Ok("dicomNetworkConnection"),
    "1.2.840.10008.15.0.4.7" => Ok("dicomUniqueAETitle"),
    "1.2.840.10008.15.0.4.8" => Ok("dicomTransferCapability"),
    "1.2.840.10008.15.1.1" => Ok("Universal Coordinated Time"),
    "1.2.840.10008.2.16.10" => Ok("Dublin Core"),
    "1.2.840.10008.2.16.11" => {
      Ok("New York University Melanoma Clinical Cooperative Group")
    }
    "1.2.840.10008.2.16.12" => Ok(
      "Mayo Clinic Non-radiological Images Specific Body Structure Anatomical Surface Region Guide",
    ),
    "1.2.840.10008.2.16.13" => Ok("Image Biomarker Standardisation Initiative"),
    "1.2.840.10008.2.16.14" => Ok("Radiomics Ontology"),
    "1.2.840.10008.2.16.15" => Ok("RadElement"),
    "1.2.840.10008.2.16.16" => Ok("ICD-11"),
    "1.2.840.10008.2.16.17" => {
      Ok("Unified numbering system (UNS) for metals and alloys")
    }
    "1.2.840.10008.2.16.18" => Ok("Research Resource Identification"),
    "1.2.840.10008.2.16.4" => Ok("DICOM Controlled Terminology"),
    "1.2.840.10008.2.16.5" => Ok("Adult Mouse Anatomy Ontology"),
    "1.2.840.10008.2.16.6" => Ok("Uberon Ontology"),
    "1.2.840.10008.2.16.7" => Ok(
      "Integrated Taxonomic Information System (ITIS) Taxonomic Serial Number (TSN)",
    ),
    "1.2.840.10008.2.16.8" => Ok("Mouse Genome Initiative (MGI)"),
    "1.2.840.10008.2.16.9" => Ok("PubChem Compound CID"),
    "1.2.840.10008.2.6.1" => Ok("DICOM UID Registry"),
    "1.2.840.10008.3.1.1.1" => Ok("DICOM Application Context Name"),
    "1.2.840.10008.3.1.2.1.1" => Ok("Detached Patient Management SOP Class"),
    "1.2.840.10008.3.1.2.1.4" => {
      Ok("Detached Patient Management Meta SOP Class")
    }
    "1.2.840.10008.3.1.2.2.1" => Ok("Detached Visit Management SOP Class"),
    "1.2.840.10008.3.1.2.3.1" => Ok("Detached Study Management SOP Class"),
    "1.2.840.10008.3.1.2.3.2" => Ok("Study Component Management SOP Class"),
    "1.2.840.10008.3.1.2.3.3" => {
      Ok("Modality Performed Procedure Step SOP Class")
    }
    "1.2.840.10008.3.1.2.3.4" => {
      Ok("Modality Performed Procedure Step Retrieve SOP Class")
    }
    "1.2.840.10008.3.1.2.3.5" => {
      Ok("Modality Performed Procedure Step Notification SOP Class")
    }
    "1.2.840.10008.3.1.2.5.1" => Ok("Detached Results Management SOP Class"),
    "1.2.840.10008.3.1.2.5.4" => {
      Ok("Detached Results Management Meta SOP Class")
    }
    "1.2.840.10008.3.1.2.5.5" => Ok("Detached Study Management Meta SOP Class"),
    "1.2.840.10008.3.1.2.6.1" => {
      Ok("Detached Interpretation Management SOP Class")
    }
    "1.2.840.10008.4.2" => Ok("Storage Service Class"),
    "1.2.840.10008.5.1.1.1" => Ok("Basic Film Session SOP Class"),
    "1.2.840.10008.5.1.1.14" => Ok("Print Job SOP Class"),
    "1.2.840.10008.5.1.1.15" => Ok("Basic Annotation Box SOP Class"),
    "1.2.840.10008.5.1.1.16" => Ok("Printer SOP Class"),
    "1.2.840.10008.5.1.1.16.376" => {
      Ok("Printer Configuration Retrieval SOP Class")
    }
    "1.2.840.10008.5.1.1.17" => Ok("Printer SOP Instance"),
    "1.2.840.10008.5.1.1.17.376" => {
      Ok("Printer Configuration Retrieval SOP Instance")
    }
    "1.2.840.10008.5.1.1.18" => {
      Ok("Basic Color Print Management Meta SOP Class")
    }
    "1.2.840.10008.5.1.1.18.1" => {
      Ok("Referenced Color Print Management Meta SOP Class")
    }
    "1.2.840.10008.5.1.1.2" => Ok("Basic Film Box SOP Class"),
    "1.2.840.10008.5.1.1.22" => Ok("VOI LUT Box SOP Class"),
    "1.2.840.10008.5.1.1.23" => Ok("Presentation LUT SOP Class"),
    "1.2.840.10008.5.1.1.24" => Ok("Image Overlay Box SOP Class"),
    "1.2.840.10008.5.1.1.24.1" => Ok("Basic Print Image Overlay Box SOP Class"),
    "1.2.840.10008.5.1.1.25" => Ok("Print Queue SOP Instance"),
    "1.2.840.10008.5.1.1.26" => Ok("Print Queue Management SOP Class"),
    "1.2.840.10008.5.1.1.27" => Ok("Stored Print Storage SOP Class"),
    "1.2.840.10008.5.1.1.29" => {
      Ok("Hardcopy Grayscale Image Storage SOP Class")
    }
    "1.2.840.10008.5.1.1.30" => Ok("Hardcopy Color Image Storage SOP Class"),
    "1.2.840.10008.5.1.1.31" => Ok("Pull Print Request SOP Class"),
    "1.2.840.10008.5.1.1.32" => {
      Ok("Pull Stored Print Management Meta SOP Class")
    }
    "1.2.840.10008.5.1.1.33" => Ok("Media Creation Management SOP Class UID"),
    "1.2.840.10008.5.1.1.4" => Ok("Basic Grayscale Image Box SOP Class"),
    "1.2.840.10008.5.1.1.4.1" => Ok("Basic Color Image Box SOP Class"),
    "1.2.840.10008.5.1.1.4.2" => Ok("Referenced Image Box SOP Class"),
    "1.2.840.10008.5.1.1.40" => Ok("Display System SOP Class"),
    "1.2.840.10008.5.1.1.40.1" => Ok("Display System SOP Instance"),
    "1.2.840.10008.5.1.1.9" => {
      Ok("Basic Grayscale Print Management Meta SOP Class")
    }
    "1.2.840.10008.5.1.1.9.1" => {
      Ok("Referenced Grayscale Print Management Meta SOP Class")
    }
    "1.2.840.10008.5.1.4.1.1.1" => Ok("Computed Radiography Image Storage"),
    "1.2.840.10008.5.1.4.1.1.1.1" => {
      Ok("Digital X-Ray Image Storage - For Presentation")
    }
    "1.2.840.10008.5.1.4.1.1.1.1.1" => {
      Ok("Digital X-Ray Image Storage - For Processing")
    }
    "1.2.840.10008.5.1.4.1.1.1.2" => {
      Ok("Digital Mammography X-Ray Image Storage - For Presentation")
    }
    "1.2.840.10008.5.1.4.1.1.1.2.1" => {
      Ok("Digital Mammography X-Ray Image Storage - For Processing")
    }
    "1.2.840.10008.5.1.4.1.1.1.3" => {
      Ok("Digital Intra-Oral X-Ray Image Storage - For Presentation")
    }
    "1.2.840.10008.5.1.4.1.1.1.3.1" => {
      Ok("Digital Intra-Oral X-Ray Image Storage - For Processing")
    }
    "1.2.840.10008.5.1.4.1.1.10" => Ok("Standalone Modality LUT Storage"),
    "1.2.840.10008.5.1.4.1.1.104.1" => Ok("Encapsulated PDF Storage"),
    "1.2.840.10008.5.1.4.1.1.104.2" => Ok("Encapsulated CDA Storage"),
    "1.2.840.10008.5.1.4.1.1.104.3" => Ok("Encapsulated STL Storage"),
    "1.2.840.10008.5.1.4.1.1.104.4" => Ok("Encapsulated OBJ Storage"),
    "1.2.840.10008.5.1.4.1.1.104.5" => Ok("Encapsulated MTL Storage"),
    "1.2.840.10008.5.1.4.1.1.11" => Ok("Standalone VOI LUT Storage"),
    "1.2.840.10008.5.1.4.1.1.11.1" => {
      Ok("Grayscale Softcopy Presentation State Storage")
    }
    "1.2.840.10008.5.1.4.1.1.11.10" => {
      Ok("Segmented Volume Rendering Volumetric Presentation State Storage")
    }
    "1.2.840.10008.5.1.4.1.1.11.11" => {
      Ok("Multiple Volume Rendering Volumetric Presentation State Storage")
    }
    "1.2.840.10008.5.1.4.1.1.11.12" => {
      Ok("Variable Modality LUT Softcopy Presentation State Storage")
    }
    "1.2.840.10008.5.1.4.1.1.11.2" => {
      Ok("Color Softcopy Presentation State Storage")
    }
    "1.2.840.10008.5.1.4.1.1.11.3" => {
      Ok("Pseudo-Color Softcopy Presentation State Storage")
    }
    "1.2.840.10008.5.1.4.1.1.11.4" => {
      Ok("Blending Softcopy Presentation State Storage")
    }
    "1.2.840.10008.5.1.4.1.1.11.5" => {
      Ok("XA/XRF Grayscale Softcopy Presentation State Storage")
    }
    "1.2.840.10008.5.1.4.1.1.11.6" => {
      Ok("Grayscale Planar MPR Volumetric Presentation State Storage")
    }
    "1.2.840.10008.5.1.4.1.1.11.7" => {
      Ok("Compositing Planar MPR Volumetric Presentation State Storage")
    }
    "1.2.840.10008.5.1.4.1.1.11.8" => {
      Ok("Advanced Blending Presentation State Storage")
    }
    "1.2.840.10008.5.1.4.1.1.11.9" => {
      Ok("Volume Rendering Volumetric Presentation State Storage")
    }
    "1.2.840.10008.5.1.4.1.1.12.1" => Ok("X-Ray Angiographic Image Storage"),
    "1.2.840.10008.5.1.4.1.1.12.1.1" => Ok("Enhanced XA Image Storage"),
    "1.2.840.10008.5.1.4.1.1.12.2" => {
      Ok("X-Ray Radiofluoroscopic Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.12.2.1" => Ok("Enhanced XRF Image Storage"),
    "1.2.840.10008.5.1.4.1.1.12.3" => {
      Ok("X-Ray Angiographic Bi-Plane Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.12.77" => Ok(""),
    "1.2.840.10008.5.1.4.1.1.128" => {
      Ok("Positron Emission Tomography Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.128.1" => {
      Ok("Legacy Converted Enhanced PET Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.129" => Ok("Standalone PET Curve Storage"),
    "1.2.840.10008.5.1.4.1.1.13.1.1" => {
      Ok("X-Ray 3D Angiographic Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.13.1.2" => {
      Ok("X-Ray 3D Craniofacial Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.13.1.3" => {
      Ok("Breast Tomosynthesis Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.13.1.4" => {
      Ok("Breast Projection X-Ray Image Storage - For Presentation")
    }
    "1.2.840.10008.5.1.4.1.1.13.1.5" => {
      Ok("Breast Projection X-Ray Image Storage - For Processing")
    }
    "1.2.840.10008.5.1.4.1.1.130" => Ok("Enhanced PET Image Storage"),
    "1.2.840.10008.5.1.4.1.1.131" => Ok("Basic Structured Display Storage"),
    "1.2.840.10008.5.1.4.1.1.14.1" => Ok(
      "Intravascular Optical Coherence Tomography Image Storage - For Presentation",
    ),
    "1.2.840.10008.5.1.4.1.1.14.2" => Ok(
      "Intravascular Optical Coherence Tomography Image Storage - For Processing",
    ),
    "1.2.840.10008.5.1.4.1.1.2" => Ok("CT Image Storage"),
    "1.2.840.10008.5.1.4.1.1.2.1" => Ok("Enhanced CT Image Storage"),
    "1.2.840.10008.5.1.4.1.1.2.2" => {
      Ok("Legacy Converted Enhanced CT Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.20" => Ok("Nuclear Medicine Image Storage"),
    "1.2.840.10008.5.1.4.1.1.200.1" => {
      Ok("CT Defined Procedure Protocol Storage")
    }
    "1.2.840.10008.5.1.4.1.1.200.2" => {
      Ok("CT Performed Procedure Protocol Storage")
    }
    "1.2.840.10008.5.1.4.1.1.200.3" => Ok("Protocol Approval Storage"),
    "1.2.840.10008.5.1.4.1.1.200.4" => {
      Ok("Protocol Approval Information Model - FIND")
    }
    "1.2.840.10008.5.1.4.1.1.200.5" => {
      Ok("Protocol Approval Information Model - MOVE")
    }
    "1.2.840.10008.5.1.4.1.1.200.6" => {
      Ok("Protocol Approval Information Model - GET")
    }
    "1.2.840.10008.5.1.4.1.1.200.7" => {
      Ok("XA Defined Procedure Protocol Storage")
    }
    "1.2.840.10008.5.1.4.1.1.200.8" => {
      Ok("XA Performed Procedure Protocol Storage")
    }
    "1.2.840.10008.5.1.4.1.1.201.1" => Ok("Inventory Storage"),
    "1.2.840.10008.5.1.4.1.1.201.1.1" => Ok("Storage Management SOP Instance"),
    "1.2.840.10008.5.1.4.1.1.201.2" => Ok("Inventory - FIND"),
    "1.2.840.10008.5.1.4.1.1.201.3" => Ok("Inventory - MOVE"),
    "1.2.840.10008.5.1.4.1.1.201.4" => Ok("Inventory - GET"),
    "1.2.840.10008.5.1.4.1.1.201.5" => Ok("Inventory Creation"),
    "1.2.840.10008.5.1.4.1.1.201.6" => Ok("Repository Query"),
    "1.2.840.10008.5.1.4.1.1.3" => Ok("Ultrasound Multi-frame Image Storage"),
    "1.2.840.10008.5.1.4.1.1.3.1" => Ok("Ultrasound Multi-frame Image Storage"),
    "1.2.840.10008.5.1.4.1.1.30" => Ok("Parametric Map Storage"),
    "1.2.840.10008.5.1.4.1.1.4" => Ok("MR Image Storage"),
    "1.2.840.10008.5.1.4.1.1.4.1" => Ok("Enhanced MR Image Storage"),
    "1.2.840.10008.5.1.4.1.1.4.2" => Ok("MR Spectroscopy Storage"),
    "1.2.840.10008.5.1.4.1.1.4.3" => Ok("Enhanced MR Color Image Storage"),
    "1.2.840.10008.5.1.4.1.1.4.4" => {
      Ok("Legacy Converted Enhanced MR Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.40" => Ok(""),
    "1.2.840.10008.5.1.4.1.1.481.1" => Ok("RT Image Storage"),
    "1.2.840.10008.5.1.4.1.1.481.10" => Ok("RT Physician Intent Storage"),
    "1.2.840.10008.5.1.4.1.1.481.11" => Ok("RT Segment Annotation Storage"),
    "1.2.840.10008.5.1.4.1.1.481.12" => Ok("RT Radiation Set Storage"),
    "1.2.840.10008.5.1.4.1.1.481.13" => {
      Ok("C-Arm Photon-Electron Radiation Storage")
    }
    "1.2.840.10008.5.1.4.1.1.481.14" => Ok("Tomotherapeutic Radiation Storage"),
    "1.2.840.10008.5.1.4.1.1.481.15" => Ok("Robotic-Arm Radiation Storage"),
    "1.2.840.10008.5.1.4.1.1.481.16" => Ok("RT Radiation Record Set Storage"),
    "1.2.840.10008.5.1.4.1.1.481.17" => {
      Ok("RT Radiation Salvage Record Storage")
    }
    "1.2.840.10008.5.1.4.1.1.481.18" => {
      Ok("Tomotherapeutic Radiation Record Storage")
    }
    "1.2.840.10008.5.1.4.1.1.481.19" => {
      Ok("C-Arm Photon-Electron Radiation Record Storage")
    }
    "1.2.840.10008.5.1.4.1.1.481.2" => Ok("RT Dose Storage"),
    "1.2.840.10008.5.1.4.1.1.481.20" => Ok("Robotic Radiation Record Storage"),
    "1.2.840.10008.5.1.4.1.1.481.21" => {
      Ok("RT Radiation Set Delivery Instruction Storage")
    }
    "1.2.840.10008.5.1.4.1.1.481.22" => Ok("RT Treatment Preparation Storage"),
    "1.2.840.10008.5.1.4.1.1.481.23" => Ok("Enhanced RT Image Storage"),
    "1.2.840.10008.5.1.4.1.1.481.24" => {
      Ok("Enhanced Continuous RT Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.481.25" => {
      Ok("RT Patient Position Acquisition Instruction Storage")
    }
    "1.2.840.10008.5.1.4.1.1.481.3" => Ok("RT Structure Set Storage"),
    "1.2.840.10008.5.1.4.1.1.481.4" => Ok("RT Beams Treatment Record Storage"),
    "1.2.840.10008.5.1.4.1.1.481.5" => Ok("RT Plan Storage"),
    "1.2.840.10008.5.1.4.1.1.481.6" => Ok("RT Brachy Treatment Record Storage"),
    "1.2.840.10008.5.1.4.1.1.481.7" => {
      Ok("RT Treatment Summary Record Storage")
    }
    "1.2.840.10008.5.1.4.1.1.481.8" => Ok("RT Ion Plan Storage"),
    "1.2.840.10008.5.1.4.1.1.481.9" => {
      Ok("RT Ion Beams Treatment Record Storage")
    }
    "1.2.840.10008.5.1.4.1.1.5" => Ok("Nuclear Medicine Image Storage"),
    "1.2.840.10008.5.1.4.1.1.501.1" => Ok("DICOS CT Image Storage"),
    "1.2.840.10008.5.1.4.1.1.501.2.1" => {
      Ok("DICOS Digital X-Ray Image Storage - For Presentation")
    }
    "1.2.840.10008.5.1.4.1.1.501.2.2" => {
      Ok("DICOS Digital X-Ray Image Storage - For Processing")
    }
    "1.2.840.10008.5.1.4.1.1.501.3" => {
      Ok("DICOS Threat Detection Report Storage")
    }
    "1.2.840.10008.5.1.4.1.1.501.4" => Ok("DICOS 2D AIT Storage"),
    "1.2.840.10008.5.1.4.1.1.501.5" => Ok("DICOS 3D AIT Storage"),
    "1.2.840.10008.5.1.4.1.1.501.6" => {
      Ok("DICOS Quadrupole Resonance (QR) Storage")
    }
    "1.2.840.10008.5.1.4.1.1.6" => Ok("Ultrasound Image Storage"),
    "1.2.840.10008.5.1.4.1.1.6.1" => Ok("Ultrasound Image Storage"),
    "1.2.840.10008.5.1.4.1.1.6.2" => Ok("Enhanced US Volume Storage"),
    "1.2.840.10008.5.1.4.1.1.6.3" => Ok("Photoacoustic Image Storage"),
    "1.2.840.10008.5.1.4.1.1.601.1" => Ok("Eddy Current Image Storage"),
    "1.2.840.10008.5.1.4.1.1.601.2" => {
      Ok("Eddy Current Multi-frame Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.66" => Ok("Raw Data Storage"),
    "1.2.840.10008.5.1.4.1.1.66.1" => Ok("Spatial Registration Storage"),
    "1.2.840.10008.5.1.4.1.1.66.2" => Ok("Spatial Fiducials Storage"),
    "1.2.840.10008.5.1.4.1.1.66.3" => {
      Ok("Deformable Spatial Registration Storage")
    }
    "1.2.840.10008.5.1.4.1.1.66.4" => Ok("Segmentation Storage"),
    "1.2.840.10008.5.1.4.1.1.66.5" => Ok("Surface Segmentation Storage"),
    "1.2.840.10008.5.1.4.1.1.66.6" => Ok("Tractography Results Storage"),
    "1.2.840.10008.5.1.4.1.1.67" => Ok("Real World Value Mapping Storage"),
    "1.2.840.10008.5.1.4.1.1.68.1" => Ok("Surface Scan Mesh Storage"),
    "1.2.840.10008.5.1.4.1.1.68.2" => Ok("Surface Scan Point Cloud Storage"),
    "1.2.840.10008.5.1.4.1.1.7" => Ok("Secondary Capture Image Storage"),
    "1.2.840.10008.5.1.4.1.1.7.1" => {
      Ok("Multi-frame Single Bit Secondary Capture Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.7.2" => {
      Ok("Multi-frame Grayscale Byte Secondary Capture Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.7.3" => {
      Ok("Multi-frame Grayscale Word Secondary Capture Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.7.4" => {
      Ok("Multi-frame True Color Secondary Capture Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.77.1" => Ok("VL Image Storage - Trial"),
    "1.2.840.10008.5.1.4.1.1.77.1.1" => Ok("VL Endoscopic Image Storage"),
    "1.2.840.10008.5.1.4.1.1.77.1.1.1" => Ok("Video Endoscopic Image Storage"),
    "1.2.840.10008.5.1.4.1.1.77.1.2" => Ok("VL Microscopic Image Storage"),
    "1.2.840.10008.5.1.4.1.1.77.1.2.1" => Ok("Video Microscopic Image Storage"),
    "1.2.840.10008.5.1.4.1.1.77.1.3" => {
      Ok("VL Slide-Coordinates Microscopic Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.77.1.4" => Ok("VL Photographic Image Storage"),
    "1.2.840.10008.5.1.4.1.1.77.1.4.1" => {
      Ok("Video Photographic Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.77.1.5.1" => {
      Ok("Ophthalmic Photography 8 Bit Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.77.1.5.2" => {
      Ok("Ophthalmic Photography 16 Bit Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.77.1.5.3" => {
      Ok("Stereometric Relationship Storage")
    }
    "1.2.840.10008.5.1.4.1.1.77.1.5.4" => {
      Ok("Ophthalmic Tomography Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.77.1.5.5" => Ok(
      "Wide Field Ophthalmic Photography Stereographic Projection Image Storage",
    ),
    "1.2.840.10008.5.1.4.1.1.77.1.5.6" => {
      Ok("Wide Field Ophthalmic Photography 3D Coordinates Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.77.1.5.7" => {
      Ok("Ophthalmic Optical Coherence Tomography En Face Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.77.1.5.8" => Ok(
      "Ophthalmic Optical Coherence Tomography B-scan Volume Analysis Storage",
    ),
    "1.2.840.10008.5.1.4.1.1.77.1.6" => {
      Ok("VL Whole Slide Microscopy Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.77.1.7" => {
      Ok("Dermoscopic Photography Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.77.1.8" => Ok("Confocal Microscopy Image Storage"),
    "1.2.840.10008.5.1.4.1.1.77.1.9" => {
      Ok("Confocal Microscopy Tiled Pyramidal Image Storage")
    }
    "1.2.840.10008.5.1.4.1.1.77.2" => {
      Ok("VL Multi-frame Image Storage - Trial")
    }
    "1.2.840.10008.5.1.4.1.1.78.1" => Ok("Lensometry Measurements Storage"),
    "1.2.840.10008.5.1.4.1.1.78.2" => Ok("Autorefraction Measurements Storage"),
    "1.2.840.10008.5.1.4.1.1.78.3" => Ok("Keratometry Measurements Storage"),
    "1.2.840.10008.5.1.4.1.1.78.4" => {
      Ok("Subjective Refraction Measurements Storage")
    }
    "1.2.840.10008.5.1.4.1.1.78.5" => Ok("Visual Acuity Measurements Storage"),
    "1.2.840.10008.5.1.4.1.1.78.6" => {
      Ok("Spectacle Prescription Report Storage")
    }
    "1.2.840.10008.5.1.4.1.1.78.7" => {
      Ok("Ophthalmic Axial Measurements Storage")
    }
    "1.2.840.10008.5.1.4.1.1.78.8" => {
      Ok("Intraocular Lens Calculations Storage")
    }
    "1.2.840.10008.5.1.4.1.1.79.1" => {
      Ok("Macular Grid Thickness and Volume Report Storage")
    }
    "1.2.840.10008.5.1.4.1.1.8" => Ok("Standalone Overlay Storage"),
    "1.2.840.10008.5.1.4.1.1.80.1" => {
      Ok("Ophthalmic Visual Field Static Perimetry Measurements Storage")
    }
    "1.2.840.10008.5.1.4.1.1.81.1" => Ok("Ophthalmic Thickness Map Storage"),
    "1.2.840.10008.5.1.4.1.1.82.1" => Ok("Corneal Topography Map Storage"),
    "1.2.840.10008.5.1.4.1.1.88.1" => Ok("Text SR Storage - Trial"),
    "1.2.840.10008.5.1.4.1.1.88.11" => Ok("Basic Text SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.2" => Ok("Audio SR Storage - Trial"),
    "1.2.840.10008.5.1.4.1.1.88.22" => Ok("Enhanced SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.3" => Ok("Detail SR Storage - Trial"),
    "1.2.840.10008.5.1.4.1.1.88.33" => Ok("Comprehensive SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.34" => Ok("Comprehensive 3D SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.35" => Ok("Extensible SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.4" => Ok("Comprehensive SR Storage - Trial"),
    "1.2.840.10008.5.1.4.1.1.88.40" => Ok("Procedure Log Storage"),
    "1.2.840.10008.5.1.4.1.1.88.50" => Ok("Mammography CAD SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.59" => {
      Ok("Key Object Selection Document Storage")
    }
    "1.2.840.10008.5.1.4.1.1.88.65" => Ok("Chest CAD SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.67" => Ok("X-Ray Radiation Dose SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.68" => {
      Ok("Radiopharmaceutical Radiation Dose SR Storage")
    }
    "1.2.840.10008.5.1.4.1.1.88.69" => Ok("Colon CAD SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.70" => Ok("Implantation Plan SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.71" => Ok("Acquisition Context SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.72" => Ok("Simplified Adult Echo SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.73" => Ok("Patient Radiation Dose SR Storage"),
    "1.2.840.10008.5.1.4.1.1.88.74" => {
      Ok("Planned Imaging Agent Administration SR Storage")
    }
    "1.2.840.10008.5.1.4.1.1.88.75" => {
      Ok("Performed Imaging Agent Administration SR Storage")
    }
    "1.2.840.10008.5.1.4.1.1.88.76" => {
      Ok("Enhanced X-Ray Radiation Dose SR Storage")
    }
    "1.2.840.10008.5.1.4.1.1.9" => Ok("Standalone Curve Storage"),
    "1.2.840.10008.5.1.4.1.1.9.1" => Ok("Waveform Storage - Trial"),
    "1.2.840.10008.5.1.4.1.1.9.1.1" => Ok("12-lead ECG Waveform Storage"),
    "1.2.840.10008.5.1.4.1.1.9.1.2" => Ok("General ECG Waveform Storage"),
    "1.2.840.10008.5.1.4.1.1.9.1.3" => Ok("Ambulatory ECG Waveform Storage"),
    "1.2.840.10008.5.1.4.1.1.9.1.4" => {
      Ok("General 32-bit ECG Waveform Storage")
    }
    "1.2.840.10008.5.1.4.1.1.9.2.1" => Ok("Hemodynamic Waveform Storage"),
    "1.2.840.10008.5.1.4.1.1.9.3.1" => {
      Ok("Cardiac Electrophysiology Waveform Storage")
    }
    "1.2.840.10008.5.1.4.1.1.9.4.1" => Ok("Basic Voice Audio Waveform Storage"),
    "1.2.840.10008.5.1.4.1.1.9.4.2" => Ok("General Audio Waveform Storage"),
    "1.2.840.10008.5.1.4.1.1.9.5.1" => Ok("Arterial Pulse Waveform Storage"),
    "1.2.840.10008.5.1.4.1.1.9.6.1" => Ok("Respiratory Waveform Storage"),
    "1.2.840.10008.5.1.4.1.1.9.6.2" => {
      Ok("Multi-channel Respiratory Waveform Storage")
    }
    "1.2.840.10008.5.1.4.1.1.9.7.1" => {
      Ok("Routine Scalp Electroencephalogram Waveform Storage")
    }
    "1.2.840.10008.5.1.4.1.1.9.7.2" => Ok("Electromyogram Waveform Storage"),
    "1.2.840.10008.5.1.4.1.1.9.7.3" => Ok("Electrooculogram Waveform Storage"),
    "1.2.840.10008.5.1.4.1.1.9.7.4" => {
      Ok("Sleep Electroencephalogram Waveform Storage")
    }
    "1.2.840.10008.5.1.4.1.1.9.8.1" => Ok("Body Position Waveform Storage"),
    "1.2.840.10008.5.1.4.1.1.90.1" => Ok("Content Assessment Results Storage"),
    "1.2.840.10008.5.1.4.1.1.91.1" => {
      Ok("Microscopy Bulk Simple Annotations Storage")
    }
    "1.2.840.10008.5.1.4.1.2.1.1" => {
      Ok("Patient Root Query/Retrieve Information Model - FIND")
    }
    "1.2.840.10008.5.1.4.1.2.1.2" => {
      Ok("Patient Root Query/Retrieve Information Model - MOVE")
    }
    "1.2.840.10008.5.1.4.1.2.1.3" => {
      Ok("Patient Root Query/Retrieve Information Model - GET")
    }
    "1.2.840.10008.5.1.4.1.2.2.1" => {
      Ok("Study Root Query/Retrieve Information Model - FIND")
    }
    "1.2.840.10008.5.1.4.1.2.2.2" => {
      Ok("Study Root Query/Retrieve Information Model - MOVE")
    }
    "1.2.840.10008.5.1.4.1.2.2.3" => {
      Ok("Study Root Query/Retrieve Information Model - GET")
    }
    "1.2.840.10008.5.1.4.1.2.3.1" => {
      Ok("Patient/Study Only Query/Retrieve Information Model - FIND")
    }
    "1.2.840.10008.5.1.4.1.2.3.2" => {
      Ok("Patient/Study Only Query/Retrieve Information Model - MOVE")
    }
    "1.2.840.10008.5.1.4.1.2.3.3" => {
      Ok("Patient/Study Only Query/Retrieve Information Model - GET")
    }
    "1.2.840.10008.5.1.4.1.2.4.2" => {
      Ok("Composite Instance Root Retrieve - MOVE")
    }
    "1.2.840.10008.5.1.4.1.2.4.3" => {
      Ok("Composite Instance Root Retrieve - GET")
    }
    "1.2.840.10008.5.1.4.1.2.5.3" => {
      Ok("Composite Instance Retrieve Without Bulk Data - GET")
    }
    "1.2.840.10008.5.1.4.20.1" => {
      Ok("Defined Procedure Protocol Information Model - FIND")
    }
    "1.2.840.10008.5.1.4.20.2" => {
      Ok("Defined Procedure Protocol Information Model - MOVE")
    }
    "1.2.840.10008.5.1.4.20.3" => {
      Ok("Defined Procedure Protocol Information Model - GET")
    }
    "1.2.840.10008.5.1.4.31" => {
      Ok("Modality Worklist Information Model - FIND")
    }
    "1.2.840.10008.5.1.4.32" => {
      Ok("General Purpose Worklist Management Meta SOP Class")
    }
    "1.2.840.10008.5.1.4.32.1" => {
      Ok("General Purpose Worklist Information Model - FIND")
    }
    "1.2.840.10008.5.1.4.32.2" => {
      Ok("General Purpose Scheduled Procedure Step SOP Class")
    }
    "1.2.840.10008.5.1.4.32.3" => {
      Ok("General Purpose Performed Procedure Step SOP Class")
    }
    "1.2.840.10008.5.1.4.33" => {
      Ok("Instance Availability Notification SOP Class")
    }
    "1.2.840.10008.5.1.4.34.1" => {
      Ok("RT Beams Delivery Instruction Storage - Trial")
    }
    "1.2.840.10008.5.1.4.34.10" => {
      Ok("RT Brachy Application Setup Delivery Instruction Storage")
    }
    "1.2.840.10008.5.1.4.34.2" => {
      Ok("RT Conventional Machine Verification - Trial")
    }
    "1.2.840.10008.5.1.4.34.3" => Ok("RT Ion Machine Verification - Trial"),
    "1.2.840.10008.5.1.4.34.4" => {
      Ok("Unified Worklist and Procedure Step Service Class - Trial")
    }
    "1.2.840.10008.5.1.4.34.4.1" => {
      Ok("Unified Procedure Step - Push SOP Class - Trial")
    }
    "1.2.840.10008.5.1.4.34.4.2" => {
      Ok("Unified Procedure Step - Watch SOP Class - Trial")
    }
    "1.2.840.10008.5.1.4.34.4.3" => {
      Ok("Unified Procedure Step - Pull SOP Class - Trial")
    }
    "1.2.840.10008.5.1.4.34.4.4" => {
      Ok("Unified Procedure Step - Event SOP Class - Trial")
    }
    "1.2.840.10008.5.1.4.34.5" => Ok("UPS Global Subscription SOP Instance"),
    "1.2.840.10008.5.1.4.34.5.1" => {
      Ok("UPS Filtered Global Subscription SOP Instance")
    }
    "1.2.840.10008.5.1.4.34.6" => {
      Ok("Unified Worklist and Procedure Step Service Class")
    }
    "1.2.840.10008.5.1.4.34.6.1" => {
      Ok("Unified Procedure Step - Push SOP Class")
    }
    "1.2.840.10008.5.1.4.34.6.2" => {
      Ok("Unified Procedure Step - Watch SOP Class")
    }
    "1.2.840.10008.5.1.4.34.6.3" => {
      Ok("Unified Procedure Step - Pull SOP Class")
    }
    "1.2.840.10008.5.1.4.34.6.4" => {
      Ok("Unified Procedure Step - Event SOP Class")
    }
    "1.2.840.10008.5.1.4.34.6.5" => {
      Ok("Unified Procedure Step - Query SOP Class")
    }
    "1.2.840.10008.5.1.4.34.7" => Ok("RT Beams Delivery Instruction Storage"),
    "1.2.840.10008.5.1.4.34.8" => Ok("RT Conventional Machine Verification"),
    "1.2.840.10008.5.1.4.34.9" => Ok("RT Ion Machine Verification"),
    "1.2.840.10008.5.1.4.37.1" => {
      Ok("General Relevant Patient Information Query")
    }
    "1.2.840.10008.5.1.4.37.2" => {
      Ok("Breast Imaging Relevant Patient Information Query")
    }
    "1.2.840.10008.5.1.4.37.3" => {
      Ok("Cardiac Relevant Patient Information Query")
    }
    "1.2.840.10008.5.1.4.38.1" => Ok("Hanging Protocol Storage"),
    "1.2.840.10008.5.1.4.38.2" => {
      Ok("Hanging Protocol Information Model - FIND")
    }
    "1.2.840.10008.5.1.4.38.3" => {
      Ok("Hanging Protocol Information Model - MOVE")
    }
    "1.2.840.10008.5.1.4.38.4" => {
      Ok("Hanging Protocol Information Model - GET")
    }
    "1.2.840.10008.5.1.4.39.1" => Ok("Color Palette Storage"),
    "1.2.840.10008.5.1.4.39.2" => {
      Ok("Color Palette Query/Retrieve Information Model - FIND")
    }
    "1.2.840.10008.5.1.4.39.3" => {
      Ok("Color Palette Query/Retrieve Information Model - MOVE")
    }
    "1.2.840.10008.5.1.4.39.4" => {
      Ok("Color Palette Query/Retrieve Information Model - GET")
    }
    "1.2.840.10008.5.1.4.41" => Ok("Product Characteristics Query SOP Class"),
    "1.2.840.10008.5.1.4.42" => Ok("Substance Approval Query SOP Class"),
    "1.2.840.10008.5.1.4.43.1" => Ok("Generic Implant Template Storage"),
    "1.2.840.10008.5.1.4.43.2" => {
      Ok("Generic Implant Template Information Model - FIND")
    }
    "1.2.840.10008.5.1.4.43.3" => {
      Ok("Generic Implant Template Information Model - MOVE")
    }
    "1.2.840.10008.5.1.4.43.4" => {
      Ok("Generic Implant Template Information Model - GET")
    }
    "1.2.840.10008.5.1.4.44.1" => Ok("Implant Assembly Template Storage"),
    "1.2.840.10008.5.1.4.44.2" => {
      Ok("Implant Assembly Template Information Model - FIND")
    }
    "1.2.840.10008.5.1.4.44.3" => {
      Ok("Implant Assembly Template Information Model - MOVE")
    }
    "1.2.840.10008.5.1.4.44.4" => {
      Ok("Implant Assembly Template Information Model - GET")
    }
    "1.2.840.10008.5.1.4.45.1" => Ok("Implant Template Group Storage"),
    "1.2.840.10008.5.1.4.45.2" => {
      Ok("Implant Template Group Information Model - FIND")
    }
    "1.2.840.10008.5.1.4.45.3" => {
      Ok("Implant Template Group Information Model - MOVE")
    }
    "1.2.840.10008.5.1.4.45.4" => {
      Ok("Implant Template Group Information Model - GET")
    }
    "1.2.840.10008.7.1.1" => Ok("Native DICOM Model"),
    "1.2.840.10008.7.1.2" => Ok("Abstract Multi-Dimensional Image Model"),
    "1.2.840.10008.8.1.1" => Ok("DICOM Content Mapping Resource"),
    _ => Err(()),
  }
}
