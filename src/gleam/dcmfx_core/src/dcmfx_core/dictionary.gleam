//// Provides constants for all of the data elements defined in Part 6 of the
//// DICOM specification. These can be referenced directly, or looked up by data
//// element tag.
////
//// Well-known privately defined data elements can also be looked up by
//// providing the relevant 'Private Creator' name.

import dcmfx_core/data_element_tag.{type DataElementTag, DataElementTag}
import dcmfx_core/value_multiplicity.{type ValueMultiplicity, ValueMultiplicity}
import dcmfx_core/value_representation.{
  type ValueRepresentation, AgeString, ApplicationEntity, AttributeTag,
  CodeString, Date, DateTime, DecimalString, FloatingPointDouble,
  FloatingPointSingle, IntegerString, LongString, LongText, OtherByteString,
  OtherDoubleString, OtherFloatString, OtherLongString, OtherVeryLongString,
  OtherWordString, PersonName, Sequence, ShortString, ShortText, SignedLong,
  SignedShort, SignedVeryLong, Time, UniqueIdentifier,
  UniversalResourceIdentifier, Unknown, UnlimitedCharacters, UnlimitedText,
  UnsignedLong, UnsignedShort, UnsignedVeryLong,
}
import gleam/bool
import gleam/int
import gleam/option.{type Option, None, Some}

/// An item in the data element dictionary.
///
pub type Item {
  Item(
    tag: DataElementTag,
    name: String,
    vrs: List(ValueRepresentation),
    multiplicity: ValueMultiplicity,
  )
}

/// Returns the human-readable name for a data element tag. The private creator
/// is required in order to look up well-known privately defined data elements.
///
/// If the tag isn't in the dictionary then `unknown_tag` is returned, or
/// `unknown_private_tag` if it is a private tag.
///
pub fn tag_name(tag: DataElementTag, private_creator: Option(String)) -> String {
  case find(tag, private_creator) {
    Ok(item) -> item.name
    _ ->
      case data_element_tag.is_private(tag) {
        True -> "unknown_private_tag"
        False -> "unknown_tag"
      }
  }
}

/// Formats a data element tag as `"(GROUP,ELEMENT) TAG_NAME"`, e.g.
/// "(0008,0020) StudyDate"`. The private creator is required in order to look
/// up well-known privately defined data elements.
///
/// If the tag isn't in the dictionary then `unknown_tag` is used as the tag
/// name, or `unknown_private_tag` if it is a private tag.
///
pub fn tag_with_name(
  tag: DataElementTag,
  private_creator: Option(String),
) -> String {
  data_element_tag.to_string(tag) <> " " <> tag_name(tag, private_creator)
}

/// Returns whether a tag is a lookup table descriptor. Lookup table descriptors
/// are handled as a special type of data element value due to the non-standard
/// way their VR applies to their underlying bytes.
///
pub fn is_lut_descriptor_tag(tag: DataElementTag) -> Bool {
  tag == lut_descriptor.tag
  || tag == red_palette_color_lookup_table_descriptor.tag
  || tag == green_palette_color_lookup_table_descriptor.tag
  || tag == blue_palette_color_lookup_table_descriptor.tag
}

// The following constants reduce bloat/repetition of ValueMultiplicity
// specifications in the generated dictionary code

const vm_1 = ValueMultiplicity(1, Some(1))

const vm_2 = ValueMultiplicity(2, Some(2))

const vm_3 = ValueMultiplicity(3, Some(3))

const vm_4 = ValueMultiplicity(4, Some(4))

const vm_5 = ValueMultiplicity(5, Some(5))

const vm_6 = ValueMultiplicity(6, Some(6))

const vm_1_to_2 = ValueMultiplicity(1, Some(2))

const vm_1_to_n = ValueMultiplicity(1, None)

const vm_2_to_n = ValueMultiplicity(2, None)

const vm_3_to_n = ValueMultiplicity(3, None)

// Everything below this line is auto-generated from the DICOM specification by
// dcmfx_dictionary_codegen

pub const file_meta_information_group_length = Item(
  DataElementTag(0x0002, 0x0000),
  "File Meta Information Group Length",
  [UnsignedLong],
  vm_1,
)

pub const file_meta_information_version = Item(
  DataElementTag(0x0002, 0x0001),
  "File Meta Information Version",
  [OtherByteString],
  vm_1,
)

pub const media_storage_sop_class_uid = Item(
  DataElementTag(0x0002, 0x0002),
  "Media Storage SOP Class UID",
  [UniqueIdentifier],
  vm_1,
)

pub const media_storage_sop_instance_uid = Item(
  DataElementTag(0x0002, 0x0003),
  "Media Storage SOP Instance UID",
  [UniqueIdentifier],
  vm_1,
)

pub const transfer_syntax_uid = Item(
  DataElementTag(0x0002, 0x0010),
  "Transfer Syntax UID",
  [UniqueIdentifier],
  vm_1,
)

pub const implementation_class_uid = Item(
  DataElementTag(0x0002, 0x0012),
  "Implementation Class UID",
  [UniqueIdentifier],
  vm_1,
)

pub const implementation_version_name = Item(
  DataElementTag(0x0002, 0x0013),
  "Implementation Version Name",
  [ShortString],
  vm_1,
)

pub const source_application_entity_title = Item(
  DataElementTag(0x0002, 0x0016),
  "Source Application Entity Title",
  [ApplicationEntity],
  vm_1,
)

pub const sending_application_entity_title = Item(
  DataElementTag(0x0002, 0x0017),
  "Sending Application Entity Title",
  [ApplicationEntity],
  vm_1,
)

pub const receiving_application_entity_title = Item(
  DataElementTag(0x0002, 0x0018),
  "Receiving Application Entity Title",
  [ApplicationEntity],
  vm_1,
)

pub const source_presentation_address = Item(
  DataElementTag(0x0002, 0x0026),
  "Source Presentation Address",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const sending_presentation_address = Item(
  DataElementTag(0x0002, 0x0027),
  "Sending Presentation Address",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const receiving_presentation_address = Item(
  DataElementTag(0x0002, 0x0028),
  "Receiving Presentation Address",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const rtv_meta_information_version = Item(
  DataElementTag(0x0002, 0x0031),
  "RTV Meta Information Version",
  [OtherByteString],
  vm_1,
)

pub const rtv_communication_sop_class_uid = Item(
  DataElementTag(0x0002, 0x0032),
  "RTV Communication SOP Class UID",
  [UniqueIdentifier],
  vm_1,
)

pub const rtv_communication_sop_instance_uid = Item(
  DataElementTag(0x0002, 0x0033),
  "RTV Communication SOP Instance UID",
  [UniqueIdentifier],
  vm_1,
)

pub const rtv_source_identifier = Item(
  DataElementTag(0x0002, 0x0035),
  "RTV Source Identifier",
  [OtherByteString],
  vm_1,
)

pub const rtv_flow_identifier = Item(
  DataElementTag(0x0002, 0x0036),
  "RTV Flow Identifier",
  [OtherByteString],
  vm_1,
)

pub const rtv_flow_rtp_sampling_rate = Item(
  DataElementTag(0x0002, 0x0037),
  "RTV Flow RTP Sampling Rate",
  [UnsignedLong],
  vm_1,
)

pub const rtv_flow_actual_frame_duration = Item(
  DataElementTag(0x0002, 0x0038),
  "RTV Flow Actual Frame Duration",
  [FloatingPointDouble],
  vm_1,
)

pub const private_information_creator_uid = Item(
  DataElementTag(0x0002, 0x0100),
  "Private Information Creator UID",
  [UniqueIdentifier],
  vm_1,
)

pub const private_information = Item(
  DataElementTag(0x0002, 0x0102),
  "Private Information",
  [OtherByteString],
  vm_1,
)

pub const file_set_id = Item(
  DataElementTag(0x0004, 0x1130),
  "File-set ID",
  [CodeString],
  vm_1,
)

pub const file_set_descriptor_file_id = Item(
  DataElementTag(0x0004, 0x1141),
  "File-set Descriptor File ID",
  [CodeString],
  ValueMultiplicity(1, Some(8)),
)

pub const specific_character_set_of_file_set_descriptor_file = Item(
  DataElementTag(0x0004, 0x1142),
  "Specific Character Set of File-set Descriptor File",
  [CodeString],
  vm_1,
)

pub const offset_of_the_first_directory_record_of_the_root_directory_entity = Item(
  DataElementTag(0x0004, 0x1200),
  "Offset of the First Directory Record of the Root Directory Entity",
  [UnsignedLong],
  vm_1,
)

pub const offset_of_the_last_directory_record_of_the_root_directory_entity = Item(
  DataElementTag(0x0004, 0x1202),
  "Offset of the Last Directory Record of the Root Directory Entity",
  [UnsignedLong],
  vm_1,
)

pub const file_set_consistency_flag = Item(
  DataElementTag(0x0004, 0x1212),
  "File-set Consistency Flag",
  [UnsignedShort],
  vm_1,
)

pub const directory_record_sequence = Item(
  DataElementTag(0x0004, 0x1220),
  "Directory Record Sequence",
  [Sequence],
  vm_1,
)

pub const offset_of_the_next_directory_record = Item(
  DataElementTag(0x0004, 0x1400),
  "Offset of the Next Directory Record",
  [UnsignedLong],
  vm_1,
)

pub const record_in_use_flag = Item(
  DataElementTag(0x0004, 0x1410),
  "Record In-use Flag",
  [UnsignedShort],
  vm_1,
)

pub const offset_of_referenced_lower_level_directory_entity = Item(
  DataElementTag(0x0004, 0x1420),
  "Offset of Referenced Lower-Level Directory Entity",
  [UnsignedLong],
  vm_1,
)

pub const directory_record_type = Item(
  DataElementTag(0x0004, 0x1430),
  "Directory Record Type",
  [CodeString],
  vm_1,
)

pub const private_record_uid = Item(
  DataElementTag(0x0004, 0x1432),
  "Private Record UID",
  [UniqueIdentifier],
  vm_1,
)

pub const referenced_file_id = Item(
  DataElementTag(0x0004, 0x1500),
  "Referenced File ID",
  [CodeString],
  ValueMultiplicity(1, Some(8)),
)

pub const mrdr_directory_record_offset = Item(
  DataElementTag(0x0004, 0x1504),
  "MRDR Directory Record Offset",
  [UnsignedLong],
  vm_1,
)

pub const referenced_sop_class_uid_in_file = Item(
  DataElementTag(0x0004, 0x1510),
  "Referenced SOP Class UID in File",
  [UniqueIdentifier],
  vm_1,
)

pub const referenced_sop_instance_uid_in_file = Item(
  DataElementTag(0x0004, 0x1511),
  "Referenced SOP Instance UID in File",
  [UniqueIdentifier],
  vm_1,
)

pub const referenced_transfer_syntax_uid_in_file = Item(
  DataElementTag(0x0004, 0x1512),
  "Referenced Transfer Syntax UID in File",
  [UniqueIdentifier],
  vm_1,
)

pub const referenced_related_general_sop_class_uid_in_file = Item(
  DataElementTag(0x0004, 0x151A),
  "Referenced Related General SOP Class UID in File",
  [UniqueIdentifier],
  vm_1_to_n,
)

pub const number_of_references = Item(
  DataElementTag(0x0004, 0x1600),
  "Number of References",
  [UnsignedLong],
  vm_1,
)

pub const current_frame_functional_groups_sequence = Item(
  DataElementTag(0x0006, 0x0001),
  "Current Frame Functional Groups Sequence",
  [Sequence],
  vm_1,
)

pub const length_to_end = Item(
  DataElementTag(0x0008, 0x0001),
  "Length to End",
  [UnsignedLong],
  vm_1,
)

pub const specific_character_set = Item(
  DataElementTag(0x0008, 0x0005),
  "Specific Character Set",
  [CodeString],
  vm_1_to_n,
)

pub const language_code_sequence = Item(
  DataElementTag(0x0008, 0x0006),
  "Language Code Sequence",
  [Sequence],
  vm_1,
)

pub const image_type = Item(
  DataElementTag(0x0008, 0x0008),
  "Image Type",
  [CodeString],
  vm_2_to_n,
)

pub const recognition_code = Item(
  DataElementTag(0x0008, 0x0010),
  "Recognition Code",
  [ShortString],
  vm_1,
)

pub const instance_creation_date = Item(
  DataElementTag(0x0008, 0x0012),
  "Instance Creation Date",
  [Date],
  vm_1,
)

pub const instance_creation_time = Item(
  DataElementTag(0x0008, 0x0013),
  "Instance Creation Time",
  [Time],
  vm_1,
)

pub const instance_creator_uid = Item(
  DataElementTag(0x0008, 0x0014),
  "Instance Creator UID",
  [UniqueIdentifier],
  vm_1,
)

pub const instance_coercion_date_time = Item(
  DataElementTag(0x0008, 0x0015),
  "Instance Coercion DateTime",
  [DateTime],
  vm_1,
)

pub const sop_class_uid = Item(
  DataElementTag(0x0008, 0x0016),
  "SOP Class UID",
  [UniqueIdentifier],
  vm_1,
)

pub const acquisition_uid = Item(
  DataElementTag(0x0008, 0x0017),
  "Acquisition UID",
  [UniqueIdentifier],
  vm_1,
)

pub const sop_instance_uid = Item(
  DataElementTag(0x0008, 0x0018),
  "SOP Instance UID",
  [UniqueIdentifier],
  vm_1,
)

pub const pyramid_uid = Item(
  DataElementTag(0x0008, 0x0019),
  "Pyramid UID",
  [UniqueIdentifier],
  vm_1,
)

pub const related_general_sop_class_uid = Item(
  DataElementTag(0x0008, 0x001A),
  "Related General SOP Class UID",
  [UniqueIdentifier],
  vm_1_to_n,
)

pub const original_specialized_sop_class_uid = Item(
  DataElementTag(0x0008, 0x001B),
  "Original Specialized SOP Class UID",
  [UniqueIdentifier],
  vm_1,
)

pub const synthetic_data = Item(
  DataElementTag(0x0008, 0x001C),
  "Synthetic Data",
  [CodeString],
  vm_1,
)

pub const study_date = Item(
  DataElementTag(0x0008, 0x0020),
  "Study Date",
  [Date],
  vm_1,
)

pub const series_date = Item(
  DataElementTag(0x0008, 0x0021),
  "Series Date",
  [Date],
  vm_1,
)

pub const acquisition_date = Item(
  DataElementTag(0x0008, 0x0022),
  "Acquisition Date",
  [Date],
  vm_1,
)

pub const content_date = Item(
  DataElementTag(0x0008, 0x0023),
  "Content Date",
  [Date],
  vm_1,
)

pub const overlay_date = Item(
  DataElementTag(0x0008, 0x0024),
  "Overlay Date",
  [Date],
  vm_1,
)

pub const curve_date = Item(
  DataElementTag(0x0008, 0x0025),
  "Curve Date",
  [Date],
  vm_1,
)

pub const acquisition_date_time = Item(
  DataElementTag(0x0008, 0x002A),
  "Acquisition DateTime",
  [DateTime],
  vm_1,
)

pub const study_time = Item(
  DataElementTag(0x0008, 0x0030),
  "Study Time",
  [Time],
  vm_1,
)

pub const series_time = Item(
  DataElementTag(0x0008, 0x0031),
  "Series Time",
  [Time],
  vm_1,
)

pub const acquisition_time = Item(
  DataElementTag(0x0008, 0x0032),
  "Acquisition Time",
  [Time],
  vm_1,
)

pub const content_time = Item(
  DataElementTag(0x0008, 0x0033),
  "Content Time",
  [Time],
  vm_1,
)

pub const overlay_time = Item(
  DataElementTag(0x0008, 0x0034),
  "Overlay Time",
  [Time],
  vm_1,
)

pub const curve_time = Item(
  DataElementTag(0x0008, 0x0035),
  "Curve Time",
  [Time],
  vm_1,
)

pub const data_set_type = Item(
  DataElementTag(0x0008, 0x0040),
  "Data Set Type",
  [UnsignedShort],
  vm_1,
)

pub const data_set_subtype = Item(
  DataElementTag(0x0008, 0x0041),
  "Data Set Subtype",
  [LongString],
  vm_1,
)

pub const nuclear_medicine_series_type = Item(
  DataElementTag(0x0008, 0x0042),
  "Nuclear Medicine Series Type",
  [CodeString],
  vm_1,
)

pub const accession_number = Item(
  DataElementTag(0x0008, 0x0050),
  "Accession Number",
  [ShortString],
  vm_1,
)

pub const issuer_of_accession_number_sequence = Item(
  DataElementTag(0x0008, 0x0051),
  "Issuer of Accession Number Sequence",
  [Sequence],
  vm_1,
)

pub const query_retrieve_level = Item(
  DataElementTag(0x0008, 0x0052),
  "Query/Retrieve Level",
  [CodeString],
  vm_1,
)

pub const query_retrieve_view = Item(
  DataElementTag(0x0008, 0x0053),
  "Query/Retrieve View",
  [CodeString],
  vm_1,
)

pub const retrieve_ae_title = Item(
  DataElementTag(0x0008, 0x0054),
  "Retrieve AE Title",
  [ApplicationEntity],
  vm_1_to_n,
)

pub const station_ae_title = Item(
  DataElementTag(0x0008, 0x0055),
  "Station AE Title",
  [ApplicationEntity],
  vm_1,
)

pub const instance_availability = Item(
  DataElementTag(0x0008, 0x0056),
  "Instance Availability",
  [CodeString],
  vm_1,
)

pub const failed_sop_instance_uid_list = Item(
  DataElementTag(0x0008, 0x0058),
  "Failed SOP Instance UID List",
  [UniqueIdentifier],
  vm_1_to_n,
)

pub const modality = Item(
  DataElementTag(0x0008, 0x0060),
  "Modality",
  [CodeString],
  vm_1,
)

pub const modalities_in_study = Item(
  DataElementTag(0x0008, 0x0061),
  "Modalities in Study",
  [CodeString],
  vm_1_to_n,
)

pub const sop_classes_in_study = Item(
  DataElementTag(0x0008, 0x0062),
  "SOP Classes in Study",
  [UniqueIdentifier],
  vm_1_to_n,
)

pub const anatomic_regions_in_study_code_sequence = Item(
  DataElementTag(0x0008, 0x0063),
  "Anatomic Regions in Study Code Sequence",
  [Sequence],
  vm_1,
)

pub const conversion_type = Item(
  DataElementTag(0x0008, 0x0064),
  "Conversion Type",
  [CodeString],
  vm_1,
)

pub const presentation_intent_type = Item(
  DataElementTag(0x0008, 0x0068),
  "Presentation Intent Type",
  [CodeString],
  vm_1,
)

pub const manufacturer = Item(
  DataElementTag(0x0008, 0x0070),
  "Manufacturer",
  [LongString],
  vm_1,
)

pub const institution_name = Item(
  DataElementTag(0x0008, 0x0080),
  "Institution Name",
  [LongString],
  vm_1,
)

pub const institution_address = Item(
  DataElementTag(0x0008, 0x0081),
  "Institution Address",
  [ShortText],
  vm_1,
)

pub const institution_code_sequence = Item(
  DataElementTag(0x0008, 0x0082),
  "Institution Code Sequence",
  [Sequence],
  vm_1,
)

pub const referring_physician_name = Item(
  DataElementTag(0x0008, 0x0090),
  "Referring Physician's Name",
  [PersonName],
  vm_1,
)

pub const referring_physician_address = Item(
  DataElementTag(0x0008, 0x0092),
  "Referring Physician's Address",
  [ShortText],
  vm_1,
)

pub const referring_physician_telephone_numbers = Item(
  DataElementTag(0x0008, 0x0094),
  "Referring Physician's Telephone Numbers",
  [ShortString],
  vm_1_to_n,
)

pub const referring_physician_identification_sequence = Item(
  DataElementTag(0x0008, 0x0096),
  "Referring Physician Identification Sequence",
  [Sequence],
  vm_1,
)

pub const consulting_physician_name = Item(
  DataElementTag(0x0008, 0x009C),
  "Consulting Physician's Name",
  [PersonName],
  vm_1_to_n,
)

pub const consulting_physician_identification_sequence = Item(
  DataElementTag(0x0008, 0x009D),
  "Consulting Physician Identification Sequence",
  [Sequence],
  vm_1,
)

pub const code_value = Item(
  DataElementTag(0x0008, 0x0100),
  "Code Value",
  [ShortString],
  vm_1,
)

pub const extended_code_value = Item(
  DataElementTag(0x0008, 0x0101),
  "Extended Code Value",
  [LongString],
  vm_1,
)

pub const coding_scheme_designator = Item(
  DataElementTag(0x0008, 0x0102),
  "Coding Scheme Designator",
  [ShortString],
  vm_1,
)

pub const coding_scheme_version = Item(
  DataElementTag(0x0008, 0x0103),
  "Coding Scheme Version",
  [ShortString],
  vm_1,
)

pub const code_meaning = Item(
  DataElementTag(0x0008, 0x0104),
  "Code Meaning",
  [LongString],
  vm_1,
)

pub const mapping_resource = Item(
  DataElementTag(0x0008, 0x0105),
  "Mapping Resource",
  [CodeString],
  vm_1,
)

pub const context_group_version = Item(
  DataElementTag(0x0008, 0x0106),
  "Context Group Version",
  [DateTime],
  vm_1,
)

pub const context_group_local_version = Item(
  DataElementTag(0x0008, 0x0107),
  "Context Group Local Version",
  [DateTime],
  vm_1,
)

pub const extended_code_meaning = Item(
  DataElementTag(0x0008, 0x0108),
  "Extended Code Meaning",
  [LongText],
  vm_1,
)

pub const coding_scheme_resources_sequence = Item(
  DataElementTag(0x0008, 0x0109),
  "Coding Scheme Resources Sequence",
  [Sequence],
  vm_1,
)

pub const coding_scheme_url_type = Item(
  DataElementTag(0x0008, 0x010A),
  "Coding Scheme URL Type",
  [CodeString],
  vm_1,
)

pub const context_group_extension_flag = Item(
  DataElementTag(0x0008, 0x010B),
  "Context Group Extension Flag",
  [CodeString],
  vm_1,
)

pub const coding_scheme_uid = Item(
  DataElementTag(0x0008, 0x010C),
  "Coding Scheme UID",
  [UniqueIdentifier],
  vm_1,
)

pub const context_group_extension_creator_uid = Item(
  DataElementTag(0x0008, 0x010D),
  "Context Group Extension Creator UID",
  [UniqueIdentifier],
  vm_1,
)

pub const coding_scheme_url = Item(
  DataElementTag(0x0008, 0x010E),
  "Coding Scheme URL",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const context_identifier = Item(
  DataElementTag(0x0008, 0x010F),
  "Context Identifier",
  [CodeString],
  vm_1,
)

pub const coding_scheme_identification_sequence = Item(
  DataElementTag(0x0008, 0x0110),
  "Coding Scheme Identification Sequence",
  [Sequence],
  vm_1,
)

pub const coding_scheme_registry = Item(
  DataElementTag(0x0008, 0x0112),
  "Coding Scheme Registry",
  [LongString],
  vm_1,
)

pub const coding_scheme_external_id = Item(
  DataElementTag(0x0008, 0x0114),
  "Coding Scheme External ID",
  [ShortText],
  vm_1,
)

pub const coding_scheme_name = Item(
  DataElementTag(0x0008, 0x0115),
  "Coding Scheme Name",
  [ShortText],
  vm_1,
)

pub const coding_scheme_responsible_organization = Item(
  DataElementTag(0x0008, 0x0116),
  "Coding Scheme Responsible Organization",
  [ShortText],
  vm_1,
)

pub const context_uid = Item(
  DataElementTag(0x0008, 0x0117),
  "Context UID",
  [UniqueIdentifier],
  vm_1,
)

pub const mapping_resource_uid = Item(
  DataElementTag(0x0008, 0x0118),
  "Mapping Resource UID",
  [UniqueIdentifier],
  vm_1,
)

pub const long_code_value = Item(
  DataElementTag(0x0008, 0x0119),
  "Long Code Value",
  [UnlimitedCharacters],
  vm_1,
)

pub const urn_code_value = Item(
  DataElementTag(0x0008, 0x0120),
  "URN Code Value",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const equivalent_code_sequence = Item(
  DataElementTag(0x0008, 0x0121),
  "Equivalent Code Sequence",
  [Sequence],
  vm_1,
)

pub const mapping_resource_name = Item(
  DataElementTag(0x0008, 0x0122),
  "Mapping Resource Name",
  [LongString],
  vm_1,
)

pub const context_group_identification_sequence = Item(
  DataElementTag(0x0008, 0x0123),
  "Context Group Identification Sequence",
  [Sequence],
  vm_1,
)

pub const mapping_resource_identification_sequence = Item(
  DataElementTag(0x0008, 0x0124),
  "Mapping Resource Identification Sequence",
  [Sequence],
  vm_1,
)

pub const timezone_offset_from_utc = Item(
  DataElementTag(0x0008, 0x0201),
  "Timezone Offset From UTC",
  [ShortString],
  vm_1,
)

pub const responsible_group_code_sequence = Item(
  DataElementTag(0x0008, 0x0220),
  "Responsible Group Code Sequence",
  [Sequence],
  vm_1,
)

pub const equipment_modality = Item(
  DataElementTag(0x0008, 0x0221),
  "Equipment Modality",
  [CodeString],
  vm_1,
)

pub const manufacturer_related_model_group = Item(
  DataElementTag(0x0008, 0x0222),
  "Manufacturer's Related Model Group",
  [LongString],
  vm_1,
)

pub const private_data_element_characteristics_sequence = Item(
  DataElementTag(0x0008, 0x0300),
  "Private Data Element Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const private_group_reference = Item(
  DataElementTag(0x0008, 0x0301),
  "Private Group Reference",
  [UnsignedShort],
  vm_1,
)

pub const private_creator_reference = Item(
  DataElementTag(0x0008, 0x0302),
  "Private Creator Reference",
  [LongString],
  vm_1,
)

pub const block_identifying_information_status = Item(
  DataElementTag(0x0008, 0x0303),
  "Block Identifying Information Status",
  [CodeString],
  vm_1,
)

pub const nonidentifying_private_elements = Item(
  DataElementTag(0x0008, 0x0304),
  "Nonidentifying Private Elements",
  [UnsignedShort],
  vm_1_to_n,
)

pub const deidentification_action_sequence = Item(
  DataElementTag(0x0008, 0x0305),
  "Deidentification Action Sequence",
  [Sequence],
  vm_1,
)

pub const identifying_private_elements = Item(
  DataElementTag(0x0008, 0x0306),
  "Identifying Private Elements",
  [UnsignedShort],
  vm_1_to_n,
)

pub const deidentification_action = Item(
  DataElementTag(0x0008, 0x0307),
  "Deidentification Action",
  [CodeString],
  vm_1,
)

pub const private_data_element = Item(
  DataElementTag(0x0008, 0x0308),
  "Private Data Element",
  [UnsignedShort],
  vm_1,
)

pub const private_data_element_value_multiplicity = Item(
  DataElementTag(0x0008, 0x0309),
  "Private Data Element Value Multiplicity",
  [UnsignedLong],
  ValueMultiplicity(1, Some(3)),
)

pub const private_data_element_value_representation = Item(
  DataElementTag(0x0008, 0x030A),
  "Private Data Element Value Representation",
  [CodeString],
  vm_1,
)

pub const private_data_element_number_of_items = Item(
  DataElementTag(0x0008, 0x030B),
  "Private Data Element Number of Items",
  [UnsignedLong],
  vm_1_to_2,
)

pub const private_data_element_name = Item(
  DataElementTag(0x0008, 0x030C),
  "Private Data Element Name",
  [UnlimitedCharacters],
  vm_1,
)

pub const private_data_element_keyword = Item(
  DataElementTag(0x0008, 0x030D),
  "Private Data Element Keyword",
  [UnlimitedCharacters],
  vm_1,
)

pub const private_data_element_description = Item(
  DataElementTag(0x0008, 0x030E),
  "Private Data Element Description",
  [UnlimitedText],
  vm_1,
)

pub const private_data_element_encoding = Item(
  DataElementTag(0x0008, 0x030F),
  "Private Data Element Encoding",
  [UnlimitedText],
  vm_1,
)

pub const private_data_element_definition_sequence = Item(
  DataElementTag(0x0008, 0x0310),
  "Private Data Element Definition Sequence",
  [Sequence],
  vm_1,
)

pub const scope_of_inventory_sequence = Item(
  DataElementTag(0x0008, 0x0400),
  "Scope of Inventory Sequence",
  [Sequence],
  vm_1,
)

pub const inventory_purpose = Item(
  DataElementTag(0x0008, 0x0401),
  "Inventory Purpose",
  [LongText],
  vm_1,
)

pub const inventory_instance_description = Item(
  DataElementTag(0x0008, 0x0402),
  "Inventory Instance Description",
  [LongText],
  vm_1,
)

pub const inventory_level = Item(
  DataElementTag(0x0008, 0x0403),
  "Inventory Level",
  [CodeString],
  vm_1,
)

pub const item_inventory_date_time = Item(
  DataElementTag(0x0008, 0x0404),
  "Item Inventory DateTime",
  [DateTime],
  vm_1,
)

pub const removed_from_operational_use = Item(
  DataElementTag(0x0008, 0x0405),
  "Removed from Operational Use",
  [CodeString],
  vm_1,
)

pub const reason_for_removal_code_sequence = Item(
  DataElementTag(0x0008, 0x0406),
  "Reason for Removal Code Sequence",
  [Sequence],
  vm_1,
)

pub const stored_instance_base_uri = Item(
  DataElementTag(0x0008, 0x0407),
  "Stored Instance Base URI",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const folder_access_uri = Item(
  DataElementTag(0x0008, 0x0408),
  "Folder Access URI",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const file_access_uri = Item(
  DataElementTag(0x0008, 0x0409),
  "File Access URI",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const container_file_type = Item(
  DataElementTag(0x0008, 0x040A),
  "Container File Type",
  [CodeString],
  vm_1,
)

pub const filename_in_container = Item(
  DataElementTag(0x0008, 0x040B),
  "Filename in Container",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const file_offset_in_container = Item(
  DataElementTag(0x0008, 0x040C),
  "File Offset in Container",
  [UnsignedVeryLong],
  vm_1,
)

pub const file_length_in_container = Item(
  DataElementTag(0x0008, 0x040D),
  "File Length in Container",
  [UnsignedVeryLong],
  vm_1,
)

pub const stored_instance_transfer_syntax_uid = Item(
  DataElementTag(0x0008, 0x040E),
  "Stored Instance Transfer Syntax UID",
  [UniqueIdentifier],
  vm_1,
)

pub const extended_matching_mechanisms = Item(
  DataElementTag(0x0008, 0x040F),
  "Extended Matching Mechanisms",
  [CodeString],
  vm_1_to_n,
)

pub const range_matching_sequence = Item(
  DataElementTag(0x0008, 0x0410),
  "Range Matching Sequence",
  [Sequence],
  vm_1,
)

pub const list_of_uid_matching_sequence = Item(
  DataElementTag(0x0008, 0x0411),
  "List of UID Matching Sequence",
  [Sequence],
  vm_1,
)

pub const empty_value_matching_sequence = Item(
  DataElementTag(0x0008, 0x0412),
  "Empty Value Matching Sequence",
  [Sequence],
  vm_1,
)

pub const general_matching_sequence = Item(
  DataElementTag(0x0008, 0x0413),
  "General Matching Sequence",
  [Sequence],
  vm_1,
)

pub const requested_status_interval = Item(
  DataElementTag(0x0008, 0x0414),
  "Requested Status Interval",
  [UnsignedShort],
  vm_1,
)

pub const retain_instances = Item(
  DataElementTag(0x0008, 0x0415),
  "Retain Instances",
  [CodeString],
  vm_1,
)

pub const expiration_date_time = Item(
  DataElementTag(0x0008, 0x0416),
  "Expiration DateTime",
  [DateTime],
  vm_1,
)

pub const transaction_status = Item(
  DataElementTag(0x0008, 0x0417),
  "Transaction Status",
  [CodeString],
  vm_1,
)

pub const transaction_status_comment = Item(
  DataElementTag(0x0008, 0x0418),
  "Transaction Status Comment",
  [LongText],
  vm_1,
)

pub const file_set_access_sequence = Item(
  DataElementTag(0x0008, 0x0419),
  "File Set Access Sequence",
  [Sequence],
  vm_1,
)

pub const file_access_sequence = Item(
  DataElementTag(0x0008, 0x041A),
  "File Access Sequence",
  [Sequence],
  vm_1,
)

pub const record_key = Item(
  DataElementTag(0x0008, 0x041B),
  "Record Key",
  [OtherByteString],
  vm_1,
)

pub const prior_record_key = Item(
  DataElementTag(0x0008, 0x041C),
  "Prior Record Key",
  [OtherByteString],
  vm_1,
)

pub const metadata_sequence = Item(
  DataElementTag(0x0008, 0x041D),
  "Metadata Sequence",
  [Sequence],
  vm_1,
)

pub const updated_metadata_sequence = Item(
  DataElementTag(0x0008, 0x041E),
  "Updated Metadata Sequence",
  [Sequence],
  vm_1,
)

pub const study_update_date_time = Item(
  DataElementTag(0x0008, 0x041F),
  "Study Update DateTime",
  [DateTime],
  vm_1,
)

pub const inventory_access_end_points_sequence = Item(
  DataElementTag(0x0008, 0x0420),
  "Inventory Access End Points Sequence",
  [Sequence],
  vm_1,
)

pub const study_access_end_points_sequence = Item(
  DataElementTag(0x0008, 0x0421),
  "Study Access End Points Sequence",
  [Sequence],
  vm_1,
)

pub const incorporated_inventory_instance_sequence = Item(
  DataElementTag(0x0008, 0x0422),
  "Incorporated Inventory Instance Sequence",
  [Sequence],
  vm_1,
)

pub const inventoried_studies_sequence = Item(
  DataElementTag(0x0008, 0x0423),
  "Inventoried Studies Sequence",
  [Sequence],
  vm_1,
)

pub const inventoried_series_sequence = Item(
  DataElementTag(0x0008, 0x0424),
  "Inventoried Series Sequence",
  [Sequence],
  vm_1,
)

pub const inventoried_instances_sequence = Item(
  DataElementTag(0x0008, 0x0425),
  "Inventoried Instances Sequence",
  [Sequence],
  vm_1,
)

pub const inventory_completion_status = Item(
  DataElementTag(0x0008, 0x0426),
  "Inventory Completion Status",
  [CodeString],
  vm_1,
)

pub const number_of_study_records_in_instance = Item(
  DataElementTag(0x0008, 0x0427),
  "Number of Study Records in Instance",
  [UnsignedLong],
  vm_1,
)

pub const total_number_of_study_records = Item(
  DataElementTag(0x0008, 0x0428),
  "Total Number of Study Records",
  [UnsignedVeryLong],
  vm_1,
)

pub const maximum_number_of_records = Item(
  DataElementTag(0x0008, 0x0429),
  "Maximum Number of Records",
  [UnsignedVeryLong],
  vm_1,
)

pub const network_id = Item(
  DataElementTag(0x0008, 0x1000),
  "Network ID",
  [ApplicationEntity],
  vm_1,
)

pub const station_name = Item(
  DataElementTag(0x0008, 0x1010),
  "Station Name",
  [ShortString],
  vm_1,
)

pub const study_description = Item(
  DataElementTag(0x0008, 0x1030),
  "Study Description",
  [LongString],
  vm_1,
)

pub const procedure_code_sequence = Item(
  DataElementTag(0x0008, 0x1032),
  "Procedure Code Sequence",
  [Sequence],
  vm_1,
)

pub const series_description = Item(
  DataElementTag(0x0008, 0x103E),
  "Series Description",
  [LongString],
  vm_1,
)

pub const series_description_code_sequence = Item(
  DataElementTag(0x0008, 0x103F),
  "Series Description Code Sequence",
  [Sequence],
  vm_1,
)

pub const institutional_department_name = Item(
  DataElementTag(0x0008, 0x1040),
  "Institutional Department Name",
  [LongString],
  vm_1,
)

pub const institutional_department_type_code_sequence = Item(
  DataElementTag(0x0008, 0x1041),
  "Institutional Department Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const physicians_of_record = Item(
  DataElementTag(0x0008, 0x1048),
  "Physician(s) of Record",
  [PersonName],
  vm_1_to_n,
)

pub const physicians_of_record_identification_sequence = Item(
  DataElementTag(0x0008, 0x1049),
  "Physician(s) of Record Identification Sequence",
  [Sequence],
  vm_1,
)

pub const performing_physician_name = Item(
  DataElementTag(0x0008, 0x1050),
  "Performing Physician's Name",
  [PersonName],
  vm_1_to_n,
)

pub const performing_physician_identification_sequence = Item(
  DataElementTag(0x0008, 0x1052),
  "Performing Physician Identification Sequence",
  [Sequence],
  vm_1,
)

pub const name_of_physicians_reading_study = Item(
  DataElementTag(0x0008, 0x1060),
  "Name of Physician(s) Reading Study",
  [PersonName],
  vm_1_to_n,
)

pub const physicians_reading_study_identification_sequence = Item(
  DataElementTag(0x0008, 0x1062),
  "Physician(s) Reading Study Identification Sequence",
  [Sequence],
  vm_1,
)

pub const operators_name = Item(
  DataElementTag(0x0008, 0x1070),
  "Operators' Name",
  [PersonName],
  vm_1_to_n,
)

pub const operator_identification_sequence = Item(
  DataElementTag(0x0008, 0x1072),
  "Operator Identification Sequence",
  [Sequence],
  vm_1,
)

pub const admitting_diagnoses_description = Item(
  DataElementTag(0x0008, 0x1080),
  "Admitting Diagnoses Description",
  [LongString],
  vm_1_to_n,
)

pub const admitting_diagnoses_code_sequence = Item(
  DataElementTag(0x0008, 0x1084),
  "Admitting Diagnoses Code Sequence",
  [Sequence],
  vm_1,
)

pub const pyramid_description = Item(
  DataElementTag(0x0008, 0x1088),
  "Pyramid Description",
  [LongString],
  vm_1,
)

pub const manufacturer_model_name = Item(
  DataElementTag(0x0008, 0x1090),
  "Manufacturer's Model Name",
  [LongString],
  vm_1,
)

pub const referenced_results_sequence = Item(
  DataElementTag(0x0008, 0x1100),
  "Referenced Results Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_study_sequence = Item(
  DataElementTag(0x0008, 0x1110),
  "Referenced Study Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_performed_procedure_step_sequence = Item(
  DataElementTag(0x0008, 0x1111),
  "Referenced Performed Procedure Step Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_instances_by_sop_class_sequence = Item(
  DataElementTag(0x0008, 0x1112),
  "Referenced Instances by SOP Class Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_series_sequence = Item(
  DataElementTag(0x0008, 0x1115),
  "Referenced Series Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_patient_sequence = Item(
  DataElementTag(0x0008, 0x1120),
  "Referenced Patient Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_visit_sequence = Item(
  DataElementTag(0x0008, 0x1125),
  "Referenced Visit Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_overlay_sequence = Item(
  DataElementTag(0x0008, 0x1130),
  "Referenced Overlay Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_stereometric_instance_sequence = Item(
  DataElementTag(0x0008, 0x1134),
  "Referenced Stereometric Instance Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_waveform_sequence = Item(
  DataElementTag(0x0008, 0x113A),
  "Referenced Waveform Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_image_sequence = Item(
  DataElementTag(0x0008, 0x1140),
  "Referenced Image Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_curve_sequence = Item(
  DataElementTag(0x0008, 0x1145),
  "Referenced Curve Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_instance_sequence = Item(
  DataElementTag(0x0008, 0x114A),
  "Referenced Instance Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_real_world_value_mapping_instance_sequence = Item(
  DataElementTag(0x0008, 0x114B),
  "Referenced Real World Value Mapping Instance Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_sop_class_uid = Item(
  DataElementTag(0x0008, 0x1150),
  "Referenced SOP Class UID",
  [UniqueIdentifier],
  vm_1,
)

pub const referenced_sop_instance_uid = Item(
  DataElementTag(0x0008, 0x1155),
  "Referenced SOP Instance UID",
  [UniqueIdentifier],
  vm_1,
)

pub const definition_source_sequence = Item(
  DataElementTag(0x0008, 0x1156),
  "Definition Source Sequence",
  [Sequence],
  vm_1,
)

pub const sop_classes_supported = Item(
  DataElementTag(0x0008, 0x115A),
  "SOP Classes Supported",
  [UniqueIdentifier],
  vm_1_to_n,
)

pub const referenced_frame_number = Item(
  DataElementTag(0x0008, 0x1160),
  "Referenced Frame Number",
  [IntegerString],
  vm_1_to_n,
)

pub const simple_frame_list = Item(
  DataElementTag(0x0008, 0x1161),
  "Simple Frame List",
  [UnsignedLong],
  vm_1_to_n,
)

pub const calculated_frame_list = Item(
  DataElementTag(0x0008, 0x1162),
  "Calculated Frame List",
  [UnsignedLong],
  vm_3_to_n,
)

pub const time_range = Item(
  DataElementTag(0x0008, 0x1163),
  "Time Range",
  [FloatingPointDouble],
  vm_2,
)

pub const frame_extraction_sequence = Item(
  DataElementTag(0x0008, 0x1164),
  "Frame Extraction Sequence",
  [Sequence],
  vm_1,
)

pub const multi_frame_source_sop_instance_uid = Item(
  DataElementTag(0x0008, 0x1167),
  "Multi-frame Source SOP Instance UID",
  [UniqueIdentifier],
  vm_1,
)

pub const retrieve_url = Item(
  DataElementTag(0x0008, 0x1190),
  "Retrieve URL",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const transaction_uid = Item(
  DataElementTag(0x0008, 0x1195),
  "Transaction UID",
  [UniqueIdentifier],
  vm_1,
)

pub const warning_reason = Item(
  DataElementTag(0x0008, 0x1196),
  "Warning Reason",
  [UnsignedShort],
  vm_1,
)

pub const failure_reason = Item(
  DataElementTag(0x0008, 0x1197),
  "Failure Reason",
  [UnsignedShort],
  vm_1,
)

pub const failed_sop_sequence = Item(
  DataElementTag(0x0008, 0x1198),
  "Failed SOP Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_sop_sequence = Item(
  DataElementTag(0x0008, 0x1199),
  "Referenced SOP Sequence",
  [Sequence],
  vm_1,
)

pub const other_failures_sequence = Item(
  DataElementTag(0x0008, 0x119A),
  "Other Failures Sequence",
  [Sequence],
  vm_1,
)

pub const failed_study_sequence = Item(
  DataElementTag(0x0008, 0x119B),
  "Failed Study Sequence",
  [Sequence],
  vm_1,
)

pub const studies_containing_other_referenced_instances_sequence = Item(
  DataElementTag(0x0008, 0x1200),
  "Studies Containing Other Referenced Instances Sequence",
  [Sequence],
  vm_1,
)

pub const related_series_sequence = Item(
  DataElementTag(0x0008, 0x1250),
  "Related Series Sequence",
  [Sequence],
  vm_1,
)

pub const lossy_image_compression_retired = Item(
  DataElementTag(0x0008, 0x2110),
  "Lossy Image Compression (Retired)",
  [CodeString],
  vm_1,
)

pub const derivation_description = Item(
  DataElementTag(0x0008, 0x2111),
  "Derivation Description",
  [ShortText],
  vm_1,
)

pub const source_image_sequence = Item(
  DataElementTag(0x0008, 0x2112),
  "Source Image Sequence",
  [Sequence],
  vm_1,
)

pub const stage_name = Item(
  DataElementTag(0x0008, 0x2120),
  "Stage Name",
  [ShortString],
  vm_1,
)

pub const stage_number = Item(
  DataElementTag(0x0008, 0x2122),
  "Stage Number",
  [IntegerString],
  vm_1,
)

pub const number_of_stages = Item(
  DataElementTag(0x0008, 0x2124),
  "Number of Stages",
  [IntegerString],
  vm_1,
)

pub const view_name = Item(
  DataElementTag(0x0008, 0x2127),
  "View Name",
  [ShortString],
  vm_1,
)

pub const view_number = Item(
  DataElementTag(0x0008, 0x2128),
  "View Number",
  [IntegerString],
  vm_1,
)

pub const number_of_event_timers = Item(
  DataElementTag(0x0008, 0x2129),
  "Number of Event Timers",
  [IntegerString],
  vm_1,
)

pub const number_of_views_in_stage = Item(
  DataElementTag(0x0008, 0x212A),
  "Number of Views in Stage",
  [IntegerString],
  vm_1,
)

pub const event_elapsed_times = Item(
  DataElementTag(0x0008, 0x2130),
  "Event Elapsed Time(s)",
  [DecimalString],
  vm_1_to_n,
)

pub const event_timer_names = Item(
  DataElementTag(0x0008, 0x2132),
  "Event Timer Name(s)",
  [LongString],
  vm_1_to_n,
)

pub const event_timer_sequence = Item(
  DataElementTag(0x0008, 0x2133),
  "Event Timer Sequence",
  [Sequence],
  vm_1,
)

pub const event_time_offset = Item(
  DataElementTag(0x0008, 0x2134),
  "Event Time Offset",
  [FloatingPointDouble],
  vm_1,
)

pub const event_code_sequence = Item(
  DataElementTag(0x0008, 0x2135),
  "Event Code Sequence",
  [Sequence],
  vm_1,
)

pub const start_trim = Item(
  DataElementTag(0x0008, 0x2142),
  "Start Trim",
  [IntegerString],
  vm_1,
)

pub const stop_trim = Item(
  DataElementTag(0x0008, 0x2143),
  "Stop Trim",
  [IntegerString],
  vm_1,
)

pub const recommended_display_frame_rate = Item(
  DataElementTag(0x0008, 0x2144),
  "Recommended Display Frame Rate",
  [IntegerString],
  vm_1,
)

pub const transducer_position = Item(
  DataElementTag(0x0008, 0x2200),
  "Transducer Position",
  [CodeString],
  vm_1,
)

pub const transducer_orientation = Item(
  DataElementTag(0x0008, 0x2204),
  "Transducer Orientation",
  [CodeString],
  vm_1,
)

pub const anatomic_structure = Item(
  DataElementTag(0x0008, 0x2208),
  "Anatomic Structure",
  [CodeString],
  vm_1,
)

pub const anatomic_region_sequence = Item(
  DataElementTag(0x0008, 0x2218),
  "Anatomic Region Sequence",
  [Sequence],
  vm_1,
)

pub const anatomic_region_modifier_sequence = Item(
  DataElementTag(0x0008, 0x2220),
  "Anatomic Region Modifier Sequence",
  [Sequence],
  vm_1,
)

pub const primary_anatomic_structure_sequence = Item(
  DataElementTag(0x0008, 0x2228),
  "Primary Anatomic Structure Sequence",
  [Sequence],
  vm_1,
)

pub const anatomic_structure_space_or_region_sequence = Item(
  DataElementTag(0x0008, 0x2229),
  "Anatomic Structure, Space or Region Sequence",
  [Sequence],
  vm_1,
)

pub const primary_anatomic_structure_modifier_sequence = Item(
  DataElementTag(0x0008, 0x2230),
  "Primary Anatomic Structure Modifier Sequence",
  [Sequence],
  vm_1,
)

pub const transducer_position_sequence = Item(
  DataElementTag(0x0008, 0x2240),
  "Transducer Position Sequence",
  [Sequence],
  vm_1,
)

pub const transducer_position_modifier_sequence = Item(
  DataElementTag(0x0008, 0x2242),
  "Transducer Position Modifier Sequence",
  [Sequence],
  vm_1,
)

pub const transducer_orientation_sequence = Item(
  DataElementTag(0x0008, 0x2244),
  "Transducer Orientation Sequence",
  [Sequence],
  vm_1,
)

pub const transducer_orientation_modifier_sequence = Item(
  DataElementTag(0x0008, 0x2246),
  "Transducer Orientation Modifier Sequence",
  [Sequence],
  vm_1,
)

pub const anatomic_structure_space_or_region_code_sequence_trial = Item(
  DataElementTag(0x0008, 0x2251),
  "Anatomic Structure Space Or Region Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const anatomic_portal_of_entrance_code_sequence_trial = Item(
  DataElementTag(0x0008, 0x2253),
  "Anatomic Portal Of Entrance Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const anatomic_approach_direction_code_sequence_trial = Item(
  DataElementTag(0x0008, 0x2255),
  "Anatomic Approach Direction Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const anatomic_perspective_description_trial = Item(
  DataElementTag(0x0008, 0x2256),
  "Anatomic Perspective Description (Trial)",
  [ShortText],
  vm_1,
)

pub const anatomic_perspective_code_sequence_trial = Item(
  DataElementTag(0x0008, 0x2257),
  "Anatomic Perspective Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const anatomic_location_of_examining_instrument_description_trial = Item(
  DataElementTag(0x0008, 0x2258),
  "Anatomic Location Of Examining Instrument Description (Trial)",
  [ShortText],
  vm_1,
)

pub const anatomic_location_of_examining_instrument_code_sequence_trial = Item(
  DataElementTag(0x0008, 0x2259),
  "Anatomic Location Of Examining Instrument Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const anatomic_structure_space_or_region_modifier_code_sequence_trial = Item(
  DataElementTag(0x0008, 0x225A),
  "Anatomic Structure Space Or Region Modifier Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const on_axis_background_anatomic_structure_code_sequence_trial = Item(
  DataElementTag(0x0008, 0x225C),
  "On Axis Background Anatomic Structure Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const alternate_representation_sequence = Item(
  DataElementTag(0x0008, 0x3001),
  "Alternate Representation Sequence",
  [Sequence],
  vm_1,
)

pub const available_transfer_syntax_uid = Item(
  DataElementTag(0x0008, 0x3002),
  "Available Transfer Syntax UID",
  [UniqueIdentifier],
  vm_1_to_n,
)

pub const irradiation_event_uid = Item(
  DataElementTag(0x0008, 0x3010),
  "Irradiation Event UID",
  [UniqueIdentifier],
  vm_1_to_n,
)

pub const source_irradiation_event_sequence = Item(
  DataElementTag(0x0008, 0x3011),
  "Source Irradiation Event Sequence",
  [Sequence],
  vm_1,
)

pub const radiopharmaceutical_administration_event_uid = Item(
  DataElementTag(0x0008, 0x3012),
  "Radiopharmaceutical Administration Event UID",
  [UniqueIdentifier],
  vm_1,
)

pub const identifying_comments = Item(
  DataElementTag(0x0008, 0x4000),
  "Identifying Comments",
  [LongText],
  vm_1,
)

pub const frame_type = Item(
  DataElementTag(0x0008, 0x9007),
  "Frame Type",
  [CodeString],
  ValueMultiplicity(4, Some(5)),
)

pub const referenced_image_evidence_sequence = Item(
  DataElementTag(0x0008, 0x9092),
  "Referenced Image Evidence Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_raw_data_sequence = Item(
  DataElementTag(0x0008, 0x9121),
  "Referenced Raw Data Sequence",
  [Sequence],
  vm_1,
)

pub const creator_version_uid = Item(
  DataElementTag(0x0008, 0x9123),
  "Creator-Version UID",
  [UniqueIdentifier],
  vm_1,
)

pub const derivation_image_sequence = Item(
  DataElementTag(0x0008, 0x9124),
  "Derivation Image Sequence",
  [Sequence],
  vm_1,
)

pub const source_image_evidence_sequence = Item(
  DataElementTag(0x0008, 0x9154),
  "Source Image Evidence Sequence",
  [Sequence],
  vm_1,
)

pub const pixel_presentation = Item(
  DataElementTag(0x0008, 0x9205),
  "Pixel Presentation",
  [CodeString],
  vm_1,
)

pub const volumetric_properties = Item(
  DataElementTag(0x0008, 0x9206),
  "Volumetric Properties",
  [CodeString],
  vm_1,
)

pub const volume_based_calculation_technique = Item(
  DataElementTag(0x0008, 0x9207),
  "Volume Based Calculation Technique",
  [CodeString],
  vm_1,
)

pub const complex_image_component = Item(
  DataElementTag(0x0008, 0x9208),
  "Complex Image Component",
  [CodeString],
  vm_1,
)

pub const acquisition_contrast = Item(
  DataElementTag(0x0008, 0x9209),
  "Acquisition Contrast",
  [CodeString],
  vm_1,
)

pub const derivation_code_sequence = Item(
  DataElementTag(0x0008, 0x9215),
  "Derivation Code Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_presentation_state_sequence = Item(
  DataElementTag(0x0008, 0x9237),
  "Referenced Presentation State Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_other_plane_sequence = Item(
  DataElementTag(0x0008, 0x9410),
  "Referenced Other Plane Sequence",
  [Sequence],
  vm_1,
)

pub const frame_display_sequence = Item(
  DataElementTag(0x0008, 0x9458),
  "Frame Display Sequence",
  [Sequence],
  vm_1,
)

pub const recommended_display_frame_rate_in_float = Item(
  DataElementTag(0x0008, 0x9459),
  "Recommended Display Frame Rate in Float",
  [FloatingPointSingle],
  vm_1,
)

pub const skip_frame_range_flag = Item(
  DataElementTag(0x0008, 0x9460),
  "Skip Frame Range Flag",
  [CodeString],
  vm_1,
)

pub const patient_name = Item(
  DataElementTag(0x0010, 0x0010),
  "Patient's Name",
  [PersonName],
  vm_1,
)

pub const patient_id = Item(
  DataElementTag(0x0010, 0x0020),
  "Patient ID",
  [LongString],
  vm_1,
)

pub const issuer_of_patient_id = Item(
  DataElementTag(0x0010, 0x0021),
  "Issuer of Patient ID",
  [LongString],
  vm_1,
)

pub const type_of_patient_id = Item(
  DataElementTag(0x0010, 0x0022),
  "Type of Patient ID",
  [CodeString],
  vm_1,
)

pub const issuer_of_patient_id_qualifiers_sequence = Item(
  DataElementTag(0x0010, 0x0024),
  "Issuer of Patient ID Qualifiers Sequence",
  [Sequence],
  vm_1,
)

pub const source_patient_group_identification_sequence = Item(
  DataElementTag(0x0010, 0x0026),
  "Source Patient Group Identification Sequence",
  [Sequence],
  vm_1,
)

pub const group_of_patients_identification_sequence = Item(
  DataElementTag(0x0010, 0x0027),
  "Group of Patients Identification Sequence",
  [Sequence],
  vm_1,
)

pub const subject_relative_position_in_image = Item(
  DataElementTag(0x0010, 0x0028),
  "Subject Relative Position in Image",
  [UnsignedShort],
  vm_3,
)

pub const patient_birth_date = Item(
  DataElementTag(0x0010, 0x0030),
  "Patient's Birth Date",
  [Date],
  vm_1,
)

pub const patient_birth_time = Item(
  DataElementTag(0x0010, 0x0032),
  "Patient's Birth Time",
  [Time],
  vm_1,
)

pub const patient_birth_date_in_alternative_calendar = Item(
  DataElementTag(0x0010, 0x0033),
  "Patient's Birth Date in Alternative Calendar",
  [LongString],
  vm_1,
)

pub const patient_death_date_in_alternative_calendar = Item(
  DataElementTag(0x0010, 0x0034),
  "Patient's Death Date in Alternative Calendar",
  [LongString],
  vm_1,
)

pub const patient_alternative_calendar = Item(
  DataElementTag(0x0010, 0x0035),
  "Patient's Alternative Calendar",
  [CodeString],
  vm_1,
)

pub const patient_sex = Item(
  DataElementTag(0x0010, 0x0040),
  "Patient's Sex",
  [CodeString],
  vm_1,
)

pub const patient_insurance_plan_code_sequence = Item(
  DataElementTag(0x0010, 0x0050),
  "Patient's Insurance Plan Code Sequence",
  [Sequence],
  vm_1,
)

pub const patient_primary_language_code_sequence = Item(
  DataElementTag(0x0010, 0x0101),
  "Patient's Primary Language Code Sequence",
  [Sequence],
  vm_1,
)

pub const patient_primary_language_modifier_code_sequence = Item(
  DataElementTag(0x0010, 0x0102),
  "Patient's Primary Language Modifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const quality_control_subject = Item(
  DataElementTag(0x0010, 0x0200),
  "Quality Control Subject",
  [CodeString],
  vm_1,
)

pub const quality_control_subject_type_code_sequence = Item(
  DataElementTag(0x0010, 0x0201),
  "Quality Control Subject Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const strain_description = Item(
  DataElementTag(0x0010, 0x0212),
  "Strain Description",
  [UnlimitedCharacters],
  vm_1,
)

pub const strain_nomenclature = Item(
  DataElementTag(0x0010, 0x0213),
  "Strain Nomenclature",
  [LongString],
  vm_1,
)

pub const strain_stock_number = Item(
  DataElementTag(0x0010, 0x0214),
  "Strain Stock Number",
  [LongString],
  vm_1,
)

pub const strain_source_registry_code_sequence = Item(
  DataElementTag(0x0010, 0x0215),
  "Strain Source Registry Code Sequence",
  [Sequence],
  vm_1,
)

pub const strain_stock_sequence = Item(
  DataElementTag(0x0010, 0x0216),
  "Strain Stock Sequence",
  [Sequence],
  vm_1,
)

pub const strain_source = Item(
  DataElementTag(0x0010, 0x0217),
  "Strain Source",
  [LongString],
  vm_1,
)

pub const strain_additional_information = Item(
  DataElementTag(0x0010, 0x0218),
  "Strain Additional Information",
  [UnlimitedText],
  vm_1,
)

pub const strain_code_sequence = Item(
  DataElementTag(0x0010, 0x0219),
  "Strain Code Sequence",
  [Sequence],
  vm_1,
)

pub const genetic_modifications_sequence = Item(
  DataElementTag(0x0010, 0x0221),
  "Genetic Modifications Sequence",
  [Sequence],
  vm_1,
)

pub const genetic_modifications_description = Item(
  DataElementTag(0x0010, 0x0222),
  "Genetic Modifications Description",
  [UnlimitedCharacters],
  vm_1,
)

pub const genetic_modifications_nomenclature = Item(
  DataElementTag(0x0010, 0x0223),
  "Genetic Modifications Nomenclature",
  [LongString],
  vm_1,
)

pub const genetic_modifications_code_sequence = Item(
  DataElementTag(0x0010, 0x0229),
  "Genetic Modifications Code Sequence",
  [Sequence],
  vm_1,
)

pub const other_patient_ids = Item(
  DataElementTag(0x0010, 0x1000),
  "Other Patient IDs",
  [LongString],
  vm_1_to_n,
)

pub const other_patient_names = Item(
  DataElementTag(0x0010, 0x1001),
  "Other Patient Names",
  [PersonName],
  vm_1_to_n,
)

pub const other_patient_ids_sequence = Item(
  DataElementTag(0x0010, 0x1002),
  "Other Patient IDs Sequence",
  [Sequence],
  vm_1,
)

pub const patient_birth_name = Item(
  DataElementTag(0x0010, 0x1005),
  "Patient's Birth Name",
  [PersonName],
  vm_1,
)

pub const patient_age = Item(
  DataElementTag(0x0010, 0x1010),
  "Patient's Age",
  [AgeString],
  vm_1,
)

pub const patient_size = Item(
  DataElementTag(0x0010, 0x1020),
  "Patient's Size",
  [DecimalString],
  vm_1,
)

pub const patient_size_code_sequence = Item(
  DataElementTag(0x0010, 0x1021),
  "Patient's Size Code Sequence",
  [Sequence],
  vm_1,
)

pub const patient_body_mass_index = Item(
  DataElementTag(0x0010, 0x1022),
  "Patient's Body Mass Index",
  [DecimalString],
  vm_1,
)

pub const measured_ap_dimension = Item(
  DataElementTag(0x0010, 0x1023),
  "Measured AP Dimension",
  [DecimalString],
  vm_1,
)

pub const measured_lateral_dimension = Item(
  DataElementTag(0x0010, 0x1024),
  "Measured Lateral Dimension",
  [DecimalString],
  vm_1,
)

pub const patient_weight = Item(
  DataElementTag(0x0010, 0x1030),
  "Patient's Weight",
  [DecimalString],
  vm_1,
)

pub const patient_address = Item(
  DataElementTag(0x0010, 0x1040),
  "Patient's Address",
  [LongString],
  vm_1,
)

pub const insurance_plan_identification = Item(
  DataElementTag(0x0010, 0x1050),
  "Insurance Plan Identification",
  [LongString],
  vm_1_to_n,
)

pub const patient_mother_birth_name = Item(
  DataElementTag(0x0010, 0x1060),
  "Patient's Mother's Birth Name",
  [PersonName],
  vm_1,
)

pub const military_rank = Item(
  DataElementTag(0x0010, 0x1080),
  "Military Rank",
  [LongString],
  vm_1,
)

pub const branch_of_service = Item(
  DataElementTag(0x0010, 0x1081),
  "Branch of Service",
  [LongString],
  vm_1,
)

pub const medical_record_locator = Item(
  DataElementTag(0x0010, 0x1090),
  "Medical Record Locator",
  [LongString],
  vm_1,
)

pub const referenced_patient_photo_sequence = Item(
  DataElementTag(0x0010, 0x1100),
  "Referenced Patient Photo Sequence",
  [Sequence],
  vm_1,
)

pub const medical_alerts = Item(
  DataElementTag(0x0010, 0x2000),
  "Medical Alerts",
  [LongString],
  vm_1_to_n,
)

pub const allergies = Item(
  DataElementTag(0x0010, 0x2110),
  "Allergies",
  [LongString],
  vm_1_to_n,
)

pub const country_of_residence = Item(
  DataElementTag(0x0010, 0x2150),
  "Country of Residence",
  [LongString],
  vm_1,
)

pub const region_of_residence = Item(
  DataElementTag(0x0010, 0x2152),
  "Region of Residence",
  [LongString],
  vm_1,
)

pub const patient_telephone_numbers = Item(
  DataElementTag(0x0010, 0x2154),
  "Patient's Telephone Numbers",
  [ShortString],
  vm_1_to_n,
)

pub const patient_telecom_information = Item(
  DataElementTag(0x0010, 0x2155),
  "Patient's Telecom Information",
  [LongText],
  vm_1,
)

pub const ethnic_group = Item(
  DataElementTag(0x0010, 0x2160),
  "Ethnic Group",
  [ShortString],
  vm_1,
)

pub const occupation = Item(
  DataElementTag(0x0010, 0x2180),
  "Occupation",
  [ShortString],
  vm_1,
)

pub const smoking_status = Item(
  DataElementTag(0x0010, 0x21A0),
  "Smoking Status",
  [CodeString],
  vm_1,
)

pub const additional_patient_history = Item(
  DataElementTag(0x0010, 0x21B0),
  "Additional Patient History",
  [LongText],
  vm_1,
)

pub const pregnancy_status = Item(
  DataElementTag(0x0010, 0x21C0),
  "Pregnancy Status",
  [UnsignedShort],
  vm_1,
)

pub const last_menstrual_date = Item(
  DataElementTag(0x0010, 0x21D0),
  "Last Menstrual Date",
  [Date],
  vm_1,
)

pub const patient_religious_preference = Item(
  DataElementTag(0x0010, 0x21F0),
  "Patient's Religious Preference",
  [LongString],
  vm_1,
)

pub const patient_species_description = Item(
  DataElementTag(0x0010, 0x2201),
  "Patient Species Description",
  [LongString],
  vm_1,
)

pub const patient_species_code_sequence = Item(
  DataElementTag(0x0010, 0x2202),
  "Patient Species Code Sequence",
  [Sequence],
  vm_1,
)

pub const patient_sex_neutered = Item(
  DataElementTag(0x0010, 0x2203),
  "Patient's Sex Neutered",
  [CodeString],
  vm_1,
)

pub const anatomical_orientation_type = Item(
  DataElementTag(0x0010, 0x2210),
  "Anatomical Orientation Type",
  [CodeString],
  vm_1,
)

pub const patient_breed_description = Item(
  DataElementTag(0x0010, 0x2292),
  "Patient Breed Description",
  [LongString],
  vm_1,
)

pub const patient_breed_code_sequence = Item(
  DataElementTag(0x0010, 0x2293),
  "Patient Breed Code Sequence",
  [Sequence],
  vm_1,
)

pub const breed_registration_sequence = Item(
  DataElementTag(0x0010, 0x2294),
  "Breed Registration Sequence",
  [Sequence],
  vm_1,
)

pub const breed_registration_number = Item(
  DataElementTag(0x0010, 0x2295),
  "Breed Registration Number",
  [LongString],
  vm_1,
)

pub const breed_registry_code_sequence = Item(
  DataElementTag(0x0010, 0x2296),
  "Breed Registry Code Sequence",
  [Sequence],
  vm_1,
)

pub const responsible_person = Item(
  DataElementTag(0x0010, 0x2297),
  "Responsible Person",
  [PersonName],
  vm_1,
)

pub const responsible_person_role = Item(
  DataElementTag(0x0010, 0x2298),
  "Responsible Person Role",
  [CodeString],
  vm_1,
)

pub const responsible_organization = Item(
  DataElementTag(0x0010, 0x2299),
  "Responsible Organization",
  [LongString],
  vm_1,
)

pub const patient_comments = Item(
  DataElementTag(0x0010, 0x4000),
  "Patient Comments",
  [LongText],
  vm_1,
)

pub const examined_body_thickness = Item(
  DataElementTag(0x0010, 0x9431),
  "Examined Body Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const clinical_trial_sponsor_name = Item(
  DataElementTag(0x0012, 0x0010),
  "Clinical Trial Sponsor Name",
  [LongString],
  vm_1,
)

pub const clinical_trial_protocol_id = Item(
  DataElementTag(0x0012, 0x0020),
  "Clinical Trial Protocol ID",
  [LongString],
  vm_1,
)

pub const clinical_trial_protocol_name = Item(
  DataElementTag(0x0012, 0x0021),
  "Clinical Trial Protocol Name",
  [LongString],
  vm_1,
)

pub const issuer_of_clinical_trial_protocol_id = Item(
  DataElementTag(0x0012, 0x0022),
  "Issuer of Clinical Trial Protocol ID",
  [LongString],
  vm_1,
)

pub const other_clinical_trial_protocol_ids_sequence = Item(
  DataElementTag(0x0012, 0x0023),
  "Other Clinical Trial Protocol IDs Sequence",
  [Sequence],
  vm_1,
)

pub const clinical_trial_site_id = Item(
  DataElementTag(0x0012, 0x0030),
  "Clinical Trial Site ID",
  [LongString],
  vm_1,
)

pub const clinical_trial_site_name = Item(
  DataElementTag(0x0012, 0x0031),
  "Clinical Trial Site Name",
  [LongString],
  vm_1,
)

pub const issuer_of_clinical_trial_site_id = Item(
  DataElementTag(0x0012, 0x0032),
  "Issuer of Clinical Trial Site ID",
  [LongString],
  vm_1,
)

pub const clinical_trial_subject_id = Item(
  DataElementTag(0x0012, 0x0040),
  "Clinical Trial Subject ID",
  [LongString],
  vm_1,
)

pub const issuer_of_clinical_trial_subject_id = Item(
  DataElementTag(0x0012, 0x0041),
  "Issuer of Clinical Trial Subject ID",
  [LongString],
  vm_1,
)

pub const clinical_trial_subject_reading_id = Item(
  DataElementTag(0x0012, 0x0042),
  "Clinical Trial Subject Reading ID",
  [LongString],
  vm_1,
)

pub const issuer_of_clinical_trial_subject_reading_id = Item(
  DataElementTag(0x0012, 0x0043),
  "Issuer of Clinical Trial Subject Reading ID",
  [LongString],
  vm_1,
)

pub const clinical_trial_time_point_id = Item(
  DataElementTag(0x0012, 0x0050),
  "Clinical Trial Time Point ID",
  [LongString],
  vm_1,
)

pub const clinical_trial_time_point_description = Item(
  DataElementTag(0x0012, 0x0051),
  "Clinical Trial Time Point Description",
  [ShortText],
  vm_1,
)

pub const longitudinal_temporal_offset_from_event = Item(
  DataElementTag(0x0012, 0x0052),
  "Longitudinal Temporal Offset from Event",
  [FloatingPointDouble],
  vm_1,
)

pub const longitudinal_temporal_event_type = Item(
  DataElementTag(0x0012, 0x0053),
  "Longitudinal Temporal Event Type",
  [CodeString],
  vm_1,
)

pub const clinical_trial_time_point_type_code_sequence = Item(
  DataElementTag(0x0012, 0x0054),
  "Clinical Trial Time Point Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const issuer_of_clinical_trial_time_point_id = Item(
  DataElementTag(0x0012, 0x0055),
  "Issuer of Clinical Trial Time Point ID",
  [LongString],
  vm_1,
)

pub const clinical_trial_coordinating_center_name = Item(
  DataElementTag(0x0012, 0x0060),
  "Clinical Trial Coordinating Center Name",
  [LongString],
  vm_1,
)

pub const patient_identity_removed = Item(
  DataElementTag(0x0012, 0x0062),
  "Patient Identity Removed",
  [CodeString],
  vm_1,
)

pub const deidentification_method = Item(
  DataElementTag(0x0012, 0x0063),
  "De-identification Method",
  [LongString],
  vm_1_to_n,
)

pub const deidentification_method_code_sequence = Item(
  DataElementTag(0x0012, 0x0064),
  "De-identification Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const clinical_trial_series_id = Item(
  DataElementTag(0x0012, 0x0071),
  "Clinical Trial Series ID",
  [LongString],
  vm_1,
)

pub const clinical_trial_series_description = Item(
  DataElementTag(0x0012, 0x0072),
  "Clinical Trial Series Description",
  [LongString],
  vm_1,
)

pub const issuer_of_clinical_trial_series_id = Item(
  DataElementTag(0x0012, 0x0073),
  "Issuer of Clinical Trial Series ID",
  [LongString],
  vm_1,
)

pub const clinical_trial_protocol_ethics_committee_name = Item(
  DataElementTag(0x0012, 0x0081),
  "Clinical Trial Protocol Ethics Committee Name",
  [LongString],
  vm_1,
)

pub const clinical_trial_protocol_ethics_committee_approval_number = Item(
  DataElementTag(0x0012, 0x0082),
  "Clinical Trial Protocol Ethics Committee Approval Number",
  [LongString],
  vm_1,
)

pub const consent_for_clinical_trial_use_sequence = Item(
  DataElementTag(0x0012, 0x0083),
  "Consent for Clinical Trial Use Sequence",
  [Sequence],
  vm_1,
)

pub const distribution_type = Item(
  DataElementTag(0x0012, 0x0084),
  "Distribution Type",
  [CodeString],
  vm_1,
)

pub const consent_for_distribution_flag = Item(
  DataElementTag(0x0012, 0x0085),
  "Consent for Distribution Flag",
  [CodeString],
  vm_1,
)

pub const ethics_committee_approval_effectiveness_start_date = Item(
  DataElementTag(0x0012, 0x0086),
  "Ethics Committee Approval Effectiveness Start Date",
  [Date],
  vm_1,
)

pub const ethics_committee_approval_effectiveness_end_date = Item(
  DataElementTag(0x0012, 0x0087),
  "Ethics Committee Approval Effectiveness End Date",
  [Date],
  vm_1,
)

pub const cad_file_format = Item(
  DataElementTag(0x0014, 0x0023),
  "CAD File Format",
  [ShortText],
  vm_1,
)

pub const component_reference_system = Item(
  DataElementTag(0x0014, 0x0024),
  "Component Reference System",
  [ShortText],
  vm_1,
)

pub const component_manufacturing_procedure = Item(
  DataElementTag(0x0014, 0x0025),
  "Component Manufacturing Procedure",
  [ShortText],
  vm_1,
)

pub const component_manufacturer = Item(
  DataElementTag(0x0014, 0x0028),
  "Component Manufacturer",
  [ShortText],
  vm_1,
)

pub const material_thickness = Item(
  DataElementTag(0x0014, 0x0030),
  "Material Thickness",
  [DecimalString],
  vm_1_to_n,
)

pub const material_pipe_diameter = Item(
  DataElementTag(0x0014, 0x0032),
  "Material Pipe Diameter",
  [DecimalString],
  vm_1_to_n,
)

pub const material_isolation_diameter = Item(
  DataElementTag(0x0014, 0x0034),
  "Material Isolation Diameter",
  [DecimalString],
  vm_1_to_n,
)

pub const material_grade = Item(
  DataElementTag(0x0014, 0x0042),
  "Material Grade",
  [ShortText],
  vm_1,
)

pub const material_properties_description = Item(
  DataElementTag(0x0014, 0x0044),
  "Material Properties Description",
  [ShortText],
  vm_1,
)

pub const material_properties_file_format_retired = Item(
  DataElementTag(0x0014, 0x0045),
  "Material Properties File Format (Retired)",
  [ShortText],
  vm_1,
)

pub const material_notes = Item(
  DataElementTag(0x0014, 0x0046),
  "Material Notes",
  [LongText],
  vm_1,
)

pub const component_shape = Item(
  DataElementTag(0x0014, 0x0050),
  "Component Shape",
  [CodeString],
  vm_1,
)

pub const curvature_type = Item(
  DataElementTag(0x0014, 0x0052),
  "Curvature Type",
  [CodeString],
  vm_1,
)

pub const outer_diameter = Item(
  DataElementTag(0x0014, 0x0054),
  "Outer Diameter",
  [DecimalString],
  vm_1,
)

pub const inner_diameter = Item(
  DataElementTag(0x0014, 0x0056),
  "Inner Diameter",
  [DecimalString],
  vm_1,
)

pub const component_welder_ids = Item(
  DataElementTag(0x0014, 0x0100),
  "Component Welder IDs",
  [LongString],
  vm_1_to_n,
)

pub const secondary_approval_status = Item(
  DataElementTag(0x0014, 0x0101),
  "Secondary Approval Status",
  [CodeString],
  vm_1,
)

pub const secondary_review_date = Item(
  DataElementTag(0x0014, 0x0102),
  "Secondary Review Date",
  [Date],
  vm_1,
)

pub const secondary_review_time = Item(
  DataElementTag(0x0014, 0x0103),
  "Secondary Review Time",
  [Time],
  vm_1,
)

pub const secondary_reviewer_name = Item(
  DataElementTag(0x0014, 0x0104),
  "Secondary Reviewer Name",
  [PersonName],
  vm_1,
)

pub const repair_id = Item(
  DataElementTag(0x0014, 0x0105),
  "Repair ID",
  [ShortText],
  vm_1,
)

pub const multiple_component_approval_sequence = Item(
  DataElementTag(0x0014, 0x0106),
  "Multiple Component Approval Sequence",
  [Sequence],
  vm_1,
)

pub const other_approval_status = Item(
  DataElementTag(0x0014, 0x0107),
  "Other Approval Status",
  [CodeString],
  vm_1_to_n,
)

pub const other_secondary_approval_status = Item(
  DataElementTag(0x0014, 0x0108),
  "Other Secondary Approval Status",
  [CodeString],
  vm_1_to_n,
)

pub const data_element_label_sequence = Item(
  DataElementTag(0x0014, 0x0200),
  "Data Element Label Sequence",
  [Sequence],
  vm_1,
)

pub const data_element_label_item_sequence = Item(
  DataElementTag(0x0014, 0x0201),
  "Data Element Label Item Sequence",
  [Sequence],
  vm_1,
)

pub const data_element = Item(
  DataElementTag(0x0014, 0x0202),
  "Data Element",
  [AttributeTag],
  vm_1,
)

pub const data_element_name = Item(
  DataElementTag(0x0014, 0x0203),
  "Data Element Name",
  [LongString],
  vm_1,
)

pub const data_element_description = Item(
  DataElementTag(0x0014, 0x0204),
  "Data Element Description",
  [LongString],
  vm_1,
)

pub const data_element_conditionality = Item(
  DataElementTag(0x0014, 0x0205),
  "Data Element Conditionality",
  [CodeString],
  vm_1,
)

pub const data_element_minimum_characters = Item(
  DataElementTag(0x0014, 0x0206),
  "Data Element Minimum Characters",
  [IntegerString],
  vm_1,
)

pub const data_element_maximum_characters = Item(
  DataElementTag(0x0014, 0x0207),
  "Data Element Maximum Characters",
  [IntegerString],
  vm_1,
)

pub const actual_environmental_conditions = Item(
  DataElementTag(0x0014, 0x1010),
  "Actual Environmental Conditions",
  [ShortText],
  vm_1,
)

pub const expiry_date = Item(
  DataElementTag(0x0014, 0x1020),
  "Expiry Date",
  [Date],
  vm_1,
)

pub const environmental_conditions = Item(
  DataElementTag(0x0014, 0x1040),
  "Environmental Conditions",
  [ShortText],
  vm_1,
)

pub const evaluator_sequence = Item(
  DataElementTag(0x0014, 0x2002),
  "Evaluator Sequence",
  [Sequence],
  vm_1,
)

pub const evaluator_number = Item(
  DataElementTag(0x0014, 0x2004),
  "Evaluator Number",
  [IntegerString],
  vm_1,
)

pub const evaluator_name = Item(
  DataElementTag(0x0014, 0x2006),
  "Evaluator Name",
  [PersonName],
  vm_1,
)

pub const evaluation_attempt = Item(
  DataElementTag(0x0014, 0x2008),
  "Evaluation Attempt",
  [IntegerString],
  vm_1,
)

pub const indication_sequence = Item(
  DataElementTag(0x0014, 0x2012),
  "Indication Sequence",
  [Sequence],
  vm_1,
)

pub const indication_number = Item(
  DataElementTag(0x0014, 0x2014),
  "Indication Number",
  [IntegerString],
  vm_1,
)

pub const indication_label = Item(
  DataElementTag(0x0014, 0x2016),
  "Indication Label",
  [ShortString],
  vm_1,
)

pub const indication_description = Item(
  DataElementTag(0x0014, 0x2018),
  "Indication Description",
  [ShortText],
  vm_1,
)

pub const indication_type = Item(
  DataElementTag(0x0014, 0x201A),
  "Indication Type",
  [CodeString],
  vm_1_to_n,
)

pub const indication_disposition = Item(
  DataElementTag(0x0014, 0x201C),
  "Indication Disposition",
  [CodeString],
  vm_1,
)

pub const indication_roi_sequence = Item(
  DataElementTag(0x0014, 0x201E),
  "Indication ROI Sequence",
  [Sequence],
  vm_1,
)

pub const indication_physical_property_sequence = Item(
  DataElementTag(0x0014, 0x2030),
  "Indication Physical Property Sequence",
  [Sequence],
  vm_1,
)

pub const property_label = Item(
  DataElementTag(0x0014, 0x2032),
  "Property Label",
  [ShortString],
  vm_1,
)

pub const coordinate_system_number_of_axes = Item(
  DataElementTag(0x0014, 0x2202),
  "Coordinate System Number of Axes",
  [IntegerString],
  vm_1,
)

pub const coordinate_system_axes_sequence = Item(
  DataElementTag(0x0014, 0x2204),
  "Coordinate System Axes Sequence",
  [Sequence],
  vm_1,
)

pub const coordinate_system_axis_description = Item(
  DataElementTag(0x0014, 0x2206),
  "Coordinate System Axis Description",
  [ShortText],
  vm_1,
)

pub const coordinate_system_data_set_mapping = Item(
  DataElementTag(0x0014, 0x2208),
  "Coordinate System Data Set Mapping",
  [CodeString],
  vm_1,
)

pub const coordinate_system_axis_number = Item(
  DataElementTag(0x0014, 0x220A),
  "Coordinate System Axis Number",
  [IntegerString],
  vm_1,
)

pub const coordinate_system_axis_type = Item(
  DataElementTag(0x0014, 0x220C),
  "Coordinate System Axis Type",
  [CodeString],
  vm_1,
)

pub const coordinate_system_axis_units = Item(
  DataElementTag(0x0014, 0x220E),
  "Coordinate System Axis Units",
  [CodeString],
  vm_1,
)

pub const coordinate_system_axis_values = Item(
  DataElementTag(0x0014, 0x2210),
  "Coordinate System Axis Values",
  [OtherByteString],
  vm_1,
)

pub const coordinate_system_transform_sequence = Item(
  DataElementTag(0x0014, 0x2220),
  "Coordinate System Transform Sequence",
  [Sequence],
  vm_1,
)

pub const transform_description = Item(
  DataElementTag(0x0014, 0x2222),
  "Transform Description",
  [ShortText],
  vm_1,
)

pub const transform_number_of_axes = Item(
  DataElementTag(0x0014, 0x2224),
  "Transform Number of Axes",
  [IntegerString],
  vm_1,
)

pub const transform_order_of_axes = Item(
  DataElementTag(0x0014, 0x2226),
  "Transform Order of Axes",
  [IntegerString],
  vm_1_to_n,
)

pub const transformed_axis_units = Item(
  DataElementTag(0x0014, 0x2228),
  "Transformed Axis Units",
  [CodeString],
  vm_1,
)

pub const coordinate_system_transform_rotation_and_scale_matrix = Item(
  DataElementTag(0x0014, 0x222A),
  "Coordinate System Transform Rotation and Scale Matrix",
  [DecimalString],
  vm_1_to_n,
)

pub const coordinate_system_transform_translation_matrix = Item(
  DataElementTag(0x0014, 0x222C),
  "Coordinate System Transform Translation Matrix",
  [DecimalString],
  vm_1_to_n,
)

pub const internal_detector_frame_time = Item(
  DataElementTag(0x0014, 0x3011),
  "Internal Detector Frame Time",
  [DecimalString],
  vm_1,
)

pub const number_of_frames_integrated = Item(
  DataElementTag(0x0014, 0x3012),
  "Number of Frames Integrated",
  [DecimalString],
  vm_1,
)

pub const detector_temperature_sequence = Item(
  DataElementTag(0x0014, 0x3020),
  "Detector Temperature Sequence",
  [Sequence],
  vm_1,
)

pub const sensor_name = Item(
  DataElementTag(0x0014, 0x3022),
  "Sensor Name",
  [ShortText],
  vm_1,
)

pub const horizontal_offset_of_sensor = Item(
  DataElementTag(0x0014, 0x3024),
  "Horizontal Offset of Sensor",
  [DecimalString],
  vm_1,
)

pub const vertical_offset_of_sensor = Item(
  DataElementTag(0x0014, 0x3026),
  "Vertical Offset of Sensor",
  [DecimalString],
  vm_1,
)

pub const sensor_temperature = Item(
  DataElementTag(0x0014, 0x3028),
  "Sensor Temperature",
  [DecimalString],
  vm_1,
)

pub const dark_current_sequence = Item(
  DataElementTag(0x0014, 0x3040),
  "Dark Current Sequence",
  [Sequence],
  vm_1,
)

pub const dark_current_counts = Item(
  DataElementTag(0x0014, 0x3050),
  "Dark Current Counts",
  [OtherByteString, OtherWordString],
  vm_1,
)

pub const gain_correction_reference_sequence = Item(
  DataElementTag(0x0014, 0x3060),
  "Gain Correction Reference Sequence",
  [Sequence],
  vm_1,
)

pub const air_counts = Item(
  DataElementTag(0x0014, 0x3070),
  "Air Counts",
  [OtherByteString, OtherWordString],
  vm_1,
)

pub const kv_used_in_gain_calibration = Item(
  DataElementTag(0x0014, 0x3071),
  "KV Used in Gain Calibration",
  [DecimalString],
  vm_1,
)

pub const ma_used_in_gain_calibration = Item(
  DataElementTag(0x0014, 0x3072),
  "MA Used in Gain Calibration",
  [DecimalString],
  vm_1,
)

pub const number_of_frames_used_for_integration = Item(
  DataElementTag(0x0014, 0x3073),
  "Number of Frames Used for Integration",
  [DecimalString],
  vm_1,
)

pub const filter_material_used_in_gain_calibration = Item(
  DataElementTag(0x0014, 0x3074),
  "Filter Material Used in Gain Calibration",
  [LongString],
  vm_1,
)

pub const filter_thickness_used_in_gain_calibration = Item(
  DataElementTag(0x0014, 0x3075),
  "Filter Thickness Used in Gain Calibration",
  [DecimalString],
  vm_1,
)

pub const date_of_gain_calibration = Item(
  DataElementTag(0x0014, 0x3076),
  "Date of Gain Calibration",
  [Date],
  vm_1,
)

pub const time_of_gain_calibration = Item(
  DataElementTag(0x0014, 0x3077),
  "Time of Gain Calibration",
  [Time],
  vm_1,
)

pub const bad_pixel_image = Item(
  DataElementTag(0x0014, 0x3080),
  "Bad Pixel Image",
  [OtherByteString],
  vm_1,
)

pub const calibration_notes = Item(
  DataElementTag(0x0014, 0x3099),
  "Calibration Notes",
  [LongText],
  vm_1,
)

pub const linearity_correction_technique = Item(
  DataElementTag(0x0014, 0x3100),
  "Linearity Correction Technique",
  [LongText],
  vm_1,
)

pub const beam_hardening_correction_technique = Item(
  DataElementTag(0x0014, 0x3101),
  "Beam Hardening Correction Technique",
  [LongText],
  vm_1,
)

pub const pulser_equipment_sequence = Item(
  DataElementTag(0x0014, 0x4002),
  "Pulser Equipment Sequence",
  [Sequence],
  vm_1,
)

pub const pulser_type = Item(
  DataElementTag(0x0014, 0x4004),
  "Pulser Type",
  [CodeString],
  vm_1,
)

pub const pulser_notes = Item(
  DataElementTag(0x0014, 0x4006),
  "Pulser Notes",
  [LongText],
  vm_1,
)

pub const receiver_equipment_sequence = Item(
  DataElementTag(0x0014, 0x4008),
  "Receiver Equipment Sequence",
  [Sequence],
  vm_1,
)

pub const amplifier_type = Item(
  DataElementTag(0x0014, 0x400A),
  "Amplifier Type",
  [CodeString],
  vm_1,
)

pub const receiver_notes = Item(
  DataElementTag(0x0014, 0x400C),
  "Receiver Notes",
  [LongText],
  vm_1,
)

pub const pre_amplifier_equipment_sequence = Item(
  DataElementTag(0x0014, 0x400E),
  "Pre-Amplifier Equipment Sequence",
  [Sequence],
  vm_1,
)

pub const pre_amplifier_notes = Item(
  DataElementTag(0x0014, 0x400F),
  "Pre-Amplifier Notes",
  [LongText],
  vm_1,
)

pub const transmit_transducer_sequence = Item(
  DataElementTag(0x0014, 0x4010),
  "Transmit Transducer Sequence",
  [Sequence],
  vm_1,
)

pub const receive_transducer_sequence = Item(
  DataElementTag(0x0014, 0x4011),
  "Receive Transducer Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_elements = Item(
  DataElementTag(0x0014, 0x4012),
  "Number of Elements",
  [UnsignedShort],
  vm_1,
)

pub const element_shape = Item(
  DataElementTag(0x0014, 0x4013),
  "Element Shape",
  [CodeString],
  vm_1,
)

pub const element_dimension_a = Item(
  DataElementTag(0x0014, 0x4014),
  "Element Dimension A",
  [DecimalString],
  vm_1,
)

pub const element_dimension_b = Item(
  DataElementTag(0x0014, 0x4015),
  "Element Dimension B",
  [DecimalString],
  vm_1,
)

pub const element_pitch_a = Item(
  DataElementTag(0x0014, 0x4016),
  "Element Pitch A",
  [DecimalString],
  vm_1,
)

pub const measured_beam_dimension_a = Item(
  DataElementTag(0x0014, 0x4017),
  "Measured Beam Dimension A",
  [DecimalString],
  vm_1,
)

pub const measured_beam_dimension_b = Item(
  DataElementTag(0x0014, 0x4018),
  "Measured Beam Dimension B",
  [DecimalString],
  vm_1,
)

pub const location_of_measured_beam_diameter = Item(
  DataElementTag(0x0014, 0x4019),
  "Location of Measured Beam Diameter",
  [DecimalString],
  vm_1,
)

pub const nominal_frequency = Item(
  DataElementTag(0x0014, 0x401A),
  "Nominal Frequency",
  [DecimalString],
  vm_1,
)

pub const measured_center_frequency = Item(
  DataElementTag(0x0014, 0x401B),
  "Measured Center Frequency",
  [DecimalString],
  vm_1,
)

pub const measured_bandwidth = Item(
  DataElementTag(0x0014, 0x401C),
  "Measured Bandwidth",
  [DecimalString],
  vm_1,
)

pub const element_pitch_b = Item(
  DataElementTag(0x0014, 0x401D),
  "Element Pitch B",
  [DecimalString],
  vm_1,
)

pub const pulser_settings_sequence = Item(
  DataElementTag(0x0014, 0x4020),
  "Pulser Settings Sequence",
  [Sequence],
  vm_1,
)

pub const pulse_width = Item(
  DataElementTag(0x0014, 0x4022),
  "Pulse Width",
  [DecimalString],
  vm_1,
)

pub const excitation_frequency = Item(
  DataElementTag(0x0014, 0x4024),
  "Excitation Frequency",
  [DecimalString],
  vm_1,
)

pub const modulation_type = Item(
  DataElementTag(0x0014, 0x4026),
  "Modulation Type",
  [CodeString],
  vm_1,
)

pub const damping = Item(
  DataElementTag(0x0014, 0x4028),
  "Damping",
  [DecimalString],
  vm_1,
)

pub const receiver_settings_sequence = Item(
  DataElementTag(0x0014, 0x4030),
  "Receiver Settings Sequence",
  [Sequence],
  vm_1,
)

pub const acquired_soundpath_length = Item(
  DataElementTag(0x0014, 0x4031),
  "Acquired Soundpath Length",
  [DecimalString],
  vm_1,
)

pub const acquisition_compression_type = Item(
  DataElementTag(0x0014, 0x4032),
  "Acquisition Compression Type",
  [CodeString],
  vm_1,
)

pub const acquisition_sample_size = Item(
  DataElementTag(0x0014, 0x4033),
  "Acquisition Sample Size",
  [IntegerString],
  vm_1,
)

pub const rectifier_smoothing = Item(
  DataElementTag(0x0014, 0x4034),
  "Rectifier Smoothing",
  [DecimalString],
  vm_1,
)

pub const dac_sequence = Item(
  DataElementTag(0x0014, 0x4035),
  "DAC Sequence",
  [Sequence],
  vm_1,
)

pub const dac_type = Item(
  DataElementTag(0x0014, 0x4036),
  "DAC Type",
  [CodeString],
  vm_1,
)

pub const dac_gain_points = Item(
  DataElementTag(0x0014, 0x4038),
  "DAC Gain Points",
  [DecimalString],
  vm_1_to_n,
)

pub const dac_time_points = Item(
  DataElementTag(0x0014, 0x403A),
  "DAC Time Points",
  [DecimalString],
  vm_1_to_n,
)

pub const dac_amplitude = Item(
  DataElementTag(0x0014, 0x403C),
  "DAC Amplitude",
  [DecimalString],
  vm_1_to_n,
)

pub const pre_amplifier_settings_sequence = Item(
  DataElementTag(0x0014, 0x4040),
  "Pre-Amplifier Settings Sequence",
  [Sequence],
  vm_1,
)

pub const transmit_transducer_settings_sequence = Item(
  DataElementTag(0x0014, 0x4050),
  "Transmit Transducer Settings Sequence",
  [Sequence],
  vm_1,
)

pub const receive_transducer_settings_sequence = Item(
  DataElementTag(0x0014, 0x4051),
  "Receive Transducer Settings Sequence",
  [Sequence],
  vm_1,
)

pub const incident_angle = Item(
  DataElementTag(0x0014, 0x4052),
  "Incident Angle",
  [DecimalString],
  vm_1,
)

pub const coupling_technique = Item(
  DataElementTag(0x0014, 0x4054),
  "Coupling Technique",
  [ShortText],
  vm_1,
)

pub const coupling_medium = Item(
  DataElementTag(0x0014, 0x4056),
  "Coupling Medium",
  [ShortText],
  vm_1,
)

pub const coupling_velocity = Item(
  DataElementTag(0x0014, 0x4057),
  "Coupling Velocity",
  [DecimalString],
  vm_1,
)

pub const probe_center_location_x = Item(
  DataElementTag(0x0014, 0x4058),
  "Probe Center Location X",
  [DecimalString],
  vm_1,
)

pub const probe_center_location_z = Item(
  DataElementTag(0x0014, 0x4059),
  "Probe Center Location Z",
  [DecimalString],
  vm_1,
)

pub const sound_path_length = Item(
  DataElementTag(0x0014, 0x405A),
  "Sound Path Length",
  [DecimalString],
  vm_1,
)

pub const delay_law_identifier = Item(
  DataElementTag(0x0014, 0x405C),
  "Delay Law Identifier",
  [ShortText],
  vm_1,
)

pub const gate_settings_sequence = Item(
  DataElementTag(0x0014, 0x4060),
  "Gate Settings Sequence",
  [Sequence],
  vm_1,
)

pub const gate_threshold = Item(
  DataElementTag(0x0014, 0x4062),
  "Gate Threshold",
  [DecimalString],
  vm_1,
)

pub const velocity_of_sound = Item(
  DataElementTag(0x0014, 0x4064),
  "Velocity of Sound",
  [DecimalString],
  vm_1,
)

pub const calibration_settings_sequence = Item(
  DataElementTag(0x0014, 0x4070),
  "Calibration Settings Sequence",
  [Sequence],
  vm_1,
)

pub const calibration_procedure = Item(
  DataElementTag(0x0014, 0x4072),
  "Calibration Procedure",
  [ShortText],
  vm_1,
)

pub const procedure_version = Item(
  DataElementTag(0x0014, 0x4074),
  "Procedure Version",
  [ShortString],
  vm_1,
)

pub const procedure_creation_date = Item(
  DataElementTag(0x0014, 0x4076),
  "Procedure Creation Date",
  [Date],
  vm_1,
)

pub const procedure_expiration_date = Item(
  DataElementTag(0x0014, 0x4078),
  "Procedure Expiration Date",
  [Date],
  vm_1,
)

pub const procedure_last_modified_date = Item(
  DataElementTag(0x0014, 0x407A),
  "Procedure Last Modified Date",
  [Date],
  vm_1,
)

pub const calibration_time = Item(
  DataElementTag(0x0014, 0x407C),
  "Calibration Time",
  [Time],
  vm_1_to_n,
)

pub const calibration_date = Item(
  DataElementTag(0x0014, 0x407E),
  "Calibration Date",
  [Date],
  vm_1_to_n,
)

pub const probe_drive_equipment_sequence = Item(
  DataElementTag(0x0014, 0x4080),
  "Probe Drive Equipment Sequence",
  [Sequence],
  vm_1,
)

pub const drive_type = Item(
  DataElementTag(0x0014, 0x4081),
  "Drive Type",
  [CodeString],
  vm_1,
)

pub const probe_drive_notes = Item(
  DataElementTag(0x0014, 0x4082),
  "Probe Drive Notes",
  [LongText],
  vm_1,
)

pub const drive_probe_sequence = Item(
  DataElementTag(0x0014, 0x4083),
  "Drive Probe Sequence",
  [Sequence],
  vm_1,
)

pub const probe_inductance = Item(
  DataElementTag(0x0014, 0x4084),
  "Probe Inductance",
  [DecimalString],
  vm_1,
)

pub const probe_resistance = Item(
  DataElementTag(0x0014, 0x4085),
  "Probe Resistance",
  [DecimalString],
  vm_1,
)

pub const receive_probe_sequence = Item(
  DataElementTag(0x0014, 0x4086),
  "Receive Probe Sequence",
  [Sequence],
  vm_1,
)

pub const probe_drive_settings_sequence = Item(
  DataElementTag(0x0014, 0x4087),
  "Probe Drive Settings Sequence",
  [Sequence],
  vm_1,
)

pub const bridge_resistors = Item(
  DataElementTag(0x0014, 0x4088),
  "Bridge Resistors",
  [DecimalString],
  vm_1,
)

pub const probe_orientation_angle = Item(
  DataElementTag(0x0014, 0x4089),
  "Probe Orientation Angle",
  [DecimalString],
  vm_1,
)

pub const user_selected_gain_y = Item(
  DataElementTag(0x0014, 0x408B),
  "User Selected Gain Y",
  [DecimalString],
  vm_1,
)

pub const user_selected_phase = Item(
  DataElementTag(0x0014, 0x408C),
  "User Selected Phase",
  [DecimalString],
  vm_1,
)

pub const user_selected_offset_x = Item(
  DataElementTag(0x0014, 0x408D),
  "User Selected Offset X",
  [DecimalString],
  vm_1,
)

pub const user_selected_offset_y = Item(
  DataElementTag(0x0014, 0x408E),
  "User Selected Offset Y",
  [DecimalString],
  vm_1,
)

pub const channel_settings_sequence = Item(
  DataElementTag(0x0014, 0x4091),
  "Channel Settings Sequence",
  [Sequence],
  vm_1,
)

pub const channel_threshold = Item(
  DataElementTag(0x0014, 0x4092),
  "Channel Threshold",
  [DecimalString],
  vm_1,
)

pub const scanner_settings_sequence = Item(
  DataElementTag(0x0014, 0x409A),
  "Scanner Settings Sequence",
  [Sequence],
  vm_1,
)

pub const scan_procedure = Item(
  DataElementTag(0x0014, 0x409B),
  "Scan Procedure",
  [ShortText],
  vm_1,
)

pub const translation_rate_x = Item(
  DataElementTag(0x0014, 0x409C),
  "Translation Rate X",
  [DecimalString],
  vm_1,
)

pub const translation_rate_y = Item(
  DataElementTag(0x0014, 0x409D),
  "Translation Rate Y",
  [DecimalString],
  vm_1,
)

pub const channel_overlap = Item(
  DataElementTag(0x0014, 0x409F),
  "Channel Overlap",
  [DecimalString],
  vm_1,
)

pub const image_quality_indicator_type = Item(
  DataElementTag(0x0014, 0x40A0),
  "Image Quality Indicator Type",
  [LongString],
  vm_1_to_n,
)

pub const image_quality_indicator_material = Item(
  DataElementTag(0x0014, 0x40A1),
  "Image Quality Indicator Material",
  [LongString],
  vm_1_to_n,
)

pub const image_quality_indicator_size = Item(
  DataElementTag(0x0014, 0x40A2),
  "Image Quality Indicator Size",
  [LongString],
  vm_1_to_n,
)

pub const linac_energy = Item(
  DataElementTag(0x0014, 0x5002),
  "LINAC Energy",
  [IntegerString],
  vm_1,
)

pub const linac_output = Item(
  DataElementTag(0x0014, 0x5004),
  "LINAC Output",
  [IntegerString],
  vm_1,
)

pub const active_aperture = Item(
  DataElementTag(0x0014, 0x5100),
  "Active Aperture",
  [UnsignedShort],
  vm_1,
)

pub const total_aperture = Item(
  DataElementTag(0x0014, 0x5101),
  "Total Aperture",
  [DecimalString],
  vm_1,
)

pub const aperture_elevation = Item(
  DataElementTag(0x0014, 0x5102),
  "Aperture Elevation",
  [DecimalString],
  vm_1,
)

pub const main_lobe_angle = Item(
  DataElementTag(0x0014, 0x5103),
  "Main Lobe Angle",
  [DecimalString],
  vm_1,
)

pub const main_roof_angle = Item(
  DataElementTag(0x0014, 0x5104),
  "Main Roof Angle",
  [DecimalString],
  vm_1,
)

pub const connector_type = Item(
  DataElementTag(0x0014, 0x5105),
  "Connector Type",
  [CodeString],
  vm_1,
)

pub const wedge_model_number = Item(
  DataElementTag(0x0014, 0x5106),
  "Wedge Model Number",
  [ShortString],
  vm_1,
)

pub const wedge_angle_float = Item(
  DataElementTag(0x0014, 0x5107),
  "Wedge Angle Float",
  [DecimalString],
  vm_1,
)

pub const wedge_roof_angle = Item(
  DataElementTag(0x0014, 0x5108),
  "Wedge Roof Angle",
  [DecimalString],
  vm_1,
)

pub const wedge_element_1_position = Item(
  DataElementTag(0x0014, 0x5109),
  "Wedge Element 1 Position",
  [CodeString],
  vm_1,
)

pub const wedge_material_velocity = Item(
  DataElementTag(0x0014, 0x510A),
  "Wedge Material Velocity",
  [DecimalString],
  vm_1,
)

pub const wedge_material = Item(
  DataElementTag(0x0014, 0x510B),
  "Wedge Material",
  [ShortString],
  vm_1,
)

pub const wedge_offset_z = Item(
  DataElementTag(0x0014, 0x510C),
  "Wedge Offset Z",
  [DecimalString],
  vm_1,
)

pub const wedge_origin_offset_x = Item(
  DataElementTag(0x0014, 0x510D),
  "Wedge Origin Offset X",
  [DecimalString],
  vm_1,
)

pub const wedge_time_delay = Item(
  DataElementTag(0x0014, 0x510E),
  "Wedge Time Delay",
  [DecimalString],
  vm_1,
)

pub const wedge_name = Item(
  DataElementTag(0x0014, 0x510F),
  "Wedge Name",
  [ShortString],
  vm_1,
)

pub const wedge_manufacturer_name = Item(
  DataElementTag(0x0014, 0x5110),
  "Wedge Manufacturer Name",
  [ShortString],
  vm_1,
)

pub const wedge_description = Item(
  DataElementTag(0x0014, 0x5111),
  "Wedge Description",
  [LongString],
  vm_1,
)

pub const nominal_beam_angle = Item(
  DataElementTag(0x0014, 0x5112),
  "Nominal Beam Angle",
  [DecimalString],
  vm_1,
)

pub const wedge_offset_x = Item(
  DataElementTag(0x0014, 0x5113),
  "Wedge Offset X",
  [DecimalString],
  vm_1,
)

pub const wedge_offset_y = Item(
  DataElementTag(0x0014, 0x5114),
  "Wedge Offset Y",
  [DecimalString],
  vm_1,
)

pub const wedge_total_length = Item(
  DataElementTag(0x0014, 0x5115),
  "Wedge Total Length",
  [DecimalString],
  vm_1,
)

pub const wedge_in_contact_length = Item(
  DataElementTag(0x0014, 0x5116),
  "Wedge In Contact Length",
  [DecimalString],
  vm_1,
)

pub const wedge_front_gap = Item(
  DataElementTag(0x0014, 0x5117),
  "Wedge Front Gap",
  [DecimalString],
  vm_1,
)

pub const wedge_total_height = Item(
  DataElementTag(0x0014, 0x5118),
  "Wedge Total Height",
  [DecimalString],
  vm_1,
)

pub const wedge_front_height = Item(
  DataElementTag(0x0014, 0x5119),
  "Wedge Front Height",
  [DecimalString],
  vm_1,
)

pub const wedge_rear_height = Item(
  DataElementTag(0x0014, 0x511A),
  "Wedge Rear Height",
  [DecimalString],
  vm_1,
)

pub const wedge_total_width = Item(
  DataElementTag(0x0014, 0x511B),
  "Wedge Total Width",
  [DecimalString],
  vm_1,
)

pub const wedge_in_contact_width = Item(
  DataElementTag(0x0014, 0x511C),
  "Wedge In Contact Width",
  [DecimalString],
  vm_1,
)

pub const wedge_chamfer_height = Item(
  DataElementTag(0x0014, 0x511D),
  "Wedge Chamfer Height",
  [DecimalString],
  vm_1,
)

pub const wedge_curve = Item(
  DataElementTag(0x0014, 0x511E),
  "Wedge Curve",
  [CodeString],
  vm_1,
)

pub const radius_along_wedge = Item(
  DataElementTag(0x0014, 0x511F),
  "Radius Along the Wedge",
  [DecimalString],
  vm_1,
)

pub const white_point = Item(
  DataElementTag(0x0016, 0x0001),
  "White Point",
  [DecimalString],
  vm_1,
)

pub const primary_chromaticities = Item(
  DataElementTag(0x0016, 0x0002),
  "Primary Chromaticities",
  [DecimalString],
  vm_3,
)

pub const battery_level = Item(
  DataElementTag(0x0016, 0x0003),
  "Battery Level",
  [UnlimitedText],
  vm_1,
)

pub const exposure_time_in_seconds = Item(
  DataElementTag(0x0016, 0x0004),
  "Exposure Time in Seconds",
  [DecimalString],
  vm_1,
)

pub const f_number = Item(
  DataElementTag(0x0016, 0x0005),
  "F-Number",
  [DecimalString],
  vm_1,
)

pub const oecf_rows = Item(
  DataElementTag(0x0016, 0x0006),
  "OECF Rows",
  [IntegerString],
  vm_1,
)

pub const oecf_columns = Item(
  DataElementTag(0x0016, 0x0007),
  "OECF Columns",
  [IntegerString],
  vm_1,
)

pub const oecf_column_names = Item(
  DataElementTag(0x0016, 0x0008),
  "OECF Column Names",
  [UnlimitedCharacters],
  vm_1_to_n,
)

pub const oecf_values = Item(
  DataElementTag(0x0016, 0x0009),
  "OECF Values",
  [DecimalString],
  vm_1_to_n,
)

pub const spatial_frequency_response_rows = Item(
  DataElementTag(0x0016, 0x000A),
  "Spatial Frequency Response Rows",
  [IntegerString],
  vm_1,
)

pub const spatial_frequency_response_columns = Item(
  DataElementTag(0x0016, 0x000B),
  "Spatial Frequency Response Columns",
  [IntegerString],
  vm_1,
)

pub const spatial_frequency_response_column_names = Item(
  DataElementTag(0x0016, 0x000C),
  "Spatial Frequency Response Column Names",
  [UnlimitedCharacters],
  vm_1_to_n,
)

pub const spatial_frequency_response_values = Item(
  DataElementTag(0x0016, 0x000D),
  "Spatial Frequency Response Values",
  [DecimalString],
  vm_1_to_n,
)

pub const color_filter_array_pattern_rows = Item(
  DataElementTag(0x0016, 0x000E),
  "Color Filter Array Pattern Rows",
  [IntegerString],
  vm_1,
)

pub const color_filter_array_pattern_columns = Item(
  DataElementTag(0x0016, 0x000F),
  "Color Filter Array Pattern Columns",
  [IntegerString],
  vm_1,
)

pub const color_filter_array_pattern_values = Item(
  DataElementTag(0x0016, 0x0010),
  "Color Filter Array Pattern Values",
  [DecimalString],
  vm_1_to_n,
)

pub const flash_firing_status = Item(
  DataElementTag(0x0016, 0x0011),
  "Flash Firing Status",
  [UnsignedShort],
  vm_1,
)

pub const flash_return_status = Item(
  DataElementTag(0x0016, 0x0012),
  "Flash Return Status",
  [UnsignedShort],
  vm_1,
)

pub const flash_mode = Item(
  DataElementTag(0x0016, 0x0013),
  "Flash Mode",
  [UnsignedShort],
  vm_1,
)

pub const flash_function_present = Item(
  DataElementTag(0x0016, 0x0014),
  "Flash Function Present",
  [UnsignedShort],
  vm_1,
)

pub const flash_red_eye_mode = Item(
  DataElementTag(0x0016, 0x0015),
  "Flash Red Eye Mode",
  [UnsignedShort],
  vm_1,
)

pub const exposure_program = Item(
  DataElementTag(0x0016, 0x0016),
  "Exposure Program",
  [UnsignedShort],
  vm_1,
)

pub const spectral_sensitivity = Item(
  DataElementTag(0x0016, 0x0017),
  "Spectral Sensitivity",
  [UnlimitedText],
  vm_1,
)

pub const photographic_sensitivity = Item(
  DataElementTag(0x0016, 0x0018),
  "Photographic Sensitivity",
  [IntegerString],
  vm_1,
)

pub const self_timer_mode = Item(
  DataElementTag(0x0016, 0x0019),
  "Self Timer Mode",
  [IntegerString],
  vm_1,
)

pub const sensitivity_type = Item(
  DataElementTag(0x0016, 0x001A),
  "Sensitivity Type",
  [UnsignedShort],
  vm_1,
)

pub const standard_output_sensitivity = Item(
  DataElementTag(0x0016, 0x001B),
  "Standard Output Sensitivity",
  [IntegerString],
  vm_1,
)

pub const recommended_exposure_index = Item(
  DataElementTag(0x0016, 0x001C),
  "Recommended Exposure Index",
  [IntegerString],
  vm_1,
)

pub const iso_speed = Item(
  DataElementTag(0x0016, 0x001D),
  "ISO Speed",
  [IntegerString],
  vm_1,
)

pub const iso_speed_latitude_yyy = Item(
  DataElementTag(0x0016, 0x001E),
  "ISO Speed Latitude yyy",
  [IntegerString],
  vm_1,
)

pub const iso_speed_latitude_zzz = Item(
  DataElementTag(0x0016, 0x001F),
  "ISO Speed Latitude zzz",
  [IntegerString],
  vm_1,
)

pub const exif_version = Item(
  DataElementTag(0x0016, 0x0020),
  "EXIF Version",
  [UnlimitedText],
  vm_1,
)

pub const shutter_speed_value = Item(
  DataElementTag(0x0016, 0x0021),
  "Shutter Speed Value",
  [DecimalString],
  vm_1,
)

pub const aperture_value = Item(
  DataElementTag(0x0016, 0x0022),
  "Aperture Value",
  [DecimalString],
  vm_1,
)

pub const brightness_value = Item(
  DataElementTag(0x0016, 0x0023),
  "Brightness Value",
  [DecimalString],
  vm_1,
)

pub const exposure_bias_value = Item(
  DataElementTag(0x0016, 0x0024),
  "Exposure Bias Value",
  [DecimalString],
  vm_1,
)

pub const max_aperture_value = Item(
  DataElementTag(0x0016, 0x0025),
  "Max Aperture Value",
  [DecimalString],
  vm_1,
)

pub const subject_distance = Item(
  DataElementTag(0x0016, 0x0026),
  "Subject Distance",
  [DecimalString],
  vm_1,
)

pub const metering_mode = Item(
  DataElementTag(0x0016, 0x0027),
  "Metering Mode",
  [UnsignedShort],
  vm_1,
)

pub const light_source = Item(
  DataElementTag(0x0016, 0x0028),
  "Light Source",
  [UnsignedShort],
  vm_1,
)

pub const focal_length = Item(
  DataElementTag(0x0016, 0x0029),
  "Focal Length",
  [DecimalString],
  vm_1,
)

pub const subject_area = Item(
  DataElementTag(0x0016, 0x002A),
  "Subject Area",
  [IntegerString],
  ValueMultiplicity(2, Some(4)),
)

pub const maker_note = Item(
  DataElementTag(0x0016, 0x002B),
  "Maker Note",
  [OtherByteString],
  vm_1,
)

pub const temperature = Item(
  DataElementTag(0x0016, 0x0030),
  "Temperature",
  [DecimalString],
  vm_1,
)

pub const humidity = Item(
  DataElementTag(0x0016, 0x0031),
  "Humidity",
  [DecimalString],
  vm_1,
)

pub const pressure = Item(
  DataElementTag(0x0016, 0x0032),
  "Pressure",
  [DecimalString],
  vm_1,
)

pub const water_depth = Item(
  DataElementTag(0x0016, 0x0033),
  "Water Depth",
  [DecimalString],
  vm_1,
)

pub const acceleration = Item(
  DataElementTag(0x0016, 0x0034),
  "Acceleration",
  [DecimalString],
  vm_1,
)

pub const camera_elevation_angle = Item(
  DataElementTag(0x0016, 0x0035),
  "Camera Elevation Angle",
  [DecimalString],
  vm_1,
)

pub const flash_energy = Item(
  DataElementTag(0x0016, 0x0036),
  "Flash Energy",
  [DecimalString],
  vm_1_to_2,
)

pub const subject_location = Item(
  DataElementTag(0x0016, 0x0037),
  "Subject Location",
  [IntegerString],
  vm_2,
)

pub const photographic_exposure_index = Item(
  DataElementTag(0x0016, 0x0038),
  "Photographic Exposure Index",
  [DecimalString],
  vm_1,
)

pub const sensing_method = Item(
  DataElementTag(0x0016, 0x0039),
  "Sensing Method",
  [UnsignedShort],
  vm_1,
)

pub const file_source = Item(
  DataElementTag(0x0016, 0x003A),
  "File Source",
  [UnsignedShort],
  vm_1,
)

pub const scene_type = Item(
  DataElementTag(0x0016, 0x003B),
  "Scene Type",
  [UnsignedShort],
  vm_1,
)

pub const custom_rendered = Item(
  DataElementTag(0x0016, 0x0041),
  "Custom Rendered",
  [UnsignedShort],
  vm_1,
)

pub const exposure_mode = Item(
  DataElementTag(0x0016, 0x0042),
  "Exposure Mode",
  [UnsignedShort],
  vm_1,
)

pub const white_balance = Item(
  DataElementTag(0x0016, 0x0043),
  "White Balance",
  [UnsignedShort],
  vm_1,
)

pub const digital_zoom_ratio = Item(
  DataElementTag(0x0016, 0x0044),
  "Digital Zoom Ratio",
  [DecimalString],
  vm_1,
)

pub const focal_length_in_3_5mm_film = Item(
  DataElementTag(0x0016, 0x0045),
  "Focal Length In 35mm Film",
  [IntegerString],
  vm_1,
)

pub const scene_capture_type = Item(
  DataElementTag(0x0016, 0x0046),
  "Scene Capture Type",
  [UnsignedShort],
  vm_1,
)

pub const gain_control = Item(
  DataElementTag(0x0016, 0x0047),
  "Gain Control",
  [UnsignedShort],
  vm_1,
)

pub const contrast = Item(
  DataElementTag(0x0016, 0x0048),
  "Contrast",
  [UnsignedShort],
  vm_1,
)

pub const saturation = Item(
  DataElementTag(0x0016, 0x0049),
  "Saturation",
  [UnsignedShort],
  vm_1,
)

pub const sharpness = Item(
  DataElementTag(0x0016, 0x004A),
  "Sharpness",
  [UnsignedShort],
  vm_1,
)

pub const device_setting_description = Item(
  DataElementTag(0x0016, 0x004B),
  "Device Setting Description",
  [OtherByteString],
  vm_1,
)

pub const subject_distance_range = Item(
  DataElementTag(0x0016, 0x004C),
  "Subject Distance Range",
  [UnsignedShort],
  vm_1,
)

pub const camera_owner_name = Item(
  DataElementTag(0x0016, 0x004D),
  "Camera Owner Name",
  [UnlimitedText],
  vm_1,
)

pub const lens_specification = Item(
  DataElementTag(0x0016, 0x004E),
  "Lens Specification",
  [DecimalString],
  vm_4,
)

pub const lens_make = Item(
  DataElementTag(0x0016, 0x004F),
  "Lens Make",
  [UnlimitedText],
  vm_1,
)

pub const lens_model = Item(
  DataElementTag(0x0016, 0x0050),
  "Lens Model",
  [UnlimitedText],
  vm_1,
)

pub const lens_serial_number = Item(
  DataElementTag(0x0016, 0x0051),
  "Lens Serial Number",
  [UnlimitedText],
  vm_1,
)

pub const interoperability_index = Item(
  DataElementTag(0x0016, 0x0061),
  "Interoperability Index",
  [CodeString],
  vm_1,
)

pub const interoperability_version = Item(
  DataElementTag(0x0016, 0x0062),
  "Interoperability Version",
  [OtherByteString],
  vm_1,
)

pub const gps_version_id = Item(
  DataElementTag(0x0016, 0x0070),
  "GPS Version ID",
  [OtherByteString],
  vm_1,
)

pub const gps_latitude_ref = Item(
  DataElementTag(0x0016, 0x0071),
  "GPS Latitude Ref",
  [CodeString],
  vm_1,
)

pub const gps_latitude = Item(
  DataElementTag(0x0016, 0x0072),
  "GPS Latitude",
  [DecimalString],
  vm_3,
)

pub const gps_longitude_ref = Item(
  DataElementTag(0x0016, 0x0073),
  "GPS Longitude Ref",
  [CodeString],
  vm_1,
)

pub const gps_longitude = Item(
  DataElementTag(0x0016, 0x0074),
  "GPS Longitude",
  [DecimalString],
  vm_3,
)

pub const gps_altitude_ref = Item(
  DataElementTag(0x0016, 0x0075),
  "GPS Altitude Ref",
  [UnsignedShort],
  vm_1,
)

pub const gps_altitude = Item(
  DataElementTag(0x0016, 0x0076),
  "GPS Altitude",
  [DecimalString],
  vm_1,
)

pub const gps_time_stamp = Item(
  DataElementTag(0x0016, 0x0077),
  "GPS Time Stamp",
  [DateTime],
  vm_1,
)

pub const gps_satellites = Item(
  DataElementTag(0x0016, 0x0078),
  "GPS Satellites",
  [UnlimitedText],
  vm_1,
)

pub const gps_status = Item(
  DataElementTag(0x0016, 0x0079),
  "GPS Status",
  [CodeString],
  vm_1,
)

pub const gps_measure_mode = Item(
  DataElementTag(0x0016, 0x007A),
  "GPS Measure Mode",
  [CodeString],
  vm_1,
)

pub const gpsdop = Item(
  DataElementTag(0x0016, 0x007B),
  "GPS DOP",
  [DecimalString],
  vm_1,
)

pub const gps_speed_ref = Item(
  DataElementTag(0x0016, 0x007C),
  "GPS Speed Ref",
  [CodeString],
  vm_1,
)

pub const gps_speed = Item(
  DataElementTag(0x0016, 0x007D),
  "GPS Speed",
  [DecimalString],
  vm_1,
)

pub const gps_track_ref = Item(
  DataElementTag(0x0016, 0x007E),
  "GPS Track Ref",
  [CodeString],
  vm_1,
)

pub const gps_track = Item(
  DataElementTag(0x0016, 0x007F),
  "GPS Track",
  [DecimalString],
  vm_1,
)

pub const gps_img_direction_ref = Item(
  DataElementTag(0x0016, 0x0080),
  "GPS Img Direction Ref",
  [CodeString],
  vm_1,
)

pub const gps_img_direction = Item(
  DataElementTag(0x0016, 0x0081),
  "GPS Img Direction",
  [DecimalString],
  vm_1,
)

pub const gps_map_datum = Item(
  DataElementTag(0x0016, 0x0082),
  "GPS Map Datum",
  [UnlimitedText],
  vm_1,
)

pub const gps_dest_latitude_ref = Item(
  DataElementTag(0x0016, 0x0083),
  "GPS Dest Latitude Ref",
  [CodeString],
  vm_1,
)

pub const gps_dest_latitude = Item(
  DataElementTag(0x0016, 0x0084),
  "GPS Dest Latitude",
  [DecimalString],
  vm_3,
)

pub const gps_dest_longitude_ref = Item(
  DataElementTag(0x0016, 0x0085),
  "GPS Dest Longitude Ref",
  [CodeString],
  vm_1,
)

pub const gps_dest_longitude = Item(
  DataElementTag(0x0016, 0x0086),
  "GPS Dest Longitude",
  [DecimalString],
  vm_3,
)

pub const gps_dest_bearing_ref = Item(
  DataElementTag(0x0016, 0x0087),
  "GPS Dest Bearing Ref",
  [CodeString],
  vm_1,
)

pub const gps_dest_bearing = Item(
  DataElementTag(0x0016, 0x0088),
  "GPS Dest Bearing",
  [DecimalString],
  vm_1,
)

pub const gps_dest_distance_ref = Item(
  DataElementTag(0x0016, 0x0089),
  "GPS Dest Distance Ref",
  [CodeString],
  vm_1,
)

pub const gps_dest_distance = Item(
  DataElementTag(0x0016, 0x008A),
  "GPS Dest Distance",
  [DecimalString],
  vm_1,
)

pub const gps_processing_method = Item(
  DataElementTag(0x0016, 0x008B),
  "GPS Processing Method",
  [OtherByteString],
  vm_1,
)

pub const gps_area_information = Item(
  DataElementTag(0x0016, 0x008C),
  "GPS Area Information",
  [OtherByteString],
  vm_1,
)

pub const gps_date_stamp = Item(
  DataElementTag(0x0016, 0x008D),
  "GPS Date Stamp",
  [DateTime],
  vm_1,
)

pub const gps_differential = Item(
  DataElementTag(0x0016, 0x008E),
  "GPS Differential",
  [IntegerString],
  vm_1,
)

pub const light_source_polarization = Item(
  DataElementTag(0x0016, 0x1001),
  "Light Source Polarization",
  [CodeString],
  vm_1,
)

pub const emitter_color_temperature = Item(
  DataElementTag(0x0016, 0x1002),
  "Emitter Color Temperature",
  [DecimalString],
  vm_1,
)

pub const contact_method = Item(
  DataElementTag(0x0016, 0x1003),
  "Contact Method",
  [CodeString],
  vm_1,
)

pub const immersion_media = Item(
  DataElementTag(0x0016, 0x1004),
  "Immersion Media",
  [CodeString],
  vm_1_to_n,
)

pub const optical_magnification_factor = Item(
  DataElementTag(0x0016, 0x1005),
  "Optical Magnification Factor",
  [DecimalString],
  vm_1,
)

pub const contrast_bolus_agent = Item(
  DataElementTag(0x0018, 0x0010),
  "Contrast/Bolus Agent",
  [LongString],
  vm_1,
)

pub const contrast_bolus_agent_sequence = Item(
  DataElementTag(0x0018, 0x0012),
  "Contrast/Bolus Agent Sequence",
  [Sequence],
  vm_1,
)

pub const contrast_bolus_t1_relaxivity = Item(
  DataElementTag(0x0018, 0x0013),
  "Contrast/Bolus T1 Relaxivity",
  [FloatingPointSingle],
  vm_1,
)

pub const contrast_bolus_administration_route_sequence = Item(
  DataElementTag(0x0018, 0x0014),
  "Contrast/Bolus Administration Route Sequence",
  [Sequence],
  vm_1,
)

pub const body_part_examined = Item(
  DataElementTag(0x0018, 0x0015),
  "Body Part Examined",
  [CodeString],
  vm_1,
)

pub const scanning_sequence = Item(
  DataElementTag(0x0018, 0x0020),
  "Scanning Sequence",
  [CodeString],
  vm_1_to_n,
)

pub const sequence_variant = Item(
  DataElementTag(0x0018, 0x0021),
  "Sequence Variant",
  [CodeString],
  vm_1_to_n,
)

pub const scan_options = Item(
  DataElementTag(0x0018, 0x0022),
  "Scan Options",
  [CodeString],
  vm_1_to_n,
)

pub const mr_acquisition_type = Item(
  DataElementTag(0x0018, 0x0023),
  "MR Acquisition Type",
  [CodeString],
  vm_1,
)

pub const sequence_name = Item(
  DataElementTag(0x0018, 0x0024),
  "Sequence Name",
  [ShortString],
  vm_1,
)

pub const angio_flag = Item(
  DataElementTag(0x0018, 0x0025),
  "Angio Flag",
  [CodeString],
  vm_1,
)

pub const intervention_drug_information_sequence = Item(
  DataElementTag(0x0018, 0x0026),
  "Intervention Drug Information Sequence",
  [Sequence],
  vm_1,
)

pub const intervention_drug_stop_time = Item(
  DataElementTag(0x0018, 0x0027),
  "Intervention Drug Stop Time",
  [Time],
  vm_1,
)

pub const intervention_drug_dose = Item(
  DataElementTag(0x0018, 0x0028),
  "Intervention Drug Dose",
  [DecimalString],
  vm_1,
)

pub const intervention_drug_code_sequence = Item(
  DataElementTag(0x0018, 0x0029),
  "Intervention Drug Code Sequence",
  [Sequence],
  vm_1,
)

pub const additional_drug_sequence = Item(
  DataElementTag(0x0018, 0x002A),
  "Additional Drug Sequence",
  [Sequence],
  vm_1,
)

pub const radionuclide = Item(
  DataElementTag(0x0018, 0x0030),
  "Radionuclide",
  [LongString],
  vm_1_to_n,
)

pub const radiopharmaceutical = Item(
  DataElementTag(0x0018, 0x0031),
  "Radiopharmaceutical",
  [LongString],
  vm_1,
)

pub const energy_window_centerline = Item(
  DataElementTag(0x0018, 0x0032),
  "Energy Window Centerline",
  [DecimalString],
  vm_1,
)

pub const energy_window_total_width = Item(
  DataElementTag(0x0018, 0x0033),
  "Energy Window Total Width",
  [DecimalString],
  vm_1_to_n,
)

pub const intervention_drug_name = Item(
  DataElementTag(0x0018, 0x0034),
  "Intervention Drug Name",
  [LongString],
  vm_1,
)

pub const intervention_drug_start_time = Item(
  DataElementTag(0x0018, 0x0035),
  "Intervention Drug Start Time",
  [Time],
  vm_1,
)

pub const intervention_sequence = Item(
  DataElementTag(0x0018, 0x0036),
  "Intervention Sequence",
  [Sequence],
  vm_1,
)

pub const therapy_type = Item(
  DataElementTag(0x0018, 0x0037),
  "Therapy Type",
  [CodeString],
  vm_1,
)

pub const intervention_status = Item(
  DataElementTag(0x0018, 0x0038),
  "Intervention Status",
  [CodeString],
  vm_1,
)

pub const therapy_description = Item(
  DataElementTag(0x0018, 0x0039),
  "Therapy Description",
  [CodeString],
  vm_1,
)

pub const intervention_description = Item(
  DataElementTag(0x0018, 0x003A),
  "Intervention Description",
  [ShortText],
  vm_1,
)

pub const cine_rate = Item(
  DataElementTag(0x0018, 0x0040),
  "Cine Rate",
  [IntegerString],
  vm_1,
)

pub const initial_cine_run_state = Item(
  DataElementTag(0x0018, 0x0042),
  "Initial Cine Run State",
  [CodeString],
  vm_1,
)

pub const slice_thickness = Item(
  DataElementTag(0x0018, 0x0050),
  "Slice Thickness",
  [DecimalString],
  vm_1,
)

pub const kvp = Item(
  DataElementTag(0x0018, 0x0060),
  "KVP",
  [DecimalString],
  vm_1,
)

pub const counts_accumulated = Item(
  DataElementTag(0x0018, 0x0070),
  "Counts Accumulated",
  [IntegerString],
  vm_1,
)

pub const acquisition_termination_condition = Item(
  DataElementTag(0x0018, 0x0071),
  "Acquisition Termination Condition",
  [CodeString],
  vm_1,
)

pub const effective_duration = Item(
  DataElementTag(0x0018, 0x0072),
  "Effective Duration",
  [DecimalString],
  vm_1,
)

pub const acquisition_start_condition = Item(
  DataElementTag(0x0018, 0x0073),
  "Acquisition Start Condition",
  [CodeString],
  vm_1,
)

pub const acquisition_start_condition_data = Item(
  DataElementTag(0x0018, 0x0074),
  "Acquisition Start Condition Data",
  [IntegerString],
  vm_1,
)

pub const acquisition_termination_condition_data = Item(
  DataElementTag(0x0018, 0x0075),
  "Acquisition Termination Condition Data",
  [IntegerString],
  vm_1,
)

pub const repetition_time = Item(
  DataElementTag(0x0018, 0x0080),
  "Repetition Time",
  [DecimalString],
  vm_1,
)

pub const echo_time = Item(
  DataElementTag(0x0018, 0x0081),
  "Echo Time",
  [DecimalString],
  vm_1,
)

pub const inversion_time = Item(
  DataElementTag(0x0018, 0x0082),
  "Inversion Time",
  [DecimalString],
  vm_1,
)

pub const number_of_averages = Item(
  DataElementTag(0x0018, 0x0083),
  "Number of Averages",
  [DecimalString],
  vm_1,
)

pub const imaging_frequency = Item(
  DataElementTag(0x0018, 0x0084),
  "Imaging Frequency",
  [DecimalString],
  vm_1,
)

pub const imaged_nucleus = Item(
  DataElementTag(0x0018, 0x0085),
  "Imaged Nucleus",
  [ShortString],
  vm_1,
)

pub const echo_numbers = Item(
  DataElementTag(0x0018, 0x0086),
  "Echo Number(s)",
  [IntegerString],
  vm_1_to_n,
)

pub const magnetic_field_strength = Item(
  DataElementTag(0x0018, 0x0087),
  "Magnetic Field Strength",
  [DecimalString],
  vm_1,
)

pub const spacing_between_slices = Item(
  DataElementTag(0x0018, 0x0088),
  "Spacing Between Slices",
  [DecimalString],
  vm_1,
)

pub const number_of_phase_encoding_steps = Item(
  DataElementTag(0x0018, 0x0089),
  "Number of Phase Encoding Steps",
  [IntegerString],
  vm_1,
)

pub const data_collection_diameter = Item(
  DataElementTag(0x0018, 0x0090),
  "Data Collection Diameter",
  [DecimalString],
  vm_1,
)

pub const echo_train_length = Item(
  DataElementTag(0x0018, 0x0091),
  "Echo Train Length",
  [IntegerString],
  vm_1,
)

pub const percent_sampling = Item(
  DataElementTag(0x0018, 0x0093),
  "Percent Sampling",
  [DecimalString],
  vm_1,
)

pub const percent_phase_field_of_view = Item(
  DataElementTag(0x0018, 0x0094),
  "Percent Phase Field of View",
  [DecimalString],
  vm_1,
)

pub const pixel_bandwidth = Item(
  DataElementTag(0x0018, 0x0095),
  "Pixel Bandwidth",
  [DecimalString],
  vm_1,
)

pub const device_serial_number = Item(
  DataElementTag(0x0018, 0x1000),
  "Device Serial Number",
  [LongString],
  vm_1,
)

pub const device_uid = Item(
  DataElementTag(0x0018, 0x1002),
  "Device UID",
  [UniqueIdentifier],
  vm_1,
)

pub const device_id = Item(
  DataElementTag(0x0018, 0x1003),
  "Device ID",
  [LongString],
  vm_1,
)

pub const plate_id = Item(
  DataElementTag(0x0018, 0x1004),
  "Plate ID",
  [LongString],
  vm_1,
)

pub const generator_id = Item(
  DataElementTag(0x0018, 0x1005),
  "Generator ID",
  [LongString],
  vm_1,
)

pub const grid_id = Item(
  DataElementTag(0x0018, 0x1006),
  "Grid ID",
  [LongString],
  vm_1,
)

pub const cassette_id = Item(
  DataElementTag(0x0018, 0x1007),
  "Cassette ID",
  [LongString],
  vm_1,
)

pub const gantry_id = Item(
  DataElementTag(0x0018, 0x1008),
  "Gantry ID",
  [LongString],
  vm_1,
)

pub const unique_device_identifier = Item(
  DataElementTag(0x0018, 0x1009),
  "Unique Device Identifier",
  [UnlimitedText],
  vm_1,
)

pub const udi_sequence = Item(
  DataElementTag(0x0018, 0x100A),
  "UDI Sequence",
  [Sequence],
  vm_1,
)

pub const manufacturer_device_class_uid = Item(
  DataElementTag(0x0018, 0x100B),
  "Manufacturer's Device Class UID",
  [UniqueIdentifier],
  vm_1_to_n,
)

pub const secondary_capture_device_id = Item(
  DataElementTag(0x0018, 0x1010),
  "Secondary Capture Device ID",
  [LongString],
  vm_1,
)

pub const hardcopy_creation_device_id = Item(
  DataElementTag(0x0018, 0x1011),
  "Hardcopy Creation Device ID",
  [LongString],
  vm_1,
)

pub const date_of_secondary_capture = Item(
  DataElementTag(0x0018, 0x1012),
  "Date of Secondary Capture",
  [Date],
  vm_1,
)

pub const time_of_secondary_capture = Item(
  DataElementTag(0x0018, 0x1014),
  "Time of Secondary Capture",
  [Time],
  vm_1,
)

pub const secondary_capture_device_manufacturer = Item(
  DataElementTag(0x0018, 0x1016),
  "Secondary Capture Device Manufacturer",
  [LongString],
  vm_1,
)

pub const hardcopy_device_manufacturer = Item(
  DataElementTag(0x0018, 0x1017),
  "Hardcopy Device Manufacturer",
  [LongString],
  vm_1,
)

pub const secondary_capture_device_manufacturer_model_name = Item(
  DataElementTag(0x0018, 0x1018),
  "Secondary Capture Device Manufacturer's Model Name",
  [LongString],
  vm_1,
)

pub const secondary_capture_device_software_versions = Item(
  DataElementTag(0x0018, 0x1019),
  "Secondary Capture Device Software Versions",
  [LongString],
  vm_1_to_n,
)

pub const hardcopy_device_software_version = Item(
  DataElementTag(0x0018, 0x101A),
  "Hardcopy Device Software Version",
  [LongString],
  vm_1_to_n,
)

pub const hardcopy_device_manufacturer_model_name = Item(
  DataElementTag(0x0018, 0x101B),
  "Hardcopy Device Manufacturer's Model Name",
  [LongString],
  vm_1,
)

pub const software_versions = Item(
  DataElementTag(0x0018, 0x1020),
  "Software Versions",
  [LongString],
  vm_1_to_n,
)

pub const video_image_format_acquired = Item(
  DataElementTag(0x0018, 0x1022),
  "Video Image Format Acquired",
  [ShortString],
  vm_1,
)

pub const digital_image_format_acquired = Item(
  DataElementTag(0x0018, 0x1023),
  "Digital Image Format Acquired",
  [LongString],
  vm_1,
)

pub const protocol_name = Item(
  DataElementTag(0x0018, 0x1030),
  "Protocol Name",
  [LongString],
  vm_1,
)

pub const contrast_bolus_route = Item(
  DataElementTag(0x0018, 0x1040),
  "Contrast/Bolus Route",
  [LongString],
  vm_1,
)

pub const contrast_bolus_volume = Item(
  DataElementTag(0x0018, 0x1041),
  "Contrast/Bolus Volume",
  [DecimalString],
  vm_1,
)

pub const contrast_bolus_start_time = Item(
  DataElementTag(0x0018, 0x1042),
  "Contrast/Bolus Start Time",
  [Time],
  vm_1,
)

pub const contrast_bolus_stop_time = Item(
  DataElementTag(0x0018, 0x1043),
  "Contrast/Bolus Stop Time",
  [Time],
  vm_1,
)

pub const contrast_bolus_total_dose = Item(
  DataElementTag(0x0018, 0x1044),
  "Contrast/Bolus Total Dose",
  [DecimalString],
  vm_1,
)

pub const syringe_counts = Item(
  DataElementTag(0x0018, 0x1045),
  "Syringe Counts",
  [IntegerString],
  vm_1,
)

pub const contrast_flow_rate = Item(
  DataElementTag(0x0018, 0x1046),
  "Contrast Flow Rate",
  [DecimalString],
  vm_1_to_n,
)

pub const contrast_flow_duration = Item(
  DataElementTag(0x0018, 0x1047),
  "Contrast Flow Duration",
  [DecimalString],
  vm_1_to_n,
)

pub const contrast_bolus_ingredient = Item(
  DataElementTag(0x0018, 0x1048),
  "Contrast/Bolus Ingredient",
  [CodeString],
  vm_1,
)

pub const contrast_bolus_ingredient_concentration = Item(
  DataElementTag(0x0018, 0x1049),
  "Contrast/Bolus Ingredient Concentration",
  [DecimalString],
  vm_1,
)

pub const spatial_resolution = Item(
  DataElementTag(0x0018, 0x1050),
  "Spatial Resolution",
  [DecimalString],
  vm_1,
)

pub const trigger_time = Item(
  DataElementTag(0x0018, 0x1060),
  "Trigger Time",
  [DecimalString],
  vm_1,
)

pub const trigger_source_or_type = Item(
  DataElementTag(0x0018, 0x1061),
  "Trigger Source or Type",
  [LongString],
  vm_1,
)

pub const nominal_interval = Item(
  DataElementTag(0x0018, 0x1062),
  "Nominal Interval",
  [IntegerString],
  vm_1,
)

pub const frame_time = Item(
  DataElementTag(0x0018, 0x1063),
  "Frame Time",
  [DecimalString],
  vm_1,
)

pub const cardiac_framing_type = Item(
  DataElementTag(0x0018, 0x1064),
  "Cardiac Framing Type",
  [LongString],
  vm_1,
)

pub const frame_time_vector = Item(
  DataElementTag(0x0018, 0x1065),
  "Frame Time Vector",
  [DecimalString],
  vm_1_to_n,
)

pub const frame_delay = Item(
  DataElementTag(0x0018, 0x1066),
  "Frame Delay",
  [DecimalString],
  vm_1,
)

pub const image_trigger_delay = Item(
  DataElementTag(0x0018, 0x1067),
  "Image Trigger Delay",
  [DecimalString],
  vm_1,
)

pub const multiplex_group_time_offset = Item(
  DataElementTag(0x0018, 0x1068),
  "Multiplex Group Time Offset",
  [DecimalString],
  vm_1,
)

pub const trigger_time_offset = Item(
  DataElementTag(0x0018, 0x1069),
  "Trigger Time Offset",
  [DecimalString],
  vm_1,
)

pub const synchronization_trigger = Item(
  DataElementTag(0x0018, 0x106A),
  "Synchronization Trigger",
  [CodeString],
  vm_1,
)

pub const synchronization_channel = Item(
  DataElementTag(0x0018, 0x106C),
  "Synchronization Channel",
  [UnsignedShort],
  vm_2,
)

pub const trigger_sample_position = Item(
  DataElementTag(0x0018, 0x106E),
  "Trigger Sample Position",
  [UnsignedLong],
  vm_1,
)

pub const radiopharmaceutical_route = Item(
  DataElementTag(0x0018, 0x1070),
  "Radiopharmaceutical Route",
  [LongString],
  vm_1,
)

pub const radiopharmaceutical_volume = Item(
  DataElementTag(0x0018, 0x1071),
  "Radiopharmaceutical Volume",
  [DecimalString],
  vm_1,
)

pub const radiopharmaceutical_start_time = Item(
  DataElementTag(0x0018, 0x1072),
  "Radiopharmaceutical Start Time",
  [Time],
  vm_1,
)

pub const radiopharmaceutical_stop_time = Item(
  DataElementTag(0x0018, 0x1073),
  "Radiopharmaceutical Stop Time",
  [Time],
  vm_1,
)

pub const radionuclide_total_dose = Item(
  DataElementTag(0x0018, 0x1074),
  "Radionuclide Total Dose",
  [DecimalString],
  vm_1,
)

pub const radionuclide_half_life = Item(
  DataElementTag(0x0018, 0x1075),
  "Radionuclide Half Life",
  [DecimalString],
  vm_1,
)

pub const radionuclide_positron_fraction = Item(
  DataElementTag(0x0018, 0x1076),
  "Radionuclide Positron Fraction",
  [DecimalString],
  vm_1,
)

pub const radiopharmaceutical_specific_activity = Item(
  DataElementTag(0x0018, 0x1077),
  "Radiopharmaceutical Specific Activity",
  [DecimalString],
  vm_1,
)

pub const radiopharmaceutical_start_date_time = Item(
  DataElementTag(0x0018, 0x1078),
  "Radiopharmaceutical Start DateTime",
  [DateTime],
  vm_1,
)

pub const radiopharmaceutical_stop_date_time = Item(
  DataElementTag(0x0018, 0x1079),
  "Radiopharmaceutical Stop DateTime",
  [DateTime],
  vm_1,
)

pub const beat_rejection_flag = Item(
  DataElementTag(0x0018, 0x1080),
  "Beat Rejection Flag",
  [CodeString],
  vm_1,
)

pub const low_rr_value = Item(
  DataElementTag(0x0018, 0x1081),
  "Low R-R Value",
  [IntegerString],
  vm_1,
)

pub const high_rr_value = Item(
  DataElementTag(0x0018, 0x1082),
  "High R-R Value",
  [IntegerString],
  vm_1,
)

pub const intervals_acquired = Item(
  DataElementTag(0x0018, 0x1083),
  "Intervals Acquired",
  [IntegerString],
  vm_1,
)

pub const intervals_rejected = Item(
  DataElementTag(0x0018, 0x1084),
  "Intervals Rejected",
  [IntegerString],
  vm_1,
)

pub const pvc_rejection = Item(
  DataElementTag(0x0018, 0x1085),
  "PVC Rejection",
  [LongString],
  vm_1,
)

pub const skip_beats = Item(
  DataElementTag(0x0018, 0x1086),
  "Skip Beats",
  [IntegerString],
  vm_1,
)

pub const heart_rate = Item(
  DataElementTag(0x0018, 0x1088),
  "Heart Rate",
  [IntegerString],
  vm_1,
)

pub const cardiac_number_of_images = Item(
  DataElementTag(0x0018, 0x1090),
  "Cardiac Number of Images",
  [IntegerString],
  vm_1,
)

pub const trigger_window = Item(
  DataElementTag(0x0018, 0x1094),
  "Trigger Window",
  [IntegerString],
  vm_1,
)

pub const reconstruction_diameter = Item(
  DataElementTag(0x0018, 0x1100),
  "Reconstruction Diameter",
  [DecimalString],
  vm_1,
)

pub const distance_source_to_detector = Item(
  DataElementTag(0x0018, 0x1110),
  "Distance Source to Detector",
  [DecimalString],
  vm_1,
)

pub const distance_source_to_patient = Item(
  DataElementTag(0x0018, 0x1111),
  "Distance Source to Patient",
  [DecimalString],
  vm_1,
)

pub const estimated_radiographic_magnification_factor = Item(
  DataElementTag(0x0018, 0x1114),
  "Estimated Radiographic Magnification Factor",
  [DecimalString],
  vm_1,
)

pub const gantry_detector_tilt = Item(
  DataElementTag(0x0018, 0x1120),
  "Gantry/Detector Tilt",
  [DecimalString],
  vm_1,
)

pub const gantry_detector_slew = Item(
  DataElementTag(0x0018, 0x1121),
  "Gantry/Detector Slew",
  [DecimalString],
  vm_1,
)

pub const table_height = Item(
  DataElementTag(0x0018, 0x1130),
  "Table Height",
  [DecimalString],
  vm_1,
)

pub const table_traverse = Item(
  DataElementTag(0x0018, 0x1131),
  "Table Traverse",
  [DecimalString],
  vm_1,
)

pub const table_motion = Item(
  DataElementTag(0x0018, 0x1134),
  "Table Motion",
  [CodeString],
  vm_1,
)

pub const table_vertical_increment = Item(
  DataElementTag(0x0018, 0x1135),
  "Table Vertical Increment",
  [DecimalString],
  vm_1_to_n,
)

pub const table_lateral_increment = Item(
  DataElementTag(0x0018, 0x1136),
  "Table Lateral Increment",
  [DecimalString],
  vm_1_to_n,
)

pub const table_longitudinal_increment = Item(
  DataElementTag(0x0018, 0x1137),
  "Table Longitudinal Increment",
  [DecimalString],
  vm_1_to_n,
)

pub const table_angle = Item(
  DataElementTag(0x0018, 0x1138),
  "Table Angle",
  [DecimalString],
  vm_1,
)

pub const table_type = Item(
  DataElementTag(0x0018, 0x113A),
  "Table Type",
  [CodeString],
  vm_1,
)

pub const rotation_direction = Item(
  DataElementTag(0x0018, 0x1140),
  "Rotation Direction",
  [CodeString],
  vm_1,
)

pub const angular_position = Item(
  DataElementTag(0x0018, 0x1141),
  "Angular Position",
  [DecimalString],
  vm_1,
)

pub const radial_position = Item(
  DataElementTag(0x0018, 0x1142),
  "Radial Position",
  [DecimalString],
  vm_1_to_n,
)

pub const scan_arc = Item(
  DataElementTag(0x0018, 0x1143),
  "Scan Arc",
  [DecimalString],
  vm_1,
)

pub const angular_step = Item(
  DataElementTag(0x0018, 0x1144),
  "Angular Step",
  [DecimalString],
  vm_1,
)

pub const center_of_rotation_offset = Item(
  DataElementTag(0x0018, 0x1145),
  "Center of Rotation Offset",
  [DecimalString],
  vm_1,
)

pub const rotation_offset = Item(
  DataElementTag(0x0018, 0x1146),
  "Rotation Offset",
  [DecimalString],
  vm_1_to_n,
)

pub const field_of_view_shape = Item(
  DataElementTag(0x0018, 0x1147),
  "Field of View Shape",
  [CodeString],
  vm_1,
)

pub const field_of_view_dimensions = Item(
  DataElementTag(0x0018, 0x1149),
  "Field of View Dimension(s)",
  [IntegerString],
  vm_1_to_2,
)

pub const exposure_time = Item(
  DataElementTag(0x0018, 0x1150),
  "Exposure Time",
  [IntegerString],
  vm_1,
)

pub const x_ray_tube_current = Item(
  DataElementTag(0x0018, 0x1151),
  "X-Ray Tube Current",
  [IntegerString],
  vm_1,
)

pub const exposure = Item(
  DataElementTag(0x0018, 0x1152),
  "Exposure",
  [IntegerString],
  vm_1,
)

pub const exposure_in_microamp_seconds = Item(
  DataElementTag(0x0018, 0x1153),
  "Exposure in µAs",
  [IntegerString],
  vm_1,
)

pub const average_pulse_width = Item(
  DataElementTag(0x0018, 0x1154),
  "Average Pulse Width",
  [DecimalString],
  vm_1,
)

pub const radiation_setting = Item(
  DataElementTag(0x0018, 0x1155),
  "Radiation Setting",
  [CodeString],
  vm_1,
)

pub const rectification_type = Item(
  DataElementTag(0x0018, 0x1156),
  "Rectification Type",
  [CodeString],
  vm_1,
)

pub const radiation_mode = Item(
  DataElementTag(0x0018, 0x115A),
  "Radiation Mode",
  [CodeString],
  vm_1,
)

pub const image_and_fluoroscopy_area_dose_product = Item(
  DataElementTag(0x0018, 0x115E),
  "Image and Fluoroscopy Area Dose Product",
  [DecimalString],
  vm_1,
)

pub const filter_type = Item(
  DataElementTag(0x0018, 0x1160),
  "Filter Type",
  [ShortString],
  vm_1,
)

pub const type_of_filters = Item(
  DataElementTag(0x0018, 0x1161),
  "Type of Filters",
  [LongString],
  vm_1_to_n,
)

pub const intensifier_size = Item(
  DataElementTag(0x0018, 0x1162),
  "Intensifier Size",
  [DecimalString],
  vm_1,
)

pub const imager_pixel_spacing = Item(
  DataElementTag(0x0018, 0x1164),
  "Imager Pixel Spacing",
  [DecimalString],
  vm_2,
)

pub const grid = Item(
  DataElementTag(0x0018, 0x1166),
  "Grid",
  [CodeString],
  vm_1_to_n,
)

pub const generator_power = Item(
  DataElementTag(0x0018, 0x1170),
  "Generator Power",
  [IntegerString],
  vm_1,
)

pub const collimator_grid_name = Item(
  DataElementTag(0x0018, 0x1180),
  "Collimator/grid Name",
  [ShortString],
  vm_1,
)

pub const collimator_type = Item(
  DataElementTag(0x0018, 0x1181),
  "Collimator Type",
  [CodeString],
  vm_1,
)

pub const focal_distance = Item(
  DataElementTag(0x0018, 0x1182),
  "Focal Distance",
  [IntegerString],
  vm_1_to_2,
)

pub const x_focus_center = Item(
  DataElementTag(0x0018, 0x1183),
  "X Focus Center",
  [DecimalString],
  vm_1_to_2,
)

pub const y_focus_center = Item(
  DataElementTag(0x0018, 0x1184),
  "Y Focus Center",
  [DecimalString],
  vm_1_to_2,
)

pub const focal_spots = Item(
  DataElementTag(0x0018, 0x1190),
  "Focal Spot(s)",
  [DecimalString],
  vm_1_to_n,
)

pub const anode_target_material = Item(
  DataElementTag(0x0018, 0x1191),
  "Anode Target Material",
  [CodeString],
  vm_1,
)

pub const body_part_thickness = Item(
  DataElementTag(0x0018, 0x11A0),
  "Body Part Thickness",
  [DecimalString],
  vm_1,
)

pub const compression_force = Item(
  DataElementTag(0x0018, 0x11A2),
  "Compression Force",
  [DecimalString],
  vm_1,
)

pub const compression_pressure = Item(
  DataElementTag(0x0018, 0x11A3),
  "Compression Pressure",
  [DecimalString],
  vm_1,
)

pub const paddle_description = Item(
  DataElementTag(0x0018, 0x11A4),
  "Paddle Description",
  [LongString],
  vm_1,
)

pub const compression_contact_area = Item(
  DataElementTag(0x0018, 0x11A5),
  "Compression Contact Area",
  [DecimalString],
  vm_1,
)

pub const acquisition_mode = Item(
  DataElementTag(0x0018, 0x11B0),
  "Acquisition Mode",
  [LongString],
  vm_1,
)

pub const dose_mode_name = Item(
  DataElementTag(0x0018, 0x11B1),
  "Dose Mode Name",
  [LongString],
  vm_1,
)

pub const acquired_subtraction_mask_flag = Item(
  DataElementTag(0x0018, 0x11B2),
  "Acquired Subtraction Mask Flag",
  [CodeString],
  vm_1,
)

pub const fluoroscopy_persistence_flag = Item(
  DataElementTag(0x0018, 0x11B3),
  "Fluoroscopy Persistence Flag",
  [CodeString],
  vm_1,
)

pub const fluoroscopy_last_image_hold_persistence_flag = Item(
  DataElementTag(0x0018, 0x11B4),
  "Fluoroscopy Last Image Hold Persistence Flag",
  [CodeString],
  vm_1,
)

pub const upper_limit_number_of_persistent_fluoroscopy_frames = Item(
  DataElementTag(0x0018, 0x11B5),
  "Upper Limit Number Of Persistent Fluoroscopy Frames",
  [IntegerString],
  vm_1,
)

pub const contrast_bolus_auto_injection_trigger_flag = Item(
  DataElementTag(0x0018, 0x11B6),
  "Contrast/Bolus Auto Injection Trigger Flag",
  [CodeString],
  vm_1,
)

pub const contrast_bolus_injection_delay = Item(
  DataElementTag(0x0018, 0x11B7),
  "Contrast/Bolus Injection Delay",
  [FloatingPointDouble],
  vm_1,
)

pub const xa_acquisition_phase_details_sequence = Item(
  DataElementTag(0x0018, 0x11B8),
  "XA Acquisition Phase Details Sequence",
  [Sequence],
  vm_1,
)

pub const xa_acquisition_frame_rate = Item(
  DataElementTag(0x0018, 0x11B9),
  "XA Acquisition Frame Rate",
  [FloatingPointDouble],
  vm_1,
)

pub const xa_plane_details_sequence = Item(
  DataElementTag(0x0018, 0x11BA),
  "XA Plane Details Sequence",
  [Sequence],
  vm_1,
)

pub const acquisition_field_of_view_label = Item(
  DataElementTag(0x0018, 0x11BB),
  "Acquisition Field of View Label",
  [LongString],
  vm_1,
)

pub const x_ray_filter_details_sequence = Item(
  DataElementTag(0x0018, 0x11BC),
  "X-Ray Filter Details Sequence",
  [Sequence],
  vm_1,
)

pub const xa_acquisition_duration = Item(
  DataElementTag(0x0018, 0x11BD),
  "XA Acquisition Duration",
  [FloatingPointDouble],
  vm_1,
)

pub const reconstruction_pipeline_type = Item(
  DataElementTag(0x0018, 0x11BE),
  "Reconstruction Pipeline Type",
  [CodeString],
  vm_1,
)

pub const image_filter_details_sequence = Item(
  DataElementTag(0x0018, 0x11BF),
  "Image Filter Details Sequence",
  [Sequence],
  vm_1,
)

pub const applied_mask_subtraction_flag = Item(
  DataElementTag(0x0018, 0x11C0),
  "Applied Mask Subtraction Flag",
  [CodeString],
  vm_1,
)

pub const requested_series_description_code_sequence = Item(
  DataElementTag(0x0018, 0x11C1),
  "Requested Series Description Code Sequence",
  [Sequence],
  vm_1,
)

pub const date_of_last_calibration = Item(
  DataElementTag(0x0018, 0x1200),
  "Date of Last Calibration",
  [Date],
  vm_1_to_n,
)

pub const time_of_last_calibration = Item(
  DataElementTag(0x0018, 0x1201),
  "Time of Last Calibration",
  [Time],
  vm_1_to_n,
)

pub const date_time_of_last_calibration = Item(
  DataElementTag(0x0018, 0x1202),
  "DateTime of Last Calibration",
  [DateTime],
  vm_1,
)

pub const calibration_date_time = Item(
  DataElementTag(0x0018, 0x1203),
  "Calibration DateTime",
  [DateTime],
  vm_1,
)

pub const date_of_manufacture = Item(
  DataElementTag(0x0018, 0x1204),
  "Date of Manufacture",
  [Date],
  vm_1,
)

pub const date_of_installation = Item(
  DataElementTag(0x0018, 0x1205),
  "Date of Installation",
  [Date],
  vm_1,
)

pub const convolution_kernel = Item(
  DataElementTag(0x0018, 0x1210),
  "Convolution Kernel",
  [ShortString],
  vm_1_to_n,
)

pub const upper_lower_pixel_values = Item(
  DataElementTag(0x0018, 0x1240),
  "Upper/Lower Pixel Values",
  [IntegerString],
  vm_1_to_n,
)

pub const actual_frame_duration = Item(
  DataElementTag(0x0018, 0x1242),
  "Actual Frame Duration",
  [IntegerString],
  vm_1,
)

pub const count_rate = Item(
  DataElementTag(0x0018, 0x1243),
  "Count Rate",
  [IntegerString],
  vm_1,
)

pub const preferred_playback_sequencing = Item(
  DataElementTag(0x0018, 0x1244),
  "Preferred Playback Sequencing",
  [UnsignedShort],
  vm_1,
)

pub const receive_coil_name = Item(
  DataElementTag(0x0018, 0x1250),
  "Receive Coil Name",
  [ShortString],
  vm_1,
)

pub const transmit_coil_name = Item(
  DataElementTag(0x0018, 0x1251),
  "Transmit Coil Name",
  [ShortString],
  vm_1,
)

pub const plate_type = Item(
  DataElementTag(0x0018, 0x1260),
  "Plate Type",
  [ShortString],
  vm_1,
)

pub const phosphor_type = Item(
  DataElementTag(0x0018, 0x1261),
  "Phosphor Type",
  [LongString],
  vm_1,
)

pub const water_equivalent_diameter = Item(
  DataElementTag(0x0018, 0x1271),
  "Water Equivalent Diameter",
  [FloatingPointDouble],
  vm_1,
)

pub const water_equivalent_diameter_calculation_method_code_sequence = Item(
  DataElementTag(0x0018, 0x1272),
  "Water Equivalent Diameter Calculation Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const scan_velocity = Item(
  DataElementTag(0x0018, 0x1300),
  "Scan Velocity",
  [DecimalString],
  vm_1,
)

pub const whole_body_technique = Item(
  DataElementTag(0x0018, 0x1301),
  "Whole Body Technique",
  [CodeString],
  vm_1_to_n,
)

pub const scan_length = Item(
  DataElementTag(0x0018, 0x1302),
  "Scan Length",
  [IntegerString],
  vm_1,
)

pub const acquisition_matrix = Item(
  DataElementTag(0x0018, 0x1310),
  "Acquisition Matrix",
  [UnsignedShort],
  vm_4,
)

pub const in_plane_phase_encoding_direction = Item(
  DataElementTag(0x0018, 0x1312),
  "In-plane Phase Encoding Direction",
  [CodeString],
  vm_1,
)

pub const flip_angle = Item(
  DataElementTag(0x0018, 0x1314),
  "Flip Angle",
  [DecimalString],
  vm_1,
)

pub const variable_flip_angle_flag = Item(
  DataElementTag(0x0018, 0x1315),
  "Variable Flip Angle Flag",
  [CodeString],
  vm_1,
)

pub const sar = Item(
  DataElementTag(0x0018, 0x1316),
  "SAR",
  [DecimalString],
  vm_1,
)

pub const d_bdt = Item(
  DataElementTag(0x0018, 0x1318),
  "dB/dt",
  [DecimalString],
  vm_1,
)

pub const b_1rms = Item(
  DataElementTag(0x0018, 0x1320),
  "B1rms",
  [FloatingPointSingle],
  vm_1,
)

pub const acquisition_device_processing_description = Item(
  DataElementTag(0x0018, 0x1400),
  "Acquisition Device Processing Description",
  [LongString],
  vm_1,
)

pub const acquisition_device_processing_code = Item(
  DataElementTag(0x0018, 0x1401),
  "Acquisition Device Processing Code",
  [LongString],
  vm_1,
)

pub const cassette_orientation = Item(
  DataElementTag(0x0018, 0x1402),
  "Cassette Orientation",
  [CodeString],
  vm_1,
)

pub const cassette_size = Item(
  DataElementTag(0x0018, 0x1403),
  "Cassette Size",
  [CodeString],
  vm_1,
)

pub const exposures_on_plate = Item(
  DataElementTag(0x0018, 0x1404),
  "Exposures on Plate",
  [UnsignedShort],
  vm_1,
)

pub const relative_x_ray_exposure = Item(
  DataElementTag(0x0018, 0x1405),
  "Relative X-Ray Exposure",
  [IntegerString],
  vm_1,
)

pub const exposure_index = Item(
  DataElementTag(0x0018, 0x1411),
  "Exposure Index",
  [DecimalString],
  vm_1,
)

pub const target_exposure_index = Item(
  DataElementTag(0x0018, 0x1412),
  "Target Exposure Index",
  [DecimalString],
  vm_1,
)

pub const deviation_index = Item(
  DataElementTag(0x0018, 0x1413),
  "Deviation Index",
  [DecimalString],
  vm_1,
)

pub const column_angulation = Item(
  DataElementTag(0x0018, 0x1450),
  "Column Angulation",
  [DecimalString],
  vm_1,
)

pub const tomo_layer_height = Item(
  DataElementTag(0x0018, 0x1460),
  "Tomo Layer Height",
  [DecimalString],
  vm_1,
)

pub const tomo_angle = Item(
  DataElementTag(0x0018, 0x1470),
  "Tomo Angle",
  [DecimalString],
  vm_1,
)

pub const tomo_time = Item(
  DataElementTag(0x0018, 0x1480),
  "Tomo Time",
  [DecimalString],
  vm_1,
)

pub const tomo_type = Item(
  DataElementTag(0x0018, 0x1490),
  "Tomo Type",
  [CodeString],
  vm_1,
)

pub const tomo_class = Item(
  DataElementTag(0x0018, 0x1491),
  "Tomo Class",
  [CodeString],
  vm_1,
)

pub const number_of_tomosynthesis_source_images = Item(
  DataElementTag(0x0018, 0x1495),
  "Number of Tomosynthesis Source Images",
  [IntegerString],
  vm_1,
)

pub const positioner_motion = Item(
  DataElementTag(0x0018, 0x1500),
  "Positioner Motion",
  [CodeString],
  vm_1,
)

pub const positioner_type = Item(
  DataElementTag(0x0018, 0x1508),
  "Positioner Type",
  [CodeString],
  vm_1,
)

pub const positioner_primary_angle = Item(
  DataElementTag(0x0018, 0x1510),
  "Positioner Primary Angle",
  [DecimalString],
  vm_1,
)

pub const positioner_secondary_angle = Item(
  DataElementTag(0x0018, 0x1511),
  "Positioner Secondary Angle",
  [DecimalString],
  vm_1,
)

pub const positioner_primary_angle_increment = Item(
  DataElementTag(0x0018, 0x1520),
  "Positioner Primary Angle Increment",
  [DecimalString],
  vm_1_to_n,
)

pub const positioner_secondary_angle_increment = Item(
  DataElementTag(0x0018, 0x1521),
  "Positioner Secondary Angle Increment",
  [DecimalString],
  vm_1_to_n,
)

pub const detector_primary_angle = Item(
  DataElementTag(0x0018, 0x1530),
  "Detector Primary Angle",
  [DecimalString],
  vm_1,
)

pub const detector_secondary_angle = Item(
  DataElementTag(0x0018, 0x1531),
  "Detector Secondary Angle",
  [DecimalString],
  vm_1,
)

pub const shutter_shape = Item(
  DataElementTag(0x0018, 0x1600),
  "Shutter Shape",
  [CodeString],
  ValueMultiplicity(1, Some(3)),
)

pub const shutter_left_vertical_edge = Item(
  DataElementTag(0x0018, 0x1602),
  "Shutter Left Vertical Edge",
  [IntegerString],
  vm_1,
)

pub const shutter_right_vertical_edge = Item(
  DataElementTag(0x0018, 0x1604),
  "Shutter Right Vertical Edge",
  [IntegerString],
  vm_1,
)

pub const shutter_upper_horizontal_edge = Item(
  DataElementTag(0x0018, 0x1606),
  "Shutter Upper Horizontal Edge",
  [IntegerString],
  vm_1,
)

pub const shutter_lower_horizontal_edge = Item(
  DataElementTag(0x0018, 0x1608),
  "Shutter Lower Horizontal Edge",
  [IntegerString],
  vm_1,
)

pub const center_of_circular_shutter = Item(
  DataElementTag(0x0018, 0x1610),
  "Center of Circular Shutter",
  [IntegerString],
  vm_2,
)

pub const radius_of_circular_shutter = Item(
  DataElementTag(0x0018, 0x1612),
  "Radius of Circular Shutter",
  [IntegerString],
  vm_1,
)

pub const vertices_of_the_polygonal_shutter = Item(
  DataElementTag(0x0018, 0x1620),
  "Vertices of the Polygonal Shutter",
  [IntegerString],
  vm_2_to_n,
)

pub const shutter_presentation_value = Item(
  DataElementTag(0x0018, 0x1622),
  "Shutter Presentation Value",
  [UnsignedShort],
  vm_1,
)

pub const shutter_overlay_group = Item(
  DataElementTag(0x0018, 0x1623),
  "Shutter Overlay Group",
  [UnsignedShort],
  vm_1,
)

pub const shutter_presentation_color_cie_lab_value = Item(
  DataElementTag(0x0018, 0x1624),
  "Shutter Presentation Color CIELab Value",
  [UnsignedShort],
  vm_3,
)

pub const outline_shape_type = Item(
  DataElementTag(0x0018, 0x1630),
  "Outline Shape Type",
  [CodeString],
  vm_1,
)

pub const outline_left_vertical_edge = Item(
  DataElementTag(0x0018, 0x1631),
  "Outline Left Vertical Edge",
  [FloatingPointDouble],
  vm_1,
)

pub const outline_right_vertical_edge = Item(
  DataElementTag(0x0018, 0x1632),
  "Outline Right Vertical Edge",
  [FloatingPointDouble],
  vm_1,
)

pub const outline_upper_horizontal_edge = Item(
  DataElementTag(0x0018, 0x1633),
  "Outline Upper Horizontal Edge",
  [FloatingPointDouble],
  vm_1,
)

pub const outline_lower_horizontal_edge = Item(
  DataElementTag(0x0018, 0x1634),
  "Outline Lower Horizontal Edge",
  [FloatingPointDouble],
  vm_1,
)

pub const center_of_circular_outline = Item(
  DataElementTag(0x0018, 0x1635),
  "Center of Circular Outline",
  [FloatingPointDouble],
  vm_2,
)

pub const diameter_of_circular_outline = Item(
  DataElementTag(0x0018, 0x1636),
  "Diameter of Circular Outline",
  [FloatingPointDouble],
  vm_1,
)

pub const number_of_polygonal_vertices = Item(
  DataElementTag(0x0018, 0x1637),
  "Number of Polygonal Vertices",
  [UnsignedLong],
  vm_1,
)

pub const vertices_of_the_polygonal_outline = Item(
  DataElementTag(0x0018, 0x1638),
  "Vertices of the Polygonal Outline",
  [OtherFloatString],
  vm_1,
)

pub const collimator_shape = Item(
  DataElementTag(0x0018, 0x1700),
  "Collimator Shape",
  [CodeString],
  ValueMultiplicity(1, Some(3)),
)

pub const collimator_left_vertical_edge = Item(
  DataElementTag(0x0018, 0x1702),
  "Collimator Left Vertical Edge",
  [IntegerString],
  vm_1,
)

pub const collimator_right_vertical_edge = Item(
  DataElementTag(0x0018, 0x1704),
  "Collimator Right Vertical Edge",
  [IntegerString],
  vm_1,
)

pub const collimator_upper_horizontal_edge = Item(
  DataElementTag(0x0018, 0x1706),
  "Collimator Upper Horizontal Edge",
  [IntegerString],
  vm_1,
)

pub const collimator_lower_horizontal_edge = Item(
  DataElementTag(0x0018, 0x1708),
  "Collimator Lower Horizontal Edge",
  [IntegerString],
  vm_1,
)

pub const center_of_circular_collimator = Item(
  DataElementTag(0x0018, 0x1710),
  "Center of Circular Collimator",
  [IntegerString],
  vm_2,
)

pub const radius_of_circular_collimator = Item(
  DataElementTag(0x0018, 0x1712),
  "Radius of Circular Collimator",
  [IntegerString],
  vm_1,
)

pub const vertices_of_the_polygonal_collimator = Item(
  DataElementTag(0x0018, 0x1720),
  "Vertices of the Polygonal Collimator",
  [IntegerString],
  vm_2_to_n,
)

pub const acquisition_time_synchronized = Item(
  DataElementTag(0x0018, 0x1800),
  "Acquisition Time Synchronized",
  [CodeString],
  vm_1,
)

pub const time_source = Item(
  DataElementTag(0x0018, 0x1801),
  "Time Source",
  [ShortString],
  vm_1,
)

pub const time_distribution_protocol = Item(
  DataElementTag(0x0018, 0x1802),
  "Time Distribution Protocol",
  [CodeString],
  vm_1,
)

pub const ntp_source_address = Item(
  DataElementTag(0x0018, 0x1803),
  "NTP Source Address",
  [LongString],
  vm_1,
)

pub const page_number_vector = Item(
  DataElementTag(0x0018, 0x2001),
  "Page Number Vector",
  [IntegerString],
  vm_1_to_n,
)

pub const frame_label_vector = Item(
  DataElementTag(0x0018, 0x2002),
  "Frame Label Vector",
  [ShortString],
  vm_1_to_n,
)

pub const frame_primary_angle_vector = Item(
  DataElementTag(0x0018, 0x2003),
  "Frame Primary Angle Vector",
  [DecimalString],
  vm_1_to_n,
)

pub const frame_secondary_angle_vector = Item(
  DataElementTag(0x0018, 0x2004),
  "Frame Secondary Angle Vector",
  [DecimalString],
  vm_1_to_n,
)

pub const slice_location_vector = Item(
  DataElementTag(0x0018, 0x2005),
  "Slice Location Vector",
  [DecimalString],
  vm_1_to_n,
)

pub const display_window_label_vector = Item(
  DataElementTag(0x0018, 0x2006),
  "Display Window Label Vector",
  [ShortString],
  vm_1_to_n,
)

pub const nominal_scanned_pixel_spacing = Item(
  DataElementTag(0x0018, 0x2010),
  "Nominal Scanned Pixel Spacing",
  [DecimalString],
  vm_2,
)

pub const digitizing_device_transport_direction = Item(
  DataElementTag(0x0018, 0x2020),
  "Digitizing Device Transport Direction",
  [CodeString],
  vm_1,
)

pub const rotation_of_scanned_film = Item(
  DataElementTag(0x0018, 0x2030),
  "Rotation of Scanned Film",
  [DecimalString],
  vm_1,
)

pub const biopsy_target_sequence = Item(
  DataElementTag(0x0018, 0x2041),
  "Biopsy Target Sequence",
  [Sequence],
  vm_1,
)

pub const target_uid = Item(
  DataElementTag(0x0018, 0x2042),
  "Target UID",
  [UniqueIdentifier],
  vm_1,
)

pub const localizing_cursor_position = Item(
  DataElementTag(0x0018, 0x2043),
  "Localizing Cursor Position",
  [FloatingPointSingle],
  vm_2,
)

pub const calculated_target_position = Item(
  DataElementTag(0x0018, 0x2044),
  "Calculated Target Position",
  [FloatingPointSingle],
  vm_3,
)

pub const target_label = Item(
  DataElementTag(0x0018, 0x2045),
  "Target Label",
  [ShortString],
  vm_1,
)

pub const displayed_z_value = Item(
  DataElementTag(0x0018, 0x2046),
  "Displayed Z Value",
  [FloatingPointSingle],
  vm_1,
)

pub const ivus_acquisition = Item(
  DataElementTag(0x0018, 0x3100),
  "IVUS Acquisition",
  [CodeString],
  vm_1,
)

pub const ivus_pullback_rate = Item(
  DataElementTag(0x0018, 0x3101),
  "IVUS Pullback Rate",
  [DecimalString],
  vm_1,
)

pub const ivus_gated_rate = Item(
  DataElementTag(0x0018, 0x3102),
  "IVUS Gated Rate",
  [DecimalString],
  vm_1,
)

pub const ivus_pullback_start_frame_number = Item(
  DataElementTag(0x0018, 0x3103),
  "IVUS Pullback Start Frame Number",
  [IntegerString],
  vm_1,
)

pub const ivus_pullback_stop_frame_number = Item(
  DataElementTag(0x0018, 0x3104),
  "IVUS Pullback Stop Frame Number",
  [IntegerString],
  vm_1,
)

pub const lesion_number = Item(
  DataElementTag(0x0018, 0x3105),
  "Lesion Number",
  [IntegerString],
  vm_1_to_n,
)

pub const acquisition_comments = Item(
  DataElementTag(0x0018, 0x4000),
  "Acquisition Comments",
  [LongText],
  vm_1,
)

pub const output_power = Item(
  DataElementTag(0x0018, 0x5000),
  "Output Power",
  [ShortString],
  vm_1_to_n,
)

pub const transducer_data = Item(
  DataElementTag(0x0018, 0x5010),
  "Transducer Data",
  [LongString],
  vm_1_to_n,
)

pub const transducer_identification_sequence = Item(
  DataElementTag(0x0018, 0x5011),
  "Transducer Identification Sequence",
  [Sequence],
  vm_1,
)

pub const focus_depth = Item(
  DataElementTag(0x0018, 0x5012),
  "Focus Depth",
  [DecimalString],
  vm_1,
)

pub const processing_function = Item(
  DataElementTag(0x0018, 0x5020),
  "Processing Function",
  [LongString],
  vm_1,
)

pub const postprocessing_function = Item(
  DataElementTag(0x0018, 0x5021),
  "Postprocessing Function",
  [LongString],
  vm_1,
)

pub const mechanical_index = Item(
  DataElementTag(0x0018, 0x5022),
  "Mechanical Index",
  [DecimalString],
  vm_1,
)

pub const bone_thermal_index = Item(
  DataElementTag(0x0018, 0x5024),
  "Bone Thermal Index",
  [DecimalString],
  vm_1,
)

pub const cranial_thermal_index = Item(
  DataElementTag(0x0018, 0x5026),
  "Cranial Thermal Index",
  [DecimalString],
  vm_1,
)

pub const soft_tissue_thermal_index = Item(
  DataElementTag(0x0018, 0x5027),
  "Soft Tissue Thermal Index",
  [DecimalString],
  vm_1,
)

pub const soft_tissue_focus_thermal_index = Item(
  DataElementTag(0x0018, 0x5028),
  "Soft Tissue-focus Thermal Index",
  [DecimalString],
  vm_1,
)

pub const soft_tissue_surface_thermal_index = Item(
  DataElementTag(0x0018, 0x5029),
  "Soft Tissue-surface Thermal Index",
  [DecimalString],
  vm_1,
)

pub const dynamic_range = Item(
  DataElementTag(0x0018, 0x5030),
  "Dynamic Range",
  [DecimalString],
  vm_1,
)

pub const total_gain = Item(
  DataElementTag(0x0018, 0x5040),
  "Total Gain",
  [DecimalString],
  vm_1,
)

pub const depth_of_scan_field = Item(
  DataElementTag(0x0018, 0x5050),
  "Depth of Scan Field",
  [IntegerString],
  vm_1,
)

pub const patient_position = Item(
  DataElementTag(0x0018, 0x5100),
  "Patient Position",
  [CodeString],
  vm_1,
)

pub const view_position = Item(
  DataElementTag(0x0018, 0x5101),
  "View Position",
  [CodeString],
  vm_1,
)

pub const projection_eponymous_name_code_sequence = Item(
  DataElementTag(0x0018, 0x5104),
  "Projection Eponymous Name Code Sequence",
  [Sequence],
  vm_1,
)

pub const image_transformation_matrix = Item(
  DataElementTag(0x0018, 0x5210),
  "Image Transformation Matrix",
  [DecimalString],
  vm_6,
)

pub const image_translation_vector = Item(
  DataElementTag(0x0018, 0x5212),
  "Image Translation Vector",
  [DecimalString],
  vm_3,
)

pub const sensitivity = Item(
  DataElementTag(0x0018, 0x6000),
  "Sensitivity",
  [DecimalString],
  vm_1,
)

pub const sequence_of_ultrasound_regions = Item(
  DataElementTag(0x0018, 0x6011),
  "Sequence of Ultrasound Regions",
  [Sequence],
  vm_1,
)

pub const region_spatial_format = Item(
  DataElementTag(0x0018, 0x6012),
  "Region Spatial Format",
  [UnsignedShort],
  vm_1,
)

pub const region_data_type = Item(
  DataElementTag(0x0018, 0x6014),
  "Region Data Type",
  [UnsignedShort],
  vm_1,
)

pub const region_flags = Item(
  DataElementTag(0x0018, 0x6016),
  "Region Flags",
  [UnsignedLong],
  vm_1,
)

pub const region_location_min_x0 = Item(
  DataElementTag(0x0018, 0x6018),
  "Region Location Min X0",
  [UnsignedLong],
  vm_1,
)

pub const region_location_min_y0 = Item(
  DataElementTag(0x0018, 0x601A),
  "Region Location Min Y0",
  [UnsignedLong],
  vm_1,
)

pub const region_location_max_x1 = Item(
  DataElementTag(0x0018, 0x601C),
  "Region Location Max X1",
  [UnsignedLong],
  vm_1,
)

pub const region_location_max_y1 = Item(
  DataElementTag(0x0018, 0x601E),
  "Region Location Max Y1",
  [UnsignedLong],
  vm_1,
)

pub const reference_pixel_x0 = Item(
  DataElementTag(0x0018, 0x6020),
  "Reference Pixel X0",
  [SignedLong],
  vm_1,
)

pub const reference_pixel_y0 = Item(
  DataElementTag(0x0018, 0x6022),
  "Reference Pixel Y0",
  [SignedLong],
  vm_1,
)

pub const physical_units_x_direction = Item(
  DataElementTag(0x0018, 0x6024),
  "Physical Units X Direction",
  [UnsignedShort],
  vm_1,
)

pub const physical_units_y_direction = Item(
  DataElementTag(0x0018, 0x6026),
  "Physical Units Y Direction",
  [UnsignedShort],
  vm_1,
)

pub const reference_pixel_physical_value_x = Item(
  DataElementTag(0x0018, 0x6028),
  "Reference Pixel Physical Value X",
  [FloatingPointDouble],
  vm_1,
)

pub const reference_pixel_physical_value_y = Item(
  DataElementTag(0x0018, 0x602A),
  "Reference Pixel Physical Value Y",
  [FloatingPointDouble],
  vm_1,
)

pub const physical_delta_x = Item(
  DataElementTag(0x0018, 0x602C),
  "Physical Delta X",
  [FloatingPointDouble],
  vm_1,
)

pub const physical_delta_y = Item(
  DataElementTag(0x0018, 0x602E),
  "Physical Delta Y",
  [FloatingPointDouble],
  vm_1,
)

pub const transducer_frequency = Item(
  DataElementTag(0x0018, 0x6030),
  "Transducer Frequency",
  [UnsignedLong],
  vm_1,
)

pub const transducer_type = Item(
  DataElementTag(0x0018, 0x6031),
  "Transducer Type",
  [CodeString],
  vm_1,
)

pub const pulse_repetition_frequency = Item(
  DataElementTag(0x0018, 0x6032),
  "Pulse Repetition Frequency",
  [UnsignedLong],
  vm_1,
)

pub const doppler_correction_angle = Item(
  DataElementTag(0x0018, 0x6034),
  "Doppler Correction Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const steering_angle = Item(
  DataElementTag(0x0018, 0x6036),
  "Steering Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const doppler_sample_volume_x_position_retired = Item(
  DataElementTag(0x0018, 0x6038),
  "Doppler Sample Volume X Position (Retired)",
  [UnsignedLong],
  vm_1,
)

pub const doppler_sample_volume_x_position = Item(
  DataElementTag(0x0018, 0x6039),
  "Doppler Sample Volume X Position",
  [SignedLong],
  vm_1,
)

pub const doppler_sample_volume_y_position_retired = Item(
  DataElementTag(0x0018, 0x603A),
  "Doppler Sample Volume Y Position (Retired)",
  [UnsignedLong],
  vm_1,
)

pub const doppler_sample_volume_y_position = Item(
  DataElementTag(0x0018, 0x603B),
  "Doppler Sample Volume Y Position",
  [SignedLong],
  vm_1,
)

pub const tm_line_position_x0_retired = Item(
  DataElementTag(0x0018, 0x603C),
  "TM-Line Position X0 (Retired)",
  [UnsignedLong],
  vm_1,
)

pub const tm_line_position_x0 = Item(
  DataElementTag(0x0018, 0x603D),
  "TM-Line Position X0",
  [SignedLong],
  vm_1,
)

pub const tm_line_position_y0_retired = Item(
  DataElementTag(0x0018, 0x603E),
  "TM-Line Position Y0 (Retired)",
  [UnsignedLong],
  vm_1,
)

pub const tm_line_position_y0 = Item(
  DataElementTag(0x0018, 0x603F),
  "TM-Line Position Y0",
  [SignedLong],
  vm_1,
)

pub const tm_line_position_x1_retired = Item(
  DataElementTag(0x0018, 0x6040),
  "TM-Line Position X1 (Retired)",
  [UnsignedLong],
  vm_1,
)

pub const tm_line_position_x1 = Item(
  DataElementTag(0x0018, 0x6041),
  "TM-Line Position X1",
  [SignedLong],
  vm_1,
)

pub const tm_line_position_y1_retired = Item(
  DataElementTag(0x0018, 0x6042),
  "TM-Line Position Y1 (Retired)",
  [UnsignedLong],
  vm_1,
)

pub const tm_line_position_y1 = Item(
  DataElementTag(0x0018, 0x6043),
  "TM-Line Position Y1",
  [SignedLong],
  vm_1,
)

pub const pixel_component_organization = Item(
  DataElementTag(0x0018, 0x6044),
  "Pixel Component Organization",
  [UnsignedShort],
  vm_1,
)

pub const pixel_component_mask = Item(
  DataElementTag(0x0018, 0x6046),
  "Pixel Component Mask",
  [UnsignedLong],
  vm_1,
)

pub const pixel_component_range_start = Item(
  DataElementTag(0x0018, 0x6048),
  "Pixel Component Range Start",
  [UnsignedLong],
  vm_1,
)

pub const pixel_component_range_stop = Item(
  DataElementTag(0x0018, 0x604A),
  "Pixel Component Range Stop",
  [UnsignedLong],
  vm_1,
)

pub const pixel_component_physical_units = Item(
  DataElementTag(0x0018, 0x604C),
  "Pixel Component Physical Units",
  [UnsignedShort],
  vm_1,
)

pub const pixel_component_data_type = Item(
  DataElementTag(0x0018, 0x604E),
  "Pixel Component Data Type",
  [UnsignedShort],
  vm_1,
)

pub const number_of_table_break_points = Item(
  DataElementTag(0x0018, 0x6050),
  "Number of Table Break Points",
  [UnsignedLong],
  vm_1,
)

pub const table_of_x_break_points = Item(
  DataElementTag(0x0018, 0x6052),
  "Table of X Break Points",
  [UnsignedLong],
  vm_1_to_n,
)

pub const table_of_y_break_points = Item(
  DataElementTag(0x0018, 0x6054),
  "Table of Y Break Points",
  [FloatingPointDouble],
  vm_1_to_n,
)

pub const number_of_table_entries = Item(
  DataElementTag(0x0018, 0x6056),
  "Number of Table Entries",
  [UnsignedLong],
  vm_1,
)

pub const table_of_pixel_values = Item(
  DataElementTag(0x0018, 0x6058),
  "Table of Pixel Values",
  [UnsignedLong],
  vm_1_to_n,
)

pub const table_of_parameter_values = Item(
  DataElementTag(0x0018, 0x605A),
  "Table of Parameter Values",
  [FloatingPointSingle],
  vm_1_to_n,
)

pub const r_wave_time_vector = Item(
  DataElementTag(0x0018, 0x6060),
  "R Wave Time Vector",
  [FloatingPointSingle],
  vm_1_to_n,
)

pub const active_image_area_overlay_group = Item(
  DataElementTag(0x0018, 0x6070),
  "Active Image Area Overlay Group",
  [UnsignedShort],
  vm_1,
)

pub const detector_conditions_nominal_flag = Item(
  DataElementTag(0x0018, 0x7000),
  "Detector Conditions Nominal Flag",
  [CodeString],
  vm_1,
)

pub const detector_temperature = Item(
  DataElementTag(0x0018, 0x7001),
  "Detector Temperature",
  [DecimalString],
  vm_1,
)

pub const detector_type = Item(
  DataElementTag(0x0018, 0x7004),
  "Detector Type",
  [CodeString],
  vm_1,
)

pub const detector_configuration = Item(
  DataElementTag(0x0018, 0x7005),
  "Detector Configuration",
  [CodeString],
  vm_1,
)

pub const detector_description = Item(
  DataElementTag(0x0018, 0x7006),
  "Detector Description",
  [LongText],
  vm_1,
)

pub const detector_mode = Item(
  DataElementTag(0x0018, 0x7008),
  "Detector Mode",
  [LongText],
  vm_1,
)

pub const detector_id = Item(
  DataElementTag(0x0018, 0x700A),
  "Detector ID",
  [ShortString],
  vm_1,
)

pub const date_of_last_detector_calibration = Item(
  DataElementTag(0x0018, 0x700C),
  "Date of Last Detector Calibration",
  [Date],
  vm_1,
)

pub const time_of_last_detector_calibration = Item(
  DataElementTag(0x0018, 0x700E),
  "Time of Last Detector Calibration",
  [Time],
  vm_1,
)

pub const exposures_on_detector_since_last_calibration = Item(
  DataElementTag(0x0018, 0x7010),
  "Exposures on Detector Since Last Calibration",
  [IntegerString],
  vm_1,
)

pub const exposures_on_detector_since_manufactured = Item(
  DataElementTag(0x0018, 0x7011),
  "Exposures on Detector Since Manufactured",
  [IntegerString],
  vm_1,
)

pub const detector_time_since_last_exposure = Item(
  DataElementTag(0x0018, 0x7012),
  "Detector Time Since Last Exposure",
  [DecimalString],
  vm_1,
)

pub const detector_active_time = Item(
  DataElementTag(0x0018, 0x7014),
  "Detector Active Time",
  [DecimalString],
  vm_1,
)

pub const detector_activation_offset_from_exposure = Item(
  DataElementTag(0x0018, 0x7016),
  "Detector Activation Offset From Exposure",
  [DecimalString],
  vm_1,
)

pub const detector_binning = Item(
  DataElementTag(0x0018, 0x701A),
  "Detector Binning",
  [DecimalString],
  vm_2,
)

pub const detector_element_physical_size = Item(
  DataElementTag(0x0018, 0x7020),
  "Detector Element Physical Size",
  [DecimalString],
  vm_2,
)

pub const detector_element_spacing = Item(
  DataElementTag(0x0018, 0x7022),
  "Detector Element Spacing",
  [DecimalString],
  vm_2,
)

pub const detector_active_shape = Item(
  DataElementTag(0x0018, 0x7024),
  "Detector Active Shape",
  [CodeString],
  vm_1,
)

pub const detector_active_dimensions = Item(
  DataElementTag(0x0018, 0x7026),
  "Detector Active Dimension(s)",
  [DecimalString],
  vm_1_to_2,
)

pub const detector_active_origin = Item(
  DataElementTag(0x0018, 0x7028),
  "Detector Active Origin",
  [DecimalString],
  vm_2,
)

pub const detector_manufacturer_name = Item(
  DataElementTag(0x0018, 0x702A),
  "Detector Manufacturer Name",
  [LongString],
  vm_1,
)

pub const detector_manufacturer_model_name = Item(
  DataElementTag(0x0018, 0x702B),
  "Detector Manufacturer's Model Name",
  [LongString],
  vm_1,
)

pub const field_of_view_origin = Item(
  DataElementTag(0x0018, 0x7030),
  "Field of View Origin",
  [DecimalString],
  vm_2,
)

pub const field_of_view_rotation = Item(
  DataElementTag(0x0018, 0x7032),
  "Field of View Rotation",
  [DecimalString],
  vm_1,
)

pub const field_of_view_horizontal_flip = Item(
  DataElementTag(0x0018, 0x7034),
  "Field of View Horizontal Flip",
  [CodeString],
  vm_1,
)

pub const pixel_data_area_origin_relative_to_fov = Item(
  DataElementTag(0x0018, 0x7036),
  "Pixel Data Area Origin Relative To FOV",
  [FloatingPointSingle],
  vm_2,
)

pub const pixel_data_area_rotation_angle_relative_to_fov = Item(
  DataElementTag(0x0018, 0x7038),
  "Pixel Data Area Rotation Angle Relative To FOV",
  [FloatingPointSingle],
  vm_1,
)

pub const grid_absorbing_material = Item(
  DataElementTag(0x0018, 0x7040),
  "Grid Absorbing Material",
  [LongText],
  vm_1,
)

pub const grid_spacing_material = Item(
  DataElementTag(0x0018, 0x7041),
  "Grid Spacing Material",
  [LongText],
  vm_1,
)

pub const grid_thickness = Item(
  DataElementTag(0x0018, 0x7042),
  "Grid Thickness",
  [DecimalString],
  vm_1,
)

pub const grid_pitch = Item(
  DataElementTag(0x0018, 0x7044),
  "Grid Pitch",
  [DecimalString],
  vm_1,
)

pub const grid_aspect_ratio = Item(
  DataElementTag(0x0018, 0x7046),
  "Grid Aspect Ratio",
  [IntegerString],
  vm_2,
)

pub const grid_period = Item(
  DataElementTag(0x0018, 0x7048),
  "Grid Period",
  [DecimalString],
  vm_1,
)

pub const grid_focal_distance = Item(
  DataElementTag(0x0018, 0x704C),
  "Grid Focal Distance",
  [DecimalString],
  vm_1,
)

pub const filter_material = Item(
  DataElementTag(0x0018, 0x7050),
  "Filter Material",
  [CodeString],
  vm_1_to_n,
)

pub const filter_thickness_minimum = Item(
  DataElementTag(0x0018, 0x7052),
  "Filter Thickness Minimum",
  [DecimalString],
  vm_1_to_n,
)

pub const filter_thickness_maximum = Item(
  DataElementTag(0x0018, 0x7054),
  "Filter Thickness Maximum",
  [DecimalString],
  vm_1_to_n,
)

pub const filter_beam_path_length_minimum = Item(
  DataElementTag(0x0018, 0x7056),
  "Filter Beam Path Length Minimum",
  [FloatingPointSingle],
  vm_1_to_n,
)

pub const filter_beam_path_length_maximum = Item(
  DataElementTag(0x0018, 0x7058),
  "Filter Beam Path Length Maximum",
  [FloatingPointSingle],
  vm_1_to_n,
)

pub const exposure_control_mode = Item(
  DataElementTag(0x0018, 0x7060),
  "Exposure Control Mode",
  [CodeString],
  vm_1,
)

pub const exposure_control_mode_description = Item(
  DataElementTag(0x0018, 0x7062),
  "Exposure Control Mode Description",
  [LongText],
  vm_1,
)

pub const exposure_status = Item(
  DataElementTag(0x0018, 0x7064),
  "Exposure Status",
  [CodeString],
  vm_1,
)

pub const phototimer_setting = Item(
  DataElementTag(0x0018, 0x7065),
  "Phototimer Setting",
  [DecimalString],
  vm_1,
)

pub const exposure_time_in_microseconds = Item(
  DataElementTag(0x0018, 0x8150),
  "Exposure Time in µS",
  [DecimalString],
  vm_1,
)

pub const x_ray_tube_current_in_microamps = Item(
  DataElementTag(0x0018, 0x8151),
  "X-Ray Tube Current in µA",
  [DecimalString],
  vm_1,
)

pub const content_qualification = Item(
  DataElementTag(0x0018, 0x9004),
  "Content Qualification",
  [CodeString],
  vm_1,
)

pub const pulse_sequence_name = Item(
  DataElementTag(0x0018, 0x9005),
  "Pulse Sequence Name",
  [ShortString],
  vm_1,
)

pub const mr_imaging_modifier_sequence = Item(
  DataElementTag(0x0018, 0x9006),
  "MR Imaging Modifier Sequence",
  [Sequence],
  vm_1,
)

pub const echo_pulse_sequence = Item(
  DataElementTag(0x0018, 0x9008),
  "Echo Pulse Sequence",
  [CodeString],
  vm_1,
)

pub const inversion_recovery = Item(
  DataElementTag(0x0018, 0x9009),
  "Inversion Recovery",
  [CodeString],
  vm_1,
)

pub const flow_compensation = Item(
  DataElementTag(0x0018, 0x9010),
  "Flow Compensation",
  [CodeString],
  vm_1,
)

pub const multiple_spin_echo = Item(
  DataElementTag(0x0018, 0x9011),
  "Multiple Spin Echo",
  [CodeString],
  vm_1,
)

pub const multi_planar_excitation = Item(
  DataElementTag(0x0018, 0x9012),
  "Multi-planar Excitation",
  [CodeString],
  vm_1,
)

pub const phase_contrast = Item(
  DataElementTag(0x0018, 0x9014),
  "Phase Contrast",
  [CodeString],
  vm_1,
)

pub const time_of_flight_contrast = Item(
  DataElementTag(0x0018, 0x9015),
  "Time of Flight Contrast",
  [CodeString],
  vm_1,
)

pub const spoiling = Item(
  DataElementTag(0x0018, 0x9016),
  "Spoiling",
  [CodeString],
  vm_1,
)

pub const steady_state_pulse_sequence = Item(
  DataElementTag(0x0018, 0x9017),
  "Steady State Pulse Sequence",
  [CodeString],
  vm_1,
)

pub const echo_planar_pulse_sequence = Item(
  DataElementTag(0x0018, 0x9018),
  "Echo Planar Pulse Sequence",
  [CodeString],
  vm_1,
)

pub const tag_angle_first_axis = Item(
  DataElementTag(0x0018, 0x9019),
  "Tag Angle First Axis",
  [FloatingPointDouble],
  vm_1,
)

pub const magnetization_transfer = Item(
  DataElementTag(0x0018, 0x9020),
  "Magnetization Transfer",
  [CodeString],
  vm_1,
)

pub const t2_preparation = Item(
  DataElementTag(0x0018, 0x9021),
  "T2 Preparation",
  [CodeString],
  vm_1,
)

pub const blood_signal_nulling = Item(
  DataElementTag(0x0018, 0x9022),
  "Blood Signal Nulling",
  [CodeString],
  vm_1,
)

pub const saturation_recovery = Item(
  DataElementTag(0x0018, 0x9024),
  "Saturation Recovery",
  [CodeString],
  vm_1,
)

pub const spectrally_selected_suppression = Item(
  DataElementTag(0x0018, 0x9025),
  "Spectrally Selected Suppression",
  [CodeString],
  vm_1,
)

pub const spectrally_selected_excitation = Item(
  DataElementTag(0x0018, 0x9026),
  "Spectrally Selected Excitation",
  [CodeString],
  vm_1,
)

pub const spatial_presaturation = Item(
  DataElementTag(0x0018, 0x9027),
  "Spatial Pre-saturation",
  [CodeString],
  vm_1,
)

pub const tagging = Item(
  DataElementTag(0x0018, 0x9028),
  "Tagging",
  [CodeString],
  vm_1,
)

pub const oversampling_phase = Item(
  DataElementTag(0x0018, 0x9029),
  "Oversampling Phase",
  [CodeString],
  vm_1,
)

pub const tag_spacing_first_dimension = Item(
  DataElementTag(0x0018, 0x9030),
  "Tag Spacing First Dimension",
  [FloatingPointDouble],
  vm_1,
)

pub const geometry_of_k_space_traversal = Item(
  DataElementTag(0x0018, 0x9032),
  "Geometry of k-Space Traversal",
  [CodeString],
  vm_1,
)

pub const segmented_k_space_traversal = Item(
  DataElementTag(0x0018, 0x9033),
  "Segmented k-Space Traversal",
  [CodeString],
  vm_1,
)

pub const rectilinear_phase_encode_reordering = Item(
  DataElementTag(0x0018, 0x9034),
  "Rectilinear Phase Encode Reordering",
  [CodeString],
  vm_1,
)

pub const tag_thickness = Item(
  DataElementTag(0x0018, 0x9035),
  "Tag Thickness",
  [FloatingPointDouble],
  vm_1,
)

pub const partial_fourier_direction = Item(
  DataElementTag(0x0018, 0x9036),
  "Partial Fourier Direction",
  [CodeString],
  vm_1,
)

pub const cardiac_synchronization_technique = Item(
  DataElementTag(0x0018, 0x9037),
  "Cardiac Synchronization Technique",
  [CodeString],
  vm_1,
)

pub const receive_coil_manufacturer_name = Item(
  DataElementTag(0x0018, 0x9041),
  "Receive Coil Manufacturer Name",
  [LongString],
  vm_1,
)

pub const mr_receive_coil_sequence = Item(
  DataElementTag(0x0018, 0x9042),
  "MR Receive Coil Sequence",
  [Sequence],
  vm_1,
)

pub const receive_coil_type = Item(
  DataElementTag(0x0018, 0x9043),
  "Receive Coil Type",
  [CodeString],
  vm_1,
)

pub const quadrature_receive_coil = Item(
  DataElementTag(0x0018, 0x9044),
  "Quadrature Receive Coil",
  [CodeString],
  vm_1,
)

pub const multi_coil_definition_sequence = Item(
  DataElementTag(0x0018, 0x9045),
  "Multi-Coil Definition Sequence",
  [Sequence],
  vm_1,
)

pub const multi_coil_configuration = Item(
  DataElementTag(0x0018, 0x9046),
  "Multi-Coil Configuration",
  [LongString],
  vm_1,
)

pub const multi_coil_element_name = Item(
  DataElementTag(0x0018, 0x9047),
  "Multi-Coil Element Name",
  [ShortString],
  vm_1,
)

pub const multi_coil_element_used = Item(
  DataElementTag(0x0018, 0x9048),
  "Multi-Coil Element Used",
  [CodeString],
  vm_1,
)

pub const mr_transmit_coil_sequence = Item(
  DataElementTag(0x0018, 0x9049),
  "MR Transmit Coil Sequence",
  [Sequence],
  vm_1,
)

pub const transmit_coil_manufacturer_name = Item(
  DataElementTag(0x0018, 0x9050),
  "Transmit Coil Manufacturer Name",
  [LongString],
  vm_1,
)

pub const transmit_coil_type = Item(
  DataElementTag(0x0018, 0x9051),
  "Transmit Coil Type",
  [CodeString],
  vm_1,
)

pub const spectral_width = Item(
  DataElementTag(0x0018, 0x9052),
  "Spectral Width",
  [FloatingPointDouble],
  vm_1_to_2,
)

pub const chemical_shift_reference = Item(
  DataElementTag(0x0018, 0x9053),
  "Chemical Shift Reference",
  [FloatingPointDouble],
  vm_1_to_2,
)

pub const volume_localization_technique = Item(
  DataElementTag(0x0018, 0x9054),
  "Volume Localization Technique",
  [CodeString],
  vm_1,
)

pub const mr_acquisition_frequency_encoding_steps = Item(
  DataElementTag(0x0018, 0x9058),
  "MR Acquisition Frequency Encoding Steps",
  [UnsignedShort],
  vm_1,
)

pub const decoupling = Item(
  DataElementTag(0x0018, 0x9059),
  "De-coupling",
  [CodeString],
  vm_1,
)

pub const decoupled_nucleus = Item(
  DataElementTag(0x0018, 0x9060),
  "De-coupled Nucleus",
  [CodeString],
  vm_1_to_2,
)

pub const decoupling_frequency = Item(
  DataElementTag(0x0018, 0x9061),
  "De-coupling Frequency",
  [FloatingPointDouble],
  vm_1_to_2,
)

pub const decoupling_method = Item(
  DataElementTag(0x0018, 0x9062),
  "De-coupling Method",
  [CodeString],
  vm_1,
)

pub const decoupling_chemical_shift_reference = Item(
  DataElementTag(0x0018, 0x9063),
  "De-coupling Chemical Shift Reference",
  [FloatingPointDouble],
  vm_1_to_2,
)

pub const k_space_filtering = Item(
  DataElementTag(0x0018, 0x9064),
  "k-space Filtering",
  [CodeString],
  vm_1,
)

pub const time_domain_filtering = Item(
  DataElementTag(0x0018, 0x9065),
  "Time Domain Filtering",
  [CodeString],
  vm_1_to_2,
)

pub const number_of_zero_fills = Item(
  DataElementTag(0x0018, 0x9066),
  "Number of Zero Fills",
  [UnsignedShort],
  vm_1_to_2,
)

pub const baseline_correction = Item(
  DataElementTag(0x0018, 0x9067),
  "Baseline Correction",
  [CodeString],
  vm_1,
)

pub const parallel_reduction_factor_in_plane = Item(
  DataElementTag(0x0018, 0x9069),
  "Parallel Reduction Factor In-plane",
  [FloatingPointDouble],
  vm_1,
)

pub const cardiac_rr_interval_specified = Item(
  DataElementTag(0x0018, 0x9070),
  "Cardiac R-R Interval Specified",
  [FloatingPointDouble],
  vm_1,
)

pub const acquisition_duration = Item(
  DataElementTag(0x0018, 0x9073),
  "Acquisition Duration",
  [FloatingPointDouble],
  vm_1,
)

pub const frame_acquisition_date_time = Item(
  DataElementTag(0x0018, 0x9074),
  "Frame Acquisition DateTime",
  [DateTime],
  vm_1,
)

pub const diffusion_directionality = Item(
  DataElementTag(0x0018, 0x9075),
  "Diffusion Directionality",
  [CodeString],
  vm_1,
)

pub const diffusion_gradient_direction_sequence = Item(
  DataElementTag(0x0018, 0x9076),
  "Diffusion Gradient Direction Sequence",
  [Sequence],
  vm_1,
)

pub const parallel_acquisition = Item(
  DataElementTag(0x0018, 0x9077),
  "Parallel Acquisition",
  [CodeString],
  vm_1,
)

pub const parallel_acquisition_technique = Item(
  DataElementTag(0x0018, 0x9078),
  "Parallel Acquisition Technique",
  [CodeString],
  vm_1,
)

pub const inversion_times = Item(
  DataElementTag(0x0018, 0x9079),
  "Inversion Times",
  [FloatingPointDouble],
  vm_1_to_n,
)

pub const metabolite_map_description = Item(
  DataElementTag(0x0018, 0x9080),
  "Metabolite Map Description",
  [ShortText],
  vm_1,
)

pub const partial_fourier = Item(
  DataElementTag(0x0018, 0x9081),
  "Partial Fourier",
  [CodeString],
  vm_1,
)

pub const effective_echo_time = Item(
  DataElementTag(0x0018, 0x9082),
  "Effective Echo Time",
  [FloatingPointDouble],
  vm_1,
)

pub const metabolite_map_code_sequence = Item(
  DataElementTag(0x0018, 0x9083),
  "Metabolite Map Code Sequence",
  [Sequence],
  vm_1,
)

pub const chemical_shift_sequence = Item(
  DataElementTag(0x0018, 0x9084),
  "Chemical Shift Sequence",
  [Sequence],
  vm_1,
)

pub const cardiac_signal_source = Item(
  DataElementTag(0x0018, 0x9085),
  "Cardiac Signal Source",
  [CodeString],
  vm_1,
)

pub const diffusion_b_value = Item(
  DataElementTag(0x0018, 0x9087),
  "Diffusion b-value",
  [FloatingPointDouble],
  vm_1,
)

pub const diffusion_gradient_orientation = Item(
  DataElementTag(0x0018, 0x9089),
  "Diffusion Gradient Orientation",
  [FloatingPointDouble],
  vm_3,
)

pub const velocity_encoding_direction = Item(
  DataElementTag(0x0018, 0x9090),
  "Velocity Encoding Direction",
  [FloatingPointDouble],
  vm_3,
)

pub const velocity_encoding_minimum_value = Item(
  DataElementTag(0x0018, 0x9091),
  "Velocity Encoding Minimum Value",
  [FloatingPointDouble],
  vm_1,
)

pub const velocity_encoding_acquisition_sequence = Item(
  DataElementTag(0x0018, 0x9092),
  "Velocity Encoding Acquisition Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_k_space_trajectories = Item(
  DataElementTag(0x0018, 0x9093),
  "Number of k-Space Trajectories",
  [UnsignedShort],
  vm_1,
)

pub const coverage_of_k_space = Item(
  DataElementTag(0x0018, 0x9094),
  "Coverage of k-Space",
  [CodeString],
  vm_1,
)

pub const spectroscopy_acquisition_phase_rows = Item(
  DataElementTag(0x0018, 0x9095),
  "Spectroscopy Acquisition Phase Rows",
  [UnsignedLong],
  vm_1,
)

pub const parallel_reduction_factor_in_plane_retired = Item(
  DataElementTag(0x0018, 0x9096),
  "Parallel Reduction Factor In-plane (Retired)",
  [FloatingPointDouble],
  vm_1,
)

pub const transmitter_frequency = Item(
  DataElementTag(0x0018, 0x9098),
  "Transmitter Frequency",
  [FloatingPointDouble],
  vm_1_to_2,
)

pub const resonant_nucleus = Item(
  DataElementTag(0x0018, 0x9100),
  "Resonant Nucleus",
  [CodeString],
  vm_1_to_2,
)

pub const frequency_correction = Item(
  DataElementTag(0x0018, 0x9101),
  "Frequency Correction",
  [CodeString],
  vm_1,
)

pub const mr_spectroscopy_fov_geometry_sequence = Item(
  DataElementTag(0x0018, 0x9103),
  "MR Spectroscopy FOV/Geometry Sequence",
  [Sequence],
  vm_1,
)

pub const slab_thickness = Item(
  DataElementTag(0x0018, 0x9104),
  "Slab Thickness",
  [FloatingPointDouble],
  vm_1,
)

pub const slab_orientation = Item(
  DataElementTag(0x0018, 0x9105),
  "Slab Orientation",
  [FloatingPointDouble],
  vm_3,
)

pub const mid_slab_position = Item(
  DataElementTag(0x0018, 0x9106),
  "Mid Slab Position",
  [FloatingPointDouble],
  vm_3,
)

pub const mr_spatial_saturation_sequence = Item(
  DataElementTag(0x0018, 0x9107),
  "MR Spatial Saturation Sequence",
  [Sequence],
  vm_1,
)

pub const mr_timing_and_related_parameters_sequence = Item(
  DataElementTag(0x0018, 0x9112),
  "MR Timing and Related Parameters Sequence",
  [Sequence],
  vm_1,
)

pub const mr_echo_sequence = Item(
  DataElementTag(0x0018, 0x9114),
  "MR Echo Sequence",
  [Sequence],
  vm_1,
)

pub const mr_modifier_sequence = Item(
  DataElementTag(0x0018, 0x9115),
  "MR Modifier Sequence",
  [Sequence],
  vm_1,
)

pub const mr_diffusion_sequence = Item(
  DataElementTag(0x0018, 0x9117),
  "MR Diffusion Sequence",
  [Sequence],
  vm_1,
)

pub const cardiac_synchronization_sequence = Item(
  DataElementTag(0x0018, 0x9118),
  "Cardiac Synchronization Sequence",
  [Sequence],
  vm_1,
)

pub const mr_averages_sequence = Item(
  DataElementTag(0x0018, 0x9119),
  "MR Averages Sequence",
  [Sequence],
  vm_1,
)

pub const mr_fov_geometry_sequence = Item(
  DataElementTag(0x0018, 0x9125),
  "MR FOV/Geometry Sequence",
  [Sequence],
  vm_1,
)

pub const volume_localization_sequence = Item(
  DataElementTag(0x0018, 0x9126),
  "Volume Localization Sequence",
  [Sequence],
  vm_1,
)

pub const spectroscopy_acquisition_data_columns = Item(
  DataElementTag(0x0018, 0x9127),
  "Spectroscopy Acquisition Data Columns",
  [UnsignedLong],
  vm_1,
)

pub const diffusion_anisotropy_type = Item(
  DataElementTag(0x0018, 0x9147),
  "Diffusion Anisotropy Type",
  [CodeString],
  vm_1,
)

pub const frame_reference_date_time = Item(
  DataElementTag(0x0018, 0x9151),
  "Frame Reference DateTime",
  [DateTime],
  vm_1,
)

pub const mr_metabolite_map_sequence = Item(
  DataElementTag(0x0018, 0x9152),
  "MR Metabolite Map Sequence",
  [Sequence],
  vm_1,
)

pub const parallel_reduction_factor_out_of_plane = Item(
  DataElementTag(0x0018, 0x9155),
  "Parallel Reduction Factor out-of-plane",
  [FloatingPointDouble],
  vm_1,
)

pub const spectroscopy_acquisition_out_of_plane_phase_steps = Item(
  DataElementTag(0x0018, 0x9159),
  "Spectroscopy Acquisition Out-of-plane Phase Steps",
  [UnsignedLong],
  vm_1,
)

pub const bulk_motion_status = Item(
  DataElementTag(0x0018, 0x9166),
  "Bulk Motion Status",
  [CodeString],
  vm_1,
)

pub const parallel_reduction_factor_second_in_plane = Item(
  DataElementTag(0x0018, 0x9168),
  "Parallel Reduction Factor Second In-plane",
  [FloatingPointDouble],
  vm_1,
)

pub const cardiac_beat_rejection_technique = Item(
  DataElementTag(0x0018, 0x9169),
  "Cardiac Beat Rejection Technique",
  [CodeString],
  vm_1,
)

pub const respiratory_motion_compensation_technique = Item(
  DataElementTag(0x0018, 0x9170),
  "Respiratory Motion Compensation Technique",
  [CodeString],
  vm_1,
)

pub const respiratory_signal_source = Item(
  DataElementTag(0x0018, 0x9171),
  "Respiratory Signal Source",
  [CodeString],
  vm_1,
)

pub const bulk_motion_compensation_technique = Item(
  DataElementTag(0x0018, 0x9172),
  "Bulk Motion Compensation Technique",
  [CodeString],
  vm_1,
)

pub const bulk_motion_signal_source = Item(
  DataElementTag(0x0018, 0x9173),
  "Bulk Motion Signal Source",
  [CodeString],
  vm_1,
)

pub const applicable_safety_standard_agency = Item(
  DataElementTag(0x0018, 0x9174),
  "Applicable Safety Standard Agency",
  [CodeString],
  vm_1,
)

pub const applicable_safety_standard_description = Item(
  DataElementTag(0x0018, 0x9175),
  "Applicable Safety Standard Description",
  [LongString],
  vm_1,
)

pub const operating_mode_sequence = Item(
  DataElementTag(0x0018, 0x9176),
  "Operating Mode Sequence",
  [Sequence],
  vm_1,
)

pub const operating_mode_type = Item(
  DataElementTag(0x0018, 0x9177),
  "Operating Mode Type",
  [CodeString],
  vm_1,
)

pub const operating_mode = Item(
  DataElementTag(0x0018, 0x9178),
  "Operating Mode",
  [CodeString],
  vm_1,
)

pub const specific_absorption_rate_definition = Item(
  DataElementTag(0x0018, 0x9179),
  "Specific Absorption Rate Definition",
  [CodeString],
  vm_1,
)

pub const gradient_output_type = Item(
  DataElementTag(0x0018, 0x9180),
  "Gradient Output Type",
  [CodeString],
  vm_1,
)

pub const specific_absorption_rate_value = Item(
  DataElementTag(0x0018, 0x9181),
  "Specific Absorption Rate Value",
  [FloatingPointDouble],
  vm_1,
)

pub const gradient_output = Item(
  DataElementTag(0x0018, 0x9182),
  "Gradient Output",
  [FloatingPointDouble],
  vm_1,
)

pub const flow_compensation_direction = Item(
  DataElementTag(0x0018, 0x9183),
  "Flow Compensation Direction",
  [CodeString],
  vm_1,
)

pub const tagging_delay = Item(
  DataElementTag(0x0018, 0x9184),
  "Tagging Delay",
  [FloatingPointDouble],
  vm_1,
)

pub const respiratory_motion_compensation_technique_description = Item(
  DataElementTag(0x0018, 0x9185),
  "Respiratory Motion Compensation Technique Description",
  [ShortText],
  vm_1,
)

pub const respiratory_signal_source_id = Item(
  DataElementTag(0x0018, 0x9186),
  "Respiratory Signal Source ID",
  [ShortString],
  vm_1,
)

pub const chemical_shift_minimum_integration_limit_in_hz = Item(
  DataElementTag(0x0018, 0x9195),
  "Chemical Shift Minimum Integration Limit in Hz",
  [FloatingPointDouble],
  vm_1,
)

pub const chemical_shift_maximum_integration_limit_in_hz = Item(
  DataElementTag(0x0018, 0x9196),
  "Chemical Shift Maximum Integration Limit in Hz",
  [FloatingPointDouble],
  vm_1,
)

pub const mr_velocity_encoding_sequence = Item(
  DataElementTag(0x0018, 0x9197),
  "MR Velocity Encoding Sequence",
  [Sequence],
  vm_1,
)

pub const first_order_phase_correction = Item(
  DataElementTag(0x0018, 0x9198),
  "First Order Phase Correction",
  [CodeString],
  vm_1,
)

pub const water_referenced_phase_correction = Item(
  DataElementTag(0x0018, 0x9199),
  "Water Referenced Phase Correction",
  [CodeString],
  vm_1,
)

pub const mr_spectroscopy_acquisition_type = Item(
  DataElementTag(0x0018, 0x9200),
  "MR Spectroscopy Acquisition Type",
  [CodeString],
  vm_1,
)

pub const respiratory_cycle_position = Item(
  DataElementTag(0x0018, 0x9214),
  "Respiratory Cycle Position",
  [CodeString],
  vm_1,
)

pub const velocity_encoding_maximum_value = Item(
  DataElementTag(0x0018, 0x9217),
  "Velocity Encoding Maximum Value",
  [FloatingPointDouble],
  vm_1,
)

pub const tag_spacing_second_dimension = Item(
  DataElementTag(0x0018, 0x9218),
  "Tag Spacing Second Dimension",
  [FloatingPointDouble],
  vm_1,
)

pub const tag_angle_second_axis = Item(
  DataElementTag(0x0018, 0x9219),
  "Tag Angle Second Axis",
  [SignedShort],
  vm_1,
)

pub const frame_acquisition_duration = Item(
  DataElementTag(0x0018, 0x9220),
  "Frame Acquisition Duration",
  [FloatingPointDouble],
  vm_1,
)

pub const mr_image_frame_type_sequence = Item(
  DataElementTag(0x0018, 0x9226),
  "MR Image Frame Type Sequence",
  [Sequence],
  vm_1,
)

pub const mr_spectroscopy_frame_type_sequence = Item(
  DataElementTag(0x0018, 0x9227),
  "MR Spectroscopy Frame Type Sequence",
  [Sequence],
  vm_1,
)

pub const mr_acquisition_phase_encoding_steps_in_plane = Item(
  DataElementTag(0x0018, 0x9231),
  "MR Acquisition Phase Encoding Steps in-plane",
  [UnsignedShort],
  vm_1,
)

pub const mr_acquisition_phase_encoding_steps_out_of_plane = Item(
  DataElementTag(0x0018, 0x9232),
  "MR Acquisition Phase Encoding Steps out-of-plane",
  [UnsignedShort],
  vm_1,
)

pub const spectroscopy_acquisition_phase_columns = Item(
  DataElementTag(0x0018, 0x9234),
  "Spectroscopy Acquisition Phase Columns",
  [UnsignedLong],
  vm_1,
)

pub const cardiac_cycle_position = Item(
  DataElementTag(0x0018, 0x9236),
  "Cardiac Cycle Position",
  [CodeString],
  vm_1,
)

pub const specific_absorption_rate_sequence = Item(
  DataElementTag(0x0018, 0x9239),
  "Specific Absorption Rate Sequence",
  [Sequence],
  vm_1,
)

pub const rf_echo_train_length = Item(
  DataElementTag(0x0018, 0x9240),
  "RF Echo Train Length",
  [UnsignedShort],
  vm_1,
)

pub const gradient_echo_train_length = Item(
  DataElementTag(0x0018, 0x9241),
  "Gradient Echo Train Length",
  [UnsignedShort],
  vm_1,
)

pub const arterial_spin_labeling_contrast = Item(
  DataElementTag(0x0018, 0x9250),
  "Arterial Spin Labeling Contrast",
  [CodeString],
  vm_1,
)

pub const mr_arterial_spin_labeling_sequence = Item(
  DataElementTag(0x0018, 0x9251),
  "MR Arterial Spin Labeling Sequence",
  [Sequence],
  vm_1,
)

pub const asl_technique_description = Item(
  DataElementTag(0x0018, 0x9252),
  "ASL Technique Description",
  [LongString],
  vm_1,
)

pub const asl_slab_number = Item(
  DataElementTag(0x0018, 0x9253),
  "ASL Slab Number",
  [UnsignedShort],
  vm_1,
)

pub const asl_slab_thickness = Item(
  DataElementTag(0x0018, 0x9254),
  "ASL Slab Thickness",
  [FloatingPointDouble],
  vm_1,
)

pub const asl_slab_orientation = Item(
  DataElementTag(0x0018, 0x9255),
  "ASL Slab Orientation",
  [FloatingPointDouble],
  vm_3,
)

pub const asl_mid_slab_position = Item(
  DataElementTag(0x0018, 0x9256),
  "ASL Mid Slab Position",
  [FloatingPointDouble],
  vm_3,
)

pub const asl_context = Item(
  DataElementTag(0x0018, 0x9257),
  "ASL Context",
  [CodeString],
  vm_1,
)

pub const asl_pulse_train_duration = Item(
  DataElementTag(0x0018, 0x9258),
  "ASL Pulse Train Duration",
  [UnsignedLong],
  vm_1,
)

pub const asl_crusher_flag = Item(
  DataElementTag(0x0018, 0x9259),
  "ASL Crusher Flag",
  [CodeString],
  vm_1,
)

pub const asl_crusher_flow_limit = Item(
  DataElementTag(0x0018, 0x925A),
  "ASL Crusher Flow Limit",
  [FloatingPointDouble],
  vm_1,
)

pub const asl_crusher_description = Item(
  DataElementTag(0x0018, 0x925B),
  "ASL Crusher Description",
  [LongString],
  vm_1,
)

pub const asl_bolus_cutoff_flag = Item(
  DataElementTag(0x0018, 0x925C),
  "ASL Bolus Cut-off Flag",
  [CodeString],
  vm_1,
)

pub const asl_bolus_cutoff_timing_sequence = Item(
  DataElementTag(0x0018, 0x925D),
  "ASL Bolus Cut-off Timing Sequence",
  [Sequence],
  vm_1,
)

pub const asl_bolus_cutoff_technique = Item(
  DataElementTag(0x0018, 0x925E),
  "ASL Bolus Cut-off Technique",
  [LongString],
  vm_1,
)

pub const asl_bolus_cutoff_delay_time = Item(
  DataElementTag(0x0018, 0x925F),
  "ASL Bolus Cut-off Delay Time",
  [UnsignedLong],
  vm_1,
)

pub const asl_slab_sequence = Item(
  DataElementTag(0x0018, 0x9260),
  "ASL Slab Sequence",
  [Sequence],
  vm_1,
)

pub const chemical_shift_minimum_integration_limit_inppm = Item(
  DataElementTag(0x0018, 0x9295),
  "Chemical Shift Minimum Integration Limit in ppm",
  [FloatingPointDouble],
  vm_1,
)

pub const chemical_shift_maximum_integration_limit_inppm = Item(
  DataElementTag(0x0018, 0x9296),
  "Chemical Shift Maximum Integration Limit in ppm",
  [FloatingPointDouble],
  vm_1,
)

pub const water_reference_acquisition = Item(
  DataElementTag(0x0018, 0x9297),
  "Water Reference Acquisition",
  [CodeString],
  vm_1,
)

pub const echo_peak_position = Item(
  DataElementTag(0x0018, 0x9298),
  "Echo Peak Position",
  [IntegerString],
  vm_1,
)

pub const ct_acquisition_type_sequence = Item(
  DataElementTag(0x0018, 0x9301),
  "CT Acquisition Type Sequence",
  [Sequence],
  vm_1,
)

pub const acquisition_type = Item(
  DataElementTag(0x0018, 0x9302),
  "Acquisition Type",
  [CodeString],
  vm_1,
)

pub const tube_angle = Item(
  DataElementTag(0x0018, 0x9303),
  "Tube Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const ct_acquisition_details_sequence = Item(
  DataElementTag(0x0018, 0x9304),
  "CT Acquisition Details Sequence",
  [Sequence],
  vm_1,
)

pub const revolution_time = Item(
  DataElementTag(0x0018, 0x9305),
  "Revolution Time",
  [FloatingPointDouble],
  vm_1,
)

pub const single_collimation_width = Item(
  DataElementTag(0x0018, 0x9306),
  "Single Collimation Width",
  [FloatingPointDouble],
  vm_1,
)

pub const total_collimation_width = Item(
  DataElementTag(0x0018, 0x9307),
  "Total Collimation Width",
  [FloatingPointDouble],
  vm_1,
)

pub const ct_table_dynamics_sequence = Item(
  DataElementTag(0x0018, 0x9308),
  "CT Table Dynamics Sequence",
  [Sequence],
  vm_1,
)

pub const table_speed = Item(
  DataElementTag(0x0018, 0x9309),
  "Table Speed",
  [FloatingPointDouble],
  vm_1,
)

pub const table_feed_per_rotation = Item(
  DataElementTag(0x0018, 0x9310),
  "Table Feed per Rotation",
  [FloatingPointDouble],
  vm_1,
)

pub const spiral_pitch_factor = Item(
  DataElementTag(0x0018, 0x9311),
  "Spiral Pitch Factor",
  [FloatingPointDouble],
  vm_1,
)

pub const ct_geometry_sequence = Item(
  DataElementTag(0x0018, 0x9312),
  "CT Geometry Sequence",
  [Sequence],
  vm_1,
)

pub const data_collection_center_patient = Item(
  DataElementTag(0x0018, 0x9313),
  "Data Collection Center (Patient)",
  [FloatingPointDouble],
  vm_3,
)

pub const ct_reconstruction_sequence = Item(
  DataElementTag(0x0018, 0x9314),
  "CT Reconstruction Sequence",
  [Sequence],
  vm_1,
)

pub const reconstruction_algorithm = Item(
  DataElementTag(0x0018, 0x9315),
  "Reconstruction Algorithm",
  [CodeString],
  vm_1,
)

pub const convolution_kernel_group = Item(
  DataElementTag(0x0018, 0x9316),
  "Convolution Kernel Group",
  [CodeString],
  vm_1,
)

pub const reconstruction_field_of_view = Item(
  DataElementTag(0x0018, 0x9317),
  "Reconstruction Field of View",
  [FloatingPointDouble],
  vm_2,
)

pub const reconstruction_target_center_patient = Item(
  DataElementTag(0x0018, 0x9318),
  "Reconstruction Target Center (Patient)",
  [FloatingPointDouble],
  vm_3,
)

pub const reconstruction_angle = Item(
  DataElementTag(0x0018, 0x9319),
  "Reconstruction Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const image_filter = Item(
  DataElementTag(0x0018, 0x9320),
  "Image Filter",
  [ShortString],
  vm_1,
)

pub const ct_exposure_sequence = Item(
  DataElementTag(0x0018, 0x9321),
  "CT Exposure Sequence",
  [Sequence],
  vm_1,
)

pub const reconstruction_pixel_spacing = Item(
  DataElementTag(0x0018, 0x9322),
  "Reconstruction Pixel Spacing",
  [FloatingPointDouble],
  vm_2,
)

pub const exposure_modulation_type = Item(
  DataElementTag(0x0018, 0x9323),
  "Exposure Modulation Type",
  [CodeString],
  vm_1_to_n,
)

pub const estimated_dose_saving = Item(
  DataElementTag(0x0018, 0x9324),
  "Estimated Dose Saving",
  [FloatingPointDouble],
  vm_1,
)

pub const ct_x_ray_details_sequence = Item(
  DataElementTag(0x0018, 0x9325),
  "CT X-Ray Details Sequence",
  [Sequence],
  vm_1,
)

pub const ct_position_sequence = Item(
  DataElementTag(0x0018, 0x9326),
  "CT Position Sequence",
  [Sequence],
  vm_1,
)

pub const table_position = Item(
  DataElementTag(0x0018, 0x9327),
  "Table Position",
  [FloatingPointDouble],
  vm_1,
)

pub const exposure_time_inms = Item(
  DataElementTag(0x0018, 0x9328),
  "Exposure Time in ms",
  [FloatingPointDouble],
  vm_1,
)

pub const ct_image_frame_type_sequence = Item(
  DataElementTag(0x0018, 0x9329),
  "CT Image Frame Type Sequence",
  [Sequence],
  vm_1,
)

pub const x_ray_tube_current_in_milliamps = Item(
  DataElementTag(0x0018, 0x9330),
  "X-Ray Tube Current in mA",
  [FloatingPointDouble],
  vm_1,
)

pub const exposure_inm_as = Item(
  DataElementTag(0x0018, 0x9332),
  "Exposure in mAs",
  [FloatingPointDouble],
  vm_1,
)

pub const constant_volume_flag = Item(
  DataElementTag(0x0018, 0x9333),
  "Constant Volume Flag",
  [CodeString],
  vm_1,
)

pub const fluoroscopy_flag = Item(
  DataElementTag(0x0018, 0x9334),
  "Fluoroscopy Flag",
  [CodeString],
  vm_1,
)

pub const distance_source_to_data_collection_center = Item(
  DataElementTag(0x0018, 0x9335),
  "Distance Source to Data Collection Center",
  [FloatingPointDouble],
  vm_1,
)

pub const contrast_bolus_agent_number = Item(
  DataElementTag(0x0018, 0x9337),
  "Contrast/Bolus Agent Number",
  [UnsignedShort],
  vm_1,
)

pub const contrast_bolus_ingredient_code_sequence = Item(
  DataElementTag(0x0018, 0x9338),
  "Contrast/Bolus Ingredient Code Sequence",
  [Sequence],
  vm_1,
)

pub const contrast_administration_profile_sequence = Item(
  DataElementTag(0x0018, 0x9340),
  "Contrast Administration Profile Sequence",
  [Sequence],
  vm_1,
)

pub const contrast_bolus_usage_sequence = Item(
  DataElementTag(0x0018, 0x9341),
  "Contrast/Bolus Usage Sequence",
  [Sequence],
  vm_1,
)

pub const contrast_bolus_agent_administered = Item(
  DataElementTag(0x0018, 0x9342),
  "Contrast/Bolus Agent Administered",
  [CodeString],
  vm_1,
)

pub const contrast_bolus_agent_detected = Item(
  DataElementTag(0x0018, 0x9343),
  "Contrast/Bolus Agent Detected",
  [CodeString],
  vm_1,
)

pub const contrast_bolus_agent_phase = Item(
  DataElementTag(0x0018, 0x9344),
  "Contrast/Bolus Agent Phase",
  [CodeString],
  vm_1,
)

pub const ctdi_vol = Item(
  DataElementTag(0x0018, 0x9345),
  "CTDIvol",
  [FloatingPointDouble],
  vm_1,
)

pub const ctdi_phantom_type_code_sequence = Item(
  DataElementTag(0x0018, 0x9346),
  "CTDI Phantom Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const calcium_scoring_mass_factor_patient = Item(
  DataElementTag(0x0018, 0x9351),
  "Calcium Scoring Mass Factor Patient",
  [FloatingPointSingle],
  vm_1,
)

pub const calcium_scoring_mass_factor_device = Item(
  DataElementTag(0x0018, 0x9352),
  "Calcium Scoring Mass Factor Device",
  [FloatingPointSingle],
  vm_3,
)

pub const energy_weighting_factor = Item(
  DataElementTag(0x0018, 0x9353),
  "Energy Weighting Factor",
  [FloatingPointSingle],
  vm_1,
)

pub const ct_additional_x_ray_source_sequence = Item(
  DataElementTag(0x0018, 0x9360),
  "CT Additional X-Ray Source Sequence",
  [Sequence],
  vm_1,
)

pub const multienergy_ct_acquisition = Item(
  DataElementTag(0x0018, 0x9361),
  "Multi-energy CT Acquisition",
  [CodeString],
  vm_1,
)

pub const multienergy_ct_acquisition_sequence = Item(
  DataElementTag(0x0018, 0x9362),
  "Multi-energy CT Acquisition Sequence",
  [Sequence],
  vm_1,
)

pub const multienergy_ct_processing_sequence = Item(
  DataElementTag(0x0018, 0x9363),
  "Multi-energy CT Processing Sequence",
  [Sequence],
  vm_1,
)

pub const multienergy_ct_characteristics_sequence = Item(
  DataElementTag(0x0018, 0x9364),
  "Multi-energy CT Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const multienergy_ct_x_ray_source_sequence = Item(
  DataElementTag(0x0018, 0x9365),
  "Multi-energy CT X-Ray Source Sequence",
  [Sequence],
  vm_1,
)

pub const x_ray_source_index = Item(
  DataElementTag(0x0018, 0x9366),
  "X-Ray Source Index",
  [UnsignedShort],
  vm_1,
)

pub const x_ray_source_id = Item(
  DataElementTag(0x0018, 0x9367),
  "X-Ray Source ID",
  [UnlimitedCharacters],
  vm_1,
)

pub const multienergy_source_technique = Item(
  DataElementTag(0x0018, 0x9368),
  "Multi-energy Source Technique",
  [CodeString],
  vm_1,
)

pub const source_start_date_time = Item(
  DataElementTag(0x0018, 0x9369),
  "Source Start DateTime",
  [DateTime],
  vm_1,
)

pub const source_end_date_time = Item(
  DataElementTag(0x0018, 0x936A),
  "Source End DateTime",
  [DateTime],
  vm_1,
)

pub const switching_phase_number = Item(
  DataElementTag(0x0018, 0x936B),
  "Switching Phase Number",
  [UnsignedShort],
  vm_1,
)

pub const switching_phase_nominal_duration = Item(
  DataElementTag(0x0018, 0x936C),
  "Switching Phase Nominal Duration",
  [DecimalString],
  vm_1,
)

pub const switching_phase_transition_duration = Item(
  DataElementTag(0x0018, 0x936D),
  "Switching Phase Transition Duration",
  [DecimalString],
  vm_1,
)

pub const effective_bin_energy = Item(
  DataElementTag(0x0018, 0x936E),
  "Effective Bin Energy",
  [DecimalString],
  vm_1,
)

pub const multienergy_ct_x_ray_detector_sequence = Item(
  DataElementTag(0x0018, 0x936F),
  "Multi-energy CT X-Ray Detector Sequence",
  [Sequence],
  vm_1,
)

pub const x_ray_detector_index = Item(
  DataElementTag(0x0018, 0x9370),
  "X-Ray Detector Index",
  [UnsignedShort],
  vm_1,
)

pub const x_ray_detector_id = Item(
  DataElementTag(0x0018, 0x9371),
  "X-Ray Detector ID",
  [UnlimitedCharacters],
  vm_1,
)

pub const multienergy_detector_type = Item(
  DataElementTag(0x0018, 0x9372),
  "Multi-energy Detector Type",
  [CodeString],
  vm_1,
)

pub const x_ray_detector_label = Item(
  DataElementTag(0x0018, 0x9373),
  "X-Ray Detector Label",
  [ShortText],
  vm_1,
)

pub const nominal_max_energy = Item(
  DataElementTag(0x0018, 0x9374),
  "Nominal Max Energy",
  [DecimalString],
  vm_1,
)

pub const nominal_min_energy = Item(
  DataElementTag(0x0018, 0x9375),
  "Nominal Min Energy",
  [DecimalString],
  vm_1,
)

pub const referenced_x_ray_detector_index = Item(
  DataElementTag(0x0018, 0x9376),
  "Referenced X-Ray Detector Index",
  [UnsignedShort],
  vm_1_to_n,
)

pub const referenced_x_ray_source_index = Item(
  DataElementTag(0x0018, 0x9377),
  "Referenced X-Ray Source Index",
  [UnsignedShort],
  vm_1_to_n,
)

pub const referenced_path_index = Item(
  DataElementTag(0x0018, 0x9378),
  "Referenced Path Index",
  [UnsignedShort],
  vm_1_to_n,
)

pub const multienergy_ct_path_sequence = Item(
  DataElementTag(0x0018, 0x9379),
  "Multi-energy CT Path Sequence",
  [Sequence],
  vm_1,
)

pub const multienergy_ct_path_index = Item(
  DataElementTag(0x0018, 0x937A),
  "Multi-energy CT Path Index",
  [UnsignedShort],
  vm_1,
)

pub const multienergy_acquisition_description = Item(
  DataElementTag(0x0018, 0x937B),
  "Multi-energy Acquisition Description",
  [UnlimitedText],
  vm_1,
)

pub const monoenergetic_energy_equivalent = Item(
  DataElementTag(0x0018, 0x937C),
  "Monoenergetic Energy Equivalent",
  [FloatingPointDouble],
  vm_1,
)

pub const material_code_sequence = Item(
  DataElementTag(0x0018, 0x937D),
  "Material Code Sequence",
  [Sequence],
  vm_1,
)

pub const decomposition_method = Item(
  DataElementTag(0x0018, 0x937E),
  "Decomposition Method",
  [CodeString],
  vm_1,
)

pub const decomposition_description = Item(
  DataElementTag(0x0018, 0x937F),
  "Decomposition Description",
  [UnlimitedText],
  vm_1,
)

pub const decomposition_algorithm_identification_sequence = Item(
  DataElementTag(0x0018, 0x9380),
  "Decomposition Algorithm Identification Sequence",
  [Sequence],
  vm_1,
)

pub const decomposition_material_sequence = Item(
  DataElementTag(0x0018, 0x9381),
  "Decomposition Material Sequence",
  [Sequence],
  vm_1,
)

pub const material_attenuation_sequence = Item(
  DataElementTag(0x0018, 0x9382),
  "Material Attenuation Sequence",
  [Sequence],
  vm_1,
)

pub const photon_energy = Item(
  DataElementTag(0x0018, 0x9383),
  "Photon Energy",
  [DecimalString],
  vm_1,
)

pub const x_ray_mass_attenuation_coefficient = Item(
  DataElementTag(0x0018, 0x9384),
  "X-Ray Mass Attenuation Coefficient",
  [DecimalString],
  vm_1,
)

pub const projection_pixel_calibration_sequence = Item(
  DataElementTag(0x0018, 0x9401),
  "Projection Pixel Calibration Sequence",
  [Sequence],
  vm_1,
)

pub const distance_source_to_isocenter = Item(
  DataElementTag(0x0018, 0x9402),
  "Distance Source to Isocenter",
  [FloatingPointSingle],
  vm_1,
)

pub const distance_object_to_table_top = Item(
  DataElementTag(0x0018, 0x9403),
  "Distance Object to Table Top",
  [FloatingPointSingle],
  vm_1,
)

pub const object_pixel_spacing_in_center_of_beam = Item(
  DataElementTag(0x0018, 0x9404),
  "Object Pixel Spacing in Center of Beam",
  [FloatingPointSingle],
  vm_2,
)

pub const positioner_position_sequence = Item(
  DataElementTag(0x0018, 0x9405),
  "Positioner Position Sequence",
  [Sequence],
  vm_1,
)

pub const table_position_sequence = Item(
  DataElementTag(0x0018, 0x9406),
  "Table Position Sequence",
  [Sequence],
  vm_1,
)

pub const collimator_shape_sequence = Item(
  DataElementTag(0x0018, 0x9407),
  "Collimator Shape Sequence",
  [Sequence],
  vm_1,
)

pub const planes_in_acquisition = Item(
  DataElementTag(0x0018, 0x9410),
  "Planes in Acquisition",
  [CodeString],
  vm_1,
)

pub const xaxrf_frame_characteristics_sequence = Item(
  DataElementTag(0x0018, 0x9412),
  "XA/XRF Frame Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const frame_acquisition_sequence = Item(
  DataElementTag(0x0018, 0x9417),
  "Frame Acquisition Sequence",
  [Sequence],
  vm_1,
)

pub const x_ray_receptor_type = Item(
  DataElementTag(0x0018, 0x9420),
  "X-Ray Receptor Type",
  [CodeString],
  vm_1,
)

pub const acquisition_protocol_name = Item(
  DataElementTag(0x0018, 0x9423),
  "Acquisition Protocol Name",
  [LongString],
  vm_1,
)

pub const acquisition_protocol_description = Item(
  DataElementTag(0x0018, 0x9424),
  "Acquisition Protocol Description",
  [LongText],
  vm_1,
)

pub const contrast_bolus_ingredient_opaque = Item(
  DataElementTag(0x0018, 0x9425),
  "Contrast/Bolus Ingredient Opaque",
  [CodeString],
  vm_1,
)

pub const distance_receptor_plane_to_detector_housing = Item(
  DataElementTag(0x0018, 0x9426),
  "Distance Receptor Plane to Detector Housing",
  [FloatingPointSingle],
  vm_1,
)

pub const intensifier_active_shape = Item(
  DataElementTag(0x0018, 0x9427),
  "Intensifier Active Shape",
  [CodeString],
  vm_1,
)

pub const intensifier_active_dimensions = Item(
  DataElementTag(0x0018, 0x9428),
  "Intensifier Active Dimension(s)",
  [FloatingPointSingle],
  vm_1_to_2,
)

pub const physical_detector_size = Item(
  DataElementTag(0x0018, 0x9429),
  "Physical Detector Size",
  [FloatingPointSingle],
  vm_2,
)

pub const position_of_isocenter_projection = Item(
  DataElementTag(0x0018, 0x9430),
  "Position of Isocenter Projection",
  [FloatingPointSingle],
  vm_2,
)

pub const field_of_view_sequence = Item(
  DataElementTag(0x0018, 0x9432),
  "Field of View Sequence",
  [Sequence],
  vm_1,
)

pub const field_of_view_description = Item(
  DataElementTag(0x0018, 0x9433),
  "Field of View Description",
  [LongString],
  vm_1,
)

pub const exposure_control_sensing_regions_sequence = Item(
  DataElementTag(0x0018, 0x9434),
  "Exposure Control Sensing Regions Sequence",
  [Sequence],
  vm_1,
)

pub const exposure_control_sensing_region_shape = Item(
  DataElementTag(0x0018, 0x9435),
  "Exposure Control Sensing Region Shape",
  [CodeString],
  vm_1,
)

pub const exposure_control_sensing_region_left_vertical_edge = Item(
  DataElementTag(0x0018, 0x9436),
  "Exposure Control Sensing Region Left Vertical Edge",
  [SignedShort],
  vm_1,
)

pub const exposure_control_sensing_region_right_vertical_edge = Item(
  DataElementTag(0x0018, 0x9437),
  "Exposure Control Sensing Region Right Vertical Edge",
  [SignedShort],
  vm_1,
)

pub const exposure_control_sensing_region_upper_horizontal_edge = Item(
  DataElementTag(0x0018, 0x9438),
  "Exposure Control Sensing Region Upper Horizontal Edge",
  [SignedShort],
  vm_1,
)

pub const exposure_control_sensing_region_lower_horizontal_edge = Item(
  DataElementTag(0x0018, 0x9439),
  "Exposure Control Sensing Region Lower Horizontal Edge",
  [SignedShort],
  vm_1,
)

pub const center_of_circular_exposure_control_sensing_region = Item(
  DataElementTag(0x0018, 0x9440),
  "Center of Circular Exposure Control Sensing Region",
  [SignedShort],
  vm_2,
)

pub const radius_of_circular_exposure_control_sensing_region = Item(
  DataElementTag(0x0018, 0x9441),
  "Radius of Circular Exposure Control Sensing Region",
  [UnsignedShort],
  vm_1,
)

pub const vertices_of_the_polygonal_exposure_control_sensing_region = Item(
  DataElementTag(0x0018, 0x9442),
  "Vertices of the Polygonal Exposure Control Sensing Region",
  [SignedShort],
  vm_2_to_n,
)

pub const column_angulation_patient = Item(
  DataElementTag(0x0018, 0x9447),
  "Column Angulation (Patient)",
  [FloatingPointSingle],
  vm_1,
)

pub const beam_angle = Item(
  DataElementTag(0x0018, 0x9449),
  "Beam Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const frame_detector_parameters_sequence = Item(
  DataElementTag(0x0018, 0x9451),
  "Frame Detector Parameters Sequence",
  [Sequence],
  vm_1,
)

pub const calculated_anatomy_thickness = Item(
  DataElementTag(0x0018, 0x9452),
  "Calculated Anatomy Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const calibration_sequence = Item(
  DataElementTag(0x0018, 0x9455),
  "Calibration Sequence",
  [Sequence],
  vm_1,
)

pub const object_thickness_sequence = Item(
  DataElementTag(0x0018, 0x9456),
  "Object Thickness Sequence",
  [Sequence],
  vm_1,
)

pub const plane_identification = Item(
  DataElementTag(0x0018, 0x9457),
  "Plane Identification",
  [CodeString],
  vm_1,
)

pub const field_of_view_dimensions_in_float = Item(
  DataElementTag(0x0018, 0x9461),
  "Field of View Dimension(s) in Float",
  [FloatingPointSingle],
  vm_1_to_2,
)

pub const isocenter_reference_system_sequence = Item(
  DataElementTag(0x0018, 0x9462),
  "Isocenter Reference System Sequence",
  [Sequence],
  vm_1,
)

pub const positioner_isocenter_primary_angle = Item(
  DataElementTag(0x0018, 0x9463),
  "Positioner Isocenter Primary Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const positioner_isocenter_secondary_angle = Item(
  DataElementTag(0x0018, 0x9464),
  "Positioner Isocenter Secondary Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const positioner_isocenter_detector_rotation_angle = Item(
  DataElementTag(0x0018, 0x9465),
  "Positioner Isocenter Detector Rotation Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const table_x_position_to_isocenter = Item(
  DataElementTag(0x0018, 0x9466),
  "Table X Position to Isocenter",
  [FloatingPointSingle],
  vm_1,
)

pub const table_y_position_to_isocenter = Item(
  DataElementTag(0x0018, 0x9467),
  "Table Y Position to Isocenter",
  [FloatingPointSingle],
  vm_1,
)

pub const table_z_position_to_isocenter = Item(
  DataElementTag(0x0018, 0x9468),
  "Table Z Position to Isocenter",
  [FloatingPointSingle],
  vm_1,
)

pub const table_horizontal_rotation_angle = Item(
  DataElementTag(0x0018, 0x9469),
  "Table Horizontal Rotation Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const table_head_tilt_angle = Item(
  DataElementTag(0x0018, 0x9470),
  "Table Head Tilt Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const table_cradle_tilt_angle = Item(
  DataElementTag(0x0018, 0x9471),
  "Table Cradle Tilt Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const frame_display_shutter_sequence = Item(
  DataElementTag(0x0018, 0x9472),
  "Frame Display Shutter Sequence",
  [Sequence],
  vm_1,
)

pub const acquired_image_area_dose_product = Item(
  DataElementTag(0x0018, 0x9473),
  "Acquired Image Area Dose Product",
  [FloatingPointSingle],
  vm_1,
)

pub const c_arm_positioner_tabletop_relationship = Item(
  DataElementTag(0x0018, 0x9474),
  "C-arm Positioner Tabletop Relationship",
  [CodeString],
  vm_1,
)

pub const x_ray_geometry_sequence = Item(
  DataElementTag(0x0018, 0x9476),
  "X-Ray Geometry Sequence",
  [Sequence],
  vm_1,
)

pub const irradiation_event_identification_sequence = Item(
  DataElementTag(0x0018, 0x9477),
  "Irradiation Event Identification Sequence",
  [Sequence],
  vm_1,
)

pub const x_ray_3d_frame_type_sequence = Item(
  DataElementTag(0x0018, 0x9504),
  "X-Ray 3D Frame Type Sequence",
  [Sequence],
  vm_1,
)

pub const contributing_sources_sequence = Item(
  DataElementTag(0x0018, 0x9506),
  "Contributing Sources Sequence",
  [Sequence],
  vm_1,
)

pub const x_ray_3d_acquisition_sequence = Item(
  DataElementTag(0x0018, 0x9507),
  "X-Ray 3D Acquisition Sequence",
  [Sequence],
  vm_1,
)

pub const primary_positioner_scan_arc = Item(
  DataElementTag(0x0018, 0x9508),
  "Primary Positioner Scan Arc",
  [FloatingPointSingle],
  vm_1,
)

pub const secondary_positioner_scan_arc = Item(
  DataElementTag(0x0018, 0x9509),
  "Secondary Positioner Scan Arc",
  [FloatingPointSingle],
  vm_1,
)

pub const primary_positioner_scan_start_angle = Item(
  DataElementTag(0x0018, 0x9510),
  "Primary Positioner Scan Start Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const secondary_positioner_scan_start_angle = Item(
  DataElementTag(0x0018, 0x9511),
  "Secondary Positioner Scan Start Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const primary_positioner_increment = Item(
  DataElementTag(0x0018, 0x9514),
  "Primary Positioner Increment",
  [FloatingPointSingle],
  vm_1,
)

pub const secondary_positioner_increment = Item(
  DataElementTag(0x0018, 0x9515),
  "Secondary Positioner Increment",
  [FloatingPointSingle],
  vm_1,
)

pub const start_acquisition_date_time = Item(
  DataElementTag(0x0018, 0x9516),
  "Start Acquisition DateTime",
  [DateTime],
  vm_1,
)

pub const end_acquisition_date_time = Item(
  DataElementTag(0x0018, 0x9517),
  "End Acquisition DateTime",
  [DateTime],
  vm_1,
)

pub const primary_positioner_increment_sign = Item(
  DataElementTag(0x0018, 0x9518),
  "Primary Positioner Increment Sign",
  [SignedShort],
  vm_1,
)

pub const secondary_positioner_increment_sign = Item(
  DataElementTag(0x0018, 0x9519),
  "Secondary Positioner Increment Sign",
  [SignedShort],
  vm_1,
)

pub const application_name = Item(
  DataElementTag(0x0018, 0x9524),
  "Application Name",
  [LongString],
  vm_1,
)

pub const application_version = Item(
  DataElementTag(0x0018, 0x9525),
  "Application Version",
  [LongString],
  vm_1,
)

pub const application_manufacturer = Item(
  DataElementTag(0x0018, 0x9526),
  "Application Manufacturer",
  [LongString],
  vm_1,
)

pub const algorithm_type = Item(
  DataElementTag(0x0018, 0x9527),
  "Algorithm Type",
  [CodeString],
  vm_1,
)

pub const algorithm_description = Item(
  DataElementTag(0x0018, 0x9528),
  "Algorithm Description",
  [LongString],
  vm_1,
)

pub const x_ray_3d_reconstruction_sequence = Item(
  DataElementTag(0x0018, 0x9530),
  "X-Ray 3D Reconstruction Sequence",
  [Sequence],
  vm_1,
)

pub const reconstruction_description = Item(
  DataElementTag(0x0018, 0x9531),
  "Reconstruction Description",
  [LongString],
  vm_1,
)

pub const per_projection_acquisition_sequence = Item(
  DataElementTag(0x0018, 0x9538),
  "Per Projection Acquisition Sequence",
  [Sequence],
  vm_1,
)

pub const detector_position_sequence = Item(
  DataElementTag(0x0018, 0x9541),
  "Detector Position Sequence",
  [Sequence],
  vm_1,
)

pub const x_ray_acquisition_dose_sequence = Item(
  DataElementTag(0x0018, 0x9542),
  "X-Ray Acquisition Dose Sequence",
  [Sequence],
  vm_1,
)

pub const x_ray_source_isocenter_primary_angle = Item(
  DataElementTag(0x0018, 0x9543),
  "X-Ray Source Isocenter Primary Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const x_ray_source_isocenter_secondary_angle = Item(
  DataElementTag(0x0018, 0x9544),
  "X-Ray Source Isocenter Secondary Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const breast_support_isocenter_primary_angle = Item(
  DataElementTag(0x0018, 0x9545),
  "Breast Support Isocenter Primary Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const breast_support_isocenter_secondary_angle = Item(
  DataElementTag(0x0018, 0x9546),
  "Breast Support Isocenter Secondary Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const breast_support_x_position_to_isocenter = Item(
  DataElementTag(0x0018, 0x9547),
  "Breast Support X Position to Isocenter",
  [FloatingPointDouble],
  vm_1,
)

pub const breast_support_y_position_to_isocenter = Item(
  DataElementTag(0x0018, 0x9548),
  "Breast Support Y Position to Isocenter",
  [FloatingPointDouble],
  vm_1,
)

pub const breast_support_z_position_to_isocenter = Item(
  DataElementTag(0x0018, 0x9549),
  "Breast Support Z Position to Isocenter",
  [FloatingPointDouble],
  vm_1,
)

pub const detector_isocenter_primary_angle = Item(
  DataElementTag(0x0018, 0x9550),
  "Detector Isocenter Primary Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const detector_isocenter_secondary_angle = Item(
  DataElementTag(0x0018, 0x9551),
  "Detector Isocenter Secondary Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const detector_x_position_to_isocenter = Item(
  DataElementTag(0x0018, 0x9552),
  "Detector X Position to Isocenter",
  [FloatingPointDouble],
  vm_1,
)

pub const detector_y_position_to_isocenter = Item(
  DataElementTag(0x0018, 0x9553),
  "Detector Y Position to Isocenter",
  [FloatingPointDouble],
  vm_1,
)

pub const detector_z_position_to_isocenter = Item(
  DataElementTag(0x0018, 0x9554),
  "Detector Z Position to Isocenter",
  [FloatingPointDouble],
  vm_1,
)

pub const x_ray_grid_sequence = Item(
  DataElementTag(0x0018, 0x9555),
  "X-Ray Grid Sequence",
  [Sequence],
  vm_1,
)

pub const x_ray_filter_sequence = Item(
  DataElementTag(0x0018, 0x9556),
  "X-Ray Filter Sequence",
  [Sequence],
  vm_1,
)

pub const detector_active_area_tlhc_position = Item(
  DataElementTag(0x0018, 0x9557),
  "Detector Active Area TLHC Position",
  [FloatingPointDouble],
  vm_3,
)

pub const detector_active_area_orientation = Item(
  DataElementTag(0x0018, 0x9558),
  "Detector Active Area Orientation",
  [FloatingPointDouble],
  vm_6,
)

pub const positioner_primary_angle_direction = Item(
  DataElementTag(0x0018, 0x9559),
  "Positioner Primary Angle Direction",
  [CodeString],
  vm_1,
)

pub const diffusion_b_matrix_sequence = Item(
  DataElementTag(0x0018, 0x9601),
  "Diffusion b-matrix Sequence",
  [Sequence],
  vm_1,
)

pub const diffusion_b_value_xx = Item(
  DataElementTag(0x0018, 0x9602),
  "Diffusion b-value XX",
  [FloatingPointDouble],
  vm_1,
)

pub const diffusion_b_value_xy = Item(
  DataElementTag(0x0018, 0x9603),
  "Diffusion b-value XY",
  [FloatingPointDouble],
  vm_1,
)

pub const diffusion_b_value_xz = Item(
  DataElementTag(0x0018, 0x9604),
  "Diffusion b-value XZ",
  [FloatingPointDouble],
  vm_1,
)

pub const diffusion_b_value_yy = Item(
  DataElementTag(0x0018, 0x9605),
  "Diffusion b-value YY",
  [FloatingPointDouble],
  vm_1,
)

pub const diffusion_b_value_yz = Item(
  DataElementTag(0x0018, 0x9606),
  "Diffusion b-value YZ",
  [FloatingPointDouble],
  vm_1,
)

pub const diffusion_b_value_zz = Item(
  DataElementTag(0x0018, 0x9607),
  "Diffusion b-value ZZ",
  [FloatingPointDouble],
  vm_1,
)

pub const functional_mr_sequence = Item(
  DataElementTag(0x0018, 0x9621),
  "Functional MR Sequence",
  [Sequence],
  vm_1,
)

pub const functional_settling_phase_frames_present = Item(
  DataElementTag(0x0018, 0x9622),
  "Functional Settling Phase Frames Present",
  [CodeString],
  vm_1,
)

pub const functional_sync_pulse = Item(
  DataElementTag(0x0018, 0x9623),
  "Functional Sync Pulse",
  [DateTime],
  vm_1,
)

pub const settling_phase_frame = Item(
  DataElementTag(0x0018, 0x9624),
  "Settling Phase Frame",
  [CodeString],
  vm_1,
)

pub const decay_correction_date_time = Item(
  DataElementTag(0x0018, 0x9701),
  "Decay Correction DateTime",
  [DateTime],
  vm_1,
)

pub const start_density_threshold = Item(
  DataElementTag(0x0018, 0x9715),
  "Start Density Threshold",
  [FloatingPointDouble],
  vm_1,
)

pub const start_relative_density_difference_threshold = Item(
  DataElementTag(0x0018, 0x9716),
  "Start Relative Density Difference Threshold",
  [FloatingPointDouble],
  vm_1,
)

pub const start_cardiac_trigger_count_threshold = Item(
  DataElementTag(0x0018, 0x9717),
  "Start Cardiac Trigger Count Threshold",
  [FloatingPointDouble],
  vm_1,
)

pub const start_respiratory_trigger_count_threshold = Item(
  DataElementTag(0x0018, 0x9718),
  "Start Respiratory Trigger Count Threshold",
  [FloatingPointDouble],
  vm_1,
)

pub const termination_counts_threshold = Item(
  DataElementTag(0x0018, 0x9719),
  "Termination Counts Threshold",
  [FloatingPointDouble],
  vm_1,
)

pub const termination_density_threshold = Item(
  DataElementTag(0x0018, 0x9720),
  "Termination Density Threshold",
  [FloatingPointDouble],
  vm_1,
)

pub const termination_relative_density_threshold = Item(
  DataElementTag(0x0018, 0x9721),
  "Termination Relative Density Threshold",
  [FloatingPointDouble],
  vm_1,
)

pub const termination_time_threshold = Item(
  DataElementTag(0x0018, 0x9722),
  "Termination Time Threshold",
  [FloatingPointDouble],
  vm_1,
)

pub const termination_cardiac_trigger_count_threshold = Item(
  DataElementTag(0x0018, 0x9723),
  "Termination Cardiac Trigger Count Threshold",
  [FloatingPointDouble],
  vm_1,
)

pub const termination_respiratory_trigger_count_threshold = Item(
  DataElementTag(0x0018, 0x9724),
  "Termination Respiratory Trigger Count Threshold",
  [FloatingPointDouble],
  vm_1,
)

pub const detector_geometry = Item(
  DataElementTag(0x0018, 0x9725),
  "Detector Geometry",
  [CodeString],
  vm_1,
)

pub const transverse_detector_separation = Item(
  DataElementTag(0x0018, 0x9726),
  "Transverse Detector Separation",
  [FloatingPointDouble],
  vm_1,
)

pub const axial_detector_dimension = Item(
  DataElementTag(0x0018, 0x9727),
  "Axial Detector Dimension",
  [FloatingPointDouble],
  vm_1,
)

pub const radiopharmaceutical_agent_number = Item(
  DataElementTag(0x0018, 0x9729),
  "Radiopharmaceutical Agent Number",
  [UnsignedShort],
  vm_1,
)

pub const pet_frame_acquisition_sequence = Item(
  DataElementTag(0x0018, 0x9732),
  "PET Frame Acquisition Sequence",
  [Sequence],
  vm_1,
)

pub const pet_detector_motion_details_sequence = Item(
  DataElementTag(0x0018, 0x9733),
  "PET Detector Motion Details Sequence",
  [Sequence],
  vm_1,
)

pub const pet_table_dynamics_sequence = Item(
  DataElementTag(0x0018, 0x9734),
  "PET Table Dynamics Sequence",
  [Sequence],
  vm_1,
)

pub const pet_position_sequence = Item(
  DataElementTag(0x0018, 0x9735),
  "PET Position Sequence",
  [Sequence],
  vm_1,
)

pub const pet_frame_correction_factors_sequence = Item(
  DataElementTag(0x0018, 0x9736),
  "PET Frame Correction Factors Sequence",
  [Sequence],
  vm_1,
)

pub const radiopharmaceutical_usage_sequence = Item(
  DataElementTag(0x0018, 0x9737),
  "Radiopharmaceutical Usage Sequence",
  [Sequence],
  vm_1,
)

pub const attenuation_correction_source = Item(
  DataElementTag(0x0018, 0x9738),
  "Attenuation Correction Source",
  [CodeString],
  vm_1,
)

pub const number_of_iterations = Item(
  DataElementTag(0x0018, 0x9739),
  "Number of Iterations",
  [UnsignedShort],
  vm_1,
)

pub const number_of_subsets = Item(
  DataElementTag(0x0018, 0x9740),
  "Number of Subsets",
  [UnsignedShort],
  vm_1,
)

pub const pet_reconstruction_sequence = Item(
  DataElementTag(0x0018, 0x9749),
  "PET Reconstruction Sequence",
  [Sequence],
  vm_1,
)

pub const pet_frame_type_sequence = Item(
  DataElementTag(0x0018, 0x9751),
  "PET Frame Type Sequence",
  [Sequence],
  vm_1,
)

pub const time_of_flight_information_used = Item(
  DataElementTag(0x0018, 0x9755),
  "Time of Flight Information Used",
  [CodeString],
  vm_1,
)

pub const reconstruction_type = Item(
  DataElementTag(0x0018, 0x9756),
  "Reconstruction Type",
  [CodeString],
  vm_1,
)

pub const decay_corrected = Item(
  DataElementTag(0x0018, 0x9758),
  "Decay Corrected",
  [CodeString],
  vm_1,
)

pub const attenuation_corrected = Item(
  DataElementTag(0x0018, 0x9759),
  "Attenuation Corrected",
  [CodeString],
  vm_1,
)

pub const scatter_corrected = Item(
  DataElementTag(0x0018, 0x9760),
  "Scatter Corrected",
  [CodeString],
  vm_1,
)

pub const dead_time_corrected = Item(
  DataElementTag(0x0018, 0x9761),
  "Dead Time Corrected",
  [CodeString],
  vm_1,
)

pub const gantry_motion_corrected = Item(
  DataElementTag(0x0018, 0x9762),
  "Gantry Motion Corrected",
  [CodeString],
  vm_1,
)

pub const patient_motion_corrected = Item(
  DataElementTag(0x0018, 0x9763),
  "Patient Motion Corrected",
  [CodeString],
  vm_1,
)

pub const count_loss_normalization_corrected = Item(
  DataElementTag(0x0018, 0x9764),
  "Count Loss Normalization Corrected",
  [CodeString],
  vm_1,
)

pub const randoms_corrected = Item(
  DataElementTag(0x0018, 0x9765),
  "Randoms Corrected",
  [CodeString],
  vm_1,
)

pub const non_uniform_radial_sampling_corrected = Item(
  DataElementTag(0x0018, 0x9766),
  "Non-uniform Radial Sampling Corrected",
  [CodeString],
  vm_1,
)

pub const sensitivity_calibrated = Item(
  DataElementTag(0x0018, 0x9767),
  "Sensitivity Calibrated",
  [CodeString],
  vm_1,
)

pub const detector_normalization_correction = Item(
  DataElementTag(0x0018, 0x9768),
  "Detector Normalization Correction",
  [CodeString],
  vm_1,
)

pub const iterative_reconstruction_method = Item(
  DataElementTag(0x0018, 0x9769),
  "Iterative Reconstruction Method",
  [CodeString],
  vm_1,
)

pub const attenuation_correction_temporal_relationship = Item(
  DataElementTag(0x0018, 0x9770),
  "Attenuation Correction Temporal Relationship",
  [CodeString],
  vm_1,
)

pub const patient_physiological_state_sequence = Item(
  DataElementTag(0x0018, 0x9771),
  "Patient Physiological State Sequence",
  [Sequence],
  vm_1,
)

pub const patient_physiological_state_code_sequence = Item(
  DataElementTag(0x0018, 0x9772),
  "Patient Physiological State Code Sequence",
  [Sequence],
  vm_1,
)

pub const depths_of_focus = Item(
  DataElementTag(0x0018, 0x9801),
  "Depth(s) of Focus",
  [FloatingPointDouble],
  vm_1_to_n,
)

pub const excluded_intervals_sequence = Item(
  DataElementTag(0x0018, 0x9803),
  "Excluded Intervals Sequence",
  [Sequence],
  vm_1,
)

pub const exclusion_start_date_time = Item(
  DataElementTag(0x0018, 0x9804),
  "Exclusion Start DateTime",
  [DateTime],
  vm_1,
)

pub const exclusion_duration = Item(
  DataElementTag(0x0018, 0x9805),
  "Exclusion Duration",
  [FloatingPointDouble],
  vm_1,
)

pub const us_image_description_sequence = Item(
  DataElementTag(0x0018, 0x9806),
  "US Image Description Sequence",
  [Sequence],
  vm_1,
)

pub const image_data_type_sequence = Item(
  DataElementTag(0x0018, 0x9807),
  "Image Data Type Sequence",
  [Sequence],
  vm_1,
)

pub const data_type = Item(
  DataElementTag(0x0018, 0x9808),
  "Data Type",
  [CodeString],
  vm_1,
)

pub const transducer_scan_pattern_code_sequence = Item(
  DataElementTag(0x0018, 0x9809),
  "Transducer Scan Pattern Code Sequence",
  [Sequence],
  vm_1,
)

pub const aliased_data_type = Item(
  DataElementTag(0x0018, 0x980B),
  "Aliased Data Type",
  [CodeString],
  vm_1,
)

pub const position_measuring_device_used = Item(
  DataElementTag(0x0018, 0x980C),
  "Position Measuring Device Used",
  [CodeString],
  vm_1,
)

pub const transducer_geometry_code_sequence = Item(
  DataElementTag(0x0018, 0x980D),
  "Transducer Geometry Code Sequence",
  [Sequence],
  vm_1,
)

pub const transducer_beam_steering_code_sequence = Item(
  DataElementTag(0x0018, 0x980E),
  "Transducer Beam Steering Code Sequence",
  [Sequence],
  vm_1,
)

pub const transducer_application_code_sequence = Item(
  DataElementTag(0x0018, 0x980F),
  "Transducer Application Code Sequence",
  [Sequence],
  vm_1,
)

pub const zero_velocity_pixel_value = Item(
  DataElementTag(0x0018, 0x9810),
  "Zero Velocity Pixel Value",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const photoacoustic_excitation_characteristics_sequence = Item(
  DataElementTag(0x0018, 0x9821),
  "Photoacoustic Excitation Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const excitation_spectral_width = Item(
  DataElementTag(0x0018, 0x9822),
  "Excitation Spectral Width",
  [FloatingPointDouble],
  vm_1,
)

pub const excitation_energy = Item(
  DataElementTag(0x0018, 0x9823),
  "Excitation Energy",
  [FloatingPointDouble],
  vm_1,
)

pub const excitation_pulse_duration = Item(
  DataElementTag(0x0018, 0x9824),
  "Excitation Pulse Duration",
  [FloatingPointDouble],
  vm_1,
)

pub const excitation_wavelength_sequence = Item(
  DataElementTag(0x0018, 0x9825),
  "Excitation Wavelength Sequence",
  [Sequence],
  vm_1,
)

pub const excitation_wavelength = Item(
  DataElementTag(0x0018, 0x9826),
  "Excitation Wavelength",
  [FloatingPointDouble],
  vm_1,
)

pub const illumination_translation_flag = Item(
  DataElementTag(0x0018, 0x9828),
  "Illumination Translation Flag",
  [CodeString],
  vm_1,
)

pub const acoustic_coupling_medium_flag = Item(
  DataElementTag(0x0018, 0x9829),
  "Acoustic Coupling Medium Flag",
  [CodeString],
  vm_1,
)

pub const acoustic_coupling_medium_code_sequence = Item(
  DataElementTag(0x0018, 0x982A),
  "Acoustic Coupling Medium Code Sequence",
  [Sequence],
  vm_1,
)

pub const acoustic_coupling_medium_temperature = Item(
  DataElementTag(0x0018, 0x982B),
  "Acoustic Coupling Medium Temperature",
  [FloatingPointDouble],
  vm_1,
)

pub const transducer_response_sequence = Item(
  DataElementTag(0x0018, 0x982C),
  "Transducer Response Sequence",
  [Sequence],
  vm_1,
)

pub const center_frequency = Item(
  DataElementTag(0x0018, 0x982D),
  "Center Frequency",
  [FloatingPointDouble],
  vm_1,
)

pub const fractional_bandwidth = Item(
  DataElementTag(0x0018, 0x982E),
  "Fractional Bandwidth",
  [FloatingPointDouble],
  vm_1,
)

pub const lower_cutoff_frequency = Item(
  DataElementTag(0x0018, 0x982F),
  "Lower Cutoff Frequency",
  [FloatingPointDouble],
  vm_1,
)

pub const upper_cutoff_frequency = Item(
  DataElementTag(0x0018, 0x9830),
  "Upper Cutoff Frequency",
  [FloatingPointDouble],
  vm_1,
)

pub const transducer_technology_sequence = Item(
  DataElementTag(0x0018, 0x9831),
  "Transducer Technology Sequence",
  [Sequence],
  vm_1,
)

pub const sound_speed_correction_mechanism_code_sequence = Item(
  DataElementTag(0x0018, 0x9832),
  "Sound Speed Correction Mechanism Code Sequence",
  [Sequence],
  vm_1,
)

pub const object_sound_speed = Item(
  DataElementTag(0x0018, 0x9833),
  "Object Sound Speed",
  [FloatingPointDouble],
  vm_1,
)

pub const acoustic_coupling_medium_sound_speed = Item(
  DataElementTag(0x0018, 0x9834),
  "Acoustic Coupling Medium Sound Speed",
  [FloatingPointDouble],
  vm_1,
)

pub const photoacoustic_image_frame_type_sequence = Item(
  DataElementTag(0x0018, 0x9835),
  "Photoacoustic Image Frame Type Sequence",
  [Sequence],
  vm_1,
)

pub const image_data_type_code_sequence = Item(
  DataElementTag(0x0018, 0x9836),
  "Image Data Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const reference_location_label = Item(
  DataElementTag(0x0018, 0x9900),
  "Reference Location Label",
  [LongString],
  vm_1,
)

pub const reference_location_description = Item(
  DataElementTag(0x0018, 0x9901),
  "Reference Location Description",
  [UnlimitedText],
  vm_1,
)

pub const reference_basis_code_sequence = Item(
  DataElementTag(0x0018, 0x9902),
  "Reference Basis Code Sequence",
  [Sequence],
  vm_1,
)

pub const reference_geometry_code_sequence = Item(
  DataElementTag(0x0018, 0x9903),
  "Reference Geometry Code Sequence",
  [Sequence],
  vm_1,
)

pub const offset_distance = Item(
  DataElementTag(0x0018, 0x9904),
  "Offset Distance",
  [DecimalString],
  vm_1,
)

pub const offset_direction = Item(
  DataElementTag(0x0018, 0x9905),
  "Offset Direction",
  [CodeString],
  vm_1,
)

pub const potential_scheduled_protocol_code_sequence = Item(
  DataElementTag(0x0018, 0x9906),
  "Potential Scheduled Protocol Code Sequence",
  [Sequence],
  vm_1,
)

pub const potential_requested_procedure_code_sequence = Item(
  DataElementTag(0x0018, 0x9907),
  "Potential Requested Procedure Code Sequence",
  [Sequence],
  vm_1,
)

pub const potential_reasons_for_procedure = Item(
  DataElementTag(0x0018, 0x9908),
  "Potential Reasons for Procedure",
  [UnlimitedCharacters],
  vm_1_to_n,
)

pub const potential_reasons_for_procedure_code_sequence = Item(
  DataElementTag(0x0018, 0x9909),
  "Potential Reasons for Procedure Code Sequence",
  [Sequence],
  vm_1,
)

pub const potential_diagnostic_tasks = Item(
  DataElementTag(0x0018, 0x990A),
  "Potential Diagnostic Tasks",
  [UnlimitedCharacters],
  vm_1_to_n,
)

pub const contraindications_code_sequence = Item(
  DataElementTag(0x0018, 0x990B),
  "Contraindications Code Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_defined_protocol_sequence = Item(
  DataElementTag(0x0018, 0x990C),
  "Referenced Defined Protocol Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_performed_protocol_sequence = Item(
  DataElementTag(0x0018, 0x990D),
  "Referenced Performed Protocol Sequence",
  [Sequence],
  vm_1,
)

pub const predecessor_protocol_sequence = Item(
  DataElementTag(0x0018, 0x990E),
  "Predecessor Protocol Sequence",
  [Sequence],
  vm_1,
)

pub const protocol_planning_information = Item(
  DataElementTag(0x0018, 0x990F),
  "Protocol Planning Information",
  [UnlimitedText],
  vm_1,
)

pub const protocol_design_rationale = Item(
  DataElementTag(0x0018, 0x9910),
  "Protocol Design Rationale",
  [UnlimitedText],
  vm_1,
)

pub const patient_specification_sequence = Item(
  DataElementTag(0x0018, 0x9911),
  "Patient Specification Sequence",
  [Sequence],
  vm_1,
)

pub const model_specification_sequence = Item(
  DataElementTag(0x0018, 0x9912),
  "Model Specification Sequence",
  [Sequence],
  vm_1,
)

pub const parameters_specification_sequence = Item(
  DataElementTag(0x0018, 0x9913),
  "Parameters Specification Sequence",
  [Sequence],
  vm_1,
)

pub const instruction_sequence = Item(
  DataElementTag(0x0018, 0x9914),
  "Instruction Sequence",
  [Sequence],
  vm_1,
)

pub const instruction_index = Item(
  DataElementTag(0x0018, 0x9915),
  "Instruction Index",
  [UnsignedShort],
  vm_1,
)

pub const instruction_text = Item(
  DataElementTag(0x0018, 0x9916),
  "Instruction Text",
  [LongString],
  vm_1,
)

pub const instruction_description = Item(
  DataElementTag(0x0018, 0x9917),
  "Instruction Description",
  [UnlimitedText],
  vm_1,
)

pub const instruction_performed_flag = Item(
  DataElementTag(0x0018, 0x9918),
  "Instruction Performed Flag",
  [CodeString],
  vm_1,
)

pub const instruction_performed_date_time = Item(
  DataElementTag(0x0018, 0x9919),
  "Instruction Performed DateTime",
  [DateTime],
  vm_1,
)

pub const instruction_performance_comment = Item(
  DataElementTag(0x0018, 0x991A),
  "Instruction Performance Comment",
  [UnlimitedText],
  vm_1,
)

pub const patient_positioning_instruction_sequence = Item(
  DataElementTag(0x0018, 0x991B),
  "Patient Positioning Instruction Sequence",
  [Sequence],
  vm_1,
)

pub const positioning_method_code_sequence = Item(
  DataElementTag(0x0018, 0x991C),
  "Positioning Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const positioning_landmark_sequence = Item(
  DataElementTag(0x0018, 0x991D),
  "Positioning Landmark Sequence",
  [Sequence],
  vm_1,
)

pub const target_frame_of_reference_uid = Item(
  DataElementTag(0x0018, 0x991E),
  "Target Frame of Reference UID",
  [UniqueIdentifier],
  vm_1,
)

pub const acquisition_protocol_element_specification_sequence = Item(
  DataElementTag(0x0018, 0x991F),
  "Acquisition Protocol Element Specification Sequence",
  [Sequence],
  vm_1,
)

pub const acquisition_protocol_element_sequence = Item(
  DataElementTag(0x0018, 0x9920),
  "Acquisition Protocol Element Sequence",
  [Sequence],
  vm_1,
)

pub const protocol_element_number = Item(
  DataElementTag(0x0018, 0x9921),
  "Protocol Element Number",
  [UnsignedShort],
  vm_1,
)

pub const protocol_element_name = Item(
  DataElementTag(0x0018, 0x9922),
  "Protocol Element Name",
  [LongString],
  vm_1,
)

pub const protocol_element_characteristics_summary = Item(
  DataElementTag(0x0018, 0x9923),
  "Protocol Element Characteristics Summary",
  [UnlimitedText],
  vm_1,
)

pub const protocol_element_purpose = Item(
  DataElementTag(0x0018, 0x9924),
  "Protocol Element Purpose",
  [UnlimitedText],
  vm_1,
)

pub const acquisition_motion = Item(
  DataElementTag(0x0018, 0x9930),
  "Acquisition Motion",
  [CodeString],
  vm_1,
)

pub const acquisition_start_location_sequence = Item(
  DataElementTag(0x0018, 0x9931),
  "Acquisition Start Location Sequence",
  [Sequence],
  vm_1,
)

pub const acquisition_end_location_sequence = Item(
  DataElementTag(0x0018, 0x9932),
  "Acquisition End Location Sequence",
  [Sequence],
  vm_1,
)

pub const reconstruction_protocol_element_specification_sequence = Item(
  DataElementTag(0x0018, 0x9933),
  "Reconstruction Protocol Element Specification Sequence",
  [Sequence],
  vm_1,
)

pub const reconstruction_protocol_element_sequence = Item(
  DataElementTag(0x0018, 0x9934),
  "Reconstruction Protocol Element Sequence",
  [Sequence],
  vm_1,
)

pub const storage_protocol_element_specification_sequence = Item(
  DataElementTag(0x0018, 0x9935),
  "Storage Protocol Element Specification Sequence",
  [Sequence],
  vm_1,
)

pub const storage_protocol_element_sequence = Item(
  DataElementTag(0x0018, 0x9936),
  "Storage Protocol Element Sequence",
  [Sequence],
  vm_1,
)

pub const requested_series_description = Item(
  DataElementTag(0x0018, 0x9937),
  "Requested Series Description",
  [LongString],
  vm_1,
)

pub const source_acquisition_protocol_element_number = Item(
  DataElementTag(0x0018, 0x9938),
  "Source Acquisition Protocol Element Number",
  [UnsignedShort],
  vm_1_to_n,
)

pub const source_acquisition_beam_number = Item(
  DataElementTag(0x0018, 0x9939),
  "Source Acquisition Beam Number",
  [UnsignedShort],
  vm_1_to_n,
)

pub const source_reconstruction_protocol_element_number = Item(
  DataElementTag(0x0018, 0x993A),
  "Source Reconstruction Protocol Element Number",
  [UnsignedShort],
  vm_1_to_n,
)

pub const reconstruction_start_location_sequence = Item(
  DataElementTag(0x0018, 0x993B),
  "Reconstruction Start Location Sequence",
  [Sequence],
  vm_1,
)

pub const reconstruction_end_location_sequence = Item(
  DataElementTag(0x0018, 0x993C),
  "Reconstruction End Location Sequence",
  [Sequence],
  vm_1,
)

pub const reconstruction_algorithm_sequence = Item(
  DataElementTag(0x0018, 0x993D),
  "Reconstruction Algorithm Sequence",
  [Sequence],
  vm_1,
)

pub const reconstruction_target_center_location_sequence = Item(
  DataElementTag(0x0018, 0x993E),
  "Reconstruction Target Center Location Sequence",
  [Sequence],
  vm_1,
)

pub const image_filter_description = Item(
  DataElementTag(0x0018, 0x9941),
  "Image Filter Description",
  [UnlimitedText],
  vm_1,
)

pub const ctdi_vol_notification_trigger = Item(
  DataElementTag(0x0018, 0x9942),
  "CTDIvol Notification Trigger",
  [FloatingPointDouble],
  vm_1,
)

pub const dlp_notification_trigger = Item(
  DataElementTag(0x0018, 0x9943),
  "DLP Notification Trigger",
  [FloatingPointDouble],
  vm_1,
)

pub const auto_kvp_selection_type = Item(
  DataElementTag(0x0018, 0x9944),
  "Auto KVP Selection Type",
  [CodeString],
  vm_1,
)

pub const auto_kvp_upper_bound = Item(
  DataElementTag(0x0018, 0x9945),
  "Auto KVP Upper Bound",
  [FloatingPointDouble],
  vm_1,
)

pub const auto_kvp_lower_bound = Item(
  DataElementTag(0x0018, 0x9946),
  "Auto KVP Lower Bound",
  [FloatingPointDouble],
  vm_1,
)

pub const protocol_defined_patient_position = Item(
  DataElementTag(0x0018, 0x9947),
  "Protocol Defined Patient Position",
  [CodeString],
  vm_1,
)

pub const contributing_equipment_sequence = Item(
  DataElementTag(0x0018, 0xA001),
  "Contributing Equipment Sequence",
  [Sequence],
  vm_1,
)

pub const contribution_date_time = Item(
  DataElementTag(0x0018, 0xA002),
  "Contribution DateTime",
  [DateTime],
  vm_1,
)

pub const contribution_description = Item(
  DataElementTag(0x0018, 0xA003),
  "Contribution Description",
  [ShortText],
  vm_1,
)

pub const study_instance_uid = Item(
  DataElementTag(0x0020, 0x000D),
  "Study Instance UID",
  [UniqueIdentifier],
  vm_1,
)

pub const series_instance_uid = Item(
  DataElementTag(0x0020, 0x000E),
  "Series Instance UID",
  [UniqueIdentifier],
  vm_1,
)

pub const study_id = Item(
  DataElementTag(0x0020, 0x0010),
  "Study ID",
  [ShortString],
  vm_1,
)

pub const series_number = Item(
  DataElementTag(0x0020, 0x0011),
  "Series Number",
  [IntegerString],
  vm_1,
)

pub const acquisition_number = Item(
  DataElementTag(0x0020, 0x0012),
  "Acquisition Number",
  [IntegerString],
  vm_1,
)

pub const instance_number = Item(
  DataElementTag(0x0020, 0x0013),
  "Instance Number",
  [IntegerString],
  vm_1,
)

pub const isotope_number = Item(
  DataElementTag(0x0020, 0x0014),
  "Isotope Number",
  [IntegerString],
  vm_1,
)

pub const phase_number = Item(
  DataElementTag(0x0020, 0x0015),
  "Phase Number",
  [IntegerString],
  vm_1,
)

pub const interval_number = Item(
  DataElementTag(0x0020, 0x0016),
  "Interval Number",
  [IntegerString],
  vm_1,
)

pub const time_slot_number = Item(
  DataElementTag(0x0020, 0x0017),
  "Time Slot Number",
  [IntegerString],
  vm_1,
)

pub const angle_number = Item(
  DataElementTag(0x0020, 0x0018),
  "Angle Number",
  [IntegerString],
  vm_1,
)

pub const item_number = Item(
  DataElementTag(0x0020, 0x0019),
  "Item Number",
  [IntegerString],
  vm_1,
)

pub const patient_orientation = Item(
  DataElementTag(0x0020, 0x0020),
  "Patient Orientation",
  [CodeString],
  vm_2,
)

pub const overlay_number = Item(
  DataElementTag(0x0020, 0x0022),
  "Overlay Number",
  [IntegerString],
  vm_1,
)

pub const curve_number = Item(
  DataElementTag(0x0020, 0x0024),
  "Curve Number",
  [IntegerString],
  vm_1,
)

pub const lut_number = Item(
  DataElementTag(0x0020, 0x0026),
  "LUT Number",
  [IntegerString],
  vm_1,
)

pub const pyramid_label = Item(
  DataElementTag(0x0020, 0x0027),
  "Pyramid Label",
  [LongString],
  vm_1,
)

pub const image_position = Item(
  DataElementTag(0x0020, 0x0030),
  "Image Position",
  [DecimalString],
  vm_3,
)

pub const image_position_patient = Item(
  DataElementTag(0x0020, 0x0032),
  "Image Position (Patient)",
  [DecimalString],
  vm_3,
)

pub const image_orientation = Item(
  DataElementTag(0x0020, 0x0035),
  "Image Orientation",
  [DecimalString],
  vm_6,
)

pub const image_orientation_patient = Item(
  DataElementTag(0x0020, 0x0037),
  "Image Orientation (Patient)",
  [DecimalString],
  vm_6,
)

pub const location = Item(
  DataElementTag(0x0020, 0x0050),
  "Location",
  [DecimalString],
  vm_1,
)

pub const frame_of_reference_uid = Item(
  DataElementTag(0x0020, 0x0052),
  "Frame of Reference UID",
  [UniqueIdentifier],
  vm_1,
)

pub const laterality = Item(
  DataElementTag(0x0020, 0x0060),
  "Laterality",
  [CodeString],
  vm_1,
)

pub const image_laterality = Item(
  DataElementTag(0x0020, 0x0062),
  "Image Laterality",
  [CodeString],
  vm_1,
)

pub const image_geometry_type = Item(
  DataElementTag(0x0020, 0x0070),
  "Image Geometry Type",
  [LongString],
  vm_1,
)

pub const masking_image = Item(
  DataElementTag(0x0020, 0x0080),
  "Masking Image",
  [CodeString],
  vm_1_to_n,
)

pub const report_number = Item(
  DataElementTag(0x0020, 0x00AA),
  "Report Number",
  [IntegerString],
  vm_1,
)

pub const temporal_position_identifier = Item(
  DataElementTag(0x0020, 0x0100),
  "Temporal Position Identifier",
  [IntegerString],
  vm_1,
)

pub const number_of_temporal_positions = Item(
  DataElementTag(0x0020, 0x0105),
  "Number of Temporal Positions",
  [IntegerString],
  vm_1,
)

pub const temporal_resolution = Item(
  DataElementTag(0x0020, 0x0110),
  "Temporal Resolution",
  [DecimalString],
  vm_1,
)

pub const synchronization_frame_of_reference_uid = Item(
  DataElementTag(0x0020, 0x0200),
  "Synchronization Frame of Reference UID",
  [UniqueIdentifier],
  vm_1,
)

pub const sop_instance_uid_of_concatenation_source = Item(
  DataElementTag(0x0020, 0x0242),
  "SOP Instance UID of Concatenation Source",
  [UniqueIdentifier],
  vm_1,
)

pub const series_in_study = Item(
  DataElementTag(0x0020, 0x1000),
  "Series in Study",
  [IntegerString],
  vm_1,
)

pub const acquisitions_in_series = Item(
  DataElementTag(0x0020, 0x1001),
  "Acquisitions in Series",
  [IntegerString],
  vm_1,
)

pub const images_in_acquisition = Item(
  DataElementTag(0x0020, 0x1002),
  "Images in Acquisition",
  [IntegerString],
  vm_1,
)

pub const images_in_series = Item(
  DataElementTag(0x0020, 0x1003),
  "Images in Series",
  [IntegerString],
  vm_1,
)

pub const acquisitions_in_study = Item(
  DataElementTag(0x0020, 0x1004),
  "Acquisitions in Study",
  [IntegerString],
  vm_1,
)

pub const images_in_study = Item(
  DataElementTag(0x0020, 0x1005),
  "Images in Study",
  [IntegerString],
  vm_1,
)

pub const reference = Item(
  DataElementTag(0x0020, 0x1020),
  "Reference",
  [LongString],
  vm_1_to_n,
)

pub const target_position_reference_indicator = Item(
  DataElementTag(0x0020, 0x103F),
  "Target Position Reference Indicator",
  [LongString],
  vm_1,
)

pub const position_reference_indicator = Item(
  DataElementTag(0x0020, 0x1040),
  "Position Reference Indicator",
  [LongString],
  vm_1,
)

pub const slice_location = Item(
  DataElementTag(0x0020, 0x1041),
  "Slice Location",
  [DecimalString],
  vm_1,
)

pub const other_study_numbers = Item(
  DataElementTag(0x0020, 0x1070),
  "Other Study Numbers",
  [IntegerString],
  vm_1_to_n,
)

pub const number_of_patient_related_studies = Item(
  DataElementTag(0x0020, 0x1200),
  "Number of Patient Related Studies",
  [IntegerString],
  vm_1,
)

pub const number_of_patient_related_series = Item(
  DataElementTag(0x0020, 0x1202),
  "Number of Patient Related Series",
  [IntegerString],
  vm_1,
)

pub const number_of_patient_related_instances = Item(
  DataElementTag(0x0020, 0x1204),
  "Number of Patient Related Instances",
  [IntegerString],
  vm_1,
)

pub const number_of_study_related_series = Item(
  DataElementTag(0x0020, 0x1206),
  "Number of Study Related Series",
  [IntegerString],
  vm_1,
)

pub const number_of_study_related_instances = Item(
  DataElementTag(0x0020, 0x1208),
  "Number of Study Related Instances",
  [IntegerString],
  vm_1,
)

pub const number_of_series_related_instances = Item(
  DataElementTag(0x0020, 0x1209),
  "Number of Series Related Instances",
  [IntegerString],
  vm_1,
)

pub const source_image_ids = Item(
  DataElementTag(0x0020, 0x3100),
  "Source Image IDs",
  [CodeString],
  vm_1_to_n,
)

pub const modifying_device_id = Item(
  DataElementTag(0x0020, 0x3401),
  "Modifying Device ID",
  [CodeString],
  vm_1,
)

pub const modified_image_id = Item(
  DataElementTag(0x0020, 0x3402),
  "Modified Image ID",
  [CodeString],
  vm_1,
)

pub const modified_image_date = Item(
  DataElementTag(0x0020, 0x3403),
  "Modified Image Date",
  [Date],
  vm_1,
)

pub const modifying_device_manufacturer = Item(
  DataElementTag(0x0020, 0x3404),
  "Modifying Device Manufacturer",
  [LongString],
  vm_1,
)

pub const modified_image_time = Item(
  DataElementTag(0x0020, 0x3405),
  "Modified Image Time",
  [Time],
  vm_1,
)

pub const modified_image_description = Item(
  DataElementTag(0x0020, 0x3406),
  "Modified Image Description",
  [LongString],
  vm_1,
)

pub const image_comments = Item(
  DataElementTag(0x0020, 0x4000),
  "Image Comments",
  [LongText],
  vm_1,
)

pub const original_image_identification = Item(
  DataElementTag(0x0020, 0x5000),
  "Original Image Identification",
  [AttributeTag],
  vm_1_to_n,
)

pub const original_image_identification_nomenclature = Item(
  DataElementTag(0x0020, 0x5002),
  "Original Image Identification Nomenclature",
  [LongString],
  vm_1_to_n,
)

pub const stack_id = Item(
  DataElementTag(0x0020, 0x9056),
  "Stack ID",
  [ShortString],
  vm_1,
)

pub const in_stack_position_number = Item(
  DataElementTag(0x0020, 0x9057),
  "In-Stack Position Number",
  [UnsignedLong],
  vm_1,
)

pub const frame_anatomy_sequence = Item(
  DataElementTag(0x0020, 0x9071),
  "Frame Anatomy Sequence",
  [Sequence],
  vm_1,
)

pub const frame_laterality = Item(
  DataElementTag(0x0020, 0x9072),
  "Frame Laterality",
  [CodeString],
  vm_1,
)

pub const frame_content_sequence = Item(
  DataElementTag(0x0020, 0x9111),
  "Frame Content Sequence",
  [Sequence],
  vm_1,
)

pub const plane_position_sequence = Item(
  DataElementTag(0x0020, 0x9113),
  "Plane Position Sequence",
  [Sequence],
  vm_1,
)

pub const plane_orientation_sequence = Item(
  DataElementTag(0x0020, 0x9116),
  "Plane Orientation Sequence",
  [Sequence],
  vm_1,
)

pub const temporal_position_index = Item(
  DataElementTag(0x0020, 0x9128),
  "Temporal Position Index",
  [UnsignedLong],
  vm_1,
)

pub const nominal_cardiac_trigger_delay_time = Item(
  DataElementTag(0x0020, 0x9153),
  "Nominal Cardiac Trigger Delay Time",
  [FloatingPointDouble],
  vm_1,
)

pub const nominal_cardiac_trigger_time_prior_to_r_peak = Item(
  DataElementTag(0x0020, 0x9154),
  "Nominal Cardiac Trigger Time Prior To R-Peak",
  [FloatingPointSingle],
  vm_1,
)

pub const actual_cardiac_trigger_time_prior_to_r_peak = Item(
  DataElementTag(0x0020, 0x9155),
  "Actual Cardiac Trigger Time Prior To R-Peak",
  [FloatingPointSingle],
  vm_1,
)

pub const frame_acquisition_number = Item(
  DataElementTag(0x0020, 0x9156),
  "Frame Acquisition Number",
  [UnsignedShort],
  vm_1,
)

pub const dimension_index_values = Item(
  DataElementTag(0x0020, 0x9157),
  "Dimension Index Values",
  [UnsignedLong],
  vm_1_to_n,
)

pub const frame_comments = Item(
  DataElementTag(0x0020, 0x9158),
  "Frame Comments",
  [LongText],
  vm_1,
)

pub const concatenation_uid = Item(
  DataElementTag(0x0020, 0x9161),
  "Concatenation UID",
  [UniqueIdentifier],
  vm_1,
)

pub const in_concatenation_number = Item(
  DataElementTag(0x0020, 0x9162),
  "In-concatenation Number",
  [UnsignedShort],
  vm_1,
)

pub const in_concatenation_total_number = Item(
  DataElementTag(0x0020, 0x9163),
  "In-concatenation Total Number",
  [UnsignedShort],
  vm_1,
)

pub const dimension_organization_uid = Item(
  DataElementTag(0x0020, 0x9164),
  "Dimension Organization UID",
  [UniqueIdentifier],
  vm_1,
)

pub const dimension_index_pointer = Item(
  DataElementTag(0x0020, 0x9165),
  "Dimension Index Pointer",
  [AttributeTag],
  vm_1,
)

pub const functional_group_pointer = Item(
  DataElementTag(0x0020, 0x9167),
  "Functional Group Pointer",
  [AttributeTag],
  vm_1,
)

pub const unassigned_shared_converted_attributes_sequence = Item(
  DataElementTag(0x0020, 0x9170),
  "Unassigned Shared Converted Attributes Sequence",
  [Sequence],
  vm_1,
)

pub const unassigned_per_frame_converted_attributes_sequence = Item(
  DataElementTag(0x0020, 0x9171),
  "Unassigned Per-Frame Converted Attributes Sequence",
  [Sequence],
  vm_1,
)

pub const conversion_source_attributes_sequence = Item(
  DataElementTag(0x0020, 0x9172),
  "Conversion Source Attributes Sequence",
  [Sequence],
  vm_1,
)

pub const dimension_index_private_creator = Item(
  DataElementTag(0x0020, 0x9213),
  "Dimension Index Private Creator",
  [LongString],
  vm_1,
)

pub const dimension_organization_sequence = Item(
  DataElementTag(0x0020, 0x9221),
  "Dimension Organization Sequence",
  [Sequence],
  vm_1,
)

pub const dimension_index_sequence = Item(
  DataElementTag(0x0020, 0x9222),
  "Dimension Index Sequence",
  [Sequence],
  vm_1,
)

pub const concatenation_frame_offset_number = Item(
  DataElementTag(0x0020, 0x9228),
  "Concatenation Frame Offset Number",
  [UnsignedLong],
  vm_1,
)

pub const functional_group_private_creator = Item(
  DataElementTag(0x0020, 0x9238),
  "Functional Group Private Creator",
  [LongString],
  vm_1,
)

pub const nominal_percentage_of_cardiac_phase = Item(
  DataElementTag(0x0020, 0x9241),
  "Nominal Percentage of Cardiac Phase",
  [FloatingPointSingle],
  vm_1,
)

pub const nominal_percentage_of_respiratory_phase = Item(
  DataElementTag(0x0020, 0x9245),
  "Nominal Percentage of Respiratory Phase",
  [FloatingPointSingle],
  vm_1,
)

pub const starting_respiratory_amplitude = Item(
  DataElementTag(0x0020, 0x9246),
  "Starting Respiratory Amplitude",
  [FloatingPointSingle],
  vm_1,
)

pub const starting_respiratory_phase = Item(
  DataElementTag(0x0020, 0x9247),
  "Starting Respiratory Phase",
  [CodeString],
  vm_1,
)

pub const ending_respiratory_amplitude = Item(
  DataElementTag(0x0020, 0x9248),
  "Ending Respiratory Amplitude",
  [FloatingPointSingle],
  vm_1,
)

pub const ending_respiratory_phase = Item(
  DataElementTag(0x0020, 0x9249),
  "Ending Respiratory Phase",
  [CodeString],
  vm_1,
)

pub const respiratory_trigger_type = Item(
  DataElementTag(0x0020, 0x9250),
  "Respiratory Trigger Type",
  [CodeString],
  vm_1,
)

pub const rr_interval_time_nominal = Item(
  DataElementTag(0x0020, 0x9251),
  "R-R Interval Time Nominal",
  [FloatingPointDouble],
  vm_1,
)

pub const actual_cardiac_trigger_delay_time = Item(
  DataElementTag(0x0020, 0x9252),
  "Actual Cardiac Trigger Delay Time",
  [FloatingPointDouble],
  vm_1,
)

pub const respiratory_synchronization_sequence = Item(
  DataElementTag(0x0020, 0x9253),
  "Respiratory Synchronization Sequence",
  [Sequence],
  vm_1,
)

pub const respiratory_interval_time = Item(
  DataElementTag(0x0020, 0x9254),
  "Respiratory Interval Time",
  [FloatingPointDouble],
  vm_1,
)

pub const nominal_respiratory_trigger_delay_time = Item(
  DataElementTag(0x0020, 0x9255),
  "Nominal Respiratory Trigger Delay Time",
  [FloatingPointDouble],
  vm_1,
)

pub const respiratory_trigger_delay_threshold = Item(
  DataElementTag(0x0020, 0x9256),
  "Respiratory Trigger Delay Threshold",
  [FloatingPointDouble],
  vm_1,
)

pub const actual_respiratory_trigger_delay_time = Item(
  DataElementTag(0x0020, 0x9257),
  "Actual Respiratory Trigger Delay Time",
  [FloatingPointDouble],
  vm_1,
)

pub const image_position_volume = Item(
  DataElementTag(0x0020, 0x9301),
  "Image Position (Volume)",
  [FloatingPointDouble],
  vm_3,
)

pub const image_orientation_volume = Item(
  DataElementTag(0x0020, 0x9302),
  "Image Orientation (Volume)",
  [FloatingPointDouble],
  vm_6,
)

pub const ultrasound_acquisition_geometry = Item(
  DataElementTag(0x0020, 0x9307),
  "Ultrasound Acquisition Geometry",
  [CodeString],
  vm_1,
)

pub const apex_position = Item(
  DataElementTag(0x0020, 0x9308),
  "Apex Position",
  [FloatingPointDouble],
  vm_3,
)

pub const volume_to_transducer_mapping_matrix = Item(
  DataElementTag(0x0020, 0x9309),
  "Volume to Transducer Mapping Matrix",
  [FloatingPointDouble],
  ValueMultiplicity(16, Some(16)),
)

pub const volume_to_table_mapping_matrix = Item(
  DataElementTag(0x0020, 0x930A),
  "Volume to Table Mapping Matrix",
  [FloatingPointDouble],
  ValueMultiplicity(16, Some(16)),
)

pub const volume_to_transducer_relationship = Item(
  DataElementTag(0x0020, 0x930B),
  "Volume to Transducer Relationship",
  [CodeString],
  vm_1,
)

pub const patient_frame_of_reference_source = Item(
  DataElementTag(0x0020, 0x930C),
  "Patient Frame of Reference Source",
  [CodeString],
  vm_1,
)

pub const temporal_position_time_offset = Item(
  DataElementTag(0x0020, 0x930D),
  "Temporal Position Time Offset",
  [FloatingPointDouble],
  vm_1,
)

pub const plane_position_volume_sequence = Item(
  DataElementTag(0x0020, 0x930E),
  "Plane Position (Volume) Sequence",
  [Sequence],
  vm_1,
)

pub const plane_orientation_volume_sequence = Item(
  DataElementTag(0x0020, 0x930F),
  "Plane Orientation (Volume) Sequence",
  [Sequence],
  vm_1,
)

pub const temporal_position_sequence = Item(
  DataElementTag(0x0020, 0x9310),
  "Temporal Position Sequence",
  [Sequence],
  vm_1,
)

pub const dimension_organization_type = Item(
  DataElementTag(0x0020, 0x9311),
  "Dimension Organization Type",
  [CodeString],
  vm_1,
)

pub const volume_frame_of_reference_uid = Item(
  DataElementTag(0x0020, 0x9312),
  "Volume Frame of Reference UID",
  [UniqueIdentifier],
  vm_1,
)

pub const table_frame_of_reference_uid = Item(
  DataElementTag(0x0020, 0x9313),
  "Table Frame of Reference UID",
  [UniqueIdentifier],
  vm_1,
)

pub const dimension_description_label = Item(
  DataElementTag(0x0020, 0x9421),
  "Dimension Description Label",
  [LongString],
  vm_1,
)

pub const patient_orientation_in_frame_sequence = Item(
  DataElementTag(0x0020, 0x9450),
  "Patient Orientation in Frame Sequence",
  [Sequence],
  vm_1,
)

pub const frame_label = Item(
  DataElementTag(0x0020, 0x9453),
  "Frame Label",
  [LongString],
  vm_1,
)

pub const acquisition_index = Item(
  DataElementTag(0x0020, 0x9518),
  "Acquisition Index",
  [UnsignedShort],
  vm_1_to_n,
)

pub const contributing_sop_instances_reference_sequence = Item(
  DataElementTag(0x0020, 0x9529),
  "Contributing SOP Instances Reference Sequence",
  [Sequence],
  vm_1,
)

pub const reconstruction_index = Item(
  DataElementTag(0x0020, 0x9536),
  "Reconstruction Index",
  [UnsignedShort],
  vm_1,
)

pub const light_path_filter_pass_through_wavelength = Item(
  DataElementTag(0x0022, 0x0001),
  "Light Path Filter Pass-Through Wavelength",
  [UnsignedShort],
  vm_1,
)

pub const light_path_filter_pass_band = Item(
  DataElementTag(0x0022, 0x0002),
  "Light Path Filter Pass Band",
  [UnsignedShort],
  vm_2,
)

pub const image_path_filter_pass_through_wavelength = Item(
  DataElementTag(0x0022, 0x0003),
  "Image Path Filter Pass-Through Wavelength",
  [UnsignedShort],
  vm_1,
)

pub const image_path_filter_pass_band = Item(
  DataElementTag(0x0022, 0x0004),
  "Image Path Filter Pass Band",
  [UnsignedShort],
  vm_2,
)

pub const patient_eye_movement_commanded = Item(
  DataElementTag(0x0022, 0x0005),
  "Patient Eye Movement Commanded",
  [CodeString],
  vm_1,
)

pub const patient_eye_movement_command_code_sequence = Item(
  DataElementTag(0x0022, 0x0006),
  "Patient Eye Movement Command Code Sequence",
  [Sequence],
  vm_1,
)

pub const spherical_lens_power = Item(
  DataElementTag(0x0022, 0x0007),
  "Spherical Lens Power",
  [FloatingPointSingle],
  vm_1,
)

pub const cylinder_lens_power = Item(
  DataElementTag(0x0022, 0x0008),
  "Cylinder Lens Power",
  [FloatingPointSingle],
  vm_1,
)

pub const cylinder_axis = Item(
  DataElementTag(0x0022, 0x0009),
  "Cylinder Axis",
  [FloatingPointSingle],
  vm_1,
)

pub const emmetropic_magnification = Item(
  DataElementTag(0x0022, 0x000A),
  "Emmetropic Magnification",
  [FloatingPointSingle],
  vm_1,
)

pub const intra_ocular_pressure = Item(
  DataElementTag(0x0022, 0x000B),
  "Intra Ocular Pressure",
  [FloatingPointSingle],
  vm_1,
)

pub const horizontal_field_of_view = Item(
  DataElementTag(0x0022, 0x000C),
  "Horizontal Field of View",
  [FloatingPointSingle],
  vm_1,
)

pub const pupil_dilated = Item(
  DataElementTag(0x0022, 0x000D),
  "Pupil Dilated",
  [CodeString],
  vm_1,
)

pub const degree_of_dilation = Item(
  DataElementTag(0x0022, 0x000E),
  "Degree of Dilation",
  [FloatingPointSingle],
  vm_1,
)

pub const vertex_distance = Item(
  DataElementTag(0x0022, 0x000F),
  "Vertex Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const stereo_baseline_angle = Item(
  DataElementTag(0x0022, 0x0010),
  "Stereo Baseline Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const stereo_baseline_displacement = Item(
  DataElementTag(0x0022, 0x0011),
  "Stereo Baseline Displacement",
  [FloatingPointSingle],
  vm_1,
)

pub const stereo_horizontal_pixel_offset = Item(
  DataElementTag(0x0022, 0x0012),
  "Stereo Horizontal Pixel Offset",
  [FloatingPointSingle],
  vm_1,
)

pub const stereo_vertical_pixel_offset = Item(
  DataElementTag(0x0022, 0x0013),
  "Stereo Vertical Pixel Offset",
  [FloatingPointSingle],
  vm_1,
)

pub const stereo_rotation = Item(
  DataElementTag(0x0022, 0x0014),
  "Stereo Rotation",
  [FloatingPointSingle],
  vm_1,
)

pub const acquisition_device_type_code_sequence = Item(
  DataElementTag(0x0022, 0x0015),
  "Acquisition Device Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const illumination_type_code_sequence = Item(
  DataElementTag(0x0022, 0x0016),
  "Illumination Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const light_path_filter_type_stack_code_sequence = Item(
  DataElementTag(0x0022, 0x0017),
  "Light Path Filter Type Stack Code Sequence",
  [Sequence],
  vm_1,
)

pub const image_path_filter_type_stack_code_sequence = Item(
  DataElementTag(0x0022, 0x0018),
  "Image Path Filter Type Stack Code Sequence",
  [Sequence],
  vm_1,
)

pub const lenses_code_sequence = Item(
  DataElementTag(0x0022, 0x0019),
  "Lenses Code Sequence",
  [Sequence],
  vm_1,
)

pub const channel_description_code_sequence = Item(
  DataElementTag(0x0022, 0x001A),
  "Channel Description Code Sequence",
  [Sequence],
  vm_1,
)

pub const refractive_state_sequence = Item(
  DataElementTag(0x0022, 0x001B),
  "Refractive State Sequence",
  [Sequence],
  vm_1,
)

pub const mydriatic_agent_code_sequence = Item(
  DataElementTag(0x0022, 0x001C),
  "Mydriatic Agent Code Sequence",
  [Sequence],
  vm_1,
)

pub const relative_image_position_code_sequence = Item(
  DataElementTag(0x0022, 0x001D),
  "Relative Image Position Code Sequence",
  [Sequence],
  vm_1,
)

pub const camera_angle_of_view = Item(
  DataElementTag(0x0022, 0x001E),
  "Camera Angle of View",
  [FloatingPointSingle],
  vm_1,
)

pub const stereo_pairs_sequence = Item(
  DataElementTag(0x0022, 0x0020),
  "Stereo Pairs Sequence",
  [Sequence],
  vm_1,
)

pub const left_image_sequence = Item(
  DataElementTag(0x0022, 0x0021),
  "Left Image Sequence",
  [Sequence],
  vm_1,
)

pub const right_image_sequence = Item(
  DataElementTag(0x0022, 0x0022),
  "Right Image Sequence",
  [Sequence],
  vm_1,
)

pub const stereo_pairs_present = Item(
  DataElementTag(0x0022, 0x0028),
  "Stereo Pairs Present",
  [CodeString],
  vm_1,
)

pub const axial_length_of_the_eye = Item(
  DataElementTag(0x0022, 0x0030),
  "Axial Length of the Eye",
  [FloatingPointSingle],
  vm_1,
)

pub const ophthalmic_frame_location_sequence = Item(
  DataElementTag(0x0022, 0x0031),
  "Ophthalmic Frame Location Sequence",
  [Sequence],
  vm_1,
)

pub const reference_coordinates = Item(
  DataElementTag(0x0022, 0x0032),
  "Reference Coordinates",
  [FloatingPointSingle],
  vm_2_to_n,
)

pub const depth_spatial_resolution = Item(
  DataElementTag(0x0022, 0x0035),
  "Depth Spatial Resolution",
  [FloatingPointSingle],
  vm_1,
)

pub const maximum_depth_distortion = Item(
  DataElementTag(0x0022, 0x0036),
  "Maximum Depth Distortion",
  [FloatingPointSingle],
  vm_1,
)

pub const along_scan_spatial_resolution = Item(
  DataElementTag(0x0022, 0x0037),
  "Along-scan Spatial Resolution",
  [FloatingPointSingle],
  vm_1,
)

pub const maximum_along_scan_distortion = Item(
  DataElementTag(0x0022, 0x0038),
  "Maximum Along-scan Distortion",
  [FloatingPointSingle],
  vm_1,
)

pub const ophthalmic_image_orientation = Item(
  DataElementTag(0x0022, 0x0039),
  "Ophthalmic Image Orientation",
  [CodeString],
  vm_1,
)

pub const depth_of_transverse_image = Item(
  DataElementTag(0x0022, 0x0041),
  "Depth of Transverse Image",
  [FloatingPointSingle],
  vm_1,
)

pub const mydriatic_agent_concentration_units_sequence = Item(
  DataElementTag(0x0022, 0x0042),
  "Mydriatic Agent Concentration Units Sequence",
  [Sequence],
  vm_1,
)

pub const across_scan_spatial_resolution = Item(
  DataElementTag(0x0022, 0x0048),
  "Across-scan Spatial Resolution",
  [FloatingPointSingle],
  vm_1,
)

pub const maximum_across_scan_distortion = Item(
  DataElementTag(0x0022, 0x0049),
  "Maximum Across-scan Distortion",
  [FloatingPointSingle],
  vm_1,
)

pub const mydriatic_agent_concentration = Item(
  DataElementTag(0x0022, 0x004E),
  "Mydriatic Agent Concentration",
  [DecimalString],
  vm_1,
)

pub const illumination_wave_length = Item(
  DataElementTag(0x0022, 0x0055),
  "Illumination Wave Length",
  [FloatingPointSingle],
  vm_1,
)

pub const illumination_power = Item(
  DataElementTag(0x0022, 0x0056),
  "Illumination Power",
  [FloatingPointSingle],
  vm_1,
)

pub const illumination_bandwidth = Item(
  DataElementTag(0x0022, 0x0057),
  "Illumination Bandwidth",
  [FloatingPointSingle],
  vm_1,
)

pub const mydriatic_agent_sequence = Item(
  DataElementTag(0x0022, 0x0058),
  "Mydriatic Agent Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_measurements_right_eye_sequence = Item(
  DataElementTag(0x0022, 0x1007),
  "Ophthalmic Axial Measurements Right Eye Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_measurements_left_eye_sequence = Item(
  DataElementTag(0x0022, 0x1008),
  "Ophthalmic Axial Measurements Left Eye Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_measurements_device_type = Item(
  DataElementTag(0x0022, 0x1009),
  "Ophthalmic Axial Measurements Device Type",
  [CodeString],
  vm_1,
)

pub const ophthalmic_axial_length_measurements_type = Item(
  DataElementTag(0x0022, 0x1010),
  "Ophthalmic Axial Length Measurements Type",
  [CodeString],
  vm_1,
)

pub const ophthalmic_axial_length_sequence = Item(
  DataElementTag(0x0022, 0x1012),
  "Ophthalmic Axial Length Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_length = Item(
  DataElementTag(0x0022, 0x1019),
  "Ophthalmic Axial Length",
  [FloatingPointSingle],
  vm_1,
)

pub const lens_status_code_sequence = Item(
  DataElementTag(0x0022, 0x1024),
  "Lens Status Code Sequence",
  [Sequence],
  vm_1,
)

pub const vitreous_status_code_sequence = Item(
  DataElementTag(0x0022, 0x1025),
  "Vitreous Status Code Sequence",
  [Sequence],
  vm_1,
)

pub const iol_formula_code_sequence = Item(
  DataElementTag(0x0022, 0x1028),
  "IOL Formula Code Sequence",
  [Sequence],
  vm_1,
)

pub const iol_formula_detail = Item(
  DataElementTag(0x0022, 0x1029),
  "IOL Formula Detail",
  [LongString],
  vm_1,
)

pub const keratometer_index = Item(
  DataElementTag(0x0022, 0x1033),
  "Keratometer Index",
  [FloatingPointSingle],
  vm_1,
)

pub const source_of_ophthalmic_axial_length_code_sequence = Item(
  DataElementTag(0x0022, 0x1035),
  "Source of Ophthalmic Axial Length Code Sequence",
  [Sequence],
  vm_1,
)

pub const source_of_corneal_size_data_code_sequence = Item(
  DataElementTag(0x0022, 0x1036),
  "Source of Corneal Size Data Code Sequence",
  [Sequence],
  vm_1,
)

pub const target_refraction = Item(
  DataElementTag(0x0022, 0x1037),
  "Target Refraction",
  [FloatingPointSingle],
  vm_1,
)

pub const refractive_procedure_occurred = Item(
  DataElementTag(0x0022, 0x1039),
  "Refractive Procedure Occurred",
  [CodeString],
  vm_1,
)

pub const refractive_surgery_type_code_sequence = Item(
  DataElementTag(0x0022, 0x1040),
  "Refractive Surgery Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_ultrasound_method_code_sequence = Item(
  DataElementTag(0x0022, 0x1044),
  "Ophthalmic Ultrasound Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const surgically_induced_astigmatism_sequence = Item(
  DataElementTag(0x0022, 0x1045),
  "Surgically Induced Astigmatism Sequence",
  [Sequence],
  vm_1,
)

pub const type_of_optical_correction = Item(
  DataElementTag(0x0022, 0x1046),
  "Type of Optical Correction",
  [CodeString],
  vm_1,
)

pub const toric_iol_power_sequence = Item(
  DataElementTag(0x0022, 0x1047),
  "Toric IOL Power Sequence",
  [Sequence],
  vm_1,
)

pub const predicted_toric_error_sequence = Item(
  DataElementTag(0x0022, 0x1048),
  "Predicted Toric Error Sequence",
  [Sequence],
  vm_1,
)

pub const pre_selected_for_implantation = Item(
  DataElementTag(0x0022, 0x1049),
  "Pre-Selected for Implantation",
  [CodeString],
  vm_1,
)

pub const toric_iol_power_for_exact_emmetropia_sequence = Item(
  DataElementTag(0x0022, 0x104A),
  "Toric IOL Power for Exact Emmetropia Sequence",
  [Sequence],
  vm_1,
)

pub const toric_iol_power_for_exact_target_refraction_sequence = Item(
  DataElementTag(0x0022, 0x104B),
  "Toric IOL Power for Exact Target Refraction Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_length_measurements_sequence = Item(
  DataElementTag(0x0022, 0x1050),
  "Ophthalmic Axial Length Measurements Sequence",
  [Sequence],
  vm_1,
)

pub const iol_power = Item(
  DataElementTag(0x0022, 0x1053),
  "IOL Power",
  [FloatingPointSingle],
  vm_1,
)

pub const predicted_refractive_error = Item(
  DataElementTag(0x0022, 0x1054),
  "Predicted Refractive Error",
  [FloatingPointSingle],
  vm_1,
)

pub const ophthalmic_axial_length_velocity = Item(
  DataElementTag(0x0022, 0x1059),
  "Ophthalmic Axial Length Velocity",
  [FloatingPointSingle],
  vm_1,
)

pub const lens_status_description = Item(
  DataElementTag(0x0022, 0x1065),
  "Lens Status Description",
  [LongString],
  vm_1,
)

pub const vitreous_status_description = Item(
  DataElementTag(0x0022, 0x1066),
  "Vitreous Status Description",
  [LongString],
  vm_1,
)

pub const iol_power_sequence = Item(
  DataElementTag(0x0022, 0x1090),
  "IOL Power Sequence",
  [Sequence],
  vm_1,
)

pub const lens_constant_sequence = Item(
  DataElementTag(0x0022, 0x1092),
  "Lens Constant Sequence",
  [Sequence],
  vm_1,
)

pub const iol_manufacturer = Item(
  DataElementTag(0x0022, 0x1093),
  "IOL Manufacturer",
  [LongString],
  vm_1,
)

pub const lens_constant_description = Item(
  DataElementTag(0x0022, 0x1094),
  "Lens Constant Description",
  [LongString],
  vm_1,
)

pub const implant_name = Item(
  DataElementTag(0x0022, 0x1095),
  "Implant Name",
  [LongString],
  vm_1,
)

pub const keratometry_measurement_type_code_sequence = Item(
  DataElementTag(0x0022, 0x1096),
  "Keratometry Measurement Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const implant_part_number = Item(
  DataElementTag(0x0022, 0x1097),
  "Implant Part Number",
  [LongString],
  vm_1,
)

pub const referenced_ophthalmic_axial_measurements_sequence = Item(
  DataElementTag(0x0022, 0x1100),
  "Referenced Ophthalmic Axial Measurements Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_length_measurements_segment_name_code_sequence = Item(
  DataElementTag(0x0022, 0x1101),
  "Ophthalmic Axial Length Measurements Segment Name Code Sequence",
  [Sequence],
  vm_1,
)

pub const refractive_error_before_refractive_surgery_code_sequence = Item(
  DataElementTag(0x0022, 0x1103),
  "Refractive Error Before Refractive Surgery Code Sequence",
  [Sequence],
  vm_1,
)

pub const iol_power_for_exact_emmetropia = Item(
  DataElementTag(0x0022, 0x1121),
  "IOL Power For Exact Emmetropia",
  [FloatingPointSingle],
  vm_1,
)

pub const iol_power_for_exact_target_refraction = Item(
  DataElementTag(0x0022, 0x1122),
  "IOL Power For Exact Target Refraction",
  [FloatingPointSingle],
  vm_1,
)

pub const anterior_chamber_depth_definition_code_sequence = Item(
  DataElementTag(0x0022, 0x1125),
  "Anterior Chamber Depth Definition Code Sequence",
  [Sequence],
  vm_1,
)

pub const lens_thickness_sequence = Item(
  DataElementTag(0x0022, 0x1127),
  "Lens Thickness Sequence",
  [Sequence],
  vm_1,
)

pub const anterior_chamber_depth_sequence = Item(
  DataElementTag(0x0022, 0x1128),
  "Anterior Chamber Depth Sequence",
  [Sequence],
  vm_1,
)

pub const calculation_comment_sequence = Item(
  DataElementTag(0x0022, 0x112A),
  "Calculation Comment Sequence",
  [Sequence],
  vm_1,
)

pub const calculation_comment_type = Item(
  DataElementTag(0x0022, 0x112B),
  "Calculation Comment Type",
  [CodeString],
  vm_1,
)

pub const calculation_comment = Item(
  DataElementTag(0x0022, 0x112C),
  "Calculation Comment",
  [LongText],
  vm_1,
)

pub const lens_thickness = Item(
  DataElementTag(0x0022, 0x1130),
  "Lens Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const anterior_chamber_depth = Item(
  DataElementTag(0x0022, 0x1131),
  "Anterior Chamber Depth",
  [FloatingPointSingle],
  vm_1,
)

pub const source_of_lens_thickness_data_code_sequence = Item(
  DataElementTag(0x0022, 0x1132),
  "Source of Lens Thickness Data Code Sequence",
  [Sequence],
  vm_1,
)

pub const source_of_anterior_chamber_depth_data_code_sequence = Item(
  DataElementTag(0x0022, 0x1133),
  "Source of Anterior Chamber Depth Data Code Sequence",
  [Sequence],
  vm_1,
)

pub const source_of_refractive_measurements_sequence = Item(
  DataElementTag(0x0022, 0x1134),
  "Source of Refractive Measurements Sequence",
  [Sequence],
  vm_1,
)

pub const source_of_refractive_measurements_code_sequence = Item(
  DataElementTag(0x0022, 0x1135),
  "Source of Refractive Measurements Code Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_length_measurement_modified = Item(
  DataElementTag(0x0022, 0x1140),
  "Ophthalmic Axial Length Measurement Modified",
  [CodeString],
  vm_1,
)

pub const ophthalmic_axial_length_data_source_code_sequence = Item(
  DataElementTag(0x0022, 0x1150),
  "Ophthalmic Axial Length Data Source Code Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_length_acquisition_method_code_sequence = Item(
  DataElementTag(0x0022, 0x1153),
  "Ophthalmic Axial Length Acquisition Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const signal_to_noise_ratio = Item(
  DataElementTag(0x0022, 0x1155),
  "Signal to Noise Ratio",
  [FloatingPointSingle],
  vm_1,
)

pub const ophthalmic_axial_length_data_source_description = Item(
  DataElementTag(0x0022, 0x1159),
  "Ophthalmic Axial Length Data Source Description",
  [LongString],
  vm_1,
)

pub const ophthalmic_axial_length_measurements_total_length_sequence = Item(
  DataElementTag(0x0022, 0x1210),
  "Ophthalmic Axial Length Measurements Total Length Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_length_measurements_segmental_length_sequence = Item(
  DataElementTag(0x0022, 0x1211),
  "Ophthalmic Axial Length Measurements Segmental Length Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_length_measurements_length_summation_sequence = Item(
  DataElementTag(0x0022, 0x1212),
  "Ophthalmic Axial Length Measurements Length Summation Sequence",
  [Sequence],
  vm_1,
)

pub const ultrasound_ophthalmic_axial_length_measurements_sequence = Item(
  DataElementTag(0x0022, 0x1220),
  "Ultrasound Ophthalmic Axial Length Measurements Sequence",
  [Sequence],
  vm_1,
)

pub const optical_ophthalmic_axial_length_measurements_sequence = Item(
  DataElementTag(0x0022, 0x1225),
  "Optical Ophthalmic Axial Length Measurements Sequence",
  [Sequence],
  vm_1,
)

pub const ultrasound_selected_ophthalmic_axial_length_sequence = Item(
  DataElementTag(0x0022, 0x1230),
  "Ultrasound Selected Ophthalmic Axial Length Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_length_selection_method_code_sequence = Item(
  DataElementTag(0x0022, 0x1250),
  "Ophthalmic Axial Length Selection Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const optical_selected_ophthalmic_axial_length_sequence = Item(
  DataElementTag(0x0022, 0x1255),
  "Optical Selected Ophthalmic Axial Length Sequence",
  [Sequence],
  vm_1,
)

pub const selected_segmental_ophthalmic_axial_length_sequence = Item(
  DataElementTag(0x0022, 0x1257),
  "Selected Segmental Ophthalmic Axial Length Sequence",
  [Sequence],
  vm_1,
)

pub const selected_total_ophthalmic_axial_length_sequence = Item(
  DataElementTag(0x0022, 0x1260),
  "Selected Total Ophthalmic Axial Length Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_length_quality_metric_sequence = Item(
  DataElementTag(0x0022, 0x1262),
  "Ophthalmic Axial Length Quality Metric Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_length_quality_metric_type_code_sequence = Item(
  DataElementTag(0x0022, 0x1265),
  "Ophthalmic Axial Length Quality Metric Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_length_quality_metric_type_description = Item(
  DataElementTag(0x0022, 0x1273),
  "Ophthalmic Axial Length Quality Metric Type Description",
  [LongString],
  vm_1,
)

pub const intraocular_lens_calculations_right_eye_sequence = Item(
  DataElementTag(0x0022, 0x1300),
  "Intraocular Lens Calculations Right Eye Sequence",
  [Sequence],
  vm_1,
)

pub const intraocular_lens_calculations_left_eye_sequence = Item(
  DataElementTag(0x0022, 0x1310),
  "Intraocular Lens Calculations Left Eye Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_ophthalmic_axial_length_measurement_qc_image_sequence = Item(
  DataElementTag(0x0022, 0x1330),
  "Referenced Ophthalmic Axial Length Measurement QC Image Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_mapping_device_type = Item(
  DataElementTag(0x0022, 0x1415),
  "Ophthalmic Mapping Device Type",
  [CodeString],
  vm_1,
)

pub const acquisition_method_code_sequence = Item(
  DataElementTag(0x0022, 0x1420),
  "Acquisition Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const acquisition_method_algorithm_sequence = Item(
  DataElementTag(0x0022, 0x1423),
  "Acquisition Method Algorithm Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_thickness_map_type_code_sequence = Item(
  DataElementTag(0x0022, 0x1436),
  "Ophthalmic Thickness Map Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_thickness_mapping_normals_sequence = Item(
  DataElementTag(0x0022, 0x1443),
  "Ophthalmic Thickness Mapping Normals Sequence",
  [Sequence],
  vm_1,
)

pub const retinal_thickness_definition_code_sequence = Item(
  DataElementTag(0x0022, 0x1445),
  "Retinal Thickness Definition Code Sequence",
  [Sequence],
  vm_1,
)

pub const pixel_value_mapping_to_coded_concept_sequence = Item(
  DataElementTag(0x0022, 0x1450),
  "Pixel Value Mapping to Coded Concept Sequence",
  [Sequence],
  vm_1,
)

pub const mapped_pixel_value = Item(
  DataElementTag(0x0022, 0x1452),
  "Mapped Pixel Value",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const pixel_value_mapping_explanation = Item(
  DataElementTag(0x0022, 0x1454),
  "Pixel Value Mapping Explanation",
  [LongString],
  vm_1,
)

pub const ophthalmic_thickness_map_quality_threshold_sequence = Item(
  DataElementTag(0x0022, 0x1458),
  "Ophthalmic Thickness Map Quality Threshold Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_thickness_map_threshold_quality_rating = Item(
  DataElementTag(0x0022, 0x1460),
  "Ophthalmic Thickness Map Threshold Quality Rating",
  [FloatingPointSingle],
  vm_1,
)

pub const anatomic_structure_reference_point = Item(
  DataElementTag(0x0022, 0x1463),
  "Anatomic Structure Reference Point",
  [FloatingPointSingle],
  vm_2,
)

pub const registration_to_localizer_sequence = Item(
  DataElementTag(0x0022, 0x1465),
  "Registration to Localizer Sequence",
  [Sequence],
  vm_1,
)

pub const registered_localizer_units = Item(
  DataElementTag(0x0022, 0x1466),
  "Registered Localizer Units",
  [CodeString],
  vm_1,
)

pub const registered_localizer_top_left_hand_corner = Item(
  DataElementTag(0x0022, 0x1467),
  "Registered Localizer Top Left Hand Corner",
  [FloatingPointSingle],
  vm_2,
)

pub const registered_localizer_bottom_right_hand_corner = Item(
  DataElementTag(0x0022, 0x1468),
  "Registered Localizer Bottom Right Hand Corner",
  [FloatingPointSingle],
  vm_2,
)

pub const ophthalmic_thickness_map_quality_rating_sequence = Item(
  DataElementTag(0x0022, 0x1470),
  "Ophthalmic Thickness Map Quality Rating Sequence",
  [Sequence],
  vm_1,
)

pub const relevant_opt_attributes_sequence = Item(
  DataElementTag(0x0022, 0x1472),
  "Relevant OPT Attributes Sequence",
  [Sequence],
  vm_1,
)

pub const transformation_method_code_sequence = Item(
  DataElementTag(0x0022, 0x1512),
  "Transformation Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const transformation_algorithm_sequence = Item(
  DataElementTag(0x0022, 0x1513),
  "Transformation Algorithm Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_axial_length_method = Item(
  DataElementTag(0x0022, 0x1515),
  "Ophthalmic Axial Length Method",
  [CodeString],
  vm_1,
)

pub const ophthalmic_fov = Item(
  DataElementTag(0x0022, 0x1517),
  "Ophthalmic FOV",
  [FloatingPointSingle],
  vm_1,
)

pub const two_dimensional_to_three_dimensional_map_sequence = Item(
  DataElementTag(0x0022, 0x1518),
  "Two Dimensional to Three Dimensional Map Sequence",
  [Sequence],
  vm_1,
)

pub const wide_field_ophthalmic_photography_quality_rating_sequence = Item(
  DataElementTag(0x0022, 0x1525),
  "Wide Field Ophthalmic Photography Quality Rating Sequence",
  [Sequence],
  vm_1,
)

pub const wide_field_ophthalmic_photography_quality_threshold_sequence = Item(
  DataElementTag(0x0022, 0x1526),
  "Wide Field Ophthalmic Photography Quality Threshold Sequence",
  [Sequence],
  vm_1,
)

pub const wide_field_ophthalmic_photography_threshold_quality_rating = Item(
  DataElementTag(0x0022, 0x1527),
  "Wide Field Ophthalmic Photography Threshold Quality Rating",
  [FloatingPointSingle],
  vm_1,
)

pub const x_coordinates_center_pixel_view_angle = Item(
  DataElementTag(0x0022, 0x1528),
  "X Coordinates Center Pixel View Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const y_coordinates_center_pixel_view_angle = Item(
  DataElementTag(0x0022, 0x1529),
  "Y Coordinates Center Pixel View Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const number_of_map_points = Item(
  DataElementTag(0x0022, 0x1530),
  "Number of Map Points",
  [UnsignedLong],
  vm_1,
)

pub const two_dimensional_to_three_dimensional_map_data = Item(
  DataElementTag(0x0022, 0x1531),
  "Two Dimensional to Three Dimensional Map Data",
  [OtherFloatString],
  vm_1,
)

pub const derivation_algorithm_sequence = Item(
  DataElementTag(0x0022, 0x1612),
  "Derivation Algorithm Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_image_type_code_sequence = Item(
  DataElementTag(0x0022, 0x1615),
  "Ophthalmic Image Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_image_type_description = Item(
  DataElementTag(0x0022, 0x1616),
  "Ophthalmic Image Type Description",
  [LongString],
  vm_1,
)

pub const scan_pattern_type_code_sequence = Item(
  DataElementTag(0x0022, 0x1618),
  "Scan Pattern Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_surface_mesh_identification_sequence = Item(
  DataElementTag(0x0022, 0x1620),
  "Referenced Surface Mesh Identification Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_volumetric_properties_flag = Item(
  DataElementTag(0x0022, 0x1622),
  "Ophthalmic Volumetric Properties Flag",
  [CodeString],
  vm_1,
)

pub const ophthalmic_anatomic_reference_point_x_coordinate = Item(
  DataElementTag(0x0022, 0x1624),
  "Ophthalmic Anatomic Reference Point X-Coordinate",
  [FloatingPointSingle],
  vm_1,
)

pub const ophthalmic_anatomic_reference_point_y_coordinate = Item(
  DataElementTag(0x0022, 0x1626),
  "Ophthalmic Anatomic Reference Point Y-Coordinate",
  [FloatingPointSingle],
  vm_1,
)

pub const ophthalmic_en_face_image_quality_rating_sequence = Item(
  DataElementTag(0x0022, 0x1628),
  "Ophthalmic En Face Image Quality Rating Sequence",
  [Sequence],
  vm_1,
)

pub const quality_threshold = Item(
  DataElementTag(0x0022, 0x1630),
  "Quality Threshold",
  [DecimalString],
  vm_1,
)

pub const oct_bscan_analysis_acquisition_parameters_sequence = Item(
  DataElementTag(0x0022, 0x1640),
  "OCT B-scan Analysis Acquisition Parameters Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_bscans_per_frame = Item(
  DataElementTag(0x0022, 0x1642),
  "Number of B-scans Per Frame",
  [UnsignedLong],
  vm_1,
)

pub const bscan_slab_thickness = Item(
  DataElementTag(0x0022, 0x1643),
  "B-scan Slab Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const distance_between_bscan_slabs = Item(
  DataElementTag(0x0022, 0x1644),
  "Distance Between B-scan Slabs",
  [FloatingPointSingle],
  vm_1,
)

pub const bscan_cycle_time = Item(
  DataElementTag(0x0022, 0x1645),
  "B-scan Cycle Time",
  [FloatingPointSingle],
  vm_1,
)

pub const bscan_cycle_time_vector = Item(
  DataElementTag(0x0022, 0x1646),
  "B-scan Cycle Time Vector",
  [FloatingPointSingle],
  vm_1_to_n,
)

pub const ascan_rate = Item(
  DataElementTag(0x0022, 0x1649),
  "A-scan Rate",
  [FloatingPointSingle],
  vm_1,
)

pub const bscan_rate = Item(
  DataElementTag(0x0022, 0x1650),
  "B-scan Rate",
  [FloatingPointSingle],
  vm_1,
)

pub const surface_mesh_z_pixel_offset = Item(
  DataElementTag(0x0022, 0x1658),
  "Surface Mesh Z-Pixel Offset",
  [UnsignedLong],
  vm_1,
)

pub const visual_field_horizontal_extent = Item(
  DataElementTag(0x0024, 0x0010),
  "Visual Field Horizontal Extent",
  [FloatingPointSingle],
  vm_1,
)

pub const visual_field_vertical_extent = Item(
  DataElementTag(0x0024, 0x0011),
  "Visual Field Vertical Extent",
  [FloatingPointSingle],
  vm_1,
)

pub const visual_field_shape = Item(
  DataElementTag(0x0024, 0x0012),
  "Visual Field Shape",
  [CodeString],
  vm_1,
)

pub const screening_test_mode_code_sequence = Item(
  DataElementTag(0x0024, 0x0016),
  "Screening Test Mode Code Sequence",
  [Sequence],
  vm_1,
)

pub const maximum_stimulus_luminance = Item(
  DataElementTag(0x0024, 0x0018),
  "Maximum Stimulus Luminance",
  [FloatingPointSingle],
  vm_1,
)

pub const background_luminance = Item(
  DataElementTag(0x0024, 0x0020),
  "Background Luminance",
  [FloatingPointSingle],
  vm_1,
)

pub const stimulus_color_code_sequence = Item(
  DataElementTag(0x0024, 0x0021),
  "Stimulus Color Code Sequence",
  [Sequence],
  vm_1,
)

pub const background_illumination_color_code_sequence = Item(
  DataElementTag(0x0024, 0x0024),
  "Background Illumination Color Code Sequence",
  [Sequence],
  vm_1,
)

pub const stimulus_area = Item(
  DataElementTag(0x0024, 0x0025),
  "Stimulus Area",
  [FloatingPointSingle],
  vm_1,
)

pub const stimulus_presentation_time = Item(
  DataElementTag(0x0024, 0x0028),
  "Stimulus Presentation Time",
  [FloatingPointSingle],
  vm_1,
)

pub const fixation_sequence = Item(
  DataElementTag(0x0024, 0x0032),
  "Fixation Sequence",
  [Sequence],
  vm_1,
)

pub const fixation_monitoring_code_sequence = Item(
  DataElementTag(0x0024, 0x0033),
  "Fixation Monitoring Code Sequence",
  [Sequence],
  vm_1,
)

pub const visual_field_catch_trial_sequence = Item(
  DataElementTag(0x0024, 0x0034),
  "Visual Field Catch Trial Sequence",
  [Sequence],
  vm_1,
)

pub const fixation_checked_quantity = Item(
  DataElementTag(0x0024, 0x0035),
  "Fixation Checked Quantity",
  [UnsignedShort],
  vm_1,
)

pub const patient_not_properly_fixated_quantity = Item(
  DataElementTag(0x0024, 0x0036),
  "Patient Not Properly Fixated Quantity",
  [UnsignedShort],
  vm_1,
)

pub const presented_visual_stimuli_data_flag = Item(
  DataElementTag(0x0024, 0x0037),
  "Presented Visual Stimuli Data Flag",
  [CodeString],
  vm_1,
)

pub const number_of_visual_stimuli = Item(
  DataElementTag(0x0024, 0x0038),
  "Number of Visual Stimuli",
  [UnsignedShort],
  vm_1,
)

pub const excessive_fixation_losses_data_flag = Item(
  DataElementTag(0x0024, 0x0039),
  "Excessive Fixation Losses Data Flag",
  [CodeString],
  vm_1,
)

pub const excessive_fixation_losses = Item(
  DataElementTag(0x0024, 0x0040),
  "Excessive Fixation Losses",
  [CodeString],
  vm_1,
)

pub const stimuli_retesting_quantity = Item(
  DataElementTag(0x0024, 0x0042),
  "Stimuli Retesting Quantity",
  [UnsignedShort],
  vm_1,
)

pub const comments_on_patient_performance_of_visual_field = Item(
  DataElementTag(0x0024, 0x0044),
  "Comments on Patient's Performance of Visual Field",
  [LongText],
  vm_1,
)

pub const false_negatives_estimate_flag = Item(
  DataElementTag(0x0024, 0x0045),
  "False Negatives Estimate Flag",
  [CodeString],
  vm_1,
)

pub const false_negatives_estimate = Item(
  DataElementTag(0x0024, 0x0046),
  "False Negatives Estimate",
  [FloatingPointSingle],
  vm_1,
)

pub const negative_catch_trials_quantity = Item(
  DataElementTag(0x0024, 0x0048),
  "Negative Catch Trials Quantity",
  [UnsignedShort],
  vm_1,
)

pub const false_negatives_quantity = Item(
  DataElementTag(0x0024, 0x0050),
  "False Negatives Quantity",
  [UnsignedShort],
  vm_1,
)

pub const excessive_false_negatives_data_flag = Item(
  DataElementTag(0x0024, 0x0051),
  "Excessive False Negatives Data Flag",
  [CodeString],
  vm_1,
)

pub const excessive_false_negatives = Item(
  DataElementTag(0x0024, 0x0052),
  "Excessive False Negatives",
  [CodeString],
  vm_1,
)

pub const false_positives_estimate_flag = Item(
  DataElementTag(0x0024, 0x0053),
  "False Positives Estimate Flag",
  [CodeString],
  vm_1,
)

pub const false_positives_estimate = Item(
  DataElementTag(0x0024, 0x0054),
  "False Positives Estimate",
  [FloatingPointSingle],
  vm_1,
)

pub const catch_trials_data_flag = Item(
  DataElementTag(0x0024, 0x0055),
  "Catch Trials Data Flag",
  [CodeString],
  vm_1,
)

pub const positive_catch_trials_quantity = Item(
  DataElementTag(0x0024, 0x0056),
  "Positive Catch Trials Quantity",
  [UnsignedShort],
  vm_1,
)

pub const test_point_normals_data_flag = Item(
  DataElementTag(0x0024, 0x0057),
  "Test Point Normals Data Flag",
  [CodeString],
  vm_1,
)

pub const test_point_normals_sequence = Item(
  DataElementTag(0x0024, 0x0058),
  "Test Point Normals Sequence",
  [Sequence],
  vm_1,
)

pub const global_deviation_probability_normals_flag = Item(
  DataElementTag(0x0024, 0x0059),
  "Global Deviation Probability Normals Flag",
  [CodeString],
  vm_1,
)

pub const false_positives_quantity = Item(
  DataElementTag(0x0024, 0x0060),
  "False Positives Quantity",
  [UnsignedShort],
  vm_1,
)

pub const excessive_false_positives_data_flag = Item(
  DataElementTag(0x0024, 0x0061),
  "Excessive False Positives Data Flag",
  [CodeString],
  vm_1,
)

pub const excessive_false_positives = Item(
  DataElementTag(0x0024, 0x0062),
  "Excessive False Positives",
  [CodeString],
  vm_1,
)

pub const visual_field_test_normals_flag = Item(
  DataElementTag(0x0024, 0x0063),
  "Visual Field Test Normals Flag",
  [CodeString],
  vm_1,
)

pub const results_normals_sequence = Item(
  DataElementTag(0x0024, 0x0064),
  "Results Normals Sequence",
  [Sequence],
  vm_1,
)

pub const age_corrected_sensitivity_deviation_algorithm_sequence = Item(
  DataElementTag(0x0024, 0x0065),
  "Age Corrected Sensitivity Deviation Algorithm Sequence",
  [Sequence],
  vm_1,
)

pub const global_deviation_from_normal = Item(
  DataElementTag(0x0024, 0x0066),
  "Global Deviation From Normal",
  [FloatingPointSingle],
  vm_1,
)

pub const generalized_defect_sensitivity_deviation_algorithm_sequence = Item(
  DataElementTag(0x0024, 0x0067),
  "Generalized Defect Sensitivity Deviation Algorithm Sequence",
  [Sequence],
  vm_1,
)

pub const localized_deviation_from_normal = Item(
  DataElementTag(0x0024, 0x0068),
  "Localized Deviation From Normal",
  [FloatingPointSingle],
  vm_1,
)

pub const patient_reliability_indicator = Item(
  DataElementTag(0x0024, 0x0069),
  "Patient Reliability Indicator",
  [LongString],
  vm_1,
)

pub const visual_field_mean_sensitivity = Item(
  DataElementTag(0x0024, 0x0070),
  "Visual Field Mean Sensitivity",
  [FloatingPointSingle],
  vm_1,
)

pub const global_deviation_probability = Item(
  DataElementTag(0x0024, 0x0071),
  "Global Deviation Probability",
  [FloatingPointSingle],
  vm_1,
)

pub const local_deviation_probability_normals_flag = Item(
  DataElementTag(0x0024, 0x0072),
  "Local Deviation Probability Normals Flag",
  [CodeString],
  vm_1,
)

pub const localized_deviation_probability = Item(
  DataElementTag(0x0024, 0x0073),
  "Localized Deviation Probability",
  [FloatingPointSingle],
  vm_1,
)

pub const short_term_fluctuation_calculated = Item(
  DataElementTag(0x0024, 0x0074),
  "Short Term Fluctuation Calculated",
  [CodeString],
  vm_1,
)

pub const short_term_fluctuation = Item(
  DataElementTag(0x0024, 0x0075),
  "Short Term Fluctuation",
  [FloatingPointSingle],
  vm_1,
)

pub const short_term_fluctuation_probability_calculated = Item(
  DataElementTag(0x0024, 0x0076),
  "Short Term Fluctuation Probability Calculated",
  [CodeString],
  vm_1,
)

pub const short_term_fluctuation_probability = Item(
  DataElementTag(0x0024, 0x0077),
  "Short Term Fluctuation Probability",
  [FloatingPointSingle],
  vm_1,
)

pub const corrected_localized_deviation_from_normal_calculated = Item(
  DataElementTag(0x0024, 0x0078),
  "Corrected Localized Deviation From Normal Calculated",
  [CodeString],
  vm_1,
)

pub const corrected_localized_deviation_from_normal = Item(
  DataElementTag(0x0024, 0x0079),
  "Corrected Localized Deviation From Normal",
  [FloatingPointSingle],
  vm_1,
)

pub const corrected_localized_deviation_from_normal_probability_calculated = Item(
  DataElementTag(0x0024, 0x0080),
  "Corrected Localized Deviation From Normal Probability Calculated",
  [CodeString],
  vm_1,
)

pub const corrected_localized_deviation_from_normal_probability = Item(
  DataElementTag(0x0024, 0x0081),
  "Corrected Localized Deviation From Normal Probability",
  [FloatingPointSingle],
  vm_1,
)

pub const global_deviation_probability_sequence = Item(
  DataElementTag(0x0024, 0x0083),
  "Global Deviation Probability Sequence",
  [Sequence],
  vm_1,
)

pub const localized_deviation_probability_sequence = Item(
  DataElementTag(0x0024, 0x0085),
  "Localized Deviation Probability Sequence",
  [Sequence],
  vm_1,
)

pub const foveal_sensitivity_measured = Item(
  DataElementTag(0x0024, 0x0086),
  "Foveal Sensitivity Measured",
  [CodeString],
  vm_1,
)

pub const foveal_sensitivity = Item(
  DataElementTag(0x0024, 0x0087),
  "Foveal Sensitivity",
  [FloatingPointSingle],
  vm_1,
)

pub const visual_field_test_duration = Item(
  DataElementTag(0x0024, 0x0088),
  "Visual Field Test Duration",
  [FloatingPointSingle],
  vm_1,
)

pub const visual_field_test_point_sequence = Item(
  DataElementTag(0x0024, 0x0089),
  "Visual Field Test Point Sequence",
  [Sequence],
  vm_1,
)

pub const visual_field_test_point_x_coordinate = Item(
  DataElementTag(0x0024, 0x0090),
  "Visual Field Test Point X-Coordinate",
  [FloatingPointSingle],
  vm_1,
)

pub const visual_field_test_point_y_coordinate = Item(
  DataElementTag(0x0024, 0x0091),
  "Visual Field Test Point Y-Coordinate",
  [FloatingPointSingle],
  vm_1,
)

pub const age_corrected_sensitivity_deviation_value = Item(
  DataElementTag(0x0024, 0x0092),
  "Age Corrected Sensitivity Deviation Value",
  [FloatingPointSingle],
  vm_1,
)

pub const stimulus_results = Item(
  DataElementTag(0x0024, 0x0093),
  "Stimulus Results",
  [CodeString],
  vm_1,
)

pub const sensitivity_value = Item(
  DataElementTag(0x0024, 0x0094),
  "Sensitivity Value",
  [FloatingPointSingle],
  vm_1,
)

pub const retest_stimulus_seen = Item(
  DataElementTag(0x0024, 0x0095),
  "Retest Stimulus Seen",
  [CodeString],
  vm_1,
)

pub const retest_sensitivity_value = Item(
  DataElementTag(0x0024, 0x0096),
  "Retest Sensitivity Value",
  [FloatingPointSingle],
  vm_1,
)

pub const visual_field_test_point_normals_sequence = Item(
  DataElementTag(0x0024, 0x0097),
  "Visual Field Test Point Normals Sequence",
  [Sequence],
  vm_1,
)

pub const quantified_defect = Item(
  DataElementTag(0x0024, 0x0098),
  "Quantified Defect",
  [FloatingPointSingle],
  vm_1,
)

pub const age_corrected_sensitivity_deviation_probability_value = Item(
  DataElementTag(0x0024, 0x0100),
  "Age Corrected Sensitivity Deviation Probability Value",
  [FloatingPointSingle],
  vm_1,
)

pub const generalized_defect_corrected_sensitivity_deviation_flag = Item(
  DataElementTag(0x0024, 0x0102),
  "Generalized Defect Corrected Sensitivity Deviation Flag",
  [CodeString],
  vm_1,
)

pub const generalized_defect_corrected_sensitivity_deviation_value = Item(
  DataElementTag(0x0024, 0x0103),
  "Generalized Defect Corrected Sensitivity Deviation Value",
  [FloatingPointSingle],
  vm_1,
)

pub const generalized_defect_corrected_sensitivity_deviation_probability_value = Item(
  DataElementTag(0x0024, 0x0104),
  "Generalized Defect Corrected Sensitivity Deviation Probability Value",
  [FloatingPointSingle],
  vm_1,
)

pub const minimum_sensitivity_value = Item(
  DataElementTag(0x0024, 0x0105),
  "Minimum Sensitivity Value",
  [FloatingPointSingle],
  vm_1,
)

pub const blind_spot_localized = Item(
  DataElementTag(0x0024, 0x0106),
  "Blind Spot Localized",
  [CodeString],
  vm_1,
)

pub const blind_spot_x_coordinate = Item(
  DataElementTag(0x0024, 0x0107),
  "Blind Spot X-Coordinate",
  [FloatingPointSingle],
  vm_1,
)

pub const blind_spot_y_coordinate = Item(
  DataElementTag(0x0024, 0x0108),
  "Blind Spot Y-Coordinate",
  [FloatingPointSingle],
  vm_1,
)

pub const visual_acuity_measurement_sequence = Item(
  DataElementTag(0x0024, 0x0110),
  "Visual Acuity Measurement Sequence",
  [Sequence],
  vm_1,
)

pub const refractive_parameters_used_on_patient_sequence = Item(
  DataElementTag(0x0024, 0x0112),
  "Refractive Parameters Used on Patient Sequence",
  [Sequence],
  vm_1,
)

pub const measurement_laterality = Item(
  DataElementTag(0x0024, 0x0113),
  "Measurement Laterality",
  [CodeString],
  vm_1,
)

pub const ophthalmic_patient_clinical_information_left_eye_sequence = Item(
  DataElementTag(0x0024, 0x0114),
  "Ophthalmic Patient Clinical Information Left Eye Sequence",
  [Sequence],
  vm_1,
)

pub const ophthalmic_patient_clinical_information_right_eye_sequence = Item(
  DataElementTag(0x0024, 0x0115),
  "Ophthalmic Patient Clinical Information Right Eye Sequence",
  [Sequence],
  vm_1,
)

pub const foveal_point_normative_data_flag = Item(
  DataElementTag(0x0024, 0x0117),
  "Foveal Point Normative Data Flag",
  [CodeString],
  vm_1,
)

pub const foveal_point_probability_value = Item(
  DataElementTag(0x0024, 0x0118),
  "Foveal Point Probability Value",
  [FloatingPointSingle],
  vm_1,
)

pub const screening_baseline_measured = Item(
  DataElementTag(0x0024, 0x0120),
  "Screening Baseline Measured",
  [CodeString],
  vm_1,
)

pub const screening_baseline_measured_sequence = Item(
  DataElementTag(0x0024, 0x0122),
  "Screening Baseline Measured Sequence",
  [Sequence],
  vm_1,
)

pub const screening_baseline_type = Item(
  DataElementTag(0x0024, 0x0124),
  "Screening Baseline Type",
  [CodeString],
  vm_1,
)

pub const screening_baseline_value = Item(
  DataElementTag(0x0024, 0x0126),
  "Screening Baseline Value",
  [FloatingPointSingle],
  vm_1,
)

pub const algorithm_source = Item(
  DataElementTag(0x0024, 0x0202),
  "Algorithm Source",
  [LongString],
  vm_1,
)

pub const data_set_name = Item(
  DataElementTag(0x0024, 0x0306),
  "Data Set Name",
  [LongString],
  vm_1,
)

pub const data_set_version = Item(
  DataElementTag(0x0024, 0x0307),
  "Data Set Version",
  [LongString],
  vm_1,
)

pub const data_set_source = Item(
  DataElementTag(0x0024, 0x0308),
  "Data Set Source",
  [LongString],
  vm_1,
)

pub const data_set_description = Item(
  DataElementTag(0x0024, 0x0309),
  "Data Set Description",
  [LongString],
  vm_1,
)

pub const visual_field_test_reliability_global_index_sequence = Item(
  DataElementTag(0x0024, 0x0317),
  "Visual Field Test Reliability Global Index Sequence",
  [Sequence],
  vm_1,
)

pub const visual_field_global_results_index_sequence = Item(
  DataElementTag(0x0024, 0x0320),
  "Visual Field Global Results Index Sequence",
  [Sequence],
  vm_1,
)

pub const data_observation_sequence = Item(
  DataElementTag(0x0024, 0x0325),
  "Data Observation Sequence",
  [Sequence],
  vm_1,
)

pub const index_normals_flag = Item(
  DataElementTag(0x0024, 0x0338),
  "Index Normals Flag",
  [CodeString],
  vm_1,
)

pub const index_probability = Item(
  DataElementTag(0x0024, 0x0341),
  "Index Probability",
  [FloatingPointSingle],
  vm_1,
)

pub const index_probability_sequence = Item(
  DataElementTag(0x0024, 0x0344),
  "Index Probability Sequence",
  [Sequence],
  vm_1,
)

pub const samples_per_pixel = Item(
  DataElementTag(0x0028, 0x0002),
  "Samples per Pixel",
  [UnsignedShort],
  vm_1,
)

pub const samples_per_pixel_used = Item(
  DataElementTag(0x0028, 0x0003),
  "Samples per Pixel Used",
  [UnsignedShort],
  vm_1,
)

pub const photometric_interpretation = Item(
  DataElementTag(0x0028, 0x0004),
  "Photometric Interpretation",
  [CodeString],
  vm_1,
)

pub const image_dimensions = Item(
  DataElementTag(0x0028, 0x0005),
  "Image Dimensions",
  [UnsignedShort],
  vm_1,
)

pub const planar_configuration = Item(
  DataElementTag(0x0028, 0x0006),
  "Planar Configuration",
  [UnsignedShort],
  vm_1,
)

pub const number_of_frames = Item(
  DataElementTag(0x0028, 0x0008),
  "Number of Frames",
  [IntegerString],
  vm_1,
)

pub const frame_increment_pointer = Item(
  DataElementTag(0x0028, 0x0009),
  "Frame Increment Pointer",
  [AttributeTag],
  vm_1_to_n,
)

pub const frame_dimension_pointer = Item(
  DataElementTag(0x0028, 0x000A),
  "Frame Dimension Pointer",
  [AttributeTag],
  vm_1_to_n,
)

pub const rows = Item(
  DataElementTag(0x0028, 0x0010),
  "Rows",
  [UnsignedShort],
  vm_1,
)

pub const columns = Item(
  DataElementTag(0x0028, 0x0011),
  "Columns",
  [UnsignedShort],
  vm_1,
)

pub const planes = Item(
  DataElementTag(0x0028, 0x0012),
  "Planes",
  [UnsignedShort],
  vm_1,
)

pub const ultrasound_color_data_present = Item(
  DataElementTag(0x0028, 0x0014),
  "Ultrasound Color Data Present",
  [UnsignedShort],
  vm_1,
)

pub const pixel_spacing = Item(
  DataElementTag(0x0028, 0x0030),
  "Pixel Spacing",
  [DecimalString],
  vm_2,
)

pub const zoom_factor = Item(
  DataElementTag(0x0028, 0x0031),
  "Zoom Factor",
  [DecimalString],
  vm_2,
)

pub const zoom_center = Item(
  DataElementTag(0x0028, 0x0032),
  "Zoom Center",
  [DecimalString],
  vm_2,
)

pub const pixel_aspect_ratio = Item(
  DataElementTag(0x0028, 0x0034),
  "Pixel Aspect Ratio",
  [IntegerString],
  vm_2,
)

pub const image_format = Item(
  DataElementTag(0x0028, 0x0040),
  "Image Format",
  [CodeString],
  vm_1,
)

pub const manipulated_image = Item(
  DataElementTag(0x0028, 0x0050),
  "Manipulated Image",
  [LongString],
  vm_1_to_n,
)

pub const corrected_image = Item(
  DataElementTag(0x0028, 0x0051),
  "Corrected Image",
  [CodeString],
  vm_1_to_n,
)

pub const compression_recognition_code = Item(
  DataElementTag(0x0028, 0x005F),
  "Compression Recognition Code",
  [LongString],
  vm_1,
)

pub const compression_code = Item(
  DataElementTag(0x0028, 0x0060),
  "Compression Code",
  [CodeString],
  vm_1,
)

pub const compression_originator = Item(
  DataElementTag(0x0028, 0x0061),
  "Compression Originator",
  [ShortString],
  vm_1,
)

pub const compression_label = Item(
  DataElementTag(0x0028, 0x0062),
  "Compression Label",
  [LongString],
  vm_1,
)

pub const compression_description = Item(
  DataElementTag(0x0028, 0x0063),
  "Compression Description",
  [ShortString],
  vm_1,
)

pub const compression_sequence = Item(
  DataElementTag(0x0028, 0x0065),
  "Compression Sequence",
  [CodeString],
  vm_1_to_n,
)

pub const compression_step_pointers = Item(
  DataElementTag(0x0028, 0x0066),
  "Compression Step Pointers",
  [AttributeTag],
  vm_1_to_n,
)

pub const repeat_interval = Item(
  DataElementTag(0x0028, 0x0068),
  "Repeat Interval",
  [UnsignedShort],
  vm_1,
)

pub const bits_grouped = Item(
  DataElementTag(0x0028, 0x0069),
  "Bits Grouped",
  [UnsignedShort],
  vm_1,
)

pub const perimeter_table = Item(
  DataElementTag(0x0028, 0x0070),
  "Perimeter Table",
  [UnsignedShort],
  vm_1_to_n,
)

pub const perimeter_value = Item(
  DataElementTag(0x0028, 0x0071),
  "Perimeter Value",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const predictor_rows = Item(
  DataElementTag(0x0028, 0x0080),
  "Predictor Rows",
  [UnsignedShort],
  vm_1,
)

pub const predictor_columns = Item(
  DataElementTag(0x0028, 0x0081),
  "Predictor Columns",
  [UnsignedShort],
  vm_1,
)

pub const predictor_constants = Item(
  DataElementTag(0x0028, 0x0082),
  "Predictor Constants",
  [UnsignedShort],
  vm_1_to_n,
)

pub const blocked_pixels = Item(
  DataElementTag(0x0028, 0x0090),
  "Blocked Pixels",
  [CodeString],
  vm_1,
)

pub const block_rows = Item(
  DataElementTag(0x0028, 0x0091),
  "Block Rows",
  [UnsignedShort],
  vm_1,
)

pub const block_columns = Item(
  DataElementTag(0x0028, 0x0092),
  "Block Columns",
  [UnsignedShort],
  vm_1,
)

pub const row_overlap = Item(
  DataElementTag(0x0028, 0x0093),
  "Row Overlap",
  [UnsignedShort],
  vm_1,
)

pub const column_overlap = Item(
  DataElementTag(0x0028, 0x0094),
  "Column Overlap",
  [UnsignedShort],
  vm_1,
)

pub const bits_allocated = Item(
  DataElementTag(0x0028, 0x0100),
  "Bits Allocated",
  [UnsignedShort],
  vm_1,
)

pub const bits_stored = Item(
  DataElementTag(0x0028, 0x0101),
  "Bits Stored",
  [UnsignedShort],
  vm_1,
)

pub const high_bit = Item(
  DataElementTag(0x0028, 0x0102),
  "High Bit",
  [UnsignedShort],
  vm_1,
)

pub const pixel_representation = Item(
  DataElementTag(0x0028, 0x0103),
  "Pixel Representation",
  [UnsignedShort],
  vm_1,
)

pub const smallest_valid_pixel_value = Item(
  DataElementTag(0x0028, 0x0104),
  "Smallest Valid Pixel Value",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const largest_valid_pixel_value = Item(
  DataElementTag(0x0028, 0x0105),
  "Largest Valid Pixel Value",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const smallest_image_pixel_value = Item(
  DataElementTag(0x0028, 0x0106),
  "Smallest Image Pixel Value",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const largest_image_pixel_value = Item(
  DataElementTag(0x0028, 0x0107),
  "Largest Image Pixel Value",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const smallest_pixel_value_in_series = Item(
  DataElementTag(0x0028, 0x0108),
  "Smallest Pixel Value in Series",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const largest_pixel_value_in_series = Item(
  DataElementTag(0x0028, 0x0109),
  "Largest Pixel Value in Series",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const smallest_image_pixel_value_in_plane = Item(
  DataElementTag(0x0028, 0x0110),
  "Smallest Image Pixel Value in Plane",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const largest_image_pixel_value_in_plane = Item(
  DataElementTag(0x0028, 0x0111),
  "Largest Image Pixel Value in Plane",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const pixel_padding_value = Item(
  DataElementTag(0x0028, 0x0120),
  "Pixel Padding Value",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const pixel_padding_range_limit = Item(
  DataElementTag(0x0028, 0x0121),
  "Pixel Padding Range Limit",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const float_pixel_padding_value = Item(
  DataElementTag(0x0028, 0x0122),
  "Float Pixel Padding Value",
  [FloatingPointSingle],
  vm_1,
)

pub const double_float_pixel_padding_value = Item(
  DataElementTag(0x0028, 0x0123),
  "Double Float Pixel Padding Value",
  [FloatingPointDouble],
  vm_1,
)

pub const float_pixel_padding_range_limit = Item(
  DataElementTag(0x0028, 0x0124),
  "Float Pixel Padding Range Limit",
  [FloatingPointSingle],
  vm_1,
)

pub const double_float_pixel_padding_range_limit = Item(
  DataElementTag(0x0028, 0x0125),
  "Double Float Pixel Padding Range Limit",
  [FloatingPointDouble],
  vm_1,
)

pub const image_location = Item(
  DataElementTag(0x0028, 0x0200),
  "Image Location",
  [UnsignedShort],
  vm_1,
)

pub const quality_control_image = Item(
  DataElementTag(0x0028, 0x0300),
  "Quality Control Image",
  [CodeString],
  vm_1,
)

pub const burned_in_annotation = Item(
  DataElementTag(0x0028, 0x0301),
  "Burned In Annotation",
  [CodeString],
  vm_1,
)

pub const recognizable_visual_features = Item(
  DataElementTag(0x0028, 0x0302),
  "Recognizable Visual Features",
  [CodeString],
  vm_1,
)

pub const longitudinal_temporal_information_modified = Item(
  DataElementTag(0x0028, 0x0303),
  "Longitudinal Temporal Information Modified",
  [CodeString],
  vm_1,
)

pub const referenced_color_palette_instance_uid = Item(
  DataElementTag(0x0028, 0x0304),
  "Referenced Color Palette Instance UID",
  [UniqueIdentifier],
  vm_1,
)

pub const transform_label = Item(
  DataElementTag(0x0028, 0x0400),
  "Transform Label",
  [LongString],
  vm_1,
)

pub const transform_version_number = Item(
  DataElementTag(0x0028, 0x0401),
  "Transform Version Number",
  [LongString],
  vm_1,
)

pub const number_of_transform_steps = Item(
  DataElementTag(0x0028, 0x0402),
  "Number of Transform Steps",
  [UnsignedShort],
  vm_1,
)

pub const sequence_of_compressed_data = Item(
  DataElementTag(0x0028, 0x0403),
  "Sequence of Compressed Data",
  [LongString],
  vm_1_to_n,
)

pub const details_of_coefficients = Item(
  DataElementTag(0x0028, 0x0404),
  "Details of Coefficients",
  [AttributeTag],
  vm_1_to_n,
)

pub const rows_for_nth_order_coefficients = Item(
  DataElementTag(0x0028, 0x0400),
  "Rows For Nth Order Coefficients",
  [UnsignedShort],
  vm_1,
)

pub const columns_for_nth_order_coefficients = Item(
  DataElementTag(0x0028, 0x0401),
  "Columns For Nth Order Coefficients",
  [UnsignedShort],
  vm_1,
)

pub const coefficient_coding = Item(
  DataElementTag(0x0028, 0x0402),
  "Coefficient Coding",
  [LongString],
  vm_1_to_n,
)

pub const coefficient_coding_pointers = Item(
  DataElementTag(0x0028, 0x0403),
  "Coefficient Coding Pointers",
  [AttributeTag],
  vm_1_to_n,
)

pub const dct_label = Item(
  DataElementTag(0x0028, 0x0700),
  "DCT Label",
  [LongString],
  vm_1,
)

pub const data_block_description = Item(
  DataElementTag(0x0028, 0x0701),
  "Data Block Description",
  [CodeString],
  vm_1_to_n,
)

pub const data_block = Item(
  DataElementTag(0x0028, 0x0702),
  "Data Block",
  [AttributeTag],
  vm_1_to_n,
)

pub const normalization_factor_format = Item(
  DataElementTag(0x0028, 0x0710),
  "Normalization Factor Format",
  [UnsignedShort],
  vm_1,
)

pub const zonal_map_number_format = Item(
  DataElementTag(0x0028, 0x0720),
  "Zonal Map Number Format",
  [UnsignedShort],
  vm_1,
)

pub const zonal_map_location = Item(
  DataElementTag(0x0028, 0x0721),
  "Zonal Map Location",
  [AttributeTag],
  vm_1_to_n,
)

pub const zonal_map_format = Item(
  DataElementTag(0x0028, 0x0722),
  "Zonal Map Format",
  [UnsignedShort],
  vm_1,
)

pub const adaptive_map_format = Item(
  DataElementTag(0x0028, 0x0730),
  "Adaptive Map Format",
  [UnsignedShort],
  vm_1,
)

pub const code_number_format = Item(
  DataElementTag(0x0028, 0x0740),
  "Code Number Format",
  [UnsignedShort],
  vm_1,
)

pub const code_label = Item(
  DataElementTag(0x0028, 0x0800),
  "Code Label",
  [CodeString],
  vm_1_to_n,
)

pub const number_of_tables = Item(
  DataElementTag(0x0028, 0x0802),
  "Number of Tables",
  [UnsignedShort],
  vm_1,
)

pub const code_table_location = Item(
  DataElementTag(0x0028, 0x0803),
  "Code Table Location",
  [AttributeTag],
  vm_1_to_n,
)

pub const bits_for_code_word = Item(
  DataElementTag(0x0028, 0x0804),
  "Bits For Code Word",
  [UnsignedShort],
  vm_1,
)

pub const image_data_location = Item(
  DataElementTag(0x0028, 0x0808),
  "Image Data Location",
  [AttributeTag],
  vm_1_to_n,
)

pub const pixel_spacing_calibration_type = Item(
  DataElementTag(0x0028, 0x0A02),
  "Pixel Spacing Calibration Type",
  [CodeString],
  vm_1,
)

pub const pixel_spacing_calibration_description = Item(
  DataElementTag(0x0028, 0x0A04),
  "Pixel Spacing Calibration Description",
  [LongString],
  vm_1,
)

pub const pixel_intensity_relationship = Item(
  DataElementTag(0x0028, 0x1040),
  "Pixel Intensity Relationship",
  [CodeString],
  vm_1,
)

pub const pixel_intensity_relationship_sign = Item(
  DataElementTag(0x0028, 0x1041),
  "Pixel Intensity Relationship Sign",
  [SignedShort],
  vm_1,
)

pub const window_center = Item(
  DataElementTag(0x0028, 0x1050),
  "Window Center",
  [DecimalString],
  vm_1_to_n,
)

pub const window_width = Item(
  DataElementTag(0x0028, 0x1051),
  "Window Width",
  [DecimalString],
  vm_1_to_n,
)

pub const rescale_intercept = Item(
  DataElementTag(0x0028, 0x1052),
  "Rescale Intercept",
  [DecimalString],
  vm_1,
)

pub const rescale_slope = Item(
  DataElementTag(0x0028, 0x1053),
  "Rescale Slope",
  [DecimalString],
  vm_1,
)

pub const rescale_type = Item(
  DataElementTag(0x0028, 0x1054),
  "Rescale Type",
  [LongString],
  vm_1,
)

pub const window_center_width_explanation = Item(
  DataElementTag(0x0028, 0x1055),
  "Window Center & Width Explanation",
  [LongString],
  vm_1_to_n,
)

pub const voilut_function = Item(
  DataElementTag(0x0028, 0x1056),
  "VOI LUT Function",
  [CodeString],
  vm_1,
)

pub const gray_scale = Item(
  DataElementTag(0x0028, 0x1080),
  "Gray Scale",
  [CodeString],
  vm_1,
)

pub const recommended_viewing_mode = Item(
  DataElementTag(0x0028, 0x1090),
  "Recommended Viewing Mode",
  [CodeString],
  vm_1,
)

pub const gray_lookup_table_descriptor = Item(
  DataElementTag(0x0028, 0x1100),
  "Gray Lookup Table Descriptor",
  [UnsignedShort, SignedShort],
  vm_3,
)

pub const red_palette_color_lookup_table_descriptor = Item(
  DataElementTag(0x0028, 0x1101),
  "Red Palette Color Lookup Table Descriptor",
  [UnsignedShort, SignedShort],
  vm_3,
)

pub const green_palette_color_lookup_table_descriptor = Item(
  DataElementTag(0x0028, 0x1102),
  "Green Palette Color Lookup Table Descriptor",
  [UnsignedShort, SignedShort],
  vm_3,
)

pub const blue_palette_color_lookup_table_descriptor = Item(
  DataElementTag(0x0028, 0x1103),
  "Blue Palette Color Lookup Table Descriptor",
  [UnsignedShort, SignedShort],
  vm_3,
)

pub const alpha_palette_color_lookup_table_descriptor = Item(
  DataElementTag(0x0028, 0x1104),
  "Alpha Palette Color Lookup Table Descriptor",
  [UnsignedShort],
  vm_3,
)

pub const large_red_palette_color_lookup_table_descriptor = Item(
  DataElementTag(0x0028, 0x1111),
  "Large Red Palette Color Lookup Table Descriptor",
  [UnsignedShort, SignedShort],
  vm_4,
)

pub const large_green_palette_color_lookup_table_descriptor = Item(
  DataElementTag(0x0028, 0x1112),
  "Large Green Palette Color Lookup Table Descriptor",
  [UnsignedShort, SignedShort],
  vm_4,
)

pub const large_blue_palette_color_lookup_table_descriptor = Item(
  DataElementTag(0x0028, 0x1113),
  "Large Blue Palette Color Lookup Table Descriptor",
  [UnsignedShort, SignedShort],
  vm_4,
)

pub const palette_color_lookup_table_uid = Item(
  DataElementTag(0x0028, 0x1199),
  "Palette Color Lookup Table UID",
  [UniqueIdentifier],
  vm_1,
)

pub const gray_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1200),
  "Gray Lookup Table Data",
  [
    value_representation.UnsignedShort,
    value_representation.SignedShort,
    value_representation.OtherWordString,
  ],
  vm_1_to_n,
)

pub const red_palette_color_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1201),
  "Red Palette Color Lookup Table Data",
  [OtherWordString],
  vm_1,
)

pub const green_palette_color_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1202),
  "Green Palette Color Lookup Table Data",
  [OtherWordString],
  vm_1,
)

pub const blue_palette_color_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1203),
  "Blue Palette Color Lookup Table Data",
  [OtherWordString],
  vm_1,
)

pub const alpha_palette_color_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1204),
  "Alpha Palette Color Lookup Table Data",
  [OtherWordString],
  vm_1,
)

pub const large_red_palette_color_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1211),
  "Large Red Palette Color Lookup Table Data",
  [OtherWordString],
  vm_1,
)

pub const large_green_palette_color_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1212),
  "Large Green Palette Color Lookup Table Data",
  [OtherWordString],
  vm_1,
)

pub const large_blue_palette_color_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1213),
  "Large Blue Palette Color Lookup Table Data",
  [OtherWordString],
  vm_1,
)

pub const large_palette_color_lookup_table_uid = Item(
  DataElementTag(0x0028, 0x1214),
  "Large Palette Color Lookup Table UID",
  [UniqueIdentifier],
  vm_1,
)

pub const segmented_red_palette_color_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1221),
  "Segmented Red Palette Color Lookup Table Data",
  [OtherWordString],
  vm_1,
)

pub const segmented_green_palette_color_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1222),
  "Segmented Green Palette Color Lookup Table Data",
  [OtherWordString],
  vm_1,
)

pub const segmented_blue_palette_color_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1223),
  "Segmented Blue Palette Color Lookup Table Data",
  [OtherWordString],
  vm_1,
)

pub const segmented_alpha_palette_color_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1224),
  "Segmented Alpha Palette Color Lookup Table Data",
  [OtherWordString],
  vm_1,
)

pub const stored_value_color_range_sequence = Item(
  DataElementTag(0x0028, 0x1230),
  "Stored Value Color Range Sequence",
  [Sequence],
  vm_1,
)

pub const minimum_stored_value_mapped = Item(
  DataElementTag(0x0028, 0x1231),
  "Minimum Stored Value Mapped",
  [FloatingPointDouble],
  vm_1,
)

pub const maximum_stored_value_mapped = Item(
  DataElementTag(0x0028, 0x1232),
  "Maximum Stored Value Mapped",
  [FloatingPointDouble],
  vm_1,
)

pub const breast_implant_present = Item(
  DataElementTag(0x0028, 0x1300),
  "Breast Implant Present",
  [CodeString],
  vm_1,
)

pub const partial_view = Item(
  DataElementTag(0x0028, 0x1350),
  "Partial View",
  [CodeString],
  vm_1,
)

pub const partial_view_description = Item(
  DataElementTag(0x0028, 0x1351),
  "Partial View Description",
  [ShortText],
  vm_1,
)

pub const partial_view_code_sequence = Item(
  DataElementTag(0x0028, 0x1352),
  "Partial View Code Sequence",
  [Sequence],
  vm_1,
)

pub const spatial_locations_preserved = Item(
  DataElementTag(0x0028, 0x135A),
  "Spatial Locations Preserved",
  [CodeString],
  vm_1,
)

pub const data_frame_assignment_sequence = Item(
  DataElementTag(0x0028, 0x1401),
  "Data Frame Assignment Sequence",
  [Sequence],
  vm_1,
)

pub const data_path_assignment = Item(
  DataElementTag(0x0028, 0x1402),
  "Data Path Assignment",
  [CodeString],
  vm_1,
)

pub const bits_mapped_to_color_lookup_table = Item(
  DataElementTag(0x0028, 0x1403),
  "Bits Mapped to Color Lookup Table",
  [UnsignedShort],
  vm_1,
)

pub const blending_lut1_sequence = Item(
  DataElementTag(0x0028, 0x1404),
  "Blending LUT 1 Sequence",
  [Sequence],
  vm_1,
)

pub const blending_lut1_transfer_function = Item(
  DataElementTag(0x0028, 0x1405),
  "Blending LUT 1 Transfer Function",
  [CodeString],
  vm_1,
)

pub const blending_weight_constant = Item(
  DataElementTag(0x0028, 0x1406),
  "Blending Weight Constant",
  [FloatingPointDouble],
  vm_1,
)

pub const blending_lookup_table_descriptor = Item(
  DataElementTag(0x0028, 0x1407),
  "Blending Lookup Table Descriptor",
  [UnsignedShort],
  vm_3,
)

pub const blending_lookup_table_data = Item(
  DataElementTag(0x0028, 0x1408),
  "Blending Lookup Table Data",
  [OtherWordString],
  vm_1,
)

pub const enhanced_palette_color_lookup_table_sequence = Item(
  DataElementTag(0x0028, 0x140B),
  "Enhanced Palette Color Lookup Table Sequence",
  [Sequence],
  vm_1,
)

pub const blending_lut2_sequence = Item(
  DataElementTag(0x0028, 0x140C),
  "Blending LUT 2 Sequence",
  [Sequence],
  vm_1,
)

pub const blending_lut2_transfer_function = Item(
  DataElementTag(0x0028, 0x140D),
  "Blending LUT 2 Transfer Function",
  [CodeString],
  vm_1,
)

pub const data_path_id = Item(
  DataElementTag(0x0028, 0x140E),
  "Data Path ID",
  [CodeString],
  vm_1,
)

pub const rgblut_transfer_function = Item(
  DataElementTag(0x0028, 0x140F),
  "RGB LUT Transfer Function",
  [CodeString],
  vm_1,
)

pub const alpha_lut_transfer_function = Item(
  DataElementTag(0x0028, 0x1410),
  "Alpha LUT Transfer Function",
  [CodeString],
  vm_1,
)

pub const icc_profile = Item(
  DataElementTag(0x0028, 0x2000),
  "ICC Profile",
  [OtherByteString],
  vm_1,
)

pub const color_space = Item(
  DataElementTag(0x0028, 0x2002),
  "Color Space",
  [CodeString],
  vm_1,
)

pub const lossy_image_compression = Item(
  DataElementTag(0x0028, 0x2110),
  "Lossy Image Compression",
  [CodeString],
  vm_1,
)

pub const lossy_image_compression_ratio = Item(
  DataElementTag(0x0028, 0x2112),
  "Lossy Image Compression Ratio",
  [DecimalString],
  vm_1_to_n,
)

pub const lossy_image_compression_method = Item(
  DataElementTag(0x0028, 0x2114),
  "Lossy Image Compression Method",
  [CodeString],
  vm_1_to_n,
)

pub const modality_lut_sequence = Item(
  DataElementTag(0x0028, 0x3000),
  "Modality LUT Sequence",
  [Sequence],
  vm_1,
)

pub const variable_modality_lut_sequence = Item(
  DataElementTag(0x0028, 0x3001),
  "Variable Modality LUT Sequence",
  [Sequence],
  vm_1,
)

pub const lut_descriptor = Item(
  DataElementTag(0x0028, 0x3002),
  "LUT Descriptor",
  [UnsignedShort, SignedShort],
  vm_3,
)

pub const lut_explanation = Item(
  DataElementTag(0x0028, 0x3003),
  "LUT Explanation",
  [LongString],
  vm_1,
)

pub const modality_lut_type = Item(
  DataElementTag(0x0028, 0x3004),
  "Modality LUT Type",
  [LongString],
  vm_1,
)

pub const lut_data = Item(
  DataElementTag(0x0028, 0x3006),
  "LUT Data",
  [value_representation.UnsignedShort, value_representation.OtherWordString],
  vm_1_to_n,
)

pub const voilut_sequence = Item(
  DataElementTag(0x0028, 0x3010),
  "VOI LUT Sequence",
  [Sequence],
  vm_1,
)

pub const softcopy_voilut_sequence = Item(
  DataElementTag(0x0028, 0x3110),
  "Softcopy VOI LUT Sequence",
  [Sequence],
  vm_1,
)

pub const image_presentation_comments = Item(
  DataElementTag(0x0028, 0x4000),
  "Image Presentation Comments",
  [LongText],
  vm_1,
)

pub const bi_plane_acquisition_sequence = Item(
  DataElementTag(0x0028, 0x5000),
  "Bi-Plane Acquisition Sequence",
  [Sequence],
  vm_1,
)

pub const representative_frame_number = Item(
  DataElementTag(0x0028, 0x6010),
  "Representative Frame Number",
  [UnsignedShort],
  vm_1,
)

pub const frame_numbers_of_interest = Item(
  DataElementTag(0x0028, 0x6020),
  "Frame Numbers of Interest (FOI)",
  [UnsignedShort],
  vm_1_to_n,
)

pub const frame_of_interest_description = Item(
  DataElementTag(0x0028, 0x6022),
  "Frame of Interest Description",
  [LongString],
  vm_1_to_n,
)

pub const frame_of_interest_type = Item(
  DataElementTag(0x0028, 0x6023),
  "Frame of Interest Type",
  [CodeString],
  vm_1_to_n,
)

pub const mask_pointers = Item(
  DataElementTag(0x0028, 0x6030),
  "Mask Pointer(s)",
  [UnsignedShort],
  vm_1_to_n,
)

pub const r_wave_pointer = Item(
  DataElementTag(0x0028, 0x6040),
  "R Wave Pointer",
  [UnsignedShort],
  vm_1_to_n,
)

pub const mask_subtraction_sequence = Item(
  DataElementTag(0x0028, 0x6100),
  "Mask Subtraction Sequence",
  [Sequence],
  vm_1,
)

pub const mask_operation = Item(
  DataElementTag(0x0028, 0x6101),
  "Mask Operation",
  [CodeString],
  vm_1,
)

pub const applicable_frame_range = Item(
  DataElementTag(0x0028, 0x6102),
  "Applicable Frame Range",
  [UnsignedShort],
  vm_2_to_n,
)

pub const mask_frame_numbers = Item(
  DataElementTag(0x0028, 0x6110),
  "Mask Frame Numbers",
  [UnsignedShort],
  vm_1_to_n,
)

pub const contrast_frame_averaging = Item(
  DataElementTag(0x0028, 0x6112),
  "Contrast Frame Averaging",
  [UnsignedShort],
  vm_1,
)

pub const mask_sub_pixel_shift = Item(
  DataElementTag(0x0028, 0x6114),
  "Mask Sub-pixel Shift",
  [FloatingPointSingle],
  vm_2,
)

pub const tid_offset = Item(
  DataElementTag(0x0028, 0x6120),
  "TID Offset",
  [SignedShort],
  vm_1,
)

pub const mask_operation_explanation = Item(
  DataElementTag(0x0028, 0x6190),
  "Mask Operation Explanation",
  [ShortText],
  vm_1,
)

pub const equipment_administrator_sequence = Item(
  DataElementTag(0x0028, 0x7000),
  "Equipment Administrator Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_display_subsystems = Item(
  DataElementTag(0x0028, 0x7001),
  "Number of Display Subsystems",
  [UnsignedShort],
  vm_1,
)

pub const current_configuration_id = Item(
  DataElementTag(0x0028, 0x7002),
  "Current Configuration ID",
  [UnsignedShort],
  vm_1,
)

pub const display_subsystem_id = Item(
  DataElementTag(0x0028, 0x7003),
  "Display Subsystem ID",
  [UnsignedShort],
  vm_1,
)

pub const display_subsystem_name = Item(
  DataElementTag(0x0028, 0x7004),
  "Display Subsystem Name",
  [ShortString],
  vm_1,
)

pub const display_subsystem_description = Item(
  DataElementTag(0x0028, 0x7005),
  "Display Subsystem Description",
  [LongString],
  vm_1,
)

pub const system_status = Item(
  DataElementTag(0x0028, 0x7006),
  "System Status",
  [CodeString],
  vm_1,
)

pub const system_status_comment = Item(
  DataElementTag(0x0028, 0x7007),
  "System Status Comment",
  [LongString],
  vm_1,
)

pub const target_luminance_characteristics_sequence = Item(
  DataElementTag(0x0028, 0x7008),
  "Target Luminance Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const luminance_characteristics_id = Item(
  DataElementTag(0x0028, 0x7009),
  "Luminance Characteristics ID",
  [UnsignedShort],
  vm_1,
)

pub const display_subsystem_configuration_sequence = Item(
  DataElementTag(0x0028, 0x700A),
  "Display Subsystem Configuration Sequence",
  [Sequence],
  vm_1,
)

pub const configuration_id = Item(
  DataElementTag(0x0028, 0x700B),
  "Configuration ID",
  [UnsignedShort],
  vm_1,
)

pub const configuration_name = Item(
  DataElementTag(0x0028, 0x700C),
  "Configuration Name",
  [ShortString],
  vm_1,
)

pub const configuration_description = Item(
  DataElementTag(0x0028, 0x700D),
  "Configuration Description",
  [LongString],
  vm_1,
)

pub const referenced_target_luminance_characteristics_id = Item(
  DataElementTag(0x0028, 0x700E),
  "Referenced Target Luminance Characteristics ID",
  [UnsignedShort],
  vm_1,
)

pub const qa_results_sequence = Item(
  DataElementTag(0x0028, 0x700F),
  "QA Results Sequence",
  [Sequence],
  vm_1,
)

pub const display_subsystem_qa_results_sequence = Item(
  DataElementTag(0x0028, 0x7010),
  "Display Subsystem QA Results Sequence",
  [Sequence],
  vm_1,
)

pub const configuration_qa_results_sequence = Item(
  DataElementTag(0x0028, 0x7011),
  "Configuration QA Results Sequence",
  [Sequence],
  vm_1,
)

pub const measurement_equipment_sequence = Item(
  DataElementTag(0x0028, 0x7012),
  "Measurement Equipment Sequence",
  [Sequence],
  vm_1,
)

pub const measurement_functions = Item(
  DataElementTag(0x0028, 0x7013),
  "Measurement Functions",
  [CodeString],
  vm_1_to_n,
)

pub const measurement_equipment_type = Item(
  DataElementTag(0x0028, 0x7014),
  "Measurement Equipment Type",
  [CodeString],
  vm_1,
)

pub const visual_evaluation_result_sequence = Item(
  DataElementTag(0x0028, 0x7015),
  "Visual Evaluation Result Sequence",
  [Sequence],
  vm_1,
)

pub const display_calibration_result_sequence = Item(
  DataElementTag(0x0028, 0x7016),
  "Display Calibration Result Sequence",
  [Sequence],
  vm_1,
)

pub const ddl_value = Item(
  DataElementTag(0x0028, 0x7017),
  "DDL Value",
  [UnsignedShort],
  vm_1,
)

pub const ci_exy_white_point = Item(
  DataElementTag(0x0028, 0x7018),
  "CIExy White Point",
  [FloatingPointSingle],
  vm_2,
)

pub const display_function_type = Item(
  DataElementTag(0x0028, 0x7019),
  "Display Function Type",
  [CodeString],
  vm_1,
)

pub const gamma_value = Item(
  DataElementTag(0x0028, 0x701A),
  "Gamma Value",
  [FloatingPointSingle],
  vm_1,
)

pub const number_of_luminance_points = Item(
  DataElementTag(0x0028, 0x701B),
  "Number of Luminance Points",
  [UnsignedShort],
  vm_1,
)

pub const luminance_response_sequence = Item(
  DataElementTag(0x0028, 0x701C),
  "Luminance Response Sequence",
  [Sequence],
  vm_1,
)

pub const target_minimum_luminance = Item(
  DataElementTag(0x0028, 0x701D),
  "Target Minimum Luminance",
  [FloatingPointSingle],
  vm_1,
)

pub const target_maximum_luminance = Item(
  DataElementTag(0x0028, 0x701E),
  "Target Maximum Luminance",
  [FloatingPointSingle],
  vm_1,
)

pub const luminance_value = Item(
  DataElementTag(0x0028, 0x701F),
  "Luminance Value",
  [FloatingPointSingle],
  vm_1,
)

pub const luminance_response_description = Item(
  DataElementTag(0x0028, 0x7020),
  "Luminance Response Description",
  [LongString],
  vm_1,
)

pub const white_point_flag = Item(
  DataElementTag(0x0028, 0x7021),
  "White Point Flag",
  [CodeString],
  vm_1,
)

pub const display_device_type_code_sequence = Item(
  DataElementTag(0x0028, 0x7022),
  "Display Device Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const display_subsystem_sequence = Item(
  DataElementTag(0x0028, 0x7023),
  "Display Subsystem Sequence",
  [Sequence],
  vm_1,
)

pub const luminance_result_sequence = Item(
  DataElementTag(0x0028, 0x7024),
  "Luminance Result Sequence",
  [Sequence],
  vm_1,
)

pub const ambient_light_value_source = Item(
  DataElementTag(0x0028, 0x7025),
  "Ambient Light Value Source",
  [CodeString],
  vm_1,
)

pub const measured_characteristics = Item(
  DataElementTag(0x0028, 0x7026),
  "Measured Characteristics",
  [CodeString],
  vm_1_to_n,
)

pub const luminance_uniformity_result_sequence = Item(
  DataElementTag(0x0028, 0x7027),
  "Luminance Uniformity Result Sequence",
  [Sequence],
  vm_1,
)

pub const visual_evaluation_test_sequence = Item(
  DataElementTag(0x0028, 0x7028),
  "Visual Evaluation Test Sequence",
  [Sequence],
  vm_1,
)

pub const test_result = Item(
  DataElementTag(0x0028, 0x7029),
  "Test Result",
  [CodeString],
  vm_1,
)

pub const test_result_comment = Item(
  DataElementTag(0x0028, 0x702A),
  "Test Result Comment",
  [LongString],
  vm_1,
)

pub const test_image_validation = Item(
  DataElementTag(0x0028, 0x702B),
  "Test Image Validation",
  [CodeString],
  vm_1,
)

pub const test_pattern_code_sequence = Item(
  DataElementTag(0x0028, 0x702C),
  "Test Pattern Code Sequence",
  [Sequence],
  vm_1,
)

pub const measurement_pattern_code_sequence = Item(
  DataElementTag(0x0028, 0x702D),
  "Measurement Pattern Code Sequence",
  [Sequence],
  vm_1,
)

pub const visual_evaluation_method_code_sequence = Item(
  DataElementTag(0x0028, 0x702E),
  "Visual Evaluation Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const pixel_data_provider_url = Item(
  DataElementTag(0x0028, 0x7FE0),
  "Pixel Data Provider URL",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const data_point_rows = Item(
  DataElementTag(0x0028, 0x9001),
  "Data Point Rows",
  [UnsignedLong],
  vm_1,
)

pub const data_point_columns = Item(
  DataElementTag(0x0028, 0x9002),
  "Data Point Columns",
  [UnsignedLong],
  vm_1,
)

pub const signal_domain_columns = Item(
  DataElementTag(0x0028, 0x9003),
  "Signal Domain Columns",
  [CodeString],
  vm_1,
)

pub const largest_monochrome_pixel_value = Item(
  DataElementTag(0x0028, 0x9099),
  "Largest Monochrome Pixel Value",
  [UnsignedShort],
  vm_1,
)

pub const data_representation = Item(
  DataElementTag(0x0028, 0x9108),
  "Data Representation",
  [CodeString],
  vm_1,
)

pub const pixel_measures_sequence = Item(
  DataElementTag(0x0028, 0x9110),
  "Pixel Measures Sequence",
  [Sequence],
  vm_1,
)

pub const frame_voilut_sequence = Item(
  DataElementTag(0x0028, 0x9132),
  "Frame VOI LUT Sequence",
  [Sequence],
  vm_1,
)

pub const pixel_value_transformation_sequence = Item(
  DataElementTag(0x0028, 0x9145),
  "Pixel Value Transformation Sequence",
  [Sequence],
  vm_1,
)

pub const signal_domain_rows = Item(
  DataElementTag(0x0028, 0x9235),
  "Signal Domain Rows",
  [CodeString],
  vm_1,
)

pub const display_filter_percentage = Item(
  DataElementTag(0x0028, 0x9411),
  "Display Filter Percentage",
  [FloatingPointSingle],
  vm_1,
)

pub const frame_pixel_shift_sequence = Item(
  DataElementTag(0x0028, 0x9415),
  "Frame Pixel Shift Sequence",
  [Sequence],
  vm_1,
)

pub const subtraction_item_id = Item(
  DataElementTag(0x0028, 0x9416),
  "Subtraction Item ID",
  [UnsignedShort],
  vm_1,
)

pub const pixel_intensity_relationship_lut_sequence = Item(
  DataElementTag(0x0028, 0x9422),
  "Pixel Intensity Relationship LUT Sequence",
  [Sequence],
  vm_1,
)

pub const frame_pixel_data_properties_sequence = Item(
  DataElementTag(0x0028, 0x9443),
  "Frame Pixel Data Properties Sequence",
  [Sequence],
  vm_1,
)

pub const geometrical_properties = Item(
  DataElementTag(0x0028, 0x9444),
  "Geometrical Properties",
  [CodeString],
  vm_1,
)

pub const geometric_maximum_distortion = Item(
  DataElementTag(0x0028, 0x9445),
  "Geometric Maximum Distortion",
  [FloatingPointSingle],
  vm_1,
)

pub const image_processing_applied = Item(
  DataElementTag(0x0028, 0x9446),
  "Image Processing Applied",
  [CodeString],
  vm_1_to_n,
)

pub const mask_selection_mode = Item(
  DataElementTag(0x0028, 0x9454),
  "Mask Selection Mode",
  [CodeString],
  vm_1,
)

pub const lut_function = Item(
  DataElementTag(0x0028, 0x9474),
  "LUT Function",
  [CodeString],
  vm_1,
)

pub const mask_visibility_percentage = Item(
  DataElementTag(0x0028, 0x9478),
  "Mask Visibility Percentage",
  [FloatingPointSingle],
  vm_1,
)

pub const pixel_shift_sequence = Item(
  DataElementTag(0x0028, 0x9501),
  "Pixel Shift Sequence",
  [Sequence],
  vm_1,
)

pub const region_pixel_shift_sequence = Item(
  DataElementTag(0x0028, 0x9502),
  "Region Pixel Shift Sequence",
  [Sequence],
  vm_1,
)

pub const vertices_of_the_region = Item(
  DataElementTag(0x0028, 0x9503),
  "Vertices of the Region",
  [SignedShort],
  vm_2_to_n,
)

pub const multi_frame_presentation_sequence = Item(
  DataElementTag(0x0028, 0x9505),
  "Multi-frame Presentation Sequence",
  [Sequence],
  vm_1,
)

pub const pixel_shift_frame_range = Item(
  DataElementTag(0x0028, 0x9506),
  "Pixel Shift Frame Range",
  [UnsignedShort],
  vm_2_to_n,
)

pub const lut_frame_range = Item(
  DataElementTag(0x0028, 0x9507),
  "LUT Frame Range",
  [UnsignedShort],
  vm_2_to_n,
)

pub const image_to_equipment_mapping_matrix = Item(
  DataElementTag(0x0028, 0x9520),
  "Image to Equipment Mapping Matrix",
  [DecimalString],
  ValueMultiplicity(16, Some(16)),
)

pub const equipment_coordinate_system_identification = Item(
  DataElementTag(0x0028, 0x9537),
  "Equipment Coordinate System Identification",
  [CodeString],
  vm_1,
)

pub const study_status_id = Item(
  DataElementTag(0x0032, 0x000A),
  "Study Status ID",
  [CodeString],
  vm_1,
)

pub const study_priority_id = Item(
  DataElementTag(0x0032, 0x000C),
  "Study Priority ID",
  [CodeString],
  vm_1,
)

pub const study_id_issuer = Item(
  DataElementTag(0x0032, 0x0012),
  "Study ID Issuer",
  [LongString],
  vm_1,
)

pub const study_verified_date = Item(
  DataElementTag(0x0032, 0x0032),
  "Study Verified Date",
  [Date],
  vm_1,
)

pub const study_verified_time = Item(
  DataElementTag(0x0032, 0x0033),
  "Study Verified Time",
  [Time],
  vm_1,
)

pub const study_read_date = Item(
  DataElementTag(0x0032, 0x0034),
  "Study Read Date",
  [Date],
  vm_1,
)

pub const study_read_time = Item(
  DataElementTag(0x0032, 0x0035),
  "Study Read Time",
  [Time],
  vm_1,
)

pub const scheduled_study_start_date = Item(
  DataElementTag(0x0032, 0x1000),
  "Scheduled Study Start Date",
  [Date],
  vm_1,
)

pub const scheduled_study_start_time = Item(
  DataElementTag(0x0032, 0x1001),
  "Scheduled Study Start Time",
  [Time],
  vm_1,
)

pub const scheduled_study_stop_date = Item(
  DataElementTag(0x0032, 0x1010),
  "Scheduled Study Stop Date",
  [Date],
  vm_1,
)

pub const scheduled_study_stop_time = Item(
  DataElementTag(0x0032, 0x1011),
  "Scheduled Study Stop Time",
  [Time],
  vm_1,
)

pub const scheduled_study_location = Item(
  DataElementTag(0x0032, 0x1020),
  "Scheduled Study Location",
  [LongString],
  vm_1,
)

pub const scheduled_study_location_ae_title = Item(
  DataElementTag(0x0032, 0x1021),
  "Scheduled Study Location AE Title",
  [ApplicationEntity],
  vm_1_to_n,
)

pub const reason_for_study = Item(
  DataElementTag(0x0032, 0x1030),
  "Reason for Study",
  [LongString],
  vm_1,
)

pub const requesting_physician_identification_sequence = Item(
  DataElementTag(0x0032, 0x1031),
  "Requesting Physician Identification Sequence",
  [Sequence],
  vm_1,
)

pub const requesting_physician = Item(
  DataElementTag(0x0032, 0x1032),
  "Requesting Physician",
  [PersonName],
  vm_1,
)

pub const requesting_service = Item(
  DataElementTag(0x0032, 0x1033),
  "Requesting Service",
  [LongString],
  vm_1,
)

pub const requesting_service_code_sequence = Item(
  DataElementTag(0x0032, 0x1034),
  "Requesting Service Code Sequence",
  [Sequence],
  vm_1,
)

pub const study_arrival_date = Item(
  DataElementTag(0x0032, 0x1040),
  "Study Arrival Date",
  [Date],
  vm_1,
)

pub const study_arrival_time = Item(
  DataElementTag(0x0032, 0x1041),
  "Study Arrival Time",
  [Time],
  vm_1,
)

pub const study_completion_date = Item(
  DataElementTag(0x0032, 0x1050),
  "Study Completion Date",
  [Date],
  vm_1,
)

pub const study_completion_time = Item(
  DataElementTag(0x0032, 0x1051),
  "Study Completion Time",
  [Time],
  vm_1,
)

pub const study_component_status_id = Item(
  DataElementTag(0x0032, 0x1055),
  "Study Component Status ID",
  [CodeString],
  vm_1,
)

pub const requested_procedure_description = Item(
  DataElementTag(0x0032, 0x1060),
  "Requested Procedure Description",
  [LongString],
  vm_1,
)

pub const requested_procedure_code_sequence = Item(
  DataElementTag(0x0032, 0x1064),
  "Requested Procedure Code Sequence",
  [Sequence],
  vm_1,
)

pub const requested_laterality_code_sequence = Item(
  DataElementTag(0x0032, 0x1065),
  "Requested Laterality Code Sequence",
  [Sequence],
  vm_1,
)

pub const reason_for_visit = Item(
  DataElementTag(0x0032, 0x1066),
  "Reason for Visit",
  [UnlimitedText],
  vm_1,
)

pub const reason_for_visit_code_sequence = Item(
  DataElementTag(0x0032, 0x1067),
  "Reason for Visit Code Sequence",
  [Sequence],
  vm_1,
)

pub const requested_contrast_agent = Item(
  DataElementTag(0x0032, 0x1070),
  "Requested Contrast Agent",
  [LongString],
  vm_1,
)

pub const study_comments = Item(
  DataElementTag(0x0032, 0x4000),
  "Study Comments",
  [LongText],
  vm_1,
)

pub const flow_identifier_sequence = Item(
  DataElementTag(0x0034, 0x0001),
  "Flow Identifier Sequence",
  [Sequence],
  vm_1,
)

pub const flow_identifier = Item(
  DataElementTag(0x0034, 0x0002),
  "Flow Identifier",
  [OtherByteString],
  vm_1,
)

pub const flow_transfer_syntax_uid = Item(
  DataElementTag(0x0034, 0x0003),
  "Flow Transfer Syntax UID",
  [UniqueIdentifier],
  vm_1,
)

pub const flow_rtp_sampling_rate = Item(
  DataElementTag(0x0034, 0x0004),
  "Flow RTP Sampling Rate",
  [UnsignedLong],
  vm_1,
)

pub const source_identifier = Item(
  DataElementTag(0x0034, 0x0005),
  "Source Identifier",
  [OtherByteString],
  vm_1,
)

pub const frame_origin_timestamp = Item(
  DataElementTag(0x0034, 0x0007),
  "Frame Origin Timestamp",
  [OtherByteString],
  vm_1,
)

pub const includes_imaging_subject = Item(
  DataElementTag(0x0034, 0x0008),
  "Includes Imaging Subject",
  [CodeString],
  vm_1,
)

pub const frame_usefulness_group_sequence = Item(
  DataElementTag(0x0034, 0x0009),
  "Frame Usefulness Group Sequence",
  [Sequence],
  vm_1,
)

pub const real_time_bulk_data_flow_sequence = Item(
  DataElementTag(0x0034, 0x000A),
  "Real-Time Bulk Data Flow Sequence",
  [Sequence],
  vm_1,
)

pub const camera_position_group_sequence = Item(
  DataElementTag(0x0034, 0x000B),
  "Camera Position Group Sequence",
  [Sequence],
  vm_1,
)

pub const includes_information = Item(
  DataElementTag(0x0034, 0x000C),
  "Includes Information",
  [CodeString],
  vm_1,
)

pub const time_of_frame_group_sequence = Item(
  DataElementTag(0x0034, 0x000D),
  "Time of Frame Group Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_patient_alias_sequence = Item(
  DataElementTag(0x0038, 0x0004),
  "Referenced Patient Alias Sequence",
  [Sequence],
  vm_1,
)

pub const visit_status_id = Item(
  DataElementTag(0x0038, 0x0008),
  "Visit Status ID",
  [CodeString],
  vm_1,
)

pub const admission_id = Item(
  DataElementTag(0x0038, 0x0010),
  "Admission ID",
  [LongString],
  vm_1,
)

pub const issuer_of_admission_id = Item(
  DataElementTag(0x0038, 0x0011),
  "Issuer of Admission ID",
  [LongString],
  vm_1,
)

pub const issuer_of_admission_id_sequence = Item(
  DataElementTag(0x0038, 0x0014),
  "Issuer of Admission ID Sequence",
  [Sequence],
  vm_1,
)

pub const route_of_admissions = Item(
  DataElementTag(0x0038, 0x0016),
  "Route of Admissions",
  [LongString],
  vm_1,
)

pub const scheduled_admission_date = Item(
  DataElementTag(0x0038, 0x001A),
  "Scheduled Admission Date",
  [Date],
  vm_1,
)

pub const scheduled_admission_time = Item(
  DataElementTag(0x0038, 0x001B),
  "Scheduled Admission Time",
  [Time],
  vm_1,
)

pub const scheduled_discharge_date = Item(
  DataElementTag(0x0038, 0x001C),
  "Scheduled Discharge Date",
  [Date],
  vm_1,
)

pub const scheduled_discharge_time = Item(
  DataElementTag(0x0038, 0x001D),
  "Scheduled Discharge Time",
  [Time],
  vm_1,
)

pub const scheduled_patient_institution_residence = Item(
  DataElementTag(0x0038, 0x001E),
  "Scheduled Patient Institution Residence",
  [LongString],
  vm_1,
)

pub const admitting_date = Item(
  DataElementTag(0x0038, 0x0020),
  "Admitting Date",
  [Date],
  vm_1,
)

pub const admitting_time = Item(
  DataElementTag(0x0038, 0x0021),
  "Admitting Time",
  [Time],
  vm_1,
)

pub const discharge_date = Item(
  DataElementTag(0x0038, 0x0030),
  "Discharge Date",
  [Date],
  vm_1,
)

pub const discharge_time = Item(
  DataElementTag(0x0038, 0x0032),
  "Discharge Time",
  [Time],
  vm_1,
)

pub const discharge_diagnosis_description = Item(
  DataElementTag(0x0038, 0x0040),
  "Discharge Diagnosis Description",
  [LongString],
  vm_1,
)

pub const discharge_diagnosis_code_sequence = Item(
  DataElementTag(0x0038, 0x0044),
  "Discharge Diagnosis Code Sequence",
  [Sequence],
  vm_1,
)

pub const special_needs = Item(
  DataElementTag(0x0038, 0x0050),
  "Special Needs",
  [LongString],
  vm_1,
)

pub const service_episode_id = Item(
  DataElementTag(0x0038, 0x0060),
  "Service Episode ID",
  [LongString],
  vm_1,
)

pub const issuer_of_service_episode_id = Item(
  DataElementTag(0x0038, 0x0061),
  "Issuer of Service Episode ID",
  [LongString],
  vm_1,
)

pub const service_episode_description = Item(
  DataElementTag(0x0038, 0x0062),
  "Service Episode Description",
  [LongString],
  vm_1,
)

pub const issuer_of_service_episode_id_sequence = Item(
  DataElementTag(0x0038, 0x0064),
  "Issuer of Service Episode ID Sequence",
  [Sequence],
  vm_1,
)

pub const pertinent_documents_sequence = Item(
  DataElementTag(0x0038, 0x0100),
  "Pertinent Documents Sequence",
  [Sequence],
  vm_1,
)

pub const pertinent_resources_sequence = Item(
  DataElementTag(0x0038, 0x0101),
  "Pertinent Resources Sequence",
  [Sequence],
  vm_1,
)

pub const resource_description = Item(
  DataElementTag(0x0038, 0x0102),
  "Resource Description",
  [LongString],
  vm_1,
)

pub const current_patient_location = Item(
  DataElementTag(0x0038, 0x0300),
  "Current Patient Location",
  [LongString],
  vm_1,
)

pub const patient_institution_residence = Item(
  DataElementTag(0x0038, 0x0400),
  "Patient's Institution Residence",
  [LongString],
  vm_1,
)

pub const patient_state = Item(
  DataElementTag(0x0038, 0x0500),
  "Patient State",
  [LongString],
  vm_1,
)

pub const patient_clinical_trial_participation_sequence = Item(
  DataElementTag(0x0038, 0x0502),
  "Patient Clinical Trial Participation Sequence",
  [Sequence],
  vm_1,
)

pub const visit_comments = Item(
  DataElementTag(0x0038, 0x4000),
  "Visit Comments",
  [LongText],
  vm_1,
)

pub const waveform_originality = Item(
  DataElementTag(0x003A, 0x0004),
  "Waveform Originality",
  [CodeString],
  vm_1,
)

pub const number_of_waveform_channels = Item(
  DataElementTag(0x003A, 0x0005),
  "Number of Waveform Channels",
  [UnsignedShort],
  vm_1,
)

pub const number_of_waveform_samples = Item(
  DataElementTag(0x003A, 0x0010),
  "Number of Waveform Samples",
  [UnsignedLong],
  vm_1,
)

pub const sampling_frequency = Item(
  DataElementTag(0x003A, 0x001A),
  "Sampling Frequency",
  [DecimalString],
  vm_1,
)

pub const multiplex_group_label = Item(
  DataElementTag(0x003A, 0x0020),
  "Multiplex Group Label",
  [ShortString],
  vm_1,
)

pub const channel_definition_sequence = Item(
  DataElementTag(0x003A, 0x0200),
  "Channel Definition Sequence",
  [Sequence],
  vm_1,
)

pub const waveform_channel_number = Item(
  DataElementTag(0x003A, 0x0202),
  "Waveform Channel Number",
  [IntegerString],
  vm_1,
)

pub const channel_label = Item(
  DataElementTag(0x003A, 0x0203),
  "Channel Label",
  [ShortString],
  vm_1,
)

pub const channel_status = Item(
  DataElementTag(0x003A, 0x0205),
  "Channel Status",
  [CodeString],
  vm_1_to_n,
)

pub const channel_source_sequence = Item(
  DataElementTag(0x003A, 0x0208),
  "Channel Source Sequence",
  [Sequence],
  vm_1,
)

pub const channel_source_modifiers_sequence = Item(
  DataElementTag(0x003A, 0x0209),
  "Channel Source Modifiers Sequence",
  [Sequence],
  vm_1,
)

pub const source_waveform_sequence = Item(
  DataElementTag(0x003A, 0x020A),
  "Source Waveform Sequence",
  [Sequence],
  vm_1,
)

pub const channel_derivation_description = Item(
  DataElementTag(0x003A, 0x020C),
  "Channel Derivation Description",
  [LongString],
  vm_1,
)

pub const channel_sensitivity = Item(
  DataElementTag(0x003A, 0x0210),
  "Channel Sensitivity",
  [DecimalString],
  vm_1,
)

pub const channel_sensitivity_units_sequence = Item(
  DataElementTag(0x003A, 0x0211),
  "Channel Sensitivity Units Sequence",
  [Sequence],
  vm_1,
)

pub const channel_sensitivity_correction_factor = Item(
  DataElementTag(0x003A, 0x0212),
  "Channel Sensitivity Correction Factor",
  [DecimalString],
  vm_1,
)

pub const channel_baseline = Item(
  DataElementTag(0x003A, 0x0213),
  "Channel Baseline",
  [DecimalString],
  vm_1,
)

pub const channel_time_skew = Item(
  DataElementTag(0x003A, 0x0214),
  "Channel Time Skew",
  [DecimalString],
  vm_1,
)

pub const channel_sample_skew = Item(
  DataElementTag(0x003A, 0x0215),
  "Channel Sample Skew",
  [DecimalString],
  vm_1,
)

pub const channel_offset = Item(
  DataElementTag(0x003A, 0x0218),
  "Channel Offset",
  [DecimalString],
  vm_1,
)

pub const waveform_bits_stored = Item(
  DataElementTag(0x003A, 0x021A),
  "Waveform Bits Stored",
  [UnsignedShort],
  vm_1,
)

pub const filter_low_frequency = Item(
  DataElementTag(0x003A, 0x0220),
  "Filter Low Frequency",
  [DecimalString],
  vm_1,
)

pub const filter_high_frequency = Item(
  DataElementTag(0x003A, 0x0221),
  "Filter High Frequency",
  [DecimalString],
  vm_1,
)

pub const notch_filter_frequency = Item(
  DataElementTag(0x003A, 0x0222),
  "Notch Filter Frequency",
  [DecimalString],
  vm_1,
)

pub const notch_filter_bandwidth = Item(
  DataElementTag(0x003A, 0x0223),
  "Notch Filter Bandwidth",
  [DecimalString],
  vm_1,
)

pub const waveform_data_display_scale = Item(
  DataElementTag(0x003A, 0x0230),
  "Waveform Data Display Scale",
  [FloatingPointSingle],
  vm_1,
)

pub const waveform_display_background_cie_lab_value = Item(
  DataElementTag(0x003A, 0x0231),
  "Waveform Display Background CIELab Value",
  [UnsignedShort],
  vm_3,
)

pub const waveform_presentation_group_sequence = Item(
  DataElementTag(0x003A, 0x0240),
  "Waveform Presentation Group Sequence",
  [Sequence],
  vm_1,
)

pub const presentation_group_number = Item(
  DataElementTag(0x003A, 0x0241),
  "Presentation Group Number",
  [UnsignedShort],
  vm_1,
)

pub const channel_display_sequence = Item(
  DataElementTag(0x003A, 0x0242),
  "Channel Display Sequence",
  [Sequence],
  vm_1,
)

pub const channel_recommended_display_cie_lab_value = Item(
  DataElementTag(0x003A, 0x0244),
  "Channel Recommended Display CIELab Value",
  [UnsignedShort],
  vm_3,
)

pub const channel_position = Item(
  DataElementTag(0x003A, 0x0245),
  "Channel Position",
  [FloatingPointSingle],
  vm_1,
)

pub const display_shading_flag = Item(
  DataElementTag(0x003A, 0x0246),
  "Display Shading Flag",
  [CodeString],
  vm_1,
)

pub const fractional_channel_display_scale = Item(
  DataElementTag(0x003A, 0x0247),
  "Fractional Channel Display Scale",
  [FloatingPointSingle],
  vm_1,
)

pub const absolute_channel_display_scale = Item(
  DataElementTag(0x003A, 0x0248),
  "Absolute Channel Display Scale",
  [FloatingPointSingle],
  vm_1,
)

pub const multiplexed_audio_channels_description_code_sequence = Item(
  DataElementTag(0x003A, 0x0300),
  "Multiplexed Audio Channels Description Code Sequence",
  [Sequence],
  vm_1,
)

pub const channel_identification_code = Item(
  DataElementTag(0x003A, 0x0301),
  "Channel Identification Code",
  [IntegerString],
  vm_1,
)

pub const channel_mode = Item(
  DataElementTag(0x003A, 0x0302),
  "Channel Mode",
  [CodeString],
  vm_1,
)

pub const multiplex_group_uid = Item(
  DataElementTag(0x003A, 0x0310),
  "Multiplex Group UID",
  [UniqueIdentifier],
  vm_1,
)

pub const powerline_frequency = Item(
  DataElementTag(0x003A, 0x0311),
  "Powerline Frequency",
  [DecimalString],
  vm_1,
)

pub const channel_impedance_sequence = Item(
  DataElementTag(0x003A, 0x0312),
  "Channel Impedance Sequence",
  [Sequence],
  vm_1,
)

pub const impedance_value = Item(
  DataElementTag(0x003A, 0x0313),
  "Impedance Value",
  [DecimalString],
  vm_1,
)

pub const impedance_measurement_date_time = Item(
  DataElementTag(0x003A, 0x0314),
  "Impedance Measurement DateTime",
  [DateTime],
  vm_1,
)

pub const impedance_measurement_frequency = Item(
  DataElementTag(0x003A, 0x0315),
  "Impedance Measurement Frequency",
  [DecimalString],
  vm_1,
)

pub const impedance_measurement_current_type = Item(
  DataElementTag(0x003A, 0x0316),
  "Impedance Measurement Current Type",
  [CodeString],
  vm_1,
)

pub const waveform_amplifier_type = Item(
  DataElementTag(0x003A, 0x0317),
  "Waveform Amplifier Type",
  [CodeString],
  vm_1,
)

pub const filter_low_frequency_characteristics_sequence = Item(
  DataElementTag(0x003A, 0x0318),
  "Filter Low Frequency Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const filter_high_frequency_characteristics_sequence = Item(
  DataElementTag(0x003A, 0x0319),
  "Filter High Frequency Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const summarized_filter_lookup_table = Item(
  DataElementTag(0x003A, 0x0320),
  "Summarized Filter Lookup Table Sequence",
  [Sequence],
  vm_1,
)

pub const notch_filter_characteristics_sequence = Item(
  DataElementTag(0x003A, 0x0321),
  "Notch Filter Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const waveform_filter_type = Item(
  DataElementTag(0x003A, 0x0322),
  "Waveform Filter Type",
  [CodeString],
  vm_1,
)

pub const analog_filter_characteristics_sequence = Item(
  DataElementTag(0x003A, 0x0323),
  "Analog Filter Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const analog_filter_roll_off = Item(
  DataElementTag(0x003A, 0x0324),
  "Analog Filter Roll Off",
  [DecimalString],
  vm_1,
)

pub const analog_filter_type = Item(
  DataElementTag(0x003A, 0x0325),
  "Analog Filter Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const digital_filter_characteristics_sequence = Item(
  DataElementTag(0x003A, 0x0326),
  "Digital Filter Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const digital_filter_order = Item(
  DataElementTag(0x003A, 0x0327),
  "Digital Filter Order",
  [IntegerString],
  vm_1,
)

pub const digital_filter_type_code_sequence = Item(
  DataElementTag(0x003A, 0x0328),
  "Digital Filter Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const waveform_filter_description = Item(
  DataElementTag(0x003A, 0x0329),
  "Waveform Filter Description",
  [ShortText],
  vm_1,
)

pub const filter_lookup_table_sequence = Item(
  DataElementTag(0x003A, 0x032A),
  "Filter Lookup Table Sequence",
  [Sequence],
  vm_1,
)

pub const filter_lookup_table_description = Item(
  DataElementTag(0x003A, 0x032B),
  "Filter Lookup Table Description",
  [ShortText],
  vm_1,
)

pub const frequency_encoding_code_sequence = Item(
  DataElementTag(0x003A, 0x032C),
  "Frequency Encoding Code Sequence",
  [Sequence],
  vm_1,
)

pub const magnitude_encoding_code_sequence = Item(
  DataElementTag(0x003A, 0x032D),
  "Magnitude Encoding Code Sequence",
  [Sequence],
  vm_1,
)

pub const filter_lookup_table_data = Item(
  DataElementTag(0x003A, 0x032E),
  "Filter Lookup Table Data",
  [OtherDoubleString],
  vm_1,
)

pub const scheduled_station_ae_title = Item(
  DataElementTag(0x0040, 0x0001),
  "Scheduled Station AE Title",
  [ApplicationEntity],
  vm_1_to_n,
)

pub const scheduled_procedure_step_start_date = Item(
  DataElementTag(0x0040, 0x0002),
  "Scheduled Procedure Step Start Date",
  [Date],
  vm_1,
)

pub const scheduled_procedure_step_start_time = Item(
  DataElementTag(0x0040, 0x0003),
  "Scheduled Procedure Step Start Time",
  [Time],
  vm_1,
)

pub const scheduled_procedure_step_end_date = Item(
  DataElementTag(0x0040, 0x0004),
  "Scheduled Procedure Step End Date",
  [Date],
  vm_1,
)

pub const scheduled_procedure_step_end_time = Item(
  DataElementTag(0x0040, 0x0005),
  "Scheduled Procedure Step End Time",
  [Time],
  vm_1,
)

pub const scheduled_performing_physician_name = Item(
  DataElementTag(0x0040, 0x0006),
  "Scheduled Performing Physician's Name",
  [PersonName],
  vm_1,
)

pub const scheduled_procedure_step_description = Item(
  DataElementTag(0x0040, 0x0007),
  "Scheduled Procedure Step Description",
  [LongString],
  vm_1,
)

pub const scheduled_protocol_code_sequence = Item(
  DataElementTag(0x0040, 0x0008),
  "Scheduled Protocol Code Sequence",
  [Sequence],
  vm_1,
)

pub const scheduled_procedure_step_id = Item(
  DataElementTag(0x0040, 0x0009),
  "Scheduled Procedure Step ID",
  [ShortString],
  vm_1,
)

pub const stage_code_sequence = Item(
  DataElementTag(0x0040, 0x000A),
  "Stage Code Sequence",
  [Sequence],
  vm_1,
)

pub const scheduled_performing_physician_identification_sequence = Item(
  DataElementTag(0x0040, 0x000B),
  "Scheduled Performing Physician Identification Sequence",
  [Sequence],
  vm_1,
)

pub const scheduled_station_name = Item(
  DataElementTag(0x0040, 0x0010),
  "Scheduled Station Name",
  [ShortString],
  vm_1_to_n,
)

pub const scheduled_procedure_step_location = Item(
  DataElementTag(0x0040, 0x0011),
  "Scheduled Procedure Step Location",
  [ShortString],
  vm_1,
)

pub const pre_medication = Item(
  DataElementTag(0x0040, 0x0012),
  "Pre-Medication",
  [LongString],
  vm_1,
)

pub const scheduled_procedure_step_status = Item(
  DataElementTag(0x0040, 0x0020),
  "Scheduled Procedure Step Status",
  [CodeString],
  vm_1,
)

pub const order_placer_identifier_sequence = Item(
  DataElementTag(0x0040, 0x0026),
  "Order Placer Identifier Sequence",
  [Sequence],
  vm_1,
)

pub const order_filler_identifier_sequence = Item(
  DataElementTag(0x0040, 0x0027),
  "Order Filler Identifier Sequence",
  [Sequence],
  vm_1,
)

pub const local_namespace_entity_id = Item(
  DataElementTag(0x0040, 0x0031),
  "Local Namespace Entity ID",
  [UnlimitedText],
  vm_1,
)

pub const universal_entity_id = Item(
  DataElementTag(0x0040, 0x0032),
  "Universal Entity ID",
  [UnlimitedText],
  vm_1,
)

pub const universal_entity_id_type = Item(
  DataElementTag(0x0040, 0x0033),
  "Universal Entity ID Type",
  [CodeString],
  vm_1,
)

pub const identifier_type_code = Item(
  DataElementTag(0x0040, 0x0035),
  "Identifier Type Code",
  [CodeString],
  vm_1,
)

pub const assigning_facility_sequence = Item(
  DataElementTag(0x0040, 0x0036),
  "Assigning Facility Sequence",
  [Sequence],
  vm_1,
)

pub const assigning_jurisdiction_code_sequence = Item(
  DataElementTag(0x0040, 0x0039),
  "Assigning Jurisdiction Code Sequence",
  [Sequence],
  vm_1,
)

pub const assigning_agency_or_department_code_sequence = Item(
  DataElementTag(0x0040, 0x003A),
  "Assigning Agency or Department Code Sequence",
  [Sequence],
  vm_1,
)

pub const scheduled_procedure_step_sequence = Item(
  DataElementTag(0x0040, 0x0100),
  "Scheduled Procedure Step Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_non_image_composite_sop_instance_sequence = Item(
  DataElementTag(0x0040, 0x0220),
  "Referenced Non-Image Composite SOP Instance Sequence",
  [Sequence],
  vm_1,
)

pub const performed_station_ae_title = Item(
  DataElementTag(0x0040, 0x0241),
  "Performed Station AE Title",
  [ApplicationEntity],
  vm_1,
)

pub const performed_station_name = Item(
  DataElementTag(0x0040, 0x0242),
  "Performed Station Name",
  [ShortString],
  vm_1,
)

pub const performed_location = Item(
  DataElementTag(0x0040, 0x0243),
  "Performed Location",
  [ShortString],
  vm_1,
)

pub const performed_procedure_step_start_date = Item(
  DataElementTag(0x0040, 0x0244),
  "Performed Procedure Step Start Date",
  [Date],
  vm_1,
)

pub const performed_procedure_step_start_time = Item(
  DataElementTag(0x0040, 0x0245),
  "Performed Procedure Step Start Time",
  [Time],
  vm_1,
)

pub const performed_procedure_step_end_date = Item(
  DataElementTag(0x0040, 0x0250),
  "Performed Procedure Step End Date",
  [Date],
  vm_1,
)

pub const performed_procedure_step_end_time = Item(
  DataElementTag(0x0040, 0x0251),
  "Performed Procedure Step End Time",
  [Time],
  vm_1,
)

pub const performed_procedure_step_status = Item(
  DataElementTag(0x0040, 0x0252),
  "Performed Procedure Step Status",
  [CodeString],
  vm_1,
)

pub const performed_procedure_step_id = Item(
  DataElementTag(0x0040, 0x0253),
  "Performed Procedure Step ID",
  [ShortString],
  vm_1,
)

pub const performed_procedure_step_description = Item(
  DataElementTag(0x0040, 0x0254),
  "Performed Procedure Step Description",
  [LongString],
  vm_1,
)

pub const performed_procedure_type_description = Item(
  DataElementTag(0x0040, 0x0255),
  "Performed Procedure Type Description",
  [LongString],
  vm_1,
)

pub const performed_protocol_code_sequence = Item(
  DataElementTag(0x0040, 0x0260),
  "Performed Protocol Code Sequence",
  [Sequence],
  vm_1,
)

pub const performed_protocol_type = Item(
  DataElementTag(0x0040, 0x0261),
  "Performed Protocol Type",
  [CodeString],
  vm_1,
)

pub const scheduled_step_attributes_sequence = Item(
  DataElementTag(0x0040, 0x0270),
  "Scheduled Step Attributes Sequence",
  [Sequence],
  vm_1,
)

pub const request_attributes_sequence = Item(
  DataElementTag(0x0040, 0x0275),
  "Request Attributes Sequence",
  [Sequence],
  vm_1,
)

pub const comments_on_the_performed_procedure_step = Item(
  DataElementTag(0x0040, 0x0280),
  "Comments on the Performed Procedure Step",
  [ShortText],
  vm_1,
)

pub const performed_procedure_step_discontinuation_reason_code_sequence = Item(
  DataElementTag(0x0040, 0x0281),
  "Performed Procedure Step Discontinuation Reason Code Sequence",
  [Sequence],
  vm_1,
)

pub const quantity_sequence = Item(
  DataElementTag(0x0040, 0x0293),
  "Quantity Sequence",
  [Sequence],
  vm_1,
)

pub const quantity = Item(
  DataElementTag(0x0040, 0x0294),
  "Quantity",
  [DecimalString],
  vm_1,
)

pub const measuring_units_sequence = Item(
  DataElementTag(0x0040, 0x0295),
  "Measuring Units Sequence",
  [Sequence],
  vm_1,
)

pub const billing_item_sequence = Item(
  DataElementTag(0x0040, 0x0296),
  "Billing Item Sequence",
  [Sequence],
  vm_1,
)

pub const total_time_of_fluoroscopy = Item(
  DataElementTag(0x0040, 0x0300),
  "Total Time of Fluoroscopy",
  [UnsignedShort],
  vm_1,
)

pub const total_number_of_exposures = Item(
  DataElementTag(0x0040, 0x0301),
  "Total Number of Exposures",
  [UnsignedShort],
  vm_1,
)

pub const entrance_dose = Item(
  DataElementTag(0x0040, 0x0302),
  "Entrance Dose",
  [UnsignedShort],
  vm_1,
)

pub const exposed_area = Item(
  DataElementTag(0x0040, 0x0303),
  "Exposed Area",
  [UnsignedShort],
  vm_1_to_2,
)

pub const distance_source_to_entrance = Item(
  DataElementTag(0x0040, 0x0306),
  "Distance Source to Entrance",
  [DecimalString],
  vm_1,
)

pub const distance_source_to_support = Item(
  DataElementTag(0x0040, 0x0307),
  "Distance Source to Support",
  [DecimalString],
  vm_1,
)

pub const exposure_dose_sequence = Item(
  DataElementTag(0x0040, 0x030E),
  "Exposure Dose Sequence",
  [Sequence],
  vm_1,
)

pub const comments_on_radiation_dose = Item(
  DataElementTag(0x0040, 0x0310),
  "Comments on Radiation Dose",
  [ShortText],
  vm_1,
)

pub const x_ray_output = Item(
  DataElementTag(0x0040, 0x0312),
  "X-Ray Output",
  [DecimalString],
  vm_1,
)

pub const half_value_layer = Item(
  DataElementTag(0x0040, 0x0314),
  "Half Value Layer",
  [DecimalString],
  vm_1,
)

pub const organ_dose = Item(
  DataElementTag(0x0040, 0x0316),
  "Organ Dose",
  [DecimalString],
  vm_1,
)

pub const organ_exposed = Item(
  DataElementTag(0x0040, 0x0318),
  "Organ Exposed",
  [CodeString],
  vm_1,
)

pub const billing_procedure_step_sequence = Item(
  DataElementTag(0x0040, 0x0320),
  "Billing Procedure Step Sequence",
  [Sequence],
  vm_1,
)

pub const film_consumption_sequence = Item(
  DataElementTag(0x0040, 0x0321),
  "Film Consumption Sequence",
  [Sequence],
  vm_1,
)

pub const billing_supplies_and_devices_sequence = Item(
  DataElementTag(0x0040, 0x0324),
  "Billing Supplies and Devices Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_procedure_step_sequence = Item(
  DataElementTag(0x0040, 0x0330),
  "Referenced Procedure Step Sequence",
  [Sequence],
  vm_1,
)

pub const performed_series_sequence = Item(
  DataElementTag(0x0040, 0x0340),
  "Performed Series Sequence",
  [Sequence],
  vm_1,
)

pub const comments_on_the_scheduled_procedure_step = Item(
  DataElementTag(0x0040, 0x0400),
  "Comments on the Scheduled Procedure Step",
  [LongText],
  vm_1,
)

pub const protocol_context_sequence = Item(
  DataElementTag(0x0040, 0x0440),
  "Protocol Context Sequence",
  [Sequence],
  vm_1,
)

pub const content_item_modifier_sequence = Item(
  DataElementTag(0x0040, 0x0441),
  "Content Item Modifier Sequence",
  [Sequence],
  vm_1,
)

pub const scheduled_specimen_sequence = Item(
  DataElementTag(0x0040, 0x0500),
  "Scheduled Specimen Sequence",
  [Sequence],
  vm_1,
)

pub const specimen_accession_number = Item(
  DataElementTag(0x0040, 0x050A),
  "Specimen Accession Number",
  [LongString],
  vm_1,
)

pub const container_identifier = Item(
  DataElementTag(0x0040, 0x0512),
  "Container Identifier",
  [LongString],
  vm_1,
)

pub const issuer_of_the_container_identifier_sequence = Item(
  DataElementTag(0x0040, 0x0513),
  "Issuer of the Container Identifier Sequence",
  [Sequence],
  vm_1,
)

pub const alternate_container_identifier_sequence = Item(
  DataElementTag(0x0040, 0x0515),
  "Alternate Container Identifier Sequence",
  [Sequence],
  vm_1,
)

pub const container_type_code_sequence = Item(
  DataElementTag(0x0040, 0x0518),
  "Container Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const container_description = Item(
  DataElementTag(0x0040, 0x051A),
  "Container Description",
  [LongString],
  vm_1,
)

pub const container_component_sequence = Item(
  DataElementTag(0x0040, 0x0520),
  "Container Component Sequence",
  [Sequence],
  vm_1,
)

pub const specimen_sequence = Item(
  DataElementTag(0x0040, 0x0550),
  "Specimen Sequence",
  [Sequence],
  vm_1,
)

pub const specimen_identifier = Item(
  DataElementTag(0x0040, 0x0551),
  "Specimen Identifier",
  [LongString],
  vm_1,
)

pub const specimen_description_sequence_trial = Item(
  DataElementTag(0x0040, 0x0552),
  "Specimen Description Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const specimen_description_trial = Item(
  DataElementTag(0x0040, 0x0553),
  "Specimen Description (Trial)",
  [ShortText],
  vm_1,
)

pub const specimen_uid = Item(
  DataElementTag(0x0040, 0x0554),
  "Specimen UID",
  [UniqueIdentifier],
  vm_1,
)

pub const acquisition_context_sequence = Item(
  DataElementTag(0x0040, 0x0555),
  "Acquisition Context Sequence",
  [Sequence],
  vm_1,
)

pub const acquisition_context_description = Item(
  DataElementTag(0x0040, 0x0556),
  "Acquisition Context Description",
  [ShortText],
  vm_1,
)

pub const specimen_description_sequence = Item(
  DataElementTag(0x0040, 0x0560),
  "Specimen Description Sequence",
  [Sequence],
  vm_1,
)

pub const issuer_of_the_specimen_identifier_sequence = Item(
  DataElementTag(0x0040, 0x0562),
  "Issuer of the Specimen Identifier Sequence",
  [Sequence],
  vm_1,
)

pub const specimen_type_code_sequence = Item(
  DataElementTag(0x0040, 0x059A),
  "Specimen Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const specimen_short_description = Item(
  DataElementTag(0x0040, 0x0600),
  "Specimen Short Description",
  [LongString],
  vm_1,
)

pub const specimen_detailed_description = Item(
  DataElementTag(0x0040, 0x0602),
  "Specimen Detailed Description",
  [UnlimitedText],
  vm_1,
)

pub const specimen_preparation_sequence = Item(
  DataElementTag(0x0040, 0x0610),
  "Specimen Preparation Sequence",
  [Sequence],
  vm_1,
)

pub const specimen_preparation_step_content_item_sequence = Item(
  DataElementTag(0x0040, 0x0612),
  "Specimen Preparation Step Content Item Sequence",
  [Sequence],
  vm_1,
)

pub const specimen_localization_content_item_sequence = Item(
  DataElementTag(0x0040, 0x0620),
  "Specimen Localization Content Item Sequence",
  [Sequence],
  vm_1,
)

pub const slide_identifier = Item(
  DataElementTag(0x0040, 0x06FA),
  "Slide Identifier",
  [LongString],
  vm_1,
)

pub const whole_slide_microscopy_image_frame_type_sequence = Item(
  DataElementTag(0x0040, 0x0710),
  "Whole Slide Microscopy Image Frame Type Sequence",
  [Sequence],
  vm_1,
)

pub const image_center_point_coordinates_sequence = Item(
  DataElementTag(0x0040, 0x071A),
  "Image Center Point Coordinates Sequence",
  [Sequence],
  vm_1,
)

pub const x_offset_in_slide_coordinate_system = Item(
  DataElementTag(0x0040, 0x072A),
  "X Offset in Slide Coordinate System",
  [DecimalString],
  vm_1,
)

pub const y_offset_in_slide_coordinate_system = Item(
  DataElementTag(0x0040, 0x073A),
  "Y Offset in Slide Coordinate System",
  [DecimalString],
  vm_1,
)

pub const z_offset_in_slide_coordinate_system = Item(
  DataElementTag(0x0040, 0x074A),
  "Z Offset in Slide Coordinate System",
  [DecimalString],
  vm_1,
)

pub const pixel_spacing_sequence = Item(
  DataElementTag(0x0040, 0x08D8),
  "Pixel Spacing Sequence",
  [Sequence],
  vm_1,
)

pub const coordinate_system_axis_code_sequence = Item(
  DataElementTag(0x0040, 0x08DA),
  "Coordinate System Axis Code Sequence",
  [Sequence],
  vm_1,
)

pub const measurement_units_code_sequence = Item(
  DataElementTag(0x0040, 0x08EA),
  "Measurement Units Code Sequence",
  [Sequence],
  vm_1,
)

pub const vital_stain_code_sequence_trial = Item(
  DataElementTag(0x0040, 0x09F8),
  "Vital Stain Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const requested_procedure_id = Item(
  DataElementTag(0x0040, 0x1001),
  "Requested Procedure ID",
  [ShortString],
  vm_1,
)

pub const reason_for_the_requested_procedure = Item(
  DataElementTag(0x0040, 0x1002),
  "Reason for the Requested Procedure",
  [LongString],
  vm_1,
)

pub const requested_procedure_priority = Item(
  DataElementTag(0x0040, 0x1003),
  "Requested Procedure Priority",
  [ShortString],
  vm_1,
)

pub const patient_transport_arrangements = Item(
  DataElementTag(0x0040, 0x1004),
  "Patient Transport Arrangements",
  [LongString],
  vm_1,
)

pub const requested_procedure_location = Item(
  DataElementTag(0x0040, 0x1005),
  "Requested Procedure Location",
  [LongString],
  vm_1,
)

pub const placer_order_number_procedure = Item(
  DataElementTag(0x0040, 0x1006),
  "Placer Order Number / Procedure",
  [ShortString],
  vm_1,
)

pub const filler_order_number_procedure = Item(
  DataElementTag(0x0040, 0x1007),
  "Filler Order Number / Procedure",
  [ShortString],
  vm_1,
)

pub const confidentiality_code = Item(
  DataElementTag(0x0040, 0x1008),
  "Confidentiality Code",
  [LongString],
  vm_1,
)

pub const reporting_priority = Item(
  DataElementTag(0x0040, 0x1009),
  "Reporting Priority",
  [ShortString],
  vm_1,
)

pub const reason_for_requested_procedure_code_sequence = Item(
  DataElementTag(0x0040, 0x100A),
  "Reason for Requested Procedure Code Sequence",
  [Sequence],
  vm_1,
)

pub const names_of_intended_recipients_of_results = Item(
  DataElementTag(0x0040, 0x1010),
  "Names of Intended Recipients of Results",
  [PersonName],
  vm_1_to_n,
)

pub const intended_recipients_of_results_identification_sequence = Item(
  DataElementTag(0x0040, 0x1011),
  "Intended Recipients of Results Identification Sequence",
  [Sequence],
  vm_1,
)

pub const reason_for_performed_procedure_code_sequence = Item(
  DataElementTag(0x0040, 0x1012),
  "Reason For Performed Procedure Code Sequence",
  [Sequence],
  vm_1,
)

pub const requested_procedure_description_trial = Item(
  DataElementTag(0x0040, 0x1060),
  "Requested Procedure Description (Trial)",
  [LongString],
  vm_1,
)

pub const person_identification_code_sequence = Item(
  DataElementTag(0x0040, 0x1101),
  "Person Identification Code Sequence",
  [Sequence],
  vm_1,
)

pub const person_address = Item(
  DataElementTag(0x0040, 0x1102),
  "Person's Address",
  [ShortText],
  vm_1,
)

pub const person_telephone_numbers = Item(
  DataElementTag(0x0040, 0x1103),
  "Person's Telephone Numbers",
  [LongString],
  vm_1_to_n,
)

pub const person_telecom_information = Item(
  DataElementTag(0x0040, 0x1104),
  "Person's Telecom Information",
  [LongText],
  vm_1,
)

pub const requested_procedure_comments = Item(
  DataElementTag(0x0040, 0x1400),
  "Requested Procedure Comments",
  [LongText],
  vm_1,
)

pub const reason_for_the_imaging_service_request = Item(
  DataElementTag(0x0040, 0x2001),
  "Reason for the Imaging Service Request",
  [LongString],
  vm_1,
)

pub const issue_date_of_imaging_service_request = Item(
  DataElementTag(0x0040, 0x2004),
  "Issue Date of Imaging Service Request",
  [Date],
  vm_1,
)

pub const issue_time_of_imaging_service_request = Item(
  DataElementTag(0x0040, 0x2005),
  "Issue Time of Imaging Service Request",
  [Time],
  vm_1,
)

pub const placer_order_number_imaging_service_request_retired = Item(
  DataElementTag(0x0040, 0x2006),
  "Placer Order Number / Imaging Service Request (Retired)",
  [ShortString],
  vm_1,
)

pub const filler_order_number_imaging_service_request_retired = Item(
  DataElementTag(0x0040, 0x2007),
  "Filler Order Number / Imaging Service Request (Retired)",
  [ShortString],
  vm_1,
)

pub const order_entered_by = Item(
  DataElementTag(0x0040, 0x2008),
  "Order Entered By",
  [PersonName],
  vm_1,
)

pub const order_enterer_location = Item(
  DataElementTag(0x0040, 0x2009),
  "Order Enterer's Location",
  [ShortString],
  vm_1,
)

pub const order_callback_phone_number = Item(
  DataElementTag(0x0040, 0x2010),
  "Order Callback Phone Number",
  [ShortString],
  vm_1,
)

pub const order_callback_telecom_information = Item(
  DataElementTag(0x0040, 0x2011),
  "Order Callback Telecom Information",
  [LongText],
  vm_1,
)

pub const placer_order_number_imaging_service_request = Item(
  DataElementTag(0x0040, 0x2016),
  "Placer Order Number / Imaging Service Request",
  [LongString],
  vm_1,
)

pub const filler_order_number_imaging_service_request = Item(
  DataElementTag(0x0040, 0x2017),
  "Filler Order Number / Imaging Service Request",
  [LongString],
  vm_1,
)

pub const imaging_service_request_comments = Item(
  DataElementTag(0x0040, 0x2400),
  "Imaging Service Request Comments",
  [LongText],
  vm_1,
)

pub const confidentiality_constraint_on_patient_data_description = Item(
  DataElementTag(0x0040, 0x3001),
  "Confidentiality Constraint on Patient Data Description",
  [LongString],
  vm_1,
)

pub const general_purpose_scheduled_procedure_step_status = Item(
  DataElementTag(0x0040, 0x4001),
  "General Purpose Scheduled Procedure Step Status",
  [CodeString],
  vm_1,
)

pub const general_purpose_performed_procedure_step_status = Item(
  DataElementTag(0x0040, 0x4002),
  "General Purpose Performed Procedure Step Status",
  [CodeString],
  vm_1,
)

pub const general_purpose_scheduled_procedure_step_priority = Item(
  DataElementTag(0x0040, 0x4003),
  "General Purpose Scheduled Procedure Step Priority",
  [CodeString],
  vm_1,
)

pub const scheduled_processing_applications_code_sequence = Item(
  DataElementTag(0x0040, 0x4004),
  "Scheduled Processing Applications Code Sequence",
  [Sequence],
  vm_1,
)

pub const scheduled_procedure_step_start_date_time = Item(
  DataElementTag(0x0040, 0x4005),
  "Scheduled Procedure Step Start DateTime",
  [DateTime],
  vm_1,
)

pub const multiple_copies_flag = Item(
  DataElementTag(0x0040, 0x4006),
  "Multiple Copies Flag",
  [CodeString],
  vm_1,
)

pub const performed_processing_applications_code_sequence = Item(
  DataElementTag(0x0040, 0x4007),
  "Performed Processing Applications Code Sequence",
  [Sequence],
  vm_1,
)

pub const scheduled_procedure_step_expiration_date_time = Item(
  DataElementTag(0x0040, 0x4008),
  "Scheduled Procedure Step Expiration DateTime",
  [DateTime],
  vm_1,
)

pub const human_performer_code_sequence = Item(
  DataElementTag(0x0040, 0x4009),
  "Human Performer Code Sequence",
  [Sequence],
  vm_1,
)

pub const scheduled_procedure_step_modification_date_time = Item(
  DataElementTag(0x0040, 0x4010),
  "Scheduled Procedure Step Modification DateTime",
  [DateTime],
  vm_1,
)

pub const expected_completion_date_time = Item(
  DataElementTag(0x0040, 0x4011),
  "Expected Completion DateTime",
  [DateTime],
  vm_1,
)

pub const resulting_general_purpose_performed_procedure_steps_sequence = Item(
  DataElementTag(0x0040, 0x4015),
  "Resulting General Purpose Performed Procedure Steps Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_general_purpose_scheduled_procedure_step_sequence = Item(
  DataElementTag(0x0040, 0x4016),
  "Referenced General Purpose Scheduled Procedure Step Sequence",
  [Sequence],
  vm_1,
)

pub const scheduled_workitem_code_sequence = Item(
  DataElementTag(0x0040, 0x4018),
  "Scheduled Workitem Code Sequence",
  [Sequence],
  vm_1,
)

pub const performed_workitem_code_sequence = Item(
  DataElementTag(0x0040, 0x4019),
  "Performed Workitem Code Sequence",
  [Sequence],
  vm_1,
)

pub const input_availability_flag = Item(
  DataElementTag(0x0040, 0x4020),
  "Input Availability Flag",
  [CodeString],
  vm_1,
)

pub const input_information_sequence = Item(
  DataElementTag(0x0040, 0x4021),
  "Input Information Sequence",
  [Sequence],
  vm_1,
)

pub const relevant_information_sequence = Item(
  DataElementTag(0x0040, 0x4022),
  "Relevant Information Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_general_purpose_scheduled_procedure_step_transaction_uid = Item(
  DataElementTag(0x0040, 0x4023),
  "Referenced General Purpose Scheduled Procedure Step Transaction UID",
  [UniqueIdentifier],
  vm_1,
)

pub const scheduled_station_name_code_sequence = Item(
  DataElementTag(0x0040, 0x4025),
  "Scheduled Station Name Code Sequence",
  [Sequence],
  vm_1,
)

pub const scheduled_station_class_code_sequence = Item(
  DataElementTag(0x0040, 0x4026),
  "Scheduled Station Class Code Sequence",
  [Sequence],
  vm_1,
)

pub const scheduled_station_geographic_location_code_sequence = Item(
  DataElementTag(0x0040, 0x4027),
  "Scheduled Station Geographic Location Code Sequence",
  [Sequence],
  vm_1,
)

pub const performed_station_name_code_sequence = Item(
  DataElementTag(0x0040, 0x4028),
  "Performed Station Name Code Sequence",
  [Sequence],
  vm_1,
)

pub const performed_station_class_code_sequence = Item(
  DataElementTag(0x0040, 0x4029),
  "Performed Station Class Code Sequence",
  [Sequence],
  vm_1,
)

pub const performed_station_geographic_location_code_sequence = Item(
  DataElementTag(0x0040, 0x4030),
  "Performed Station Geographic Location Code Sequence",
  [Sequence],
  vm_1,
)

pub const requested_subsequent_workitem_code_sequence = Item(
  DataElementTag(0x0040, 0x4031),
  "Requested Subsequent Workitem Code Sequence",
  [Sequence],
  vm_1,
)

pub const non_dicom_output_code_sequence = Item(
  DataElementTag(0x0040, 0x4032),
  "Non-DICOM Output Code Sequence",
  [Sequence],
  vm_1,
)

pub const output_information_sequence = Item(
  DataElementTag(0x0040, 0x4033),
  "Output Information Sequence",
  [Sequence],
  vm_1,
)

pub const scheduled_human_performers_sequence = Item(
  DataElementTag(0x0040, 0x4034),
  "Scheduled Human Performers Sequence",
  [Sequence],
  vm_1,
)

pub const actual_human_performers_sequence = Item(
  DataElementTag(0x0040, 0x4035),
  "Actual Human Performers Sequence",
  [Sequence],
  vm_1,
)

pub const human_performer_organization = Item(
  DataElementTag(0x0040, 0x4036),
  "Human Performer's Organization",
  [LongString],
  vm_1,
)

pub const human_performer_name = Item(
  DataElementTag(0x0040, 0x4037),
  "Human Performer's Name",
  [PersonName],
  vm_1,
)

pub const raw_data_handling = Item(
  DataElementTag(0x0040, 0x4040),
  "Raw Data Handling",
  [CodeString],
  vm_1,
)

pub const input_readiness_state = Item(
  DataElementTag(0x0040, 0x4041),
  "Input Readiness State",
  [CodeString],
  vm_1,
)

pub const performed_procedure_step_start_date_time = Item(
  DataElementTag(0x0040, 0x4050),
  "Performed Procedure Step Start DateTime",
  [DateTime],
  vm_1,
)

pub const performed_procedure_step_end_date_time = Item(
  DataElementTag(0x0040, 0x4051),
  "Performed Procedure Step End DateTime",
  [DateTime],
  vm_1,
)

pub const procedure_step_cancellation_date_time = Item(
  DataElementTag(0x0040, 0x4052),
  "Procedure Step Cancellation DateTime",
  [DateTime],
  vm_1,
)

pub const output_destination_sequence = Item(
  DataElementTag(0x0040, 0x4070),
  "Output Destination Sequence",
  [Sequence],
  vm_1,
)

pub const dicom_storage_sequence = Item(
  DataElementTag(0x0040, 0x4071),
  "DICOM Storage Sequence",
  [Sequence],
  vm_1,
)

pub const stowrs_storage_sequence = Item(
  DataElementTag(0x0040, 0x4072),
  "STOW-RS Storage Sequence",
  [Sequence],
  vm_1,
)

pub const storage_url = Item(
  DataElementTag(0x0040, 0x4073),
  "Storage URL",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const xds_storage_sequence = Item(
  DataElementTag(0x0040, 0x4074),
  "XDS Storage Sequence",
  [Sequence],
  vm_1,
)

pub const entrance_dose_inm_gy = Item(
  DataElementTag(0x0040, 0x8302),
  "Entrance Dose in mGy",
  [DecimalString],
  vm_1,
)

pub const entrance_dose_derivation = Item(
  DataElementTag(0x0040, 0x8303),
  "Entrance Dose Derivation",
  [CodeString],
  vm_1,
)

pub const parametric_map_frame_type_sequence = Item(
  DataElementTag(0x0040, 0x9092),
  "Parametric Map Frame Type Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_image_real_world_value_mapping_sequence = Item(
  DataElementTag(0x0040, 0x9094),
  "Referenced Image Real World Value Mapping Sequence",
  [Sequence],
  vm_1,
)

pub const real_world_value_mapping_sequence = Item(
  DataElementTag(0x0040, 0x9096),
  "Real World Value Mapping Sequence",
  [Sequence],
  vm_1,
)

pub const pixel_value_mapping_code_sequence = Item(
  DataElementTag(0x0040, 0x9098),
  "Pixel Value Mapping Code Sequence",
  [Sequence],
  vm_1,
)

pub const lut_label = Item(
  DataElementTag(0x0040, 0x9210),
  "LUT Label",
  [ShortString],
  vm_1,
)

pub const real_world_value_last_value_mapped = Item(
  DataElementTag(0x0040, 0x9211),
  "Real World Value Last Value Mapped",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const real_world_value_lut_data = Item(
  DataElementTag(0x0040, 0x9212),
  "Real World Value LUT Data",
  [FloatingPointDouble],
  vm_1_to_n,
)

pub const double_float_real_world_value_last_value_mapped = Item(
  DataElementTag(0x0040, 0x9213),
  "Double Float Real World Value Last Value Mapped",
  [FloatingPointDouble],
  vm_1,
)

pub const double_float_real_world_value_first_value_mapped = Item(
  DataElementTag(0x0040, 0x9214),
  "Double Float Real World Value First Value Mapped",
  [FloatingPointDouble],
  vm_1,
)

pub const real_world_value_first_value_mapped = Item(
  DataElementTag(0x0040, 0x9216),
  "Real World Value First Value Mapped",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const quantity_definition_sequence = Item(
  DataElementTag(0x0040, 0x9220),
  "Quantity Definition Sequence",
  [Sequence],
  vm_1,
)

pub const real_world_value_intercept = Item(
  DataElementTag(0x0040, 0x9224),
  "Real World Value Intercept",
  [FloatingPointDouble],
  vm_1,
)

pub const real_world_value_slope = Item(
  DataElementTag(0x0040, 0x9225),
  "Real World Value Slope",
  [FloatingPointDouble],
  vm_1,
)

pub const findings_flag_trial = Item(
  DataElementTag(0x0040, 0xA007),
  "Findings Flag (Trial)",
  [CodeString],
  vm_1,
)

pub const relationship_type = Item(
  DataElementTag(0x0040, 0xA010),
  "Relationship Type",
  [CodeString],
  vm_1,
)

pub const findings_sequence_trial = Item(
  DataElementTag(0x0040, 0xA020),
  "Findings Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const findings_group_uid_trial = Item(
  DataElementTag(0x0040, 0xA021),
  "Findings Group UID (Trial)",
  [UniqueIdentifier],
  vm_1,
)

pub const referenced_findings_group_uid_trial = Item(
  DataElementTag(0x0040, 0xA022),
  "Referenced Findings Group UID (Trial)",
  [UniqueIdentifier],
  vm_1,
)

pub const findings_group_recording_date_trial = Item(
  DataElementTag(0x0040, 0xA023),
  "Findings Group Recording Date (Trial)",
  [Date],
  vm_1,
)

pub const findings_group_recording_time_trial = Item(
  DataElementTag(0x0040, 0xA024),
  "Findings Group Recording Time (Trial)",
  [Time],
  vm_1,
)

pub const findings_source_category_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA026),
  "Findings Source Category Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const verifying_organization = Item(
  DataElementTag(0x0040, 0xA027),
  "Verifying Organization",
  [LongString],
  vm_1,
)

pub const documenting_organization_identifier_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA028),
  "Documenting Organization Identifier Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const verification_date_time = Item(
  DataElementTag(0x0040, 0xA030),
  "Verification DateTime",
  [DateTime],
  vm_1,
)

pub const observation_date_time = Item(
  DataElementTag(0x0040, 0xA032),
  "Observation DateTime",
  [DateTime],
  vm_1,
)

pub const observation_start_date_time = Item(
  DataElementTag(0x0040, 0xA033),
  "Observation Start DateTime",
  [DateTime],
  vm_1,
)

pub const value_type = Item(
  DataElementTag(0x0040, 0xA040),
  "Value Type",
  [CodeString],
  vm_1,
)

pub const concept_name_code_sequence = Item(
  DataElementTag(0x0040, 0xA043),
  "Concept Name Code Sequence",
  [Sequence],
  vm_1,
)

pub const measurement_precision_description_trial = Item(
  DataElementTag(0x0040, 0xA047),
  "Measurement Precision Description (Trial)",
  [LongString],
  vm_1,
)

pub const continuity_of_content = Item(
  DataElementTag(0x0040, 0xA050),
  "Continuity Of Content",
  [CodeString],
  vm_1,
)

pub const urgency_or_priority_alerts_trial = Item(
  DataElementTag(0x0040, 0xA057),
  "Urgency or Priority Alerts (Trial)",
  [CodeString],
  vm_1_to_n,
)

pub const sequencing_indicator_trial = Item(
  DataElementTag(0x0040, 0xA060),
  "Sequencing Indicator (Trial)",
  [LongString],
  vm_1,
)

pub const document_identifier_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA066),
  "Document Identifier Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const document_author_trial = Item(
  DataElementTag(0x0040, 0xA067),
  "Document Author (Trial)",
  [PersonName],
  vm_1,
)

pub const document_author_identifier_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA068),
  "Document Author Identifier Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const identifier_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA070),
  "Identifier Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const verifying_observer_sequence = Item(
  DataElementTag(0x0040, 0xA073),
  "Verifying Observer Sequence",
  [Sequence],
  vm_1,
)

pub const object_binary_identifier_trial = Item(
  DataElementTag(0x0040, 0xA074),
  "Object Binary Identifier (Trial)",
  [OtherByteString],
  vm_1,
)

pub const verifying_observer_name = Item(
  DataElementTag(0x0040, 0xA075),
  "Verifying Observer Name",
  [PersonName],
  vm_1,
)

pub const documenting_observer_identifier_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA076),
  "Documenting Observer Identifier Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const author_observer_sequence = Item(
  DataElementTag(0x0040, 0xA078),
  "Author Observer Sequence",
  [Sequence],
  vm_1,
)

pub const participant_sequence = Item(
  DataElementTag(0x0040, 0xA07A),
  "Participant Sequence",
  [Sequence],
  vm_1,
)

pub const custodial_organization_sequence = Item(
  DataElementTag(0x0040, 0xA07C),
  "Custodial Organization Sequence",
  [Sequence],
  vm_1,
)

pub const participation_type = Item(
  DataElementTag(0x0040, 0xA080),
  "Participation Type",
  [CodeString],
  vm_1,
)

pub const participation_date_time = Item(
  DataElementTag(0x0040, 0xA082),
  "Participation DateTime",
  [DateTime],
  vm_1,
)

pub const observer_type = Item(
  DataElementTag(0x0040, 0xA084),
  "Observer Type",
  [CodeString],
  vm_1,
)

pub const procedure_identifier_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA085),
  "Procedure Identifier Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const verifying_observer_identification_code_sequence = Item(
  DataElementTag(0x0040, 0xA088),
  "Verifying Observer Identification Code Sequence",
  [Sequence],
  vm_1,
)

pub const object_directory_binary_identifier_trial = Item(
  DataElementTag(0x0040, 0xA089),
  "Object Directory Binary Identifier (Trial)",
  [OtherByteString],
  vm_1,
)

pub const equivalent_cda_document_sequence = Item(
  DataElementTag(0x0040, 0xA090),
  "Equivalent CDA Document Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_waveform_channels = Item(
  DataElementTag(0x0040, 0xA0B0),
  "Referenced Waveform Channels",
  [UnsignedShort],
  vm_2_to_n,
)

pub const date_of_document_or_verbal_transaction_trial = Item(
  DataElementTag(0x0040, 0xA110),
  "Date of Document or Verbal Transaction (Trial)",
  [Date],
  vm_1,
)

pub const time_of_document_creation_or_verbal_transaction_trial = Item(
  DataElementTag(0x0040, 0xA112),
  "Time of Document Creation or Verbal Transaction (Trial)",
  [Time],
  vm_1,
)

pub const date_time = Item(
  DataElementTag(0x0040, 0xA120),
  "DateTime",
  [DateTime],
  vm_1,
)

pub const date = Item(DataElementTag(0x0040, 0xA121), "Date", [Date], vm_1)

pub const time = Item(DataElementTag(0x0040, 0xA122), "Time", [Time], vm_1)

pub const person_name = Item(
  DataElementTag(0x0040, 0xA123),
  "Person Name",
  [PersonName],
  vm_1,
)

pub const uid = Item(
  DataElementTag(0x0040, 0xA124),
  "UID",
  [UniqueIdentifier],
  vm_1,
)

pub const report_status_id_trial = Item(
  DataElementTag(0x0040, 0xA125),
  "Report Status ID (Trial)",
  [CodeString],
  vm_2,
)

pub const temporal_range_type = Item(
  DataElementTag(0x0040, 0xA130),
  "Temporal Range Type",
  [CodeString],
  vm_1,
)

pub const referenced_sample_positions = Item(
  DataElementTag(0x0040, 0xA132),
  "Referenced Sample Positions",
  [UnsignedLong],
  vm_1_to_n,
)

pub const referenced_frame_numbers = Item(
  DataElementTag(0x0040, 0xA136),
  "Referenced Frame Numbers",
  [UnsignedShort],
  vm_1_to_n,
)

pub const referenced_time_offsets = Item(
  DataElementTag(0x0040, 0xA138),
  "Referenced Time Offsets",
  [DecimalString],
  vm_1_to_n,
)

pub const referenced_date_time = Item(
  DataElementTag(0x0040, 0xA13A),
  "Referenced DateTime",
  [DateTime],
  vm_1_to_n,
)

pub const text_value = Item(
  DataElementTag(0x0040, 0xA160),
  "Text Value",
  [UnlimitedText],
  vm_1,
)

pub const floating_point_value = Item(
  DataElementTag(0x0040, 0xA161),
  "Floating Point Value",
  [FloatingPointDouble],
  vm_1_to_n,
)

pub const rational_numerator_value = Item(
  DataElementTag(0x0040, 0xA162),
  "Rational Numerator Value",
  [SignedLong],
  vm_1_to_n,
)

pub const rational_denominator_value = Item(
  DataElementTag(0x0040, 0xA163),
  "Rational Denominator Value",
  [UnsignedLong],
  vm_1_to_n,
)

pub const observation_category_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA167),
  "Observation Category Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const concept_code_sequence = Item(
  DataElementTag(0x0040, 0xA168),
  "Concept Code Sequence",
  [Sequence],
  vm_1,
)

pub const bibliographic_citation_trial = Item(
  DataElementTag(0x0040, 0xA16A),
  "Bibliographic Citation (Trial)",
  [ShortText],
  vm_1,
)

pub const purpose_of_reference_code_sequence = Item(
  DataElementTag(0x0040, 0xA170),
  "Purpose of Reference Code Sequence",
  [Sequence],
  vm_1,
)

pub const observation_uid = Item(
  DataElementTag(0x0040, 0xA171),
  "Observation UID",
  [UniqueIdentifier],
  vm_1,
)

pub const referenced_observation_uid_trial = Item(
  DataElementTag(0x0040, 0xA172),
  "Referenced Observation UID (Trial)",
  [UniqueIdentifier],
  vm_1,
)

pub const referenced_observation_class_trial = Item(
  DataElementTag(0x0040, 0xA173),
  "Referenced Observation Class (Trial)",
  [CodeString],
  vm_1,
)

pub const referenced_object_observation_class_trial = Item(
  DataElementTag(0x0040, 0xA174),
  "Referenced Object Observation Class (Trial)",
  [CodeString],
  vm_1,
)

pub const annotation_group_number = Item(
  DataElementTag(0x0040, 0xA180),
  "Annotation Group Number",
  [UnsignedShort],
  vm_1,
)

pub const observation_date_trial = Item(
  DataElementTag(0x0040, 0xA192),
  "Observation Date (Trial)",
  [Date],
  vm_1,
)

pub const observation_time_trial = Item(
  DataElementTag(0x0040, 0xA193),
  "Observation Time (Trial)",
  [Time],
  vm_1,
)

pub const measurement_automation_trial = Item(
  DataElementTag(0x0040, 0xA194),
  "Measurement Automation (Trial)",
  [CodeString],
  vm_1,
)

pub const modifier_code_sequence = Item(
  DataElementTag(0x0040, 0xA195),
  "Modifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const identification_description_trial = Item(
  DataElementTag(0x0040, 0xA224),
  "Identification Description (Trial)",
  [ShortText],
  vm_1,
)

pub const coordinates_set_geometric_type_trial = Item(
  DataElementTag(0x0040, 0xA290),
  "Coordinates Set Geometric Type (Trial)",
  [CodeString],
  vm_1,
)

pub const algorithm_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA296),
  "Algorithm Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const algorithm_description_trial = Item(
  DataElementTag(0x0040, 0xA297),
  "Algorithm Description (Trial)",
  [ShortText],
  vm_1,
)

pub const pixel_coordinates_set_trial = Item(
  DataElementTag(0x0040, 0xA29A),
  "Pixel Coordinates Set (Trial)",
  [SignedLong],
  vm_2_to_n,
)

pub const measured_value_sequence = Item(
  DataElementTag(0x0040, 0xA300),
  "Measured Value Sequence",
  [Sequence],
  vm_1,
)

pub const numeric_value_qualifier_code_sequence = Item(
  DataElementTag(0x0040, 0xA301),
  "Numeric Value Qualifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const current_observer_trial = Item(
  DataElementTag(0x0040, 0xA307),
  "Current Observer (Trial)",
  [PersonName],
  vm_1,
)

pub const numeric_value = Item(
  DataElementTag(0x0040, 0xA30A),
  "Numeric Value",
  [DecimalString],
  vm_1_to_n,
)

pub const referenced_accession_sequence_trial = Item(
  DataElementTag(0x0040, 0xA313),
  "Referenced Accession Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const report_status_comment_trial = Item(
  DataElementTag(0x0040, 0xA33A),
  "Report Status Comment (Trial)",
  [ShortText],
  vm_1,
)

pub const procedure_context_sequence_trial = Item(
  DataElementTag(0x0040, 0xA340),
  "Procedure Context Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const verbal_source_trial = Item(
  DataElementTag(0x0040, 0xA352),
  "Verbal Source (Trial)",
  [PersonName],
  vm_1,
)

pub const address_trial = Item(
  DataElementTag(0x0040, 0xA353),
  "Address (Trial)",
  [ShortText],
  vm_1,
)

pub const telephone_number_trial = Item(
  DataElementTag(0x0040, 0xA354),
  "Telephone Number (Trial)",
  [LongString],
  vm_1,
)

pub const verbal_source_identifier_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA358),
  "Verbal Source Identifier Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const predecessor_documents_sequence = Item(
  DataElementTag(0x0040, 0xA360),
  "Predecessor Documents Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_request_sequence = Item(
  DataElementTag(0x0040, 0xA370),
  "Referenced Request Sequence",
  [Sequence],
  vm_1,
)

pub const performed_procedure_code_sequence = Item(
  DataElementTag(0x0040, 0xA372),
  "Performed Procedure Code Sequence",
  [Sequence],
  vm_1,
)

pub const current_requested_procedure_evidence_sequence = Item(
  DataElementTag(0x0040, 0xA375),
  "Current Requested Procedure Evidence Sequence",
  [Sequence],
  vm_1,
)

pub const report_detail_sequence_trial = Item(
  DataElementTag(0x0040, 0xA380),
  "Report Detail Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const pertinent_other_evidence_sequence = Item(
  DataElementTag(0x0040, 0xA385),
  "Pertinent Other Evidence Sequence",
  [Sequence],
  vm_1,
)

pub const hl7_structured_document_reference_sequence = Item(
  DataElementTag(0x0040, 0xA390),
  "HL7 Structured Document Reference Sequence",
  [Sequence],
  vm_1,
)

pub const observation_subject_uid_trial = Item(
  DataElementTag(0x0040, 0xA402),
  "Observation Subject UID (Trial)",
  [UniqueIdentifier],
  vm_1,
)

pub const observation_subject_class_trial = Item(
  DataElementTag(0x0040, 0xA403),
  "Observation Subject Class (Trial)",
  [CodeString],
  vm_1,
)

pub const observation_subject_type_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA404),
  "Observation Subject Type Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const completion_flag = Item(
  DataElementTag(0x0040, 0xA491),
  "Completion Flag",
  [CodeString],
  vm_1,
)

pub const completion_flag_description = Item(
  DataElementTag(0x0040, 0xA492),
  "Completion Flag Description",
  [LongString],
  vm_1,
)

pub const verification_flag = Item(
  DataElementTag(0x0040, 0xA493),
  "Verification Flag",
  [CodeString],
  vm_1,
)

pub const archive_requested = Item(
  DataElementTag(0x0040, 0xA494),
  "Archive Requested",
  [CodeString],
  vm_1,
)

pub const preliminary_flag = Item(
  DataElementTag(0x0040, 0xA496),
  "Preliminary Flag",
  [CodeString],
  vm_1,
)

pub const content_template_sequence = Item(
  DataElementTag(0x0040, 0xA504),
  "Content Template Sequence",
  [Sequence],
  vm_1,
)

pub const identical_documents_sequence = Item(
  DataElementTag(0x0040, 0xA525),
  "Identical Documents Sequence",
  [Sequence],
  vm_1,
)

pub const observation_subject_context_flag_trial = Item(
  DataElementTag(0x0040, 0xA600),
  "Observation Subject Context Flag (Trial)",
  [CodeString],
  vm_1,
)

pub const observer_context_flag_trial = Item(
  DataElementTag(0x0040, 0xA601),
  "Observer Context Flag (Trial)",
  [CodeString],
  vm_1,
)

pub const procedure_context_flag_trial = Item(
  DataElementTag(0x0040, 0xA603),
  "Procedure Context Flag (Trial)",
  [CodeString],
  vm_1,
)

pub const content_sequence = Item(
  DataElementTag(0x0040, 0xA730),
  "Content Sequence",
  [Sequence],
  vm_1,
)

pub const relationship_sequence_trial = Item(
  DataElementTag(0x0040, 0xA731),
  "Relationship Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const relationship_type_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA732),
  "Relationship Type Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const language_code_sequence_trial = Item(
  DataElementTag(0x0040, 0xA744),
  "Language Code Sequence (Trial)",
  [Sequence],
  vm_1,
)

pub const tabulated_values_sequence = Item(
  DataElementTag(0x0040, 0xA801),
  "Tabulated Values Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_table_rows = Item(
  DataElementTag(0x0040, 0xA802),
  "Number of Table Rows",
  [UnsignedLong],
  vm_1,
)

pub const number_of_table_columns = Item(
  DataElementTag(0x0040, 0xA803),
  "Number of Table Columns",
  [UnsignedLong],
  vm_1,
)

pub const table_row_number = Item(
  DataElementTag(0x0040, 0xA804),
  "Table Row Number",
  [UnsignedLong],
  vm_1,
)

pub const table_column_number = Item(
  DataElementTag(0x0040, 0xA805),
  "Table Column Number",
  [UnsignedLong],
  vm_1,
)

pub const table_row_definition_sequence = Item(
  DataElementTag(0x0040, 0xA806),
  "Table Row Definition Sequence",
  [Sequence],
  vm_1,
)

pub const table_column_definition_sequence = Item(
  DataElementTag(0x0040, 0xA807),
  "Table Column Definition Sequence",
  [Sequence],
  vm_1,
)

pub const cell_values_sequence = Item(
  DataElementTag(0x0040, 0xA808),
  "Cell Values Sequence",
  [Sequence],
  vm_1,
)

pub const uniform_resource_locator_trial = Item(
  DataElementTag(0x0040, 0xA992),
  "Uniform Resource Locator (Trial)",
  [ShortText],
  vm_1,
)

pub const waveform_annotation_sequence = Item(
  DataElementTag(0x0040, 0xB020),
  "Waveform Annotation Sequence",
  [Sequence],
  vm_1,
)

pub const template_identifier = Item(
  DataElementTag(0x0040, 0xDB00),
  "Template Identifier",
  [CodeString],
  vm_1,
)

pub const template_version = Item(
  DataElementTag(0x0040, 0xDB06),
  "Template Version",
  [DateTime],
  vm_1,
)

pub const template_local_version = Item(
  DataElementTag(0x0040, 0xDB07),
  "Template Local Version",
  [DateTime],
  vm_1,
)

pub const template_extension_flag = Item(
  DataElementTag(0x0040, 0xDB0B),
  "Template Extension Flag",
  [CodeString],
  vm_1,
)

pub const template_extension_organization_uid = Item(
  DataElementTag(0x0040, 0xDB0C),
  "Template Extension Organization UID",
  [UniqueIdentifier],
  vm_1,
)

pub const template_extension_creator_uid = Item(
  DataElementTag(0x0040, 0xDB0D),
  "Template Extension Creator UID",
  [UniqueIdentifier],
  vm_1,
)

pub const referenced_content_item_identifier = Item(
  DataElementTag(0x0040, 0xDB73),
  "Referenced Content Item Identifier",
  [UnsignedLong],
  vm_1_to_n,
)

pub const hl7_instance_identifier = Item(
  DataElementTag(0x0040, 0xE001),
  "HL7 Instance Identifier",
  [ShortText],
  vm_1,
)

pub const hl7_document_effective_time = Item(
  DataElementTag(0x0040, 0xE004),
  "HL7 Document Effective Time",
  [DateTime],
  vm_1,
)

pub const hl7_document_type_code_sequence = Item(
  DataElementTag(0x0040, 0xE006),
  "HL7 Document Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const document_class_code_sequence = Item(
  DataElementTag(0x0040, 0xE008),
  "Document Class Code Sequence",
  [Sequence],
  vm_1,
)

pub const retrieve_uri = Item(
  DataElementTag(0x0040, 0xE010),
  "Retrieve URI",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const retrieve_location_uid = Item(
  DataElementTag(0x0040, 0xE011),
  "Retrieve Location UID",
  [UniqueIdentifier],
  vm_1,
)

pub const type_of_instances = Item(
  DataElementTag(0x0040, 0xE020),
  "Type of Instances",
  [CodeString],
  vm_1,
)

pub const dicom_retrieval_sequence = Item(
  DataElementTag(0x0040, 0xE021),
  "DICOM Retrieval Sequence",
  [Sequence],
  vm_1,
)

pub const dicom_media_retrieval_sequence = Item(
  DataElementTag(0x0040, 0xE022),
  "DICOM Media Retrieval Sequence",
  [Sequence],
  vm_1,
)

pub const wado_retrieval_sequence = Item(
  DataElementTag(0x0040, 0xE023),
  "WADO Retrieval Sequence",
  [Sequence],
  vm_1,
)

pub const xds_retrieval_sequence = Item(
  DataElementTag(0x0040, 0xE024),
  "XDS Retrieval Sequence",
  [Sequence],
  vm_1,
)

pub const wadors_retrieval_sequence = Item(
  DataElementTag(0x0040, 0xE025),
  "WADO-RS Retrieval Sequence",
  [Sequence],
  vm_1,
)

pub const repository_unique_id = Item(
  DataElementTag(0x0040, 0xE030),
  "Repository Unique ID",
  [UniqueIdentifier],
  vm_1,
)

pub const home_community_id = Item(
  DataElementTag(0x0040, 0xE031),
  "Home Community ID",
  [UniqueIdentifier],
  vm_1,
)

pub const document_title = Item(
  DataElementTag(0x0042, 0x0010),
  "Document Title",
  [ShortText],
  vm_1,
)

pub const encapsulated_document = Item(
  DataElementTag(0x0042, 0x0011),
  "Encapsulated Document",
  [OtherByteString],
  vm_1,
)

pub const mime_type_of_encapsulated_document = Item(
  DataElementTag(0x0042, 0x0012),
  "MIME Type of Encapsulated Document",
  [LongString],
  vm_1,
)

pub const source_instance_sequence = Item(
  DataElementTag(0x0042, 0x0013),
  "Source Instance Sequence",
  [Sequence],
  vm_1,
)

pub const list_of_mime_types = Item(
  DataElementTag(0x0042, 0x0014),
  "List of MIME Types",
  [LongString],
  vm_1_to_n,
)

pub const encapsulated_document_length = Item(
  DataElementTag(0x0042, 0x0015),
  "Encapsulated Document Length",
  [UnsignedLong],
  vm_1,
)

pub const product_package_identifier = Item(
  DataElementTag(0x0044, 0x0001),
  "Product Package Identifier",
  [ShortText],
  vm_1,
)

pub const substance_administration_approval = Item(
  DataElementTag(0x0044, 0x0002),
  "Substance Administration Approval",
  [CodeString],
  vm_1,
)

pub const approval_status_further_description = Item(
  DataElementTag(0x0044, 0x0003),
  "Approval Status Further Description",
  [LongText],
  vm_1,
)

pub const approval_status_date_time = Item(
  DataElementTag(0x0044, 0x0004),
  "Approval Status DateTime",
  [DateTime],
  vm_1,
)

pub const product_type_code_sequence = Item(
  DataElementTag(0x0044, 0x0007),
  "Product Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const product_name = Item(
  DataElementTag(0x0044, 0x0008),
  "Product Name",
  [LongString],
  vm_1_to_n,
)

pub const product_description = Item(
  DataElementTag(0x0044, 0x0009),
  "Product Description",
  [LongText],
  vm_1,
)

pub const product_lot_identifier = Item(
  DataElementTag(0x0044, 0x000A),
  "Product Lot Identifier",
  [LongString],
  vm_1,
)

pub const product_expiration_date_time = Item(
  DataElementTag(0x0044, 0x000B),
  "Product Expiration DateTime",
  [DateTime],
  vm_1,
)

pub const substance_administration_date_time = Item(
  DataElementTag(0x0044, 0x0010),
  "Substance Administration DateTime",
  [DateTime],
  vm_1,
)

pub const substance_administration_notes = Item(
  DataElementTag(0x0044, 0x0011),
  "Substance Administration Notes",
  [LongString],
  vm_1,
)

pub const substance_administration_device_id = Item(
  DataElementTag(0x0044, 0x0012),
  "Substance Administration Device ID",
  [LongString],
  vm_1,
)

pub const product_parameter_sequence = Item(
  DataElementTag(0x0044, 0x0013),
  "Product Parameter Sequence",
  [Sequence],
  vm_1,
)

pub const substance_administration_parameter_sequence = Item(
  DataElementTag(0x0044, 0x0019),
  "Substance Administration Parameter Sequence",
  [Sequence],
  vm_1,
)

pub const approval_sequence = Item(
  DataElementTag(0x0044, 0x0100),
  "Approval Sequence",
  [Sequence],
  vm_1,
)

pub const assertion_code_sequence = Item(
  DataElementTag(0x0044, 0x0101),
  "Assertion Code Sequence",
  [Sequence],
  vm_1,
)

pub const assertion_uid = Item(
  DataElementTag(0x0044, 0x0102),
  "Assertion UID",
  [UniqueIdentifier],
  vm_1,
)

pub const asserter_identification_sequence = Item(
  DataElementTag(0x0044, 0x0103),
  "Asserter Identification Sequence",
  [Sequence],
  vm_1,
)

pub const assertion_date_time = Item(
  DataElementTag(0x0044, 0x0104),
  "Assertion DateTime",
  [DateTime],
  vm_1,
)

pub const assertion_expiration_date_time = Item(
  DataElementTag(0x0044, 0x0105),
  "Assertion Expiration DateTime",
  [DateTime],
  vm_1,
)

pub const assertion_comments = Item(
  DataElementTag(0x0044, 0x0106),
  "Assertion Comments",
  [UnlimitedText],
  vm_1,
)

pub const related_assertion_sequence = Item(
  DataElementTag(0x0044, 0x0107),
  "Related Assertion Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_assertion_uid = Item(
  DataElementTag(0x0044, 0x0108),
  "Referenced Assertion UID",
  [UniqueIdentifier],
  vm_1,
)

pub const approval_subject_sequence = Item(
  DataElementTag(0x0044, 0x0109),
  "Approval Subject Sequence",
  [Sequence],
  vm_1,
)

pub const organizational_role_code_sequence = Item(
  DataElementTag(0x0044, 0x010A),
  "Organizational Role Code Sequence",
  [Sequence],
  vm_1,
)

pub const lens_description = Item(
  DataElementTag(0x0046, 0x0012),
  "Lens Description",
  [LongString],
  vm_1,
)

pub const right_lens_sequence = Item(
  DataElementTag(0x0046, 0x0014),
  "Right Lens Sequence",
  [Sequence],
  vm_1,
)

pub const left_lens_sequence = Item(
  DataElementTag(0x0046, 0x0015),
  "Left Lens Sequence",
  [Sequence],
  vm_1,
)

pub const unspecified_laterality_lens_sequence = Item(
  DataElementTag(0x0046, 0x0016),
  "Unspecified Laterality Lens Sequence",
  [Sequence],
  vm_1,
)

pub const cylinder_sequence = Item(
  DataElementTag(0x0046, 0x0018),
  "Cylinder Sequence",
  [Sequence],
  vm_1,
)

pub const prism_sequence = Item(
  DataElementTag(0x0046, 0x0028),
  "Prism Sequence",
  [Sequence],
  vm_1,
)

pub const horizontal_prism_power = Item(
  DataElementTag(0x0046, 0x0030),
  "Horizontal Prism Power",
  [FloatingPointDouble],
  vm_1,
)

pub const horizontal_prism_base = Item(
  DataElementTag(0x0046, 0x0032),
  "Horizontal Prism Base",
  [CodeString],
  vm_1,
)

pub const vertical_prism_power = Item(
  DataElementTag(0x0046, 0x0034),
  "Vertical Prism Power",
  [FloatingPointDouble],
  vm_1,
)

pub const vertical_prism_base = Item(
  DataElementTag(0x0046, 0x0036),
  "Vertical Prism Base",
  [CodeString],
  vm_1,
)

pub const lens_segment_type = Item(
  DataElementTag(0x0046, 0x0038),
  "Lens Segment Type",
  [CodeString],
  vm_1,
)

pub const optical_transmittance = Item(
  DataElementTag(0x0046, 0x0040),
  "Optical Transmittance",
  [FloatingPointDouble],
  vm_1,
)

pub const channel_width = Item(
  DataElementTag(0x0046, 0x0042),
  "Channel Width",
  [FloatingPointDouble],
  vm_1,
)

pub const pupil_size = Item(
  DataElementTag(0x0046, 0x0044),
  "Pupil Size",
  [FloatingPointDouble],
  vm_1,
)

pub const corneal_size = Item(
  DataElementTag(0x0046, 0x0046),
  "Corneal Size",
  [FloatingPointDouble],
  vm_1,
)

pub const corneal_size_sequence = Item(
  DataElementTag(0x0046, 0x0047),
  "Corneal Size Sequence",
  [Sequence],
  vm_1,
)

pub const autorefraction_right_eye_sequence = Item(
  DataElementTag(0x0046, 0x0050),
  "Autorefraction Right Eye Sequence",
  [Sequence],
  vm_1,
)

pub const autorefraction_left_eye_sequence = Item(
  DataElementTag(0x0046, 0x0052),
  "Autorefraction Left Eye Sequence",
  [Sequence],
  vm_1,
)

pub const distance_pupillary_distance = Item(
  DataElementTag(0x0046, 0x0060),
  "Distance Pupillary Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const near_pupillary_distance = Item(
  DataElementTag(0x0046, 0x0062),
  "Near Pupillary Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const intermediate_pupillary_distance = Item(
  DataElementTag(0x0046, 0x0063),
  "Intermediate Pupillary Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const other_pupillary_distance = Item(
  DataElementTag(0x0046, 0x0064),
  "Other Pupillary Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const keratometry_right_eye_sequence = Item(
  DataElementTag(0x0046, 0x0070),
  "Keratometry Right Eye Sequence",
  [Sequence],
  vm_1,
)

pub const keratometry_left_eye_sequence = Item(
  DataElementTag(0x0046, 0x0071),
  "Keratometry Left Eye Sequence",
  [Sequence],
  vm_1,
)

pub const steep_keratometric_axis_sequence = Item(
  DataElementTag(0x0046, 0x0074),
  "Steep Keratometric Axis Sequence",
  [Sequence],
  vm_1,
)

pub const radius_of_curvature = Item(
  DataElementTag(0x0046, 0x0075),
  "Radius of Curvature",
  [FloatingPointDouble],
  vm_1,
)

pub const keratometric_power = Item(
  DataElementTag(0x0046, 0x0076),
  "Keratometric Power",
  [FloatingPointDouble],
  vm_1,
)

pub const keratometric_axis = Item(
  DataElementTag(0x0046, 0x0077),
  "Keratometric Axis",
  [FloatingPointDouble],
  vm_1,
)

pub const flat_keratometric_axis_sequence = Item(
  DataElementTag(0x0046, 0x0080),
  "Flat Keratometric Axis Sequence",
  [Sequence],
  vm_1,
)

pub const background_color = Item(
  DataElementTag(0x0046, 0x0092),
  "Background Color",
  [CodeString],
  vm_1,
)

pub const optotype = Item(
  DataElementTag(0x0046, 0x0094),
  "Optotype",
  [CodeString],
  vm_1,
)

pub const optotype_presentation = Item(
  DataElementTag(0x0046, 0x0095),
  "Optotype Presentation",
  [CodeString],
  vm_1,
)

pub const subjective_refraction_right_eye_sequence = Item(
  DataElementTag(0x0046, 0x0097),
  "Subjective Refraction Right Eye Sequence",
  [Sequence],
  vm_1,
)

pub const subjective_refraction_left_eye_sequence = Item(
  DataElementTag(0x0046, 0x0098),
  "Subjective Refraction Left Eye Sequence",
  [Sequence],
  vm_1,
)

pub const add_near_sequence = Item(
  DataElementTag(0x0046, 0x0100),
  "Add Near Sequence",
  [Sequence],
  vm_1,
)

pub const add_intermediate_sequence = Item(
  DataElementTag(0x0046, 0x0101),
  "Add Intermediate Sequence",
  [Sequence],
  vm_1,
)

pub const add_other_sequence = Item(
  DataElementTag(0x0046, 0x0102),
  "Add Other Sequence",
  [Sequence],
  vm_1,
)

pub const add_power = Item(
  DataElementTag(0x0046, 0x0104),
  "Add Power",
  [FloatingPointDouble],
  vm_1,
)

pub const viewing_distance = Item(
  DataElementTag(0x0046, 0x0106),
  "Viewing Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const cornea_measurements_sequence = Item(
  DataElementTag(0x0046, 0x0110),
  "Cornea Measurements Sequence",
  [Sequence],
  vm_1,
)

pub const source_of_cornea_measurement_data_code_sequence = Item(
  DataElementTag(0x0046, 0x0111),
  "Source of Cornea Measurement Data Code Sequence",
  [Sequence],
  vm_1,
)

pub const steep_corneal_axis_sequence = Item(
  DataElementTag(0x0046, 0x0112),
  "Steep Corneal Axis Sequence",
  [Sequence],
  vm_1,
)

pub const flat_corneal_axis_sequence = Item(
  DataElementTag(0x0046, 0x0113),
  "Flat Corneal Axis Sequence",
  [Sequence],
  vm_1,
)

pub const corneal_power = Item(
  DataElementTag(0x0046, 0x0114),
  "Corneal Power",
  [FloatingPointDouble],
  vm_1,
)

pub const corneal_axis = Item(
  DataElementTag(0x0046, 0x0115),
  "Corneal Axis",
  [FloatingPointDouble],
  vm_1,
)

pub const cornea_measurement_method_code_sequence = Item(
  DataElementTag(0x0046, 0x0116),
  "Cornea Measurement Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const refractive_index_of_cornea = Item(
  DataElementTag(0x0046, 0x0117),
  "Refractive Index of Cornea",
  [FloatingPointSingle],
  vm_1,
)

pub const refractive_index_of_aqueous_humor = Item(
  DataElementTag(0x0046, 0x0118),
  "Refractive Index of Aqueous Humor",
  [FloatingPointSingle],
  vm_1,
)

pub const visual_acuity_type_code_sequence = Item(
  DataElementTag(0x0046, 0x0121),
  "Visual Acuity Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const visual_acuity_right_eye_sequence = Item(
  DataElementTag(0x0046, 0x0122),
  "Visual Acuity Right Eye Sequence",
  [Sequence],
  vm_1,
)

pub const visual_acuity_left_eye_sequence = Item(
  DataElementTag(0x0046, 0x0123),
  "Visual Acuity Left Eye Sequence",
  [Sequence],
  vm_1,
)

pub const visual_acuity_both_eyes_open_sequence = Item(
  DataElementTag(0x0046, 0x0124),
  "Visual Acuity Both Eyes Open Sequence",
  [Sequence],
  vm_1,
)

pub const viewing_distance_type = Item(
  DataElementTag(0x0046, 0x0125),
  "Viewing Distance Type",
  [CodeString],
  vm_1,
)

pub const visual_acuity_modifiers = Item(
  DataElementTag(0x0046, 0x0135),
  "Visual Acuity Modifiers",
  [SignedShort],
  vm_2,
)

pub const decimal_visual_acuity = Item(
  DataElementTag(0x0046, 0x0137),
  "Decimal Visual Acuity",
  [FloatingPointDouble],
  vm_1,
)

pub const optotype_detailed_definition = Item(
  DataElementTag(0x0046, 0x0139),
  "Optotype Detailed Definition",
  [LongString],
  vm_1,
)

pub const referenced_refractive_measurements_sequence = Item(
  DataElementTag(0x0046, 0x0145),
  "Referenced Refractive Measurements Sequence",
  [Sequence],
  vm_1,
)

pub const sphere_power = Item(
  DataElementTag(0x0046, 0x0146),
  "Sphere Power",
  [FloatingPointDouble],
  vm_1,
)

pub const cylinder_power = Item(
  DataElementTag(0x0046, 0x0147),
  "Cylinder Power",
  [FloatingPointDouble],
  vm_1,
)

pub const corneal_topography_surface = Item(
  DataElementTag(0x0046, 0x0201),
  "Corneal Topography Surface",
  [CodeString],
  vm_1,
)

pub const corneal_vertex_location = Item(
  DataElementTag(0x0046, 0x0202),
  "Corneal Vertex Location",
  [FloatingPointSingle],
  vm_2,
)

pub const pupil_centroid_x_coordinate = Item(
  DataElementTag(0x0046, 0x0203),
  "Pupil Centroid X-Coordinate",
  [FloatingPointSingle],
  vm_1,
)

pub const pupil_centroid_y_coordinate = Item(
  DataElementTag(0x0046, 0x0204),
  "Pupil Centroid Y-Coordinate",
  [FloatingPointSingle],
  vm_1,
)

pub const equivalent_pupil_radius = Item(
  DataElementTag(0x0046, 0x0205),
  "Equivalent Pupil Radius",
  [FloatingPointSingle],
  vm_1,
)

pub const corneal_topography_map_type_code_sequence = Item(
  DataElementTag(0x0046, 0x0207),
  "Corneal Topography Map Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const vertices_of_the_outline_of_pupil = Item(
  DataElementTag(0x0046, 0x0208),
  "Vertices of the Outline of Pupil",
  [IntegerString],
  vm_2_to_n,
)

pub const corneal_topography_mapping_normals_sequence = Item(
  DataElementTag(0x0046, 0x0210),
  "Corneal Topography Mapping Normals Sequence",
  [Sequence],
  vm_1,
)

pub const maximum_corneal_curvature_sequence = Item(
  DataElementTag(0x0046, 0x0211),
  "Maximum Corneal Curvature Sequence",
  [Sequence],
  vm_1,
)

pub const maximum_corneal_curvature = Item(
  DataElementTag(0x0046, 0x0212),
  "Maximum Corneal Curvature",
  [FloatingPointSingle],
  vm_1,
)

pub const maximum_corneal_curvature_location = Item(
  DataElementTag(0x0046, 0x0213),
  "Maximum Corneal Curvature Location",
  [FloatingPointSingle],
  vm_2,
)

pub const minimum_keratometric_sequence = Item(
  DataElementTag(0x0046, 0x0215),
  "Minimum Keratometric Sequence",
  [Sequence],
  vm_1,
)

pub const simulated_keratometric_cylinder_sequence = Item(
  DataElementTag(0x0046, 0x0218),
  "Simulated Keratometric Cylinder Sequence",
  [Sequence],
  vm_1,
)

pub const average_corneal_power = Item(
  DataElementTag(0x0046, 0x0220),
  "Average Corneal Power",
  [FloatingPointSingle],
  vm_1,
)

pub const corneal_is_value = Item(
  DataElementTag(0x0046, 0x0224),
  "Corneal I-S Value",
  [FloatingPointSingle],
  vm_1,
)

pub const analyzed_area = Item(
  DataElementTag(0x0046, 0x0227),
  "Analyzed Area",
  [FloatingPointSingle],
  vm_1,
)

pub const surface_regularity_index = Item(
  DataElementTag(0x0046, 0x0230),
  "Surface Regularity Index",
  [FloatingPointSingle],
  vm_1,
)

pub const surface_asymmetry_index = Item(
  DataElementTag(0x0046, 0x0232),
  "Surface Asymmetry Index",
  [FloatingPointSingle],
  vm_1,
)

pub const corneal_eccentricity_index = Item(
  DataElementTag(0x0046, 0x0234),
  "Corneal Eccentricity Index",
  [FloatingPointSingle],
  vm_1,
)

pub const keratoconus_prediction_index = Item(
  DataElementTag(0x0046, 0x0236),
  "Keratoconus Prediction Index",
  [FloatingPointSingle],
  vm_1,
)

pub const decimal_potential_visual_acuity = Item(
  DataElementTag(0x0046, 0x0238),
  "Decimal Potential Visual Acuity",
  [FloatingPointSingle],
  vm_1,
)

pub const corneal_topography_map_quality_evaluation = Item(
  DataElementTag(0x0046, 0x0242),
  "Corneal Topography Map Quality Evaluation",
  [CodeString],
  vm_1,
)

pub const source_image_corneal_processed_data_sequence = Item(
  DataElementTag(0x0046, 0x0244),
  "Source Image Corneal Processed Data Sequence",
  [Sequence],
  vm_1,
)

pub const corneal_point_location = Item(
  DataElementTag(0x0046, 0x0247),
  "Corneal Point Location",
  [FloatingPointSingle],
  vm_3,
)

pub const corneal_point_estimated = Item(
  DataElementTag(0x0046, 0x0248),
  "Corneal Point Estimated",
  [CodeString],
  vm_1,
)

pub const axial_power = Item(
  DataElementTag(0x0046, 0x0249),
  "Axial Power",
  [FloatingPointSingle],
  vm_1,
)

pub const tangential_power = Item(
  DataElementTag(0x0046, 0x0250),
  "Tangential Power",
  [FloatingPointSingle],
  vm_1,
)

pub const refractive_power = Item(
  DataElementTag(0x0046, 0x0251),
  "Refractive Power",
  [FloatingPointSingle],
  vm_1,
)

pub const relative_elevation = Item(
  DataElementTag(0x0046, 0x0252),
  "Relative Elevation",
  [FloatingPointSingle],
  vm_1,
)

pub const corneal_wavefront = Item(
  DataElementTag(0x0046, 0x0253),
  "Corneal Wavefront",
  [FloatingPointSingle],
  vm_1,
)

pub const imaged_volume_width = Item(
  DataElementTag(0x0048, 0x0001),
  "Imaged Volume Width",
  [FloatingPointSingle],
  vm_1,
)

pub const imaged_volume_height = Item(
  DataElementTag(0x0048, 0x0002),
  "Imaged Volume Height",
  [FloatingPointSingle],
  vm_1,
)

pub const imaged_volume_depth = Item(
  DataElementTag(0x0048, 0x0003),
  "Imaged Volume Depth",
  [FloatingPointSingle],
  vm_1,
)

pub const total_pixel_matrix_columns = Item(
  DataElementTag(0x0048, 0x0006),
  "Total Pixel Matrix Columns",
  [UnsignedLong],
  vm_1,
)

pub const total_pixel_matrix_rows = Item(
  DataElementTag(0x0048, 0x0007),
  "Total Pixel Matrix Rows",
  [UnsignedLong],
  vm_1,
)

pub const total_pixel_matrix_origin_sequence = Item(
  DataElementTag(0x0048, 0x0008),
  "Total Pixel Matrix Origin Sequence",
  [Sequence],
  vm_1,
)

pub const specimen_label_in_image = Item(
  DataElementTag(0x0048, 0x0010),
  "Specimen Label in Image",
  [CodeString],
  vm_1,
)

pub const focus_method = Item(
  DataElementTag(0x0048, 0x0011),
  "Focus Method",
  [CodeString],
  vm_1,
)

pub const extended_depth_of_field = Item(
  DataElementTag(0x0048, 0x0012),
  "Extended Depth of Field",
  [CodeString],
  vm_1,
)

pub const number_of_focal_planes = Item(
  DataElementTag(0x0048, 0x0013),
  "Number of Focal Planes",
  [UnsignedShort],
  vm_1,
)

pub const distance_between_focal_planes = Item(
  DataElementTag(0x0048, 0x0014),
  "Distance Between Focal Planes",
  [FloatingPointSingle],
  vm_1,
)

pub const recommended_absent_pixel_cie_lab_value = Item(
  DataElementTag(0x0048, 0x0015),
  "Recommended Absent Pixel CIELab Value",
  [UnsignedShort],
  vm_3,
)

pub const illuminator_type_code_sequence = Item(
  DataElementTag(0x0048, 0x0100),
  "Illuminator Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const image_orientation_slide = Item(
  DataElementTag(0x0048, 0x0102),
  "Image Orientation (Slide)",
  [DecimalString],
  vm_6,
)

pub const optical_path_sequence = Item(
  DataElementTag(0x0048, 0x0105),
  "Optical Path Sequence",
  [Sequence],
  vm_1,
)

pub const optical_path_identifier = Item(
  DataElementTag(0x0048, 0x0106),
  "Optical Path Identifier",
  [ShortString],
  vm_1,
)

pub const optical_path_description = Item(
  DataElementTag(0x0048, 0x0107),
  "Optical Path Description",
  [ShortText],
  vm_1,
)

pub const illumination_color_code_sequence = Item(
  DataElementTag(0x0048, 0x0108),
  "Illumination Color Code Sequence",
  [Sequence],
  vm_1,
)

pub const specimen_reference_sequence = Item(
  DataElementTag(0x0048, 0x0110),
  "Specimen Reference Sequence",
  [Sequence],
  vm_1,
)

pub const condenser_lens_power = Item(
  DataElementTag(0x0048, 0x0111),
  "Condenser Lens Power",
  [DecimalString],
  vm_1,
)

pub const objective_lens_power = Item(
  DataElementTag(0x0048, 0x0112),
  "Objective Lens Power",
  [DecimalString],
  vm_1,
)

pub const objective_lens_numerical_aperture = Item(
  DataElementTag(0x0048, 0x0113),
  "Objective Lens Numerical Aperture",
  [DecimalString],
  vm_1,
)

pub const confocal_mode = Item(
  DataElementTag(0x0048, 0x0114),
  "Confocal Mode",
  [CodeString],
  vm_1,
)

pub const tissue_location = Item(
  DataElementTag(0x0048, 0x0115),
  "Tissue Location",
  [CodeString],
  vm_1,
)

pub const confocal_microscopy_image_frame_type_sequence = Item(
  DataElementTag(0x0048, 0x0116),
  "Confocal Microscopy Image Frame Type Sequence",
  [Sequence],
  vm_1,
)

pub const image_acquisition_depth = Item(
  DataElementTag(0x0048, 0x0117),
  "Image Acquisition Depth",
  [FloatingPointDouble],
  vm_1,
)

pub const palette_color_lookup_table_sequence = Item(
  DataElementTag(0x0048, 0x0120),
  "Palette Color Lookup Table Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_image_navigation_sequence = Item(
  DataElementTag(0x0048, 0x0200),
  "Referenced Image Navigation Sequence",
  [Sequence],
  vm_1,
)

pub const top_left_hand_corner_of_localizer_area = Item(
  DataElementTag(0x0048, 0x0201),
  "Top Left Hand Corner of Localizer Area",
  [UnsignedShort],
  vm_2,
)

pub const bottom_right_hand_corner_of_localizer_area = Item(
  DataElementTag(0x0048, 0x0202),
  "Bottom Right Hand Corner of Localizer Area",
  [UnsignedShort],
  vm_2,
)

pub const optical_path_identification_sequence = Item(
  DataElementTag(0x0048, 0x0207),
  "Optical Path Identification Sequence",
  [Sequence],
  vm_1,
)

pub const plane_position_slide_sequence = Item(
  DataElementTag(0x0048, 0x021A),
  "Plane Position (Slide) Sequence",
  [Sequence],
  vm_1,
)

pub const column_position_in_total_image_pixel_matrix = Item(
  DataElementTag(0x0048, 0x021E),
  "Column Position In Total Image Pixel Matrix",
  [SignedLong],
  vm_1,
)

pub const row_position_in_total_image_pixel_matrix = Item(
  DataElementTag(0x0048, 0x021F),
  "Row Position In Total Image Pixel Matrix",
  [SignedLong],
  vm_1,
)

pub const pixel_origin_interpretation = Item(
  DataElementTag(0x0048, 0x0301),
  "Pixel Origin Interpretation",
  [CodeString],
  vm_1,
)

pub const number_of_optical_paths = Item(
  DataElementTag(0x0048, 0x0302),
  "Number of Optical Paths",
  [UnsignedLong],
  vm_1,
)

pub const total_pixel_matrix_focal_planes = Item(
  DataElementTag(0x0048, 0x0303),
  "Total Pixel Matrix Focal Planes",
  [UnsignedLong],
  vm_1,
)

pub const calibration_image = Item(
  DataElementTag(0x0050, 0x0004),
  "Calibration Image",
  [CodeString],
  vm_1,
)

pub const device_sequence = Item(
  DataElementTag(0x0050, 0x0010),
  "Device Sequence",
  [Sequence],
  vm_1,
)

pub const container_component_type_code_sequence = Item(
  DataElementTag(0x0050, 0x0012),
  "Container Component Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const container_component_thickness = Item(
  DataElementTag(0x0050, 0x0013),
  "Container Component Thickness",
  [FloatingPointDouble],
  vm_1,
)

pub const device_length = Item(
  DataElementTag(0x0050, 0x0014),
  "Device Length",
  [DecimalString],
  vm_1,
)

pub const container_component_width = Item(
  DataElementTag(0x0050, 0x0015),
  "Container Component Width",
  [FloatingPointDouble],
  vm_1,
)

pub const device_diameter = Item(
  DataElementTag(0x0050, 0x0016),
  "Device Diameter",
  [DecimalString],
  vm_1,
)

pub const device_diameter_units = Item(
  DataElementTag(0x0050, 0x0017),
  "Device Diameter Units",
  [CodeString],
  vm_1,
)

pub const device_volume = Item(
  DataElementTag(0x0050, 0x0018),
  "Device Volume",
  [DecimalString],
  vm_1,
)

pub const inter_marker_distance = Item(
  DataElementTag(0x0050, 0x0019),
  "Inter-Marker Distance",
  [DecimalString],
  vm_1,
)

pub const container_component_material = Item(
  DataElementTag(0x0050, 0x001A),
  "Container Component Material",
  [CodeString],
  vm_1,
)

pub const container_component_id = Item(
  DataElementTag(0x0050, 0x001B),
  "Container Component ID",
  [LongString],
  vm_1,
)

pub const container_component_length = Item(
  DataElementTag(0x0050, 0x001C),
  "Container Component Length",
  [FloatingPointDouble],
  vm_1,
)

pub const container_component_diameter = Item(
  DataElementTag(0x0050, 0x001D),
  "Container Component Diameter",
  [FloatingPointDouble],
  vm_1,
)

pub const container_component_description = Item(
  DataElementTag(0x0050, 0x001E),
  "Container Component Description",
  [LongString],
  vm_1,
)

pub const device_description = Item(
  DataElementTag(0x0050, 0x0020),
  "Device Description",
  [LongString],
  vm_1,
)

pub const long_device_description = Item(
  DataElementTag(0x0050, 0x0021),
  "Long Device Description",
  [ShortText],
  vm_1,
)

pub const contrast_bolus_ingredient_percent_by_volume = Item(
  DataElementTag(0x0052, 0x0001),
  "Contrast/Bolus Ingredient Percent by Volume",
  [FloatingPointSingle],
  vm_1,
)

pub const oct_focal_distance = Item(
  DataElementTag(0x0052, 0x0002),
  "OCT Focal Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const beam_spot_size = Item(
  DataElementTag(0x0052, 0x0003),
  "Beam Spot Size",
  [FloatingPointDouble],
  vm_1,
)

pub const effective_refractive_index = Item(
  DataElementTag(0x0052, 0x0004),
  "Effective Refractive Index",
  [FloatingPointDouble],
  vm_1,
)

pub const oct_acquisition_domain = Item(
  DataElementTag(0x0052, 0x0006),
  "OCT Acquisition Domain",
  [CodeString],
  vm_1,
)

pub const oct_optical_center_wavelength = Item(
  DataElementTag(0x0052, 0x0007),
  "OCT Optical Center Wavelength",
  [FloatingPointDouble],
  vm_1,
)

pub const axial_resolution = Item(
  DataElementTag(0x0052, 0x0008),
  "Axial Resolution",
  [FloatingPointDouble],
  vm_1,
)

pub const ranging_depth = Item(
  DataElementTag(0x0052, 0x0009),
  "Ranging Depth",
  [FloatingPointDouble],
  vm_1,
)

pub const a_line_rate = Item(
  DataElementTag(0x0052, 0x0011),
  "A-line Rate",
  [FloatingPointDouble],
  vm_1,
)

pub const a_lines_per_frame = Item(
  DataElementTag(0x0052, 0x0012),
  "A-lines Per Frame",
  [UnsignedShort],
  vm_1,
)

pub const catheter_rotational_rate = Item(
  DataElementTag(0x0052, 0x0013),
  "Catheter Rotational Rate",
  [FloatingPointDouble],
  vm_1,
)

pub const a_line_pixel_spacing = Item(
  DataElementTag(0x0052, 0x0014),
  "A-line Pixel Spacing",
  [FloatingPointDouble],
  vm_1,
)

pub const mode_of_percutaneous_access_sequence = Item(
  DataElementTag(0x0052, 0x0016),
  "Mode of Percutaneous Access Sequence",
  [Sequence],
  vm_1,
)

pub const intravascular_oct_frame_type_sequence = Item(
  DataElementTag(0x0052, 0x0025),
  "Intravascular OCT Frame Type Sequence",
  [Sequence],
  vm_1,
)

pub const octz_offset_applied = Item(
  DataElementTag(0x0052, 0x0026),
  "OCT Z Offset Applied",
  [CodeString],
  vm_1,
)

pub const intravascular_frame_content_sequence = Item(
  DataElementTag(0x0052, 0x0027),
  "Intravascular Frame Content Sequence",
  [Sequence],
  vm_1,
)

pub const intravascular_longitudinal_distance = Item(
  DataElementTag(0x0052, 0x0028),
  "Intravascular Longitudinal Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const intravascular_oct_frame_content_sequence = Item(
  DataElementTag(0x0052, 0x0029),
  "Intravascular OCT Frame Content Sequence",
  [Sequence],
  vm_1,
)

pub const octz_offset_correction = Item(
  DataElementTag(0x0052, 0x0030),
  "OCT Z Offset Correction",
  [SignedShort],
  vm_1,
)

pub const catheter_direction_of_rotation = Item(
  DataElementTag(0x0052, 0x0031),
  "Catheter Direction of Rotation",
  [CodeString],
  vm_1,
)

pub const seam_line_location = Item(
  DataElementTag(0x0052, 0x0033),
  "Seam Line Location",
  [FloatingPointDouble],
  vm_1,
)

pub const first_a_line_location = Item(
  DataElementTag(0x0052, 0x0034),
  "First A-line Location",
  [FloatingPointDouble],
  vm_1,
)

pub const seam_line_index = Item(
  DataElementTag(0x0052, 0x0036),
  "Seam Line Index",
  [UnsignedShort],
  vm_1,
)

pub const number_of_padded_a_lines = Item(
  DataElementTag(0x0052, 0x0038),
  "Number of Padded A-lines",
  [UnsignedShort],
  vm_1,
)

pub const interpolation_type = Item(
  DataElementTag(0x0052, 0x0039),
  "Interpolation Type",
  [CodeString],
  vm_1,
)

pub const refractive_index_applied = Item(
  DataElementTag(0x0052, 0x003A),
  "Refractive Index Applied",
  [CodeString],
  vm_1,
)

pub const energy_window_vector = Item(
  DataElementTag(0x0054, 0x0010),
  "Energy Window Vector",
  [UnsignedShort],
  vm_1_to_n,
)

pub const number_of_energy_windows = Item(
  DataElementTag(0x0054, 0x0011),
  "Number of Energy Windows",
  [UnsignedShort],
  vm_1,
)

pub const energy_window_information_sequence = Item(
  DataElementTag(0x0054, 0x0012),
  "Energy Window Information Sequence",
  [Sequence],
  vm_1,
)

pub const energy_window_range_sequence = Item(
  DataElementTag(0x0054, 0x0013),
  "Energy Window Range Sequence",
  [Sequence],
  vm_1,
)

pub const energy_window_lower_limit = Item(
  DataElementTag(0x0054, 0x0014),
  "Energy Window Lower Limit",
  [DecimalString],
  vm_1,
)

pub const energy_window_upper_limit = Item(
  DataElementTag(0x0054, 0x0015),
  "Energy Window Upper Limit",
  [DecimalString],
  vm_1,
)

pub const radiopharmaceutical_information_sequence = Item(
  DataElementTag(0x0054, 0x0016),
  "Radiopharmaceutical Information Sequence",
  [Sequence],
  vm_1,
)

pub const residual_syringe_counts = Item(
  DataElementTag(0x0054, 0x0017),
  "Residual Syringe Counts",
  [IntegerString],
  vm_1,
)

pub const energy_window_name = Item(
  DataElementTag(0x0054, 0x0018),
  "Energy Window Name",
  [ShortString],
  vm_1,
)

pub const detector_vector = Item(
  DataElementTag(0x0054, 0x0020),
  "Detector Vector",
  [UnsignedShort],
  vm_1_to_n,
)

pub const number_of_detectors = Item(
  DataElementTag(0x0054, 0x0021),
  "Number of Detectors",
  [UnsignedShort],
  vm_1,
)

pub const detector_information_sequence = Item(
  DataElementTag(0x0054, 0x0022),
  "Detector Information Sequence",
  [Sequence],
  vm_1,
)

pub const phase_vector = Item(
  DataElementTag(0x0054, 0x0030),
  "Phase Vector",
  [UnsignedShort],
  vm_1_to_n,
)

pub const number_of_phases = Item(
  DataElementTag(0x0054, 0x0031),
  "Number of Phases",
  [UnsignedShort],
  vm_1,
)

pub const phase_information_sequence = Item(
  DataElementTag(0x0054, 0x0032),
  "Phase Information Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_frames_in_phase = Item(
  DataElementTag(0x0054, 0x0033),
  "Number of Frames in Phase",
  [UnsignedShort],
  vm_1,
)

pub const phase_delay = Item(
  DataElementTag(0x0054, 0x0036),
  "Phase Delay",
  [IntegerString],
  vm_1,
)

pub const pause_between_frames = Item(
  DataElementTag(0x0054, 0x0038),
  "Pause Between Frames",
  [IntegerString],
  vm_1,
)

pub const phase_description = Item(
  DataElementTag(0x0054, 0x0039),
  "Phase Description",
  [CodeString],
  vm_1,
)

pub const rotation_vector = Item(
  DataElementTag(0x0054, 0x0050),
  "Rotation Vector",
  [UnsignedShort],
  vm_1_to_n,
)

pub const number_of_rotations = Item(
  DataElementTag(0x0054, 0x0051),
  "Number of Rotations",
  [UnsignedShort],
  vm_1,
)

pub const rotation_information_sequence = Item(
  DataElementTag(0x0054, 0x0052),
  "Rotation Information Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_frames_in_rotation = Item(
  DataElementTag(0x0054, 0x0053),
  "Number of Frames in Rotation",
  [UnsignedShort],
  vm_1,
)

pub const rr_interval_vector = Item(
  DataElementTag(0x0054, 0x0060),
  "R-R Interval Vector",
  [UnsignedShort],
  vm_1_to_n,
)

pub const number_of_rr_intervals = Item(
  DataElementTag(0x0054, 0x0061),
  "Number of R-R Intervals",
  [UnsignedShort],
  vm_1,
)

pub const gated_information_sequence = Item(
  DataElementTag(0x0054, 0x0062),
  "Gated Information Sequence",
  [Sequence],
  vm_1,
)

pub const data_information_sequence = Item(
  DataElementTag(0x0054, 0x0063),
  "Data Information Sequence",
  [Sequence],
  vm_1,
)

pub const time_slot_vector = Item(
  DataElementTag(0x0054, 0x0070),
  "Time Slot Vector",
  [UnsignedShort],
  vm_1_to_n,
)

pub const number_of_time_slots = Item(
  DataElementTag(0x0054, 0x0071),
  "Number of Time Slots",
  [UnsignedShort],
  vm_1,
)

pub const time_slot_information_sequence = Item(
  DataElementTag(0x0054, 0x0072),
  "Time Slot Information Sequence",
  [Sequence],
  vm_1,
)

pub const time_slot_time = Item(
  DataElementTag(0x0054, 0x0073),
  "Time Slot Time",
  [DecimalString],
  vm_1,
)

pub const slice_vector = Item(
  DataElementTag(0x0054, 0x0080),
  "Slice Vector",
  [UnsignedShort],
  vm_1_to_n,
)

pub const number_of_slices = Item(
  DataElementTag(0x0054, 0x0081),
  "Number of Slices",
  [UnsignedShort],
  vm_1,
)

pub const angular_view_vector = Item(
  DataElementTag(0x0054, 0x0090),
  "Angular View Vector",
  [UnsignedShort],
  vm_1_to_n,
)

pub const time_slice_vector = Item(
  DataElementTag(0x0054, 0x0100),
  "Time Slice Vector",
  [UnsignedShort],
  vm_1_to_n,
)

pub const number_of_time_slices = Item(
  DataElementTag(0x0054, 0x0101),
  "Number of Time Slices",
  [UnsignedShort],
  vm_1,
)

pub const start_angle = Item(
  DataElementTag(0x0054, 0x0200),
  "Start Angle",
  [DecimalString],
  vm_1,
)

pub const type_of_detector_motion = Item(
  DataElementTag(0x0054, 0x0202),
  "Type of Detector Motion",
  [CodeString],
  vm_1,
)

pub const trigger_vector = Item(
  DataElementTag(0x0054, 0x0210),
  "Trigger Vector",
  [IntegerString],
  vm_1_to_n,
)

pub const number_of_triggers_in_phase = Item(
  DataElementTag(0x0054, 0x0211),
  "Number of Triggers in Phase",
  [UnsignedShort],
  vm_1,
)

pub const view_code_sequence = Item(
  DataElementTag(0x0054, 0x0220),
  "View Code Sequence",
  [Sequence],
  vm_1,
)

pub const view_modifier_code_sequence = Item(
  DataElementTag(0x0054, 0x0222),
  "View Modifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const radionuclide_code_sequence = Item(
  DataElementTag(0x0054, 0x0300),
  "Radionuclide Code Sequence",
  [Sequence],
  vm_1,
)

pub const administration_route_code_sequence = Item(
  DataElementTag(0x0054, 0x0302),
  "Administration Route Code Sequence",
  [Sequence],
  vm_1,
)

pub const radiopharmaceutical_code_sequence = Item(
  DataElementTag(0x0054, 0x0304),
  "Radiopharmaceutical Code Sequence",
  [Sequence],
  vm_1,
)

pub const calibration_data_sequence = Item(
  DataElementTag(0x0054, 0x0306),
  "Calibration Data Sequence",
  [Sequence],
  vm_1,
)

pub const energy_window_number = Item(
  DataElementTag(0x0054, 0x0308),
  "Energy Window Number",
  [UnsignedShort],
  vm_1,
)

pub const image_id = Item(
  DataElementTag(0x0054, 0x0400),
  "Image ID",
  [ShortString],
  vm_1,
)

pub const patient_orientation_code_sequence = Item(
  DataElementTag(0x0054, 0x0410),
  "Patient Orientation Code Sequence",
  [Sequence],
  vm_1,
)

pub const patient_orientation_modifier_code_sequence = Item(
  DataElementTag(0x0054, 0x0412),
  "Patient Orientation Modifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const patient_gantry_relationship_code_sequence = Item(
  DataElementTag(0x0054, 0x0414),
  "Patient Gantry Relationship Code Sequence",
  [Sequence],
  vm_1,
)

pub const slice_progression_direction = Item(
  DataElementTag(0x0054, 0x0500),
  "Slice Progression Direction",
  [CodeString],
  vm_1,
)

pub const scan_progression_direction = Item(
  DataElementTag(0x0054, 0x0501),
  "Scan Progression Direction",
  [CodeString],
  vm_1,
)

pub const series_type = Item(
  DataElementTag(0x0054, 0x1000),
  "Series Type",
  [CodeString],
  vm_2,
)

pub const units = Item(
  DataElementTag(0x0054, 0x1001),
  "Units",
  [CodeString],
  vm_1,
)

pub const counts_source = Item(
  DataElementTag(0x0054, 0x1002),
  "Counts Source",
  [CodeString],
  vm_1,
)

pub const reprojection_method = Item(
  DataElementTag(0x0054, 0x1004),
  "Reprojection Method",
  [CodeString],
  vm_1,
)

pub const suv_type = Item(
  DataElementTag(0x0054, 0x1006),
  "SUV Type",
  [CodeString],
  vm_1,
)

pub const randoms_correction_method = Item(
  DataElementTag(0x0054, 0x1100),
  "Randoms Correction Method",
  [CodeString],
  vm_1,
)

pub const attenuation_correction_method = Item(
  DataElementTag(0x0054, 0x1101),
  "Attenuation Correction Method",
  [LongString],
  vm_1,
)

pub const decay_correction = Item(
  DataElementTag(0x0054, 0x1102),
  "Decay Correction",
  [CodeString],
  vm_1,
)

pub const reconstruction_method = Item(
  DataElementTag(0x0054, 0x1103),
  "Reconstruction Method",
  [LongString],
  vm_1,
)

pub const detector_lines_of_response_used = Item(
  DataElementTag(0x0054, 0x1104),
  "Detector Lines of Response Used",
  [LongString],
  vm_1,
)

pub const scatter_correction_method = Item(
  DataElementTag(0x0054, 0x1105),
  "Scatter Correction Method",
  [LongString],
  vm_1,
)

pub const axial_acceptance = Item(
  DataElementTag(0x0054, 0x1200),
  "Axial Acceptance",
  [DecimalString],
  vm_1,
)

pub const axial_mash = Item(
  DataElementTag(0x0054, 0x1201),
  "Axial Mash",
  [IntegerString],
  vm_2,
)

pub const transverse_mash = Item(
  DataElementTag(0x0054, 0x1202),
  "Transverse Mash",
  [IntegerString],
  vm_1,
)

pub const detector_element_size = Item(
  DataElementTag(0x0054, 0x1203),
  "Detector Element Size",
  [DecimalString],
  vm_2,
)

pub const coincidence_window_width = Item(
  DataElementTag(0x0054, 0x1210),
  "Coincidence Window Width",
  [DecimalString],
  vm_1,
)

pub const secondary_counts_type = Item(
  DataElementTag(0x0054, 0x1220),
  "Secondary Counts Type",
  [CodeString],
  vm_1_to_n,
)

pub const frame_reference_time = Item(
  DataElementTag(0x0054, 0x1300),
  "Frame Reference Time",
  [DecimalString],
  vm_1,
)

pub const primary_prompts_counts_accumulated = Item(
  DataElementTag(0x0054, 0x1310),
  "Primary (Prompts) Counts Accumulated",
  [IntegerString],
  vm_1,
)

pub const secondary_counts_accumulated = Item(
  DataElementTag(0x0054, 0x1311),
  "Secondary Counts Accumulated",
  [IntegerString],
  vm_1_to_n,
)

pub const slice_sensitivity_factor = Item(
  DataElementTag(0x0054, 0x1320),
  "Slice Sensitivity Factor",
  [DecimalString],
  vm_1,
)

pub const decay_factor = Item(
  DataElementTag(0x0054, 0x1321),
  "Decay Factor",
  [DecimalString],
  vm_1,
)

pub const dose_calibration_factor = Item(
  DataElementTag(0x0054, 0x1322),
  "Dose Calibration Factor",
  [DecimalString],
  vm_1,
)

pub const scatter_fraction_factor = Item(
  DataElementTag(0x0054, 0x1323),
  "Scatter Fraction Factor",
  [DecimalString],
  vm_1,
)

pub const dead_time_factor = Item(
  DataElementTag(0x0054, 0x1324),
  "Dead Time Factor",
  [DecimalString],
  vm_1,
)

pub const image_index = Item(
  DataElementTag(0x0054, 0x1330),
  "Image Index",
  [UnsignedShort],
  vm_1,
)

pub const counts_included = Item(
  DataElementTag(0x0054, 0x1400),
  "Counts Included",
  [CodeString],
  vm_1_to_n,
)

pub const dead_time_correction_flag = Item(
  DataElementTag(0x0054, 0x1401),
  "Dead Time Correction Flag",
  [CodeString],
  vm_1,
)

pub const histogram_sequence = Item(
  DataElementTag(0x0060, 0x3000),
  "Histogram Sequence",
  [Sequence],
  vm_1,
)

pub const histogram_number_of_bins = Item(
  DataElementTag(0x0060, 0x3002),
  "Histogram Number of Bins",
  [UnsignedShort],
  vm_1,
)

pub const histogram_first_bin_value = Item(
  DataElementTag(0x0060, 0x3004),
  "Histogram First Bin Value",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const histogram_last_bin_value = Item(
  DataElementTag(0x0060, 0x3006),
  "Histogram Last Bin Value",
  [UnsignedShort, SignedShort],
  vm_1,
)

pub const histogram_bin_width = Item(
  DataElementTag(0x0060, 0x3008),
  "Histogram Bin Width",
  [UnsignedShort],
  vm_1,
)

pub const histogram_explanation = Item(
  DataElementTag(0x0060, 0x3010),
  "Histogram Explanation",
  [LongString],
  vm_1,
)

pub const histogram_data = Item(
  DataElementTag(0x0060, 0x3020),
  "Histogram Data",
  [UnsignedLong],
  vm_1_to_n,
)

pub const segmentation_type = Item(
  DataElementTag(0x0062, 0x0001),
  "Segmentation Type",
  [CodeString],
  vm_1,
)

pub const segment_sequence = Item(
  DataElementTag(0x0062, 0x0002),
  "Segment Sequence",
  [Sequence],
  vm_1,
)

pub const segmented_property_category_code_sequence = Item(
  DataElementTag(0x0062, 0x0003),
  "Segmented Property Category Code Sequence",
  [Sequence],
  vm_1,
)

pub const segment_number = Item(
  DataElementTag(0x0062, 0x0004),
  "Segment Number",
  [UnsignedShort],
  vm_1,
)

pub const segment_label = Item(
  DataElementTag(0x0062, 0x0005),
  "Segment Label",
  [LongString],
  vm_1,
)

pub const segment_description = Item(
  DataElementTag(0x0062, 0x0006),
  "Segment Description",
  [ShortText],
  vm_1,
)

pub const segmentation_algorithm_identification_sequence = Item(
  DataElementTag(0x0062, 0x0007),
  "Segmentation Algorithm Identification Sequence",
  [Sequence],
  vm_1,
)

pub const segment_algorithm_type = Item(
  DataElementTag(0x0062, 0x0008),
  "Segment Algorithm Type",
  [CodeString],
  vm_1,
)

pub const segment_algorithm_name = Item(
  DataElementTag(0x0062, 0x0009),
  "Segment Algorithm Name",
  [LongString],
  vm_1_to_n,
)

pub const segment_identification_sequence = Item(
  DataElementTag(0x0062, 0x000A),
  "Segment Identification Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_segment_number = Item(
  DataElementTag(0x0062, 0x000B),
  "Referenced Segment Number",
  [UnsignedShort],
  vm_1_to_n,
)

pub const recommended_display_grayscale_value = Item(
  DataElementTag(0x0062, 0x000C),
  "Recommended Display Grayscale Value",
  [UnsignedShort],
  vm_1,
)

pub const recommended_display_cie_lab_value = Item(
  DataElementTag(0x0062, 0x000D),
  "Recommended Display CIELab Value",
  [UnsignedShort],
  vm_3,
)

pub const maximum_fractional_value = Item(
  DataElementTag(0x0062, 0x000E),
  "Maximum Fractional Value",
  [UnsignedShort],
  vm_1,
)

pub const segmented_property_type_code_sequence = Item(
  DataElementTag(0x0062, 0x000F),
  "Segmented Property Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const segmentation_fractional_type = Item(
  DataElementTag(0x0062, 0x0010),
  "Segmentation Fractional Type",
  [CodeString],
  vm_1,
)

pub const segmented_property_type_modifier_code_sequence = Item(
  DataElementTag(0x0062, 0x0011),
  "Segmented Property Type Modifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const used_segments_sequence = Item(
  DataElementTag(0x0062, 0x0012),
  "Used Segments Sequence",
  [Sequence],
  vm_1,
)

pub const segments_overlap = Item(
  DataElementTag(0x0062, 0x0013),
  "Segments Overlap",
  [CodeString],
  vm_1,
)

pub const tracking_id = Item(
  DataElementTag(0x0062, 0x0020),
  "Tracking ID",
  [UnlimitedText],
  vm_1,
)

pub const tracking_uid = Item(
  DataElementTag(0x0062, 0x0021),
  "Tracking UID",
  [UniqueIdentifier],
  vm_1,
)

pub const deformable_registration_sequence = Item(
  DataElementTag(0x0064, 0x0002),
  "Deformable Registration Sequence",
  [Sequence],
  vm_1,
)

pub const source_frame_of_reference_uid = Item(
  DataElementTag(0x0064, 0x0003),
  "Source Frame of Reference UID",
  [UniqueIdentifier],
  vm_1,
)

pub const deformable_registration_grid_sequence = Item(
  DataElementTag(0x0064, 0x0005),
  "Deformable Registration Grid Sequence",
  [Sequence],
  vm_1,
)

pub const grid_dimensions = Item(
  DataElementTag(0x0064, 0x0007),
  "Grid Dimensions",
  [UnsignedLong],
  vm_3,
)

pub const grid_resolution = Item(
  DataElementTag(0x0064, 0x0008),
  "Grid Resolution",
  [FloatingPointDouble],
  vm_3,
)

pub const vector_grid_data = Item(
  DataElementTag(0x0064, 0x0009),
  "Vector Grid Data",
  [OtherFloatString],
  vm_1,
)

pub const pre_deformation_matrix_registration_sequence = Item(
  DataElementTag(0x0064, 0x000F),
  "Pre Deformation Matrix Registration Sequence",
  [Sequence],
  vm_1,
)

pub const post_deformation_matrix_registration_sequence = Item(
  DataElementTag(0x0064, 0x0010),
  "Post Deformation Matrix Registration Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_surfaces = Item(
  DataElementTag(0x0066, 0x0001),
  "Number of Surfaces",
  [UnsignedLong],
  vm_1,
)

pub const surface_sequence = Item(
  DataElementTag(0x0066, 0x0002),
  "Surface Sequence",
  [Sequence],
  vm_1,
)

pub const surface_number = Item(
  DataElementTag(0x0066, 0x0003),
  "Surface Number",
  [UnsignedLong],
  vm_1,
)

pub const surface_comments = Item(
  DataElementTag(0x0066, 0x0004),
  "Surface Comments",
  [LongText],
  vm_1,
)

pub const surface_processing = Item(
  DataElementTag(0x0066, 0x0009),
  "Surface Processing",
  [CodeString],
  vm_1,
)

pub const surface_processing_ratio = Item(
  DataElementTag(0x0066, 0x000A),
  "Surface Processing Ratio",
  [FloatingPointSingle],
  vm_1,
)

pub const surface_processing_description = Item(
  DataElementTag(0x0066, 0x000B),
  "Surface Processing Description",
  [LongString],
  vm_1,
)

pub const recommended_presentation_opacity = Item(
  DataElementTag(0x0066, 0x000C),
  "Recommended Presentation Opacity",
  [FloatingPointSingle],
  vm_1,
)

pub const recommended_presentation_type = Item(
  DataElementTag(0x0066, 0x000D),
  "Recommended Presentation Type",
  [CodeString],
  vm_1,
)

pub const finite_volume = Item(
  DataElementTag(0x0066, 0x000E),
  "Finite Volume",
  [CodeString],
  vm_1,
)

pub const manifold = Item(
  DataElementTag(0x0066, 0x0010),
  "Manifold",
  [CodeString],
  vm_1,
)

pub const surface_points_sequence = Item(
  DataElementTag(0x0066, 0x0011),
  "Surface Points Sequence",
  [Sequence],
  vm_1,
)

pub const surface_points_normals_sequence = Item(
  DataElementTag(0x0066, 0x0012),
  "Surface Points Normals Sequence",
  [Sequence],
  vm_1,
)

pub const surface_mesh_primitives_sequence = Item(
  DataElementTag(0x0066, 0x0013),
  "Surface Mesh Primitives Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_surface_points = Item(
  DataElementTag(0x0066, 0x0015),
  "Number of Surface Points",
  [UnsignedLong],
  vm_1,
)

pub const point_coordinates_data = Item(
  DataElementTag(0x0066, 0x0016),
  "Point Coordinates Data",
  [OtherFloatString],
  vm_1,
)

pub const point_position_accuracy = Item(
  DataElementTag(0x0066, 0x0017),
  "Point Position Accuracy",
  [FloatingPointSingle],
  vm_3,
)

pub const mean_point_distance = Item(
  DataElementTag(0x0066, 0x0018),
  "Mean Point Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const maximum_point_distance = Item(
  DataElementTag(0x0066, 0x0019),
  "Maximum Point Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const points_bounding_box_coordinates = Item(
  DataElementTag(0x0066, 0x001A),
  "Points Bounding Box Coordinates",
  [FloatingPointSingle],
  vm_6,
)

pub const axis_of_rotation = Item(
  DataElementTag(0x0066, 0x001B),
  "Axis of Rotation",
  [FloatingPointSingle],
  vm_3,
)

pub const center_of_rotation = Item(
  DataElementTag(0x0066, 0x001C),
  "Center of Rotation",
  [FloatingPointSingle],
  vm_3,
)

pub const number_of_vectors = Item(
  DataElementTag(0x0066, 0x001E),
  "Number of Vectors",
  [UnsignedLong],
  vm_1,
)

pub const vector_dimensionality = Item(
  DataElementTag(0x0066, 0x001F),
  "Vector Dimensionality",
  [UnsignedShort],
  vm_1,
)

pub const vector_accuracy = Item(
  DataElementTag(0x0066, 0x0020),
  "Vector Accuracy",
  [FloatingPointSingle],
  vm_1_to_n,
)

pub const vector_coordinate_data = Item(
  DataElementTag(0x0066, 0x0021),
  "Vector Coordinate Data",
  [OtherFloatString],
  vm_1,
)

pub const double_point_coordinates_data = Item(
  DataElementTag(0x0066, 0x0022),
  "Double Point Coordinates Data",
  [OtherDoubleString],
  vm_1,
)

pub const triangle_point_index_list = Item(
  DataElementTag(0x0066, 0x0023),
  "Triangle Point Index List",
  [OtherWordString],
  vm_1,
)

pub const edge_point_index_list = Item(
  DataElementTag(0x0066, 0x0024),
  "Edge Point Index List",
  [OtherWordString],
  vm_1,
)

pub const vertex_point_index_list = Item(
  DataElementTag(0x0066, 0x0025),
  "Vertex Point Index List",
  [OtherWordString],
  vm_1,
)

pub const triangle_strip_sequence = Item(
  DataElementTag(0x0066, 0x0026),
  "Triangle Strip Sequence",
  [Sequence],
  vm_1,
)

pub const triangle_fan_sequence = Item(
  DataElementTag(0x0066, 0x0027),
  "Triangle Fan Sequence",
  [Sequence],
  vm_1,
)

pub const line_sequence = Item(
  DataElementTag(0x0066, 0x0028),
  "Line Sequence",
  [Sequence],
  vm_1,
)

pub const primitive_point_index_list = Item(
  DataElementTag(0x0066, 0x0029),
  "Primitive Point Index List",
  [OtherWordString],
  vm_1,
)

pub const surface_count = Item(
  DataElementTag(0x0066, 0x002A),
  "Surface Count",
  [UnsignedLong],
  vm_1,
)

pub const referenced_surface_sequence = Item(
  DataElementTag(0x0066, 0x002B),
  "Referenced Surface Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_surface_number = Item(
  DataElementTag(0x0066, 0x002C),
  "Referenced Surface Number",
  [UnsignedLong],
  vm_1,
)

pub const segment_surface_generation_algorithm_identification_sequence = Item(
  DataElementTag(0x0066, 0x002D),
  "Segment Surface Generation Algorithm Identification Sequence",
  [Sequence],
  vm_1,
)

pub const segment_surface_source_instance_sequence = Item(
  DataElementTag(0x0066, 0x002E),
  "Segment Surface Source Instance Sequence",
  [Sequence],
  vm_1,
)

pub const algorithm_family_code_sequence = Item(
  DataElementTag(0x0066, 0x002F),
  "Algorithm Family Code Sequence",
  [Sequence],
  vm_1,
)

pub const algorithm_name_code_sequence = Item(
  DataElementTag(0x0066, 0x0030),
  "Algorithm Name Code Sequence",
  [Sequence],
  vm_1,
)

pub const algorithm_version = Item(
  DataElementTag(0x0066, 0x0031),
  "Algorithm Version",
  [LongString],
  vm_1,
)

pub const algorithm_parameters = Item(
  DataElementTag(0x0066, 0x0032),
  "Algorithm Parameters",
  [LongText],
  vm_1,
)

pub const facet_sequence = Item(
  DataElementTag(0x0066, 0x0034),
  "Facet Sequence",
  [Sequence],
  vm_1,
)

pub const surface_processing_algorithm_identification_sequence = Item(
  DataElementTag(0x0066, 0x0035),
  "Surface Processing Algorithm Identification Sequence",
  [Sequence],
  vm_1,
)

pub const algorithm_name = Item(
  DataElementTag(0x0066, 0x0036),
  "Algorithm Name",
  [LongString],
  vm_1,
)

pub const recommended_point_radius = Item(
  DataElementTag(0x0066, 0x0037),
  "Recommended Point Radius",
  [FloatingPointSingle],
  vm_1,
)

pub const recommended_line_thickness = Item(
  DataElementTag(0x0066, 0x0038),
  "Recommended Line Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const long_primitive_point_index_list = Item(
  DataElementTag(0x0066, 0x0040),
  "Long Primitive Point Index List",
  [OtherLongString],
  vm_1,
)

pub const long_triangle_point_index_list = Item(
  DataElementTag(0x0066, 0x0041),
  "Long Triangle Point Index List",
  [OtherLongString],
  vm_1,
)

pub const long_edge_point_index_list = Item(
  DataElementTag(0x0066, 0x0042),
  "Long Edge Point Index List",
  [OtherLongString],
  vm_1,
)

pub const long_vertex_point_index_list = Item(
  DataElementTag(0x0066, 0x0043),
  "Long Vertex Point Index List",
  [OtherLongString],
  vm_1,
)

pub const track_set_sequence = Item(
  DataElementTag(0x0066, 0x0101),
  "Track Set Sequence",
  [Sequence],
  vm_1,
)

pub const track_sequence = Item(
  DataElementTag(0x0066, 0x0102),
  "Track Sequence",
  [Sequence],
  vm_1,
)

pub const recommended_display_cie_lab_value_list = Item(
  DataElementTag(0x0066, 0x0103),
  "Recommended Display CIELab Value List",
  [OtherWordString],
  vm_1,
)

pub const tracking_algorithm_identification_sequence = Item(
  DataElementTag(0x0066, 0x0104),
  "Tracking Algorithm Identification Sequence",
  [Sequence],
  vm_1,
)

pub const track_set_number = Item(
  DataElementTag(0x0066, 0x0105),
  "Track Set Number",
  [UnsignedLong],
  vm_1,
)

pub const track_set_label = Item(
  DataElementTag(0x0066, 0x0106),
  "Track Set Label",
  [LongString],
  vm_1,
)

pub const track_set_description = Item(
  DataElementTag(0x0066, 0x0107),
  "Track Set Description",
  [UnlimitedText],
  vm_1,
)

pub const track_set_anatomical_type_code_sequence = Item(
  DataElementTag(0x0066, 0x0108),
  "Track Set Anatomical Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const measurements_sequence = Item(
  DataElementTag(0x0066, 0x0121),
  "Measurements Sequence",
  [Sequence],
  vm_1,
)

pub const track_set_statistics_sequence = Item(
  DataElementTag(0x0066, 0x0124),
  "Track Set Statistics Sequence",
  [Sequence],
  vm_1,
)

pub const floating_point_values = Item(
  DataElementTag(0x0066, 0x0125),
  "Floating Point Values",
  [OtherFloatString],
  vm_1,
)

pub const track_point_index_list = Item(
  DataElementTag(0x0066, 0x0129),
  "Track Point Index List",
  [OtherLongString],
  vm_1,
)

pub const track_statistics_sequence = Item(
  DataElementTag(0x0066, 0x0130),
  "Track Statistics Sequence",
  [Sequence],
  vm_1,
)

pub const measurement_values_sequence = Item(
  DataElementTag(0x0066, 0x0132),
  "Measurement Values Sequence",
  [Sequence],
  vm_1,
)

pub const diffusion_acquisition_code_sequence = Item(
  DataElementTag(0x0066, 0x0133),
  "Diffusion Acquisition Code Sequence",
  [Sequence],
  vm_1,
)

pub const diffusion_model_code_sequence = Item(
  DataElementTag(0x0066, 0x0134),
  "Diffusion Model Code Sequence",
  [Sequence],
  vm_1,
)

pub const implant_size = Item(
  DataElementTag(0x0068, 0x6210),
  "Implant Size",
  [LongString],
  vm_1,
)

pub const implant_template_version = Item(
  DataElementTag(0x0068, 0x6221),
  "Implant Template Version",
  [LongString],
  vm_1,
)

pub const replaced_implant_template_sequence = Item(
  DataElementTag(0x0068, 0x6222),
  "Replaced Implant Template Sequence",
  [Sequence],
  vm_1,
)

pub const implant_type = Item(
  DataElementTag(0x0068, 0x6223),
  "Implant Type",
  [CodeString],
  vm_1,
)

pub const derivation_implant_template_sequence = Item(
  DataElementTag(0x0068, 0x6224),
  "Derivation Implant Template Sequence",
  [Sequence],
  vm_1,
)

pub const original_implant_template_sequence = Item(
  DataElementTag(0x0068, 0x6225),
  "Original Implant Template Sequence",
  [Sequence],
  vm_1,
)

pub const effective_date_time = Item(
  DataElementTag(0x0068, 0x6226),
  "Effective DateTime",
  [DateTime],
  vm_1,
)

pub const implant_target_anatomy_sequence = Item(
  DataElementTag(0x0068, 0x6230),
  "Implant Target Anatomy Sequence",
  [Sequence],
  vm_1,
)

pub const information_from_manufacturer_sequence = Item(
  DataElementTag(0x0068, 0x6260),
  "Information From Manufacturer Sequence",
  [Sequence],
  vm_1,
)

pub const notification_from_manufacturer_sequence = Item(
  DataElementTag(0x0068, 0x6265),
  "Notification From Manufacturer Sequence",
  [Sequence],
  vm_1,
)

pub const information_issue_date_time = Item(
  DataElementTag(0x0068, 0x6270),
  "Information Issue DateTime",
  [DateTime],
  vm_1,
)

pub const information_summary = Item(
  DataElementTag(0x0068, 0x6280),
  "Information Summary",
  [ShortText],
  vm_1,
)

pub const implant_regulatory_disapproval_code_sequence = Item(
  DataElementTag(0x0068, 0x62A0),
  "Implant Regulatory Disapproval Code Sequence",
  [Sequence],
  vm_1,
)

pub const overall_template_spatial_tolerance = Item(
  DataElementTag(0x0068, 0x62A5),
  "Overall Template Spatial Tolerance",
  [FloatingPointDouble],
  vm_1,
)

pub const hpgl_document_sequence = Item(
  DataElementTag(0x0068, 0x62C0),
  "HPGL Document Sequence",
  [Sequence],
  vm_1,
)

pub const hpgl_document_id = Item(
  DataElementTag(0x0068, 0x62D0),
  "HPGL Document ID",
  [UnsignedShort],
  vm_1,
)

pub const hpgl_document_label = Item(
  DataElementTag(0x0068, 0x62D5),
  "HPGL Document Label",
  [LongString],
  vm_1,
)

pub const view_orientation_code_sequence = Item(
  DataElementTag(0x0068, 0x62E0),
  "View Orientation Code Sequence",
  [Sequence],
  vm_1,
)

pub const view_orientation_modifier_code_sequence = Item(
  DataElementTag(0x0068, 0x62F0),
  "View Orientation Modifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const hpgl_document_scaling = Item(
  DataElementTag(0x0068, 0x62F2),
  "HPGL Document Scaling",
  [FloatingPointDouble],
  vm_1,
)

pub const hpgl_document = Item(
  DataElementTag(0x0068, 0x6300),
  "HPGL Document",
  [OtherByteString],
  vm_1,
)

pub const hpgl_contour_pen_number = Item(
  DataElementTag(0x0068, 0x6310),
  "HPGL Contour Pen Number",
  [UnsignedShort],
  vm_1,
)

pub const hpgl_pen_sequence = Item(
  DataElementTag(0x0068, 0x6320),
  "HPGL Pen Sequence",
  [Sequence],
  vm_1,
)

pub const hpgl_pen_number = Item(
  DataElementTag(0x0068, 0x6330),
  "HPGL Pen Number",
  [UnsignedShort],
  vm_1,
)

pub const hpgl_pen_label = Item(
  DataElementTag(0x0068, 0x6340),
  "HPGL Pen Label",
  [LongString],
  vm_1,
)

pub const hpgl_pen_description = Item(
  DataElementTag(0x0068, 0x6345),
  "HPGL Pen Description",
  [ShortText],
  vm_1,
)

pub const recommended_rotation_point = Item(
  DataElementTag(0x0068, 0x6346),
  "Recommended Rotation Point",
  [FloatingPointDouble],
  vm_2,
)

pub const bounding_rectangle = Item(
  DataElementTag(0x0068, 0x6347),
  "Bounding Rectangle",
  [FloatingPointDouble],
  vm_4,
)

pub const implant_template_3d_model_surface_number = Item(
  DataElementTag(0x0068, 0x6350),
  "Implant Template 3D Model Surface Number",
  [UnsignedShort],
  vm_1_to_n,
)

pub const surface_model_description_sequence = Item(
  DataElementTag(0x0068, 0x6360),
  "Surface Model Description Sequence",
  [Sequence],
  vm_1,
)

pub const surface_model_label = Item(
  DataElementTag(0x0068, 0x6380),
  "Surface Model Label",
  [LongString],
  vm_1,
)

pub const surface_model_scaling_factor = Item(
  DataElementTag(0x0068, 0x6390),
  "Surface Model Scaling Factor",
  [FloatingPointDouble],
  vm_1,
)

pub const materials_code_sequence = Item(
  DataElementTag(0x0068, 0x63A0),
  "Materials Code Sequence",
  [Sequence],
  vm_1,
)

pub const coating_materials_code_sequence = Item(
  DataElementTag(0x0068, 0x63A4),
  "Coating Materials Code Sequence",
  [Sequence],
  vm_1,
)

pub const implant_type_code_sequence = Item(
  DataElementTag(0x0068, 0x63A8),
  "Implant Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const fixation_method_code_sequence = Item(
  DataElementTag(0x0068, 0x63AC),
  "Fixation Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const mating_feature_sets_sequence = Item(
  DataElementTag(0x0068, 0x63B0),
  "Mating Feature Sets Sequence",
  [Sequence],
  vm_1,
)

pub const mating_feature_set_id = Item(
  DataElementTag(0x0068, 0x63C0),
  "Mating Feature Set ID",
  [UnsignedShort],
  vm_1,
)

pub const mating_feature_set_label = Item(
  DataElementTag(0x0068, 0x63D0),
  "Mating Feature Set Label",
  [LongString],
  vm_1,
)

pub const mating_feature_sequence = Item(
  DataElementTag(0x0068, 0x63E0),
  "Mating Feature Sequence",
  [Sequence],
  vm_1,
)

pub const mating_feature_id = Item(
  DataElementTag(0x0068, 0x63F0),
  "Mating Feature ID",
  [UnsignedShort],
  vm_1,
)

pub const mating_feature_degree_of_freedom_sequence = Item(
  DataElementTag(0x0068, 0x6400),
  "Mating Feature Degree of Freedom Sequence",
  [Sequence],
  vm_1,
)

pub const degree_of_freedom_id = Item(
  DataElementTag(0x0068, 0x6410),
  "Degree of Freedom ID",
  [UnsignedShort],
  vm_1,
)

pub const degree_of_freedom_type = Item(
  DataElementTag(0x0068, 0x6420),
  "Degree of Freedom Type",
  [CodeString],
  vm_1,
)

pub const two_d_mating_feature_coordinates_sequence = Item(
  DataElementTag(0x0068, 0x6430),
  "2D Mating Feature Coordinates Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_hpgl_document_id = Item(
  DataElementTag(0x0068, 0x6440),
  "Referenced HPGL Document ID",
  [UnsignedShort],
  vm_1,
)

pub const two_d_mating_point = Item(
  DataElementTag(0x0068, 0x6450),
  "2D Mating Point",
  [FloatingPointDouble],
  vm_2,
)

pub const two_d_mating_axes = Item(
  DataElementTag(0x0068, 0x6460),
  "2D Mating Axes",
  [FloatingPointDouble],
  vm_4,
)

pub const two_d_degree_of_freedom_sequence = Item(
  DataElementTag(0x0068, 0x6470),
  "2D Degree of Freedom Sequence",
  [Sequence],
  vm_1,
)

pub const three_d_degree_of_freedom_axis = Item(
  DataElementTag(0x0068, 0x6490),
  "3D Degree of Freedom Axis",
  [FloatingPointDouble],
  vm_3,
)

pub const range_of_freedom = Item(
  DataElementTag(0x0068, 0x64A0),
  "Range of Freedom",
  [FloatingPointDouble],
  vm_2,
)

pub const three_d_mating_point = Item(
  DataElementTag(0x0068, 0x64C0),
  "3D Mating Point",
  [FloatingPointDouble],
  vm_3,
)

pub const three_d_mating_axes = Item(
  DataElementTag(0x0068, 0x64D0),
  "3D Mating Axes",
  [FloatingPointDouble],
  ValueMultiplicity(9, Some(9)),
)

pub const two_d_degree_of_freedom_axis = Item(
  DataElementTag(0x0068, 0x64F0),
  "2D Degree of Freedom Axis",
  [FloatingPointDouble],
  vm_3,
)

pub const planning_landmark_point_sequence = Item(
  DataElementTag(0x0068, 0x6500),
  "Planning Landmark Point Sequence",
  [Sequence],
  vm_1,
)

pub const planning_landmark_line_sequence = Item(
  DataElementTag(0x0068, 0x6510),
  "Planning Landmark Line Sequence",
  [Sequence],
  vm_1,
)

pub const planning_landmark_plane_sequence = Item(
  DataElementTag(0x0068, 0x6520),
  "Planning Landmark Plane Sequence",
  [Sequence],
  vm_1,
)

pub const planning_landmark_id = Item(
  DataElementTag(0x0068, 0x6530),
  "Planning Landmark ID",
  [UnsignedShort],
  vm_1,
)

pub const planning_landmark_description = Item(
  DataElementTag(0x0068, 0x6540),
  "Planning Landmark Description",
  [LongString],
  vm_1,
)

pub const planning_landmark_identification_code_sequence = Item(
  DataElementTag(0x0068, 0x6545),
  "Planning Landmark Identification Code Sequence",
  [Sequence],
  vm_1,
)

pub const two_d_point_coordinates_sequence = Item(
  DataElementTag(0x0068, 0x6550),
  "2D Point Coordinates Sequence",
  [Sequence],
  vm_1,
)

pub const two_d_point_coordinates = Item(
  DataElementTag(0x0068, 0x6560),
  "2D Point Coordinates",
  [FloatingPointDouble],
  vm_2,
)

pub const three_d_point_coordinates = Item(
  DataElementTag(0x0068, 0x6590),
  "3D Point Coordinates",
  [FloatingPointDouble],
  vm_3,
)

pub const two_d_line_coordinates_sequence = Item(
  DataElementTag(0x0068, 0x65A0),
  "2D Line Coordinates Sequence",
  [Sequence],
  vm_1,
)

pub const two_d_line_coordinates = Item(
  DataElementTag(0x0068, 0x65B0),
  "2D Line Coordinates",
  [FloatingPointDouble],
  vm_4,
)

pub const three_d_line_coordinates = Item(
  DataElementTag(0x0068, 0x65D0),
  "3D Line Coordinates",
  [FloatingPointDouble],
  vm_6,
)

pub const two_d_plane_coordinates_sequence = Item(
  DataElementTag(0x0068, 0x65E0),
  "2D Plane Coordinates Sequence",
  [Sequence],
  vm_1,
)

pub const two_d_plane_intersection = Item(
  DataElementTag(0x0068, 0x65F0),
  "2D Plane Intersection",
  [FloatingPointDouble],
  vm_4,
)

pub const three_d_plane_origin = Item(
  DataElementTag(0x0068, 0x6610),
  "3D Plane Origin",
  [FloatingPointDouble],
  vm_3,
)

pub const three_d_plane_normal = Item(
  DataElementTag(0x0068, 0x6620),
  "3D Plane Normal",
  [FloatingPointDouble],
  vm_3,
)

pub const model_modification = Item(
  DataElementTag(0x0068, 0x7001),
  "Model Modification",
  [CodeString],
  vm_1,
)

pub const model_mirroring = Item(
  DataElementTag(0x0068, 0x7002),
  "Model Mirroring",
  [CodeString],
  vm_1,
)

pub const model_usage_code_sequence = Item(
  DataElementTag(0x0068, 0x7003),
  "Model Usage Code Sequence",
  [Sequence],
  vm_1,
)

pub const model_group_uid = Item(
  DataElementTag(0x0068, 0x7004),
  "Model Group UID",
  [UniqueIdentifier],
  vm_1,
)

pub const relative_uri_reference_within_encapsulated_document = Item(
  DataElementTag(0x0068, 0x7005),
  "Relative URI Reference Within Encapsulated Document",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const annotation_coordinate_type = Item(
  DataElementTag(0x006A, 0x0001),
  "Annotation Coordinate Type",
  [CodeString],
  vm_1,
)

pub const annotation_group_sequence = Item(
  DataElementTag(0x006A, 0x0002),
  "Annotation Group Sequence",
  [Sequence],
  vm_1,
)

pub const annotation_group_uid = Item(
  DataElementTag(0x006A, 0x0003),
  "Annotation Group UID",
  [UniqueIdentifier],
  vm_1,
)

pub const annotation_group_label = Item(
  DataElementTag(0x006A, 0x0005),
  "Annotation Group Label",
  [LongString],
  vm_1,
)

pub const annotation_group_description = Item(
  DataElementTag(0x006A, 0x0006),
  "Annotation Group Description",
  [UnlimitedText],
  vm_1,
)

pub const annotation_group_generation_type = Item(
  DataElementTag(0x006A, 0x0007),
  "Annotation Group Generation Type",
  [CodeString],
  vm_1,
)

pub const annotation_group_algorithm_identification_sequence = Item(
  DataElementTag(0x006A, 0x0008),
  "Annotation Group Algorithm Identification Sequence",
  [Sequence],
  vm_1,
)

pub const annotation_property_category_code_sequence = Item(
  DataElementTag(0x006A, 0x0009),
  "Annotation Property Category Code Sequence",
  [Sequence],
  vm_1,
)

pub const annotation_property_type_code_sequence = Item(
  DataElementTag(0x006A, 0x000A),
  "Annotation Property Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const annotation_property_type_modifier_code_sequence = Item(
  DataElementTag(0x006A, 0x000B),
  "Annotation Property Type Modifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_annotations = Item(
  DataElementTag(0x006A, 0x000C),
  "Number of Annotations",
  [UnsignedLong],
  vm_1,
)

pub const annotation_applies_to_all_optical_paths = Item(
  DataElementTag(0x006A, 0x000D),
  "Annotation Applies to All Optical Paths",
  [CodeString],
  vm_1,
)

pub const referenced_optical_path_identifier = Item(
  DataElementTag(0x006A, 0x000E),
  "Referenced Optical Path Identifier",
  [ShortString],
  vm_1_to_n,
)

pub const annotation_applies_to_all_z_planes = Item(
  DataElementTag(0x006A, 0x000F),
  "Annotation Applies to All Z Planes",
  [CodeString],
  vm_1,
)

pub const common_z_coordinate_value = Item(
  DataElementTag(0x006A, 0x0010),
  "Common Z Coordinate Value",
  [FloatingPointDouble],
  vm_1_to_n,
)

pub const annotation_index_list = Item(
  DataElementTag(0x006A, 0x0011),
  "Annotation Index List",
  [OtherLongString],
  vm_1,
)

pub const graphic_annotation_sequence = Item(
  DataElementTag(0x0070, 0x0001),
  "Graphic Annotation Sequence",
  [Sequence],
  vm_1,
)

pub const graphic_layer = Item(
  DataElementTag(0x0070, 0x0002),
  "Graphic Layer",
  [CodeString],
  vm_1,
)

pub const bounding_box_annotation_units = Item(
  DataElementTag(0x0070, 0x0003),
  "Bounding Box Annotation Units",
  [CodeString],
  vm_1,
)

pub const anchor_point_annotation_units = Item(
  DataElementTag(0x0070, 0x0004),
  "Anchor Point Annotation Units",
  [CodeString],
  vm_1,
)

pub const graphic_annotation_units = Item(
  DataElementTag(0x0070, 0x0005),
  "Graphic Annotation Units",
  [CodeString],
  vm_1,
)

pub const unformatted_text_value = Item(
  DataElementTag(0x0070, 0x0006),
  "Unformatted Text Value",
  [ShortText],
  vm_1,
)

pub const text_object_sequence = Item(
  DataElementTag(0x0070, 0x0008),
  "Text Object Sequence",
  [Sequence],
  vm_1,
)

pub const graphic_object_sequence = Item(
  DataElementTag(0x0070, 0x0009),
  "Graphic Object Sequence",
  [Sequence],
  vm_1,
)

pub const bounding_box_top_left_hand_corner = Item(
  DataElementTag(0x0070, 0x0010),
  "Bounding Box Top Left Hand Corner",
  [FloatingPointSingle],
  vm_2,
)

pub const bounding_box_bottom_right_hand_corner = Item(
  DataElementTag(0x0070, 0x0011),
  "Bounding Box Bottom Right Hand Corner",
  [FloatingPointSingle],
  vm_2,
)

pub const bounding_box_text_horizontal_justification = Item(
  DataElementTag(0x0070, 0x0012),
  "Bounding Box Text Horizontal Justification",
  [CodeString],
  vm_1,
)

pub const anchor_point = Item(
  DataElementTag(0x0070, 0x0014),
  "Anchor Point",
  [FloatingPointSingle],
  vm_2,
)

pub const anchor_point_visibility = Item(
  DataElementTag(0x0070, 0x0015),
  "Anchor Point Visibility",
  [CodeString],
  vm_1,
)

pub const graphic_dimensions = Item(
  DataElementTag(0x0070, 0x0020),
  "Graphic Dimensions",
  [UnsignedShort],
  vm_1,
)

pub const number_of_graphic_points = Item(
  DataElementTag(0x0070, 0x0021),
  "Number of Graphic Points",
  [UnsignedShort],
  vm_1,
)

pub const graphic_data = Item(
  DataElementTag(0x0070, 0x0022),
  "Graphic Data",
  [FloatingPointSingle],
  vm_2_to_n,
)

pub const graphic_type = Item(
  DataElementTag(0x0070, 0x0023),
  "Graphic Type",
  [CodeString],
  vm_1,
)

pub const graphic_filled = Item(
  DataElementTag(0x0070, 0x0024),
  "Graphic Filled",
  [CodeString],
  vm_1,
)

pub const image_rotation_retired = Item(
  DataElementTag(0x0070, 0x0040),
  "Image Rotation (Retired)",
  [IntegerString],
  vm_1,
)

pub const image_horizontal_flip = Item(
  DataElementTag(0x0070, 0x0041),
  "Image Horizontal Flip",
  [CodeString],
  vm_1,
)

pub const image_rotation = Item(
  DataElementTag(0x0070, 0x0042),
  "Image Rotation",
  [UnsignedShort],
  vm_1,
)

pub const displayed_area_top_left_hand_corner_trial = Item(
  DataElementTag(0x0070, 0x0050),
  "Displayed Area Top Left Hand Corner (Trial)",
  [UnsignedShort],
  vm_2,
)

pub const displayed_area_bottom_right_hand_corner_trial = Item(
  DataElementTag(0x0070, 0x0051),
  "Displayed Area Bottom Right Hand Corner (Trial)",
  [UnsignedShort],
  vm_2,
)

pub const displayed_area_top_left_hand_corner = Item(
  DataElementTag(0x0070, 0x0052),
  "Displayed Area Top Left Hand Corner",
  [SignedLong],
  vm_2,
)

pub const displayed_area_bottom_right_hand_corner = Item(
  DataElementTag(0x0070, 0x0053),
  "Displayed Area Bottom Right Hand Corner",
  [SignedLong],
  vm_2,
)

pub const displayed_area_selection_sequence = Item(
  DataElementTag(0x0070, 0x005A),
  "Displayed Area Selection Sequence",
  [Sequence],
  vm_1,
)

pub const graphic_layer_sequence = Item(
  DataElementTag(0x0070, 0x0060),
  "Graphic Layer Sequence",
  [Sequence],
  vm_1,
)

pub const graphic_layer_order = Item(
  DataElementTag(0x0070, 0x0062),
  "Graphic Layer Order",
  [IntegerString],
  vm_1,
)

pub const graphic_layer_recommended_display_grayscale_value = Item(
  DataElementTag(0x0070, 0x0066),
  "Graphic Layer Recommended Display Grayscale Value",
  [UnsignedShort],
  vm_1,
)

pub const graphic_layer_recommended_display_rgb_value = Item(
  DataElementTag(0x0070, 0x0067),
  "Graphic Layer Recommended Display RGB Value",
  [UnsignedShort],
  vm_3,
)

pub const graphic_layer_description = Item(
  DataElementTag(0x0070, 0x0068),
  "Graphic Layer Description",
  [LongString],
  vm_1,
)

pub const content_label = Item(
  DataElementTag(0x0070, 0x0080),
  "Content Label",
  [CodeString],
  vm_1,
)

pub const content_description = Item(
  DataElementTag(0x0070, 0x0081),
  "Content Description",
  [LongString],
  vm_1,
)

pub const presentation_creation_date = Item(
  DataElementTag(0x0070, 0x0082),
  "Presentation Creation Date",
  [Date],
  vm_1,
)

pub const presentation_creation_time = Item(
  DataElementTag(0x0070, 0x0083),
  "Presentation Creation Time",
  [Time],
  vm_1,
)

pub const content_creator_name = Item(
  DataElementTag(0x0070, 0x0084),
  "Content Creator's Name",
  [PersonName],
  vm_1,
)

pub const content_creator_identification_code_sequence = Item(
  DataElementTag(0x0070, 0x0086),
  "Content Creator's Identification Code Sequence",
  [Sequence],
  vm_1,
)

pub const alternate_content_description_sequence = Item(
  DataElementTag(0x0070, 0x0087),
  "Alternate Content Description Sequence",
  [Sequence],
  vm_1,
)

pub const presentation_size_mode = Item(
  DataElementTag(0x0070, 0x0100),
  "Presentation Size Mode",
  [CodeString],
  vm_1,
)

pub const presentation_pixel_spacing = Item(
  DataElementTag(0x0070, 0x0101),
  "Presentation Pixel Spacing",
  [DecimalString],
  vm_2,
)

pub const presentation_pixel_aspect_ratio = Item(
  DataElementTag(0x0070, 0x0102),
  "Presentation Pixel Aspect Ratio",
  [IntegerString],
  vm_2,
)

pub const presentation_pixel_magnification_ratio = Item(
  DataElementTag(0x0070, 0x0103),
  "Presentation Pixel Magnification Ratio",
  [FloatingPointSingle],
  vm_1,
)

pub const graphic_group_label = Item(
  DataElementTag(0x0070, 0x0207),
  "Graphic Group Label",
  [LongString],
  vm_1,
)

pub const graphic_group_description = Item(
  DataElementTag(0x0070, 0x0208),
  "Graphic Group Description",
  [ShortText],
  vm_1,
)

pub const compound_graphic_sequence = Item(
  DataElementTag(0x0070, 0x0209),
  "Compound Graphic Sequence",
  [Sequence],
  vm_1,
)

pub const compound_graphic_instance_id = Item(
  DataElementTag(0x0070, 0x0226),
  "Compound Graphic Instance ID",
  [UnsignedLong],
  vm_1,
)

pub const font_name = Item(
  DataElementTag(0x0070, 0x0227),
  "Font Name",
  [LongString],
  vm_1,
)

pub const font_name_type = Item(
  DataElementTag(0x0070, 0x0228),
  "Font Name Type",
  [CodeString],
  vm_1,
)

pub const css_font_name = Item(
  DataElementTag(0x0070, 0x0229),
  "CSS Font Name",
  [LongString],
  vm_1,
)

pub const rotation_angle = Item(
  DataElementTag(0x0070, 0x0230),
  "Rotation Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const text_style_sequence = Item(
  DataElementTag(0x0070, 0x0231),
  "Text Style Sequence",
  [Sequence],
  vm_1,
)

pub const line_style_sequence = Item(
  DataElementTag(0x0070, 0x0232),
  "Line Style Sequence",
  [Sequence],
  vm_1,
)

pub const fill_style_sequence = Item(
  DataElementTag(0x0070, 0x0233),
  "Fill Style Sequence",
  [Sequence],
  vm_1,
)

pub const graphic_group_sequence = Item(
  DataElementTag(0x0070, 0x0234),
  "Graphic Group Sequence",
  [Sequence],
  vm_1,
)

pub const text_color_cie_lab_value = Item(
  DataElementTag(0x0070, 0x0241),
  "Text Color CIELab Value",
  [UnsignedShort],
  vm_3,
)

pub const horizontal_alignment = Item(
  DataElementTag(0x0070, 0x0242),
  "Horizontal Alignment",
  [CodeString],
  vm_1,
)

pub const vertical_alignment = Item(
  DataElementTag(0x0070, 0x0243),
  "Vertical Alignment",
  [CodeString],
  vm_1,
)

pub const shadow_style = Item(
  DataElementTag(0x0070, 0x0244),
  "Shadow Style",
  [CodeString],
  vm_1,
)

pub const shadow_offset_x = Item(
  DataElementTag(0x0070, 0x0245),
  "Shadow Offset X",
  [FloatingPointSingle],
  vm_1,
)

pub const shadow_offset_y = Item(
  DataElementTag(0x0070, 0x0246),
  "Shadow Offset Y",
  [FloatingPointSingle],
  vm_1,
)

pub const shadow_color_cie_lab_value = Item(
  DataElementTag(0x0070, 0x0247),
  "Shadow Color CIELab Value",
  [UnsignedShort],
  vm_3,
)

pub const underlined = Item(
  DataElementTag(0x0070, 0x0248),
  "Underlined",
  [CodeString],
  vm_1,
)

pub const bold = Item(
  DataElementTag(0x0070, 0x0249),
  "Bold",
  [CodeString],
  vm_1,
)

pub const italic = Item(
  DataElementTag(0x0070, 0x0250),
  "Italic",
  [CodeString],
  vm_1,
)

pub const pattern_on_color_cie_lab_value = Item(
  DataElementTag(0x0070, 0x0251),
  "Pattern On Color CIELab Value",
  [UnsignedShort],
  vm_3,
)

pub const pattern_off_color_cie_lab_value = Item(
  DataElementTag(0x0070, 0x0252),
  "Pattern Off Color CIELab Value",
  [UnsignedShort],
  vm_3,
)

pub const line_thickness = Item(
  DataElementTag(0x0070, 0x0253),
  "Line Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const line_dashing_style = Item(
  DataElementTag(0x0070, 0x0254),
  "Line Dashing Style",
  [CodeString],
  vm_1,
)

pub const line_pattern = Item(
  DataElementTag(0x0070, 0x0255),
  "Line Pattern",
  [UnsignedLong],
  vm_1,
)

pub const fill_pattern = Item(
  DataElementTag(0x0070, 0x0256),
  "Fill Pattern",
  [OtherByteString],
  vm_1,
)

pub const fill_mode = Item(
  DataElementTag(0x0070, 0x0257),
  "Fill Mode",
  [CodeString],
  vm_1,
)

pub const shadow_opacity = Item(
  DataElementTag(0x0070, 0x0258),
  "Shadow Opacity",
  [FloatingPointSingle],
  vm_1,
)

pub const gap_length = Item(
  DataElementTag(0x0070, 0x0261),
  "Gap Length",
  [FloatingPointSingle],
  vm_1,
)

pub const diameter_of_visibility = Item(
  DataElementTag(0x0070, 0x0262),
  "Diameter of Visibility",
  [FloatingPointSingle],
  vm_1,
)

pub const rotation_point = Item(
  DataElementTag(0x0070, 0x0273),
  "Rotation Point",
  [FloatingPointSingle],
  vm_2,
)

pub const tick_alignment = Item(
  DataElementTag(0x0070, 0x0274),
  "Tick Alignment",
  [CodeString],
  vm_1,
)

pub const show_tick_label = Item(
  DataElementTag(0x0070, 0x0278),
  "Show Tick Label",
  [CodeString],
  vm_1,
)

pub const tick_label_alignment = Item(
  DataElementTag(0x0070, 0x0279),
  "Tick Label Alignment",
  [CodeString],
  vm_1,
)

pub const compound_graphic_units = Item(
  DataElementTag(0x0070, 0x0282),
  "Compound Graphic Units",
  [CodeString],
  vm_1,
)

pub const pattern_on_opacity = Item(
  DataElementTag(0x0070, 0x0284),
  "Pattern On Opacity",
  [FloatingPointSingle],
  vm_1,
)

pub const pattern_off_opacity = Item(
  DataElementTag(0x0070, 0x0285),
  "Pattern Off Opacity",
  [FloatingPointSingle],
  vm_1,
)

pub const major_ticks_sequence = Item(
  DataElementTag(0x0070, 0x0287),
  "Major Ticks Sequence",
  [Sequence],
  vm_1,
)

pub const tick_position = Item(
  DataElementTag(0x0070, 0x0288),
  "Tick Position",
  [FloatingPointSingle],
  vm_1,
)

pub const tick_label = Item(
  DataElementTag(0x0070, 0x0289),
  "Tick Label",
  [ShortString],
  vm_1,
)

pub const compound_graphic_type = Item(
  DataElementTag(0x0070, 0x0294),
  "Compound Graphic Type",
  [CodeString],
  vm_1,
)

pub const graphic_group_id = Item(
  DataElementTag(0x0070, 0x0295),
  "Graphic Group ID",
  [UnsignedLong],
  vm_1,
)

pub const shape_type = Item(
  DataElementTag(0x0070, 0x0306),
  "Shape Type",
  [CodeString],
  vm_1,
)

pub const registration_sequence = Item(
  DataElementTag(0x0070, 0x0308),
  "Registration Sequence",
  [Sequence],
  vm_1,
)

pub const matrix_registration_sequence = Item(
  DataElementTag(0x0070, 0x0309),
  "Matrix Registration Sequence",
  [Sequence],
  vm_1,
)

pub const matrix_sequence = Item(
  DataElementTag(0x0070, 0x030A),
  "Matrix Sequence",
  [Sequence],
  vm_1,
)

pub const frame_of_reference_to_displayed_coordinate_system_transformation_matrix = Item(
  DataElementTag(0x0070, 0x030B),
  "Frame of Reference to Displayed Coordinate System Transformation Matrix",
  [FloatingPointDouble],
  ValueMultiplicity(16, Some(16)),
)

pub const frame_of_reference_transformation_matrix_type = Item(
  DataElementTag(0x0070, 0x030C),
  "Frame of Reference Transformation Matrix Type",
  [CodeString],
  vm_1,
)

pub const registration_type_code_sequence = Item(
  DataElementTag(0x0070, 0x030D),
  "Registration Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const fiducial_description = Item(
  DataElementTag(0x0070, 0x030F),
  "Fiducial Description",
  [ShortText],
  vm_1,
)

pub const fiducial_identifier = Item(
  DataElementTag(0x0070, 0x0310),
  "Fiducial Identifier",
  [ShortString],
  vm_1,
)

pub const fiducial_identifier_code_sequence = Item(
  DataElementTag(0x0070, 0x0311),
  "Fiducial Identifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const contour_uncertainty_radius = Item(
  DataElementTag(0x0070, 0x0312),
  "Contour Uncertainty Radius",
  [FloatingPointDouble],
  vm_1,
)

pub const used_fiducials_sequence = Item(
  DataElementTag(0x0070, 0x0314),
  "Used Fiducials Sequence",
  [Sequence],
  vm_1,
)

pub const used_rt_structure_set_roi_sequence = Item(
  DataElementTag(0x0070, 0x0315),
  "Used RT Structure Set ROI Sequence",
  [Sequence],
  vm_1,
)

pub const graphic_coordinates_data_sequence = Item(
  DataElementTag(0x0070, 0x0318),
  "Graphic Coordinates Data Sequence",
  [Sequence],
  vm_1,
)

pub const fiducial_uid = Item(
  DataElementTag(0x0070, 0x031A),
  "Fiducial UID",
  [UniqueIdentifier],
  vm_1,
)

pub const referenced_fiducial_uid = Item(
  DataElementTag(0x0070, 0x031B),
  "Referenced Fiducial UID",
  [UniqueIdentifier],
  vm_1,
)

pub const fiducial_set_sequence = Item(
  DataElementTag(0x0070, 0x031C),
  "Fiducial Set Sequence",
  [Sequence],
  vm_1,
)

pub const fiducial_sequence = Item(
  DataElementTag(0x0070, 0x031E),
  "Fiducial Sequence",
  [Sequence],
  vm_1,
)

pub const fiducials_property_category_code_sequence = Item(
  DataElementTag(0x0070, 0x031F),
  "Fiducials Property Category Code Sequence",
  [Sequence],
  vm_1,
)

pub const graphic_layer_recommended_display_cie_lab_value = Item(
  DataElementTag(0x0070, 0x0401),
  "Graphic Layer Recommended Display CIELab Value",
  [UnsignedShort],
  vm_3,
)

pub const blending_sequence = Item(
  DataElementTag(0x0070, 0x0402),
  "Blending Sequence",
  [Sequence],
  vm_1,
)

pub const relative_opacity = Item(
  DataElementTag(0x0070, 0x0403),
  "Relative Opacity",
  [FloatingPointSingle],
  vm_1,
)

pub const referenced_spatial_registration_sequence = Item(
  DataElementTag(0x0070, 0x0404),
  "Referenced Spatial Registration Sequence",
  [Sequence],
  vm_1,
)

pub const blending_position = Item(
  DataElementTag(0x0070, 0x0405),
  "Blending Position",
  [CodeString],
  vm_1,
)

pub const presentation_display_collection_uid = Item(
  DataElementTag(0x0070, 0x1101),
  "Presentation Display Collection UID",
  [UniqueIdentifier],
  vm_1,
)

pub const presentation_sequence_collection_uid = Item(
  DataElementTag(0x0070, 0x1102),
  "Presentation Sequence Collection UID",
  [UniqueIdentifier],
  vm_1,
)

pub const presentation_sequence_position_index = Item(
  DataElementTag(0x0070, 0x1103),
  "Presentation Sequence Position Index",
  [UnsignedShort],
  vm_1,
)

pub const rendered_image_reference_sequence = Item(
  DataElementTag(0x0070, 0x1104),
  "Rendered Image Reference Sequence",
  [Sequence],
  vm_1,
)

pub const volumetric_presentation_state_input_sequence = Item(
  DataElementTag(0x0070, 0x1201),
  "Volumetric Presentation State Input Sequence",
  [Sequence],
  vm_1,
)

pub const presentation_input_type = Item(
  DataElementTag(0x0070, 0x1202),
  "Presentation Input Type",
  [CodeString],
  vm_1,
)

pub const input_sequence_position_index = Item(
  DataElementTag(0x0070, 0x1203),
  "Input Sequence Position Index",
  [UnsignedShort],
  vm_1,
)

pub const crop = Item(
  DataElementTag(0x0070, 0x1204),
  "Crop",
  [CodeString],
  vm_1,
)

pub const cropping_specification_index = Item(
  DataElementTag(0x0070, 0x1205),
  "Cropping Specification Index",
  [UnsignedShort],
  vm_1_to_n,
)

pub const compositing_method = Item(
  DataElementTag(0x0070, 0x1206),
  "Compositing Method",
  [CodeString],
  vm_1,
)

pub const volumetric_presentation_input_number = Item(
  DataElementTag(0x0070, 0x1207),
  "Volumetric Presentation Input Number",
  [UnsignedShort],
  vm_1,
)

pub const image_volume_geometry = Item(
  DataElementTag(0x0070, 0x1208),
  "Image Volume Geometry",
  [CodeString],
  vm_1,
)

pub const volumetric_presentation_input_set_uid = Item(
  DataElementTag(0x0070, 0x1209),
  "Volumetric Presentation Input Set UID",
  [UniqueIdentifier],
  vm_1,
)

pub const volumetric_presentation_input_set_sequence = Item(
  DataElementTag(0x0070, 0x120A),
  "Volumetric Presentation Input Set Sequence",
  [Sequence],
  vm_1,
)

pub const global_crop = Item(
  DataElementTag(0x0070, 0x120B),
  "Global Crop",
  [CodeString],
  vm_1,
)

pub const global_cropping_specification_index = Item(
  DataElementTag(0x0070, 0x120C),
  "Global Cropping Specification Index",
  [UnsignedShort],
  vm_1_to_n,
)

pub const rendering_method = Item(
  DataElementTag(0x0070, 0x120D),
  "Rendering Method",
  [CodeString],
  vm_1,
)

pub const volume_cropping_sequence = Item(
  DataElementTag(0x0070, 0x1301),
  "Volume Cropping Sequence",
  [Sequence],
  vm_1,
)

pub const volume_cropping_method = Item(
  DataElementTag(0x0070, 0x1302),
  "Volume Cropping Method",
  [CodeString],
  vm_1,
)

pub const bounding_box_crop = Item(
  DataElementTag(0x0070, 0x1303),
  "Bounding Box Crop",
  [FloatingPointDouble],
  vm_6,
)

pub const oblique_cropping_plane_sequence = Item(
  DataElementTag(0x0070, 0x1304),
  "Oblique Cropping Plane Sequence",
  [Sequence],
  vm_1,
)

pub const plane = Item(
  DataElementTag(0x0070, 0x1305),
  "Plane",
  [FloatingPointDouble],
  vm_4,
)

pub const plane_normal = Item(
  DataElementTag(0x0070, 0x1306),
  "Plane Normal",
  [FloatingPointDouble],
  vm_3,
)

pub const cropping_specification_number = Item(
  DataElementTag(0x0070, 0x1309),
  "Cropping Specification Number",
  [UnsignedShort],
  vm_1,
)

pub const multi_planar_reconstruction_style = Item(
  DataElementTag(0x0070, 0x1501),
  "Multi-Planar Reconstruction Style",
  [CodeString],
  vm_1,
)

pub const mpr_thickness_type = Item(
  DataElementTag(0x0070, 0x1502),
  "MPR Thickness Type",
  [CodeString],
  vm_1,
)

pub const mpr_slab_thickness = Item(
  DataElementTag(0x0070, 0x1503),
  "MPR Slab Thickness",
  [FloatingPointDouble],
  vm_1,
)

pub const mpr_top_left_hand_corner = Item(
  DataElementTag(0x0070, 0x1505),
  "MPR Top Left Hand Corner",
  [FloatingPointDouble],
  vm_3,
)

pub const mpr_view_width_direction = Item(
  DataElementTag(0x0070, 0x1507),
  "MPR View Width Direction",
  [FloatingPointDouble],
  vm_3,
)

pub const mpr_view_width = Item(
  DataElementTag(0x0070, 0x1508),
  "MPR View Width",
  [FloatingPointDouble],
  vm_1,
)

pub const number_of_volumetric_curve_points = Item(
  DataElementTag(0x0070, 0x150C),
  "Number of Volumetric Curve Points",
  [UnsignedLong],
  vm_1,
)

pub const volumetric_curve_points = Item(
  DataElementTag(0x0070, 0x150D),
  "Volumetric Curve Points",
  [OtherDoubleString],
  vm_1,
)

pub const mpr_view_height_direction = Item(
  DataElementTag(0x0070, 0x1511),
  "MPR View Height Direction",
  [FloatingPointDouble],
  vm_3,
)

pub const mpr_view_height = Item(
  DataElementTag(0x0070, 0x1512),
  "MPR View Height",
  [FloatingPointDouble],
  vm_1,
)

pub const render_projection = Item(
  DataElementTag(0x0070, 0x1602),
  "Render Projection",
  [CodeString],
  vm_1,
)

pub const viewpoint_position = Item(
  DataElementTag(0x0070, 0x1603),
  "Viewpoint Position",
  [FloatingPointDouble],
  vm_3,
)

pub const viewpoint_look_at_point = Item(
  DataElementTag(0x0070, 0x1604),
  "Viewpoint LookAt Point",
  [FloatingPointDouble],
  vm_3,
)

pub const viewpoint_up_direction = Item(
  DataElementTag(0x0070, 0x1605),
  "Viewpoint Up Direction",
  [FloatingPointDouble],
  vm_3,
)

pub const render_field_of_view = Item(
  DataElementTag(0x0070, 0x1606),
  "Render Field of View",
  [FloatingPointDouble],
  vm_6,
)

pub const sampling_step_size = Item(
  DataElementTag(0x0070, 0x1607),
  "Sampling Step Size",
  [FloatingPointDouble],
  vm_1,
)

pub const shading_style = Item(
  DataElementTag(0x0070, 0x1701),
  "Shading Style",
  [CodeString],
  vm_1,
)

pub const ambient_reflection_intensity = Item(
  DataElementTag(0x0070, 0x1702),
  "Ambient Reflection Intensity",
  [FloatingPointDouble],
  vm_1,
)

pub const light_direction = Item(
  DataElementTag(0x0070, 0x1703),
  "Light Direction",
  [FloatingPointDouble],
  vm_3,
)

pub const diffuse_reflection_intensity = Item(
  DataElementTag(0x0070, 0x1704),
  "Diffuse Reflection Intensity",
  [FloatingPointDouble],
  vm_1,
)

pub const specular_reflection_intensity = Item(
  DataElementTag(0x0070, 0x1705),
  "Specular Reflection Intensity",
  [FloatingPointDouble],
  vm_1,
)

pub const shininess = Item(
  DataElementTag(0x0070, 0x1706),
  "Shininess",
  [FloatingPointDouble],
  vm_1,
)

pub const presentation_state_classification_component_sequence = Item(
  DataElementTag(0x0070, 0x1801),
  "Presentation State Classification Component Sequence",
  [Sequence],
  vm_1,
)

pub const component_type = Item(
  DataElementTag(0x0070, 0x1802),
  "Component Type",
  [CodeString],
  vm_1,
)

pub const component_input_sequence = Item(
  DataElementTag(0x0070, 0x1803),
  "Component Input Sequence",
  [Sequence],
  vm_1,
)

pub const volumetric_presentation_input_index = Item(
  DataElementTag(0x0070, 0x1804),
  "Volumetric Presentation Input Index",
  [UnsignedShort],
  vm_1,
)

pub const presentation_state_compositor_component_sequence = Item(
  DataElementTag(0x0070, 0x1805),
  "Presentation State Compositor Component Sequence",
  [Sequence],
  vm_1,
)

pub const weighting_transfer_function_sequence = Item(
  DataElementTag(0x0070, 0x1806),
  "Weighting Transfer Function Sequence",
  [Sequence],
  vm_1,
)

pub const weighting_lookup_table_descriptor = Item(
  DataElementTag(0x0070, 0x1807),
  "Weighting Lookup Table Descriptor",
  [UnsignedShort],
  vm_3,
)

pub const weighting_lookup_table_data = Item(
  DataElementTag(0x0070, 0x1808),
  "Weighting Lookup Table Data",
  [OtherByteString],
  vm_1,
)

pub const volumetric_annotation_sequence = Item(
  DataElementTag(0x0070, 0x1901),
  "Volumetric Annotation Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_structured_context_sequence = Item(
  DataElementTag(0x0070, 0x1903),
  "Referenced Structured Context Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_content_item = Item(
  DataElementTag(0x0070, 0x1904),
  "Referenced Content Item",
  [UniqueIdentifier],
  vm_1,
)

pub const volumetric_presentation_input_annotation_sequence = Item(
  DataElementTag(0x0070, 0x1905),
  "Volumetric Presentation Input Annotation Sequence",
  [Sequence],
  vm_1,
)

pub const annotation_clipping = Item(
  DataElementTag(0x0070, 0x1907),
  "Annotation Clipping",
  [CodeString],
  vm_1,
)

pub const presentation_animation_style = Item(
  DataElementTag(0x0070, 0x1A01),
  "Presentation Animation Style",
  [CodeString],
  vm_1,
)

pub const recommended_animation_rate = Item(
  DataElementTag(0x0070, 0x1A03),
  "Recommended Animation Rate",
  [FloatingPointDouble],
  vm_1,
)

pub const animation_curve_sequence = Item(
  DataElementTag(0x0070, 0x1A04),
  "Animation Curve Sequence",
  [Sequence],
  vm_1,
)

pub const animation_step_size = Item(
  DataElementTag(0x0070, 0x1A05),
  "Animation Step Size",
  [FloatingPointDouble],
  vm_1,
)

pub const swivel_range = Item(
  DataElementTag(0x0070, 0x1A06),
  "Swivel Range",
  [FloatingPointDouble],
  vm_1,
)

pub const volumetric_curve_up_directions = Item(
  DataElementTag(0x0070, 0x1A07),
  "Volumetric Curve Up Directions",
  [OtherDoubleString],
  vm_1,
)

pub const volume_stream_sequence = Item(
  DataElementTag(0x0070, 0x1A08),
  "Volume Stream Sequence",
  [Sequence],
  vm_1,
)

pub const rgba_transfer_function_description = Item(
  DataElementTag(0x0070, 0x1A09),
  "RGBA Transfer Function Description",
  [LongString],
  vm_1,
)

pub const advanced_blending_sequence = Item(
  DataElementTag(0x0070, 0x1B01),
  "Advanced Blending Sequence",
  [Sequence],
  vm_1,
)

pub const blending_input_number = Item(
  DataElementTag(0x0070, 0x1B02),
  "Blending Input Number",
  [UnsignedShort],
  vm_1,
)

pub const blending_display_input_sequence = Item(
  DataElementTag(0x0070, 0x1B03),
  "Blending Display Input Sequence",
  [Sequence],
  vm_1,
)

pub const blending_display_sequence = Item(
  DataElementTag(0x0070, 0x1B04),
  "Blending Display Sequence",
  [Sequence],
  vm_1,
)

pub const blending_mode = Item(
  DataElementTag(0x0070, 0x1B06),
  "Blending Mode",
  [CodeString],
  vm_1,
)

pub const time_series_blending = Item(
  DataElementTag(0x0070, 0x1B07),
  "Time Series Blending",
  [CodeString],
  vm_1,
)

pub const geometry_for_display = Item(
  DataElementTag(0x0070, 0x1B08),
  "Geometry for Display",
  [CodeString],
  vm_1,
)

pub const threshold_sequence = Item(
  DataElementTag(0x0070, 0x1B11),
  "Threshold Sequence",
  [Sequence],
  vm_1,
)

pub const threshold_value_sequence = Item(
  DataElementTag(0x0070, 0x1B12),
  "Threshold Value Sequence",
  [Sequence],
  vm_1,
)

pub const threshold_type = Item(
  DataElementTag(0x0070, 0x1B13),
  "Threshold Type",
  [CodeString],
  vm_1,
)

pub const threshold_value = Item(
  DataElementTag(0x0070, 0x1B14),
  "Threshold Value",
  [FloatingPointDouble],
  vm_1,
)

pub const hanging_protocol_name = Item(
  DataElementTag(0x0072, 0x0002),
  "Hanging Protocol Name",
  [ShortString],
  vm_1,
)

pub const hanging_protocol_description = Item(
  DataElementTag(0x0072, 0x0004),
  "Hanging Protocol Description",
  [LongString],
  vm_1,
)

pub const hanging_protocol_level = Item(
  DataElementTag(0x0072, 0x0006),
  "Hanging Protocol Level",
  [CodeString],
  vm_1,
)

pub const hanging_protocol_creator = Item(
  DataElementTag(0x0072, 0x0008),
  "Hanging Protocol Creator",
  [LongString],
  vm_1,
)

pub const hanging_protocol_creation_date_time = Item(
  DataElementTag(0x0072, 0x000A),
  "Hanging Protocol Creation DateTime",
  [DateTime],
  vm_1,
)

pub const hanging_protocol_definition_sequence = Item(
  DataElementTag(0x0072, 0x000C),
  "Hanging Protocol Definition Sequence",
  [Sequence],
  vm_1,
)

pub const hanging_protocol_user_identification_code_sequence = Item(
  DataElementTag(0x0072, 0x000E),
  "Hanging Protocol User Identification Code Sequence",
  [Sequence],
  vm_1,
)

pub const hanging_protocol_user_group_name = Item(
  DataElementTag(0x0072, 0x0010),
  "Hanging Protocol User Group Name",
  [LongString],
  vm_1,
)

pub const source_hanging_protocol_sequence = Item(
  DataElementTag(0x0072, 0x0012),
  "Source Hanging Protocol Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_priors_referenced = Item(
  DataElementTag(0x0072, 0x0014),
  "Number of Priors Referenced",
  [UnsignedShort],
  vm_1,
)

pub const image_sets_sequence = Item(
  DataElementTag(0x0072, 0x0020),
  "Image Sets Sequence",
  [Sequence],
  vm_1,
)

pub const image_set_selector_sequence = Item(
  DataElementTag(0x0072, 0x0022),
  "Image Set Selector Sequence",
  [Sequence],
  vm_1,
)

pub const image_set_selector_usage_flag = Item(
  DataElementTag(0x0072, 0x0024),
  "Image Set Selector Usage Flag",
  [CodeString],
  vm_1,
)

pub const selector_attribute = Item(
  DataElementTag(0x0072, 0x0026),
  "Selector Attribute",
  [AttributeTag],
  vm_1,
)

pub const selector_value_number = Item(
  DataElementTag(0x0072, 0x0028),
  "Selector Value Number",
  [UnsignedShort],
  vm_1,
)

pub const time_based_image_sets_sequence = Item(
  DataElementTag(0x0072, 0x0030),
  "Time Based Image Sets Sequence",
  [Sequence],
  vm_1,
)

pub const image_set_number = Item(
  DataElementTag(0x0072, 0x0032),
  "Image Set Number",
  [UnsignedShort],
  vm_1,
)

pub const image_set_selector_category = Item(
  DataElementTag(0x0072, 0x0034),
  "Image Set Selector Category",
  [CodeString],
  vm_1,
)

pub const relative_time = Item(
  DataElementTag(0x0072, 0x0038),
  "Relative Time",
  [UnsignedShort],
  vm_2,
)

pub const relative_time_units = Item(
  DataElementTag(0x0072, 0x003A),
  "Relative Time Units",
  [CodeString],
  vm_1,
)

pub const abstract_prior_value = Item(
  DataElementTag(0x0072, 0x003C),
  "Abstract Prior Value",
  [SignedShort],
  vm_2,
)

pub const abstract_prior_code_sequence = Item(
  DataElementTag(0x0072, 0x003E),
  "Abstract Prior Code Sequence",
  [Sequence],
  vm_1,
)

pub const image_set_label = Item(
  DataElementTag(0x0072, 0x0040),
  "Image Set Label",
  [LongString],
  vm_1,
)

pub const selector_attribute_vr = Item(
  DataElementTag(0x0072, 0x0050),
  "Selector Attribute VR",
  [CodeString],
  vm_1,
)

pub const selector_sequence_pointer = Item(
  DataElementTag(0x0072, 0x0052),
  "Selector Sequence Pointer",
  [AttributeTag],
  vm_1_to_n,
)

pub const selector_sequence_pointer_private_creator = Item(
  DataElementTag(0x0072, 0x0054),
  "Selector Sequence Pointer Private Creator",
  [LongString],
  vm_1_to_n,
)

pub const selector_attribute_private_creator = Item(
  DataElementTag(0x0072, 0x0056),
  "Selector Attribute Private Creator",
  [LongString],
  vm_1,
)

pub const selector_ae_value = Item(
  DataElementTag(0x0072, 0x005E),
  "Selector AE Value",
  [ApplicationEntity],
  vm_1_to_n,
)

pub const selector_as_value = Item(
  DataElementTag(0x0072, 0x005F),
  "Selector AS Value",
  [AgeString],
  vm_1_to_n,
)

pub const selector_at_value = Item(
  DataElementTag(0x0072, 0x0060),
  "Selector AT Value",
  [AttributeTag],
  vm_1_to_n,
)

pub const selector_da_value = Item(
  DataElementTag(0x0072, 0x0061),
  "Selector DA Value",
  [Date],
  vm_1_to_n,
)

pub const selector_cs_value = Item(
  DataElementTag(0x0072, 0x0062),
  "Selector CS Value",
  [CodeString],
  vm_1_to_n,
)

pub const selector_dt_value = Item(
  DataElementTag(0x0072, 0x0063),
  "Selector DT Value",
  [DateTime],
  vm_1_to_n,
)

pub const selector_is_value = Item(
  DataElementTag(0x0072, 0x0064),
  "Selector IS Value",
  [IntegerString],
  vm_1_to_n,
)

pub const selector_ob_value = Item(
  DataElementTag(0x0072, 0x0065),
  "Selector OB Value",
  [OtherByteString],
  vm_1,
)

pub const selector_lo_value = Item(
  DataElementTag(0x0072, 0x0066),
  "Selector LO Value",
  [LongString],
  vm_1_to_n,
)

pub const selector_of_value = Item(
  DataElementTag(0x0072, 0x0067),
  "Selector OF Value",
  [OtherFloatString],
  vm_1,
)

pub const selector_lt_value = Item(
  DataElementTag(0x0072, 0x0068),
  "Selector LT Value",
  [LongText],
  vm_1,
)

pub const selector_ow_value = Item(
  DataElementTag(0x0072, 0x0069),
  "Selector OW Value",
  [OtherWordString],
  vm_1,
)

pub const selector_pn_value = Item(
  DataElementTag(0x0072, 0x006A),
  "Selector PN Value",
  [PersonName],
  vm_1_to_n,
)

pub const selector_tm_value = Item(
  DataElementTag(0x0072, 0x006B),
  "Selector TM Value",
  [Time],
  vm_1_to_n,
)

pub const selector_sh_value = Item(
  DataElementTag(0x0072, 0x006C),
  "Selector SH Value",
  [ShortString],
  vm_1_to_n,
)

pub const selector_un_value = Item(
  DataElementTag(0x0072, 0x006D),
  "Selector UN Value",
  [Unknown],
  vm_1,
)

pub const selector_st_value = Item(
  DataElementTag(0x0072, 0x006E),
  "Selector ST Value",
  [ShortText],
  vm_1,
)

pub const selector_uc_value = Item(
  DataElementTag(0x0072, 0x006F),
  "Selector UC Value",
  [UnlimitedCharacters],
  vm_1_to_n,
)

pub const selector_ut_value = Item(
  DataElementTag(0x0072, 0x0070),
  "Selector UT Value",
  [UnlimitedText],
  vm_1,
)

pub const selector_ur_value = Item(
  DataElementTag(0x0072, 0x0071),
  "Selector UR Value",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const selector_ds_value = Item(
  DataElementTag(0x0072, 0x0072),
  "Selector DS Value",
  [DecimalString],
  vm_1_to_n,
)

pub const selector_od_value = Item(
  DataElementTag(0x0072, 0x0073),
  "Selector OD Value",
  [OtherDoubleString],
  vm_1,
)

pub const selector_fd_value = Item(
  DataElementTag(0x0072, 0x0074),
  "Selector FD Value",
  [FloatingPointDouble],
  vm_1_to_n,
)

pub const selector_ol_value = Item(
  DataElementTag(0x0072, 0x0075),
  "Selector OL Value",
  [OtherLongString],
  vm_1,
)

pub const selector_fl_value = Item(
  DataElementTag(0x0072, 0x0076),
  "Selector FL Value",
  [FloatingPointSingle],
  vm_1_to_n,
)

pub const selector_ul_value = Item(
  DataElementTag(0x0072, 0x0078),
  "Selector UL Value",
  [UnsignedLong],
  vm_1_to_n,
)

pub const selector_us_value = Item(
  DataElementTag(0x0072, 0x007A),
  "Selector US Value",
  [UnsignedShort],
  vm_1_to_n,
)

pub const selector_sl_value = Item(
  DataElementTag(0x0072, 0x007C),
  "Selector SL Value",
  [SignedLong],
  vm_1_to_n,
)

pub const selector_ss_value = Item(
  DataElementTag(0x0072, 0x007E),
  "Selector SS Value",
  [SignedShort],
  vm_1_to_n,
)

pub const selector_ui_value = Item(
  DataElementTag(0x0072, 0x007F),
  "Selector UI Value",
  [UniqueIdentifier],
  vm_1_to_n,
)

pub const selector_code_sequence_value = Item(
  DataElementTag(0x0072, 0x0080),
  "Selector Code Sequence Value",
  [Sequence],
  vm_1,
)

pub const selector_ov_value = Item(
  DataElementTag(0x0072, 0x0081),
  "Selector OV Value",
  [OtherVeryLongString],
  vm_1,
)

pub const selector_sv_value = Item(
  DataElementTag(0x0072, 0x0082),
  "Selector SV Value",
  [SignedVeryLong],
  vm_1_to_n,
)

pub const selector_uv_value = Item(
  DataElementTag(0x0072, 0x0083),
  "Selector UV Value",
  [UnsignedVeryLong],
  vm_1_to_n,
)

pub const number_of_screens = Item(
  DataElementTag(0x0072, 0x0100),
  "Number of Screens",
  [UnsignedShort],
  vm_1,
)

pub const nominal_screen_definition_sequence = Item(
  DataElementTag(0x0072, 0x0102),
  "Nominal Screen Definition Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_vertical_pixels = Item(
  DataElementTag(0x0072, 0x0104),
  "Number of Vertical Pixels",
  [UnsignedShort],
  vm_1,
)

pub const number_of_horizontal_pixels = Item(
  DataElementTag(0x0072, 0x0106),
  "Number of Horizontal Pixels",
  [UnsignedShort],
  vm_1,
)

pub const display_environment_spatial_position = Item(
  DataElementTag(0x0072, 0x0108),
  "Display Environment Spatial Position",
  [FloatingPointDouble],
  vm_4,
)

pub const screen_minimum_grayscale_bit_depth = Item(
  DataElementTag(0x0072, 0x010A),
  "Screen Minimum Grayscale Bit Depth",
  [UnsignedShort],
  vm_1,
)

pub const screen_minimum_color_bit_depth = Item(
  DataElementTag(0x0072, 0x010C),
  "Screen Minimum Color Bit Depth",
  [UnsignedShort],
  vm_1,
)

pub const application_maximum_repaint_time = Item(
  DataElementTag(0x0072, 0x010E),
  "Application Maximum Repaint Time",
  [UnsignedShort],
  vm_1,
)

pub const display_sets_sequence = Item(
  DataElementTag(0x0072, 0x0200),
  "Display Sets Sequence",
  [Sequence],
  vm_1,
)

pub const display_set_number = Item(
  DataElementTag(0x0072, 0x0202),
  "Display Set Number",
  [UnsignedShort],
  vm_1,
)

pub const display_set_label = Item(
  DataElementTag(0x0072, 0x0203),
  "Display Set Label",
  [LongString],
  vm_1,
)

pub const display_set_presentation_group = Item(
  DataElementTag(0x0072, 0x0204),
  "Display Set Presentation Group",
  [UnsignedShort],
  vm_1,
)

pub const display_set_presentation_group_description = Item(
  DataElementTag(0x0072, 0x0206),
  "Display Set Presentation Group Description",
  [LongString],
  vm_1,
)

pub const partial_data_display_handling = Item(
  DataElementTag(0x0072, 0x0208),
  "Partial Data Display Handling",
  [CodeString],
  vm_1,
)

pub const synchronized_scrolling_sequence = Item(
  DataElementTag(0x0072, 0x0210),
  "Synchronized Scrolling Sequence",
  [Sequence],
  vm_1,
)

pub const display_set_scrolling_group = Item(
  DataElementTag(0x0072, 0x0212),
  "Display Set Scrolling Group",
  [UnsignedShort],
  vm_2_to_n,
)

pub const navigation_indicator_sequence = Item(
  DataElementTag(0x0072, 0x0214),
  "Navigation Indicator Sequence",
  [Sequence],
  vm_1,
)

pub const navigation_display_set = Item(
  DataElementTag(0x0072, 0x0216),
  "Navigation Display Set",
  [UnsignedShort],
  vm_1,
)

pub const reference_display_sets = Item(
  DataElementTag(0x0072, 0x0218),
  "Reference Display Sets",
  [UnsignedShort],
  vm_1_to_n,
)

pub const image_boxes_sequence = Item(
  DataElementTag(0x0072, 0x0300),
  "Image Boxes Sequence",
  [Sequence],
  vm_1,
)

pub const image_box_number = Item(
  DataElementTag(0x0072, 0x0302),
  "Image Box Number",
  [UnsignedShort],
  vm_1,
)

pub const image_box_layout_type = Item(
  DataElementTag(0x0072, 0x0304),
  "Image Box Layout Type",
  [CodeString],
  vm_1,
)

pub const image_box_tile_horizontal_dimension = Item(
  DataElementTag(0x0072, 0x0306),
  "Image Box Tile Horizontal Dimension",
  [UnsignedShort],
  vm_1,
)

pub const image_box_tile_vertical_dimension = Item(
  DataElementTag(0x0072, 0x0308),
  "Image Box Tile Vertical Dimension",
  [UnsignedShort],
  vm_1,
)

pub const image_box_scroll_direction = Item(
  DataElementTag(0x0072, 0x0310),
  "Image Box Scroll Direction",
  [CodeString],
  vm_1,
)

pub const image_box_small_scroll_type = Item(
  DataElementTag(0x0072, 0x0312),
  "Image Box Small Scroll Type",
  [CodeString],
  vm_1,
)

pub const image_box_small_scroll_amount = Item(
  DataElementTag(0x0072, 0x0314),
  "Image Box Small Scroll Amount",
  [UnsignedShort],
  vm_1,
)

pub const image_box_large_scroll_type = Item(
  DataElementTag(0x0072, 0x0316),
  "Image Box Large Scroll Type",
  [CodeString],
  vm_1,
)

pub const image_box_large_scroll_amount = Item(
  DataElementTag(0x0072, 0x0318),
  "Image Box Large Scroll Amount",
  [UnsignedShort],
  vm_1,
)

pub const image_box_overlap_priority = Item(
  DataElementTag(0x0072, 0x0320),
  "Image Box Overlap Priority",
  [UnsignedShort],
  vm_1,
)

pub const cine_relative_to_real_time = Item(
  DataElementTag(0x0072, 0x0330),
  "Cine Relative to Real-Time",
  [FloatingPointDouble],
  vm_1,
)

pub const filter_operations_sequence = Item(
  DataElementTag(0x0072, 0x0400),
  "Filter Operations Sequence",
  [Sequence],
  vm_1,
)

pub const filter_by_category = Item(
  DataElementTag(0x0072, 0x0402),
  "Filter-by Category",
  [CodeString],
  vm_1,
)

pub const filter_by_attribute_presence = Item(
  DataElementTag(0x0072, 0x0404),
  "Filter-by Attribute Presence",
  [CodeString],
  vm_1,
)

pub const filter_by_operator = Item(
  DataElementTag(0x0072, 0x0406),
  "Filter-by Operator",
  [CodeString],
  vm_1,
)

pub const structured_display_background_cie_lab_value = Item(
  DataElementTag(0x0072, 0x0420),
  "Structured Display Background CIELab Value",
  [UnsignedShort],
  vm_3,
)

pub const empty_image_box_cie_lab_value = Item(
  DataElementTag(0x0072, 0x0421),
  "Empty Image Box CIELab Value",
  [UnsignedShort],
  vm_3,
)

pub const structured_display_image_box_sequence = Item(
  DataElementTag(0x0072, 0x0422),
  "Structured Display Image Box Sequence",
  [Sequence],
  vm_1,
)

pub const structured_display_text_box_sequence = Item(
  DataElementTag(0x0072, 0x0424),
  "Structured Display Text Box Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_first_frame_sequence = Item(
  DataElementTag(0x0072, 0x0427),
  "Referenced First Frame Sequence",
  [Sequence],
  vm_1,
)

pub const image_box_synchronization_sequence = Item(
  DataElementTag(0x0072, 0x0430),
  "Image Box Synchronization Sequence",
  [Sequence],
  vm_1,
)

pub const synchronized_image_box_list = Item(
  DataElementTag(0x0072, 0x0432),
  "Synchronized Image Box List",
  [UnsignedShort],
  vm_2_to_n,
)

pub const type_of_synchronization = Item(
  DataElementTag(0x0072, 0x0434),
  "Type of Synchronization",
  [CodeString],
  vm_1,
)

pub const blending_operation_type = Item(
  DataElementTag(0x0072, 0x0500),
  "Blending Operation Type",
  [CodeString],
  vm_1,
)

pub const reformatting_operation_type = Item(
  DataElementTag(0x0072, 0x0510),
  "Reformatting Operation Type",
  [CodeString],
  vm_1,
)

pub const reformatting_thickness = Item(
  DataElementTag(0x0072, 0x0512),
  "Reformatting Thickness",
  [FloatingPointDouble],
  vm_1,
)

pub const reformatting_interval = Item(
  DataElementTag(0x0072, 0x0514),
  "Reformatting Interval",
  [FloatingPointDouble],
  vm_1,
)

pub const reformatting_operation_initial_view_direction = Item(
  DataElementTag(0x0072, 0x0516),
  "Reformatting Operation Initial View Direction",
  [CodeString],
  vm_1,
)

pub const three_d_rendering_type = Item(
  DataElementTag(0x0072, 0x0520),
  "3D Rendering Type",
  [CodeString],
  vm_1_to_n,
)

pub const sorting_operations_sequence = Item(
  DataElementTag(0x0072, 0x0600),
  "Sorting Operations Sequence",
  [Sequence],
  vm_1,
)

pub const sort_by_category = Item(
  DataElementTag(0x0072, 0x0602),
  "Sort-by Category",
  [CodeString],
  vm_1,
)

pub const sorting_direction = Item(
  DataElementTag(0x0072, 0x0604),
  "Sorting Direction",
  [CodeString],
  vm_1,
)

pub const display_set_patient_orientation = Item(
  DataElementTag(0x0072, 0x0700),
  "Display Set Patient Orientation",
  [CodeString],
  vm_2,
)

pub const voi_type = Item(
  DataElementTag(0x0072, 0x0702),
  "VOI Type",
  [CodeString],
  vm_1,
)

pub const pseudo_color_type = Item(
  DataElementTag(0x0072, 0x0704),
  "Pseudo-Color Type",
  [CodeString],
  vm_1,
)

pub const pseudo_color_palette_instance_reference_sequence = Item(
  DataElementTag(0x0072, 0x0705),
  "Pseudo-Color Palette Instance Reference Sequence",
  [Sequence],
  vm_1,
)

pub const show_grayscale_inverted = Item(
  DataElementTag(0x0072, 0x0706),
  "Show Grayscale Inverted",
  [CodeString],
  vm_1,
)

pub const show_image_true_size_flag = Item(
  DataElementTag(0x0072, 0x0710),
  "Show Image True Size Flag",
  [CodeString],
  vm_1,
)

pub const show_graphic_annotation_flag = Item(
  DataElementTag(0x0072, 0x0712),
  "Show Graphic Annotation Flag",
  [CodeString],
  vm_1,
)

pub const show_patient_demographics_flag = Item(
  DataElementTag(0x0072, 0x0714),
  "Show Patient Demographics Flag",
  [CodeString],
  vm_1,
)

pub const show_acquisition_techniques_flag = Item(
  DataElementTag(0x0072, 0x0716),
  "Show Acquisition Techniques Flag",
  [CodeString],
  vm_1,
)

pub const display_set_horizontal_justification = Item(
  DataElementTag(0x0072, 0x0717),
  "Display Set Horizontal Justification",
  [CodeString],
  vm_1,
)

pub const display_set_vertical_justification = Item(
  DataElementTag(0x0072, 0x0718),
  "Display Set Vertical Justification",
  [CodeString],
  vm_1,
)

pub const continuation_start_meterset = Item(
  DataElementTag(0x0074, 0x0120),
  "Continuation Start Meterset",
  [FloatingPointDouble],
  vm_1,
)

pub const continuation_end_meterset = Item(
  DataElementTag(0x0074, 0x0121),
  "Continuation End Meterset",
  [FloatingPointDouble],
  vm_1,
)

pub const procedure_step_state = Item(
  DataElementTag(0x0074, 0x1000),
  "Procedure Step State",
  [CodeString],
  vm_1,
)

pub const procedure_step_progress_information_sequence = Item(
  DataElementTag(0x0074, 0x1002),
  "Procedure Step Progress Information Sequence",
  [Sequence],
  vm_1,
)

pub const procedure_step_progress = Item(
  DataElementTag(0x0074, 0x1004),
  "Procedure Step Progress",
  [DecimalString],
  vm_1,
)

pub const procedure_step_progress_description = Item(
  DataElementTag(0x0074, 0x1006),
  "Procedure Step Progress Description",
  [ShortText],
  vm_1,
)

pub const procedure_step_progress_parameters_sequence = Item(
  DataElementTag(0x0074, 0x1007),
  "Procedure Step Progress Parameters Sequence",
  [Sequence],
  vm_1,
)

pub const procedure_step_communications_uri_sequence = Item(
  DataElementTag(0x0074, 0x1008),
  "Procedure Step Communications URI Sequence",
  [Sequence],
  vm_1,
)

pub const contact_uri = Item(
  DataElementTag(0x0074, 0x100A),
  "Contact URI",
  [UniversalResourceIdentifier],
  vm_1,
)

pub const contact_display_name = Item(
  DataElementTag(0x0074, 0x100C),
  "Contact Display Name",
  [LongString],
  vm_1,
)

pub const procedure_step_discontinuation_reason_code_sequence = Item(
  DataElementTag(0x0074, 0x100E),
  "Procedure Step Discontinuation Reason Code Sequence",
  [Sequence],
  vm_1,
)

pub const beam_task_sequence = Item(
  DataElementTag(0x0074, 0x1020),
  "Beam Task Sequence",
  [Sequence],
  vm_1,
)

pub const beam_task_type = Item(
  DataElementTag(0x0074, 0x1022),
  "Beam Task Type",
  [CodeString],
  vm_1,
)

pub const beam_order_index_trial = Item(
  DataElementTag(0x0074, 0x1024),
  "Beam Order Index (Trial)",
  [IntegerString],
  vm_1,
)

pub const autosequence_flag = Item(
  DataElementTag(0x0074, 0x1025),
  "Autosequence Flag",
  [CodeString],
  vm_1,
)

pub const table_top_vertical_adjusted_position = Item(
  DataElementTag(0x0074, 0x1026),
  "Table Top Vertical Adjusted Position",
  [FloatingPointDouble],
  vm_1,
)

pub const table_top_longitudinal_adjusted_position = Item(
  DataElementTag(0x0074, 0x1027),
  "Table Top Longitudinal Adjusted Position",
  [FloatingPointDouble],
  vm_1,
)

pub const table_top_lateral_adjusted_position = Item(
  DataElementTag(0x0074, 0x1028),
  "Table Top Lateral Adjusted Position",
  [FloatingPointDouble],
  vm_1,
)

pub const patient_support_adjusted_angle = Item(
  DataElementTag(0x0074, 0x102A),
  "Patient Support Adjusted Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const table_top_eccentric_adjusted_angle = Item(
  DataElementTag(0x0074, 0x102B),
  "Table Top Eccentric Adjusted Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const table_top_pitch_adjusted_angle = Item(
  DataElementTag(0x0074, 0x102C),
  "Table Top Pitch Adjusted Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const table_top_roll_adjusted_angle = Item(
  DataElementTag(0x0074, 0x102D),
  "Table Top Roll Adjusted Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const delivery_verification_image_sequence = Item(
  DataElementTag(0x0074, 0x1030),
  "Delivery Verification Image Sequence",
  [Sequence],
  vm_1,
)

pub const verification_image_timing = Item(
  DataElementTag(0x0074, 0x1032),
  "Verification Image Timing",
  [CodeString],
  vm_1,
)

pub const double_exposure_flag = Item(
  DataElementTag(0x0074, 0x1034),
  "Double Exposure Flag",
  [CodeString],
  vm_1,
)

pub const double_exposure_ordering = Item(
  DataElementTag(0x0074, 0x1036),
  "Double Exposure Ordering",
  [CodeString],
  vm_1,
)

pub const double_exposure_meterset_trial = Item(
  DataElementTag(0x0074, 0x1038),
  "Double Exposure Meterset (Trial)",
  [DecimalString],
  vm_1,
)

pub const double_exposure_field_delta_trial = Item(
  DataElementTag(0x0074, 0x103A),
  "Double Exposure Field Delta (Trial)",
  [DecimalString],
  vm_4,
)

pub const related_reference_rt_image_sequence = Item(
  DataElementTag(0x0074, 0x1040),
  "Related Reference RT Image Sequence",
  [Sequence],
  vm_1,
)

pub const general_machine_verification_sequence = Item(
  DataElementTag(0x0074, 0x1042),
  "General Machine Verification Sequence",
  [Sequence],
  vm_1,
)

pub const conventional_machine_verification_sequence = Item(
  DataElementTag(0x0074, 0x1044),
  "Conventional Machine Verification Sequence",
  [Sequence],
  vm_1,
)

pub const ion_machine_verification_sequence = Item(
  DataElementTag(0x0074, 0x1046),
  "Ion Machine Verification Sequence",
  [Sequence],
  vm_1,
)

pub const failed_attributes_sequence = Item(
  DataElementTag(0x0074, 0x1048),
  "Failed Attributes Sequence",
  [Sequence],
  vm_1,
)

pub const overridden_attributes_sequence = Item(
  DataElementTag(0x0074, 0x104A),
  "Overridden Attributes Sequence",
  [Sequence],
  vm_1,
)

pub const conventional_control_point_verification_sequence = Item(
  DataElementTag(0x0074, 0x104C),
  "Conventional Control Point Verification Sequence",
  [Sequence],
  vm_1,
)

pub const ion_control_point_verification_sequence = Item(
  DataElementTag(0x0074, 0x104E),
  "Ion Control Point Verification Sequence",
  [Sequence],
  vm_1,
)

pub const attribute_occurrence_sequence = Item(
  DataElementTag(0x0074, 0x1050),
  "Attribute Occurrence Sequence",
  [Sequence],
  vm_1,
)

pub const attribute_occurrence_pointer = Item(
  DataElementTag(0x0074, 0x1052),
  "Attribute Occurrence Pointer",
  [AttributeTag],
  vm_1,
)

pub const attribute_item_selector = Item(
  DataElementTag(0x0074, 0x1054),
  "Attribute Item Selector",
  [UnsignedLong],
  vm_1,
)

pub const attribute_occurrence_private_creator = Item(
  DataElementTag(0x0074, 0x1056),
  "Attribute Occurrence Private Creator",
  [LongString],
  vm_1,
)

pub const selector_sequence_pointer_items = Item(
  DataElementTag(0x0074, 0x1057),
  "Selector Sequence Pointer Items",
  [IntegerString],
  vm_1_to_n,
)

pub const scheduled_procedure_step_priority = Item(
  DataElementTag(0x0074, 0x1200),
  "Scheduled Procedure Step Priority",
  [CodeString],
  vm_1,
)

pub const worklist_label = Item(
  DataElementTag(0x0074, 0x1202),
  "Worklist Label",
  [LongString],
  vm_1,
)

pub const procedure_step_label = Item(
  DataElementTag(0x0074, 0x1204),
  "Procedure Step Label",
  [LongString],
  vm_1,
)

pub const scheduled_processing_parameters_sequence = Item(
  DataElementTag(0x0074, 0x1210),
  "Scheduled Processing Parameters Sequence",
  [Sequence],
  vm_1,
)

pub const performed_processing_parameters_sequence = Item(
  DataElementTag(0x0074, 0x1212),
  "Performed Processing Parameters Sequence",
  [Sequence],
  vm_1,
)

pub const unified_procedure_step_performed_procedure_sequence = Item(
  DataElementTag(0x0074, 0x1216),
  "Unified Procedure Step Performed Procedure Sequence",
  [Sequence],
  vm_1,
)

pub const related_procedure_step_sequence = Item(
  DataElementTag(0x0074, 0x1220),
  "Related Procedure Step Sequence",
  [Sequence],
  vm_1,
)

pub const procedure_step_relationship_type = Item(
  DataElementTag(0x0074, 0x1222),
  "Procedure Step Relationship Type",
  [LongString],
  vm_1,
)

pub const replaced_procedure_step_sequence = Item(
  DataElementTag(0x0074, 0x1224),
  "Replaced Procedure Step Sequence",
  [Sequence],
  vm_1,
)

pub const deletion_lock = Item(
  DataElementTag(0x0074, 0x1230),
  "Deletion Lock",
  [LongString],
  vm_1,
)

pub const receiving_ae = Item(
  DataElementTag(0x0074, 0x1234),
  "Receiving AE",
  [ApplicationEntity],
  vm_1,
)

pub const requesting_ae = Item(
  DataElementTag(0x0074, 0x1236),
  "Requesting AE",
  [ApplicationEntity],
  vm_1,
)

pub const reason_for_cancellation = Item(
  DataElementTag(0x0074, 0x1238),
  "Reason for Cancellation",
  [LongText],
  vm_1,
)

pub const scp_status = Item(
  DataElementTag(0x0074, 0x1242),
  "SCP Status",
  [CodeString],
  vm_1,
)

pub const subscription_list_status = Item(
  DataElementTag(0x0074, 0x1244),
  "Subscription List Status",
  [CodeString],
  vm_1,
)

pub const unified_procedure_step_list_status = Item(
  DataElementTag(0x0074, 0x1246),
  "Unified Procedure Step List Status",
  [CodeString],
  vm_1,
)

pub const beam_order_index = Item(
  DataElementTag(0x0074, 0x1324),
  "Beam Order Index",
  [UnsignedLong],
  vm_1,
)

pub const double_exposure_meterset = Item(
  DataElementTag(0x0074, 0x1338),
  "Double Exposure Meterset",
  [FloatingPointDouble],
  vm_1,
)

pub const double_exposure_field_delta = Item(
  DataElementTag(0x0074, 0x133A),
  "Double Exposure Field Delta",
  [FloatingPointDouble],
  vm_4,
)

pub const brachy_task_sequence = Item(
  DataElementTag(0x0074, 0x1401),
  "Brachy Task Sequence",
  [Sequence],
  vm_1,
)

pub const continuation_start_total_reference_air_kerma = Item(
  DataElementTag(0x0074, 0x1402),
  "Continuation Start Total Reference Air Kerma",
  [DecimalString],
  vm_1,
)

pub const continuation_end_total_reference_air_kerma = Item(
  DataElementTag(0x0074, 0x1403),
  "Continuation End Total Reference Air Kerma",
  [DecimalString],
  vm_1,
)

pub const continuation_pulse_number = Item(
  DataElementTag(0x0074, 0x1404),
  "Continuation Pulse Number",
  [IntegerString],
  vm_1,
)

pub const channel_delivery_order_sequence = Item(
  DataElementTag(0x0074, 0x1405),
  "Channel Delivery Order Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_channel_number = Item(
  DataElementTag(0x0074, 0x1406),
  "Referenced Channel Number",
  [IntegerString],
  vm_1,
)

pub const start_cumulative_time_weight = Item(
  DataElementTag(0x0074, 0x1407),
  "Start Cumulative Time Weight",
  [DecimalString],
  vm_1,
)

pub const end_cumulative_time_weight = Item(
  DataElementTag(0x0074, 0x1408),
  "End Cumulative Time Weight",
  [DecimalString],
  vm_1,
)

pub const omitted_channel_sequence = Item(
  DataElementTag(0x0074, 0x1409),
  "Omitted Channel Sequence",
  [Sequence],
  vm_1,
)

pub const reason_for_channel_omission = Item(
  DataElementTag(0x0074, 0x140A),
  "Reason for Channel Omission",
  [CodeString],
  vm_1,
)

pub const reason_for_channel_omission_description = Item(
  DataElementTag(0x0074, 0x140B),
  "Reason for Channel Omission Description",
  [LongString],
  vm_1,
)

pub const channel_delivery_order_index = Item(
  DataElementTag(0x0074, 0x140C),
  "Channel Delivery Order Index",
  [IntegerString],
  vm_1,
)

pub const channel_delivery_continuation_sequence = Item(
  DataElementTag(0x0074, 0x140D),
  "Channel Delivery Continuation Sequence",
  [Sequence],
  vm_1,
)

pub const omitted_application_setup_sequence = Item(
  DataElementTag(0x0074, 0x140E),
  "Omitted Application Setup Sequence",
  [Sequence],
  vm_1,
)

pub const implant_assembly_template_name = Item(
  DataElementTag(0x0076, 0x0001),
  "Implant Assembly Template Name",
  [LongString],
  vm_1,
)

pub const implant_assembly_template_issuer = Item(
  DataElementTag(0x0076, 0x0003),
  "Implant Assembly Template Issuer",
  [LongString],
  vm_1,
)

pub const implant_assembly_template_version = Item(
  DataElementTag(0x0076, 0x0006),
  "Implant Assembly Template Version",
  [LongString],
  vm_1,
)

pub const replaced_implant_assembly_template_sequence = Item(
  DataElementTag(0x0076, 0x0008),
  "Replaced Implant Assembly Template Sequence",
  [Sequence],
  vm_1,
)

pub const implant_assembly_template_type = Item(
  DataElementTag(0x0076, 0x000A),
  "Implant Assembly Template Type",
  [CodeString],
  vm_1,
)

pub const original_implant_assembly_template_sequence = Item(
  DataElementTag(0x0076, 0x000C),
  "Original Implant Assembly Template Sequence",
  [Sequence],
  vm_1,
)

pub const derivation_implant_assembly_template_sequence = Item(
  DataElementTag(0x0076, 0x000E),
  "Derivation Implant Assembly Template Sequence",
  [Sequence],
  vm_1,
)

pub const implant_assembly_template_target_anatomy_sequence = Item(
  DataElementTag(0x0076, 0x0010),
  "Implant Assembly Template Target Anatomy Sequence",
  [Sequence],
  vm_1,
)

pub const procedure_type_code_sequence = Item(
  DataElementTag(0x0076, 0x0020),
  "Procedure Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const surgical_technique = Item(
  DataElementTag(0x0076, 0x0030),
  "Surgical Technique",
  [LongString],
  vm_1,
)

pub const component_types_sequence = Item(
  DataElementTag(0x0076, 0x0032),
  "Component Types Sequence",
  [Sequence],
  vm_1,
)

pub const component_type_code_sequence = Item(
  DataElementTag(0x0076, 0x0034),
  "Component Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const exclusive_component_type = Item(
  DataElementTag(0x0076, 0x0036),
  "Exclusive Component Type",
  [CodeString],
  vm_1,
)

pub const mandatory_component_type = Item(
  DataElementTag(0x0076, 0x0038),
  "Mandatory Component Type",
  [CodeString],
  vm_1,
)

pub const component_sequence = Item(
  DataElementTag(0x0076, 0x0040),
  "Component Sequence",
  [Sequence],
  vm_1,
)

pub const component_id = Item(
  DataElementTag(0x0076, 0x0055),
  "Component ID",
  [UnsignedShort],
  vm_1,
)

pub const component_assembly_sequence = Item(
  DataElementTag(0x0076, 0x0060),
  "Component Assembly Sequence",
  [Sequence],
  vm_1,
)

pub const component_1_referenced_id = Item(
  DataElementTag(0x0076, 0x0070),
  "Component 1 Referenced ID",
  [UnsignedShort],
  vm_1,
)

pub const component_1_referenced_mating_feature_set_id = Item(
  DataElementTag(0x0076, 0x0080),
  "Component 1 Referenced Mating Feature Set ID",
  [UnsignedShort],
  vm_1,
)

pub const component_1_referenced_mating_feature_id = Item(
  DataElementTag(0x0076, 0x0090),
  "Component 1 Referenced Mating Feature ID",
  [UnsignedShort],
  vm_1,
)

pub const component_2_referenced_id = Item(
  DataElementTag(0x0076, 0x00A0),
  "Component 2 Referenced ID",
  [UnsignedShort],
  vm_1,
)

pub const component_2_referenced_mating_feature_set_id = Item(
  DataElementTag(0x0076, 0x00B0),
  "Component 2 Referenced Mating Feature Set ID",
  [UnsignedShort],
  vm_1,
)

pub const component_2_referenced_mating_feature_id = Item(
  DataElementTag(0x0076, 0x00C0),
  "Component 2 Referenced Mating Feature ID",
  [UnsignedShort],
  vm_1,
)

pub const implant_template_group_name = Item(
  DataElementTag(0x0078, 0x0001),
  "Implant Template Group Name",
  [LongString],
  vm_1,
)

pub const implant_template_group_description = Item(
  DataElementTag(0x0078, 0x0010),
  "Implant Template Group Description",
  [ShortText],
  vm_1,
)

pub const implant_template_group_issuer = Item(
  DataElementTag(0x0078, 0x0020),
  "Implant Template Group Issuer",
  [LongString],
  vm_1,
)

pub const implant_template_group_version = Item(
  DataElementTag(0x0078, 0x0024),
  "Implant Template Group Version",
  [LongString],
  vm_1,
)

pub const replaced_implant_template_group_sequence = Item(
  DataElementTag(0x0078, 0x0026),
  "Replaced Implant Template Group Sequence",
  [Sequence],
  vm_1,
)

pub const implant_template_group_target_anatomy_sequence = Item(
  DataElementTag(0x0078, 0x0028),
  "Implant Template Group Target Anatomy Sequence",
  [Sequence],
  vm_1,
)

pub const implant_template_group_members_sequence = Item(
  DataElementTag(0x0078, 0x002A),
  "Implant Template Group Members Sequence",
  [Sequence],
  vm_1,
)

pub const implant_template_group_member_id = Item(
  DataElementTag(0x0078, 0x002E),
  "Implant Template Group Member ID",
  [UnsignedShort],
  vm_1,
)

pub const three_d_implant_template_group_member_matching_point = Item(
  DataElementTag(0x0078, 0x0050),
  "3D Implant Template Group Member Matching Point",
  [FloatingPointDouble],
  vm_3,
)

pub const three_d_implant_template_group_member_matching_axes = Item(
  DataElementTag(0x0078, 0x0060),
  "3D Implant Template Group Member Matching Axes",
  [FloatingPointDouble],
  ValueMultiplicity(9, Some(9)),
)

pub const implant_template_group_member_matching_2d_coordinates_sequence = Item(
  DataElementTag(0x0078, 0x0070),
  "Implant Template Group Member Matching 2D Coordinates Sequence",
  [Sequence],
  vm_1,
)

pub const two_d_implant_template_group_member_matching_point = Item(
  DataElementTag(0x0078, 0x0090),
  "2D Implant Template Group Member Matching Point",
  [FloatingPointDouble],
  vm_2,
)

pub const two_d_implant_template_group_member_matching_axes = Item(
  DataElementTag(0x0078, 0x00A0),
  "2D Implant Template Group Member Matching Axes",
  [FloatingPointDouble],
  vm_4,
)

pub const implant_template_group_variation_dimension_sequence = Item(
  DataElementTag(0x0078, 0x00B0),
  "Implant Template Group Variation Dimension Sequence",
  [Sequence],
  vm_1,
)

pub const implant_template_group_variation_dimension_name = Item(
  DataElementTag(0x0078, 0x00B2),
  "Implant Template Group Variation Dimension Name",
  [LongString],
  vm_1,
)

pub const implant_template_group_variation_dimension_rank_sequence = Item(
  DataElementTag(0x0078, 0x00B4),
  "Implant Template Group Variation Dimension Rank Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_implant_template_group_member_id = Item(
  DataElementTag(0x0078, 0x00B6),
  "Referenced Implant Template Group Member ID",
  [UnsignedShort],
  vm_1,
)

pub const implant_template_group_variation_dimension_rank = Item(
  DataElementTag(0x0078, 0x00B8),
  "Implant Template Group Variation Dimension Rank",
  [UnsignedShort],
  vm_1,
)

pub const surface_scan_acquisition_type_code_sequence = Item(
  DataElementTag(0x0080, 0x0001),
  "Surface Scan Acquisition Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const surface_scan_mode_code_sequence = Item(
  DataElementTag(0x0080, 0x0002),
  "Surface Scan Mode Code Sequence",
  [Sequence],
  vm_1,
)

pub const registration_method_code_sequence = Item(
  DataElementTag(0x0080, 0x0003),
  "Registration Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const shot_duration_time = Item(
  DataElementTag(0x0080, 0x0004),
  "Shot Duration Time",
  [FloatingPointDouble],
  vm_1,
)

pub const shot_offset_time = Item(
  DataElementTag(0x0080, 0x0005),
  "Shot Offset Time",
  [FloatingPointDouble],
  vm_1,
)

pub const surface_point_presentation_value_data = Item(
  DataElementTag(0x0080, 0x0006),
  "Surface Point Presentation Value Data",
  [UnsignedShort],
  vm_1_to_n,
)

pub const surface_point_color_cie_lab_value_data = Item(
  DataElementTag(0x0080, 0x0007),
  "Surface Point Color CIELab Value Data",
  [UnsignedShort],
  vm_3_to_n,
)

pub const uv_mapping_sequence = Item(
  DataElementTag(0x0080, 0x0008),
  "UV Mapping Sequence",
  [Sequence],
  vm_1,
)

pub const texture_label = Item(
  DataElementTag(0x0080, 0x0009),
  "Texture Label",
  [ShortString],
  vm_1,
)

pub const u_value_data = Item(
  DataElementTag(0x0080, 0x0010),
  "U Value Data",
  [OtherFloatString],
  vm_1,
)

pub const v_value_data = Item(
  DataElementTag(0x0080, 0x0011),
  "V Value Data",
  [OtherFloatString],
  vm_1,
)

pub const referenced_texture_sequence = Item(
  DataElementTag(0x0080, 0x0012),
  "Referenced Texture Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_surface_data_sequence = Item(
  DataElementTag(0x0080, 0x0013),
  "Referenced Surface Data Sequence",
  [Sequence],
  vm_1,
)

pub const assessment_summary = Item(
  DataElementTag(0x0082, 0x0001),
  "Assessment Summary",
  [CodeString],
  vm_1,
)

pub const assessment_summary_description = Item(
  DataElementTag(0x0082, 0x0003),
  "Assessment Summary Description",
  [UnlimitedText],
  vm_1,
)

pub const assessed_sop_instance_sequence = Item(
  DataElementTag(0x0082, 0x0004),
  "Assessed SOP Instance Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_comparison_sop_instance_sequence = Item(
  DataElementTag(0x0082, 0x0005),
  "Referenced Comparison SOP Instance Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_assessment_observations = Item(
  DataElementTag(0x0082, 0x0006),
  "Number of Assessment Observations",
  [UnsignedLong],
  vm_1,
)

pub const assessment_observations_sequence = Item(
  DataElementTag(0x0082, 0x0007),
  "Assessment Observations Sequence",
  [Sequence],
  vm_1,
)

pub const observation_significance = Item(
  DataElementTag(0x0082, 0x0008),
  "Observation Significance",
  [CodeString],
  vm_1,
)

pub const observation_description = Item(
  DataElementTag(0x0082, 0x000A),
  "Observation Description",
  [UnlimitedText],
  vm_1,
)

pub const structured_constraint_observation_sequence = Item(
  DataElementTag(0x0082, 0x000C),
  "Structured Constraint Observation Sequence",
  [Sequence],
  vm_1,
)

pub const assessed_attribute_value_sequence = Item(
  DataElementTag(0x0082, 0x0010),
  "Assessed Attribute Value Sequence",
  [Sequence],
  vm_1,
)

pub const assessment_set_id = Item(
  DataElementTag(0x0082, 0x0016),
  "Assessment Set ID",
  [LongString],
  vm_1,
)

pub const assessment_requester_sequence = Item(
  DataElementTag(0x0082, 0x0017),
  "Assessment Requester Sequence",
  [Sequence],
  vm_1,
)

pub const selector_attribute_name = Item(
  DataElementTag(0x0082, 0x0018),
  "Selector Attribute Name",
  [LongString],
  vm_1,
)

pub const selector_attribute_keyword = Item(
  DataElementTag(0x0082, 0x0019),
  "Selector Attribute Keyword",
  [LongString],
  vm_1,
)

pub const assessment_type_code_sequence = Item(
  DataElementTag(0x0082, 0x0021),
  "Assessment Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const observation_basis_code_sequence = Item(
  DataElementTag(0x0082, 0x0022),
  "Observation Basis Code Sequence",
  [Sequence],
  vm_1,
)

pub const assessment_label = Item(
  DataElementTag(0x0082, 0x0023),
  "Assessment Label",
  [LongString],
  vm_1,
)

pub const constraint_type = Item(
  DataElementTag(0x0082, 0x0032),
  "Constraint Type",
  [CodeString],
  vm_1,
)

pub const specification_selection_guidance = Item(
  DataElementTag(0x0082, 0x0033),
  "Specification Selection Guidance",
  [UnlimitedText],
  vm_1,
)

pub const constraint_value_sequence = Item(
  DataElementTag(0x0082, 0x0034),
  "Constraint Value Sequence",
  [Sequence],
  vm_1,
)

pub const recommended_default_value_sequence = Item(
  DataElementTag(0x0082, 0x0035),
  "Recommended Default Value Sequence",
  [Sequence],
  vm_1,
)

pub const constraint_violation_significance = Item(
  DataElementTag(0x0082, 0x0036),
  "Constraint Violation Significance",
  [CodeString],
  vm_1,
)

pub const constraint_violation_condition = Item(
  DataElementTag(0x0082, 0x0037),
  "Constraint Violation Condition",
  [UnlimitedText],
  vm_1,
)

pub const modifiable_constraint_flag = Item(
  DataElementTag(0x0082, 0x0038),
  "Modifiable Constraint Flag",
  [CodeString],
  vm_1,
)

pub const storage_media_file_set_id = Item(
  DataElementTag(0x0088, 0x0130),
  "Storage Media File-set ID",
  [ShortString],
  vm_1,
)

pub const storage_media_file_set_uid = Item(
  DataElementTag(0x0088, 0x0140),
  "Storage Media File-set UID",
  [UniqueIdentifier],
  vm_1,
)

pub const icon_image_sequence = Item(
  DataElementTag(0x0088, 0x0200),
  "Icon Image Sequence",
  [Sequence],
  vm_1,
)

pub const topic_title = Item(
  DataElementTag(0x0088, 0x0904),
  "Topic Title",
  [LongString],
  vm_1,
)

pub const topic_subject = Item(
  DataElementTag(0x0088, 0x0906),
  "Topic Subject",
  [ShortText],
  vm_1,
)

pub const topic_author = Item(
  DataElementTag(0x0088, 0x0910),
  "Topic Author",
  [LongString],
  vm_1,
)

pub const topic_keywords = Item(
  DataElementTag(0x0088, 0x0912),
  "Topic Keywords",
  [LongString],
  ValueMultiplicity(1, Some(32)),
)

pub const sop_instance_status = Item(
  DataElementTag(0x0100, 0x0410),
  "SOP Instance Status",
  [CodeString],
  vm_1,
)

pub const sop_authorization_date_time = Item(
  DataElementTag(0x0100, 0x0420),
  "SOP Authorization DateTime",
  [DateTime],
  vm_1,
)

pub const sop_authorization_comment = Item(
  DataElementTag(0x0100, 0x0424),
  "SOP Authorization Comment",
  [LongText],
  vm_1,
)

pub const authorization_equipment_certification_number = Item(
  DataElementTag(0x0100, 0x0426),
  "Authorization Equipment Certification Number",
  [LongString],
  vm_1,
)

pub const macid_number = Item(
  DataElementTag(0x0400, 0x0005),
  "MAC ID Number",
  [UnsignedShort],
  vm_1,
)

pub const mac_calculation_transfer_syntax_uid = Item(
  DataElementTag(0x0400, 0x0010),
  "MAC Calculation Transfer Syntax UID",
  [UniqueIdentifier],
  vm_1,
)

pub const mac_algorithm = Item(
  DataElementTag(0x0400, 0x0015),
  "MAC Algorithm",
  [CodeString],
  vm_1,
)

pub const data_elements_signed = Item(
  DataElementTag(0x0400, 0x0020),
  "Data Elements Signed",
  [AttributeTag],
  vm_1_to_n,
)

pub const digital_signature_uid = Item(
  DataElementTag(0x0400, 0x0100),
  "Digital Signature UID",
  [UniqueIdentifier],
  vm_1,
)

pub const digital_signature_date_time = Item(
  DataElementTag(0x0400, 0x0105),
  "Digital Signature DateTime",
  [DateTime],
  vm_1,
)

pub const certificate_type = Item(
  DataElementTag(0x0400, 0x0110),
  "Certificate Type",
  [CodeString],
  vm_1,
)

pub const certificate_of_signer = Item(
  DataElementTag(0x0400, 0x0115),
  "Certificate of Signer",
  [OtherByteString],
  vm_1,
)

pub const signature = Item(
  DataElementTag(0x0400, 0x0120),
  "Signature",
  [OtherByteString],
  vm_1,
)

pub const certified_timestamp_type = Item(
  DataElementTag(0x0400, 0x0305),
  "Certified Timestamp Type",
  [CodeString],
  vm_1,
)

pub const certified_timestamp = Item(
  DataElementTag(0x0400, 0x0310),
  "Certified Timestamp",
  [OtherByteString],
  vm_1,
)

pub const digital_signature_purpose_code_sequence = Item(
  DataElementTag(0x0400, 0x0401),
  "Digital Signature Purpose Code Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_digital_signature_sequence = Item(
  DataElementTag(0x0400, 0x0402),
  "Referenced Digital Signature Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_sop_instance_mac_sequence = Item(
  DataElementTag(0x0400, 0x0403),
  "Referenced SOP Instance MAC Sequence",
  [Sequence],
  vm_1,
)

pub const mac = Item(
  DataElementTag(0x0400, 0x0404),
  "MAC",
  [OtherByteString],
  vm_1,
)

pub const encrypted_attributes_sequence = Item(
  DataElementTag(0x0400, 0x0500),
  "Encrypted Attributes Sequence",
  [Sequence],
  vm_1,
)

pub const encrypted_content_transfer_syntax_uid = Item(
  DataElementTag(0x0400, 0x0510),
  "Encrypted Content Transfer Syntax UID",
  [UniqueIdentifier],
  vm_1,
)

pub const encrypted_content = Item(
  DataElementTag(0x0400, 0x0520),
  "Encrypted Content",
  [OtherByteString],
  vm_1,
)

pub const modified_attributes_sequence = Item(
  DataElementTag(0x0400, 0x0550),
  "Modified Attributes Sequence",
  [Sequence],
  vm_1,
)

pub const nonconforming_modified_attributes_sequence = Item(
  DataElementTag(0x0400, 0x0551),
  "Nonconforming Modified Attributes Sequence",
  [Sequence],
  vm_1,
)

pub const nonconforming_data_element_value = Item(
  DataElementTag(0x0400, 0x0552),
  "Nonconforming Data Element Value",
  [OtherByteString],
  vm_1,
)

pub const original_attributes_sequence = Item(
  DataElementTag(0x0400, 0x0561),
  "Original Attributes Sequence",
  [Sequence],
  vm_1,
)

pub const attribute_modification_date_time = Item(
  DataElementTag(0x0400, 0x0562),
  "Attribute Modification DateTime",
  [DateTime],
  vm_1,
)

pub const modifying_system = Item(
  DataElementTag(0x0400, 0x0563),
  "Modifying System",
  [LongString],
  vm_1,
)

pub const source_of_previous_values = Item(
  DataElementTag(0x0400, 0x0564),
  "Source of Previous Values",
  [LongString],
  vm_1,
)

pub const reason_for_the_attribute_modification = Item(
  DataElementTag(0x0400, 0x0565),
  "Reason for the Attribute Modification",
  [CodeString],
  vm_1,
)

pub const instance_origin_status = Item(
  DataElementTag(0x0400, 0x0600),
  "Instance Origin Status",
  [CodeString],
  vm_1,
)

pub const escape_triplet = Item(
  DataElementTag(0x1000, 0x0000),
  "Escape Triplet",
  [UnsignedShort],
  vm_3,
)

pub const run_length_triplet = Item(
  DataElementTag(0x1000, 0x0001),
  "Run Length Triplet",
  [UnsignedShort],
  vm_3,
)

pub const huffman_table_size = Item(
  DataElementTag(0x1000, 0x0002),
  "Huffman Table Size",
  [UnsignedShort],
  vm_1,
)

pub const huffman_table_triplet = Item(
  DataElementTag(0x1000, 0x0003),
  "Huffman Table Triplet",
  [UnsignedShort],
  vm_3,
)

pub const shift_table_size = Item(
  DataElementTag(0x1000, 0x0004),
  "Shift Table Size",
  [UnsignedShort],
  vm_1,
)

pub const shift_table_triplet = Item(
  DataElementTag(0x1000, 0x0005),
  "Shift Table Triplet",
  [UnsignedShort],
  vm_3,
)

pub const zonal_map = Item(
  DataElementTag(0x1010, 0x0000),
  "Zonal Map",
  [UnsignedShort],
  vm_1_to_n,
)

pub const number_of_copies = Item(
  DataElementTag(0x2000, 0x0010),
  "Number of Copies",
  [IntegerString],
  vm_1,
)

pub const printer_configuration_sequence = Item(
  DataElementTag(0x2000, 0x001E),
  "Printer Configuration Sequence",
  [Sequence],
  vm_1,
)

pub const print_priority = Item(
  DataElementTag(0x2000, 0x0020),
  "Print Priority",
  [CodeString],
  vm_1,
)

pub const medium_type = Item(
  DataElementTag(0x2000, 0x0030),
  "Medium Type",
  [CodeString],
  vm_1,
)

pub const film_destination = Item(
  DataElementTag(0x2000, 0x0040),
  "Film Destination",
  [CodeString],
  vm_1,
)

pub const film_session_label = Item(
  DataElementTag(0x2000, 0x0050),
  "Film Session Label",
  [LongString],
  vm_1,
)

pub const memory_allocation = Item(
  DataElementTag(0x2000, 0x0060),
  "Memory Allocation",
  [IntegerString],
  vm_1,
)

pub const maximum_memory_allocation = Item(
  DataElementTag(0x2000, 0x0061),
  "Maximum Memory Allocation",
  [IntegerString],
  vm_1,
)

pub const color_image_printing_flag = Item(
  DataElementTag(0x2000, 0x0062),
  "Color Image Printing Flag",
  [CodeString],
  vm_1,
)

pub const collation_flag = Item(
  DataElementTag(0x2000, 0x0063),
  "Collation Flag",
  [CodeString],
  vm_1,
)

pub const annotation_flag = Item(
  DataElementTag(0x2000, 0x0065),
  "Annotation Flag",
  [CodeString],
  vm_1,
)

pub const image_overlay_flag = Item(
  DataElementTag(0x2000, 0x0067),
  "Image Overlay Flag",
  [CodeString],
  vm_1,
)

pub const presentation_lut_flag = Item(
  DataElementTag(0x2000, 0x0069),
  "Presentation LUT Flag",
  [CodeString],
  vm_1,
)

pub const image_box_presentation_lut_flag = Item(
  DataElementTag(0x2000, 0x006A),
  "Image Box Presentation LUT Flag",
  [CodeString],
  vm_1,
)

pub const memory_bit_depth = Item(
  DataElementTag(0x2000, 0x00A0),
  "Memory Bit Depth",
  [UnsignedShort],
  vm_1,
)

pub const printing_bit_depth = Item(
  DataElementTag(0x2000, 0x00A1),
  "Printing Bit Depth",
  [UnsignedShort],
  vm_1,
)

pub const media_installed_sequence = Item(
  DataElementTag(0x2000, 0x00A2),
  "Media Installed Sequence",
  [Sequence],
  vm_1,
)

pub const other_media_available_sequence = Item(
  DataElementTag(0x2000, 0x00A4),
  "Other Media Available Sequence",
  [Sequence],
  vm_1,
)

pub const supported_image_display_formats_sequence = Item(
  DataElementTag(0x2000, 0x00A8),
  "Supported Image Display Formats Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_film_box_sequence = Item(
  DataElementTag(0x2000, 0x0500),
  "Referenced Film Box Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_stored_print_sequence = Item(
  DataElementTag(0x2000, 0x0510),
  "Referenced Stored Print Sequence",
  [Sequence],
  vm_1,
)

pub const image_display_format = Item(
  DataElementTag(0x2010, 0x0010),
  "Image Display Format",
  [ShortText],
  vm_1,
)

pub const annotation_display_format_id = Item(
  DataElementTag(0x2010, 0x0030),
  "Annotation Display Format ID",
  [CodeString],
  vm_1,
)

pub const film_orientation = Item(
  DataElementTag(0x2010, 0x0040),
  "Film Orientation",
  [CodeString],
  vm_1,
)

pub const film_size_id = Item(
  DataElementTag(0x2010, 0x0050),
  "Film Size ID",
  [CodeString],
  vm_1,
)

pub const printer_resolution_id = Item(
  DataElementTag(0x2010, 0x0052),
  "Printer Resolution ID",
  [CodeString],
  vm_1,
)

pub const default_printer_resolution_id = Item(
  DataElementTag(0x2010, 0x0054),
  "Default Printer Resolution ID",
  [CodeString],
  vm_1,
)

pub const magnification_type = Item(
  DataElementTag(0x2010, 0x0060),
  "Magnification Type",
  [CodeString],
  vm_1,
)

pub const smoothing_type = Item(
  DataElementTag(0x2010, 0x0080),
  "Smoothing Type",
  [CodeString],
  vm_1,
)

pub const default_magnification_type = Item(
  DataElementTag(0x2010, 0x00A6),
  "Default Magnification Type",
  [CodeString],
  vm_1,
)

pub const other_magnification_types_available = Item(
  DataElementTag(0x2010, 0x00A7),
  "Other Magnification Types Available",
  [CodeString],
  vm_1_to_n,
)

pub const default_smoothing_type = Item(
  DataElementTag(0x2010, 0x00A8),
  "Default Smoothing Type",
  [CodeString],
  vm_1,
)

pub const other_smoothing_types_available = Item(
  DataElementTag(0x2010, 0x00A9),
  "Other Smoothing Types Available",
  [CodeString],
  vm_1_to_n,
)

pub const border_density = Item(
  DataElementTag(0x2010, 0x0100),
  "Border Density",
  [CodeString],
  vm_1,
)

pub const empty_image_density = Item(
  DataElementTag(0x2010, 0x0110),
  "Empty Image Density",
  [CodeString],
  vm_1,
)

pub const min_density = Item(
  DataElementTag(0x2010, 0x0120),
  "Min Density",
  [UnsignedShort],
  vm_1,
)

pub const max_density = Item(
  DataElementTag(0x2010, 0x0130),
  "Max Density",
  [UnsignedShort],
  vm_1,
)

pub const trim = Item(
  DataElementTag(0x2010, 0x0140),
  "Trim",
  [CodeString],
  vm_1,
)

pub const configuration_information = Item(
  DataElementTag(0x2010, 0x0150),
  "Configuration Information",
  [ShortText],
  vm_1,
)

pub const configuration_information_description = Item(
  DataElementTag(0x2010, 0x0152),
  "Configuration Information Description",
  [LongText],
  vm_1,
)

pub const maximum_collated_films = Item(
  DataElementTag(0x2010, 0x0154),
  "Maximum Collated Films",
  [IntegerString],
  vm_1,
)

pub const illumination = Item(
  DataElementTag(0x2010, 0x015E),
  "Illumination",
  [UnsignedShort],
  vm_1,
)

pub const reflected_ambient_light = Item(
  DataElementTag(0x2010, 0x0160),
  "Reflected Ambient Light",
  [UnsignedShort],
  vm_1,
)

pub const printer_pixel_spacing = Item(
  DataElementTag(0x2010, 0x0376),
  "Printer Pixel Spacing",
  [DecimalString],
  vm_2,
)

pub const referenced_film_session_sequence = Item(
  DataElementTag(0x2010, 0x0500),
  "Referenced Film Session Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_image_box_sequence = Item(
  DataElementTag(0x2010, 0x0510),
  "Referenced Image Box Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_basic_annotation_box_sequence = Item(
  DataElementTag(0x2010, 0x0520),
  "Referenced Basic Annotation Box Sequence",
  [Sequence],
  vm_1,
)

pub const image_box_position = Item(
  DataElementTag(0x2020, 0x0010),
  "Image Box Position",
  [UnsignedShort],
  vm_1,
)

pub const polarity = Item(
  DataElementTag(0x2020, 0x0020),
  "Polarity",
  [CodeString],
  vm_1,
)

pub const requested_image_size = Item(
  DataElementTag(0x2020, 0x0030),
  "Requested Image Size",
  [DecimalString],
  vm_1,
)

pub const requested_decimate_crop_behavior = Item(
  DataElementTag(0x2020, 0x0040),
  "Requested Decimate/Crop Behavior",
  [CodeString],
  vm_1,
)

pub const requested_resolution_id = Item(
  DataElementTag(0x2020, 0x0050),
  "Requested Resolution ID",
  [CodeString],
  vm_1,
)

pub const requested_image_size_flag = Item(
  DataElementTag(0x2020, 0x00A0),
  "Requested Image Size Flag",
  [CodeString],
  vm_1,
)

pub const decimate_crop_result = Item(
  DataElementTag(0x2020, 0x00A2),
  "Decimate/Crop Result",
  [CodeString],
  vm_1,
)

pub const basic_grayscale_image_sequence = Item(
  DataElementTag(0x2020, 0x0110),
  "Basic Grayscale Image Sequence",
  [Sequence],
  vm_1,
)

pub const basic_color_image_sequence = Item(
  DataElementTag(0x2020, 0x0111),
  "Basic Color Image Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_image_overlay_box_sequence = Item(
  DataElementTag(0x2020, 0x0130),
  "Referenced Image Overlay Box Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_voilut_box_sequence = Item(
  DataElementTag(0x2020, 0x0140),
  "Referenced VOI LUT Box Sequence",
  [Sequence],
  vm_1,
)

pub const annotation_position = Item(
  DataElementTag(0x2030, 0x0010),
  "Annotation Position",
  [UnsignedShort],
  vm_1,
)

pub const text_string = Item(
  DataElementTag(0x2030, 0x0020),
  "Text String",
  [LongString],
  vm_1,
)

pub const referenced_overlay_plane_sequence = Item(
  DataElementTag(0x2040, 0x0010),
  "Referenced Overlay Plane Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_overlay_plane_groups = Item(
  DataElementTag(0x2040, 0x0011),
  "Referenced Overlay Plane Groups",
  [UnsignedShort],
  ValueMultiplicity(1, Some(99)),
)

pub const overlay_pixel_data_sequence = Item(
  DataElementTag(0x2040, 0x0020),
  "Overlay Pixel Data Sequence",
  [Sequence],
  vm_1,
)

pub const overlay_magnification_type = Item(
  DataElementTag(0x2040, 0x0060),
  "Overlay Magnification Type",
  [CodeString],
  vm_1,
)

pub const overlay_smoothing_type = Item(
  DataElementTag(0x2040, 0x0070),
  "Overlay Smoothing Type",
  [CodeString],
  vm_1,
)

pub const overlay_or_image_magnification = Item(
  DataElementTag(0x2040, 0x0072),
  "Overlay or Image Magnification",
  [CodeString],
  vm_1,
)

pub const magnify_to_number_of_columns = Item(
  DataElementTag(0x2040, 0x0074),
  "Magnify to Number of Columns",
  [UnsignedShort],
  vm_1,
)

pub const overlay_foreground_density = Item(
  DataElementTag(0x2040, 0x0080),
  "Overlay Foreground Density",
  [CodeString],
  vm_1,
)

pub const overlay_background_density = Item(
  DataElementTag(0x2040, 0x0082),
  "Overlay Background Density",
  [CodeString],
  vm_1,
)

pub const overlay_mode = Item(
  DataElementTag(0x2040, 0x0090),
  "Overlay Mode",
  [CodeString],
  vm_1,
)

pub const threshold_density = Item(
  DataElementTag(0x2040, 0x0100),
  "Threshold Density",
  [CodeString],
  vm_1,
)

pub const referenced_image_box_sequence_retired = Item(
  DataElementTag(0x2040, 0x0500),
  "Referenced Image Box Sequence (Retired)",
  [Sequence],
  vm_1,
)

pub const presentation_lut_sequence = Item(
  DataElementTag(0x2050, 0x0010),
  "Presentation LUT Sequence",
  [Sequence],
  vm_1,
)

pub const presentation_lut_shape = Item(
  DataElementTag(0x2050, 0x0020),
  "Presentation LUT Shape",
  [CodeString],
  vm_1,
)

pub const referenced_presentation_lut_sequence = Item(
  DataElementTag(0x2050, 0x0500),
  "Referenced Presentation LUT Sequence",
  [Sequence],
  vm_1,
)

pub const print_job_id = Item(
  DataElementTag(0x2100, 0x0010),
  "Print Job ID",
  [ShortString],
  vm_1,
)

pub const execution_status = Item(
  DataElementTag(0x2100, 0x0020),
  "Execution Status",
  [CodeString],
  vm_1,
)

pub const execution_status_info = Item(
  DataElementTag(0x2100, 0x0030),
  "Execution Status Info",
  [CodeString],
  vm_1,
)

pub const creation_date = Item(
  DataElementTag(0x2100, 0x0040),
  "Creation Date",
  [Date],
  vm_1,
)

pub const creation_time = Item(
  DataElementTag(0x2100, 0x0050),
  "Creation Time",
  [Time],
  vm_1,
)

pub const originator = Item(
  DataElementTag(0x2100, 0x0070),
  "Originator",
  [ApplicationEntity],
  vm_1,
)

pub const destination_ae = Item(
  DataElementTag(0x2100, 0x0140),
  "Destination AE",
  [ApplicationEntity],
  vm_1,
)

pub const owner_id = Item(
  DataElementTag(0x2100, 0x0160),
  "Owner ID",
  [ShortString],
  vm_1,
)

pub const number_of_films = Item(
  DataElementTag(0x2100, 0x0170),
  "Number of Films",
  [IntegerString],
  vm_1,
)

pub const referenced_print_job_sequence_pull_stored_print = Item(
  DataElementTag(0x2100, 0x0500),
  "Referenced Print Job Sequence (Pull Stored Print)",
  [Sequence],
  vm_1,
)

pub const printer_status = Item(
  DataElementTag(0x2110, 0x0010),
  "Printer Status",
  [CodeString],
  vm_1,
)

pub const printer_status_info = Item(
  DataElementTag(0x2110, 0x0020),
  "Printer Status Info",
  [CodeString],
  vm_1,
)

pub const printer_name = Item(
  DataElementTag(0x2110, 0x0030),
  "Printer Name",
  [LongString],
  vm_1,
)

pub const print_queue_id = Item(
  DataElementTag(0x2110, 0x0099),
  "Print Queue ID",
  [ShortString],
  vm_1,
)

pub const queue_status = Item(
  DataElementTag(0x2120, 0x0010),
  "Queue Status",
  [CodeString],
  vm_1,
)

pub const print_job_description_sequence = Item(
  DataElementTag(0x2120, 0x0050),
  "Print Job Description Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_print_job_sequence = Item(
  DataElementTag(0x2120, 0x0070),
  "Referenced Print Job Sequence",
  [Sequence],
  vm_1,
)

pub const print_management_capabilities_sequence = Item(
  DataElementTag(0x2130, 0x0010),
  "Print Management Capabilities Sequence",
  [Sequence],
  vm_1,
)

pub const printer_characteristics_sequence = Item(
  DataElementTag(0x2130, 0x0015),
  "Printer Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const film_box_content_sequence = Item(
  DataElementTag(0x2130, 0x0030),
  "Film Box Content Sequence",
  [Sequence],
  vm_1,
)

pub const image_box_content_sequence = Item(
  DataElementTag(0x2130, 0x0040),
  "Image Box Content Sequence",
  [Sequence],
  vm_1,
)

pub const annotation_content_sequence = Item(
  DataElementTag(0x2130, 0x0050),
  "Annotation Content Sequence",
  [Sequence],
  vm_1,
)

pub const image_overlay_box_content_sequence = Item(
  DataElementTag(0x2130, 0x0060),
  "Image Overlay Box Content Sequence",
  [Sequence],
  vm_1,
)

pub const presentation_lut_content_sequence = Item(
  DataElementTag(0x2130, 0x0080),
  "Presentation LUT Content Sequence",
  [Sequence],
  vm_1,
)

pub const proposed_study_sequence = Item(
  DataElementTag(0x2130, 0x00A0),
  "Proposed Study Sequence",
  [Sequence],
  vm_1,
)

pub const original_image_sequence = Item(
  DataElementTag(0x2130, 0x00C0),
  "Original Image Sequence",
  [Sequence],
  vm_1,
)

pub const label_using_information_extracted_from_instances = Item(
  DataElementTag(0x2200, 0x0001),
  "Label Using Information Extracted From Instances",
  [CodeString],
  vm_1,
)

pub const label_text = Item(
  DataElementTag(0x2200, 0x0002),
  "Label Text",
  [UnlimitedText],
  vm_1,
)

pub const label_style_selection = Item(
  DataElementTag(0x2200, 0x0003),
  "Label Style Selection",
  [CodeString],
  vm_1,
)

pub const media_disposition = Item(
  DataElementTag(0x2200, 0x0004),
  "Media Disposition",
  [LongText],
  vm_1,
)

pub const barcode_value = Item(
  DataElementTag(0x2200, 0x0005),
  "Barcode Value",
  [LongText],
  vm_1,
)

pub const barcode_symbology = Item(
  DataElementTag(0x2200, 0x0006),
  "Barcode Symbology",
  [CodeString],
  vm_1,
)

pub const allow_media_splitting = Item(
  DataElementTag(0x2200, 0x0007),
  "Allow Media Splitting",
  [CodeString],
  vm_1,
)

pub const include_non_dicom_objects = Item(
  DataElementTag(0x2200, 0x0008),
  "Include Non-DICOM Objects",
  [CodeString],
  vm_1,
)

pub const include_display_application = Item(
  DataElementTag(0x2200, 0x0009),
  "Include Display Application",
  [CodeString],
  vm_1,
)

pub const preserve_composite_instances_after_media_creation = Item(
  DataElementTag(0x2200, 0x000A),
  "Preserve Composite Instances After Media Creation",
  [CodeString],
  vm_1,
)

pub const total_number_of_pieces_of_media_created = Item(
  DataElementTag(0x2200, 0x000B),
  "Total Number of Pieces of Media Created",
  [UnsignedShort],
  vm_1,
)

pub const requested_media_application_profile = Item(
  DataElementTag(0x2200, 0x000C),
  "Requested Media Application Profile",
  [LongString],
  vm_1,
)

pub const referenced_storage_media_sequence = Item(
  DataElementTag(0x2200, 0x000D),
  "Referenced Storage Media Sequence",
  [Sequence],
  vm_1,
)

pub const failure_attributes = Item(
  DataElementTag(0x2200, 0x000E),
  "Failure Attributes",
  [AttributeTag],
  vm_1_to_n,
)

pub const allow_lossy_compression = Item(
  DataElementTag(0x2200, 0x000F),
  "Allow Lossy Compression",
  [CodeString],
  vm_1,
)

pub const request_priority = Item(
  DataElementTag(0x2200, 0x0020),
  "Request Priority",
  [CodeString],
  vm_1,
)

pub const rt_image_label = Item(
  DataElementTag(0x3002, 0x0002),
  "RT Image Label",
  [ShortString],
  vm_1,
)

pub const rt_image_name = Item(
  DataElementTag(0x3002, 0x0003),
  "RT Image Name",
  [LongString],
  vm_1,
)

pub const rt_image_description = Item(
  DataElementTag(0x3002, 0x0004),
  "RT Image Description",
  [ShortText],
  vm_1,
)

pub const reported_values_origin = Item(
  DataElementTag(0x3002, 0x000A),
  "Reported Values Origin",
  [CodeString],
  vm_1,
)

pub const rt_image_plane = Item(
  DataElementTag(0x3002, 0x000C),
  "RT Image Plane",
  [CodeString],
  vm_1,
)

pub const x_ray_image_receptor_translation = Item(
  DataElementTag(0x3002, 0x000D),
  "X-Ray Image Receptor Translation",
  [DecimalString],
  vm_3,
)

pub const x_ray_image_receptor_angle = Item(
  DataElementTag(0x3002, 0x000E),
  "X-Ray Image Receptor Angle",
  [DecimalString],
  vm_1,
)

pub const rt_image_orientation = Item(
  DataElementTag(0x3002, 0x0010),
  "RT Image Orientation",
  [DecimalString],
  vm_6,
)

pub const image_plane_pixel_spacing = Item(
  DataElementTag(0x3002, 0x0011),
  "Image Plane Pixel Spacing",
  [DecimalString],
  vm_2,
)

pub const rt_image_position = Item(
  DataElementTag(0x3002, 0x0012),
  "RT Image Position",
  [DecimalString],
  vm_2,
)

pub const radiation_machine_name = Item(
  DataElementTag(0x3002, 0x0020),
  "Radiation Machine Name",
  [ShortString],
  vm_1,
)

pub const radiation_machine_sad = Item(
  DataElementTag(0x3002, 0x0022),
  "Radiation Machine SAD",
  [DecimalString],
  vm_1,
)

pub const radiation_machine_ssd = Item(
  DataElementTag(0x3002, 0x0024),
  "Radiation Machine SSD",
  [DecimalString],
  vm_1,
)

pub const rt_image_sid = Item(
  DataElementTag(0x3002, 0x0026),
  "RT Image SID",
  [DecimalString],
  vm_1,
)

pub const source_to_reference_object_distance = Item(
  DataElementTag(0x3002, 0x0028),
  "Source to Reference Object Distance",
  [DecimalString],
  vm_1,
)

pub const fraction_number = Item(
  DataElementTag(0x3002, 0x0029),
  "Fraction Number",
  [IntegerString],
  vm_1,
)

pub const exposure_sequence = Item(
  DataElementTag(0x3002, 0x0030),
  "Exposure Sequence",
  [Sequence],
  vm_1,
)

pub const meterset_exposure = Item(
  DataElementTag(0x3002, 0x0032),
  "Meterset Exposure",
  [DecimalString],
  vm_1,
)

pub const diaphragm_position = Item(
  DataElementTag(0x3002, 0x0034),
  "Diaphragm Position",
  [DecimalString],
  vm_4,
)

pub const fluence_map_sequence = Item(
  DataElementTag(0x3002, 0x0040),
  "Fluence Map Sequence",
  [Sequence],
  vm_1,
)

pub const fluence_data_source = Item(
  DataElementTag(0x3002, 0x0041),
  "Fluence Data Source",
  [CodeString],
  vm_1,
)

pub const fluence_data_scale = Item(
  DataElementTag(0x3002, 0x0042),
  "Fluence Data Scale",
  [DecimalString],
  vm_1,
)

pub const primary_fluence_mode_sequence = Item(
  DataElementTag(0x3002, 0x0050),
  "Primary Fluence Mode Sequence",
  [Sequence],
  vm_1,
)

pub const fluence_mode = Item(
  DataElementTag(0x3002, 0x0051),
  "Fluence Mode",
  [CodeString],
  vm_1,
)

pub const fluence_mode_id = Item(
  DataElementTag(0x3002, 0x0052),
  "Fluence Mode ID",
  [ShortString],
  vm_1,
)

pub const selected_frame_number = Item(
  DataElementTag(0x3002, 0x0100),
  "Selected Frame Number",
  [IntegerString],
  vm_1,
)

pub const selected_frame_functional_groups_sequence = Item(
  DataElementTag(0x3002, 0x0101),
  "Selected Frame Functional Groups Sequence",
  [Sequence],
  vm_1,
)

pub const rt_image_frame_general_content_sequence = Item(
  DataElementTag(0x3002, 0x0102),
  "RT Image Frame General Content Sequence",
  [Sequence],
  vm_1,
)

pub const rt_image_frame_context_sequence = Item(
  DataElementTag(0x3002, 0x0103),
  "RT Image Frame Context Sequence",
  [Sequence],
  vm_1,
)

pub const rt_image_scope_sequence = Item(
  DataElementTag(0x3002, 0x0104),
  "RT Image Scope Sequence",
  [Sequence],
  vm_1,
)

pub const beam_modifier_coordinates_presence_flag = Item(
  DataElementTag(0x3002, 0x0105),
  "Beam Modifier Coordinates Presence Flag",
  [CodeString],
  vm_1,
)

pub const start_cumulative_meterset = Item(
  DataElementTag(0x3002, 0x0106),
  "Start Cumulative Meterset",
  [FloatingPointDouble],
  vm_1,
)

pub const stop_cumulative_meterset = Item(
  DataElementTag(0x3002, 0x0107),
  "Stop Cumulative Meterset",
  [FloatingPointDouble],
  vm_1,
)

pub const rt_acquisition_patient_position_sequence = Item(
  DataElementTag(0x3002, 0x0108),
  "RT Acquisition Patient Position Sequence",
  [Sequence],
  vm_1,
)

pub const rt_image_frame_imaging_device_position_sequence = Item(
  DataElementTag(0x3002, 0x0109),
  "RT Image Frame Imaging Device Position Sequence",
  [Sequence],
  vm_1,
)

pub const rt_image_framek_v_radiation_acquisition_sequence = Item(
  DataElementTag(0x3002, 0x010A),
  "RT Image Frame kV Radiation Acquisition Sequence",
  [Sequence],
  vm_1,
)

pub const rt_image_frame_mv_radiation_acquisition_sequence = Item(
  DataElementTag(0x3002, 0x010B),
  "RT Image Frame MV Radiation Acquisition Sequence",
  [Sequence],
  vm_1,
)

pub const rt_image_frame_radiation_acquisition_sequence = Item(
  DataElementTag(0x3002, 0x010C),
  "RT Image Frame Radiation Acquisition Sequence",
  [Sequence],
  vm_1,
)

pub const imaging_source_position_sequence = Item(
  DataElementTag(0x3002, 0x010D),
  "Imaging Source Position Sequence",
  [Sequence],
  vm_1,
)

pub const image_receptor_position_sequence = Item(
  DataElementTag(0x3002, 0x010E),
  "Image Receptor Position Sequence",
  [Sequence],
  vm_1,
)

pub const device_position_to_equipment_mapping_matrix = Item(
  DataElementTag(0x3002, 0x010F),
  "Device Position to Equipment Mapping Matrix",
  [FloatingPointDouble],
  ValueMultiplicity(16, Some(16)),
)

pub const device_position_parameter_sequence = Item(
  DataElementTag(0x3002, 0x0110),
  "Device Position Parameter Sequence",
  [Sequence],
  vm_1,
)

pub const imaging_source_location_specification_type = Item(
  DataElementTag(0x3002, 0x0111),
  "Imaging Source Location Specification Type",
  [CodeString],
  vm_1,
)

pub const imaging_device_location_matrix_sequence = Item(
  DataElementTag(0x3002, 0x0112),
  "Imaging Device Location Matrix Sequence",
  [Sequence],
  vm_1,
)

pub const imaging_device_location_parameter_sequence = Item(
  DataElementTag(0x3002, 0x0113),
  "Imaging Device Location Parameter Sequence",
  [Sequence],
  vm_1,
)

pub const imaging_aperture_sequence = Item(
  DataElementTag(0x3002, 0x0114),
  "Imaging Aperture Sequence",
  [Sequence],
  vm_1,
)

pub const imaging_aperture_specification_type = Item(
  DataElementTag(0x3002, 0x0115),
  "Imaging Aperture Specification Type",
  [CodeString],
  vm_1,
)

pub const number_of_acquisition_devices = Item(
  DataElementTag(0x3002, 0x0116),
  "Number of Acquisition Devices",
  [UnsignedShort],
  vm_1,
)

pub const acquisition_device_sequence = Item(
  DataElementTag(0x3002, 0x0117),
  "Acquisition Device Sequence",
  [Sequence],
  vm_1,
)

pub const acquisition_task_sequence = Item(
  DataElementTag(0x3002, 0x0118),
  "Acquisition Task Sequence",
  [Sequence],
  vm_1,
)

pub const acquisition_task_workitem_code_sequence = Item(
  DataElementTag(0x3002, 0x0119),
  "Acquisition Task Workitem Code Sequence",
  [Sequence],
  vm_1,
)

pub const acquisition_subtask_sequence = Item(
  DataElementTag(0x3002, 0x011A),
  "Acquisition Subtask Sequence",
  [Sequence],
  vm_1,
)

pub const subtask_workitem_code_sequence = Item(
  DataElementTag(0x3002, 0x011B),
  "Subtask Workitem Code Sequence",
  [Sequence],
  vm_1,
)

pub const acquisition_task_index = Item(
  DataElementTag(0x3002, 0x011C),
  "Acquisition Task Index",
  [UnsignedShort],
  vm_1,
)

pub const acquisition_subtask_index = Item(
  DataElementTag(0x3002, 0x011D),
  "Acquisition Subtask Index",
  [UnsignedShort],
  vm_1,
)

pub const referenced_baseline_parameters_rt_radiation_instance_sequence = Item(
  DataElementTag(0x3002, 0x011E),
  "Referenced Baseline Parameters RT Radiation Instance Sequence",
  [Sequence],
  vm_1,
)

pub const position_acquisition_template_identification_sequence = Item(
  DataElementTag(0x3002, 0x011F),
  "Position Acquisition Template Identification Sequence",
  [Sequence],
  vm_1,
)

pub const position_acquisition_template_id = Item(
  DataElementTag(0x3002, 0x0120),
  "Position Acquisition Template ID",
  [ShortText],
  vm_1,
)

pub const position_acquisition_template_name = Item(
  DataElementTag(0x3002, 0x0121),
  "Position Acquisition Template Name",
  [LongString],
  vm_1,
)

pub const position_acquisition_template_code_sequence = Item(
  DataElementTag(0x3002, 0x0122),
  "Position Acquisition Template Code Sequence",
  [Sequence],
  vm_1,
)

pub const position_acquisition_template_description = Item(
  DataElementTag(0x3002, 0x0123),
  "Position Acquisition Template Description",
  [LongText],
  vm_1,
)

pub const acquisition_task_applicability_sequence = Item(
  DataElementTag(0x3002, 0x0124),
  "Acquisition Task Applicability Sequence",
  [Sequence],
  vm_1,
)

pub const projection_imaging_acquisition_parameter_sequence = Item(
  DataElementTag(0x3002, 0x0125),
  "Projection Imaging Acquisition Parameter Sequence",
  [Sequence],
  vm_1,
)

pub const ct_imaging_acquisition_parameter_sequence = Item(
  DataElementTag(0x3002, 0x0126),
  "CT Imaging Acquisition Parameter Sequence",
  [Sequence],
  vm_1,
)

pub const kv_imaging_generation_parameters_sequence = Item(
  DataElementTag(0x3002, 0x0127),
  "KV Imaging Generation Parameters Sequence",
  [Sequence],
  vm_1,
)

pub const mv_imaging_generation_parameters_sequence = Item(
  DataElementTag(0x3002, 0x0128),
  "MV Imaging Generation Parameters Sequence",
  [Sequence],
  vm_1,
)

pub const acquisition_signal_type = Item(
  DataElementTag(0x3002, 0x0129),
  "Acquisition Signal Type",
  [CodeString],
  vm_1,
)

pub const acquisition_method = Item(
  DataElementTag(0x3002, 0x012A),
  "Acquisition Method",
  [CodeString],
  vm_1,
)

pub const scan_start_position_sequence = Item(
  DataElementTag(0x3002, 0x012B),
  "Scan Start Position Sequence",
  [Sequence],
  vm_1,
)

pub const scan_stop_position_sequence = Item(
  DataElementTag(0x3002, 0x012C),
  "Scan Stop Position Sequence",
  [Sequence],
  vm_1,
)

pub const imaging_source_to_beam_modifier_definition_plane_distance = Item(
  DataElementTag(0x3002, 0x012D),
  "Imaging Source to Beam Modifier Definition Plane Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const scan_arc_type = Item(
  DataElementTag(0x3002, 0x012E),
  "Scan Arc Type",
  [CodeString],
  vm_1,
)

pub const detector_positioning_type = Item(
  DataElementTag(0x3002, 0x012F),
  "Detector Positioning Type",
  [CodeString],
  vm_1,
)

pub const additional_rt_accessory_device_sequence = Item(
  DataElementTag(0x3002, 0x0130),
  "Additional RT Accessory Device Sequence",
  [Sequence],
  vm_1,
)

pub const device_specific_acquisition_parameter_sequence = Item(
  DataElementTag(0x3002, 0x0131),
  "Device-Specific Acquisition Parameter Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_position_reference_instance_sequence = Item(
  DataElementTag(0x3002, 0x0132),
  "Referenced Position Reference Instance Sequence",
  [Sequence],
  vm_1,
)

pub const energy_derivation_code_sequence = Item(
  DataElementTag(0x3002, 0x0133),
  "Energy Derivation Code Sequence",
  [Sequence],
  vm_1,
)

pub const maximum_cumulative_meterset_exposure = Item(
  DataElementTag(0x3002, 0x0134),
  "Maximum Cumulative Meterset Exposure",
  [FloatingPointDouble],
  vm_1,
)

pub const acquisition_initiation_sequence = Item(
  DataElementTag(0x3002, 0x0135),
  "Acquisition Initiation Sequence",
  [Sequence],
  vm_1,
)

pub const dvh_type = Item(
  DataElementTag(0x3004, 0x0001),
  "DVH Type",
  [CodeString],
  vm_1,
)

pub const dose_units = Item(
  DataElementTag(0x3004, 0x0002),
  "Dose Units",
  [CodeString],
  vm_1,
)

pub const dose_type = Item(
  DataElementTag(0x3004, 0x0004),
  "Dose Type",
  [CodeString],
  vm_1,
)

pub const spatial_transform_of_dose = Item(
  DataElementTag(0x3004, 0x0005),
  "Spatial Transform of Dose",
  [CodeString],
  vm_1,
)

pub const dose_comment = Item(
  DataElementTag(0x3004, 0x0006),
  "Dose Comment",
  [LongString],
  vm_1,
)

pub const normalization_point = Item(
  DataElementTag(0x3004, 0x0008),
  "Normalization Point",
  [DecimalString],
  vm_3,
)

pub const dose_summation_type = Item(
  DataElementTag(0x3004, 0x000A),
  "Dose Summation Type",
  [CodeString],
  vm_1,
)

pub const grid_frame_offset_vector = Item(
  DataElementTag(0x3004, 0x000C),
  "Grid Frame Offset Vector",
  [DecimalString],
  vm_2_to_n,
)

pub const dose_grid_scaling = Item(
  DataElementTag(0x3004, 0x000E),
  "Dose Grid Scaling",
  [DecimalString],
  vm_1,
)

pub const rt_dose_roi_sequence = Item(
  DataElementTag(0x3004, 0x0010),
  "RT Dose ROI Sequence",
  [Sequence],
  vm_1,
)

pub const dose_value = Item(
  DataElementTag(0x3004, 0x0012),
  "Dose Value",
  [DecimalString],
  vm_1,
)

pub const tissue_heterogeneity_correction = Item(
  DataElementTag(0x3004, 0x0014),
  "Tissue Heterogeneity Correction",
  [CodeString],
  ValueMultiplicity(1, Some(3)),
)

pub const dvh_normalization_point = Item(
  DataElementTag(0x3004, 0x0040),
  "DVH Normalization Point",
  [DecimalString],
  vm_3,
)

pub const dvh_normalization_dose_value = Item(
  DataElementTag(0x3004, 0x0042),
  "DVH Normalization Dose Value",
  [DecimalString],
  vm_1,
)

pub const dvh_sequence = Item(
  DataElementTag(0x3004, 0x0050),
  "DVH Sequence",
  [Sequence],
  vm_1,
)

pub const dvh_dose_scaling = Item(
  DataElementTag(0x3004, 0x0052),
  "DVH Dose Scaling",
  [DecimalString],
  vm_1,
)

pub const dvh_volume_units = Item(
  DataElementTag(0x3004, 0x0054),
  "DVH Volume Units",
  [CodeString],
  vm_1,
)

pub const dvh_number_of_bins = Item(
  DataElementTag(0x3004, 0x0056),
  "DVH Number of Bins",
  [IntegerString],
  vm_1,
)

pub const dvh_data = Item(
  DataElementTag(0x3004, 0x0058),
  "DVH Data",
  [DecimalString],
  vm_2_to_n,
)

pub const dvh_referenced_roi_sequence = Item(
  DataElementTag(0x3004, 0x0060),
  "DVH Referenced ROI Sequence",
  [Sequence],
  vm_1,
)

pub const dvh_roi_contribution_type = Item(
  DataElementTag(0x3004, 0x0062),
  "DVH ROI Contribution Type",
  [CodeString],
  vm_1,
)

pub const dvh_minimum_dose = Item(
  DataElementTag(0x3004, 0x0070),
  "DVH Minimum Dose",
  [DecimalString],
  vm_1,
)

pub const dvh_maximum_dose = Item(
  DataElementTag(0x3004, 0x0072),
  "DVH Maximum Dose",
  [DecimalString],
  vm_1,
)

pub const dvh_mean_dose = Item(
  DataElementTag(0x3004, 0x0074),
  "DVH Mean Dose",
  [DecimalString],
  vm_1,
)

pub const structure_set_label = Item(
  DataElementTag(0x3006, 0x0002),
  "Structure Set Label",
  [ShortString],
  vm_1,
)

pub const structure_set_name = Item(
  DataElementTag(0x3006, 0x0004),
  "Structure Set Name",
  [LongString],
  vm_1,
)

pub const structure_set_description = Item(
  DataElementTag(0x3006, 0x0006),
  "Structure Set Description",
  [ShortText],
  vm_1,
)

pub const structure_set_date = Item(
  DataElementTag(0x3006, 0x0008),
  "Structure Set Date",
  [Date],
  vm_1,
)

pub const structure_set_time = Item(
  DataElementTag(0x3006, 0x0009),
  "Structure Set Time",
  [Time],
  vm_1,
)

pub const referenced_frame_of_reference_sequence = Item(
  DataElementTag(0x3006, 0x0010),
  "Referenced Frame of Reference Sequence",
  [Sequence],
  vm_1,
)

pub const rt_referenced_study_sequence = Item(
  DataElementTag(0x3006, 0x0012),
  "RT Referenced Study Sequence",
  [Sequence],
  vm_1,
)

pub const rt_referenced_series_sequence = Item(
  DataElementTag(0x3006, 0x0014),
  "RT Referenced Series Sequence",
  [Sequence],
  vm_1,
)

pub const contour_image_sequence = Item(
  DataElementTag(0x3006, 0x0016),
  "Contour Image Sequence",
  [Sequence],
  vm_1,
)

pub const predecessor_structure_set_sequence = Item(
  DataElementTag(0x3006, 0x0018),
  "Predecessor Structure Set Sequence",
  [Sequence],
  vm_1,
)

pub const structure_set_roi_sequence = Item(
  DataElementTag(0x3006, 0x0020),
  "Structure Set ROI Sequence",
  [Sequence],
  vm_1,
)

pub const roi_number = Item(
  DataElementTag(0x3006, 0x0022),
  "ROI Number",
  [IntegerString],
  vm_1,
)

pub const referenced_frame_of_reference_uid = Item(
  DataElementTag(0x3006, 0x0024),
  "Referenced Frame of Reference UID",
  [UniqueIdentifier],
  vm_1,
)

pub const roi_name = Item(
  DataElementTag(0x3006, 0x0026),
  "ROI Name",
  [LongString],
  vm_1,
)

pub const roi_description = Item(
  DataElementTag(0x3006, 0x0028),
  "ROI Description",
  [ShortText],
  vm_1,
)

pub const roi_display_color = Item(
  DataElementTag(0x3006, 0x002A),
  "ROI Display Color",
  [IntegerString],
  vm_3,
)

pub const roi_volume = Item(
  DataElementTag(0x3006, 0x002C),
  "ROI Volume",
  [DecimalString],
  vm_1,
)

pub const roi_date_time = Item(
  DataElementTag(0x3006, 0x002D),
  "ROI DateTime",
  [DateTime],
  vm_1,
)

pub const roi_observation_date_time = Item(
  DataElementTag(0x3006, 0x002E),
  "ROI Observation DateTime",
  [DateTime],
  vm_1,
)

pub const rt_related_roi_sequence = Item(
  DataElementTag(0x3006, 0x0030),
  "RT Related ROI Sequence",
  [Sequence],
  vm_1,
)

pub const rtroi_relationship = Item(
  DataElementTag(0x3006, 0x0033),
  "RT ROI Relationship",
  [CodeString],
  vm_1,
)

pub const roi_generation_algorithm = Item(
  DataElementTag(0x3006, 0x0036),
  "ROI Generation Algorithm",
  [CodeString],
  vm_1,
)

pub const roi_derivation_algorithm_identification_sequence = Item(
  DataElementTag(0x3006, 0x0037),
  "ROI Derivation Algorithm Identification Sequence",
  [Sequence],
  vm_1,
)

pub const roi_generation_description = Item(
  DataElementTag(0x3006, 0x0038),
  "ROI Generation Description",
  [LongString],
  vm_1,
)

pub const roi_contour_sequence = Item(
  DataElementTag(0x3006, 0x0039),
  "ROI Contour Sequence",
  [Sequence],
  vm_1,
)

pub const contour_sequence = Item(
  DataElementTag(0x3006, 0x0040),
  "Contour Sequence",
  [Sequence],
  vm_1,
)

pub const contour_geometric_type = Item(
  DataElementTag(0x3006, 0x0042),
  "Contour Geometric Type",
  [CodeString],
  vm_1,
)

pub const contour_slab_thickness = Item(
  DataElementTag(0x3006, 0x0044),
  "Contour Slab Thickness",
  [DecimalString],
  vm_1,
)

pub const contour_offset_vector = Item(
  DataElementTag(0x3006, 0x0045),
  "Contour Offset Vector",
  [DecimalString],
  vm_3,
)

pub const number_of_contour_points = Item(
  DataElementTag(0x3006, 0x0046),
  "Number of Contour Points",
  [IntegerString],
  vm_1,
)

pub const contour_number = Item(
  DataElementTag(0x3006, 0x0048),
  "Contour Number",
  [IntegerString],
  vm_1,
)

pub const attached_contours = Item(
  DataElementTag(0x3006, 0x0049),
  "Attached Contours",
  [IntegerString],
  vm_1_to_n,
)

pub const source_pixel_planes_characteristics_sequence = Item(
  DataElementTag(0x3006, 0x004A),
  "Source Pixel Planes Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const source_series_sequence = Item(
  DataElementTag(0x3006, 0x004B),
  "Source Series Sequence",
  [Sequence],
  vm_1,
)

pub const source_series_information_sequence = Item(
  DataElementTag(0x3006, 0x004C),
  "Source Series Information Sequence",
  [Sequence],
  vm_1,
)

pub const roi_creator_sequence = Item(
  DataElementTag(0x3006, 0x004D),
  "ROI Creator Sequence",
  [Sequence],
  vm_1,
)

pub const roi_interpreter_sequence = Item(
  DataElementTag(0x3006, 0x004E),
  "ROI Interpreter Sequence",
  [Sequence],
  vm_1,
)

pub const roi_observation_context_code_sequence = Item(
  DataElementTag(0x3006, 0x004F),
  "ROI Observation Context Code Sequence",
  [Sequence],
  vm_1,
)

pub const contour_data = Item(
  DataElementTag(0x3006, 0x0050),
  "Contour Data",
  [DecimalString],
  vm_3_to_n,
)

pub const rtroi_observations_sequence = Item(
  DataElementTag(0x3006, 0x0080),
  "RT ROI Observations Sequence",
  [Sequence],
  vm_1,
)

pub const observation_number = Item(
  DataElementTag(0x3006, 0x0082),
  "Observation Number",
  [IntegerString],
  vm_1,
)

pub const referenced_roi_number = Item(
  DataElementTag(0x3006, 0x0084),
  "Referenced ROI Number",
  [IntegerString],
  vm_1,
)

pub const roi_observation_label = Item(
  DataElementTag(0x3006, 0x0085),
  "ROI Observation Label",
  [ShortString],
  vm_1,
)

pub const rtroi_identification_code_sequence = Item(
  DataElementTag(0x3006, 0x0086),
  "RT ROI Identification Code Sequence",
  [Sequence],
  vm_1,
)

pub const roi_observation_description = Item(
  DataElementTag(0x3006, 0x0088),
  "ROI Observation Description",
  [ShortText],
  vm_1,
)

pub const related_rtroi_observations_sequence = Item(
  DataElementTag(0x3006, 0x00A0),
  "Related RT ROI Observations Sequence",
  [Sequence],
  vm_1,
)

pub const rtroi_interpreted_type = Item(
  DataElementTag(0x3006, 0x00A4),
  "RT ROI Interpreted Type",
  [CodeString],
  vm_1,
)

pub const roi_interpreter = Item(
  DataElementTag(0x3006, 0x00A6),
  "ROI Interpreter",
  [PersonName],
  vm_1,
)

pub const roi_physical_properties_sequence = Item(
  DataElementTag(0x3006, 0x00B0),
  "ROI Physical Properties Sequence",
  [Sequence],
  vm_1,
)

pub const roi_physical_property = Item(
  DataElementTag(0x3006, 0x00B2),
  "ROI Physical Property",
  [CodeString],
  vm_1,
)

pub const roi_physical_property_value = Item(
  DataElementTag(0x3006, 0x00B4),
  "ROI Physical Property Value",
  [DecimalString],
  vm_1,
)

pub const roi_elemental_composition_sequence = Item(
  DataElementTag(0x3006, 0x00B6),
  "ROI Elemental Composition Sequence",
  [Sequence],
  vm_1,
)

pub const roi_elemental_composition_atomic_number = Item(
  DataElementTag(0x3006, 0x00B7),
  "ROI Elemental Composition Atomic Number",
  [UnsignedShort],
  vm_1,
)

pub const roi_elemental_composition_atomic_mass_fraction = Item(
  DataElementTag(0x3006, 0x00B8),
  "ROI Elemental Composition Atomic Mass Fraction",
  [FloatingPointSingle],
  vm_1,
)

pub const additional_rtroi_identification_code_sequence = Item(
  DataElementTag(0x3006, 0x00B9),
  "Additional RT ROI Identification Code Sequence",
  [Sequence],
  vm_1,
)

pub const frame_of_reference_relationship_sequence = Item(
  DataElementTag(0x3006, 0x00C0),
  "Frame of Reference Relationship Sequence",
  [Sequence],
  vm_1,
)

pub const related_frame_of_reference_uid = Item(
  DataElementTag(0x3006, 0x00C2),
  "Related Frame of Reference UID",
  [UniqueIdentifier],
  vm_1,
)

pub const frame_of_reference_transformation_type = Item(
  DataElementTag(0x3006, 0x00C4),
  "Frame of Reference Transformation Type",
  [CodeString],
  vm_1,
)

pub const frame_of_reference_transformation_matrix = Item(
  DataElementTag(0x3006, 0x00C6),
  "Frame of Reference Transformation Matrix",
  [DecimalString],
  ValueMultiplicity(16, Some(16)),
)

pub const frame_of_reference_transformation_comment = Item(
  DataElementTag(0x3006, 0x00C8),
  "Frame of Reference Transformation Comment",
  [LongString],
  vm_1,
)

pub const patient_location_coordinates_sequence = Item(
  DataElementTag(0x3006, 0x00C9),
  "Patient Location Coordinates Sequence",
  [Sequence],
  vm_1,
)

pub const patient_location_coordinates_code_sequence = Item(
  DataElementTag(0x3006, 0x00CA),
  "Patient Location Coordinates Code Sequence",
  [Sequence],
  vm_1,
)

pub const patient_support_position_sequence = Item(
  DataElementTag(0x3006, 0x00CB),
  "Patient Support Position Sequence",
  [Sequence],
  vm_1,
)

pub const measured_dose_reference_sequence = Item(
  DataElementTag(0x3008, 0x0010),
  "Measured Dose Reference Sequence",
  [Sequence],
  vm_1,
)

pub const measured_dose_description = Item(
  DataElementTag(0x3008, 0x0012),
  "Measured Dose Description",
  [ShortText],
  vm_1,
)

pub const measured_dose_type = Item(
  DataElementTag(0x3008, 0x0014),
  "Measured Dose Type",
  [CodeString],
  vm_1,
)

pub const measured_dose_value = Item(
  DataElementTag(0x3008, 0x0016),
  "Measured Dose Value",
  [DecimalString],
  vm_1,
)

pub const treatment_session_beam_sequence = Item(
  DataElementTag(0x3008, 0x0020),
  "Treatment Session Beam Sequence",
  [Sequence],
  vm_1,
)

pub const treatment_session_ion_beam_sequence = Item(
  DataElementTag(0x3008, 0x0021),
  "Treatment Session Ion Beam Sequence",
  [Sequence],
  vm_1,
)

pub const current_fraction_number = Item(
  DataElementTag(0x3008, 0x0022),
  "Current Fraction Number",
  [IntegerString],
  vm_1,
)

pub const treatment_control_point_date = Item(
  DataElementTag(0x3008, 0x0024),
  "Treatment Control Point Date",
  [Date],
  vm_1,
)

pub const treatment_control_point_time = Item(
  DataElementTag(0x3008, 0x0025),
  "Treatment Control Point Time",
  [Time],
  vm_1,
)

pub const treatment_termination_status = Item(
  DataElementTag(0x3008, 0x002A),
  "Treatment Termination Status",
  [CodeString],
  vm_1,
)

pub const treatment_termination_code = Item(
  DataElementTag(0x3008, 0x002B),
  "Treatment Termination Code",
  [ShortString],
  vm_1,
)

pub const treatment_verification_status = Item(
  DataElementTag(0x3008, 0x002C),
  "Treatment Verification Status",
  [CodeString],
  vm_1,
)

pub const referenced_treatment_record_sequence = Item(
  DataElementTag(0x3008, 0x0030),
  "Referenced Treatment Record Sequence",
  [Sequence],
  vm_1,
)

pub const specified_primary_meterset = Item(
  DataElementTag(0x3008, 0x0032),
  "Specified Primary Meterset",
  [DecimalString],
  vm_1,
)

pub const specified_secondary_meterset = Item(
  DataElementTag(0x3008, 0x0033),
  "Specified Secondary Meterset",
  [DecimalString],
  vm_1,
)

pub const delivered_primary_meterset = Item(
  DataElementTag(0x3008, 0x0036),
  "Delivered Primary Meterset",
  [DecimalString],
  vm_1,
)

pub const delivered_secondary_meterset = Item(
  DataElementTag(0x3008, 0x0037),
  "Delivered Secondary Meterset",
  [DecimalString],
  vm_1,
)

pub const specified_treatment_time = Item(
  DataElementTag(0x3008, 0x003A),
  "Specified Treatment Time",
  [DecimalString],
  vm_1,
)

pub const delivered_treatment_time = Item(
  DataElementTag(0x3008, 0x003B),
  "Delivered Treatment Time",
  [DecimalString],
  vm_1,
)

pub const control_point_delivery_sequence = Item(
  DataElementTag(0x3008, 0x0040),
  "Control Point Delivery Sequence",
  [Sequence],
  vm_1,
)

pub const ion_control_point_delivery_sequence = Item(
  DataElementTag(0x3008, 0x0041),
  "Ion Control Point Delivery Sequence",
  [Sequence],
  vm_1,
)

pub const specified_meterset = Item(
  DataElementTag(0x3008, 0x0042),
  "Specified Meterset",
  [DecimalString],
  vm_1,
)

pub const delivered_meterset = Item(
  DataElementTag(0x3008, 0x0044),
  "Delivered Meterset",
  [DecimalString],
  vm_1,
)

pub const meterset_rate_set = Item(
  DataElementTag(0x3008, 0x0045),
  "Meterset Rate Set",
  [FloatingPointSingle],
  vm_1,
)

pub const meterset_rate_delivered = Item(
  DataElementTag(0x3008, 0x0046),
  "Meterset Rate Delivered",
  [FloatingPointSingle],
  vm_1,
)

pub const scan_spot_metersets_delivered = Item(
  DataElementTag(0x3008, 0x0047),
  "Scan Spot Metersets Delivered",
  [FloatingPointSingle],
  vm_1_to_n,
)

pub const dose_rate_delivered = Item(
  DataElementTag(0x3008, 0x0048),
  "Dose Rate Delivered",
  [DecimalString],
  vm_1,
)

pub const treatment_summary_calculated_dose_reference_sequence = Item(
  DataElementTag(0x3008, 0x0050),
  "Treatment Summary Calculated Dose Reference Sequence",
  [Sequence],
  vm_1,
)

pub const cumulative_dose_to_dose_reference = Item(
  DataElementTag(0x3008, 0x0052),
  "Cumulative Dose to Dose Reference",
  [DecimalString],
  vm_1,
)

pub const first_treatment_date = Item(
  DataElementTag(0x3008, 0x0054),
  "First Treatment Date",
  [Date],
  vm_1,
)

pub const most_recent_treatment_date = Item(
  DataElementTag(0x3008, 0x0056),
  "Most Recent Treatment Date",
  [Date],
  vm_1,
)

pub const number_of_fractions_delivered = Item(
  DataElementTag(0x3008, 0x005A),
  "Number of Fractions Delivered",
  [IntegerString],
  vm_1,
)

pub const override_sequence = Item(
  DataElementTag(0x3008, 0x0060),
  "Override Sequence",
  [Sequence],
  vm_1,
)

pub const parameter_sequence_pointer = Item(
  DataElementTag(0x3008, 0x0061),
  "Parameter Sequence Pointer",
  [AttributeTag],
  vm_1,
)

pub const override_parameter_pointer = Item(
  DataElementTag(0x3008, 0x0062),
  "Override Parameter Pointer",
  [AttributeTag],
  vm_1,
)

pub const parameter_item_index = Item(
  DataElementTag(0x3008, 0x0063),
  "Parameter Item Index",
  [IntegerString],
  vm_1,
)

pub const measured_dose_reference_number = Item(
  DataElementTag(0x3008, 0x0064),
  "Measured Dose Reference Number",
  [IntegerString],
  vm_1,
)

pub const parameter_pointer = Item(
  DataElementTag(0x3008, 0x0065),
  "Parameter Pointer",
  [AttributeTag],
  vm_1,
)

pub const override_reason = Item(
  DataElementTag(0x3008, 0x0066),
  "Override Reason",
  [ShortText],
  vm_1,
)

pub const parameter_value_number = Item(
  DataElementTag(0x3008, 0x0067),
  "Parameter Value Number",
  [UnsignedShort],
  vm_1,
)

pub const corrected_parameter_sequence = Item(
  DataElementTag(0x3008, 0x0068),
  "Corrected Parameter Sequence",
  [Sequence],
  vm_1,
)

pub const correction_value = Item(
  DataElementTag(0x3008, 0x006A),
  "Correction Value",
  [FloatingPointSingle],
  vm_1,
)

pub const calculated_dose_reference_sequence = Item(
  DataElementTag(0x3008, 0x0070),
  "Calculated Dose Reference Sequence",
  [Sequence],
  vm_1,
)

pub const calculated_dose_reference_number = Item(
  DataElementTag(0x3008, 0x0072),
  "Calculated Dose Reference Number",
  [IntegerString],
  vm_1,
)

pub const calculated_dose_reference_description = Item(
  DataElementTag(0x3008, 0x0074),
  "Calculated Dose Reference Description",
  [ShortText],
  vm_1,
)

pub const calculated_dose_reference_dose_value = Item(
  DataElementTag(0x3008, 0x0076),
  "Calculated Dose Reference Dose Value",
  [DecimalString],
  vm_1,
)

pub const start_meterset = Item(
  DataElementTag(0x3008, 0x0078),
  "Start Meterset",
  [DecimalString],
  vm_1,
)

pub const end_meterset = Item(
  DataElementTag(0x3008, 0x007A),
  "End Meterset",
  [DecimalString],
  vm_1,
)

pub const referenced_measured_dose_reference_sequence = Item(
  DataElementTag(0x3008, 0x0080),
  "Referenced Measured Dose Reference Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_measured_dose_reference_number = Item(
  DataElementTag(0x3008, 0x0082),
  "Referenced Measured Dose Reference Number",
  [IntegerString],
  vm_1,
)

pub const referenced_calculated_dose_reference_sequence = Item(
  DataElementTag(0x3008, 0x0090),
  "Referenced Calculated Dose Reference Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_calculated_dose_reference_number = Item(
  DataElementTag(0x3008, 0x0092),
  "Referenced Calculated Dose Reference Number",
  [IntegerString],
  vm_1,
)

pub const beam_limiting_device_leaf_pairs_sequence = Item(
  DataElementTag(0x3008, 0x00A0),
  "Beam Limiting Device Leaf Pairs Sequence",
  [Sequence],
  vm_1,
)

pub const enhanced_rt_beam_limiting_device_sequence = Item(
  DataElementTag(0x3008, 0x00A1),
  "Enhanced RT Beam Limiting Device Sequence",
  [Sequence],
  vm_1,
)

pub const enhanced_rt_beam_limiting_opening_sequence = Item(
  DataElementTag(0x3008, 0x00A2),
  "Enhanced RT Beam Limiting Opening Sequence",
  [Sequence],
  vm_1,
)

pub const enhanced_rt_beam_limiting_device_definition_flag = Item(
  DataElementTag(0x3008, 0x00A3),
  "Enhanced RT Beam Limiting Device Definition Flag",
  [CodeString],
  vm_1,
)

pub const parallel_rt_beam_delimiter_opening_extents = Item(
  DataElementTag(0x3008, 0x00A4),
  "Parallel RT Beam Delimiter Opening Extents",
  [FloatingPointDouble],
  vm_2_to_n,
)

pub const recorded_wedge_sequence = Item(
  DataElementTag(0x3008, 0x00B0),
  "Recorded Wedge Sequence",
  [Sequence],
  vm_1,
)

pub const recorded_compensator_sequence = Item(
  DataElementTag(0x3008, 0x00C0),
  "Recorded Compensator Sequence",
  [Sequence],
  vm_1,
)

pub const recorded_block_sequence = Item(
  DataElementTag(0x3008, 0x00D0),
  "Recorded Block Sequence",
  [Sequence],
  vm_1,
)

pub const recorded_block_slab_sequence = Item(
  DataElementTag(0x3008, 0x00D1),
  "Recorded Block Slab Sequence",
  [Sequence],
  vm_1,
)

pub const treatment_summary_measured_dose_reference_sequence = Item(
  DataElementTag(0x3008, 0x00E0),
  "Treatment Summary Measured Dose Reference Sequence",
  [Sequence],
  vm_1,
)

pub const recorded_snout_sequence = Item(
  DataElementTag(0x3008, 0x00F0),
  "Recorded Snout Sequence",
  [Sequence],
  vm_1,
)

pub const recorded_range_shifter_sequence = Item(
  DataElementTag(0x3008, 0x00F2),
  "Recorded Range Shifter Sequence",
  [Sequence],
  vm_1,
)

pub const recorded_lateral_spreading_device_sequence = Item(
  DataElementTag(0x3008, 0x00F4),
  "Recorded Lateral Spreading Device Sequence",
  [Sequence],
  vm_1,
)

pub const recorded_range_modulator_sequence = Item(
  DataElementTag(0x3008, 0x00F6),
  "Recorded Range Modulator Sequence",
  [Sequence],
  vm_1,
)

pub const recorded_source_sequence = Item(
  DataElementTag(0x3008, 0x0100),
  "Recorded Source Sequence",
  [Sequence],
  vm_1,
)

pub const source_serial_number = Item(
  DataElementTag(0x3008, 0x0105),
  "Source Serial Number",
  [LongString],
  vm_1,
)

pub const treatment_session_application_setup_sequence = Item(
  DataElementTag(0x3008, 0x0110),
  "Treatment Session Application Setup Sequence",
  [Sequence],
  vm_1,
)

pub const application_setup_check = Item(
  DataElementTag(0x3008, 0x0116),
  "Application Setup Check",
  [CodeString],
  vm_1,
)

pub const recorded_brachy_accessory_device_sequence = Item(
  DataElementTag(0x3008, 0x0120),
  "Recorded Brachy Accessory Device Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_brachy_accessory_device_number = Item(
  DataElementTag(0x3008, 0x0122),
  "Referenced Brachy Accessory Device Number",
  [IntegerString],
  vm_1,
)

pub const recorded_channel_sequence = Item(
  DataElementTag(0x3008, 0x0130),
  "Recorded Channel Sequence",
  [Sequence],
  vm_1,
)

pub const specified_channel_total_time = Item(
  DataElementTag(0x3008, 0x0132),
  "Specified Channel Total Time",
  [DecimalString],
  vm_1,
)

pub const delivered_channel_total_time = Item(
  DataElementTag(0x3008, 0x0134),
  "Delivered Channel Total Time",
  [DecimalString],
  vm_1,
)

pub const specified_number_of_pulses = Item(
  DataElementTag(0x3008, 0x0136),
  "Specified Number of Pulses",
  [IntegerString],
  vm_1,
)

pub const delivered_number_of_pulses = Item(
  DataElementTag(0x3008, 0x0138),
  "Delivered Number of Pulses",
  [IntegerString],
  vm_1,
)

pub const specified_pulse_repetition_interval = Item(
  DataElementTag(0x3008, 0x013A),
  "Specified Pulse Repetition Interval",
  [DecimalString],
  vm_1,
)

pub const delivered_pulse_repetition_interval = Item(
  DataElementTag(0x3008, 0x013C),
  "Delivered Pulse Repetition Interval",
  [DecimalString],
  vm_1,
)

pub const recorded_source_applicator_sequence = Item(
  DataElementTag(0x3008, 0x0140),
  "Recorded Source Applicator Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_source_applicator_number = Item(
  DataElementTag(0x3008, 0x0142),
  "Referenced Source Applicator Number",
  [IntegerString],
  vm_1,
)

pub const recorded_channel_shield_sequence = Item(
  DataElementTag(0x3008, 0x0150),
  "Recorded Channel Shield Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_channel_shield_number = Item(
  DataElementTag(0x3008, 0x0152),
  "Referenced Channel Shield Number",
  [IntegerString],
  vm_1,
)

pub const brachy_control_point_delivered_sequence = Item(
  DataElementTag(0x3008, 0x0160),
  "Brachy Control Point Delivered Sequence",
  [Sequence],
  vm_1,
)

pub const safe_position_exit_date = Item(
  DataElementTag(0x3008, 0x0162),
  "Safe Position Exit Date",
  [Date],
  vm_1,
)

pub const safe_position_exit_time = Item(
  DataElementTag(0x3008, 0x0164),
  "Safe Position Exit Time",
  [Time],
  vm_1,
)

pub const safe_position_return_date = Item(
  DataElementTag(0x3008, 0x0166),
  "Safe Position Return Date",
  [Date],
  vm_1,
)

pub const safe_position_return_time = Item(
  DataElementTag(0x3008, 0x0168),
  "Safe Position Return Time",
  [Time],
  vm_1,
)

pub const pulse_specific_brachy_control_point_delivered_sequence = Item(
  DataElementTag(0x3008, 0x0171),
  "Pulse Specific Brachy Control Point Delivered Sequence",
  [Sequence],
  vm_1,
)

pub const pulse_number = Item(
  DataElementTag(0x3008, 0x0172),
  "Pulse Number",
  [UnsignedShort],
  vm_1,
)

pub const brachy_pulse_control_point_delivered_sequence = Item(
  DataElementTag(0x3008, 0x0173),
  "Brachy Pulse Control Point Delivered Sequence",
  [Sequence],
  vm_1,
)

pub const current_treatment_status = Item(
  DataElementTag(0x3008, 0x0200),
  "Current Treatment Status",
  [CodeString],
  vm_1,
)

pub const treatment_status_comment = Item(
  DataElementTag(0x3008, 0x0202),
  "Treatment Status Comment",
  [ShortText],
  vm_1,
)

pub const fraction_group_summary_sequence = Item(
  DataElementTag(0x3008, 0x0220),
  "Fraction Group Summary Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_fraction_number = Item(
  DataElementTag(0x3008, 0x0223),
  "Referenced Fraction Number",
  [IntegerString],
  vm_1,
)

pub const fraction_group_type = Item(
  DataElementTag(0x3008, 0x0224),
  "Fraction Group Type",
  [CodeString],
  vm_1,
)

pub const beam_stopper_position = Item(
  DataElementTag(0x3008, 0x0230),
  "Beam Stopper Position",
  [CodeString],
  vm_1,
)

pub const fraction_status_summary_sequence = Item(
  DataElementTag(0x3008, 0x0240),
  "Fraction Status Summary Sequence",
  [Sequence],
  vm_1,
)

pub const treatment_date = Item(
  DataElementTag(0x3008, 0x0250),
  "Treatment Date",
  [Date],
  vm_1,
)

pub const treatment_time = Item(
  DataElementTag(0x3008, 0x0251),
  "Treatment Time",
  [Time],
  vm_1,
)

pub const rt_plan_label = Item(
  DataElementTag(0x300A, 0x0002),
  "RT Plan Label",
  [ShortString],
  vm_1,
)

pub const rt_plan_name = Item(
  DataElementTag(0x300A, 0x0003),
  "RT Plan Name",
  [LongString],
  vm_1,
)

pub const rt_plan_description = Item(
  DataElementTag(0x300A, 0x0004),
  "RT Plan Description",
  [ShortText],
  vm_1,
)

pub const rt_plan_date = Item(
  DataElementTag(0x300A, 0x0006),
  "RT Plan Date",
  [Date],
  vm_1,
)

pub const rt_plan_time = Item(
  DataElementTag(0x300A, 0x0007),
  "RT Plan Time",
  [Time],
  vm_1,
)

pub const treatment_protocols = Item(
  DataElementTag(0x300A, 0x0009),
  "Treatment Protocols",
  [LongString],
  vm_1_to_n,
)

pub const plan_intent = Item(
  DataElementTag(0x300A, 0x000A),
  "Plan Intent",
  [CodeString],
  vm_1,
)

pub const treatment_sites = Item(
  DataElementTag(0x300A, 0x000B),
  "Treatment Sites",
  [LongString],
  vm_1_to_n,
)

pub const rt_plan_geometry = Item(
  DataElementTag(0x300A, 0x000C),
  "RT Plan Geometry",
  [CodeString],
  vm_1,
)

pub const prescription_description = Item(
  DataElementTag(0x300A, 0x000E),
  "Prescription Description",
  [ShortText],
  vm_1,
)

pub const dose_reference_sequence = Item(
  DataElementTag(0x300A, 0x0010),
  "Dose Reference Sequence",
  [Sequence],
  vm_1,
)

pub const dose_reference_number = Item(
  DataElementTag(0x300A, 0x0012),
  "Dose Reference Number",
  [IntegerString],
  vm_1,
)

pub const dose_reference_uid = Item(
  DataElementTag(0x300A, 0x0013),
  "Dose Reference UID",
  [UniqueIdentifier],
  vm_1,
)

pub const dose_reference_structure_type = Item(
  DataElementTag(0x300A, 0x0014),
  "Dose Reference Structure Type",
  [CodeString],
  vm_1,
)

pub const nominal_beam_energy_unit = Item(
  DataElementTag(0x300A, 0x0015),
  "Nominal Beam Energy Unit",
  [CodeString],
  vm_1,
)

pub const dose_reference_description = Item(
  DataElementTag(0x300A, 0x0016),
  "Dose Reference Description",
  [LongString],
  vm_1,
)

pub const dose_reference_point_coordinates = Item(
  DataElementTag(0x300A, 0x0018),
  "Dose Reference Point Coordinates",
  [DecimalString],
  vm_3,
)

pub const nominal_prior_dose = Item(
  DataElementTag(0x300A, 0x001A),
  "Nominal Prior Dose",
  [DecimalString],
  vm_1,
)

pub const dose_reference_type = Item(
  DataElementTag(0x300A, 0x0020),
  "Dose Reference Type",
  [CodeString],
  vm_1,
)

pub const constraint_weight = Item(
  DataElementTag(0x300A, 0x0021),
  "Constraint Weight",
  [DecimalString],
  vm_1,
)

pub const delivery_warning_dose = Item(
  DataElementTag(0x300A, 0x0022),
  "Delivery Warning Dose",
  [DecimalString],
  vm_1,
)

pub const delivery_maximum_dose = Item(
  DataElementTag(0x300A, 0x0023),
  "Delivery Maximum Dose",
  [DecimalString],
  vm_1,
)

pub const target_minimum_dose = Item(
  DataElementTag(0x300A, 0x0025),
  "Target Minimum Dose",
  [DecimalString],
  vm_1,
)

pub const target_prescription_dose = Item(
  DataElementTag(0x300A, 0x0026),
  "Target Prescription Dose",
  [DecimalString],
  vm_1,
)

pub const target_maximum_dose = Item(
  DataElementTag(0x300A, 0x0027),
  "Target Maximum Dose",
  [DecimalString],
  vm_1,
)

pub const target_underdose_volume_fraction = Item(
  DataElementTag(0x300A, 0x0028),
  "Target Underdose Volume Fraction",
  [DecimalString],
  vm_1,
)

pub const organ_at_risk_full_volume_dose = Item(
  DataElementTag(0x300A, 0x002A),
  "Organ at Risk Full-volume Dose",
  [DecimalString],
  vm_1,
)

pub const organ_at_risk_limit_dose = Item(
  DataElementTag(0x300A, 0x002B),
  "Organ at Risk Limit Dose",
  [DecimalString],
  vm_1,
)

pub const organ_at_risk_maximum_dose = Item(
  DataElementTag(0x300A, 0x002C),
  "Organ at Risk Maximum Dose",
  [DecimalString],
  vm_1,
)

pub const organ_at_risk_overdose_volume_fraction = Item(
  DataElementTag(0x300A, 0x002D),
  "Organ at Risk Overdose Volume Fraction",
  [DecimalString],
  vm_1,
)

pub const tolerance_table_sequence = Item(
  DataElementTag(0x300A, 0x0040),
  "Tolerance Table Sequence",
  [Sequence],
  vm_1,
)

pub const tolerance_table_number = Item(
  DataElementTag(0x300A, 0x0042),
  "Tolerance Table Number",
  [IntegerString],
  vm_1,
)

pub const tolerance_table_label = Item(
  DataElementTag(0x300A, 0x0043),
  "Tolerance Table Label",
  [ShortString],
  vm_1,
)

pub const gantry_angle_tolerance = Item(
  DataElementTag(0x300A, 0x0044),
  "Gantry Angle Tolerance",
  [DecimalString],
  vm_1,
)

pub const beam_limiting_device_angle_tolerance = Item(
  DataElementTag(0x300A, 0x0046),
  "Beam Limiting Device Angle Tolerance",
  [DecimalString],
  vm_1,
)

pub const beam_limiting_device_tolerance_sequence = Item(
  DataElementTag(0x300A, 0x0048),
  "Beam Limiting Device Tolerance Sequence",
  [Sequence],
  vm_1,
)

pub const beam_limiting_device_position_tolerance = Item(
  DataElementTag(0x300A, 0x004A),
  "Beam Limiting Device Position Tolerance",
  [DecimalString],
  vm_1,
)

pub const snout_position_tolerance = Item(
  DataElementTag(0x300A, 0x004B),
  "Snout Position Tolerance",
  [FloatingPointSingle],
  vm_1,
)

pub const patient_support_angle_tolerance = Item(
  DataElementTag(0x300A, 0x004C),
  "Patient Support Angle Tolerance",
  [DecimalString],
  vm_1,
)

pub const table_top_eccentric_angle_tolerance = Item(
  DataElementTag(0x300A, 0x004E),
  "Table Top Eccentric Angle Tolerance",
  [DecimalString],
  vm_1,
)

pub const table_top_pitch_angle_tolerance = Item(
  DataElementTag(0x300A, 0x004F),
  "Table Top Pitch Angle Tolerance",
  [FloatingPointSingle],
  vm_1,
)

pub const table_top_roll_angle_tolerance = Item(
  DataElementTag(0x300A, 0x0050),
  "Table Top Roll Angle Tolerance",
  [FloatingPointSingle],
  vm_1,
)

pub const table_top_vertical_position_tolerance = Item(
  DataElementTag(0x300A, 0x0051),
  "Table Top Vertical Position Tolerance",
  [DecimalString],
  vm_1,
)

pub const table_top_longitudinal_position_tolerance = Item(
  DataElementTag(0x300A, 0x0052),
  "Table Top Longitudinal Position Tolerance",
  [DecimalString],
  vm_1,
)

pub const table_top_lateral_position_tolerance = Item(
  DataElementTag(0x300A, 0x0053),
  "Table Top Lateral Position Tolerance",
  [DecimalString],
  vm_1,
)

pub const rt_plan_relationship = Item(
  DataElementTag(0x300A, 0x0055),
  "RT Plan Relationship",
  [CodeString],
  vm_1,
)

pub const fraction_group_sequence = Item(
  DataElementTag(0x300A, 0x0070),
  "Fraction Group Sequence",
  [Sequence],
  vm_1,
)

pub const fraction_group_number = Item(
  DataElementTag(0x300A, 0x0071),
  "Fraction Group Number",
  [IntegerString],
  vm_1,
)

pub const fraction_group_description = Item(
  DataElementTag(0x300A, 0x0072),
  "Fraction Group Description",
  [LongString],
  vm_1,
)

pub const number_of_fractions_planned = Item(
  DataElementTag(0x300A, 0x0078),
  "Number of Fractions Planned",
  [IntegerString],
  vm_1,
)

pub const number_of_fraction_pattern_digits_per_day = Item(
  DataElementTag(0x300A, 0x0079),
  "Number of Fraction Pattern Digits Per Day",
  [IntegerString],
  vm_1,
)

pub const repeat_fraction_cycle_length = Item(
  DataElementTag(0x300A, 0x007A),
  "Repeat Fraction Cycle Length",
  [IntegerString],
  vm_1,
)

pub const fraction_pattern = Item(
  DataElementTag(0x300A, 0x007B),
  "Fraction Pattern",
  [LongText],
  vm_1,
)

pub const number_of_beams = Item(
  DataElementTag(0x300A, 0x0080),
  "Number of Beams",
  [IntegerString],
  vm_1,
)

pub const beam_dose_specification_point = Item(
  DataElementTag(0x300A, 0x0082),
  "Beam Dose Specification Point",
  [DecimalString],
  vm_3,
)

pub const referenced_dose_reference_uid = Item(
  DataElementTag(0x300A, 0x0083),
  "Referenced Dose Reference UID",
  [UniqueIdentifier],
  vm_1,
)

pub const beam_dose = Item(
  DataElementTag(0x300A, 0x0084),
  "Beam Dose",
  [DecimalString],
  vm_1,
)

pub const beam_meterset = Item(
  DataElementTag(0x300A, 0x0086),
  "Beam Meterset",
  [DecimalString],
  vm_1,
)

pub const beam_dose_point_depth = Item(
  DataElementTag(0x300A, 0x0088),
  "Beam Dose Point Depth",
  [FloatingPointSingle],
  vm_1,
)

pub const beam_dose_point_equivalent_depth = Item(
  DataElementTag(0x300A, 0x0089),
  "Beam Dose Point Equivalent Depth",
  [FloatingPointSingle],
  vm_1,
)

pub const beam_dose_point_ssd = Item(
  DataElementTag(0x300A, 0x008A),
  "Beam Dose Point SSD",
  [FloatingPointSingle],
  vm_1,
)

pub const beam_dose_meaning = Item(
  DataElementTag(0x300A, 0x008B),
  "Beam Dose Meaning",
  [CodeString],
  vm_1,
)

pub const beam_dose_verification_control_point_sequence = Item(
  DataElementTag(0x300A, 0x008C),
  "Beam Dose Verification Control Point Sequence",
  [Sequence],
  vm_1,
)

pub const average_beam_dose_point_depth = Item(
  DataElementTag(0x300A, 0x008D),
  "Average Beam Dose Point Depth",
  [FloatingPointSingle],
  vm_1,
)

pub const average_beam_dose_point_equivalent_depth = Item(
  DataElementTag(0x300A, 0x008E),
  "Average Beam Dose Point Equivalent Depth",
  [FloatingPointSingle],
  vm_1,
)

pub const average_beam_dose_point_ssd = Item(
  DataElementTag(0x300A, 0x008F),
  "Average Beam Dose Point SSD",
  [FloatingPointSingle],
  vm_1,
)

pub const beam_dose_type = Item(
  DataElementTag(0x300A, 0x0090),
  "Beam Dose Type",
  [CodeString],
  vm_1,
)

pub const alternate_beam_dose = Item(
  DataElementTag(0x300A, 0x0091),
  "Alternate Beam Dose",
  [DecimalString],
  vm_1,
)

pub const alternate_beam_dose_type = Item(
  DataElementTag(0x300A, 0x0092),
  "Alternate Beam Dose Type",
  [CodeString],
  vm_1,
)

pub const depth_value_averaging_flag = Item(
  DataElementTag(0x300A, 0x0093),
  "Depth Value Averaging Flag",
  [CodeString],
  vm_1,
)

pub const beam_dose_point_source_to_external_contour_distance = Item(
  DataElementTag(0x300A, 0x0094),
  "Beam Dose Point Source to External Contour Distance",
  [DecimalString],
  vm_1,
)

pub const number_of_brachy_application_setups = Item(
  DataElementTag(0x300A, 0x00A0),
  "Number of Brachy Application Setups",
  [IntegerString],
  vm_1,
)

pub const brachy_application_setup_dose_specification_point = Item(
  DataElementTag(0x300A, 0x00A2),
  "Brachy Application Setup Dose Specification Point",
  [DecimalString],
  vm_3,
)

pub const brachy_application_setup_dose = Item(
  DataElementTag(0x300A, 0x00A4),
  "Brachy Application Setup Dose",
  [DecimalString],
  vm_1,
)

pub const beam_sequence = Item(
  DataElementTag(0x300A, 0x00B0),
  "Beam Sequence",
  [Sequence],
  vm_1,
)

pub const treatment_machine_name = Item(
  DataElementTag(0x300A, 0x00B2),
  "Treatment Machine Name",
  [ShortString],
  vm_1,
)

pub const primary_dosimeter_unit = Item(
  DataElementTag(0x300A, 0x00B3),
  "Primary Dosimeter Unit",
  [CodeString],
  vm_1,
)

pub const source_axis_distance = Item(
  DataElementTag(0x300A, 0x00B4),
  "Source-Axis Distance",
  [DecimalString],
  vm_1,
)

pub const beam_limiting_device_sequence = Item(
  DataElementTag(0x300A, 0x00B6),
  "Beam Limiting Device Sequence",
  [Sequence],
  vm_1,
)

pub const rt_beam_limiting_device_type = Item(
  DataElementTag(0x300A, 0x00B8),
  "RT Beam Limiting Device Type",
  [CodeString],
  vm_1,
)

pub const source_to_beam_limiting_device_distance = Item(
  DataElementTag(0x300A, 0x00BA),
  "Source to Beam Limiting Device Distance",
  [DecimalString],
  vm_1,
)

pub const isocenter_to_beam_limiting_device_distance = Item(
  DataElementTag(0x300A, 0x00BB),
  "Isocenter to Beam Limiting Device Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const number_of_leaf_jaw_pairs = Item(
  DataElementTag(0x300A, 0x00BC),
  "Number of Leaf/Jaw Pairs",
  [IntegerString],
  vm_1,
)

pub const leaf_position_boundaries = Item(
  DataElementTag(0x300A, 0x00BE),
  "Leaf Position Boundaries",
  [DecimalString],
  vm_3_to_n,
)

pub const beam_number = Item(
  DataElementTag(0x300A, 0x00C0),
  "Beam Number",
  [IntegerString],
  vm_1,
)

pub const beam_name = Item(
  DataElementTag(0x300A, 0x00C2),
  "Beam Name",
  [LongString],
  vm_1,
)

pub const beam_description = Item(
  DataElementTag(0x300A, 0x00C3),
  "Beam Description",
  [ShortText],
  vm_1,
)

pub const beam_type = Item(
  DataElementTag(0x300A, 0x00C4),
  "Beam Type",
  [CodeString],
  vm_1,
)

pub const beam_delivery_duration_limit = Item(
  DataElementTag(0x300A, 0x00C5),
  "Beam Delivery Duration Limit",
  [FloatingPointDouble],
  vm_1,
)

pub const radiation_type = Item(
  DataElementTag(0x300A, 0x00C6),
  "Radiation Type",
  [CodeString],
  vm_1,
)

pub const high_dose_technique_type = Item(
  DataElementTag(0x300A, 0x00C7),
  "High-Dose Technique Type",
  [CodeString],
  vm_1,
)

pub const reference_image_number = Item(
  DataElementTag(0x300A, 0x00C8),
  "Reference Image Number",
  [IntegerString],
  vm_1,
)

pub const planned_verification_image_sequence = Item(
  DataElementTag(0x300A, 0x00CA),
  "Planned Verification Image Sequence",
  [Sequence],
  vm_1,
)

pub const imaging_device_specific_acquisition_parameters = Item(
  DataElementTag(0x300A, 0x00CC),
  "Imaging Device-Specific Acquisition Parameters",
  [LongString],
  vm_1_to_n,
)

pub const treatment_delivery_type = Item(
  DataElementTag(0x300A, 0x00CE),
  "Treatment Delivery Type",
  [CodeString],
  vm_1,
)

pub const number_of_wedges = Item(
  DataElementTag(0x300A, 0x00D0),
  "Number of Wedges",
  [IntegerString],
  vm_1,
)

pub const wedge_sequence = Item(
  DataElementTag(0x300A, 0x00D1),
  "Wedge Sequence",
  [Sequence],
  vm_1,
)

pub const wedge_number = Item(
  DataElementTag(0x300A, 0x00D2),
  "Wedge Number",
  [IntegerString],
  vm_1,
)

pub const wedge_type = Item(
  DataElementTag(0x300A, 0x00D3),
  "Wedge Type",
  [CodeString],
  vm_1,
)

pub const wedge_id = Item(
  DataElementTag(0x300A, 0x00D4),
  "Wedge ID",
  [ShortString],
  vm_1,
)

pub const wedge_angle = Item(
  DataElementTag(0x300A, 0x00D5),
  "Wedge Angle",
  [IntegerString],
  vm_1,
)

pub const wedge_factor = Item(
  DataElementTag(0x300A, 0x00D6),
  "Wedge Factor",
  [DecimalString],
  vm_1,
)

pub const total_wedge_tray_water_equivalent_thickness = Item(
  DataElementTag(0x300A, 0x00D7),
  "Total Wedge Tray Water-Equivalent Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const wedge_orientation = Item(
  DataElementTag(0x300A, 0x00D8),
  "Wedge Orientation",
  [DecimalString],
  vm_1,
)

pub const isocenter_to_wedge_tray_distance = Item(
  DataElementTag(0x300A, 0x00D9),
  "Isocenter to Wedge Tray Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const source_to_wedge_tray_distance = Item(
  DataElementTag(0x300A, 0x00DA),
  "Source to Wedge Tray Distance",
  [DecimalString],
  vm_1,
)

pub const wedge_thin_edge_position = Item(
  DataElementTag(0x300A, 0x00DB),
  "Wedge Thin Edge Position",
  [FloatingPointSingle],
  vm_1,
)

pub const bolus_id = Item(
  DataElementTag(0x300A, 0x00DC),
  "Bolus ID",
  [ShortString],
  vm_1,
)

pub const bolus_description = Item(
  DataElementTag(0x300A, 0x00DD),
  "Bolus Description",
  [ShortText],
  vm_1,
)

pub const effective_wedge_angle = Item(
  DataElementTag(0x300A, 0x00DE),
  "Effective Wedge Angle",
  [DecimalString],
  vm_1,
)

pub const number_of_compensators = Item(
  DataElementTag(0x300A, 0x00E0),
  "Number of Compensators",
  [IntegerString],
  vm_1,
)

pub const material_id = Item(
  DataElementTag(0x300A, 0x00E1),
  "Material ID",
  [ShortString],
  vm_1,
)

pub const total_compensator_tray_factor = Item(
  DataElementTag(0x300A, 0x00E2),
  "Total Compensator Tray Factor",
  [DecimalString],
  vm_1,
)

pub const compensator_sequence = Item(
  DataElementTag(0x300A, 0x00E3),
  "Compensator Sequence",
  [Sequence],
  vm_1,
)

pub const compensator_number = Item(
  DataElementTag(0x300A, 0x00E4),
  "Compensator Number",
  [IntegerString],
  vm_1,
)

pub const compensator_id = Item(
  DataElementTag(0x300A, 0x00E5),
  "Compensator ID",
  [ShortString],
  vm_1,
)

pub const source_to_compensator_tray_distance = Item(
  DataElementTag(0x300A, 0x00E6),
  "Source to Compensator Tray Distance",
  [DecimalString],
  vm_1,
)

pub const compensator_rows = Item(
  DataElementTag(0x300A, 0x00E7),
  "Compensator Rows",
  [IntegerString],
  vm_1,
)

pub const compensator_columns = Item(
  DataElementTag(0x300A, 0x00E8),
  "Compensator Columns",
  [IntegerString],
  vm_1,
)

pub const compensator_pixel_spacing = Item(
  DataElementTag(0x300A, 0x00E9),
  "Compensator Pixel Spacing",
  [DecimalString],
  vm_2,
)

pub const compensator_position = Item(
  DataElementTag(0x300A, 0x00EA),
  "Compensator Position",
  [DecimalString],
  vm_2,
)

pub const compensator_transmission_data = Item(
  DataElementTag(0x300A, 0x00EB),
  "Compensator Transmission Data",
  [DecimalString],
  vm_1_to_n,
)

pub const compensator_thickness_data = Item(
  DataElementTag(0x300A, 0x00EC),
  "Compensator Thickness Data",
  [DecimalString],
  vm_1_to_n,
)

pub const number_of_boli = Item(
  DataElementTag(0x300A, 0x00ED),
  "Number of Boli",
  [IntegerString],
  vm_1,
)

pub const compensator_type = Item(
  DataElementTag(0x300A, 0x00EE),
  "Compensator Type",
  [CodeString],
  vm_1,
)

pub const compensator_tray_id = Item(
  DataElementTag(0x300A, 0x00EF),
  "Compensator Tray ID",
  [ShortString],
  vm_1,
)

pub const number_of_blocks = Item(
  DataElementTag(0x300A, 0x00F0),
  "Number of Blocks",
  [IntegerString],
  vm_1,
)

pub const total_block_tray_factor = Item(
  DataElementTag(0x300A, 0x00F2),
  "Total Block Tray Factor",
  [DecimalString],
  vm_1,
)

pub const total_block_tray_water_equivalent_thickness = Item(
  DataElementTag(0x300A, 0x00F3),
  "Total Block Tray Water-Equivalent Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const block_sequence = Item(
  DataElementTag(0x300A, 0x00F4),
  "Block Sequence",
  [Sequence],
  vm_1,
)

pub const block_tray_id = Item(
  DataElementTag(0x300A, 0x00F5),
  "Block Tray ID",
  [ShortString],
  vm_1,
)

pub const source_to_block_tray_distance = Item(
  DataElementTag(0x300A, 0x00F6),
  "Source to Block Tray Distance",
  [DecimalString],
  vm_1,
)

pub const isocenter_to_block_tray_distance = Item(
  DataElementTag(0x300A, 0x00F7),
  "Isocenter to Block Tray Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const block_type = Item(
  DataElementTag(0x300A, 0x00F8),
  "Block Type",
  [CodeString],
  vm_1,
)

pub const accessory_code = Item(
  DataElementTag(0x300A, 0x00F9),
  "Accessory Code",
  [LongString],
  vm_1,
)

pub const block_divergence = Item(
  DataElementTag(0x300A, 0x00FA),
  "Block Divergence",
  [CodeString],
  vm_1,
)

pub const block_mounting_position = Item(
  DataElementTag(0x300A, 0x00FB),
  "Block Mounting Position",
  [CodeString],
  vm_1,
)

pub const block_number = Item(
  DataElementTag(0x300A, 0x00FC),
  "Block Number",
  [IntegerString],
  vm_1,
)

pub const block_name = Item(
  DataElementTag(0x300A, 0x00FE),
  "Block Name",
  [LongString],
  vm_1,
)

pub const block_thickness = Item(
  DataElementTag(0x300A, 0x0100),
  "Block Thickness",
  [DecimalString],
  vm_1,
)

pub const block_transmission = Item(
  DataElementTag(0x300A, 0x0102),
  "Block Transmission",
  [DecimalString],
  vm_1,
)

pub const block_number_of_points = Item(
  DataElementTag(0x300A, 0x0104),
  "Block Number of Points",
  [IntegerString],
  vm_1,
)

pub const block_data = Item(
  DataElementTag(0x300A, 0x0106),
  "Block Data",
  [DecimalString],
  vm_2_to_n,
)

pub const applicator_sequence = Item(
  DataElementTag(0x300A, 0x0107),
  "Applicator Sequence",
  [Sequence],
  vm_1,
)

pub const applicator_id = Item(
  DataElementTag(0x300A, 0x0108),
  "Applicator ID",
  [ShortString],
  vm_1,
)

pub const applicator_type = Item(
  DataElementTag(0x300A, 0x0109),
  "Applicator Type",
  [CodeString],
  vm_1,
)

pub const applicator_description = Item(
  DataElementTag(0x300A, 0x010A),
  "Applicator Description",
  [LongString],
  vm_1,
)

pub const cumulative_dose_reference_coefficient = Item(
  DataElementTag(0x300A, 0x010C),
  "Cumulative Dose Reference Coefficient",
  [DecimalString],
  vm_1,
)

pub const final_cumulative_meterset_weight = Item(
  DataElementTag(0x300A, 0x010E),
  "Final Cumulative Meterset Weight",
  [DecimalString],
  vm_1,
)

pub const number_of_control_points = Item(
  DataElementTag(0x300A, 0x0110),
  "Number of Control Points",
  [IntegerString],
  vm_1,
)

pub const control_point_sequence = Item(
  DataElementTag(0x300A, 0x0111),
  "Control Point Sequence",
  [Sequence],
  vm_1,
)

pub const control_point_index = Item(
  DataElementTag(0x300A, 0x0112),
  "Control Point Index",
  [IntegerString],
  vm_1,
)

pub const nominal_beam_energy = Item(
  DataElementTag(0x300A, 0x0114),
  "Nominal Beam Energy",
  [DecimalString],
  vm_1,
)

pub const dose_rate_set = Item(
  DataElementTag(0x300A, 0x0115),
  "Dose Rate Set",
  [DecimalString],
  vm_1,
)

pub const wedge_position_sequence = Item(
  DataElementTag(0x300A, 0x0116),
  "Wedge Position Sequence",
  [Sequence],
  vm_1,
)

pub const wedge_position = Item(
  DataElementTag(0x300A, 0x0118),
  "Wedge Position",
  [CodeString],
  vm_1,
)

pub const beam_limiting_device_position_sequence = Item(
  DataElementTag(0x300A, 0x011A),
  "Beam Limiting Device Position Sequence",
  [Sequence],
  vm_1,
)

pub const leaf_jaw_positions = Item(
  DataElementTag(0x300A, 0x011C),
  "Leaf/Jaw Positions",
  [DecimalString],
  vm_2_to_n,
)

pub const gantry_angle = Item(
  DataElementTag(0x300A, 0x011E),
  "Gantry Angle",
  [DecimalString],
  vm_1,
)

pub const gantry_rotation_direction = Item(
  DataElementTag(0x300A, 0x011F),
  "Gantry Rotation Direction",
  [CodeString],
  vm_1,
)

pub const beam_limiting_device_angle = Item(
  DataElementTag(0x300A, 0x0120),
  "Beam Limiting Device Angle",
  [DecimalString],
  vm_1,
)

pub const beam_limiting_device_rotation_direction = Item(
  DataElementTag(0x300A, 0x0121),
  "Beam Limiting Device Rotation Direction",
  [CodeString],
  vm_1,
)

pub const patient_support_angle = Item(
  DataElementTag(0x300A, 0x0122),
  "Patient Support Angle",
  [DecimalString],
  vm_1,
)

pub const patient_support_rotation_direction = Item(
  DataElementTag(0x300A, 0x0123),
  "Patient Support Rotation Direction",
  [CodeString],
  vm_1,
)

pub const table_top_eccentric_axis_distance = Item(
  DataElementTag(0x300A, 0x0124),
  "Table Top Eccentric Axis Distance",
  [DecimalString],
  vm_1,
)

pub const table_top_eccentric_angle = Item(
  DataElementTag(0x300A, 0x0125),
  "Table Top Eccentric Angle",
  [DecimalString],
  vm_1,
)

pub const table_top_eccentric_rotation_direction = Item(
  DataElementTag(0x300A, 0x0126),
  "Table Top Eccentric Rotation Direction",
  [CodeString],
  vm_1,
)

pub const table_top_vertical_position = Item(
  DataElementTag(0x300A, 0x0128),
  "Table Top Vertical Position",
  [DecimalString],
  vm_1,
)

pub const table_top_longitudinal_position = Item(
  DataElementTag(0x300A, 0x0129),
  "Table Top Longitudinal Position",
  [DecimalString],
  vm_1,
)

pub const table_top_lateral_position = Item(
  DataElementTag(0x300A, 0x012A),
  "Table Top Lateral Position",
  [DecimalString],
  vm_1,
)

pub const isocenter_position = Item(
  DataElementTag(0x300A, 0x012C),
  "Isocenter Position",
  [DecimalString],
  vm_3,
)

pub const surface_entry_point = Item(
  DataElementTag(0x300A, 0x012E),
  "Surface Entry Point",
  [DecimalString],
  vm_3,
)

pub const source_to_surface_distance = Item(
  DataElementTag(0x300A, 0x0130),
  "Source to Surface Distance",
  [DecimalString],
  vm_1,
)

pub const average_beam_dose_point_source_to_external_contour_distance = Item(
  DataElementTag(0x300A, 0x0131),
  "Average Beam Dose Point Source to External Contour Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const source_to_external_contour_distance = Item(
  DataElementTag(0x300A, 0x0132),
  "Source to External Contour Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const external_contour_entry_point = Item(
  DataElementTag(0x300A, 0x0133),
  "External Contour Entry Point",
  [FloatingPointSingle],
  vm_3,
)

pub const cumulative_meterset_weight = Item(
  DataElementTag(0x300A, 0x0134),
  "Cumulative Meterset Weight",
  [DecimalString],
  vm_1,
)

pub const table_top_pitch_angle = Item(
  DataElementTag(0x300A, 0x0140),
  "Table Top Pitch Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const table_top_pitch_rotation_direction = Item(
  DataElementTag(0x300A, 0x0142),
  "Table Top Pitch Rotation Direction",
  [CodeString],
  vm_1,
)

pub const table_top_roll_angle = Item(
  DataElementTag(0x300A, 0x0144),
  "Table Top Roll Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const table_top_roll_rotation_direction = Item(
  DataElementTag(0x300A, 0x0146),
  "Table Top Roll Rotation Direction",
  [CodeString],
  vm_1,
)

pub const head_fixation_angle = Item(
  DataElementTag(0x300A, 0x0148),
  "Head Fixation Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const gantry_pitch_angle = Item(
  DataElementTag(0x300A, 0x014A),
  "Gantry Pitch Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const gantry_pitch_rotation_direction = Item(
  DataElementTag(0x300A, 0x014C),
  "Gantry Pitch Rotation Direction",
  [CodeString],
  vm_1,
)

pub const gantry_pitch_angle_tolerance = Item(
  DataElementTag(0x300A, 0x014E),
  "Gantry Pitch Angle Tolerance",
  [FloatingPointSingle],
  vm_1,
)

pub const fixation_eye = Item(
  DataElementTag(0x300A, 0x0150),
  "Fixation Eye",
  [CodeString],
  vm_1,
)

pub const chair_head_frame_position = Item(
  DataElementTag(0x300A, 0x0151),
  "Chair Head Frame Position",
  [DecimalString],
  vm_1,
)

pub const head_fixation_angle_tolerance = Item(
  DataElementTag(0x300A, 0x0152),
  "Head Fixation Angle Tolerance",
  [DecimalString],
  vm_1,
)

pub const chair_head_frame_position_tolerance = Item(
  DataElementTag(0x300A, 0x0153),
  "Chair Head Frame Position Tolerance",
  [DecimalString],
  vm_1,
)

pub const fixation_light_azimuthal_angle_tolerance = Item(
  DataElementTag(0x300A, 0x0154),
  "Fixation Light Azimuthal Angle Tolerance",
  [DecimalString],
  vm_1,
)

pub const fixation_light_polar_angle_tolerance = Item(
  DataElementTag(0x300A, 0x0155),
  "Fixation Light Polar Angle Tolerance",
  [DecimalString],
  vm_1,
)

pub const patient_setup_sequence = Item(
  DataElementTag(0x300A, 0x0180),
  "Patient Setup Sequence",
  [Sequence],
  vm_1,
)

pub const patient_setup_number = Item(
  DataElementTag(0x300A, 0x0182),
  "Patient Setup Number",
  [IntegerString],
  vm_1,
)

pub const patient_setup_label = Item(
  DataElementTag(0x300A, 0x0183),
  "Patient Setup Label",
  [LongString],
  vm_1,
)

pub const patient_additional_position = Item(
  DataElementTag(0x300A, 0x0184),
  "Patient Additional Position",
  [LongString],
  vm_1,
)

pub const fixation_device_sequence = Item(
  DataElementTag(0x300A, 0x0190),
  "Fixation Device Sequence",
  [Sequence],
  vm_1,
)

pub const fixation_device_type = Item(
  DataElementTag(0x300A, 0x0192),
  "Fixation Device Type",
  [CodeString],
  vm_1,
)

pub const fixation_device_label = Item(
  DataElementTag(0x300A, 0x0194),
  "Fixation Device Label",
  [ShortString],
  vm_1,
)

pub const fixation_device_description = Item(
  DataElementTag(0x300A, 0x0196),
  "Fixation Device Description",
  [ShortText],
  vm_1,
)

pub const fixation_device_position = Item(
  DataElementTag(0x300A, 0x0198),
  "Fixation Device Position",
  [ShortString],
  vm_1,
)

pub const fixation_device_pitch_angle = Item(
  DataElementTag(0x300A, 0x0199),
  "Fixation Device Pitch Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const fixation_device_roll_angle = Item(
  DataElementTag(0x300A, 0x019A),
  "Fixation Device Roll Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const shielding_device_sequence = Item(
  DataElementTag(0x300A, 0x01A0),
  "Shielding Device Sequence",
  [Sequence],
  vm_1,
)

pub const shielding_device_type = Item(
  DataElementTag(0x300A, 0x01A2),
  "Shielding Device Type",
  [CodeString],
  vm_1,
)

pub const shielding_device_label = Item(
  DataElementTag(0x300A, 0x01A4),
  "Shielding Device Label",
  [ShortString],
  vm_1,
)

pub const shielding_device_description = Item(
  DataElementTag(0x300A, 0x01A6),
  "Shielding Device Description",
  [ShortText],
  vm_1,
)

pub const shielding_device_position = Item(
  DataElementTag(0x300A, 0x01A8),
  "Shielding Device Position",
  [ShortString],
  vm_1,
)

pub const setup_technique = Item(
  DataElementTag(0x300A, 0x01B0),
  "Setup Technique",
  [CodeString],
  vm_1,
)

pub const setup_technique_description = Item(
  DataElementTag(0x300A, 0x01B2),
  "Setup Technique Description",
  [ShortText],
  vm_1,
)

pub const setup_device_sequence = Item(
  DataElementTag(0x300A, 0x01B4),
  "Setup Device Sequence",
  [Sequence],
  vm_1,
)

pub const setup_device_type = Item(
  DataElementTag(0x300A, 0x01B6),
  "Setup Device Type",
  [CodeString],
  vm_1,
)

pub const setup_device_label = Item(
  DataElementTag(0x300A, 0x01B8),
  "Setup Device Label",
  [ShortString],
  vm_1,
)

pub const setup_device_description = Item(
  DataElementTag(0x300A, 0x01BA),
  "Setup Device Description",
  [ShortText],
  vm_1,
)

pub const setup_device_parameter = Item(
  DataElementTag(0x300A, 0x01BC),
  "Setup Device Parameter",
  [DecimalString],
  vm_1,
)

pub const setup_reference_description = Item(
  DataElementTag(0x300A, 0x01D0),
  "Setup Reference Description",
  [ShortText],
  vm_1,
)

pub const table_top_vertical_setup_displacement = Item(
  DataElementTag(0x300A, 0x01D2),
  "Table Top Vertical Setup Displacement",
  [DecimalString],
  vm_1,
)

pub const table_top_longitudinal_setup_displacement = Item(
  DataElementTag(0x300A, 0x01D4),
  "Table Top Longitudinal Setup Displacement",
  [DecimalString],
  vm_1,
)

pub const table_top_lateral_setup_displacement = Item(
  DataElementTag(0x300A, 0x01D6),
  "Table Top Lateral Setup Displacement",
  [DecimalString],
  vm_1,
)

pub const brachy_treatment_technique = Item(
  DataElementTag(0x300A, 0x0200),
  "Brachy Treatment Technique",
  [CodeString],
  vm_1,
)

pub const brachy_treatment_type = Item(
  DataElementTag(0x300A, 0x0202),
  "Brachy Treatment Type",
  [CodeString],
  vm_1,
)

pub const treatment_machine_sequence = Item(
  DataElementTag(0x300A, 0x0206),
  "Treatment Machine Sequence",
  [Sequence],
  vm_1,
)

pub const source_sequence = Item(
  DataElementTag(0x300A, 0x0210),
  "Source Sequence",
  [Sequence],
  vm_1,
)

pub const source_number = Item(
  DataElementTag(0x300A, 0x0212),
  "Source Number",
  [IntegerString],
  vm_1,
)

pub const source_type = Item(
  DataElementTag(0x300A, 0x0214),
  "Source Type",
  [CodeString],
  vm_1,
)

pub const source_manufacturer = Item(
  DataElementTag(0x300A, 0x0216),
  "Source Manufacturer",
  [LongString],
  vm_1,
)

pub const active_source_diameter = Item(
  DataElementTag(0x300A, 0x0218),
  "Active Source Diameter",
  [DecimalString],
  vm_1,
)

pub const active_source_length = Item(
  DataElementTag(0x300A, 0x021A),
  "Active Source Length",
  [DecimalString],
  vm_1,
)

pub const source_model_id = Item(
  DataElementTag(0x300A, 0x021B),
  "Source Model ID",
  [ShortString],
  vm_1,
)

pub const source_description = Item(
  DataElementTag(0x300A, 0x021C),
  "Source Description",
  [LongString],
  vm_1,
)

pub const source_encapsulation_nominal_thickness = Item(
  DataElementTag(0x300A, 0x0222),
  "Source Encapsulation Nominal Thickness",
  [DecimalString],
  vm_1,
)

pub const source_encapsulation_nominal_transmission = Item(
  DataElementTag(0x300A, 0x0224),
  "Source Encapsulation Nominal Transmission",
  [DecimalString],
  vm_1,
)

pub const source_isotope_name = Item(
  DataElementTag(0x300A, 0x0226),
  "Source Isotope Name",
  [LongString],
  vm_1,
)

pub const source_isotope_half_life = Item(
  DataElementTag(0x300A, 0x0228),
  "Source Isotope Half Life",
  [DecimalString],
  vm_1,
)

pub const source_strength_units = Item(
  DataElementTag(0x300A, 0x0229),
  "Source Strength Units",
  [CodeString],
  vm_1,
)

pub const reference_air_kerma_rate = Item(
  DataElementTag(0x300A, 0x022A),
  "Reference Air Kerma Rate",
  [DecimalString],
  vm_1,
)

pub const source_strength = Item(
  DataElementTag(0x300A, 0x022B),
  "Source Strength",
  [DecimalString],
  vm_1,
)

pub const source_strength_reference_date = Item(
  DataElementTag(0x300A, 0x022C),
  "Source Strength Reference Date",
  [Date],
  vm_1,
)

pub const source_strength_reference_time = Item(
  DataElementTag(0x300A, 0x022E),
  "Source Strength Reference Time",
  [Time],
  vm_1,
)

pub const application_setup_sequence = Item(
  DataElementTag(0x300A, 0x0230),
  "Application Setup Sequence",
  [Sequence],
  vm_1,
)

pub const application_setup_type = Item(
  DataElementTag(0x300A, 0x0232),
  "Application Setup Type",
  [CodeString],
  vm_1,
)

pub const application_setup_number = Item(
  DataElementTag(0x300A, 0x0234),
  "Application Setup Number",
  [IntegerString],
  vm_1,
)

pub const application_setup_name = Item(
  DataElementTag(0x300A, 0x0236),
  "Application Setup Name",
  [LongString],
  vm_1,
)

pub const application_setup_manufacturer = Item(
  DataElementTag(0x300A, 0x0238),
  "Application Setup Manufacturer",
  [LongString],
  vm_1,
)

pub const template_number = Item(
  DataElementTag(0x300A, 0x0240),
  "Template Number",
  [IntegerString],
  vm_1,
)

pub const template_type = Item(
  DataElementTag(0x300A, 0x0242),
  "Template Type",
  [ShortString],
  vm_1,
)

pub const template_name = Item(
  DataElementTag(0x300A, 0x0244),
  "Template Name",
  [LongString],
  vm_1,
)

pub const total_reference_air_kerma = Item(
  DataElementTag(0x300A, 0x0250),
  "Total Reference Air Kerma",
  [DecimalString],
  vm_1,
)

pub const brachy_accessory_device_sequence = Item(
  DataElementTag(0x300A, 0x0260),
  "Brachy Accessory Device Sequence",
  [Sequence],
  vm_1,
)

pub const brachy_accessory_device_number = Item(
  DataElementTag(0x300A, 0x0262),
  "Brachy Accessory Device Number",
  [IntegerString],
  vm_1,
)

pub const brachy_accessory_device_id = Item(
  DataElementTag(0x300A, 0x0263),
  "Brachy Accessory Device ID",
  [ShortString],
  vm_1,
)

pub const brachy_accessory_device_type = Item(
  DataElementTag(0x300A, 0x0264),
  "Brachy Accessory Device Type",
  [CodeString],
  vm_1,
)

pub const brachy_accessory_device_name = Item(
  DataElementTag(0x300A, 0x0266),
  "Brachy Accessory Device Name",
  [LongString],
  vm_1,
)

pub const brachy_accessory_device_nominal_thickness = Item(
  DataElementTag(0x300A, 0x026A),
  "Brachy Accessory Device Nominal Thickness",
  [DecimalString],
  vm_1,
)

pub const brachy_accessory_device_nominal_transmission = Item(
  DataElementTag(0x300A, 0x026C),
  "Brachy Accessory Device Nominal Transmission",
  [DecimalString],
  vm_1,
)

pub const channel_effective_length = Item(
  DataElementTag(0x300A, 0x0271),
  "Channel Effective Length",
  [DecimalString],
  vm_1,
)

pub const channel_inner_length = Item(
  DataElementTag(0x300A, 0x0272),
  "Channel Inner Length",
  [DecimalString],
  vm_1,
)

pub const afterloader_channel_id = Item(
  DataElementTag(0x300A, 0x0273),
  "Afterloader Channel ID",
  [ShortString],
  vm_1,
)

pub const source_applicator_tip_length = Item(
  DataElementTag(0x300A, 0x0274),
  "Source Applicator Tip Length",
  [DecimalString],
  vm_1,
)

pub const channel_sequence = Item(
  DataElementTag(0x300A, 0x0280),
  "Channel Sequence",
  [Sequence],
  vm_1,
)

pub const channel_number = Item(
  DataElementTag(0x300A, 0x0282),
  "Channel Number",
  [IntegerString],
  vm_1,
)

pub const channel_length = Item(
  DataElementTag(0x300A, 0x0284),
  "Channel Length",
  [DecimalString],
  vm_1,
)

pub const channel_total_time = Item(
  DataElementTag(0x300A, 0x0286),
  "Channel Total Time",
  [DecimalString],
  vm_1,
)

pub const source_movement_type = Item(
  DataElementTag(0x300A, 0x0288),
  "Source Movement Type",
  [CodeString],
  vm_1,
)

pub const number_of_pulses = Item(
  DataElementTag(0x300A, 0x028A),
  "Number of Pulses",
  [IntegerString],
  vm_1,
)

pub const pulse_repetition_interval = Item(
  DataElementTag(0x300A, 0x028C),
  "Pulse Repetition Interval",
  [DecimalString],
  vm_1,
)

pub const source_applicator_number = Item(
  DataElementTag(0x300A, 0x0290),
  "Source Applicator Number",
  [IntegerString],
  vm_1,
)

pub const source_applicator_id = Item(
  DataElementTag(0x300A, 0x0291),
  "Source Applicator ID",
  [ShortString],
  vm_1,
)

pub const source_applicator_type = Item(
  DataElementTag(0x300A, 0x0292),
  "Source Applicator Type",
  [CodeString],
  vm_1,
)

pub const source_applicator_name = Item(
  DataElementTag(0x300A, 0x0294),
  "Source Applicator Name",
  [LongString],
  vm_1,
)

pub const source_applicator_length = Item(
  DataElementTag(0x300A, 0x0296),
  "Source Applicator Length",
  [DecimalString],
  vm_1,
)

pub const source_applicator_manufacturer = Item(
  DataElementTag(0x300A, 0x0298),
  "Source Applicator Manufacturer",
  [LongString],
  vm_1,
)

pub const source_applicator_wall_nominal_thickness = Item(
  DataElementTag(0x300A, 0x029C),
  "Source Applicator Wall Nominal Thickness",
  [DecimalString],
  vm_1,
)

pub const source_applicator_wall_nominal_transmission = Item(
  DataElementTag(0x300A, 0x029E),
  "Source Applicator Wall Nominal Transmission",
  [DecimalString],
  vm_1,
)

pub const source_applicator_step_size = Item(
  DataElementTag(0x300A, 0x02A0),
  "Source Applicator Step Size",
  [DecimalString],
  vm_1,
)

pub const applicator_shape_referenced_roi_number = Item(
  DataElementTag(0x300A, 0x02A1),
  "Applicator Shape Referenced ROI Number",
  [IntegerString],
  vm_1,
)

pub const transfer_tube_number = Item(
  DataElementTag(0x300A, 0x02A2),
  "Transfer Tube Number",
  [IntegerString],
  vm_1,
)

pub const transfer_tube_length = Item(
  DataElementTag(0x300A, 0x02A4),
  "Transfer Tube Length",
  [DecimalString],
  vm_1,
)

pub const channel_shield_sequence = Item(
  DataElementTag(0x300A, 0x02B0),
  "Channel Shield Sequence",
  [Sequence],
  vm_1,
)

pub const channel_shield_number = Item(
  DataElementTag(0x300A, 0x02B2),
  "Channel Shield Number",
  [IntegerString],
  vm_1,
)

pub const channel_shield_id = Item(
  DataElementTag(0x300A, 0x02B3),
  "Channel Shield ID",
  [ShortString],
  vm_1,
)

pub const channel_shield_name = Item(
  DataElementTag(0x300A, 0x02B4),
  "Channel Shield Name",
  [LongString],
  vm_1,
)

pub const channel_shield_nominal_thickness = Item(
  DataElementTag(0x300A, 0x02B8),
  "Channel Shield Nominal Thickness",
  [DecimalString],
  vm_1,
)

pub const channel_shield_nominal_transmission = Item(
  DataElementTag(0x300A, 0x02BA),
  "Channel Shield Nominal Transmission",
  [DecimalString],
  vm_1,
)

pub const final_cumulative_time_weight = Item(
  DataElementTag(0x300A, 0x02C8),
  "Final Cumulative Time Weight",
  [DecimalString],
  vm_1,
)

pub const brachy_control_point_sequence = Item(
  DataElementTag(0x300A, 0x02D0),
  "Brachy Control Point Sequence",
  [Sequence],
  vm_1,
)

pub const control_point_relative_position = Item(
  DataElementTag(0x300A, 0x02D2),
  "Control Point Relative Position",
  [DecimalString],
  vm_1,
)

pub const control_point_3d_position = Item(
  DataElementTag(0x300A, 0x02D4),
  "Control Point 3D Position",
  [DecimalString],
  vm_3,
)

pub const cumulative_time_weight = Item(
  DataElementTag(0x300A, 0x02D6),
  "Cumulative Time Weight",
  [DecimalString],
  vm_1,
)

pub const compensator_divergence = Item(
  DataElementTag(0x300A, 0x02E0),
  "Compensator Divergence",
  [CodeString],
  vm_1,
)

pub const compensator_mounting_position = Item(
  DataElementTag(0x300A, 0x02E1),
  "Compensator Mounting Position",
  [CodeString],
  vm_1,
)

pub const source_to_compensator_distance = Item(
  DataElementTag(0x300A, 0x02E2),
  "Source to Compensator Distance",
  [DecimalString],
  vm_1_to_n,
)

pub const total_compensator_tray_water_equivalent_thickness = Item(
  DataElementTag(0x300A, 0x02E3),
  "Total Compensator Tray Water-Equivalent Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const isocenter_to_compensator_tray_distance = Item(
  DataElementTag(0x300A, 0x02E4),
  "Isocenter to Compensator Tray Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const compensator_column_offset = Item(
  DataElementTag(0x300A, 0x02E5),
  "Compensator Column Offset",
  [FloatingPointSingle],
  vm_1,
)

pub const isocenter_to_compensator_distances = Item(
  DataElementTag(0x300A, 0x02E6),
  "Isocenter to Compensator Distances",
  [FloatingPointSingle],
  vm_1_to_n,
)

pub const compensator_relative_stopping_power_ratio = Item(
  DataElementTag(0x300A, 0x02E7),
  "Compensator Relative Stopping Power Ratio",
  [FloatingPointSingle],
  vm_1,
)

pub const compensator_milling_tool_diameter = Item(
  DataElementTag(0x300A, 0x02E8),
  "Compensator Milling Tool Diameter",
  [FloatingPointSingle],
  vm_1,
)

pub const ion_range_compensator_sequence = Item(
  DataElementTag(0x300A, 0x02EA),
  "Ion Range Compensator Sequence",
  [Sequence],
  vm_1,
)

pub const compensator_description = Item(
  DataElementTag(0x300A, 0x02EB),
  "Compensator Description",
  [LongText],
  vm_1,
)

pub const radiation_mass_number = Item(
  DataElementTag(0x300A, 0x0302),
  "Radiation Mass Number",
  [IntegerString],
  vm_1,
)

pub const radiation_atomic_number = Item(
  DataElementTag(0x300A, 0x0304),
  "Radiation Atomic Number",
  [IntegerString],
  vm_1,
)

pub const radiation_charge_state = Item(
  DataElementTag(0x300A, 0x0306),
  "Radiation Charge State",
  [SignedShort],
  vm_1,
)

pub const scan_mode = Item(
  DataElementTag(0x300A, 0x0308),
  "Scan Mode",
  [CodeString],
  vm_1,
)

pub const modulated_scan_mode_type = Item(
  DataElementTag(0x300A, 0x0309),
  "Modulated Scan Mode Type",
  [CodeString],
  vm_1,
)

pub const virtual_source_axis_distances = Item(
  DataElementTag(0x300A, 0x030A),
  "Virtual Source-Axis Distances",
  [FloatingPointSingle],
  vm_2,
)

pub const snout_sequence = Item(
  DataElementTag(0x300A, 0x030C),
  "Snout Sequence",
  [Sequence],
  vm_1,
)

pub const snout_position = Item(
  DataElementTag(0x300A, 0x030D),
  "Snout Position",
  [FloatingPointSingle],
  vm_1,
)

pub const snout_id = Item(
  DataElementTag(0x300A, 0x030F),
  "Snout ID",
  [ShortString],
  vm_1,
)

pub const number_of_range_shifters = Item(
  DataElementTag(0x300A, 0x0312),
  "Number of Range Shifters",
  [IntegerString],
  vm_1,
)

pub const range_shifter_sequence = Item(
  DataElementTag(0x300A, 0x0314),
  "Range Shifter Sequence",
  [Sequence],
  vm_1,
)

pub const range_shifter_number = Item(
  DataElementTag(0x300A, 0x0316),
  "Range Shifter Number",
  [IntegerString],
  vm_1,
)

pub const range_shifter_id = Item(
  DataElementTag(0x300A, 0x0318),
  "Range Shifter ID",
  [ShortString],
  vm_1,
)

pub const range_shifter_type = Item(
  DataElementTag(0x300A, 0x0320),
  "Range Shifter Type",
  [CodeString],
  vm_1,
)

pub const range_shifter_description = Item(
  DataElementTag(0x300A, 0x0322),
  "Range Shifter Description",
  [LongString],
  vm_1,
)

pub const number_of_lateral_spreading_devices = Item(
  DataElementTag(0x300A, 0x0330),
  "Number of Lateral Spreading Devices",
  [IntegerString],
  vm_1,
)

pub const lateral_spreading_device_sequence = Item(
  DataElementTag(0x300A, 0x0332),
  "Lateral Spreading Device Sequence",
  [Sequence],
  vm_1,
)

pub const lateral_spreading_device_number = Item(
  DataElementTag(0x300A, 0x0334),
  "Lateral Spreading Device Number",
  [IntegerString],
  vm_1,
)

pub const lateral_spreading_device_id = Item(
  DataElementTag(0x300A, 0x0336),
  "Lateral Spreading Device ID",
  [ShortString],
  vm_1,
)

pub const lateral_spreading_device_type = Item(
  DataElementTag(0x300A, 0x0338),
  "Lateral Spreading Device Type",
  [CodeString],
  vm_1,
)

pub const lateral_spreading_device_description = Item(
  DataElementTag(0x300A, 0x033A),
  "Lateral Spreading Device Description",
  [LongString],
  vm_1,
)

pub const lateral_spreading_device_water_equivalent_thickness = Item(
  DataElementTag(0x300A, 0x033C),
  "Lateral Spreading Device Water Equivalent Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const number_of_range_modulators = Item(
  DataElementTag(0x300A, 0x0340),
  "Number of Range Modulators",
  [IntegerString],
  vm_1,
)

pub const range_modulator_sequence = Item(
  DataElementTag(0x300A, 0x0342),
  "Range Modulator Sequence",
  [Sequence],
  vm_1,
)

pub const range_modulator_number = Item(
  DataElementTag(0x300A, 0x0344),
  "Range Modulator Number",
  [IntegerString],
  vm_1,
)

pub const range_modulator_id = Item(
  DataElementTag(0x300A, 0x0346),
  "Range Modulator ID",
  [ShortString],
  vm_1,
)

pub const range_modulator_type = Item(
  DataElementTag(0x300A, 0x0348),
  "Range Modulator Type",
  [CodeString],
  vm_1,
)

pub const range_modulator_description = Item(
  DataElementTag(0x300A, 0x034A),
  "Range Modulator Description",
  [LongString],
  vm_1,
)

pub const beam_current_modulation_id = Item(
  DataElementTag(0x300A, 0x034C),
  "Beam Current Modulation ID",
  [ShortString],
  vm_1,
)

pub const patient_support_type = Item(
  DataElementTag(0x300A, 0x0350),
  "Patient Support Type",
  [CodeString],
  vm_1,
)

pub const patient_support_id = Item(
  DataElementTag(0x300A, 0x0352),
  "Patient Support ID",
  [ShortString],
  vm_1,
)

pub const patient_support_accessory_code = Item(
  DataElementTag(0x300A, 0x0354),
  "Patient Support Accessory Code",
  [LongString],
  vm_1,
)

pub const tray_accessory_code = Item(
  DataElementTag(0x300A, 0x0355),
  "Tray Accessory Code",
  [LongString],
  vm_1,
)

pub const fixation_light_azimuthal_angle = Item(
  DataElementTag(0x300A, 0x0356),
  "Fixation Light Azimuthal Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const fixation_light_polar_angle = Item(
  DataElementTag(0x300A, 0x0358),
  "Fixation Light Polar Angle",
  [FloatingPointSingle],
  vm_1,
)

pub const meterset_rate = Item(
  DataElementTag(0x300A, 0x035A),
  "Meterset Rate",
  [FloatingPointSingle],
  vm_1,
)

pub const range_shifter_settings_sequence = Item(
  DataElementTag(0x300A, 0x0360),
  "Range Shifter Settings Sequence",
  [Sequence],
  vm_1,
)

pub const range_shifter_setting = Item(
  DataElementTag(0x300A, 0x0362),
  "Range Shifter Setting",
  [LongString],
  vm_1,
)

pub const isocenter_to_range_shifter_distance = Item(
  DataElementTag(0x300A, 0x0364),
  "Isocenter to Range Shifter Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const range_shifter_water_equivalent_thickness = Item(
  DataElementTag(0x300A, 0x0366),
  "Range Shifter Water Equivalent Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const lateral_spreading_device_settings_sequence = Item(
  DataElementTag(0x300A, 0x0370),
  "Lateral Spreading Device Settings Sequence",
  [Sequence],
  vm_1,
)

pub const lateral_spreading_device_setting = Item(
  DataElementTag(0x300A, 0x0372),
  "Lateral Spreading Device Setting",
  [LongString],
  vm_1,
)

pub const isocenter_to_lateral_spreading_device_distance = Item(
  DataElementTag(0x300A, 0x0374),
  "Isocenter to Lateral Spreading Device Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const range_modulator_settings_sequence = Item(
  DataElementTag(0x300A, 0x0380),
  "Range Modulator Settings Sequence",
  [Sequence],
  vm_1,
)

pub const range_modulator_gating_start_value = Item(
  DataElementTag(0x300A, 0x0382),
  "Range Modulator Gating Start Value",
  [FloatingPointSingle],
  vm_1,
)

pub const range_modulator_gating_stop_value = Item(
  DataElementTag(0x300A, 0x0384),
  "Range Modulator Gating Stop Value",
  [FloatingPointSingle],
  vm_1,
)

pub const range_modulator_gating_start_water_equivalent_thickness = Item(
  DataElementTag(0x300A, 0x0386),
  "Range Modulator Gating Start Water Equivalent Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const range_modulator_gating_stop_water_equivalent_thickness = Item(
  DataElementTag(0x300A, 0x0388),
  "Range Modulator Gating Stop Water Equivalent Thickness",
  [FloatingPointSingle],
  vm_1,
)

pub const isocenter_to_range_modulator_distance = Item(
  DataElementTag(0x300A, 0x038A),
  "Isocenter to Range Modulator Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const scan_spot_time_offset = Item(
  DataElementTag(0x300A, 0x038F),
  "Scan Spot Time Offset",
  [FloatingPointSingle],
  vm_1_to_n,
)

pub const scan_spot_tune_id = Item(
  DataElementTag(0x300A, 0x0390),
  "Scan Spot Tune ID",
  [ShortString],
  vm_1,
)

pub const scan_spot_prescribed_indices = Item(
  DataElementTag(0x300A, 0x0391),
  "Scan Spot Prescribed Indices",
  [IntegerString],
  vm_1_to_n,
)

pub const number_of_scan_spot_positions = Item(
  DataElementTag(0x300A, 0x0392),
  "Number of Scan Spot Positions",
  [IntegerString],
  vm_1,
)

pub const scan_spot_reordered = Item(
  DataElementTag(0x300A, 0x0393),
  "Scan Spot Reordered",
  [CodeString],
  vm_1,
)

pub const scan_spot_position_map = Item(
  DataElementTag(0x300A, 0x0394),
  "Scan Spot Position Map",
  [FloatingPointSingle],
  vm_1_to_n,
)

pub const scan_spot_reordering_allowed = Item(
  DataElementTag(0x300A, 0x0395),
  "Scan Spot Reordering Allowed",
  [CodeString],
  vm_1,
)

pub const scan_spot_meterset_weights = Item(
  DataElementTag(0x300A, 0x0396),
  "Scan Spot Meterset Weights",
  [FloatingPointSingle],
  vm_1_to_n,
)

pub const scanning_spot_size = Item(
  DataElementTag(0x300A, 0x0398),
  "Scanning Spot Size",
  [FloatingPointSingle],
  vm_2,
)

pub const scan_spot_sizes_delivered = Item(
  DataElementTag(0x300A, 0x0399),
  "Scan Spot Sizes Delivered",
  [FloatingPointSingle],
  vm_2_to_n,
)

pub const number_of_paintings = Item(
  DataElementTag(0x300A, 0x039A),
  "Number of Paintings",
  [IntegerString],
  vm_1,
)

pub const ion_tolerance_table_sequence = Item(
  DataElementTag(0x300A, 0x03A0),
  "Ion Tolerance Table Sequence",
  [Sequence],
  vm_1,
)

pub const ion_beam_sequence = Item(
  DataElementTag(0x300A, 0x03A2),
  "Ion Beam Sequence",
  [Sequence],
  vm_1,
)

pub const ion_beam_limiting_device_sequence = Item(
  DataElementTag(0x300A, 0x03A4),
  "Ion Beam Limiting Device Sequence",
  [Sequence],
  vm_1,
)

pub const ion_block_sequence = Item(
  DataElementTag(0x300A, 0x03A6),
  "Ion Block Sequence",
  [Sequence],
  vm_1,
)

pub const ion_control_point_sequence = Item(
  DataElementTag(0x300A, 0x03A8),
  "Ion Control Point Sequence",
  [Sequence],
  vm_1,
)

pub const ion_wedge_sequence = Item(
  DataElementTag(0x300A, 0x03AA),
  "Ion Wedge Sequence",
  [Sequence],
  vm_1,
)

pub const ion_wedge_position_sequence = Item(
  DataElementTag(0x300A, 0x03AC),
  "Ion Wedge Position Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_setup_image_sequence = Item(
  DataElementTag(0x300A, 0x0401),
  "Referenced Setup Image Sequence",
  [Sequence],
  vm_1,
)

pub const setup_image_comment = Item(
  DataElementTag(0x300A, 0x0402),
  "Setup Image Comment",
  [ShortText],
  vm_1,
)

pub const motion_synchronization_sequence = Item(
  DataElementTag(0x300A, 0x0410),
  "Motion Synchronization Sequence",
  [Sequence],
  vm_1,
)

pub const control_point_orientation = Item(
  DataElementTag(0x300A, 0x0412),
  "Control Point Orientation",
  [FloatingPointSingle],
  vm_3,
)

pub const general_accessory_sequence = Item(
  DataElementTag(0x300A, 0x0420),
  "General Accessory Sequence",
  [Sequence],
  vm_1,
)

pub const general_accessory_id = Item(
  DataElementTag(0x300A, 0x0421),
  "General Accessory ID",
  [ShortString],
  vm_1,
)

pub const general_accessory_description = Item(
  DataElementTag(0x300A, 0x0422),
  "General Accessory Description",
  [ShortText],
  vm_1,
)

pub const general_accessory_type = Item(
  DataElementTag(0x300A, 0x0423),
  "General Accessory Type",
  [CodeString],
  vm_1,
)

pub const general_accessory_number = Item(
  DataElementTag(0x300A, 0x0424),
  "General Accessory Number",
  [IntegerString],
  vm_1,
)

pub const source_to_general_accessory_distance = Item(
  DataElementTag(0x300A, 0x0425),
  "Source to General Accessory Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const isocenter_to_general_accessory_distance = Item(
  DataElementTag(0x300A, 0x0426),
  "Isocenter to General Accessory Distance",
  [DecimalString],
  vm_1,
)

pub const applicator_geometry_sequence = Item(
  DataElementTag(0x300A, 0x0431),
  "Applicator Geometry Sequence",
  [Sequence],
  vm_1,
)

pub const applicator_aperture_shape = Item(
  DataElementTag(0x300A, 0x0432),
  "Applicator Aperture Shape",
  [CodeString],
  vm_1,
)

pub const applicator_opening = Item(
  DataElementTag(0x300A, 0x0433),
  "Applicator Opening",
  [FloatingPointSingle],
  vm_1,
)

pub const applicator_opening_x = Item(
  DataElementTag(0x300A, 0x0434),
  "Applicator Opening X",
  [FloatingPointSingle],
  vm_1,
)

pub const applicator_opening_y = Item(
  DataElementTag(0x300A, 0x0435),
  "Applicator Opening Y",
  [FloatingPointSingle],
  vm_1,
)

pub const source_to_applicator_mounting_position_distance = Item(
  DataElementTag(0x300A, 0x0436),
  "Source to Applicator Mounting Position Distance",
  [FloatingPointSingle],
  vm_1,
)

pub const number_of_block_slab_items = Item(
  DataElementTag(0x300A, 0x0440),
  "Number of Block Slab Items",
  [IntegerString],
  vm_1,
)

pub const block_slab_sequence = Item(
  DataElementTag(0x300A, 0x0441),
  "Block Slab Sequence",
  [Sequence],
  vm_1,
)

pub const block_slab_thickness = Item(
  DataElementTag(0x300A, 0x0442),
  "Block Slab Thickness",
  [DecimalString],
  vm_1,
)

pub const block_slab_number = Item(
  DataElementTag(0x300A, 0x0443),
  "Block Slab Number",
  [UnsignedShort],
  vm_1,
)

pub const device_motion_control_sequence = Item(
  DataElementTag(0x300A, 0x0450),
  "Device Motion Control Sequence",
  [Sequence],
  vm_1,
)

pub const device_motion_execution_mode = Item(
  DataElementTag(0x300A, 0x0451),
  "Device Motion Execution Mode",
  [CodeString],
  vm_1,
)

pub const device_motion_observation_mode = Item(
  DataElementTag(0x300A, 0x0452),
  "Device Motion Observation Mode",
  [CodeString],
  vm_1,
)

pub const device_motion_parameter_code_sequence = Item(
  DataElementTag(0x300A, 0x0453),
  "Device Motion Parameter Code Sequence",
  [Sequence],
  vm_1,
)

pub const distal_depth_fraction = Item(
  DataElementTag(0x300A, 0x0501),
  "Distal Depth Fraction",
  [FloatingPointSingle],
  vm_1,
)

pub const distal_depth = Item(
  DataElementTag(0x300A, 0x0502),
  "Distal Depth",
  [FloatingPointSingle],
  vm_1,
)

pub const nominal_range_modulation_fractions = Item(
  DataElementTag(0x300A, 0x0503),
  "Nominal Range Modulation Fractions",
  [FloatingPointSingle],
  vm_2,
)

pub const nominal_range_modulated_region_depths = Item(
  DataElementTag(0x300A, 0x0504),
  "Nominal Range Modulated Region Depths",
  [FloatingPointSingle],
  vm_2,
)

pub const depth_dose_parameters_sequence = Item(
  DataElementTag(0x300A, 0x0505),
  "Depth Dose Parameters Sequence",
  [Sequence],
  vm_1,
)

pub const delivered_depth_dose_parameters_sequence = Item(
  DataElementTag(0x300A, 0x0506),
  "Delivered Depth Dose Parameters Sequence",
  [Sequence],
  vm_1,
)

pub const delivered_distal_depth_fraction = Item(
  DataElementTag(0x300A, 0x0507),
  "Delivered Distal Depth Fraction",
  [FloatingPointSingle],
  vm_1,
)

pub const delivered_distal_depth = Item(
  DataElementTag(0x300A, 0x0508),
  "Delivered Distal Depth",
  [FloatingPointSingle],
  vm_1,
)

pub const delivered_nominal_range_modulation_fractions = Item(
  DataElementTag(0x300A, 0x0509),
  "Delivered Nominal Range Modulation Fractions",
  [FloatingPointSingle],
  vm_2,
)

pub const delivered_nominal_range_modulated_region_depths = Item(
  DataElementTag(0x300A, 0x0510),
  "Delivered Nominal Range Modulated Region Depths",
  [FloatingPointSingle],
  vm_2,
)

pub const delivered_reference_dose_definition = Item(
  DataElementTag(0x300A, 0x0511),
  "Delivered Reference Dose Definition",
  [CodeString],
  vm_1,
)

pub const reference_dose_definition = Item(
  DataElementTag(0x300A, 0x0512),
  "Reference Dose Definition",
  [CodeString],
  vm_1,
)

pub const rt_control_point_index = Item(
  DataElementTag(0x300A, 0x0600),
  "RT Control Point Index",
  [UnsignedShort],
  vm_1,
)

pub const radiation_generation_mode_index = Item(
  DataElementTag(0x300A, 0x0601),
  "Radiation Generation Mode Index",
  [UnsignedShort],
  vm_1,
)

pub const referenced_defined_device_index = Item(
  DataElementTag(0x300A, 0x0602),
  "Referenced Defined Device Index",
  [UnsignedShort],
  vm_1,
)

pub const radiation_dose_identification_index = Item(
  DataElementTag(0x300A, 0x0603),
  "Radiation Dose Identification Index",
  [UnsignedShort],
  vm_1,
)

pub const number_of_rt_control_points = Item(
  DataElementTag(0x300A, 0x0604),
  "Number of RT Control Points",
  [UnsignedShort],
  vm_1,
)

pub const referenced_radiation_generation_mode_index = Item(
  DataElementTag(0x300A, 0x0605),
  "Referenced Radiation Generation Mode Index",
  [UnsignedShort],
  vm_1,
)

pub const treatment_position_index = Item(
  DataElementTag(0x300A, 0x0606),
  "Treatment Position Index",
  [UnsignedShort],
  vm_1,
)

pub const referenced_device_index = Item(
  DataElementTag(0x300A, 0x0607),
  "Referenced Device Index",
  [UnsignedShort],
  vm_1,
)

pub const treatment_position_group_label = Item(
  DataElementTag(0x300A, 0x0608),
  "Treatment Position Group Label",
  [LongString],
  vm_1,
)

pub const treatment_position_group_uid = Item(
  DataElementTag(0x300A, 0x0609),
  "Treatment Position Group UID",
  [UniqueIdentifier],
  vm_1,
)

pub const treatment_position_group_sequence = Item(
  DataElementTag(0x300A, 0x060A),
  "Treatment Position Group Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_treatment_position_index = Item(
  DataElementTag(0x300A, 0x060B),
  "Referenced Treatment Position Index",
  [UnsignedShort],
  vm_1,
)

pub const referenced_radiation_dose_identification_index = Item(
  DataElementTag(0x300A, 0x060C),
  "Referenced Radiation Dose Identification Index",
  [UnsignedShort],
  vm_1,
)

pub const rt_accessory_holder_water_equivalent_thickness = Item(
  DataElementTag(0x300A, 0x060D),
  "RT Accessory Holder Water-Equivalent Thickness",
  [FloatingPointDouble],
  vm_1,
)

pub const referenced_rt_accessory_holder_device_index = Item(
  DataElementTag(0x300A, 0x060E),
  "Referenced RT Accessory Holder Device Index",
  [UnsignedShort],
  vm_1,
)

pub const rt_accessory_holder_slot_existence_flag = Item(
  DataElementTag(0x300A, 0x060F),
  "RT Accessory Holder Slot Existence Flag",
  [CodeString],
  vm_1,
)

pub const rt_accessory_holder_slot_sequence = Item(
  DataElementTag(0x300A, 0x0610),
  "RT Accessory Holder Slot Sequence",
  [Sequence],
  vm_1,
)

pub const rt_accessory_holder_slot_id = Item(
  DataElementTag(0x300A, 0x0611),
  "RT Accessory Holder Slot ID",
  [LongString],
  vm_1,
)

pub const rt_accessory_holder_slot_distance = Item(
  DataElementTag(0x300A, 0x0612),
  "RT Accessory Holder Slot Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const rt_accessory_slot_distance = Item(
  DataElementTag(0x300A, 0x0613),
  "RT Accessory Slot Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const rt_accessory_holder_definition_sequence = Item(
  DataElementTag(0x300A, 0x0614),
  "RT Accessory Holder Definition Sequence",
  [Sequence],
  vm_1,
)

pub const rt_accessory_device_slot_id = Item(
  DataElementTag(0x300A, 0x0615),
  "RT Accessory Device Slot ID",
  [LongString],
  vm_1,
)

pub const rt_radiation_sequence = Item(
  DataElementTag(0x300A, 0x0616),
  "RT Radiation Sequence",
  [Sequence],
  vm_1,
)

pub const radiation_dose_sequence = Item(
  DataElementTag(0x300A, 0x0617),
  "Radiation Dose Sequence",
  [Sequence],
  vm_1,
)

pub const radiation_dose_identification_sequence = Item(
  DataElementTag(0x300A, 0x0618),
  "Radiation Dose Identification Sequence",
  [Sequence],
  vm_1,
)

pub const radiation_dose_identification_label = Item(
  DataElementTag(0x300A, 0x0619),
  "Radiation Dose Identification Label",
  [LongString],
  vm_1,
)

pub const reference_dose_type = Item(
  DataElementTag(0x300A, 0x061A),
  "Reference Dose Type",
  [CodeString],
  vm_1,
)

pub const primary_dose_value_indicator = Item(
  DataElementTag(0x300A, 0x061B),
  "Primary Dose Value Indicator",
  [CodeString],
  vm_1,
)

pub const dose_values_sequence = Item(
  DataElementTag(0x300A, 0x061C),
  "Dose Values Sequence",
  [Sequence],
  vm_1,
)

pub const dose_value_purpose = Item(
  DataElementTag(0x300A, 0x061D),
  "Dose Value Purpose",
  [CodeString],
  vm_1_to_n,
)

pub const reference_dose_point_coordinates = Item(
  DataElementTag(0x300A, 0x061E),
  "Reference Dose Point Coordinates",
  [FloatingPointDouble],
  vm_3,
)

pub const radiation_dose_values_parameters_sequence = Item(
  DataElementTag(0x300A, 0x061F),
  "Radiation Dose Values Parameters Sequence",
  [Sequence],
  vm_1,
)

pub const meterset_to_dose_mapping_sequence = Item(
  DataElementTag(0x300A, 0x0620),
  "Meterset to Dose Mapping Sequence",
  [Sequence],
  vm_1,
)

pub const expected_in_vivo_measurement_values_sequence = Item(
  DataElementTag(0x300A, 0x0621),
  "Expected In-Vivo Measurement Values Sequence",
  [Sequence],
  vm_1,
)

pub const expected_in_vivo_measurement_value_index = Item(
  DataElementTag(0x300A, 0x0622),
  "Expected In-Vivo Measurement Value Index",
  [UnsignedShort],
  vm_1,
)

pub const radiation_dose_in_vivo_measurement_label = Item(
  DataElementTag(0x300A, 0x0623),
  "Radiation Dose In-Vivo Measurement Label",
  [LongString],
  vm_1,
)

pub const radiation_dose_central_axis_displacement = Item(
  DataElementTag(0x300A, 0x0624),
  "Radiation Dose Central Axis Displacement",
  [FloatingPointDouble],
  vm_2,
)

pub const radiation_dose_value = Item(
  DataElementTag(0x300A, 0x0625),
  "Radiation Dose Value",
  [FloatingPointDouble],
  vm_1,
)

pub const radiation_dose_source_to_skin_distance = Item(
  DataElementTag(0x300A, 0x0626),
  "Radiation Dose Source to Skin Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const radiation_dose_measurement_point_coordinates = Item(
  DataElementTag(0x300A, 0x0627),
  "Radiation Dose Measurement Point Coordinates",
  [FloatingPointDouble],
  vm_3,
)

pub const radiation_dose_source_to_external_contour_distance = Item(
  DataElementTag(0x300A, 0x0628),
  "Radiation Dose Source to External Contour Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const rt_tolerance_set_sequence = Item(
  DataElementTag(0x300A, 0x0629),
  "RT Tolerance Set Sequence",
  [Sequence],
  vm_1,
)

pub const rt_tolerance_set_label = Item(
  DataElementTag(0x300A, 0x062A),
  "RT Tolerance Set Label",
  [LongString],
  vm_1,
)

pub const attribute_tolerance_values_sequence = Item(
  DataElementTag(0x300A, 0x062B),
  "Attribute Tolerance Values Sequence",
  [Sequence],
  vm_1,
)

pub const tolerance_value = Item(
  DataElementTag(0x300A, 0x062C),
  "Tolerance Value",
  [FloatingPointDouble],
  vm_1,
)

pub const patient_support_position_tolerance_sequence = Item(
  DataElementTag(0x300A, 0x062D),
  "Patient Support Position Tolerance Sequence",
  [Sequence],
  vm_1,
)

pub const treatment_time_limit = Item(
  DataElementTag(0x300A, 0x062E),
  "Treatment Time Limit",
  [FloatingPointDouble],
  vm_1,
)

pub const c_arm_photon_electron_control_point_sequence = Item(
  DataElementTag(0x300A, 0x062F),
  "C-Arm Photon-Electron Control Point Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_rt_radiation_sequence = Item(
  DataElementTag(0x300A, 0x0630),
  "Referenced RT Radiation Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_rt_instance_sequence = Item(
  DataElementTag(0x300A, 0x0631),
  "Referenced RT Instance Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_rt_patient_setup_sequence = Item(
  DataElementTag(0x300A, 0x0632),
  "Referenced RT Patient Setup Sequence",
  [Sequence],
  vm_1,
)

pub const source_to_patient_surface_distance = Item(
  DataElementTag(0x300A, 0x0634),
  "Source to Patient Surface Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const treatment_machine_special_mode_code_sequence = Item(
  DataElementTag(0x300A, 0x0635),
  "Treatment Machine Special Mode Code Sequence",
  [Sequence],
  vm_1,
)

pub const intended_number_of_fractions = Item(
  DataElementTag(0x300A, 0x0636),
  "Intended Number of Fractions",
  [UnsignedShort],
  vm_1,
)

pub const rt_radiation_set_intent = Item(
  DataElementTag(0x300A, 0x0637),
  "RT Radiation Set Intent",
  [CodeString],
  vm_1,
)

pub const rt_radiation_physical_and_geometric_content_detail_flag = Item(
  DataElementTag(0x300A, 0x0638),
  "RT Radiation Physical and Geometric Content Detail Flag",
  [CodeString],
  vm_1,
)

pub const rt_record_flag = Item(
  DataElementTag(0x300A, 0x0639),
  "RT Record Flag",
  [CodeString],
  vm_1,
)

pub const treatment_device_identification_sequence = Item(
  DataElementTag(0x300A, 0x063A),
  "Treatment Device Identification Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_rt_physician_intent_sequence = Item(
  DataElementTag(0x300A, 0x063B),
  "Referenced RT Physician Intent Sequence",
  [Sequence],
  vm_1,
)

pub const cumulative_meterset = Item(
  DataElementTag(0x300A, 0x063C),
  "Cumulative Meterset",
  [FloatingPointDouble],
  vm_1,
)

pub const delivery_rate = Item(
  DataElementTag(0x300A, 0x063D),
  "Delivery Rate",
  [FloatingPointDouble],
  vm_1,
)

pub const delivery_rate_unit_sequence = Item(
  DataElementTag(0x300A, 0x063E),
  "Delivery Rate Unit Sequence",
  [Sequence],
  vm_1,
)

pub const treatment_position_sequence = Item(
  DataElementTag(0x300A, 0x063F),
  "Treatment Position Sequence",
  [Sequence],
  vm_1,
)

pub const radiation_source_axis_distance = Item(
  DataElementTag(0x300A, 0x0640),
  "Radiation Source-Axis Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const number_of_rt_beam_limiting_devices = Item(
  DataElementTag(0x300A, 0x0641),
  "Number of RT Beam Limiting Devices",
  [UnsignedShort],
  vm_1,
)

pub const rt_beam_limiting_device_proximal_distance = Item(
  DataElementTag(0x300A, 0x0642),
  "RT Beam Limiting Device Proximal Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const rt_beam_limiting_device_distal_distance = Item(
  DataElementTag(0x300A, 0x0643),
  "RT Beam Limiting Device Distal Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const parallel_rt_beam_delimiter_device_orientation_label_code_sequence = Item(
  DataElementTag(0x300A, 0x0644),
  "Parallel RT Beam Delimiter Device Orientation Label Code Sequence",
  [Sequence],
  vm_1,
)

pub const beam_modifier_orientation_angle = Item(
  DataElementTag(0x300A, 0x0645),
  "Beam Modifier Orientation Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const fixed_rt_beam_delimiter_device_sequence = Item(
  DataElementTag(0x300A, 0x0646),
  "Fixed RT Beam Delimiter Device Sequence",
  [Sequence],
  vm_1,
)

pub const parallel_rt_beam_delimiter_device_sequence = Item(
  DataElementTag(0x300A, 0x0647),
  "Parallel RT Beam Delimiter Device Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_parallel_rt_beam_delimiters = Item(
  DataElementTag(0x300A, 0x0648),
  "Number of Parallel RT Beam Delimiters",
  [UnsignedShort],
  vm_1,
)

pub const parallel_rt_beam_delimiter_boundaries = Item(
  DataElementTag(0x300A, 0x0649),
  "Parallel RT Beam Delimiter Boundaries",
  [FloatingPointDouble],
  vm_2_to_n,
)

pub const parallel_rt_beam_delimiter_positions = Item(
  DataElementTag(0x300A, 0x064A),
  "Parallel RT Beam Delimiter Positions",
  [FloatingPointDouble],
  vm_2_to_n,
)

pub const rt_beam_limiting_device_offset = Item(
  DataElementTag(0x300A, 0x064B),
  "RT Beam Limiting Device Offset",
  [FloatingPointDouble],
  vm_2,
)

pub const rt_beam_delimiter_geometry_sequence = Item(
  DataElementTag(0x300A, 0x064C),
  "RT Beam Delimiter Geometry Sequence",
  [Sequence],
  vm_1,
)

pub const rt_beam_limiting_device_definition_sequence = Item(
  DataElementTag(0x300A, 0x064D),
  "RT Beam Limiting Device Definition Sequence",
  [Sequence],
  vm_1,
)

pub const parallel_rt_beam_delimiter_opening_mode = Item(
  DataElementTag(0x300A, 0x064E),
  "Parallel RT Beam Delimiter Opening Mode",
  [CodeString],
  vm_1,
)

pub const parallel_rt_beam_delimiter_leaf_mounting_side = Item(
  DataElementTag(0x300A, 0x064F),
  "Parallel RT Beam Delimiter Leaf Mounting Side",
  [CodeString],
  vm_1_to_n,
)

pub const patient_setup_uid = Item(
  DataElementTag(0x300A, 0x0650),
  "Patient Setup UID",
  [UniqueIdentifier],
  vm_1,
)

pub const wedge_definition_sequence = Item(
  DataElementTag(0x300A, 0x0651),
  "Wedge Definition Sequence",
  [Sequence],
  vm_1,
)

pub const radiation_beam_wedge_angle = Item(
  DataElementTag(0x300A, 0x0652),
  "Radiation Beam Wedge Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const radiation_beam_wedge_thin_edge_distance = Item(
  DataElementTag(0x300A, 0x0653),
  "Radiation Beam Wedge Thin Edge Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const radiation_beam_effective_wedge_angle = Item(
  DataElementTag(0x300A, 0x0654),
  "Radiation Beam Effective Wedge Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const number_of_wedge_positions = Item(
  DataElementTag(0x300A, 0x0655),
  "Number of Wedge Positions",
  [UnsignedShort],
  vm_1,
)

pub const rt_beam_limiting_device_opening_sequence = Item(
  DataElementTag(0x300A, 0x0656),
  "RT Beam Limiting Device Opening Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_rt_beam_limiting_device_openings = Item(
  DataElementTag(0x300A, 0x0657),
  "Number of RT Beam Limiting Device Openings",
  [UnsignedShort],
  vm_1,
)

pub const radiation_dosimeter_unit_sequence = Item(
  DataElementTag(0x300A, 0x0658),
  "Radiation Dosimeter Unit Sequence",
  [Sequence],
  vm_1,
)

pub const rt_device_distance_reference_location_code_sequence = Item(
  DataElementTag(0x300A, 0x0659),
  "RT Device Distance Reference Location Code Sequence",
  [Sequence],
  vm_1,
)

pub const radiation_device_configuration_and_commissioning_key_sequence = Item(
  DataElementTag(0x300A, 0x065A),
  "Radiation Device Configuration and Commissioning Key Sequence",
  [Sequence],
  vm_1,
)

pub const patient_support_position_parameter_sequence = Item(
  DataElementTag(0x300A, 0x065B),
  "Patient Support Position Parameter Sequence",
  [Sequence],
  vm_1,
)

pub const patient_support_position_specification_method = Item(
  DataElementTag(0x300A, 0x065C),
  "Patient Support Position Specification Method",
  [CodeString],
  vm_1,
)

pub const patient_support_position_device_parameter_sequence = Item(
  DataElementTag(0x300A, 0x065D),
  "Patient Support Position Device Parameter Sequence",
  [Sequence],
  vm_1,
)

pub const device_order_index = Item(
  DataElementTag(0x300A, 0x065E),
  "Device Order Index",
  [UnsignedShort],
  vm_1,
)

pub const patient_support_position_parameter_order_index = Item(
  DataElementTag(0x300A, 0x065F),
  "Patient Support Position Parameter Order Index",
  [UnsignedShort],
  vm_1,
)

pub const patient_support_position_device_tolerance_sequence = Item(
  DataElementTag(0x300A, 0x0660),
  "Patient Support Position Device Tolerance Sequence",
  [Sequence],
  vm_1,
)

pub const patient_support_position_tolerance_order_index = Item(
  DataElementTag(0x300A, 0x0661),
  "Patient Support Position Tolerance Order Index",
  [UnsignedShort],
  vm_1,
)

pub const compensator_definition_sequence = Item(
  DataElementTag(0x300A, 0x0662),
  "Compensator Definition Sequence",
  [Sequence],
  vm_1,
)

pub const compensator_map_orientation = Item(
  DataElementTag(0x300A, 0x0663),
  "Compensator Map Orientation",
  [CodeString],
  vm_1,
)

pub const compensator_proximal_thickness_map = Item(
  DataElementTag(0x300A, 0x0664),
  "Compensator Proximal Thickness Map",
  [OtherFloatString],
  vm_1,
)

pub const compensator_distal_thickness_map = Item(
  DataElementTag(0x300A, 0x0665),
  "Compensator Distal Thickness Map",
  [OtherFloatString],
  vm_1,
)

pub const compensator_base_plane_offset = Item(
  DataElementTag(0x300A, 0x0666),
  "Compensator Base Plane Offset",
  [FloatingPointDouble],
  vm_1,
)

pub const compensator_shape_fabrication_code_sequence = Item(
  DataElementTag(0x300A, 0x0667),
  "Compensator Shape Fabrication Code Sequence",
  [Sequence],
  vm_1,
)

pub const compensator_shape_sequence = Item(
  DataElementTag(0x300A, 0x0668),
  "Compensator Shape Sequence",
  [Sequence],
  vm_1,
)

pub const radiation_beam_compensator_milling_tool_diameter = Item(
  DataElementTag(0x300A, 0x0669),
  "Radiation Beam Compensator Milling Tool Diameter",
  [FloatingPointDouble],
  vm_1,
)

pub const block_definition_sequence = Item(
  DataElementTag(0x300A, 0x066A),
  "Block Definition Sequence",
  [Sequence],
  vm_1,
)

pub const block_edge_data = Item(
  DataElementTag(0x300A, 0x066B),
  "Block Edge Data",
  [OtherFloatString],
  vm_1,
)

pub const block_orientation = Item(
  DataElementTag(0x300A, 0x066C),
  "Block Orientation",
  [CodeString],
  vm_1,
)

pub const radiation_beam_block_thickness = Item(
  DataElementTag(0x300A, 0x066D),
  "Radiation Beam Block Thickness",
  [FloatingPointDouble],
  vm_1,
)

pub const radiation_beam_block_slab_thickness = Item(
  DataElementTag(0x300A, 0x066E),
  "Radiation Beam Block Slab Thickness",
  [FloatingPointDouble],
  vm_1,
)

pub const block_edge_data_sequence = Item(
  DataElementTag(0x300A, 0x066F),
  "Block Edge Data Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_rt_accessory_holders = Item(
  DataElementTag(0x300A, 0x0670),
  "Number of RT Accessory Holders",
  [UnsignedShort],
  vm_1,
)

pub const general_accessory_definition_sequence = Item(
  DataElementTag(0x300A, 0x0671),
  "General Accessory Definition Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_general_accessories = Item(
  DataElementTag(0x300A, 0x0672),
  "Number of General Accessories",
  [UnsignedShort],
  vm_1,
)

pub const bolus_definition_sequence = Item(
  DataElementTag(0x300A, 0x0673),
  "Bolus Definition Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_boluses = Item(
  DataElementTag(0x300A, 0x0674),
  "Number of Boluses",
  [UnsignedShort],
  vm_1,
)

pub const equipment_frame_of_reference_uid = Item(
  DataElementTag(0x300A, 0x0675),
  "Equipment Frame of Reference UID",
  [UniqueIdentifier],
  vm_1,
)

pub const equipment_frame_of_reference_description = Item(
  DataElementTag(0x300A, 0x0676),
  "Equipment Frame of Reference Description",
  [ShortText],
  vm_1,
)

pub const equipment_reference_point_coordinates_sequence = Item(
  DataElementTag(0x300A, 0x0677),
  "Equipment Reference Point Coordinates Sequence",
  [Sequence],
  vm_1,
)

pub const equipment_reference_point_code_sequence = Item(
  DataElementTag(0x300A, 0x0678),
  "Equipment Reference Point Code Sequence",
  [Sequence],
  vm_1,
)

pub const rt_beam_limiting_device_angle = Item(
  DataElementTag(0x300A, 0x0679),
  "RT Beam Limiting Device Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const source_roll_angle = Item(
  DataElementTag(0x300A, 0x067A),
  "Source Roll Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const radiation_generation_mode_sequence = Item(
  DataElementTag(0x300A, 0x067B),
  "Radiation GenerationMode Sequence",
  [Sequence],
  vm_1,
)

pub const radiation_generation_mode_label = Item(
  DataElementTag(0x300A, 0x067C),
  "Radiation GenerationMode Label",
  [ShortString],
  vm_1,
)

pub const radiation_generation_mode_description = Item(
  DataElementTag(0x300A, 0x067D),
  "Radiation GenerationMode Description",
  [ShortText],
  vm_1,
)

pub const radiation_generation_mode_machine_code_sequence = Item(
  DataElementTag(0x300A, 0x067E),
  "Radiation GenerationMode Machine Code Sequence",
  [Sequence],
  vm_1,
)

pub const radiation_type_code_sequence = Item(
  DataElementTag(0x300A, 0x067F),
  "Radiation Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const nominal_energy = Item(
  DataElementTag(0x300A, 0x0680),
  "Nominal Energy",
  [DecimalString],
  vm_1,
)

pub const minimum_nominal_energy = Item(
  DataElementTag(0x300A, 0x0681),
  "Minimum Nominal Energy",
  [DecimalString],
  vm_1,
)

pub const maximum_nominal_energy = Item(
  DataElementTag(0x300A, 0x0682),
  "Maximum Nominal Energy",
  [DecimalString],
  vm_1,
)

pub const radiation_fluence_modifier_code_sequence = Item(
  DataElementTag(0x300A, 0x0683),
  "Radiation Fluence Modifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const energy_unit_code_sequence = Item(
  DataElementTag(0x300A, 0x0684),
  "Energy Unit Code Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_radiation_generation_modes = Item(
  DataElementTag(0x300A, 0x0685),
  "Number of Radiation GenerationModes",
  [UnsignedShort],
  vm_1,
)

pub const patient_support_devices_sequence = Item(
  DataElementTag(0x300A, 0x0686),
  "Patient Support Devices Sequence",
  [Sequence],
  vm_1,
)

pub const number_of_patient_support_devices = Item(
  DataElementTag(0x300A, 0x0687),
  "Number of Patient Support Devices",
  [UnsignedShort],
  vm_1,
)

pub const rt_beam_modifier_definition_distance = Item(
  DataElementTag(0x300A, 0x0688),
  "RT Beam Modifier Definition Distance",
  [FloatingPointDouble],
  vm_1,
)

pub const beam_area_limit_sequence = Item(
  DataElementTag(0x300A, 0x0689),
  "Beam Area Limit Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_rt_prescription_sequence = Item(
  DataElementTag(0x300A, 0x068A),
  "Referenced RT Prescription Sequence",
  [Sequence],
  vm_1,
)

pub const dose_value_interpretation = Item(
  DataElementTag(0x300A, 0x068B),
  "Dose Value Interpretation",
  [CodeString],
  vm_1,
)

pub const treatment_session_uid = Item(
  DataElementTag(0x300A, 0x0700),
  "Treatment Session UID",
  [UniqueIdentifier],
  vm_1,
)

pub const rt_radiation_usage = Item(
  DataElementTag(0x300A, 0x0701),
  "RT Radiation Usage",
  [CodeString],
  vm_1,
)

pub const referenced_rt_radiation_set_sequence = Item(
  DataElementTag(0x300A, 0x0702),
  "Referenced RT Radiation Set Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_rt_radiation_record_sequence = Item(
  DataElementTag(0x300A, 0x0703),
  "Referenced RT Radiation Record Sequence",
  [Sequence],
  vm_1,
)

pub const rt_radiation_set_delivery_number = Item(
  DataElementTag(0x300A, 0x0704),
  "RT Radiation Set Delivery Number",
  [UnsignedShort],
  vm_1,
)

pub const clinical_fraction_number = Item(
  DataElementTag(0x300A, 0x0705),
  "Clinical Fraction Number",
  [UnsignedShort],
  vm_1,
)

pub const rt_treatment_fraction_completion_status = Item(
  DataElementTag(0x300A, 0x0706),
  "RT Treatment Fraction Completion Status",
  [CodeString],
  vm_1,
)

pub const rt_radiation_set_usage = Item(
  DataElementTag(0x300A, 0x0707),
  "RT Radiation Set Usage",
  [CodeString],
  vm_1,
)

pub const treatment_delivery_continuation_flag = Item(
  DataElementTag(0x300A, 0x0708),
  "Treatment Delivery Continuation Flag",
  [CodeString],
  vm_1,
)

pub const treatment_record_content_origin = Item(
  DataElementTag(0x300A, 0x0709),
  "Treatment Record Content Origin",
  [CodeString],
  vm_1,
)

pub const rt_treatment_termination_status = Item(
  DataElementTag(0x300A, 0x0714),
  "RT Treatment Termination Status",
  [CodeString],
  vm_1,
)

pub const rt_treatment_termination_reason_code_sequence = Item(
  DataElementTag(0x300A, 0x0715),
  "RT Treatment Termination Reason Code Sequence",
  [Sequence],
  vm_1,
)

pub const machine_specific_treatment_termination_code_sequence = Item(
  DataElementTag(0x300A, 0x0716),
  "Machine-Specific Treatment Termination Code Sequence",
  [Sequence],
  vm_1,
)

pub const rt_radiation_salvage_record_control_point_sequence = Item(
  DataElementTag(0x300A, 0x0722),
  "RT Radiation Salvage Record Control Point Sequence",
  [Sequence],
  vm_1,
)

pub const starting_meterset_value_known_flag = Item(
  DataElementTag(0x300A, 0x0723),
  "Starting Meterset Value Known Flag",
  [CodeString],
  vm_1,
)

pub const treatment_termination_description = Item(
  DataElementTag(0x300A, 0x0730),
  "Treatment Termination Description",
  [ShortText],
  vm_1,
)

pub const treatment_tolerance_violation_sequence = Item(
  DataElementTag(0x300A, 0x0731),
  "Treatment Tolerance Violation Sequence",
  [Sequence],
  vm_1,
)

pub const treatment_tolerance_violation_category = Item(
  DataElementTag(0x300A, 0x0732),
  "Treatment Tolerance Violation Category",
  [CodeString],
  vm_1,
)

pub const treatment_tolerance_violation_attribute_sequence = Item(
  DataElementTag(0x300A, 0x0733),
  "Treatment Tolerance Violation Attribute Sequence",
  [Sequence],
  vm_1,
)

pub const treatment_tolerance_violation_description = Item(
  DataElementTag(0x300A, 0x0734),
  "Treatment Tolerance Violation Description",
  [ShortText],
  vm_1,
)

pub const treatment_tolerance_violation_identification = Item(
  DataElementTag(0x300A, 0x0735),
  "Treatment Tolerance Violation Identification",
  [ShortText],
  vm_1,
)

pub const treatment_tolerance_violation_date_time = Item(
  DataElementTag(0x300A, 0x0736),
  "Treatment Tolerance Violation DateTime",
  [DateTime],
  vm_1,
)

pub const recorded_rt_control_point_date_time = Item(
  DataElementTag(0x300A, 0x073A),
  "Recorded RT Control Point DateTime",
  [DateTime],
  vm_1,
)

pub const referenced_radiation_rt_control_point_index = Item(
  DataElementTag(0x300A, 0x073B),
  "Referenced Radiation RT Control Point Index",
  [UnsignedShort],
  vm_1,
)

pub const alternate_value_sequence = Item(
  DataElementTag(0x300A, 0x073E),
  "Alternate Value Sequence",
  [Sequence],
  vm_1,
)

pub const confirmation_sequence = Item(
  DataElementTag(0x300A, 0x073F),
  "Confirmation Sequence",
  [Sequence],
  vm_1,
)

pub const interlock_sequence = Item(
  DataElementTag(0x300A, 0x0740),
  "Interlock Sequence",
  [Sequence],
  vm_1,
)

pub const interlock_date_time = Item(
  DataElementTag(0x300A, 0x0741),
  "Interlock DateTime",
  [DateTime],
  vm_1,
)

pub const interlock_description = Item(
  DataElementTag(0x300A, 0x0742),
  "Interlock Description",
  [ShortText],
  vm_1,
)

pub const interlock_originating_device_sequence = Item(
  DataElementTag(0x300A, 0x0743),
  "Interlock Originating Device Sequence",
  [Sequence],
  vm_1,
)

pub const interlock_code_sequence = Item(
  DataElementTag(0x300A, 0x0744),
  "Interlock Code Sequence",
  [Sequence],
  vm_1,
)

pub const interlock_resolution_code_sequence = Item(
  DataElementTag(0x300A, 0x0745),
  "Interlock Resolution Code Sequence",
  [Sequence],
  vm_1,
)

pub const interlock_resolution_user_sequence = Item(
  DataElementTag(0x300A, 0x0746),
  "Interlock Resolution User Sequence",
  [Sequence],
  vm_1,
)

pub const override_date_time = Item(
  DataElementTag(0x300A, 0x0760),
  "Override DateTime",
  [DateTime],
  vm_1,
)

pub const treatment_tolerance_violation_type_code_sequence = Item(
  DataElementTag(0x300A, 0x0761),
  "Treatment Tolerance Violation Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const treatment_tolerance_violation_cause_code_sequence = Item(
  DataElementTag(0x300A, 0x0762),
  "Treatment Tolerance Violation Cause Code Sequence",
  [Sequence],
  vm_1,
)

pub const measured_meterset_to_dose_mapping_sequence = Item(
  DataElementTag(0x300A, 0x0772),
  "Measured Meterset to Dose Mapping Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_expected_in_vivo_measurement_value_index = Item(
  DataElementTag(0x300A, 0x0773),
  "Referenced Expected In-Vivo Measurement Value Index",
  [UnsignedShort],
  vm_1,
)

pub const dose_measurement_device_code_sequence = Item(
  DataElementTag(0x300A, 0x0774),
  "Dose Measurement Device Code Sequence",
  [Sequence],
  vm_1,
)

pub const additional_parameter_recording_instance_sequence = Item(
  DataElementTag(0x300A, 0x0780),
  "Additional Parameter Recording Instance Sequence",
  [Sequence],
  vm_1,
)

pub const interlock_origin_description = Item(
  DataElementTag(0x300A, 0x0783),
  "Interlock Origin Description",
  [ShortText],
  vm_1,
)

pub const rt_patient_position_scope_sequence = Item(
  DataElementTag(0x300A, 0x0784),
  "RT Patient Position Scope Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_treatment_position_group_uid = Item(
  DataElementTag(0x300A, 0x0785),
  "Referenced Treatment Position Group UID",
  [UniqueIdentifier],
  vm_1,
)

pub const radiation_order_index = Item(
  DataElementTag(0x300A, 0x0786),
  "Radiation Order Index",
  [UnsignedShort],
  vm_1,
)

pub const omitted_radiation_sequence = Item(
  DataElementTag(0x300A, 0x0787),
  "Omitted Radiation Sequence",
  [Sequence],
  vm_1,
)

pub const reason_for_omission_code_sequence = Item(
  DataElementTag(0x300A, 0x0788),
  "Reason for Omission Code Sequence",
  [Sequence],
  vm_1,
)

pub const rt_delivery_start_patient_position_sequence = Item(
  DataElementTag(0x300A, 0x0789),
  "RT Delivery Start Patient Position Sequence",
  [Sequence],
  vm_1,
)

pub const rt_treatment_preparation_patient_position_sequence = Item(
  DataElementTag(0x300A, 0x078A),
  "RT Treatment Preparation Patient Position Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_rt_treatment_preparation_sequence = Item(
  DataElementTag(0x300A, 0x078B),
  "Referenced RT Treatment Preparation Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_patient_setup_photo_sequence = Item(
  DataElementTag(0x300A, 0x078C),
  "Referenced Patient Setup Photo Sequence",
  [Sequence],
  vm_1,
)

pub const patient_treatment_preparation_method_code_sequence = Item(
  DataElementTag(0x300A, 0x078D),
  "Patient Treatment Preparation Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const patient_treatment_preparation_procedure_parameter_description = Item(
  DataElementTag(0x300A, 0x078E),
  "Patient Treatment Preparation Procedure Parameter Description",
  [LongText],
  vm_1,
)

pub const patient_treatment_preparation_device_sequence = Item(
  DataElementTag(0x300A, 0x078F),
  "Patient Treatment Preparation Device Sequence",
  [Sequence],
  vm_1,
)

pub const patient_treatment_preparation_procedure_sequence = Item(
  DataElementTag(0x300A, 0x0790),
  "Patient Treatment Preparation Procedure Sequence",
  [Sequence],
  vm_1,
)

pub const patient_treatment_preparation_procedure_code_sequence = Item(
  DataElementTag(0x300A, 0x0791),
  "Patient Treatment Preparation Procedure Code Sequence",
  [Sequence],
  vm_1,
)

pub const patient_treatment_preparation_method_description = Item(
  DataElementTag(0x300A, 0x0792),
  "Patient Treatment Preparation Method Description",
  [LongText],
  vm_1,
)

pub const patient_treatment_preparation_procedure_parameter_sequence = Item(
  DataElementTag(0x300A, 0x0793),
  "Patient Treatment Preparation Procedure Parameter Sequence",
  [Sequence],
  vm_1,
)

pub const patient_setup_photo_description = Item(
  DataElementTag(0x300A, 0x0794),
  "Patient Setup Photo Description",
  [LongText],
  vm_1,
)

pub const patient_treatment_preparation_procedure_index = Item(
  DataElementTag(0x300A, 0x0795),
  "Patient Treatment Preparation Procedure Index",
  [UnsignedShort],
  vm_1,
)

pub const referenced_patient_setup_procedure_index = Item(
  DataElementTag(0x300A, 0x0796),
  "Referenced Patient Setup Procedure Index",
  [UnsignedShort],
  vm_1,
)

pub const rt_radiation_task_sequence = Item(
  DataElementTag(0x300A, 0x0797),
  "RT Radiation Task Sequence",
  [Sequence],
  vm_1,
)

pub const rt_patient_position_displacement_sequence = Item(
  DataElementTag(0x300A, 0x0798),
  "RT Patient Position Displacement Sequence",
  [Sequence],
  vm_1,
)

pub const rt_patient_position_sequence = Item(
  DataElementTag(0x300A, 0x0799),
  "RT Patient Position Sequence",
  [Sequence],
  vm_1,
)

pub const displacement_reference_label = Item(
  DataElementTag(0x300A, 0x079A),
  "Displacement Reference Label",
  [LongString],
  vm_1,
)

pub const displacement_matrix = Item(
  DataElementTag(0x300A, 0x079B),
  "Displacement Matrix",
  [FloatingPointDouble],
  ValueMultiplicity(16, Some(16)),
)

pub const patient_support_displacement_sequence = Item(
  DataElementTag(0x300A, 0x079C),
  "Patient Support Displacement Sequence",
  [Sequence],
  vm_1,
)

pub const displacement_reference_location_code_sequence = Item(
  DataElementTag(0x300A, 0x079D),
  "Displacement Reference Location Code Sequence",
  [Sequence],
  vm_1,
)

pub const rt_radiation_set_delivery_usage = Item(
  DataElementTag(0x300A, 0x079E),
  "RT Radiation Set Delivery Usage",
  [CodeString],
  vm_1,
)

pub const referenced_rt_plan_sequence = Item(
  DataElementTag(0x300C, 0x0002),
  "Referenced RT Plan Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_beam_sequence = Item(
  DataElementTag(0x300C, 0x0004),
  "Referenced Beam Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_beam_number = Item(
  DataElementTag(0x300C, 0x0006),
  "Referenced Beam Number",
  [IntegerString],
  vm_1,
)

pub const referenced_reference_image_number = Item(
  DataElementTag(0x300C, 0x0007),
  "Referenced Reference Image Number",
  [IntegerString],
  vm_1,
)

pub const start_cumulative_meterset_weight = Item(
  DataElementTag(0x300C, 0x0008),
  "Start Cumulative Meterset Weight",
  [DecimalString],
  vm_1,
)

pub const end_cumulative_meterset_weight = Item(
  DataElementTag(0x300C, 0x0009),
  "End Cumulative Meterset Weight",
  [DecimalString],
  vm_1,
)

pub const referenced_brachy_application_setup_sequence = Item(
  DataElementTag(0x300C, 0x000A),
  "Referenced Brachy Application Setup Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_brachy_application_setup_number = Item(
  DataElementTag(0x300C, 0x000C),
  "Referenced Brachy Application Setup Number",
  [IntegerString],
  vm_1,
)

pub const referenced_source_number = Item(
  DataElementTag(0x300C, 0x000E),
  "Referenced Source Number",
  [IntegerString],
  vm_1,
)

pub const referenced_fraction_group_sequence = Item(
  DataElementTag(0x300C, 0x0020),
  "Referenced Fraction Group Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_fraction_group_number = Item(
  DataElementTag(0x300C, 0x0022),
  "Referenced Fraction Group Number",
  [IntegerString],
  vm_1,
)

pub const referenced_verification_image_sequence = Item(
  DataElementTag(0x300C, 0x0040),
  "Referenced Verification Image Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_reference_image_sequence = Item(
  DataElementTag(0x300C, 0x0042),
  "Referenced Reference Image Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_dose_reference_sequence = Item(
  DataElementTag(0x300C, 0x0050),
  "Referenced Dose Reference Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_dose_reference_number = Item(
  DataElementTag(0x300C, 0x0051),
  "Referenced Dose Reference Number",
  [IntegerString],
  vm_1,
)

pub const brachy_referenced_dose_reference_sequence = Item(
  DataElementTag(0x300C, 0x0055),
  "Brachy Referenced Dose Reference Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_structure_set_sequence = Item(
  DataElementTag(0x300C, 0x0060),
  "Referenced Structure Set Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_patient_setup_number = Item(
  DataElementTag(0x300C, 0x006A),
  "Referenced Patient Setup Number",
  [IntegerString],
  vm_1,
)

pub const referenced_dose_sequence = Item(
  DataElementTag(0x300C, 0x0080),
  "Referenced Dose Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_tolerance_table_number = Item(
  DataElementTag(0x300C, 0x00A0),
  "Referenced Tolerance Table Number",
  [IntegerString],
  vm_1,
)

pub const referenced_bolus_sequence = Item(
  DataElementTag(0x300C, 0x00B0),
  "Referenced Bolus Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_wedge_number = Item(
  DataElementTag(0x300C, 0x00C0),
  "Referenced Wedge Number",
  [IntegerString],
  vm_1,
)

pub const referenced_compensator_number = Item(
  DataElementTag(0x300C, 0x00D0),
  "Referenced Compensator Number",
  [IntegerString],
  vm_1,
)

pub const referenced_block_number = Item(
  DataElementTag(0x300C, 0x00E0),
  "Referenced Block Number",
  [IntegerString],
  vm_1,
)

pub const referenced_control_point_index = Item(
  DataElementTag(0x300C, 0x00F0),
  "Referenced Control Point Index",
  [IntegerString],
  vm_1,
)

pub const referenced_control_point_sequence = Item(
  DataElementTag(0x300C, 0x00F2),
  "Referenced Control Point Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_start_control_point_index = Item(
  DataElementTag(0x300C, 0x00F4),
  "Referenced Start Control Point Index",
  [IntegerString],
  vm_1,
)

pub const referenced_stop_control_point_index = Item(
  DataElementTag(0x300C, 0x00F6),
  "Referenced Stop Control Point Index",
  [IntegerString],
  vm_1,
)

pub const referenced_range_shifter_number = Item(
  DataElementTag(0x300C, 0x0100),
  "Referenced Range Shifter Number",
  [IntegerString],
  vm_1,
)

pub const referenced_lateral_spreading_device_number = Item(
  DataElementTag(0x300C, 0x0102),
  "Referenced Lateral Spreading Device Number",
  [IntegerString],
  vm_1,
)

pub const referenced_range_modulator_number = Item(
  DataElementTag(0x300C, 0x0104),
  "Referenced Range Modulator Number",
  [IntegerString],
  vm_1,
)

pub const omitted_beam_task_sequence = Item(
  DataElementTag(0x300C, 0x0111),
  "Omitted Beam Task Sequence",
  [Sequence],
  vm_1,
)

pub const reason_for_omission = Item(
  DataElementTag(0x300C, 0x0112),
  "Reason for Omission",
  [CodeString],
  vm_1,
)

pub const reason_for_omission_description = Item(
  DataElementTag(0x300C, 0x0113),
  "Reason for Omission Description",
  [LongString],
  vm_1,
)

pub const prescription_overview_sequence = Item(
  DataElementTag(0x300C, 0x0114),
  "Prescription Overview Sequence",
  [Sequence],
  vm_1,
)

pub const total_prescription_dose = Item(
  DataElementTag(0x300C, 0x0115),
  "Total Prescription Dose",
  [FloatingPointSingle],
  vm_1,
)

pub const plan_overview_sequence = Item(
  DataElementTag(0x300C, 0x0116),
  "Plan Overview Sequence",
  [Sequence],
  vm_1,
)

pub const plan_overview_index = Item(
  DataElementTag(0x300C, 0x0117),
  "Plan Overview Index",
  [UnsignedShort],
  vm_1,
)

pub const referenced_plan_overview_index = Item(
  DataElementTag(0x300C, 0x0118),
  "Referenced Plan Overview Index",
  [UnsignedShort],
  vm_1,
)

pub const number_of_fractions_included = Item(
  DataElementTag(0x300C, 0x0119),
  "Number of Fractions Included",
  [UnsignedShort],
  vm_1,
)

pub const dose_calibration_conditions_sequence = Item(
  DataElementTag(0x300C, 0x0120),
  "Dose Calibration Conditions Sequence",
  [Sequence],
  vm_1,
)

pub const absorbed_dose_to_meterset_ratio = Item(
  DataElementTag(0x300C, 0x0121),
  "Absorbed Dose to Meterset Ratio",
  [FloatingPointDouble],
  vm_1,
)

pub const delineated_radiation_field_size = Item(
  DataElementTag(0x300C, 0x0122),
  "Delineated Radiation Field Size",
  [FloatingPointDouble],
  vm_2,
)

pub const dose_calibration_conditions_verified_flag = Item(
  DataElementTag(0x300C, 0x0123),
  "Dose Calibration Conditions Verified Flag",
  [CodeString],
  vm_1,
)

pub const calibration_reference_point_depth = Item(
  DataElementTag(0x300C, 0x0124),
  "Calibration Reference Point Depth",
  [FloatingPointDouble],
  vm_1,
)

pub const gating_beam_hold_transition_sequence = Item(
  DataElementTag(0x300C, 0x0125),
  "Gating Beam Hold Transition Sequence",
  [Sequence],
  vm_1,
)

pub const beam_hold_transition = Item(
  DataElementTag(0x300C, 0x0126),
  "Beam Hold Transition",
  [CodeString],
  vm_1,
)

pub const beam_hold_transition_date_time = Item(
  DataElementTag(0x300C, 0x0127),
  "Beam Hold Transition DateTime",
  [DateTime],
  vm_1,
)

pub const beam_hold_originating_device_sequence = Item(
  DataElementTag(0x300C, 0x0128),
  "Beam Hold Originating Device Sequence",
  [Sequence],
  vm_1,
)

pub const beam_hold_transition_trigger_source = Item(
  DataElementTag(0x300C, 0x0129),
  "Beam Hold Transition Trigger Source",
  [CodeString],
  vm_1,
)

pub const approval_status = Item(
  DataElementTag(0x300E, 0x0002),
  "Approval Status",
  [CodeString],
  vm_1,
)

pub const review_date = Item(
  DataElementTag(0x300E, 0x0004),
  "Review Date",
  [Date],
  vm_1,
)

pub const review_time = Item(
  DataElementTag(0x300E, 0x0005),
  "Review Time",
  [Time],
  vm_1,
)

pub const reviewer_name = Item(
  DataElementTag(0x300E, 0x0008),
  "Reviewer Name",
  [PersonName],
  vm_1,
)

pub const radiobiological_dose_effect_sequence = Item(
  DataElementTag(0x3010, 0x0001),
  "Radiobiological Dose Effect Sequence",
  [Sequence],
  vm_1,
)

pub const radiobiological_dose_effect_flag = Item(
  DataElementTag(0x3010, 0x0002),
  "Radiobiological Dose Effect Flag",
  [CodeString],
  vm_1,
)

pub const effective_dose_calculation_method_category_code_sequence = Item(
  DataElementTag(0x3010, 0x0003),
  "Effective Dose Calculation Method Category Code Sequence",
  [Sequence],
  vm_1,
)

pub const effective_dose_calculation_method_code_sequence = Item(
  DataElementTag(0x3010, 0x0004),
  "Effective Dose Calculation Method Code Sequence",
  [Sequence],
  vm_1,
)

pub const effective_dose_calculation_method_description = Item(
  DataElementTag(0x3010, 0x0005),
  "Effective Dose Calculation Method Description",
  [LongString],
  vm_1,
)

pub const conceptual_volume_uid = Item(
  DataElementTag(0x3010, 0x0006),
  "Conceptual Volume UID",
  [UniqueIdentifier],
  vm_1,
)

pub const originating_sop_instance_reference_sequence = Item(
  DataElementTag(0x3010, 0x0007),
  "Originating SOP Instance Reference Sequence",
  [Sequence],
  vm_1,
)

pub const conceptual_volume_constituent_sequence = Item(
  DataElementTag(0x3010, 0x0008),
  "Conceptual Volume Constituent Sequence",
  [Sequence],
  vm_1,
)

pub const equivalent_conceptual_volume_instance_reference_sequence = Item(
  DataElementTag(0x3010, 0x0009),
  "Equivalent Conceptual Volume Instance Reference Sequence",
  [Sequence],
  vm_1,
)

pub const equivalent_conceptual_volumes_sequence = Item(
  DataElementTag(0x3010, 0x000A),
  "Equivalent Conceptual Volumes Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_conceptual_volume_uid = Item(
  DataElementTag(0x3010, 0x000B),
  "Referenced Conceptual Volume UID",
  [UniqueIdentifier],
  vm_1,
)

pub const conceptual_volume_combination_expression = Item(
  DataElementTag(0x3010, 0x000C),
  "Conceptual Volume Combination Expression",
  [UnlimitedText],
  vm_1,
)

pub const conceptual_volume_constituent_index = Item(
  DataElementTag(0x3010, 0x000D),
  "Conceptual Volume Constituent Index",
  [UnsignedShort],
  vm_1,
)

pub const conceptual_volume_combination_flag = Item(
  DataElementTag(0x3010, 0x000E),
  "Conceptual Volume Combination Flag",
  [CodeString],
  vm_1,
)

pub const conceptual_volume_combination_description = Item(
  DataElementTag(0x3010, 0x000F),
  "Conceptual Volume Combination Description",
  [ShortText],
  vm_1,
)

pub const conceptual_volume_segmentation_defined_flag = Item(
  DataElementTag(0x3010, 0x0010),
  "Conceptual Volume Segmentation Defined Flag",
  [CodeString],
  vm_1,
)

pub const conceptual_volume_segmentation_reference_sequence = Item(
  DataElementTag(0x3010, 0x0011),
  "Conceptual Volume Segmentation Reference Sequence",
  [Sequence],
  vm_1,
)

pub const conceptual_volume_constituent_segmentation_reference_sequence = Item(
  DataElementTag(0x3010, 0x0012),
  "Conceptual Volume Constituent Segmentation Reference Sequence",
  [Sequence],
  vm_1,
)

pub const constituent_conceptual_volume_uid = Item(
  DataElementTag(0x3010, 0x0013),
  "Constituent Conceptual Volume UID",
  [UniqueIdentifier],
  vm_1,
)

pub const derivation_conceptual_volume_sequence = Item(
  DataElementTag(0x3010, 0x0014),
  "Derivation Conceptual Volume Sequence",
  [Sequence],
  vm_1,
)

pub const source_conceptual_volume_uid = Item(
  DataElementTag(0x3010, 0x0015),
  "Source Conceptual Volume UID",
  [UniqueIdentifier],
  vm_1,
)

pub const conceptual_volume_derivation_algorithm_sequence = Item(
  DataElementTag(0x3010, 0x0016),
  "Conceptual Volume Derivation Algorithm Sequence",
  [Sequence],
  vm_1,
)

pub const conceptual_volume_description = Item(
  DataElementTag(0x3010, 0x0017),
  "Conceptual Volume Description",
  [ShortText],
  vm_1,
)

pub const source_conceptual_volume_sequence = Item(
  DataElementTag(0x3010, 0x0018),
  "Source Conceptual Volume Sequence",
  [Sequence],
  vm_1,
)

pub const author_identification_sequence = Item(
  DataElementTag(0x3010, 0x0019),
  "Author Identification Sequence",
  [Sequence],
  vm_1,
)

pub const manufacturer_model_version = Item(
  DataElementTag(0x3010, 0x001A),
  "Manufacturer's Model Version",
  [LongString],
  vm_1,
)

pub const device_alternate_identifier = Item(
  DataElementTag(0x3010, 0x001B),
  "Device Alternate Identifier",
  [UnlimitedCharacters],
  vm_1,
)

pub const device_alternate_identifier_type = Item(
  DataElementTag(0x3010, 0x001C),
  "Device Alternate Identifier Type",
  [CodeString],
  vm_1,
)

pub const device_alternate_identifier_format = Item(
  DataElementTag(0x3010, 0x001D),
  "Device Alternate Identifier Format",
  [LongText],
  vm_1,
)

pub const segmentation_creation_template_label = Item(
  DataElementTag(0x3010, 0x001E),
  "Segmentation Creation Template Label",
  [LongString],
  vm_1,
)

pub const segmentation_template_uid = Item(
  DataElementTag(0x3010, 0x001F),
  "Segmentation Template UID",
  [UniqueIdentifier],
  vm_1,
)

pub const referenced_segment_reference_index = Item(
  DataElementTag(0x3010, 0x0020),
  "Referenced Segment Reference Index",
  [UnsignedShort],
  vm_1,
)

pub const segment_reference_sequence = Item(
  DataElementTag(0x3010, 0x0021),
  "Segment Reference Sequence",
  [Sequence],
  vm_1,
)

pub const segment_reference_index = Item(
  DataElementTag(0x3010, 0x0022),
  "Segment Reference Index",
  [UnsignedShort],
  vm_1,
)

pub const direct_segment_reference_sequence = Item(
  DataElementTag(0x3010, 0x0023),
  "Direct Segment Reference Sequence",
  [Sequence],
  vm_1,
)

pub const combination_segment_reference_sequence = Item(
  DataElementTag(0x3010, 0x0024),
  "Combination Segment Reference Sequence",
  [Sequence],
  vm_1,
)

pub const conceptual_volume_sequence = Item(
  DataElementTag(0x3010, 0x0025),
  "Conceptual Volume Sequence",
  [Sequence],
  vm_1,
)

pub const segmented_rt_accessory_device_sequence = Item(
  DataElementTag(0x3010, 0x0026),
  "Segmented RT Accessory Device Sequence",
  [Sequence],
  vm_1,
)

pub const segment_characteristics_sequence = Item(
  DataElementTag(0x3010, 0x0027),
  "Segment Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const related_segment_characteristics_sequence = Item(
  DataElementTag(0x3010, 0x0028),
  "Related Segment Characteristics Sequence",
  [Sequence],
  vm_1,
)

pub const segment_characteristics_precedence = Item(
  DataElementTag(0x3010, 0x0029),
  "Segment Characteristics Precedence",
  [UnsignedShort],
  vm_1,
)

pub const rt_segment_annotation_sequence = Item(
  DataElementTag(0x3010, 0x002A),
  "RT Segment Annotation Sequence",
  [Sequence],
  vm_1,
)

pub const segment_annotation_category_code_sequence = Item(
  DataElementTag(0x3010, 0x002B),
  "Segment Annotation Category Code Sequence",
  [Sequence],
  vm_1,
)

pub const segment_annotation_type_code_sequence = Item(
  DataElementTag(0x3010, 0x002C),
  "Segment Annotation Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const device_label = Item(
  DataElementTag(0x3010, 0x002D),
  "Device Label",
  [LongString],
  vm_1,
)

pub const device_type_code_sequence = Item(
  DataElementTag(0x3010, 0x002E),
  "Device Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const segment_annotation_type_modifier_code_sequence = Item(
  DataElementTag(0x3010, 0x002F),
  "Segment Annotation Type Modifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const patient_equipment_relationship_code_sequence = Item(
  DataElementTag(0x3010, 0x0030),
  "Patient Equipment Relationship Code Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_fiducials_uid = Item(
  DataElementTag(0x3010, 0x0031),
  "Referenced Fiducials UID",
  [UniqueIdentifier],
  vm_1,
)

pub const patient_treatment_orientation_sequence = Item(
  DataElementTag(0x3010, 0x0032),
  "Patient Treatment Orientation Sequence",
  [Sequence],
  vm_1,
)

pub const user_content_label = Item(
  DataElementTag(0x3010, 0x0033),
  "User Content Label",
  [ShortString],
  vm_1,
)

pub const user_content_long_label = Item(
  DataElementTag(0x3010, 0x0034),
  "User Content Long Label",
  [LongString],
  vm_1,
)

pub const entity_label = Item(
  DataElementTag(0x3010, 0x0035),
  "Entity Label",
  [ShortString],
  vm_1,
)

pub const entity_name = Item(
  DataElementTag(0x3010, 0x0036),
  "Entity Name",
  [LongString],
  vm_1,
)

pub const entity_description = Item(
  DataElementTag(0x3010, 0x0037),
  "Entity Description",
  [ShortText],
  vm_1,
)

pub const entity_long_label = Item(
  DataElementTag(0x3010, 0x0038),
  "Entity Long Label",
  [LongString],
  vm_1,
)

pub const device_index = Item(
  DataElementTag(0x3010, 0x0039),
  "Device Index",
  [UnsignedShort],
  vm_1,
)

pub const rt_treatment_phase_index = Item(
  DataElementTag(0x3010, 0x003A),
  "RT Treatment Phase Index",
  [UnsignedShort],
  vm_1,
)

pub const rt_treatment_phase_uid = Item(
  DataElementTag(0x3010, 0x003B),
  "RT Treatment Phase UID",
  [UniqueIdentifier],
  vm_1,
)

pub const rt_prescription_index = Item(
  DataElementTag(0x3010, 0x003C),
  "RT Prescription Index",
  [UnsignedShort],
  vm_1,
)

pub const rt_segment_annotation_index = Item(
  DataElementTag(0x3010, 0x003D),
  "RT Segment Annotation Index",
  [UnsignedShort],
  vm_1,
)

pub const basis_rt_treatment_phase_index = Item(
  DataElementTag(0x3010, 0x003E),
  "Basis RT Treatment Phase Index",
  [UnsignedShort],
  vm_1,
)

pub const related_rt_treatment_phase_index = Item(
  DataElementTag(0x3010, 0x003F),
  "Related RT Treatment Phase Index",
  [UnsignedShort],
  vm_1,
)

pub const referenced_rt_treatment_phase_index = Item(
  DataElementTag(0x3010, 0x0040),
  "Referenced RT Treatment Phase Index",
  [UnsignedShort],
  vm_1,
)

pub const referenced_rt_prescription_index = Item(
  DataElementTag(0x3010, 0x0041),
  "Referenced RT Prescription Index",
  [UnsignedShort],
  vm_1,
)

pub const referenced_parent_rt_prescription_index = Item(
  DataElementTag(0x3010, 0x0042),
  "Referenced Parent RT Prescription Index",
  [UnsignedShort],
  vm_1,
)

pub const manufacturer_device_identifier = Item(
  DataElementTag(0x3010, 0x0043),
  "Manufacturer's Device Identifier",
  [ShortText],
  vm_1,
)

pub const instance_level_referenced_performed_procedure_step_sequence = Item(
  DataElementTag(0x3010, 0x0044),
  "Instance-Level Referenced Performed Procedure Step Sequence",
  [Sequence],
  vm_1,
)

pub const rt_treatment_phase_intent_presence_flag = Item(
  DataElementTag(0x3010, 0x0045),
  "RT Treatment Phase Intent Presence Flag",
  [CodeString],
  vm_1,
)

pub const radiotherapy_treatment_type = Item(
  DataElementTag(0x3010, 0x0046),
  "Radiotherapy Treatment Type",
  [CodeString],
  vm_1,
)

pub const teletherapy_radiation_type = Item(
  DataElementTag(0x3010, 0x0047),
  "Teletherapy Radiation Type",
  [CodeString],
  vm_1_to_n,
)

pub const brachytherapy_source_type = Item(
  DataElementTag(0x3010, 0x0048),
  "Brachytherapy Source Type",
  [CodeString],
  vm_1_to_n,
)

pub const referenced_rt_treatment_phase_sequence = Item(
  DataElementTag(0x3010, 0x0049),
  "Referenced RT Treatment Phase Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_direct_segment_instance_sequence = Item(
  DataElementTag(0x3010, 0x004A),
  "Referenced Direct Segment Instance Sequence",
  [Sequence],
  vm_1,
)

pub const intended_rt_treatment_phase_sequence = Item(
  DataElementTag(0x3010, 0x004B),
  "Intended RT Treatment Phase Sequence",
  [Sequence],
  vm_1,
)

pub const intended_phase_start_date = Item(
  DataElementTag(0x3010, 0x004C),
  "Intended Phase Start Date",
  [Date],
  vm_1,
)

pub const intended_phase_end_date = Item(
  DataElementTag(0x3010, 0x004D),
  "Intended Phase End Date",
  [Date],
  vm_1,
)

pub const rt_treatment_phase_interval_sequence = Item(
  DataElementTag(0x3010, 0x004E),
  "RT Treatment Phase Interval Sequence",
  [Sequence],
  vm_1,
)

pub const temporal_relationship_interval_anchor = Item(
  DataElementTag(0x3010, 0x004F),
  "Temporal Relationship Interval Anchor",
  [CodeString],
  vm_1,
)

pub const minimum_number_of_interval_days = Item(
  DataElementTag(0x3010, 0x0050),
  "Minimum Number of Interval Days",
  [FloatingPointDouble],
  vm_1,
)

pub const maximum_number_of_interval_days = Item(
  DataElementTag(0x3010, 0x0051),
  "Maximum Number of Interval Days",
  [FloatingPointDouble],
  vm_1,
)

pub const pertinent_sop_classes_in_study = Item(
  DataElementTag(0x3010, 0x0052),
  "Pertinent SOP Classes in Study",
  [UniqueIdentifier],
  vm_1_to_n,
)

pub const pertinent_sop_classes_in_series = Item(
  DataElementTag(0x3010, 0x0053),
  "Pertinent SOP Classes in Series",
  [UniqueIdentifier],
  vm_1_to_n,
)

pub const rt_prescription_label = Item(
  DataElementTag(0x3010, 0x0054),
  "RT Prescription Label",
  [LongString],
  vm_1,
)

pub const rt_physician_intent_predecessor_sequence = Item(
  DataElementTag(0x3010, 0x0055),
  "RT Physician Intent Predecessor Sequence",
  [Sequence],
  vm_1,
)

pub const rt_treatment_approach_label = Item(
  DataElementTag(0x3010, 0x0056),
  "RT Treatment Approach Label",
  [LongString],
  vm_1,
)

pub const rt_physician_intent_sequence = Item(
  DataElementTag(0x3010, 0x0057),
  "RT Physician Intent Sequence",
  [Sequence],
  vm_1,
)

pub const rt_physician_intent_index = Item(
  DataElementTag(0x3010, 0x0058),
  "RT Physician Intent Index",
  [UnsignedShort],
  vm_1,
)

pub const rt_treatment_intent_type = Item(
  DataElementTag(0x3010, 0x0059),
  "RT Treatment Intent Type",
  [CodeString],
  vm_1,
)

pub const rt_physician_intent_narrative = Item(
  DataElementTag(0x3010, 0x005A),
  "RT Physician Intent Narrative",
  [UnlimitedText],
  vm_1,
)

pub const rt_protocol_code_sequence = Item(
  DataElementTag(0x3010, 0x005B),
  "RT Protocol Code Sequence",
  [Sequence],
  vm_1,
)

pub const reason_for_superseding = Item(
  DataElementTag(0x3010, 0x005C),
  "Reason for Superseding",
  [ShortText],
  vm_1,
)

pub const rt_diagnosis_code_sequence = Item(
  DataElementTag(0x3010, 0x005D),
  "RT Diagnosis Code Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_rt_physician_intent_index = Item(
  DataElementTag(0x3010, 0x005E),
  "Referenced RT Physician Intent Index",
  [UnsignedShort],
  vm_1,
)

pub const rt_physician_intent_input_instance_sequence = Item(
  DataElementTag(0x3010, 0x005F),
  "RT Physician Intent Input Instance Sequence",
  [Sequence],
  vm_1,
)

pub const rt_anatomic_prescription_sequence = Item(
  DataElementTag(0x3010, 0x0060),
  "RT Anatomic Prescription Sequence",
  [Sequence],
  vm_1,
)

pub const prior_treatment_dose_description = Item(
  DataElementTag(0x3010, 0x0061),
  "Prior Treatment Dose Description",
  [UnlimitedText],
  vm_1,
)

pub const prior_treatment_reference_sequence = Item(
  DataElementTag(0x3010, 0x0062),
  "Prior Treatment Reference Sequence",
  [Sequence],
  vm_1,
)

pub const dosimetric_objective_evaluation_scope = Item(
  DataElementTag(0x3010, 0x0063),
  "Dosimetric Objective Evaluation Scope",
  [CodeString],
  vm_1,
)

pub const therapeutic_role_category_code_sequence = Item(
  DataElementTag(0x3010, 0x0064),
  "Therapeutic Role Category Code Sequence",
  [Sequence],
  vm_1,
)

pub const therapeutic_role_type_code_sequence = Item(
  DataElementTag(0x3010, 0x0065),
  "Therapeutic Role Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const conceptual_volume_optimization_precedence = Item(
  DataElementTag(0x3010, 0x0066),
  "Conceptual Volume Optimization Precedence",
  [UnsignedShort],
  vm_1,
)

pub const conceptual_volume_category_code_sequence = Item(
  DataElementTag(0x3010, 0x0067),
  "Conceptual Volume Category Code Sequence",
  [Sequence],
  vm_1,
)

pub const conceptual_volume_blocking_constraint = Item(
  DataElementTag(0x3010, 0x0068),
  "Conceptual Volume Blocking Constraint",
  [CodeString],
  vm_1,
)

pub const conceptual_volume_type_code_sequence = Item(
  DataElementTag(0x3010, 0x0069),
  "Conceptual Volume Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const conceptual_volume_type_modifier_code_sequence = Item(
  DataElementTag(0x3010, 0x006A),
  "Conceptual Volume Type Modifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const rt_prescription_sequence = Item(
  DataElementTag(0x3010, 0x006B),
  "RT Prescription Sequence",
  [Sequence],
  vm_1,
)

pub const dosimetric_objective_sequence = Item(
  DataElementTag(0x3010, 0x006C),
  "Dosimetric Objective Sequence",
  [Sequence],
  vm_1,
)

pub const dosimetric_objective_type_code_sequence = Item(
  DataElementTag(0x3010, 0x006D),
  "Dosimetric Objective Type Code Sequence",
  [Sequence],
  vm_1,
)

pub const dosimetric_objective_uid = Item(
  DataElementTag(0x3010, 0x006E),
  "Dosimetric Objective UID",
  [UniqueIdentifier],
  vm_1,
)

pub const referenced_dosimetric_objective_uid = Item(
  DataElementTag(0x3010, 0x006F),
  "Referenced Dosimetric Objective UID",
  [UniqueIdentifier],
  vm_1,
)

pub const dosimetric_objective_parameter_sequence = Item(
  DataElementTag(0x3010, 0x0070),
  "Dosimetric Objective Parameter Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_dosimetric_objectives_sequence = Item(
  DataElementTag(0x3010, 0x0071),
  "Referenced Dosimetric Objectives Sequence",
  [Sequence],
  vm_1,
)

pub const absolute_dosimetric_objective_flag = Item(
  DataElementTag(0x3010, 0x0073),
  "Absolute Dosimetric Objective Flag",
  [CodeString],
  vm_1,
)

pub const dosimetric_objective_weight = Item(
  DataElementTag(0x3010, 0x0074),
  "Dosimetric Objective Weight",
  [FloatingPointDouble],
  vm_1,
)

pub const dosimetric_objective_purpose = Item(
  DataElementTag(0x3010, 0x0075),
  "Dosimetric Objective Purpose",
  [CodeString],
  vm_1,
)

pub const planning_input_information_sequence = Item(
  DataElementTag(0x3010, 0x0076),
  "Planning Input Information Sequence",
  [Sequence],
  vm_1,
)

pub const treatment_site = Item(
  DataElementTag(0x3010, 0x0077),
  "Treatment Site",
  [LongString],
  vm_1,
)

pub const treatment_site_code_sequence = Item(
  DataElementTag(0x3010, 0x0078),
  "Treatment Site Code Sequence",
  [Sequence],
  vm_1,
)

pub const fraction_pattern_sequence = Item(
  DataElementTag(0x3010, 0x0079),
  "Fraction Pattern Sequence",
  [Sequence],
  vm_1,
)

pub const treatment_technique_notes = Item(
  DataElementTag(0x3010, 0x007A),
  "Treatment Technique Notes",
  [UnlimitedText],
  vm_1,
)

pub const prescription_notes = Item(
  DataElementTag(0x3010, 0x007B),
  "Prescription Notes",
  [UnlimitedText],
  vm_1,
)

pub const number_of_interval_fractions = Item(
  DataElementTag(0x3010, 0x007C),
  "Number of Interval Fractions",
  [IntegerString],
  vm_1,
)

pub const number_of_fractions = Item(
  DataElementTag(0x3010, 0x007D),
  "Number of Fractions",
  [UnsignedShort],
  vm_1,
)

pub const intended_delivery_duration = Item(
  DataElementTag(0x3010, 0x007E),
  "Intended Delivery Duration",
  [UnsignedShort],
  vm_1,
)

pub const fractionation_notes = Item(
  DataElementTag(0x3010, 0x007F),
  "Fractionation Notes",
  [UnlimitedText],
  vm_1,
)

pub const rt_treatment_technique_code_sequence = Item(
  DataElementTag(0x3010, 0x0080),
  "RT Treatment Technique Code Sequence",
  [Sequence],
  vm_1,
)

pub const prescription_notes_sequence = Item(
  DataElementTag(0x3010, 0x0081),
  "Prescription Notes Sequence",
  [Sequence],
  vm_1,
)

pub const fraction_based_relationship_sequence = Item(
  DataElementTag(0x3010, 0x0082),
  "Fraction-Based Relationship Sequence",
  [Sequence],
  vm_1,
)

pub const fraction_based_relationship_interval_anchor = Item(
  DataElementTag(0x3010, 0x0083),
  "Fraction-Based Relationship Interval Anchor",
  [CodeString],
  vm_1,
)

pub const minimum_hours_between_fractions = Item(
  DataElementTag(0x3010, 0x0084),
  "Minimum Hours between Fractions",
  [FloatingPointDouble],
  vm_1,
)

pub const intended_fraction_start_time = Item(
  DataElementTag(0x3010, 0x0085),
  "Intended Fraction Start Time",
  [Time],
  vm_1_to_n,
)

pub const intended_start_day_of_week = Item(
  DataElementTag(0x3010, 0x0086),
  "Intended Start Day of Week",
  [LongText],
  vm_1,
)

pub const weekday_fraction_pattern_sequence = Item(
  DataElementTag(0x3010, 0x0087),
  "Weekday Fraction Pattern Sequence",
  [Sequence],
  vm_1,
)

pub const delivery_time_structure_code_sequence = Item(
  DataElementTag(0x3010, 0x0088),
  "Delivery Time Structure Code Sequence",
  [Sequence],
  vm_1,
)

pub const treatment_site_modifier_code_sequence = Item(
  DataElementTag(0x3010, 0x0089),
  "Treatment Site Modifier Code Sequence",
  [Sequence],
  vm_1,
)

pub const robotic_base_location_indicator = Item(
  DataElementTag(0x3010, 0x0090),
  "Robotic Base Location Indicator",
  [CodeString],
  vm_1,
)

pub const robotic_path_node_set_code_sequence = Item(
  DataElementTag(0x3010, 0x0091),
  "Robotic Path Node Set Code Sequence",
  [Sequence],
  vm_1,
)

pub const robotic_node_identifier = Item(
  DataElementTag(0x3010, 0x0092),
  "Robotic Node Identifier",
  [UnsignedLong],
  vm_1,
)

pub const rt_treatment_source_coordinates = Item(
  DataElementTag(0x3010, 0x0093),
  "RT Treatment Source Coordinates",
  [FloatingPointDouble],
  vm_3,
)

pub const radiation_source_coordinate_system_yaw_angle = Item(
  DataElementTag(0x3010, 0x0094),
  "Radiation Source Coordinate SystemYaw Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const radiation_source_coordinate_system_roll_angle = Item(
  DataElementTag(0x3010, 0x0095),
  "Radiation Source Coordinate SystemRoll Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const radiation_source_coordinate_system_pitch_angle = Item(
  DataElementTag(0x3010, 0x0096),
  "Radiation Source Coordinate System Pitch Angle",
  [FloatingPointDouble],
  vm_1,
)

pub const robotic_path_control_point_sequence = Item(
  DataElementTag(0x3010, 0x0097),
  "Robotic Path Control Point Sequence",
  [Sequence],
  vm_1,
)

pub const tomotherapeutic_control_point_sequence = Item(
  DataElementTag(0x3010, 0x0098),
  "Tomotherapeutic Control Point Sequence",
  [Sequence],
  vm_1,
)

pub const tomotherapeutic_leaf_open_durations = Item(
  DataElementTag(0x3010, 0x0099),
  "Tomotherapeutic Leaf Open Durations",
  [FloatingPointDouble],
  vm_1_to_n,
)

pub const tomotherapeutic_leaf_initial_closed_durations = Item(
  DataElementTag(0x3010, 0x009A),
  "Tomotherapeutic Leaf Initial Closed Durations",
  [FloatingPointDouble],
  vm_1_to_n,
)

pub const conceptual_volume_identification_sequence = Item(
  DataElementTag(0x3010, 0x00A0),
  "Conceptual Volume Identification Sequence",
  [Sequence],
  vm_1,
)

pub const arbitrary = Item(
  DataElementTag(0x4000, 0x0010),
  "Arbitrary",
  [LongText],
  vm_1,
)

pub const text_comments = Item(
  DataElementTag(0x4000, 0x4000),
  "Text Comments",
  [LongText],
  vm_1,
)

pub const results_id = Item(
  DataElementTag(0x4008, 0x0040),
  "Results ID",
  [ShortString],
  vm_1,
)

pub const results_id_issuer = Item(
  DataElementTag(0x4008, 0x0042),
  "Results ID Issuer",
  [LongString],
  vm_1,
)

pub const referenced_interpretation_sequence = Item(
  DataElementTag(0x4008, 0x0050),
  "Referenced Interpretation Sequence",
  [Sequence],
  vm_1,
)

pub const report_production_status_trial = Item(
  DataElementTag(0x4008, 0x00FF),
  "Report Production Status (Trial)",
  [CodeString],
  vm_1,
)

pub const interpretation_recorded_date = Item(
  DataElementTag(0x4008, 0x0100),
  "Interpretation Recorded Date",
  [Date],
  vm_1,
)

pub const interpretation_recorded_time = Item(
  DataElementTag(0x4008, 0x0101),
  "Interpretation Recorded Time",
  [Time],
  vm_1,
)

pub const interpretation_recorder = Item(
  DataElementTag(0x4008, 0x0102),
  "Interpretation Recorder",
  [PersonName],
  vm_1,
)

pub const reference_to_recorded_sound = Item(
  DataElementTag(0x4008, 0x0103),
  "Reference to Recorded Sound",
  [LongString],
  vm_1,
)

pub const interpretation_transcription_date = Item(
  DataElementTag(0x4008, 0x0108),
  "Interpretation Transcription Date",
  [Date],
  vm_1,
)

pub const interpretation_transcription_time = Item(
  DataElementTag(0x4008, 0x0109),
  "Interpretation Transcription Time",
  [Time],
  vm_1,
)

pub const interpretation_transcriber = Item(
  DataElementTag(0x4008, 0x010A),
  "Interpretation Transcriber",
  [PersonName],
  vm_1,
)

pub const interpretation_text = Item(
  DataElementTag(0x4008, 0x010B),
  "Interpretation Text",
  [ShortText],
  vm_1,
)

pub const interpretation_author = Item(
  DataElementTag(0x4008, 0x010C),
  "Interpretation Author",
  [PersonName],
  vm_1,
)

pub const interpretation_approver_sequence = Item(
  DataElementTag(0x4008, 0x0111),
  "Interpretation Approver Sequence",
  [Sequence],
  vm_1,
)

pub const interpretation_approval_date = Item(
  DataElementTag(0x4008, 0x0112),
  "Interpretation Approval Date",
  [Date],
  vm_1,
)

pub const interpretation_approval_time = Item(
  DataElementTag(0x4008, 0x0113),
  "Interpretation Approval Time",
  [Time],
  vm_1,
)

pub const physician_approving_interpretation = Item(
  DataElementTag(0x4008, 0x0114),
  "Physician Approving Interpretation",
  [PersonName],
  vm_1,
)

pub const interpretation_diagnosis_description = Item(
  DataElementTag(0x4008, 0x0115),
  "Interpretation Diagnosis Description",
  [LongText],
  vm_1,
)

pub const interpretation_diagnosis_code_sequence = Item(
  DataElementTag(0x4008, 0x0117),
  "Interpretation Diagnosis Code Sequence",
  [Sequence],
  vm_1,
)

pub const results_distribution_list_sequence = Item(
  DataElementTag(0x4008, 0x0118),
  "Results Distribution List Sequence",
  [Sequence],
  vm_1,
)

pub const distribution_name = Item(
  DataElementTag(0x4008, 0x0119),
  "Distribution Name",
  [PersonName],
  vm_1,
)

pub const distribution_address = Item(
  DataElementTag(0x4008, 0x011A),
  "Distribution Address",
  [LongString],
  vm_1,
)

pub const interpretation_id = Item(
  DataElementTag(0x4008, 0x0200),
  "Interpretation ID",
  [ShortString],
  vm_1,
)

pub const interpretation_id_issuer = Item(
  DataElementTag(0x4008, 0x0202),
  "Interpretation ID Issuer",
  [LongString],
  vm_1,
)

pub const interpretation_type_id = Item(
  DataElementTag(0x4008, 0x0210),
  "Interpretation Type ID",
  [CodeString],
  vm_1,
)

pub const interpretation_status_id = Item(
  DataElementTag(0x4008, 0x0212),
  "Interpretation Status ID",
  [CodeString],
  vm_1,
)

pub const impressions = Item(
  DataElementTag(0x4008, 0x0300),
  "Impressions",
  [ShortText],
  vm_1,
)

pub const results_comments = Item(
  DataElementTag(0x4008, 0x4000),
  "Results Comments",
  [ShortText],
  vm_1,
)

pub const low_energy_detectors = Item(
  DataElementTag(0x4010, 0x0001),
  "Low Energy Detectors",
  [CodeString],
  vm_1,
)

pub const high_energy_detectors = Item(
  DataElementTag(0x4010, 0x0002),
  "High Energy Detectors",
  [CodeString],
  vm_1,
)

pub const detector_geometry_sequence = Item(
  DataElementTag(0x4010, 0x0004),
  "Detector Geometry Sequence",
  [Sequence],
  vm_1,
)

pub const threat_roi_voxel_sequence = Item(
  DataElementTag(0x4010, 0x1001),
  "Threat ROI Voxel Sequence",
  [Sequence],
  vm_1,
)

pub const threat_roi_base = Item(
  DataElementTag(0x4010, 0x1004),
  "Threat ROI Base",
  [FloatingPointSingle],
  vm_3,
)

pub const threat_roi_extents = Item(
  DataElementTag(0x4010, 0x1005),
  "Threat ROI Extents",
  [FloatingPointSingle],
  vm_3,
)

pub const threat_roi_bitmap = Item(
  DataElementTag(0x4010, 0x1006),
  "Threat ROI Bitmap",
  [OtherByteString],
  vm_1,
)

pub const route_segment_id = Item(
  DataElementTag(0x4010, 0x1007),
  "Route Segment ID",
  [ShortString],
  vm_1,
)

pub const gantry_type = Item(
  DataElementTag(0x4010, 0x1008),
  "Gantry Type",
  [CodeString],
  vm_1,
)

pub const ooi_owner_type = Item(
  DataElementTag(0x4010, 0x1009),
  "OOI Owner Type",
  [CodeString],
  vm_1,
)

pub const route_segment_sequence = Item(
  DataElementTag(0x4010, 0x100A),
  "Route Segment Sequence",
  [Sequence],
  vm_1,
)

pub const potential_threat_object_id = Item(
  DataElementTag(0x4010, 0x1010),
  "Potential Threat Object ID",
  [UnsignedShort],
  vm_1,
)

pub const threat_sequence = Item(
  DataElementTag(0x4010, 0x1011),
  "Threat Sequence",
  [Sequence],
  vm_1,
)

pub const threat_category = Item(
  DataElementTag(0x4010, 0x1012),
  "Threat Category",
  [CodeString],
  vm_1,
)

pub const threat_category_description = Item(
  DataElementTag(0x4010, 0x1013),
  "Threat Category Description",
  [LongText],
  vm_1,
)

pub const atd_ability_assessment = Item(
  DataElementTag(0x4010, 0x1014),
  "ATD Ability Assessment",
  [CodeString],
  vm_1,
)

pub const atd_assessment_flag = Item(
  DataElementTag(0x4010, 0x1015),
  "ATD Assessment Flag",
  [CodeString],
  vm_1,
)

pub const atd_assessment_probability = Item(
  DataElementTag(0x4010, 0x1016),
  "ATD Assessment Probability",
  [FloatingPointSingle],
  vm_1,
)

pub const mass = Item(
  DataElementTag(0x4010, 0x1017),
  "Mass",
  [FloatingPointSingle],
  vm_1,
)

pub const density = Item(
  DataElementTag(0x4010, 0x1018),
  "Density",
  [FloatingPointSingle],
  vm_1,
)

pub const z_effective = Item(
  DataElementTag(0x4010, 0x1019),
  "Z Effective",
  [FloatingPointSingle],
  vm_1,
)

pub const boarding_pass_id = Item(
  DataElementTag(0x4010, 0x101A),
  "Boarding Pass ID",
  [ShortString],
  vm_1,
)

pub const center_of_mass = Item(
  DataElementTag(0x4010, 0x101B),
  "Center of Mass",
  [FloatingPointSingle],
  vm_3,
)

pub const center_of_pto = Item(
  DataElementTag(0x4010, 0x101C),
  "Center of PTO",
  [FloatingPointSingle],
  vm_3,
)

pub const bounding_polygon = Item(
  DataElementTag(0x4010, 0x101D),
  "Bounding Polygon",
  [FloatingPointSingle],
  ValueMultiplicity(6, None),
)

pub const route_segment_start_location_id = Item(
  DataElementTag(0x4010, 0x101E),
  "Route Segment Start Location ID",
  [ShortString],
  vm_1,
)

pub const route_segment_end_location_id = Item(
  DataElementTag(0x4010, 0x101F),
  "Route Segment End Location ID",
  [ShortString],
  vm_1,
)

pub const route_segment_location_id_type = Item(
  DataElementTag(0x4010, 0x1020),
  "Route Segment Location ID Type",
  [CodeString],
  vm_1,
)

pub const abort_reason = Item(
  DataElementTag(0x4010, 0x1021),
  "Abort Reason",
  [CodeString],
  vm_1_to_n,
)

pub const volume_of_pto = Item(
  DataElementTag(0x4010, 0x1023),
  "Volume of PTO",
  [FloatingPointSingle],
  vm_1,
)

pub const abort_flag = Item(
  DataElementTag(0x4010, 0x1024),
  "Abort Flag",
  [CodeString],
  vm_1,
)

pub const route_segment_start_time = Item(
  DataElementTag(0x4010, 0x1025),
  "Route Segment Start Time",
  [DateTime],
  vm_1,
)

pub const route_segment_end_time = Item(
  DataElementTag(0x4010, 0x1026),
  "Route Segment End Time",
  [DateTime],
  vm_1,
)

pub const tdr_type = Item(
  DataElementTag(0x4010, 0x1027),
  "TDR Type",
  [CodeString],
  vm_1,
)

pub const international_route_segment = Item(
  DataElementTag(0x4010, 0x1028),
  "International Route Segment",
  [CodeString],
  vm_1,
)

pub const threat_detection_algorithm_and_version = Item(
  DataElementTag(0x4010, 0x1029),
  "Threat Detection Algorithm and Version",
  [LongString],
  vm_1_to_n,
)

pub const assigned_location = Item(
  DataElementTag(0x4010, 0x102A),
  "Assigned Location",
  [ShortString],
  vm_1,
)

pub const alarm_decision_time = Item(
  DataElementTag(0x4010, 0x102B),
  "Alarm Decision Time",
  [DateTime],
  vm_1,
)

pub const alarm_decision = Item(
  DataElementTag(0x4010, 0x1031),
  "Alarm Decision",
  [CodeString],
  vm_1,
)

pub const number_of_total_objects = Item(
  DataElementTag(0x4010, 0x1033),
  "Number of Total Objects",
  [UnsignedShort],
  vm_1,
)

pub const number_of_alarm_objects = Item(
  DataElementTag(0x4010, 0x1034),
  "Number of Alarm Objects",
  [UnsignedShort],
  vm_1,
)

pub const pto_representation_sequence = Item(
  DataElementTag(0x4010, 0x1037),
  "PTO Representation Sequence",
  [Sequence],
  vm_1,
)

pub const atd_assessment_sequence = Item(
  DataElementTag(0x4010, 0x1038),
  "ATD Assessment Sequence",
  [Sequence],
  vm_1,
)

pub const tip_type = Item(
  DataElementTag(0x4010, 0x1039),
  "TIP Type",
  [CodeString],
  vm_1,
)

pub const dicos_version = Item(
  DataElementTag(0x4010, 0x103A),
  "DICOS Version",
  [CodeString],
  vm_1,
)

pub const ooi_owner_creation_time = Item(
  DataElementTag(0x4010, 0x1041),
  "OOI Owner Creation Time",
  [DateTime],
  vm_1,
)

pub const ooi_type = Item(
  DataElementTag(0x4010, 0x1042),
  "OOI Type",
  [CodeString],
  vm_1,
)

pub const ooi_size = Item(
  DataElementTag(0x4010, 0x1043),
  "OOI Size",
  [FloatingPointSingle],
  vm_3,
)

pub const acquisition_status = Item(
  DataElementTag(0x4010, 0x1044),
  "Acquisition Status",
  [CodeString],
  vm_1,
)

pub const basis_materials_code_sequence = Item(
  DataElementTag(0x4010, 0x1045),
  "Basis Materials Code Sequence",
  [Sequence],
  vm_1,
)

pub const phantom_type = Item(
  DataElementTag(0x4010, 0x1046),
  "Phantom Type",
  [CodeString],
  vm_1,
)

pub const ooi_owner_sequence = Item(
  DataElementTag(0x4010, 0x1047),
  "OOI Owner Sequence",
  [Sequence],
  vm_1,
)

pub const scan_type = Item(
  DataElementTag(0x4010, 0x1048),
  "Scan Type",
  [CodeString],
  vm_1,
)

pub const itinerary_id = Item(
  DataElementTag(0x4010, 0x1051),
  "Itinerary ID",
  [LongString],
  vm_1,
)

pub const itinerary_id_type = Item(
  DataElementTag(0x4010, 0x1052),
  "Itinerary ID Type",
  [ShortString],
  vm_1,
)

pub const itinerary_id_assigning_authority = Item(
  DataElementTag(0x4010, 0x1053),
  "Itinerary ID Assigning Authority",
  [LongString],
  vm_1,
)

pub const route_id = Item(
  DataElementTag(0x4010, 0x1054),
  "Route ID",
  [ShortString],
  vm_1,
)

pub const route_id_assigning_authority = Item(
  DataElementTag(0x4010, 0x1055),
  "Route ID Assigning Authority",
  [ShortString],
  vm_1,
)

pub const inbound_arrival_type = Item(
  DataElementTag(0x4010, 0x1056),
  "Inbound Arrival Type",
  [CodeString],
  vm_1,
)

pub const carrier_id = Item(
  DataElementTag(0x4010, 0x1058),
  "Carrier ID",
  [ShortString],
  vm_1,
)

pub const carrier_id_assigning_authority = Item(
  DataElementTag(0x4010, 0x1059),
  "Carrier ID Assigning Authority",
  [CodeString],
  vm_1,
)

pub const source_orientation = Item(
  DataElementTag(0x4010, 0x1060),
  "Source Orientation",
  [FloatingPointSingle],
  vm_3,
)

pub const source_position = Item(
  DataElementTag(0x4010, 0x1061),
  "Source Position",
  [FloatingPointSingle],
  vm_3,
)

pub const belt_height = Item(
  DataElementTag(0x4010, 0x1062),
  "Belt Height",
  [FloatingPointSingle],
  vm_1,
)

pub const algorithm_routing_code_sequence = Item(
  DataElementTag(0x4010, 0x1064),
  "Algorithm Routing Code Sequence",
  [Sequence],
  vm_1,
)

pub const transport_classification = Item(
  DataElementTag(0x4010, 0x1067),
  "Transport Classification",
  [CodeString],
  vm_1,
)

pub const ooi_type_descriptor = Item(
  DataElementTag(0x4010, 0x1068),
  "OOI Type Descriptor",
  [LongText],
  vm_1,
)

pub const total_processing_time = Item(
  DataElementTag(0x4010, 0x1069),
  "Total Processing Time",
  [FloatingPointSingle],
  vm_1,
)

pub const detector_calibration_data = Item(
  DataElementTag(0x4010, 0x106C),
  "Detector Calibration Data",
  [OtherByteString],
  vm_1,
)

pub const additional_screening_performed = Item(
  DataElementTag(0x4010, 0x106D),
  "Additional Screening Performed",
  [CodeString],
  vm_1,
)

pub const additional_inspection_selection_criteria = Item(
  DataElementTag(0x4010, 0x106E),
  "Additional Inspection Selection Criteria",
  [CodeString],
  vm_1,
)

pub const additional_inspection_method_sequence = Item(
  DataElementTag(0x4010, 0x106F),
  "Additional Inspection Method Sequence",
  [Sequence],
  vm_1,
)

pub const ait_device_type = Item(
  DataElementTag(0x4010, 0x1070),
  "AIT Device Type",
  [CodeString],
  vm_1,
)

pub const qr_measurements_sequence = Item(
  DataElementTag(0x4010, 0x1071),
  "QR Measurements Sequence",
  [Sequence],
  vm_1,
)

pub const target_material_sequence = Item(
  DataElementTag(0x4010, 0x1072),
  "Target Material Sequence",
  [Sequence],
  vm_1,
)

pub const snr_threshold = Item(
  DataElementTag(0x4010, 0x1073),
  "SNR Threshold",
  [FloatingPointDouble],
  vm_1,
)

pub const image_scale_representation = Item(
  DataElementTag(0x4010, 0x1075),
  "Image Scale Representation",
  [DecimalString],
  vm_1,
)

pub const referenced_pto_sequence = Item(
  DataElementTag(0x4010, 0x1076),
  "Referenced PTO Sequence",
  [Sequence],
  vm_1,
)

pub const referenced_tdr_instance_sequence = Item(
  DataElementTag(0x4010, 0x1077),
  "Referenced TDR Instance Sequence",
  [Sequence],
  vm_1,
)

pub const pto_location_description = Item(
  DataElementTag(0x4010, 0x1078),
  "PTO Location Description",
  [ShortText],
  vm_1,
)

pub const anomaly_locator_indicator_sequence = Item(
  DataElementTag(0x4010, 0x1079),
  "Anomaly Locator Indicator Sequence",
  [Sequence],
  vm_1,
)

pub const anomaly_locator_indicator = Item(
  DataElementTag(0x4010, 0x107A),
  "Anomaly Locator Indicator",
  [FloatingPointSingle],
  vm_3,
)

pub const pto_region_sequence = Item(
  DataElementTag(0x4010, 0x107B),
  "PTO Region Sequence",
  [Sequence],
  vm_1,
)

pub const inspection_selection_criteria = Item(
  DataElementTag(0x4010, 0x107C),
  "Inspection Selection Criteria",
  [CodeString],
  vm_1,
)

pub const secondary_inspection_method_sequence = Item(
  DataElementTag(0x4010, 0x107D),
  "Secondary Inspection Method Sequence",
  [Sequence],
  vm_1,
)

pub const prcs_to_rcs_orientation = Item(
  DataElementTag(0x4010, 0x107E),
  "PRCS to RCS Orientation",
  [DecimalString],
  vm_6,
)

pub const mac_parameters_sequence = Item(
  DataElementTag(0x4FFE, 0x0001),
  "MAC Parameters Sequence",
  [Sequence],
  vm_1,
)

pub const curve_dimensions = Item(
  DataElementTag(0x5000, 0x0005),
  "Curve Dimensions",
  [UnsignedShort],
  vm_1,
)

pub const number_of_points = Item(
  DataElementTag(0x5000, 0x0010),
  "Number of Points",
  [UnsignedShort],
  vm_1,
)

pub const type_of_data = Item(
  DataElementTag(0x5000, 0x0020),
  "Type of Data",
  [CodeString],
  vm_1,
)

pub const curve_description = Item(
  DataElementTag(0x5000, 0x0022),
  "Curve Description",
  [LongString],
  vm_1,
)

pub const axis_units = Item(
  DataElementTag(0x5000, 0x0030),
  "Axis Units",
  [ShortString],
  vm_1_to_n,
)

pub const axis_labels = Item(
  DataElementTag(0x5000, 0x0040),
  "Axis Labels",
  [ShortString],
  vm_1_to_n,
)

pub const data_value_representation = Item(
  DataElementTag(0x5000, 0x0103),
  "Data Value Representation",
  [UnsignedShort],
  vm_1,
)

pub const minimum_coordinate_value = Item(
  DataElementTag(0x5000, 0x0104),
  "Minimum Coordinate Value",
  [UnsignedShort],
  vm_1_to_n,
)

pub const maximum_coordinate_value = Item(
  DataElementTag(0x5000, 0x0105),
  "Maximum Coordinate Value",
  [UnsignedShort],
  vm_1_to_n,
)

pub const curve_range = Item(
  DataElementTag(0x5000, 0x0106),
  "Curve Range",
  [ShortString],
  vm_1_to_n,
)

pub const curve_data_descriptor = Item(
  DataElementTag(0x5000, 0x0110),
  "Curve Data Descriptor",
  [UnsignedShort],
  vm_1_to_n,
)

pub const coordinate_start_value = Item(
  DataElementTag(0x5000, 0x0112),
  "Coordinate Start Value",
  [UnsignedShort],
  vm_1_to_n,
)

pub const coordinate_step_value = Item(
  DataElementTag(0x5000, 0x0114),
  "Coordinate Step Value",
  [UnsignedShort],
  vm_1_to_n,
)

pub const curve_activation_layer = Item(
  DataElementTag(0x5000, 0x1001),
  "Curve Activation Layer",
  [CodeString],
  vm_1,
)

pub const audio_type = Item(
  DataElementTag(0x5000, 0x2000),
  "Audio Type",
  [UnsignedShort],
  vm_1,
)

pub const audio_sample_format = Item(
  DataElementTag(0x5000, 0x2002),
  "Audio Sample Format",
  [UnsignedShort],
  vm_1,
)

pub const number_of_channels = Item(
  DataElementTag(0x5000, 0x2004),
  "Number of Channels",
  [UnsignedShort],
  vm_1,
)

pub const number_of_samples = Item(
  DataElementTag(0x5000, 0x2006),
  "Number of Samples",
  [UnsignedLong],
  vm_1,
)

pub const sample_rate = Item(
  DataElementTag(0x5000, 0x2008),
  "Sample Rate",
  [UnsignedLong],
  vm_1,
)

pub const total_time = Item(
  DataElementTag(0x5000, 0x200A),
  "Total Time",
  [UnsignedLong],
  vm_1,
)

pub const audio_sample_data = Item(
  DataElementTag(0x5000, 0x200C),
  "Audio Sample Data",
  [OtherByteString, OtherWordString],
  vm_1,
)

pub const audio_comments = Item(
  DataElementTag(0x5000, 0x200E),
  "Audio Comments",
  [LongText],
  vm_1,
)

pub const curve_label = Item(
  DataElementTag(0x5000, 0x2500),
  "Curve Label",
  [LongString],
  vm_1,
)

pub const curve_referenced_overlay_sequence = Item(
  DataElementTag(0x5000, 0x2600),
  "Curve Referenced Overlay Sequence",
  [Sequence],
  vm_1,
)

pub const curve_referenced_overlay_group = Item(
  DataElementTag(0x5000, 0x2610),
  "Curve Referenced Overlay Group",
  [UnsignedShort],
  vm_1,
)

pub const curve_data = Item(
  DataElementTag(0x5000, 0x3000),
  "Curve Data",
  [OtherByteString, OtherWordString],
  vm_1,
)

pub const shared_functional_groups_sequence = Item(
  DataElementTag(0x5200, 0x9229),
  "Shared Functional Groups Sequence",
  [Sequence],
  vm_1,
)

pub const per_frame_functional_groups_sequence = Item(
  DataElementTag(0x5200, 0x9230),
  "Per-Frame Functional Groups Sequence",
  [Sequence],
  vm_1,
)

pub const waveform_sequence = Item(
  DataElementTag(0x5400, 0x0100),
  "Waveform Sequence",
  [Sequence],
  vm_1,
)

pub const channel_minimum_value = Item(
  DataElementTag(0x5400, 0x0110),
  "Channel Minimum Value",
  [OtherByteString, OtherWordString],
  vm_1,
)

pub const channel_maximum_value = Item(
  DataElementTag(0x5400, 0x0112),
  "Channel Maximum Value",
  [OtherByteString, OtherWordString],
  vm_1,
)

pub const waveform_bits_allocated = Item(
  DataElementTag(0x5400, 0x1004),
  "Waveform Bits Allocated",
  [UnsignedShort],
  vm_1,
)

pub const waveform_sample_interpretation = Item(
  DataElementTag(0x5400, 0x1006),
  "Waveform Sample Interpretation",
  [CodeString],
  vm_1,
)

pub const waveform_padding_value = Item(
  DataElementTag(0x5400, 0x100A),
  "Waveform Padding Value",
  [OtherByteString, OtherWordString],
  vm_1,
)

pub const waveform_data = Item(
  DataElementTag(0x5400, 0x1010),
  "Waveform Data",
  [OtherByteString, OtherWordString],
  vm_1,
)

pub const first_order_phase_correction_angle = Item(
  DataElementTag(0x5600, 0x0010),
  "First Order Phase Correction Angle",
  [OtherFloatString],
  vm_1,
)

pub const spectroscopy_data = Item(
  DataElementTag(0x5600, 0x0020),
  "Spectroscopy Data",
  [OtherFloatString],
  vm_1,
)

pub const overlay_rows = Item(
  DataElementTag(0x6000, 0x0010),
  "Overlay Rows",
  [UnsignedShort],
  vm_1,
)

pub const overlay_columns = Item(
  DataElementTag(0x6000, 0x0011),
  "Overlay Columns",
  [UnsignedShort],
  vm_1,
)

pub const overlay_planes = Item(
  DataElementTag(0x6000, 0x0012),
  "Overlay Planes",
  [UnsignedShort],
  vm_1,
)

pub const number_of_frames_in_overlay = Item(
  DataElementTag(0x6000, 0x0015),
  "Number of Frames in Overlay",
  [IntegerString],
  vm_1,
)

pub const overlay_description = Item(
  DataElementTag(0x6000, 0x0022),
  "Overlay Description",
  [LongString],
  vm_1,
)

pub const overlay_type = Item(
  DataElementTag(0x6000, 0x0040),
  "Overlay Type",
  [CodeString],
  vm_1,
)

pub const overlay_subtype = Item(
  DataElementTag(0x6000, 0x0045),
  "Overlay Subtype",
  [LongString],
  vm_1,
)

pub const overlay_origin = Item(
  DataElementTag(0x6000, 0x0050),
  "Overlay Origin",
  [SignedShort],
  vm_2,
)

pub const image_frame_origin = Item(
  DataElementTag(0x6000, 0x0051),
  "Image Frame Origin",
  [UnsignedShort],
  vm_1,
)

pub const overlay_plane_origin = Item(
  DataElementTag(0x6000, 0x0052),
  "Overlay Plane Origin",
  [UnsignedShort],
  vm_1,
)

pub const overlay_compression_code = Item(
  DataElementTag(0x6000, 0x0060),
  "Overlay Compression Code",
  [CodeString],
  vm_1,
)

pub const overlay_compression_originator = Item(
  DataElementTag(0x6000, 0x0061),
  "Overlay Compression Originator",
  [ShortString],
  vm_1,
)

pub const overlay_compression_label = Item(
  DataElementTag(0x6000, 0x0062),
  "Overlay Compression Label",
  [ShortString],
  vm_1,
)

pub const overlay_compression_description = Item(
  DataElementTag(0x6000, 0x0063),
  "Overlay Compression Description",
  [CodeString],
  vm_1,
)

pub const overlay_compression_step_pointers = Item(
  DataElementTag(0x6000, 0x0066),
  "Overlay Compression Step Pointers",
  [AttributeTag],
  vm_1_to_n,
)

pub const overlay_repeat_interval = Item(
  DataElementTag(0x6000, 0x0068),
  "Overlay Repeat Interval",
  [UnsignedShort],
  vm_1,
)

pub const overlay_bits_grouped = Item(
  DataElementTag(0x6000, 0x0069),
  "Overlay Bits Grouped",
  [UnsignedShort],
  vm_1,
)

pub const overlay_bits_allocated = Item(
  DataElementTag(0x6000, 0x0100),
  "Overlay Bits Allocated",
  [UnsignedShort],
  vm_1,
)

pub const overlay_bit_position = Item(
  DataElementTag(0x6000, 0x0102),
  "Overlay Bit Position",
  [UnsignedShort],
  vm_1,
)

pub const overlay_format = Item(
  DataElementTag(0x6000, 0x0110),
  "Overlay Format",
  [CodeString],
  vm_1,
)

pub const overlay_location = Item(
  DataElementTag(0x6000, 0x0200),
  "Overlay Location",
  [UnsignedShort],
  vm_1,
)

pub const overlay_code_label = Item(
  DataElementTag(0x6000, 0x0800),
  "Overlay Code Label",
  [CodeString],
  vm_1_to_n,
)

pub const overlay_number_of_tables = Item(
  DataElementTag(0x6000, 0x0802),
  "Overlay Number of Tables",
  [UnsignedShort],
  vm_1,
)

pub const overlay_code_table_location = Item(
  DataElementTag(0x6000, 0x0803),
  "Overlay Code Table Location",
  [AttributeTag],
  vm_1_to_n,
)

pub const overlay_bits_for_code_word = Item(
  DataElementTag(0x6000, 0x0804),
  "Overlay Bits For Code Word",
  [UnsignedShort],
  vm_1,
)

pub const overlay_activation_layer = Item(
  DataElementTag(0x6000, 0x1001),
  "Overlay Activation Layer",
  [CodeString],
  vm_1,
)

pub const overlay_descriptor_gray = Item(
  DataElementTag(0x6000, 0x1100),
  "Overlay Descriptor - Gray",
  [UnsignedShort],
  vm_1,
)

pub const overlay_descriptor_red = Item(
  DataElementTag(0x6000, 0x1101),
  "Overlay Descriptor - Red",
  [UnsignedShort],
  vm_1,
)

pub const overlay_descriptor_green = Item(
  DataElementTag(0x6000, 0x1102),
  "Overlay Descriptor - Green",
  [UnsignedShort],
  vm_1,
)

pub const overlay_descriptor_blue = Item(
  DataElementTag(0x6000, 0x1103),
  "Overlay Descriptor - Blue",
  [UnsignedShort],
  vm_1,
)

pub const overlays_gray = Item(
  DataElementTag(0x6000, 0x1200),
  "Overlays - Gray",
  [UnsignedShort],
  vm_1_to_n,
)

pub const overlays_red = Item(
  DataElementTag(0x6000, 0x1201),
  "Overlays - Red",
  [UnsignedShort],
  vm_1_to_n,
)

pub const overlays_green = Item(
  DataElementTag(0x6000, 0x1202),
  "Overlays - Green",
  [UnsignedShort],
  vm_1_to_n,
)

pub const overlays_blue = Item(
  DataElementTag(0x6000, 0x1203),
  "Overlays - Blue",
  [UnsignedShort],
  vm_1_to_n,
)

pub const roi_area = Item(
  DataElementTag(0x6000, 0x1301),
  "ROI Area",
  [IntegerString],
  vm_1,
)

pub const roi_mean = Item(
  DataElementTag(0x6000, 0x1302),
  "ROI Mean",
  [DecimalString],
  vm_1,
)

pub const roi_standard_deviation = Item(
  DataElementTag(0x6000, 0x1303),
  "ROI Standard Deviation",
  [DecimalString],
  vm_1,
)

pub const overlay_label = Item(
  DataElementTag(0x6000, 0x1500),
  "Overlay Label",
  [LongString],
  vm_1,
)

pub const overlay_data = Item(
  DataElementTag(0x6000, 0x3000),
  "Overlay Data",
  [OtherByteString, OtherWordString],
  vm_1,
)

pub const overlay_comments = Item(
  DataElementTag(0x6000, 0x4000),
  "Overlay Comments",
  [LongText],
  vm_1,
)

pub const extended_offset_table = Item(
  DataElementTag(0x7FE0, 0x0001),
  "Extended Offset Table",
  [OtherVeryLongString],
  vm_1,
)

pub const extended_offset_table_lengths = Item(
  DataElementTag(0x7FE0, 0x0002),
  "Extended Offset Table Lengths",
  [OtherVeryLongString],
  vm_1,
)

pub const encapsulated_pixel_data_value_total_length = Item(
  DataElementTag(0x7FE0, 0x0003),
  "Encapsulated Pixel Data Value Total Length",
  [UnsignedVeryLong],
  vm_1,
)

pub const float_pixel_data = Item(
  DataElementTag(0x7FE0, 0x0008),
  "Float Pixel Data",
  [OtherFloatString],
  vm_1,
)

pub const double_float_pixel_data = Item(
  DataElementTag(0x7FE0, 0x0009),
  "Double Float Pixel Data",
  [OtherDoubleString],
  vm_1,
)

pub const pixel_data = Item(
  DataElementTag(0x7FE0, 0x0010),
  "Pixel Data",
  [OtherByteString, OtherWordString],
  vm_1,
)

pub const coefficients_sdvn = Item(
  DataElementTag(0x7FE0, 0x0020),
  "Coefficients SDVN",
  [OtherWordString],
  vm_1,
)

pub const coefficients_sdhn = Item(
  DataElementTag(0x7FE0, 0x0030),
  "Coefficients SDHN",
  [OtherWordString],
  vm_1,
)

pub const coefficients_sddn = Item(
  DataElementTag(0x7FE0, 0x0040),
  "Coefficients SDDN",
  [OtherWordString],
  vm_1,
)

pub const variable_pixel_data = Item(
  DataElementTag(0x7F00, 0x0010),
  "Variable Pixel Data",
  [OtherByteString, OtherWordString],
  vm_1,
)

pub const variable_next_data_group = Item(
  DataElementTag(0x7F00, 0x0011),
  "Variable Next Data Group",
  [UnsignedShort],
  vm_1,
)

pub const variable_coefficients_sdvn = Item(
  DataElementTag(0x7F00, 0x0020),
  "Variable Coefficients SDVN",
  [OtherWordString],
  vm_1,
)

pub const variable_coefficients_sdhn = Item(
  DataElementTag(0x7F00, 0x0030),
  "Variable Coefficients SDHN",
  [OtherWordString],
  vm_1,
)

pub const variable_coefficients_sddn = Item(
  DataElementTag(0x7F00, 0x0040),
  "Variable Coefficients SDDN",
  [OtherWordString],
  vm_1,
)

pub const digital_signatures_sequence = Item(
  DataElementTag(0xFFFA, 0xFFFA),
  "Digital Signatures Sequence",
  [Sequence],
  vm_1,
)

pub const data_set_trailing_padding = Item(
  DataElementTag(0xFFFC, 0xFFFC),
  "Data Set Trailing Padding",
  [OtherByteString],
  vm_1,
)

pub const item = Item(DataElementTag(0xFFFE, 0xE000), "Item", [], vm_1)

pub const item_delimitation_item = Item(
  DataElementTag(0xFFFE, 0xE00D),
  "Item Delimitation Item",
  [],
  vm_1,
)

pub const sequence_delimitation_item = Item(
  DataElementTag(0xFFFE, 0xE0DD),
  "Sequence Delimitation Item",
  [],
  vm_1,
)

/// Returns details for a data element in group 0x0002.
///
fn find_element_in_group_0002(element: Int) -> Result(Item, Nil) {
  case element {
    0x0000 -> Ok(file_meta_information_group_length)
    0x0001 -> Ok(file_meta_information_version)
    0x0002 -> Ok(media_storage_sop_class_uid)
    0x0003 -> Ok(media_storage_sop_instance_uid)
    0x0010 -> Ok(transfer_syntax_uid)
    0x0012 -> Ok(implementation_class_uid)
    0x0013 -> Ok(implementation_version_name)
    0x0016 -> Ok(source_application_entity_title)
    0x0017 -> Ok(sending_application_entity_title)
    0x0018 -> Ok(receiving_application_entity_title)
    0x0026 -> Ok(source_presentation_address)
    0x0027 -> Ok(sending_presentation_address)
    0x0028 -> Ok(receiving_presentation_address)
    0x0031 -> Ok(rtv_meta_information_version)
    0x0032 -> Ok(rtv_communication_sop_class_uid)
    0x0033 -> Ok(rtv_communication_sop_instance_uid)
    0x0035 -> Ok(rtv_source_identifier)
    0x0036 -> Ok(rtv_flow_identifier)
    0x0037 -> Ok(rtv_flow_rtp_sampling_rate)
    0x0038 -> Ok(rtv_flow_actual_frame_duration)
    0x0100 -> Ok(private_information_creator_uid)
    0x0102 -> Ok(private_information)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0004.
///
fn find_element_in_group_0004(element: Int) -> Result(Item, Nil) {
  case element {
    0x1130 -> Ok(file_set_id)
    0x1141 -> Ok(file_set_descriptor_file_id)
    0x1142 -> Ok(specific_character_set_of_file_set_descriptor_file)
    0x1200 ->
      Ok(offset_of_the_first_directory_record_of_the_root_directory_entity)
    0x1202 ->
      Ok(offset_of_the_last_directory_record_of_the_root_directory_entity)
    0x1212 -> Ok(file_set_consistency_flag)
    0x1220 -> Ok(directory_record_sequence)
    0x1400 -> Ok(offset_of_the_next_directory_record)
    0x1410 -> Ok(record_in_use_flag)
    0x1420 -> Ok(offset_of_referenced_lower_level_directory_entity)
    0x1430 -> Ok(directory_record_type)
    0x1432 -> Ok(private_record_uid)
    0x1500 -> Ok(referenced_file_id)
    0x1504 -> Ok(mrdr_directory_record_offset)
    0x1510 -> Ok(referenced_sop_class_uid_in_file)
    0x1511 -> Ok(referenced_sop_instance_uid_in_file)
    0x1512 -> Ok(referenced_transfer_syntax_uid_in_file)
    0x151A -> Ok(referenced_related_general_sop_class_uid_in_file)
    0x1600 -> Ok(number_of_references)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0006.
///
fn find_element_in_group_0006(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(current_frame_functional_groups_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0008.
///
fn find_element_in_group_0008(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(length_to_end)
    0x0005 -> Ok(specific_character_set)
    0x0006 -> Ok(language_code_sequence)
    0x0008 -> Ok(image_type)
    0x0010 -> Ok(recognition_code)
    0x0012 -> Ok(instance_creation_date)
    0x0013 -> Ok(instance_creation_time)
    0x0014 -> Ok(instance_creator_uid)
    0x0015 -> Ok(instance_coercion_date_time)
    0x0016 -> Ok(sop_class_uid)
    0x0017 -> Ok(acquisition_uid)
    0x0018 -> Ok(sop_instance_uid)
    0x0019 -> Ok(pyramid_uid)
    0x001A -> Ok(related_general_sop_class_uid)
    0x001B -> Ok(original_specialized_sop_class_uid)
    0x001C -> Ok(synthetic_data)
    0x0020 -> Ok(study_date)
    0x0021 -> Ok(series_date)
    0x0022 -> Ok(acquisition_date)
    0x0023 -> Ok(content_date)
    0x0024 -> Ok(overlay_date)
    0x0025 -> Ok(curve_date)
    0x002A -> Ok(acquisition_date_time)
    0x0030 -> Ok(study_time)
    0x0031 -> Ok(series_time)
    0x0032 -> Ok(acquisition_time)
    0x0033 -> Ok(content_time)
    0x0034 -> Ok(overlay_time)
    0x0035 -> Ok(curve_time)
    0x0040 -> Ok(data_set_type)
    0x0041 -> Ok(data_set_subtype)
    0x0042 -> Ok(nuclear_medicine_series_type)
    0x0050 -> Ok(accession_number)
    0x0051 -> Ok(issuer_of_accession_number_sequence)
    0x0052 -> Ok(query_retrieve_level)
    0x0053 -> Ok(query_retrieve_view)
    0x0054 -> Ok(retrieve_ae_title)
    0x0055 -> Ok(station_ae_title)
    0x0056 -> Ok(instance_availability)
    0x0058 -> Ok(failed_sop_instance_uid_list)
    0x0060 -> Ok(modality)
    0x0061 -> Ok(modalities_in_study)
    0x0062 -> Ok(sop_classes_in_study)
    0x0063 -> Ok(anatomic_regions_in_study_code_sequence)
    0x0064 -> Ok(conversion_type)
    0x0068 -> Ok(presentation_intent_type)
    0x0070 -> Ok(manufacturer)
    0x0080 -> Ok(institution_name)
    0x0081 -> Ok(institution_address)
    0x0082 -> Ok(institution_code_sequence)
    0x0090 -> Ok(referring_physician_name)
    0x0092 -> Ok(referring_physician_address)
    0x0094 -> Ok(referring_physician_telephone_numbers)
    0x0096 -> Ok(referring_physician_identification_sequence)
    0x009C -> Ok(consulting_physician_name)
    0x009D -> Ok(consulting_physician_identification_sequence)
    0x0100 -> Ok(code_value)
    0x0101 -> Ok(extended_code_value)
    0x0102 -> Ok(coding_scheme_designator)
    0x0103 -> Ok(coding_scheme_version)
    0x0104 -> Ok(code_meaning)
    0x0105 -> Ok(mapping_resource)
    0x0106 -> Ok(context_group_version)
    0x0107 -> Ok(context_group_local_version)
    0x0108 -> Ok(extended_code_meaning)
    0x0109 -> Ok(coding_scheme_resources_sequence)
    0x010A -> Ok(coding_scheme_url_type)
    0x010B -> Ok(context_group_extension_flag)
    0x010C -> Ok(coding_scheme_uid)
    0x010D -> Ok(context_group_extension_creator_uid)
    0x010E -> Ok(coding_scheme_url)
    0x010F -> Ok(context_identifier)
    0x0110 -> Ok(coding_scheme_identification_sequence)
    0x0112 -> Ok(coding_scheme_registry)
    0x0114 -> Ok(coding_scheme_external_id)
    0x0115 -> Ok(coding_scheme_name)
    0x0116 -> Ok(coding_scheme_responsible_organization)
    0x0117 -> Ok(context_uid)
    0x0118 -> Ok(mapping_resource_uid)
    0x0119 -> Ok(long_code_value)
    0x0120 -> Ok(urn_code_value)
    0x0121 -> Ok(equivalent_code_sequence)
    0x0122 -> Ok(mapping_resource_name)
    0x0123 -> Ok(context_group_identification_sequence)
    0x0124 -> Ok(mapping_resource_identification_sequence)
    0x0201 -> Ok(timezone_offset_from_utc)
    0x0220 -> Ok(responsible_group_code_sequence)
    0x0221 -> Ok(equipment_modality)
    0x0222 -> Ok(manufacturer_related_model_group)
    0x0300 -> Ok(private_data_element_characteristics_sequence)
    0x0301 -> Ok(private_group_reference)
    0x0302 -> Ok(private_creator_reference)
    0x0303 -> Ok(block_identifying_information_status)
    0x0304 -> Ok(nonidentifying_private_elements)
    0x0305 -> Ok(deidentification_action_sequence)
    0x0306 -> Ok(identifying_private_elements)
    0x0307 -> Ok(deidentification_action)
    0x0308 -> Ok(private_data_element)
    0x0309 -> Ok(private_data_element_value_multiplicity)
    0x030A -> Ok(private_data_element_value_representation)
    0x030B -> Ok(private_data_element_number_of_items)
    0x030C -> Ok(private_data_element_name)
    0x030D -> Ok(private_data_element_keyword)
    0x030E -> Ok(private_data_element_description)
    0x030F -> Ok(private_data_element_encoding)
    0x0310 -> Ok(private_data_element_definition_sequence)
    0x0400 -> Ok(scope_of_inventory_sequence)
    0x0401 -> Ok(inventory_purpose)
    0x0402 -> Ok(inventory_instance_description)
    0x0403 -> Ok(inventory_level)
    0x0404 -> Ok(item_inventory_date_time)
    0x0405 -> Ok(removed_from_operational_use)
    0x0406 -> Ok(reason_for_removal_code_sequence)
    0x0407 -> Ok(stored_instance_base_uri)
    0x0408 -> Ok(folder_access_uri)
    0x0409 -> Ok(file_access_uri)
    0x040A -> Ok(container_file_type)
    0x040B -> Ok(filename_in_container)
    0x040C -> Ok(file_offset_in_container)
    0x040D -> Ok(file_length_in_container)
    0x040E -> Ok(stored_instance_transfer_syntax_uid)
    0x040F -> Ok(extended_matching_mechanisms)
    0x0410 -> Ok(range_matching_sequence)
    0x0411 -> Ok(list_of_uid_matching_sequence)
    0x0412 -> Ok(empty_value_matching_sequence)
    0x0413 -> Ok(general_matching_sequence)
    0x0414 -> Ok(requested_status_interval)
    0x0415 -> Ok(retain_instances)
    0x0416 -> Ok(expiration_date_time)
    0x0417 -> Ok(transaction_status)
    0x0418 -> Ok(transaction_status_comment)
    0x0419 -> Ok(file_set_access_sequence)
    0x041A -> Ok(file_access_sequence)
    0x041B -> Ok(record_key)
    0x041C -> Ok(prior_record_key)
    0x041D -> Ok(metadata_sequence)
    0x041E -> Ok(updated_metadata_sequence)
    0x041F -> Ok(study_update_date_time)
    0x0420 -> Ok(inventory_access_end_points_sequence)
    0x0421 -> Ok(study_access_end_points_sequence)
    0x0422 -> Ok(incorporated_inventory_instance_sequence)
    0x0423 -> Ok(inventoried_studies_sequence)
    0x0424 -> Ok(inventoried_series_sequence)
    0x0425 -> Ok(inventoried_instances_sequence)
    0x0426 -> Ok(inventory_completion_status)
    0x0427 -> Ok(number_of_study_records_in_instance)
    0x0428 -> Ok(total_number_of_study_records)
    0x0429 -> Ok(maximum_number_of_records)
    0x1000 -> Ok(network_id)
    0x1010 -> Ok(station_name)
    0x1030 -> Ok(study_description)
    0x1032 -> Ok(procedure_code_sequence)
    0x103E -> Ok(series_description)
    0x103F -> Ok(series_description_code_sequence)
    0x1040 -> Ok(institutional_department_name)
    0x1041 -> Ok(institutional_department_type_code_sequence)
    0x1048 -> Ok(physicians_of_record)
    0x1049 -> Ok(physicians_of_record_identification_sequence)
    0x1050 -> Ok(performing_physician_name)
    0x1052 -> Ok(performing_physician_identification_sequence)
    0x1060 -> Ok(name_of_physicians_reading_study)
    0x1062 -> Ok(physicians_reading_study_identification_sequence)
    0x1070 -> Ok(operators_name)
    0x1072 -> Ok(operator_identification_sequence)
    0x1080 -> Ok(admitting_diagnoses_description)
    0x1084 -> Ok(admitting_diagnoses_code_sequence)
    0x1088 -> Ok(pyramid_description)
    0x1090 -> Ok(manufacturer_model_name)
    0x1100 -> Ok(referenced_results_sequence)
    0x1110 -> Ok(referenced_study_sequence)
    0x1111 -> Ok(referenced_performed_procedure_step_sequence)
    0x1112 -> Ok(referenced_instances_by_sop_class_sequence)
    0x1115 -> Ok(referenced_series_sequence)
    0x1120 -> Ok(referenced_patient_sequence)
    0x1125 -> Ok(referenced_visit_sequence)
    0x1130 -> Ok(referenced_overlay_sequence)
    0x1134 -> Ok(referenced_stereometric_instance_sequence)
    0x113A -> Ok(referenced_waveform_sequence)
    0x1140 -> Ok(referenced_image_sequence)
    0x1145 -> Ok(referenced_curve_sequence)
    0x114A -> Ok(referenced_instance_sequence)
    0x114B -> Ok(referenced_real_world_value_mapping_instance_sequence)
    0x1150 -> Ok(referenced_sop_class_uid)
    0x1155 -> Ok(referenced_sop_instance_uid)
    0x1156 -> Ok(definition_source_sequence)
    0x115A -> Ok(sop_classes_supported)
    0x1160 -> Ok(referenced_frame_number)
    0x1161 -> Ok(simple_frame_list)
    0x1162 -> Ok(calculated_frame_list)
    0x1163 -> Ok(time_range)
    0x1164 -> Ok(frame_extraction_sequence)
    0x1167 -> Ok(multi_frame_source_sop_instance_uid)
    0x1190 -> Ok(retrieve_url)
    0x1195 -> Ok(transaction_uid)
    0x1196 -> Ok(warning_reason)
    0x1197 -> Ok(failure_reason)
    0x1198 -> Ok(failed_sop_sequence)
    0x1199 -> Ok(referenced_sop_sequence)
    0x119A -> Ok(other_failures_sequence)
    0x119B -> Ok(failed_study_sequence)
    0x1200 -> Ok(studies_containing_other_referenced_instances_sequence)
    0x1250 -> Ok(related_series_sequence)
    0x2110 -> Ok(lossy_image_compression_retired)
    0x2111 -> Ok(derivation_description)
    0x2112 -> Ok(source_image_sequence)
    0x2120 -> Ok(stage_name)
    0x2122 -> Ok(stage_number)
    0x2124 -> Ok(number_of_stages)
    0x2127 -> Ok(view_name)
    0x2128 -> Ok(view_number)
    0x2129 -> Ok(number_of_event_timers)
    0x212A -> Ok(number_of_views_in_stage)
    0x2130 -> Ok(event_elapsed_times)
    0x2132 -> Ok(event_timer_names)
    0x2133 -> Ok(event_timer_sequence)
    0x2134 -> Ok(event_time_offset)
    0x2135 -> Ok(event_code_sequence)
    0x2142 -> Ok(start_trim)
    0x2143 -> Ok(stop_trim)
    0x2144 -> Ok(recommended_display_frame_rate)
    0x2200 -> Ok(transducer_position)
    0x2204 -> Ok(transducer_orientation)
    0x2208 -> Ok(anatomic_structure)
    0x2218 -> Ok(anatomic_region_sequence)
    0x2220 -> Ok(anatomic_region_modifier_sequence)
    0x2228 -> Ok(primary_anatomic_structure_sequence)
    0x2229 -> Ok(anatomic_structure_space_or_region_sequence)
    0x2230 -> Ok(primary_anatomic_structure_modifier_sequence)
    0x2240 -> Ok(transducer_position_sequence)
    0x2242 -> Ok(transducer_position_modifier_sequence)
    0x2244 -> Ok(transducer_orientation_sequence)
    0x2246 -> Ok(transducer_orientation_modifier_sequence)
    0x2251 -> Ok(anatomic_structure_space_or_region_code_sequence_trial)
    0x2253 -> Ok(anatomic_portal_of_entrance_code_sequence_trial)
    0x2255 -> Ok(anatomic_approach_direction_code_sequence_trial)
    0x2256 -> Ok(anatomic_perspective_description_trial)
    0x2257 -> Ok(anatomic_perspective_code_sequence_trial)
    0x2258 -> Ok(anatomic_location_of_examining_instrument_description_trial)
    0x2259 -> Ok(anatomic_location_of_examining_instrument_code_sequence_trial)
    0x225A ->
      Ok(anatomic_structure_space_or_region_modifier_code_sequence_trial)
    0x225C -> Ok(on_axis_background_anatomic_structure_code_sequence_trial)
    0x3001 -> Ok(alternate_representation_sequence)
    0x3002 -> Ok(available_transfer_syntax_uid)
    0x3010 -> Ok(irradiation_event_uid)
    0x3011 -> Ok(source_irradiation_event_sequence)
    0x3012 -> Ok(radiopharmaceutical_administration_event_uid)
    0x4000 -> Ok(identifying_comments)
    0x9007 -> Ok(frame_type)
    0x9092 -> Ok(referenced_image_evidence_sequence)
    0x9121 -> Ok(referenced_raw_data_sequence)
    0x9123 -> Ok(creator_version_uid)
    0x9124 -> Ok(derivation_image_sequence)
    0x9154 -> Ok(source_image_evidence_sequence)
    0x9205 -> Ok(pixel_presentation)
    0x9206 -> Ok(volumetric_properties)
    0x9207 -> Ok(volume_based_calculation_technique)
    0x9208 -> Ok(complex_image_component)
    0x9209 -> Ok(acquisition_contrast)
    0x9215 -> Ok(derivation_code_sequence)
    0x9237 -> Ok(referenced_presentation_state_sequence)
    0x9410 -> Ok(referenced_other_plane_sequence)
    0x9458 -> Ok(frame_display_sequence)
    0x9459 -> Ok(recommended_display_frame_rate_in_float)
    0x9460 -> Ok(skip_frame_range_flag)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0010.
///
fn find_element_in_group_0010(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(patient_name)
    0x0020 -> Ok(patient_id)
    0x0021 -> Ok(issuer_of_patient_id)
    0x0022 -> Ok(type_of_patient_id)
    0x0024 -> Ok(issuer_of_patient_id_qualifiers_sequence)
    0x0026 -> Ok(source_patient_group_identification_sequence)
    0x0027 -> Ok(group_of_patients_identification_sequence)
    0x0028 -> Ok(subject_relative_position_in_image)
    0x0030 -> Ok(patient_birth_date)
    0x0032 -> Ok(patient_birth_time)
    0x0033 -> Ok(patient_birth_date_in_alternative_calendar)
    0x0034 -> Ok(patient_death_date_in_alternative_calendar)
    0x0035 -> Ok(patient_alternative_calendar)
    0x0040 -> Ok(patient_sex)
    0x0050 -> Ok(patient_insurance_plan_code_sequence)
    0x0101 -> Ok(patient_primary_language_code_sequence)
    0x0102 -> Ok(patient_primary_language_modifier_code_sequence)
    0x0200 -> Ok(quality_control_subject)
    0x0201 -> Ok(quality_control_subject_type_code_sequence)
    0x0212 -> Ok(strain_description)
    0x0213 -> Ok(strain_nomenclature)
    0x0214 -> Ok(strain_stock_number)
    0x0215 -> Ok(strain_source_registry_code_sequence)
    0x0216 -> Ok(strain_stock_sequence)
    0x0217 -> Ok(strain_source)
    0x0218 -> Ok(strain_additional_information)
    0x0219 -> Ok(strain_code_sequence)
    0x0221 -> Ok(genetic_modifications_sequence)
    0x0222 -> Ok(genetic_modifications_description)
    0x0223 -> Ok(genetic_modifications_nomenclature)
    0x0229 -> Ok(genetic_modifications_code_sequence)
    0x1000 -> Ok(other_patient_ids)
    0x1001 -> Ok(other_patient_names)
    0x1002 -> Ok(other_patient_ids_sequence)
    0x1005 -> Ok(patient_birth_name)
    0x1010 -> Ok(patient_age)
    0x1020 -> Ok(patient_size)
    0x1021 -> Ok(patient_size_code_sequence)
    0x1022 -> Ok(patient_body_mass_index)
    0x1023 -> Ok(measured_ap_dimension)
    0x1024 -> Ok(measured_lateral_dimension)
    0x1030 -> Ok(patient_weight)
    0x1040 -> Ok(patient_address)
    0x1050 -> Ok(insurance_plan_identification)
    0x1060 -> Ok(patient_mother_birth_name)
    0x1080 -> Ok(military_rank)
    0x1081 -> Ok(branch_of_service)
    0x1090 -> Ok(medical_record_locator)
    0x1100 -> Ok(referenced_patient_photo_sequence)
    0x2000 -> Ok(medical_alerts)
    0x2110 -> Ok(allergies)
    0x2150 -> Ok(country_of_residence)
    0x2152 -> Ok(region_of_residence)
    0x2154 -> Ok(patient_telephone_numbers)
    0x2155 -> Ok(patient_telecom_information)
    0x2160 -> Ok(ethnic_group)
    0x2180 -> Ok(occupation)
    0x21A0 -> Ok(smoking_status)
    0x21B0 -> Ok(additional_patient_history)
    0x21C0 -> Ok(pregnancy_status)
    0x21D0 -> Ok(last_menstrual_date)
    0x21F0 -> Ok(patient_religious_preference)
    0x2201 -> Ok(patient_species_description)
    0x2202 -> Ok(patient_species_code_sequence)
    0x2203 -> Ok(patient_sex_neutered)
    0x2210 -> Ok(anatomical_orientation_type)
    0x2292 -> Ok(patient_breed_description)
    0x2293 -> Ok(patient_breed_code_sequence)
    0x2294 -> Ok(breed_registration_sequence)
    0x2295 -> Ok(breed_registration_number)
    0x2296 -> Ok(breed_registry_code_sequence)
    0x2297 -> Ok(responsible_person)
    0x2298 -> Ok(responsible_person_role)
    0x2299 -> Ok(responsible_organization)
    0x4000 -> Ok(patient_comments)
    0x9431 -> Ok(examined_body_thickness)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0012.
///
fn find_element_in_group_0012(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(clinical_trial_sponsor_name)
    0x0020 -> Ok(clinical_trial_protocol_id)
    0x0021 -> Ok(clinical_trial_protocol_name)
    0x0022 -> Ok(issuer_of_clinical_trial_protocol_id)
    0x0023 -> Ok(other_clinical_trial_protocol_ids_sequence)
    0x0030 -> Ok(clinical_trial_site_id)
    0x0031 -> Ok(clinical_trial_site_name)
    0x0032 -> Ok(issuer_of_clinical_trial_site_id)
    0x0040 -> Ok(clinical_trial_subject_id)
    0x0041 -> Ok(issuer_of_clinical_trial_subject_id)
    0x0042 -> Ok(clinical_trial_subject_reading_id)
    0x0043 -> Ok(issuer_of_clinical_trial_subject_reading_id)
    0x0050 -> Ok(clinical_trial_time_point_id)
    0x0051 -> Ok(clinical_trial_time_point_description)
    0x0052 -> Ok(longitudinal_temporal_offset_from_event)
    0x0053 -> Ok(longitudinal_temporal_event_type)
    0x0054 -> Ok(clinical_trial_time_point_type_code_sequence)
    0x0055 -> Ok(issuer_of_clinical_trial_time_point_id)
    0x0060 -> Ok(clinical_trial_coordinating_center_name)
    0x0062 -> Ok(patient_identity_removed)
    0x0063 -> Ok(deidentification_method)
    0x0064 -> Ok(deidentification_method_code_sequence)
    0x0071 -> Ok(clinical_trial_series_id)
    0x0072 -> Ok(clinical_trial_series_description)
    0x0073 -> Ok(issuer_of_clinical_trial_series_id)
    0x0081 -> Ok(clinical_trial_protocol_ethics_committee_name)
    0x0082 -> Ok(clinical_trial_protocol_ethics_committee_approval_number)
    0x0083 -> Ok(consent_for_clinical_trial_use_sequence)
    0x0084 -> Ok(distribution_type)
    0x0085 -> Ok(consent_for_distribution_flag)
    0x0086 -> Ok(ethics_committee_approval_effectiveness_start_date)
    0x0087 -> Ok(ethics_committee_approval_effectiveness_end_date)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0014.
///
fn find_element_in_group_0014(element: Int) -> Result(Item, Nil) {
  case element {
    0x0023 -> Ok(cad_file_format)
    0x0024 -> Ok(component_reference_system)
    0x0025 -> Ok(component_manufacturing_procedure)
    0x0028 -> Ok(component_manufacturer)
    0x0030 -> Ok(material_thickness)
    0x0032 -> Ok(material_pipe_diameter)
    0x0034 -> Ok(material_isolation_diameter)
    0x0042 -> Ok(material_grade)
    0x0044 -> Ok(material_properties_description)
    0x0045 -> Ok(material_properties_file_format_retired)
    0x0046 -> Ok(material_notes)
    0x0050 -> Ok(component_shape)
    0x0052 -> Ok(curvature_type)
    0x0054 -> Ok(outer_diameter)
    0x0056 -> Ok(inner_diameter)
    0x0100 -> Ok(component_welder_ids)
    0x0101 -> Ok(secondary_approval_status)
    0x0102 -> Ok(secondary_review_date)
    0x0103 -> Ok(secondary_review_time)
    0x0104 -> Ok(secondary_reviewer_name)
    0x0105 -> Ok(repair_id)
    0x0106 -> Ok(multiple_component_approval_sequence)
    0x0107 -> Ok(other_approval_status)
    0x0108 -> Ok(other_secondary_approval_status)
    0x0200 -> Ok(data_element_label_sequence)
    0x0201 -> Ok(data_element_label_item_sequence)
    0x0202 -> Ok(data_element)
    0x0203 -> Ok(data_element_name)
    0x0204 -> Ok(data_element_description)
    0x0205 -> Ok(data_element_conditionality)
    0x0206 -> Ok(data_element_minimum_characters)
    0x0207 -> Ok(data_element_maximum_characters)
    0x1010 -> Ok(actual_environmental_conditions)
    0x1020 -> Ok(expiry_date)
    0x1040 -> Ok(environmental_conditions)
    0x2002 -> Ok(evaluator_sequence)
    0x2004 -> Ok(evaluator_number)
    0x2006 -> Ok(evaluator_name)
    0x2008 -> Ok(evaluation_attempt)
    0x2012 -> Ok(indication_sequence)
    0x2014 -> Ok(indication_number)
    0x2016 -> Ok(indication_label)
    0x2018 -> Ok(indication_description)
    0x201A -> Ok(indication_type)
    0x201C -> Ok(indication_disposition)
    0x201E -> Ok(indication_roi_sequence)
    0x2030 -> Ok(indication_physical_property_sequence)
    0x2032 -> Ok(property_label)
    0x2202 -> Ok(coordinate_system_number_of_axes)
    0x2204 -> Ok(coordinate_system_axes_sequence)
    0x2206 -> Ok(coordinate_system_axis_description)
    0x2208 -> Ok(coordinate_system_data_set_mapping)
    0x220A -> Ok(coordinate_system_axis_number)
    0x220C -> Ok(coordinate_system_axis_type)
    0x220E -> Ok(coordinate_system_axis_units)
    0x2210 -> Ok(coordinate_system_axis_values)
    0x2220 -> Ok(coordinate_system_transform_sequence)
    0x2222 -> Ok(transform_description)
    0x2224 -> Ok(transform_number_of_axes)
    0x2226 -> Ok(transform_order_of_axes)
    0x2228 -> Ok(transformed_axis_units)
    0x222A -> Ok(coordinate_system_transform_rotation_and_scale_matrix)
    0x222C -> Ok(coordinate_system_transform_translation_matrix)
    0x3011 -> Ok(internal_detector_frame_time)
    0x3012 -> Ok(number_of_frames_integrated)
    0x3020 -> Ok(detector_temperature_sequence)
    0x3022 -> Ok(sensor_name)
    0x3024 -> Ok(horizontal_offset_of_sensor)
    0x3026 -> Ok(vertical_offset_of_sensor)
    0x3028 -> Ok(sensor_temperature)
    0x3040 -> Ok(dark_current_sequence)
    0x3050 -> Ok(dark_current_counts)
    0x3060 -> Ok(gain_correction_reference_sequence)
    0x3070 -> Ok(air_counts)
    0x3071 -> Ok(kv_used_in_gain_calibration)
    0x3072 -> Ok(ma_used_in_gain_calibration)
    0x3073 -> Ok(number_of_frames_used_for_integration)
    0x3074 -> Ok(filter_material_used_in_gain_calibration)
    0x3075 -> Ok(filter_thickness_used_in_gain_calibration)
    0x3076 -> Ok(date_of_gain_calibration)
    0x3077 -> Ok(time_of_gain_calibration)
    0x3080 -> Ok(bad_pixel_image)
    0x3099 -> Ok(calibration_notes)
    0x3100 -> Ok(linearity_correction_technique)
    0x3101 -> Ok(beam_hardening_correction_technique)
    0x4002 -> Ok(pulser_equipment_sequence)
    0x4004 -> Ok(pulser_type)
    0x4006 -> Ok(pulser_notes)
    0x4008 -> Ok(receiver_equipment_sequence)
    0x400A -> Ok(amplifier_type)
    0x400C -> Ok(receiver_notes)
    0x400E -> Ok(pre_amplifier_equipment_sequence)
    0x400F -> Ok(pre_amplifier_notes)
    0x4010 -> Ok(transmit_transducer_sequence)
    0x4011 -> Ok(receive_transducer_sequence)
    0x4012 -> Ok(number_of_elements)
    0x4013 -> Ok(element_shape)
    0x4014 -> Ok(element_dimension_a)
    0x4015 -> Ok(element_dimension_b)
    0x4016 -> Ok(element_pitch_a)
    0x4017 -> Ok(measured_beam_dimension_a)
    0x4018 -> Ok(measured_beam_dimension_b)
    0x4019 -> Ok(location_of_measured_beam_diameter)
    0x401A -> Ok(nominal_frequency)
    0x401B -> Ok(measured_center_frequency)
    0x401C -> Ok(measured_bandwidth)
    0x401D -> Ok(element_pitch_b)
    0x4020 -> Ok(pulser_settings_sequence)
    0x4022 -> Ok(pulse_width)
    0x4024 -> Ok(excitation_frequency)
    0x4026 -> Ok(modulation_type)
    0x4028 -> Ok(damping)
    0x4030 -> Ok(receiver_settings_sequence)
    0x4031 -> Ok(acquired_soundpath_length)
    0x4032 -> Ok(acquisition_compression_type)
    0x4033 -> Ok(acquisition_sample_size)
    0x4034 -> Ok(rectifier_smoothing)
    0x4035 -> Ok(dac_sequence)
    0x4036 -> Ok(dac_type)
    0x4038 -> Ok(dac_gain_points)
    0x403A -> Ok(dac_time_points)
    0x403C -> Ok(dac_amplitude)
    0x4040 -> Ok(pre_amplifier_settings_sequence)
    0x4050 -> Ok(transmit_transducer_settings_sequence)
    0x4051 -> Ok(receive_transducer_settings_sequence)
    0x4052 -> Ok(incident_angle)
    0x4054 -> Ok(coupling_technique)
    0x4056 -> Ok(coupling_medium)
    0x4057 -> Ok(coupling_velocity)
    0x4058 -> Ok(probe_center_location_x)
    0x4059 -> Ok(probe_center_location_z)
    0x405A -> Ok(sound_path_length)
    0x405C -> Ok(delay_law_identifier)
    0x4060 -> Ok(gate_settings_sequence)
    0x4062 -> Ok(gate_threshold)
    0x4064 -> Ok(velocity_of_sound)
    0x4070 -> Ok(calibration_settings_sequence)
    0x4072 -> Ok(calibration_procedure)
    0x4074 -> Ok(procedure_version)
    0x4076 -> Ok(procedure_creation_date)
    0x4078 -> Ok(procedure_expiration_date)
    0x407A -> Ok(procedure_last_modified_date)
    0x407C -> Ok(calibration_time)
    0x407E -> Ok(calibration_date)
    0x4080 -> Ok(probe_drive_equipment_sequence)
    0x4081 -> Ok(drive_type)
    0x4082 -> Ok(probe_drive_notes)
    0x4083 -> Ok(drive_probe_sequence)
    0x4084 -> Ok(probe_inductance)
    0x4085 -> Ok(probe_resistance)
    0x4086 -> Ok(receive_probe_sequence)
    0x4087 -> Ok(probe_drive_settings_sequence)
    0x4088 -> Ok(bridge_resistors)
    0x4089 -> Ok(probe_orientation_angle)
    0x408B -> Ok(user_selected_gain_y)
    0x408C -> Ok(user_selected_phase)
    0x408D -> Ok(user_selected_offset_x)
    0x408E -> Ok(user_selected_offset_y)
    0x4091 -> Ok(channel_settings_sequence)
    0x4092 -> Ok(channel_threshold)
    0x409A -> Ok(scanner_settings_sequence)
    0x409B -> Ok(scan_procedure)
    0x409C -> Ok(translation_rate_x)
    0x409D -> Ok(translation_rate_y)
    0x409F -> Ok(channel_overlap)
    0x40A0 -> Ok(image_quality_indicator_type)
    0x40A1 -> Ok(image_quality_indicator_material)
    0x40A2 -> Ok(image_quality_indicator_size)
    0x5002 -> Ok(linac_energy)
    0x5004 -> Ok(linac_output)
    0x5100 -> Ok(active_aperture)
    0x5101 -> Ok(total_aperture)
    0x5102 -> Ok(aperture_elevation)
    0x5103 -> Ok(main_lobe_angle)
    0x5104 -> Ok(main_roof_angle)
    0x5105 -> Ok(connector_type)
    0x5106 -> Ok(wedge_model_number)
    0x5107 -> Ok(wedge_angle_float)
    0x5108 -> Ok(wedge_roof_angle)
    0x5109 -> Ok(wedge_element_1_position)
    0x510A -> Ok(wedge_material_velocity)
    0x510B -> Ok(wedge_material)
    0x510C -> Ok(wedge_offset_z)
    0x510D -> Ok(wedge_origin_offset_x)
    0x510E -> Ok(wedge_time_delay)
    0x510F -> Ok(wedge_name)
    0x5110 -> Ok(wedge_manufacturer_name)
    0x5111 -> Ok(wedge_description)
    0x5112 -> Ok(nominal_beam_angle)
    0x5113 -> Ok(wedge_offset_x)
    0x5114 -> Ok(wedge_offset_y)
    0x5115 -> Ok(wedge_total_length)
    0x5116 -> Ok(wedge_in_contact_length)
    0x5117 -> Ok(wedge_front_gap)
    0x5118 -> Ok(wedge_total_height)
    0x5119 -> Ok(wedge_front_height)
    0x511A -> Ok(wedge_rear_height)
    0x511B -> Ok(wedge_total_width)
    0x511C -> Ok(wedge_in_contact_width)
    0x511D -> Ok(wedge_chamfer_height)
    0x511E -> Ok(wedge_curve)
    0x511F -> Ok(radius_along_wedge)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0016.
///
fn find_element_in_group_0016(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(white_point)
    0x0002 -> Ok(primary_chromaticities)
    0x0003 -> Ok(battery_level)
    0x0004 -> Ok(exposure_time_in_seconds)
    0x0005 -> Ok(f_number)
    0x0006 -> Ok(oecf_rows)
    0x0007 -> Ok(oecf_columns)
    0x0008 -> Ok(oecf_column_names)
    0x0009 -> Ok(oecf_values)
    0x000A -> Ok(spatial_frequency_response_rows)
    0x000B -> Ok(spatial_frequency_response_columns)
    0x000C -> Ok(spatial_frequency_response_column_names)
    0x000D -> Ok(spatial_frequency_response_values)
    0x000E -> Ok(color_filter_array_pattern_rows)
    0x000F -> Ok(color_filter_array_pattern_columns)
    0x0010 -> Ok(color_filter_array_pattern_values)
    0x0011 -> Ok(flash_firing_status)
    0x0012 -> Ok(flash_return_status)
    0x0013 -> Ok(flash_mode)
    0x0014 -> Ok(flash_function_present)
    0x0015 -> Ok(flash_red_eye_mode)
    0x0016 -> Ok(exposure_program)
    0x0017 -> Ok(spectral_sensitivity)
    0x0018 -> Ok(photographic_sensitivity)
    0x0019 -> Ok(self_timer_mode)
    0x001A -> Ok(sensitivity_type)
    0x001B -> Ok(standard_output_sensitivity)
    0x001C -> Ok(recommended_exposure_index)
    0x001D -> Ok(iso_speed)
    0x001E -> Ok(iso_speed_latitude_yyy)
    0x001F -> Ok(iso_speed_latitude_zzz)
    0x0020 -> Ok(exif_version)
    0x0021 -> Ok(shutter_speed_value)
    0x0022 -> Ok(aperture_value)
    0x0023 -> Ok(brightness_value)
    0x0024 -> Ok(exposure_bias_value)
    0x0025 -> Ok(max_aperture_value)
    0x0026 -> Ok(subject_distance)
    0x0027 -> Ok(metering_mode)
    0x0028 -> Ok(light_source)
    0x0029 -> Ok(focal_length)
    0x002A -> Ok(subject_area)
    0x002B -> Ok(maker_note)
    0x0030 -> Ok(temperature)
    0x0031 -> Ok(humidity)
    0x0032 -> Ok(pressure)
    0x0033 -> Ok(water_depth)
    0x0034 -> Ok(acceleration)
    0x0035 -> Ok(camera_elevation_angle)
    0x0036 -> Ok(flash_energy)
    0x0037 -> Ok(subject_location)
    0x0038 -> Ok(photographic_exposure_index)
    0x0039 -> Ok(sensing_method)
    0x003A -> Ok(file_source)
    0x003B -> Ok(scene_type)
    0x0041 -> Ok(custom_rendered)
    0x0042 -> Ok(exposure_mode)
    0x0043 -> Ok(white_balance)
    0x0044 -> Ok(digital_zoom_ratio)
    0x0045 -> Ok(focal_length_in_3_5mm_film)
    0x0046 -> Ok(scene_capture_type)
    0x0047 -> Ok(gain_control)
    0x0048 -> Ok(contrast)
    0x0049 -> Ok(saturation)
    0x004A -> Ok(sharpness)
    0x004B -> Ok(device_setting_description)
    0x004C -> Ok(subject_distance_range)
    0x004D -> Ok(camera_owner_name)
    0x004E -> Ok(lens_specification)
    0x004F -> Ok(lens_make)
    0x0050 -> Ok(lens_model)
    0x0051 -> Ok(lens_serial_number)
    0x0061 -> Ok(interoperability_index)
    0x0062 -> Ok(interoperability_version)
    0x0070 -> Ok(gps_version_id)
    0x0071 -> Ok(gps_latitude_ref)
    0x0072 -> Ok(gps_latitude)
    0x0073 -> Ok(gps_longitude_ref)
    0x0074 -> Ok(gps_longitude)
    0x0075 -> Ok(gps_altitude_ref)
    0x0076 -> Ok(gps_altitude)
    0x0077 -> Ok(gps_time_stamp)
    0x0078 -> Ok(gps_satellites)
    0x0079 -> Ok(gps_status)
    0x007A -> Ok(gps_measure_mode)
    0x007B -> Ok(gpsdop)
    0x007C -> Ok(gps_speed_ref)
    0x007D -> Ok(gps_speed)
    0x007E -> Ok(gps_track_ref)
    0x007F -> Ok(gps_track)
    0x0080 -> Ok(gps_img_direction_ref)
    0x0081 -> Ok(gps_img_direction)
    0x0082 -> Ok(gps_map_datum)
    0x0083 -> Ok(gps_dest_latitude_ref)
    0x0084 -> Ok(gps_dest_latitude)
    0x0085 -> Ok(gps_dest_longitude_ref)
    0x0086 -> Ok(gps_dest_longitude)
    0x0087 -> Ok(gps_dest_bearing_ref)
    0x0088 -> Ok(gps_dest_bearing)
    0x0089 -> Ok(gps_dest_distance_ref)
    0x008A -> Ok(gps_dest_distance)
    0x008B -> Ok(gps_processing_method)
    0x008C -> Ok(gps_area_information)
    0x008D -> Ok(gps_date_stamp)
    0x008E -> Ok(gps_differential)
    0x1001 -> Ok(light_source_polarization)
    0x1002 -> Ok(emitter_color_temperature)
    0x1003 -> Ok(contact_method)
    0x1004 -> Ok(immersion_media)
    0x1005 -> Ok(optical_magnification_factor)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0018.
///
fn find_element_in_group_0018(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(contrast_bolus_agent)
    0x0012 -> Ok(contrast_bolus_agent_sequence)
    0x0013 -> Ok(contrast_bolus_t1_relaxivity)
    0x0014 -> Ok(contrast_bolus_administration_route_sequence)
    0x0015 -> Ok(body_part_examined)
    0x0020 -> Ok(scanning_sequence)
    0x0021 -> Ok(sequence_variant)
    0x0022 -> Ok(scan_options)
    0x0023 -> Ok(mr_acquisition_type)
    0x0024 -> Ok(sequence_name)
    0x0025 -> Ok(angio_flag)
    0x0026 -> Ok(intervention_drug_information_sequence)
    0x0027 -> Ok(intervention_drug_stop_time)
    0x0028 -> Ok(intervention_drug_dose)
    0x0029 -> Ok(intervention_drug_code_sequence)
    0x002A -> Ok(additional_drug_sequence)
    0x0030 -> Ok(radionuclide)
    0x0031 -> Ok(radiopharmaceutical)
    0x0032 -> Ok(energy_window_centerline)
    0x0033 -> Ok(energy_window_total_width)
    0x0034 -> Ok(intervention_drug_name)
    0x0035 -> Ok(intervention_drug_start_time)
    0x0036 -> Ok(intervention_sequence)
    0x0037 -> Ok(therapy_type)
    0x0038 -> Ok(intervention_status)
    0x0039 -> Ok(therapy_description)
    0x003A -> Ok(intervention_description)
    0x0040 -> Ok(cine_rate)
    0x0042 -> Ok(initial_cine_run_state)
    0x0050 -> Ok(slice_thickness)
    0x0060 -> Ok(kvp)
    0x0070 -> Ok(counts_accumulated)
    0x0071 -> Ok(acquisition_termination_condition)
    0x0072 -> Ok(effective_duration)
    0x0073 -> Ok(acquisition_start_condition)
    0x0074 -> Ok(acquisition_start_condition_data)
    0x0075 -> Ok(acquisition_termination_condition_data)
    0x0080 -> Ok(repetition_time)
    0x0081 -> Ok(echo_time)
    0x0082 -> Ok(inversion_time)
    0x0083 -> Ok(number_of_averages)
    0x0084 -> Ok(imaging_frequency)
    0x0085 -> Ok(imaged_nucleus)
    0x0086 -> Ok(echo_numbers)
    0x0087 -> Ok(magnetic_field_strength)
    0x0088 -> Ok(spacing_between_slices)
    0x0089 -> Ok(number_of_phase_encoding_steps)
    0x0090 -> Ok(data_collection_diameter)
    0x0091 -> Ok(echo_train_length)
    0x0093 -> Ok(percent_sampling)
    0x0094 -> Ok(percent_phase_field_of_view)
    0x0095 -> Ok(pixel_bandwidth)
    0x1000 -> Ok(device_serial_number)
    0x1002 -> Ok(device_uid)
    0x1003 -> Ok(device_id)
    0x1004 -> Ok(plate_id)
    0x1005 -> Ok(generator_id)
    0x1006 -> Ok(grid_id)
    0x1007 -> Ok(cassette_id)
    0x1008 -> Ok(gantry_id)
    0x1009 -> Ok(unique_device_identifier)
    0x100A -> Ok(udi_sequence)
    0x100B -> Ok(manufacturer_device_class_uid)
    0x1010 -> Ok(secondary_capture_device_id)
    0x1011 -> Ok(hardcopy_creation_device_id)
    0x1012 -> Ok(date_of_secondary_capture)
    0x1014 -> Ok(time_of_secondary_capture)
    0x1016 -> Ok(secondary_capture_device_manufacturer)
    0x1017 -> Ok(hardcopy_device_manufacturer)
    0x1018 -> Ok(secondary_capture_device_manufacturer_model_name)
    0x1019 -> Ok(secondary_capture_device_software_versions)
    0x101A -> Ok(hardcopy_device_software_version)
    0x101B -> Ok(hardcopy_device_manufacturer_model_name)
    0x1020 -> Ok(software_versions)
    0x1022 -> Ok(video_image_format_acquired)
    0x1023 -> Ok(digital_image_format_acquired)
    0x1030 -> Ok(protocol_name)
    0x1040 -> Ok(contrast_bolus_route)
    0x1041 -> Ok(contrast_bolus_volume)
    0x1042 -> Ok(contrast_bolus_start_time)
    0x1043 -> Ok(contrast_bolus_stop_time)
    0x1044 -> Ok(contrast_bolus_total_dose)
    0x1045 -> Ok(syringe_counts)
    0x1046 -> Ok(contrast_flow_rate)
    0x1047 -> Ok(contrast_flow_duration)
    0x1048 -> Ok(contrast_bolus_ingredient)
    0x1049 -> Ok(contrast_bolus_ingredient_concentration)
    0x1050 -> Ok(spatial_resolution)
    0x1060 -> Ok(trigger_time)
    0x1061 -> Ok(trigger_source_or_type)
    0x1062 -> Ok(nominal_interval)
    0x1063 -> Ok(frame_time)
    0x1064 -> Ok(cardiac_framing_type)
    0x1065 -> Ok(frame_time_vector)
    0x1066 -> Ok(frame_delay)
    0x1067 -> Ok(image_trigger_delay)
    0x1068 -> Ok(multiplex_group_time_offset)
    0x1069 -> Ok(trigger_time_offset)
    0x106A -> Ok(synchronization_trigger)
    0x106C -> Ok(synchronization_channel)
    0x106E -> Ok(trigger_sample_position)
    0x1070 -> Ok(radiopharmaceutical_route)
    0x1071 -> Ok(radiopharmaceutical_volume)
    0x1072 -> Ok(radiopharmaceutical_start_time)
    0x1073 -> Ok(radiopharmaceutical_stop_time)
    0x1074 -> Ok(radionuclide_total_dose)
    0x1075 -> Ok(radionuclide_half_life)
    0x1076 -> Ok(radionuclide_positron_fraction)
    0x1077 -> Ok(radiopharmaceutical_specific_activity)
    0x1078 -> Ok(radiopharmaceutical_start_date_time)
    0x1079 -> Ok(radiopharmaceutical_stop_date_time)
    0x1080 -> Ok(beat_rejection_flag)
    0x1081 -> Ok(low_rr_value)
    0x1082 -> Ok(high_rr_value)
    0x1083 -> Ok(intervals_acquired)
    0x1084 -> Ok(intervals_rejected)
    0x1085 -> Ok(pvc_rejection)
    0x1086 -> Ok(skip_beats)
    0x1088 -> Ok(heart_rate)
    0x1090 -> Ok(cardiac_number_of_images)
    0x1094 -> Ok(trigger_window)
    0x1100 -> Ok(reconstruction_diameter)
    0x1110 -> Ok(distance_source_to_detector)
    0x1111 -> Ok(distance_source_to_patient)
    0x1114 -> Ok(estimated_radiographic_magnification_factor)
    0x1120 -> Ok(gantry_detector_tilt)
    0x1121 -> Ok(gantry_detector_slew)
    0x1130 -> Ok(table_height)
    0x1131 -> Ok(table_traverse)
    0x1134 -> Ok(table_motion)
    0x1135 -> Ok(table_vertical_increment)
    0x1136 -> Ok(table_lateral_increment)
    0x1137 -> Ok(table_longitudinal_increment)
    0x1138 -> Ok(table_angle)
    0x113A -> Ok(table_type)
    0x1140 -> Ok(rotation_direction)
    0x1141 -> Ok(angular_position)
    0x1142 -> Ok(radial_position)
    0x1143 -> Ok(scan_arc)
    0x1144 -> Ok(angular_step)
    0x1145 -> Ok(center_of_rotation_offset)
    0x1146 -> Ok(rotation_offset)
    0x1147 -> Ok(field_of_view_shape)
    0x1149 -> Ok(field_of_view_dimensions)
    0x1150 -> Ok(exposure_time)
    0x1151 -> Ok(x_ray_tube_current)
    0x1152 -> Ok(exposure)
    0x1153 -> Ok(exposure_in_microamp_seconds)
    0x1154 -> Ok(average_pulse_width)
    0x1155 -> Ok(radiation_setting)
    0x1156 -> Ok(rectification_type)
    0x115A -> Ok(radiation_mode)
    0x115E -> Ok(image_and_fluoroscopy_area_dose_product)
    0x1160 -> Ok(filter_type)
    0x1161 -> Ok(type_of_filters)
    0x1162 -> Ok(intensifier_size)
    0x1164 -> Ok(imager_pixel_spacing)
    0x1166 -> Ok(grid)
    0x1170 -> Ok(generator_power)
    0x1180 -> Ok(collimator_grid_name)
    0x1181 -> Ok(collimator_type)
    0x1182 -> Ok(focal_distance)
    0x1183 -> Ok(x_focus_center)
    0x1184 -> Ok(y_focus_center)
    0x1190 -> Ok(focal_spots)
    0x1191 -> Ok(anode_target_material)
    0x11A0 -> Ok(body_part_thickness)
    0x11A2 -> Ok(compression_force)
    0x11A3 -> Ok(compression_pressure)
    0x11A4 -> Ok(paddle_description)
    0x11A5 -> Ok(compression_contact_area)
    0x11B0 -> Ok(acquisition_mode)
    0x11B1 -> Ok(dose_mode_name)
    0x11B2 -> Ok(acquired_subtraction_mask_flag)
    0x11B3 -> Ok(fluoroscopy_persistence_flag)
    0x11B4 -> Ok(fluoroscopy_last_image_hold_persistence_flag)
    0x11B5 -> Ok(upper_limit_number_of_persistent_fluoroscopy_frames)
    0x11B6 -> Ok(contrast_bolus_auto_injection_trigger_flag)
    0x11B7 -> Ok(contrast_bolus_injection_delay)
    0x11B8 -> Ok(xa_acquisition_phase_details_sequence)
    0x11B9 -> Ok(xa_acquisition_frame_rate)
    0x11BA -> Ok(xa_plane_details_sequence)
    0x11BB -> Ok(acquisition_field_of_view_label)
    0x11BC -> Ok(x_ray_filter_details_sequence)
    0x11BD -> Ok(xa_acquisition_duration)
    0x11BE -> Ok(reconstruction_pipeline_type)
    0x11BF -> Ok(image_filter_details_sequence)
    0x11C0 -> Ok(applied_mask_subtraction_flag)
    0x11C1 -> Ok(requested_series_description_code_sequence)
    0x1200 -> Ok(date_of_last_calibration)
    0x1201 -> Ok(time_of_last_calibration)
    0x1202 -> Ok(date_time_of_last_calibration)
    0x1203 -> Ok(calibration_date_time)
    0x1204 -> Ok(date_of_manufacture)
    0x1205 -> Ok(date_of_installation)
    0x1210 -> Ok(convolution_kernel)
    0x1240 -> Ok(upper_lower_pixel_values)
    0x1242 -> Ok(actual_frame_duration)
    0x1243 -> Ok(count_rate)
    0x1244 -> Ok(preferred_playback_sequencing)
    0x1250 -> Ok(receive_coil_name)
    0x1251 -> Ok(transmit_coil_name)
    0x1260 -> Ok(plate_type)
    0x1261 -> Ok(phosphor_type)
    0x1271 -> Ok(water_equivalent_diameter)
    0x1272 -> Ok(water_equivalent_diameter_calculation_method_code_sequence)
    0x1300 -> Ok(scan_velocity)
    0x1301 -> Ok(whole_body_technique)
    0x1302 -> Ok(scan_length)
    0x1310 -> Ok(acquisition_matrix)
    0x1312 -> Ok(in_plane_phase_encoding_direction)
    0x1314 -> Ok(flip_angle)
    0x1315 -> Ok(variable_flip_angle_flag)
    0x1316 -> Ok(sar)
    0x1318 -> Ok(d_bdt)
    0x1320 -> Ok(b_1rms)
    0x1400 -> Ok(acquisition_device_processing_description)
    0x1401 -> Ok(acquisition_device_processing_code)
    0x1402 -> Ok(cassette_orientation)
    0x1403 -> Ok(cassette_size)
    0x1404 -> Ok(exposures_on_plate)
    0x1405 -> Ok(relative_x_ray_exposure)
    0x1411 -> Ok(exposure_index)
    0x1412 -> Ok(target_exposure_index)
    0x1413 -> Ok(deviation_index)
    0x1450 -> Ok(column_angulation)
    0x1460 -> Ok(tomo_layer_height)
    0x1470 -> Ok(tomo_angle)
    0x1480 -> Ok(tomo_time)
    0x1490 -> Ok(tomo_type)
    0x1491 -> Ok(tomo_class)
    0x1495 -> Ok(number_of_tomosynthesis_source_images)
    0x1500 -> Ok(positioner_motion)
    0x1508 -> Ok(positioner_type)
    0x1510 -> Ok(positioner_primary_angle)
    0x1511 -> Ok(positioner_secondary_angle)
    0x1520 -> Ok(positioner_primary_angle_increment)
    0x1521 -> Ok(positioner_secondary_angle_increment)
    0x1530 -> Ok(detector_primary_angle)
    0x1531 -> Ok(detector_secondary_angle)
    0x1600 -> Ok(shutter_shape)
    0x1602 -> Ok(shutter_left_vertical_edge)
    0x1604 -> Ok(shutter_right_vertical_edge)
    0x1606 -> Ok(shutter_upper_horizontal_edge)
    0x1608 -> Ok(shutter_lower_horizontal_edge)
    0x1610 -> Ok(center_of_circular_shutter)
    0x1612 -> Ok(radius_of_circular_shutter)
    0x1620 -> Ok(vertices_of_the_polygonal_shutter)
    0x1622 -> Ok(shutter_presentation_value)
    0x1623 -> Ok(shutter_overlay_group)
    0x1624 -> Ok(shutter_presentation_color_cie_lab_value)
    0x1630 -> Ok(outline_shape_type)
    0x1631 -> Ok(outline_left_vertical_edge)
    0x1632 -> Ok(outline_right_vertical_edge)
    0x1633 -> Ok(outline_upper_horizontal_edge)
    0x1634 -> Ok(outline_lower_horizontal_edge)
    0x1635 -> Ok(center_of_circular_outline)
    0x1636 -> Ok(diameter_of_circular_outline)
    0x1637 -> Ok(number_of_polygonal_vertices)
    0x1638 -> Ok(vertices_of_the_polygonal_outline)
    0x1700 -> Ok(collimator_shape)
    0x1702 -> Ok(collimator_left_vertical_edge)
    0x1704 -> Ok(collimator_right_vertical_edge)
    0x1706 -> Ok(collimator_upper_horizontal_edge)
    0x1708 -> Ok(collimator_lower_horizontal_edge)
    0x1710 -> Ok(center_of_circular_collimator)
    0x1712 -> Ok(radius_of_circular_collimator)
    0x1720 -> Ok(vertices_of_the_polygonal_collimator)
    0x1800 -> Ok(acquisition_time_synchronized)
    0x1801 -> Ok(time_source)
    0x1802 -> Ok(time_distribution_protocol)
    0x1803 -> Ok(ntp_source_address)
    0x2001 -> Ok(page_number_vector)
    0x2002 -> Ok(frame_label_vector)
    0x2003 -> Ok(frame_primary_angle_vector)
    0x2004 -> Ok(frame_secondary_angle_vector)
    0x2005 -> Ok(slice_location_vector)
    0x2006 -> Ok(display_window_label_vector)
    0x2010 -> Ok(nominal_scanned_pixel_spacing)
    0x2020 -> Ok(digitizing_device_transport_direction)
    0x2030 -> Ok(rotation_of_scanned_film)
    0x2041 -> Ok(biopsy_target_sequence)
    0x2042 -> Ok(target_uid)
    0x2043 -> Ok(localizing_cursor_position)
    0x2044 -> Ok(calculated_target_position)
    0x2045 -> Ok(target_label)
    0x2046 -> Ok(displayed_z_value)
    0x3100 -> Ok(ivus_acquisition)
    0x3101 -> Ok(ivus_pullback_rate)
    0x3102 -> Ok(ivus_gated_rate)
    0x3103 -> Ok(ivus_pullback_start_frame_number)
    0x3104 -> Ok(ivus_pullback_stop_frame_number)
    0x3105 -> Ok(lesion_number)
    0x4000 -> Ok(acquisition_comments)
    0x5000 -> Ok(output_power)
    0x5010 -> Ok(transducer_data)
    0x5011 -> Ok(transducer_identification_sequence)
    0x5012 -> Ok(focus_depth)
    0x5020 -> Ok(processing_function)
    0x5021 -> Ok(postprocessing_function)
    0x5022 -> Ok(mechanical_index)
    0x5024 -> Ok(bone_thermal_index)
    0x5026 -> Ok(cranial_thermal_index)
    0x5027 -> Ok(soft_tissue_thermal_index)
    0x5028 -> Ok(soft_tissue_focus_thermal_index)
    0x5029 -> Ok(soft_tissue_surface_thermal_index)
    0x5030 -> Ok(dynamic_range)
    0x5040 -> Ok(total_gain)
    0x5050 -> Ok(depth_of_scan_field)
    0x5100 -> Ok(patient_position)
    0x5101 -> Ok(view_position)
    0x5104 -> Ok(projection_eponymous_name_code_sequence)
    0x5210 -> Ok(image_transformation_matrix)
    0x5212 -> Ok(image_translation_vector)
    0x6000 -> Ok(sensitivity)
    0x6011 -> Ok(sequence_of_ultrasound_regions)
    0x6012 -> Ok(region_spatial_format)
    0x6014 -> Ok(region_data_type)
    0x6016 -> Ok(region_flags)
    0x6018 -> Ok(region_location_min_x0)
    0x601A -> Ok(region_location_min_y0)
    0x601C -> Ok(region_location_max_x1)
    0x601E -> Ok(region_location_max_y1)
    0x6020 -> Ok(reference_pixel_x0)
    0x6022 -> Ok(reference_pixel_y0)
    0x6024 -> Ok(physical_units_x_direction)
    0x6026 -> Ok(physical_units_y_direction)
    0x6028 -> Ok(reference_pixel_physical_value_x)
    0x602A -> Ok(reference_pixel_physical_value_y)
    0x602C -> Ok(physical_delta_x)
    0x602E -> Ok(physical_delta_y)
    0x6030 -> Ok(transducer_frequency)
    0x6031 -> Ok(transducer_type)
    0x6032 -> Ok(pulse_repetition_frequency)
    0x6034 -> Ok(doppler_correction_angle)
    0x6036 -> Ok(steering_angle)
    0x6038 -> Ok(doppler_sample_volume_x_position_retired)
    0x6039 -> Ok(doppler_sample_volume_x_position)
    0x603A -> Ok(doppler_sample_volume_y_position_retired)
    0x603B -> Ok(doppler_sample_volume_y_position)
    0x603C -> Ok(tm_line_position_x0_retired)
    0x603D -> Ok(tm_line_position_x0)
    0x603E -> Ok(tm_line_position_y0_retired)
    0x603F -> Ok(tm_line_position_y0)
    0x6040 -> Ok(tm_line_position_x1_retired)
    0x6041 -> Ok(tm_line_position_x1)
    0x6042 -> Ok(tm_line_position_y1_retired)
    0x6043 -> Ok(tm_line_position_y1)
    0x6044 -> Ok(pixel_component_organization)
    0x6046 -> Ok(pixel_component_mask)
    0x6048 -> Ok(pixel_component_range_start)
    0x604A -> Ok(pixel_component_range_stop)
    0x604C -> Ok(pixel_component_physical_units)
    0x604E -> Ok(pixel_component_data_type)
    0x6050 -> Ok(number_of_table_break_points)
    0x6052 -> Ok(table_of_x_break_points)
    0x6054 -> Ok(table_of_y_break_points)
    0x6056 -> Ok(number_of_table_entries)
    0x6058 -> Ok(table_of_pixel_values)
    0x605A -> Ok(table_of_parameter_values)
    0x6060 -> Ok(r_wave_time_vector)
    0x6070 -> Ok(active_image_area_overlay_group)
    0x7000 -> Ok(detector_conditions_nominal_flag)
    0x7001 -> Ok(detector_temperature)
    0x7004 -> Ok(detector_type)
    0x7005 -> Ok(detector_configuration)
    0x7006 -> Ok(detector_description)
    0x7008 -> Ok(detector_mode)
    0x700A -> Ok(detector_id)
    0x700C -> Ok(date_of_last_detector_calibration)
    0x700E -> Ok(time_of_last_detector_calibration)
    0x7010 -> Ok(exposures_on_detector_since_last_calibration)
    0x7011 -> Ok(exposures_on_detector_since_manufactured)
    0x7012 -> Ok(detector_time_since_last_exposure)
    0x7014 -> Ok(detector_active_time)
    0x7016 -> Ok(detector_activation_offset_from_exposure)
    0x701A -> Ok(detector_binning)
    0x7020 -> Ok(detector_element_physical_size)
    0x7022 -> Ok(detector_element_spacing)
    0x7024 -> Ok(detector_active_shape)
    0x7026 -> Ok(detector_active_dimensions)
    0x7028 -> Ok(detector_active_origin)
    0x702A -> Ok(detector_manufacturer_name)
    0x702B -> Ok(detector_manufacturer_model_name)
    0x7030 -> Ok(field_of_view_origin)
    0x7032 -> Ok(field_of_view_rotation)
    0x7034 -> Ok(field_of_view_horizontal_flip)
    0x7036 -> Ok(pixel_data_area_origin_relative_to_fov)
    0x7038 -> Ok(pixel_data_area_rotation_angle_relative_to_fov)
    0x7040 -> Ok(grid_absorbing_material)
    0x7041 -> Ok(grid_spacing_material)
    0x7042 -> Ok(grid_thickness)
    0x7044 -> Ok(grid_pitch)
    0x7046 -> Ok(grid_aspect_ratio)
    0x7048 -> Ok(grid_period)
    0x704C -> Ok(grid_focal_distance)
    0x7050 -> Ok(filter_material)
    0x7052 -> Ok(filter_thickness_minimum)
    0x7054 -> Ok(filter_thickness_maximum)
    0x7056 -> Ok(filter_beam_path_length_minimum)
    0x7058 -> Ok(filter_beam_path_length_maximum)
    0x7060 -> Ok(exposure_control_mode)
    0x7062 -> Ok(exposure_control_mode_description)
    0x7064 -> Ok(exposure_status)
    0x7065 -> Ok(phototimer_setting)
    0x8150 -> Ok(exposure_time_in_microseconds)
    0x8151 -> Ok(x_ray_tube_current_in_microamps)
    0x9004 -> Ok(content_qualification)
    0x9005 -> Ok(pulse_sequence_name)
    0x9006 -> Ok(mr_imaging_modifier_sequence)
    0x9008 -> Ok(echo_pulse_sequence)
    0x9009 -> Ok(inversion_recovery)
    0x9010 -> Ok(flow_compensation)
    0x9011 -> Ok(multiple_spin_echo)
    0x9012 -> Ok(multi_planar_excitation)
    0x9014 -> Ok(phase_contrast)
    0x9015 -> Ok(time_of_flight_contrast)
    0x9016 -> Ok(spoiling)
    0x9017 -> Ok(steady_state_pulse_sequence)
    0x9018 -> Ok(echo_planar_pulse_sequence)
    0x9019 -> Ok(tag_angle_first_axis)
    0x9020 -> Ok(magnetization_transfer)
    0x9021 -> Ok(t2_preparation)
    0x9022 -> Ok(blood_signal_nulling)
    0x9024 -> Ok(saturation_recovery)
    0x9025 -> Ok(spectrally_selected_suppression)
    0x9026 -> Ok(spectrally_selected_excitation)
    0x9027 -> Ok(spatial_presaturation)
    0x9028 -> Ok(tagging)
    0x9029 -> Ok(oversampling_phase)
    0x9030 -> Ok(tag_spacing_first_dimension)
    0x9032 -> Ok(geometry_of_k_space_traversal)
    0x9033 -> Ok(segmented_k_space_traversal)
    0x9034 -> Ok(rectilinear_phase_encode_reordering)
    0x9035 -> Ok(tag_thickness)
    0x9036 -> Ok(partial_fourier_direction)
    0x9037 -> Ok(cardiac_synchronization_technique)
    0x9041 -> Ok(receive_coil_manufacturer_name)
    0x9042 -> Ok(mr_receive_coil_sequence)
    0x9043 -> Ok(receive_coil_type)
    0x9044 -> Ok(quadrature_receive_coil)
    0x9045 -> Ok(multi_coil_definition_sequence)
    0x9046 -> Ok(multi_coil_configuration)
    0x9047 -> Ok(multi_coil_element_name)
    0x9048 -> Ok(multi_coil_element_used)
    0x9049 -> Ok(mr_transmit_coil_sequence)
    0x9050 -> Ok(transmit_coil_manufacturer_name)
    0x9051 -> Ok(transmit_coil_type)
    0x9052 -> Ok(spectral_width)
    0x9053 -> Ok(chemical_shift_reference)
    0x9054 -> Ok(volume_localization_technique)
    0x9058 -> Ok(mr_acquisition_frequency_encoding_steps)
    0x9059 -> Ok(decoupling)
    0x9060 -> Ok(decoupled_nucleus)
    0x9061 -> Ok(decoupling_frequency)
    0x9062 -> Ok(decoupling_method)
    0x9063 -> Ok(decoupling_chemical_shift_reference)
    0x9064 -> Ok(k_space_filtering)
    0x9065 -> Ok(time_domain_filtering)
    0x9066 -> Ok(number_of_zero_fills)
    0x9067 -> Ok(baseline_correction)
    0x9069 -> Ok(parallel_reduction_factor_in_plane)
    0x9070 -> Ok(cardiac_rr_interval_specified)
    0x9073 -> Ok(acquisition_duration)
    0x9074 -> Ok(frame_acquisition_date_time)
    0x9075 -> Ok(diffusion_directionality)
    0x9076 -> Ok(diffusion_gradient_direction_sequence)
    0x9077 -> Ok(parallel_acquisition)
    0x9078 -> Ok(parallel_acquisition_technique)
    0x9079 -> Ok(inversion_times)
    0x9080 -> Ok(metabolite_map_description)
    0x9081 -> Ok(partial_fourier)
    0x9082 -> Ok(effective_echo_time)
    0x9083 -> Ok(metabolite_map_code_sequence)
    0x9084 -> Ok(chemical_shift_sequence)
    0x9085 -> Ok(cardiac_signal_source)
    0x9087 -> Ok(diffusion_b_value)
    0x9089 -> Ok(diffusion_gradient_orientation)
    0x9090 -> Ok(velocity_encoding_direction)
    0x9091 -> Ok(velocity_encoding_minimum_value)
    0x9092 -> Ok(velocity_encoding_acquisition_sequence)
    0x9093 -> Ok(number_of_k_space_trajectories)
    0x9094 -> Ok(coverage_of_k_space)
    0x9095 -> Ok(spectroscopy_acquisition_phase_rows)
    0x9096 -> Ok(parallel_reduction_factor_in_plane_retired)
    0x9098 -> Ok(transmitter_frequency)
    0x9100 -> Ok(resonant_nucleus)
    0x9101 -> Ok(frequency_correction)
    0x9103 -> Ok(mr_spectroscopy_fov_geometry_sequence)
    0x9104 -> Ok(slab_thickness)
    0x9105 -> Ok(slab_orientation)
    0x9106 -> Ok(mid_slab_position)
    0x9107 -> Ok(mr_spatial_saturation_sequence)
    0x9112 -> Ok(mr_timing_and_related_parameters_sequence)
    0x9114 -> Ok(mr_echo_sequence)
    0x9115 -> Ok(mr_modifier_sequence)
    0x9117 -> Ok(mr_diffusion_sequence)
    0x9118 -> Ok(cardiac_synchronization_sequence)
    0x9119 -> Ok(mr_averages_sequence)
    0x9125 -> Ok(mr_fov_geometry_sequence)
    0x9126 -> Ok(volume_localization_sequence)
    0x9127 -> Ok(spectroscopy_acquisition_data_columns)
    0x9147 -> Ok(diffusion_anisotropy_type)
    0x9151 -> Ok(frame_reference_date_time)
    0x9152 -> Ok(mr_metabolite_map_sequence)
    0x9155 -> Ok(parallel_reduction_factor_out_of_plane)
    0x9159 -> Ok(spectroscopy_acquisition_out_of_plane_phase_steps)
    0x9166 -> Ok(bulk_motion_status)
    0x9168 -> Ok(parallel_reduction_factor_second_in_plane)
    0x9169 -> Ok(cardiac_beat_rejection_technique)
    0x9170 -> Ok(respiratory_motion_compensation_technique)
    0x9171 -> Ok(respiratory_signal_source)
    0x9172 -> Ok(bulk_motion_compensation_technique)
    0x9173 -> Ok(bulk_motion_signal_source)
    0x9174 -> Ok(applicable_safety_standard_agency)
    0x9175 -> Ok(applicable_safety_standard_description)
    0x9176 -> Ok(operating_mode_sequence)
    0x9177 -> Ok(operating_mode_type)
    0x9178 -> Ok(operating_mode)
    0x9179 -> Ok(specific_absorption_rate_definition)
    0x9180 -> Ok(gradient_output_type)
    0x9181 -> Ok(specific_absorption_rate_value)
    0x9182 -> Ok(gradient_output)
    0x9183 -> Ok(flow_compensation_direction)
    0x9184 -> Ok(tagging_delay)
    0x9185 -> Ok(respiratory_motion_compensation_technique_description)
    0x9186 -> Ok(respiratory_signal_source_id)
    0x9195 -> Ok(chemical_shift_minimum_integration_limit_in_hz)
    0x9196 -> Ok(chemical_shift_maximum_integration_limit_in_hz)
    0x9197 -> Ok(mr_velocity_encoding_sequence)
    0x9198 -> Ok(first_order_phase_correction)
    0x9199 -> Ok(water_referenced_phase_correction)
    0x9200 -> Ok(mr_spectroscopy_acquisition_type)
    0x9214 -> Ok(respiratory_cycle_position)
    0x9217 -> Ok(velocity_encoding_maximum_value)
    0x9218 -> Ok(tag_spacing_second_dimension)
    0x9219 -> Ok(tag_angle_second_axis)
    0x9220 -> Ok(frame_acquisition_duration)
    0x9226 -> Ok(mr_image_frame_type_sequence)
    0x9227 -> Ok(mr_spectroscopy_frame_type_sequence)
    0x9231 -> Ok(mr_acquisition_phase_encoding_steps_in_plane)
    0x9232 -> Ok(mr_acquisition_phase_encoding_steps_out_of_plane)
    0x9234 -> Ok(spectroscopy_acquisition_phase_columns)
    0x9236 -> Ok(cardiac_cycle_position)
    0x9239 -> Ok(specific_absorption_rate_sequence)
    0x9240 -> Ok(rf_echo_train_length)
    0x9241 -> Ok(gradient_echo_train_length)
    0x9250 -> Ok(arterial_spin_labeling_contrast)
    0x9251 -> Ok(mr_arterial_spin_labeling_sequence)
    0x9252 -> Ok(asl_technique_description)
    0x9253 -> Ok(asl_slab_number)
    0x9254 -> Ok(asl_slab_thickness)
    0x9255 -> Ok(asl_slab_orientation)
    0x9256 -> Ok(asl_mid_slab_position)
    0x9257 -> Ok(asl_context)
    0x9258 -> Ok(asl_pulse_train_duration)
    0x9259 -> Ok(asl_crusher_flag)
    0x925A -> Ok(asl_crusher_flow_limit)
    0x925B -> Ok(asl_crusher_description)
    0x925C -> Ok(asl_bolus_cutoff_flag)
    0x925D -> Ok(asl_bolus_cutoff_timing_sequence)
    0x925E -> Ok(asl_bolus_cutoff_technique)
    0x925F -> Ok(asl_bolus_cutoff_delay_time)
    0x9260 -> Ok(asl_slab_sequence)
    0x9295 -> Ok(chemical_shift_minimum_integration_limit_inppm)
    0x9296 -> Ok(chemical_shift_maximum_integration_limit_inppm)
    0x9297 -> Ok(water_reference_acquisition)
    0x9298 -> Ok(echo_peak_position)
    0x9301 -> Ok(ct_acquisition_type_sequence)
    0x9302 -> Ok(acquisition_type)
    0x9303 -> Ok(tube_angle)
    0x9304 -> Ok(ct_acquisition_details_sequence)
    0x9305 -> Ok(revolution_time)
    0x9306 -> Ok(single_collimation_width)
    0x9307 -> Ok(total_collimation_width)
    0x9308 -> Ok(ct_table_dynamics_sequence)
    0x9309 -> Ok(table_speed)
    0x9310 -> Ok(table_feed_per_rotation)
    0x9311 -> Ok(spiral_pitch_factor)
    0x9312 -> Ok(ct_geometry_sequence)
    0x9313 -> Ok(data_collection_center_patient)
    0x9314 -> Ok(ct_reconstruction_sequence)
    0x9315 -> Ok(reconstruction_algorithm)
    0x9316 -> Ok(convolution_kernel_group)
    0x9317 -> Ok(reconstruction_field_of_view)
    0x9318 -> Ok(reconstruction_target_center_patient)
    0x9319 -> Ok(reconstruction_angle)
    0x9320 -> Ok(image_filter)
    0x9321 -> Ok(ct_exposure_sequence)
    0x9322 -> Ok(reconstruction_pixel_spacing)
    0x9323 -> Ok(exposure_modulation_type)
    0x9324 -> Ok(estimated_dose_saving)
    0x9325 -> Ok(ct_x_ray_details_sequence)
    0x9326 -> Ok(ct_position_sequence)
    0x9327 -> Ok(table_position)
    0x9328 -> Ok(exposure_time_inms)
    0x9329 -> Ok(ct_image_frame_type_sequence)
    0x9330 -> Ok(x_ray_tube_current_in_milliamps)
    0x9332 -> Ok(exposure_inm_as)
    0x9333 -> Ok(constant_volume_flag)
    0x9334 -> Ok(fluoroscopy_flag)
    0x9335 -> Ok(distance_source_to_data_collection_center)
    0x9337 -> Ok(contrast_bolus_agent_number)
    0x9338 -> Ok(contrast_bolus_ingredient_code_sequence)
    0x9340 -> Ok(contrast_administration_profile_sequence)
    0x9341 -> Ok(contrast_bolus_usage_sequence)
    0x9342 -> Ok(contrast_bolus_agent_administered)
    0x9343 -> Ok(contrast_bolus_agent_detected)
    0x9344 -> Ok(contrast_bolus_agent_phase)
    0x9345 -> Ok(ctdi_vol)
    0x9346 -> Ok(ctdi_phantom_type_code_sequence)
    0x9351 -> Ok(calcium_scoring_mass_factor_patient)
    0x9352 -> Ok(calcium_scoring_mass_factor_device)
    0x9353 -> Ok(energy_weighting_factor)
    0x9360 -> Ok(ct_additional_x_ray_source_sequence)
    0x9361 -> Ok(multienergy_ct_acquisition)
    0x9362 -> Ok(multienergy_ct_acquisition_sequence)
    0x9363 -> Ok(multienergy_ct_processing_sequence)
    0x9364 -> Ok(multienergy_ct_characteristics_sequence)
    0x9365 -> Ok(multienergy_ct_x_ray_source_sequence)
    0x9366 -> Ok(x_ray_source_index)
    0x9367 -> Ok(x_ray_source_id)
    0x9368 -> Ok(multienergy_source_technique)
    0x9369 -> Ok(source_start_date_time)
    0x936A -> Ok(source_end_date_time)
    0x936B -> Ok(switching_phase_number)
    0x936C -> Ok(switching_phase_nominal_duration)
    0x936D -> Ok(switching_phase_transition_duration)
    0x936E -> Ok(effective_bin_energy)
    0x936F -> Ok(multienergy_ct_x_ray_detector_sequence)
    0x9370 -> Ok(x_ray_detector_index)
    0x9371 -> Ok(x_ray_detector_id)
    0x9372 -> Ok(multienergy_detector_type)
    0x9373 -> Ok(x_ray_detector_label)
    0x9374 -> Ok(nominal_max_energy)
    0x9375 -> Ok(nominal_min_energy)
    0x9376 -> Ok(referenced_x_ray_detector_index)
    0x9377 -> Ok(referenced_x_ray_source_index)
    0x9378 -> Ok(referenced_path_index)
    0x9379 -> Ok(multienergy_ct_path_sequence)
    0x937A -> Ok(multienergy_ct_path_index)
    0x937B -> Ok(multienergy_acquisition_description)
    0x937C -> Ok(monoenergetic_energy_equivalent)
    0x937D -> Ok(material_code_sequence)
    0x937E -> Ok(decomposition_method)
    0x937F -> Ok(decomposition_description)
    0x9380 -> Ok(decomposition_algorithm_identification_sequence)
    0x9381 -> Ok(decomposition_material_sequence)
    0x9382 -> Ok(material_attenuation_sequence)
    0x9383 -> Ok(photon_energy)
    0x9384 -> Ok(x_ray_mass_attenuation_coefficient)
    0x9401 -> Ok(projection_pixel_calibration_sequence)
    0x9402 -> Ok(distance_source_to_isocenter)
    0x9403 -> Ok(distance_object_to_table_top)
    0x9404 -> Ok(object_pixel_spacing_in_center_of_beam)
    0x9405 -> Ok(positioner_position_sequence)
    0x9406 -> Ok(table_position_sequence)
    0x9407 -> Ok(collimator_shape_sequence)
    0x9410 -> Ok(planes_in_acquisition)
    0x9412 -> Ok(xaxrf_frame_characteristics_sequence)
    0x9417 -> Ok(frame_acquisition_sequence)
    0x9420 -> Ok(x_ray_receptor_type)
    0x9423 -> Ok(acquisition_protocol_name)
    0x9424 -> Ok(acquisition_protocol_description)
    0x9425 -> Ok(contrast_bolus_ingredient_opaque)
    0x9426 -> Ok(distance_receptor_plane_to_detector_housing)
    0x9427 -> Ok(intensifier_active_shape)
    0x9428 -> Ok(intensifier_active_dimensions)
    0x9429 -> Ok(physical_detector_size)
    0x9430 -> Ok(position_of_isocenter_projection)
    0x9432 -> Ok(field_of_view_sequence)
    0x9433 -> Ok(field_of_view_description)
    0x9434 -> Ok(exposure_control_sensing_regions_sequence)
    0x9435 -> Ok(exposure_control_sensing_region_shape)
    0x9436 -> Ok(exposure_control_sensing_region_left_vertical_edge)
    0x9437 -> Ok(exposure_control_sensing_region_right_vertical_edge)
    0x9438 -> Ok(exposure_control_sensing_region_upper_horizontal_edge)
    0x9439 -> Ok(exposure_control_sensing_region_lower_horizontal_edge)
    0x9440 -> Ok(center_of_circular_exposure_control_sensing_region)
    0x9441 -> Ok(radius_of_circular_exposure_control_sensing_region)
    0x9442 -> Ok(vertices_of_the_polygonal_exposure_control_sensing_region)
    0x9447 -> Ok(column_angulation_patient)
    0x9449 -> Ok(beam_angle)
    0x9451 -> Ok(frame_detector_parameters_sequence)
    0x9452 -> Ok(calculated_anatomy_thickness)
    0x9455 -> Ok(calibration_sequence)
    0x9456 -> Ok(object_thickness_sequence)
    0x9457 -> Ok(plane_identification)
    0x9461 -> Ok(field_of_view_dimensions_in_float)
    0x9462 -> Ok(isocenter_reference_system_sequence)
    0x9463 -> Ok(positioner_isocenter_primary_angle)
    0x9464 -> Ok(positioner_isocenter_secondary_angle)
    0x9465 -> Ok(positioner_isocenter_detector_rotation_angle)
    0x9466 -> Ok(table_x_position_to_isocenter)
    0x9467 -> Ok(table_y_position_to_isocenter)
    0x9468 -> Ok(table_z_position_to_isocenter)
    0x9469 -> Ok(table_horizontal_rotation_angle)
    0x9470 -> Ok(table_head_tilt_angle)
    0x9471 -> Ok(table_cradle_tilt_angle)
    0x9472 -> Ok(frame_display_shutter_sequence)
    0x9473 -> Ok(acquired_image_area_dose_product)
    0x9474 -> Ok(c_arm_positioner_tabletop_relationship)
    0x9476 -> Ok(x_ray_geometry_sequence)
    0x9477 -> Ok(irradiation_event_identification_sequence)
    0x9504 -> Ok(x_ray_3d_frame_type_sequence)
    0x9506 -> Ok(contributing_sources_sequence)
    0x9507 -> Ok(x_ray_3d_acquisition_sequence)
    0x9508 -> Ok(primary_positioner_scan_arc)
    0x9509 -> Ok(secondary_positioner_scan_arc)
    0x9510 -> Ok(primary_positioner_scan_start_angle)
    0x9511 -> Ok(secondary_positioner_scan_start_angle)
    0x9514 -> Ok(primary_positioner_increment)
    0x9515 -> Ok(secondary_positioner_increment)
    0x9516 -> Ok(start_acquisition_date_time)
    0x9517 -> Ok(end_acquisition_date_time)
    0x9518 -> Ok(primary_positioner_increment_sign)
    0x9519 -> Ok(secondary_positioner_increment_sign)
    0x9524 -> Ok(application_name)
    0x9525 -> Ok(application_version)
    0x9526 -> Ok(application_manufacturer)
    0x9527 -> Ok(algorithm_type)
    0x9528 -> Ok(algorithm_description)
    0x9530 -> Ok(x_ray_3d_reconstruction_sequence)
    0x9531 -> Ok(reconstruction_description)
    0x9538 -> Ok(per_projection_acquisition_sequence)
    0x9541 -> Ok(detector_position_sequence)
    0x9542 -> Ok(x_ray_acquisition_dose_sequence)
    0x9543 -> Ok(x_ray_source_isocenter_primary_angle)
    0x9544 -> Ok(x_ray_source_isocenter_secondary_angle)
    0x9545 -> Ok(breast_support_isocenter_primary_angle)
    0x9546 -> Ok(breast_support_isocenter_secondary_angle)
    0x9547 -> Ok(breast_support_x_position_to_isocenter)
    0x9548 -> Ok(breast_support_y_position_to_isocenter)
    0x9549 -> Ok(breast_support_z_position_to_isocenter)
    0x9550 -> Ok(detector_isocenter_primary_angle)
    0x9551 -> Ok(detector_isocenter_secondary_angle)
    0x9552 -> Ok(detector_x_position_to_isocenter)
    0x9553 -> Ok(detector_y_position_to_isocenter)
    0x9554 -> Ok(detector_z_position_to_isocenter)
    0x9555 -> Ok(x_ray_grid_sequence)
    0x9556 -> Ok(x_ray_filter_sequence)
    0x9557 -> Ok(detector_active_area_tlhc_position)
    0x9558 -> Ok(detector_active_area_orientation)
    0x9559 -> Ok(positioner_primary_angle_direction)
    0x9601 -> Ok(diffusion_b_matrix_sequence)
    0x9602 -> Ok(diffusion_b_value_xx)
    0x9603 -> Ok(diffusion_b_value_xy)
    0x9604 -> Ok(diffusion_b_value_xz)
    0x9605 -> Ok(diffusion_b_value_yy)
    0x9606 -> Ok(diffusion_b_value_yz)
    0x9607 -> Ok(diffusion_b_value_zz)
    0x9621 -> Ok(functional_mr_sequence)
    0x9622 -> Ok(functional_settling_phase_frames_present)
    0x9623 -> Ok(functional_sync_pulse)
    0x9624 -> Ok(settling_phase_frame)
    0x9701 -> Ok(decay_correction_date_time)
    0x9715 -> Ok(start_density_threshold)
    0x9716 -> Ok(start_relative_density_difference_threshold)
    0x9717 -> Ok(start_cardiac_trigger_count_threshold)
    0x9718 -> Ok(start_respiratory_trigger_count_threshold)
    0x9719 -> Ok(termination_counts_threshold)
    0x9720 -> Ok(termination_density_threshold)
    0x9721 -> Ok(termination_relative_density_threshold)
    0x9722 -> Ok(termination_time_threshold)
    0x9723 -> Ok(termination_cardiac_trigger_count_threshold)
    0x9724 -> Ok(termination_respiratory_trigger_count_threshold)
    0x9725 -> Ok(detector_geometry)
    0x9726 -> Ok(transverse_detector_separation)
    0x9727 -> Ok(axial_detector_dimension)
    0x9729 -> Ok(radiopharmaceutical_agent_number)
    0x9732 -> Ok(pet_frame_acquisition_sequence)
    0x9733 -> Ok(pet_detector_motion_details_sequence)
    0x9734 -> Ok(pet_table_dynamics_sequence)
    0x9735 -> Ok(pet_position_sequence)
    0x9736 -> Ok(pet_frame_correction_factors_sequence)
    0x9737 -> Ok(radiopharmaceutical_usage_sequence)
    0x9738 -> Ok(attenuation_correction_source)
    0x9739 -> Ok(number_of_iterations)
    0x9740 -> Ok(number_of_subsets)
    0x9749 -> Ok(pet_reconstruction_sequence)
    0x9751 -> Ok(pet_frame_type_sequence)
    0x9755 -> Ok(time_of_flight_information_used)
    0x9756 -> Ok(reconstruction_type)
    0x9758 -> Ok(decay_corrected)
    0x9759 -> Ok(attenuation_corrected)
    0x9760 -> Ok(scatter_corrected)
    0x9761 -> Ok(dead_time_corrected)
    0x9762 -> Ok(gantry_motion_corrected)
    0x9763 -> Ok(patient_motion_corrected)
    0x9764 -> Ok(count_loss_normalization_corrected)
    0x9765 -> Ok(randoms_corrected)
    0x9766 -> Ok(non_uniform_radial_sampling_corrected)
    0x9767 -> Ok(sensitivity_calibrated)
    0x9768 -> Ok(detector_normalization_correction)
    0x9769 -> Ok(iterative_reconstruction_method)
    0x9770 -> Ok(attenuation_correction_temporal_relationship)
    0x9771 -> Ok(patient_physiological_state_sequence)
    0x9772 -> Ok(patient_physiological_state_code_sequence)
    0x9801 -> Ok(depths_of_focus)
    0x9803 -> Ok(excluded_intervals_sequence)
    0x9804 -> Ok(exclusion_start_date_time)
    0x9805 -> Ok(exclusion_duration)
    0x9806 -> Ok(us_image_description_sequence)
    0x9807 -> Ok(image_data_type_sequence)
    0x9808 -> Ok(data_type)
    0x9809 -> Ok(transducer_scan_pattern_code_sequence)
    0x980B -> Ok(aliased_data_type)
    0x980C -> Ok(position_measuring_device_used)
    0x980D -> Ok(transducer_geometry_code_sequence)
    0x980E -> Ok(transducer_beam_steering_code_sequence)
    0x980F -> Ok(transducer_application_code_sequence)
    0x9810 -> Ok(zero_velocity_pixel_value)
    0x9821 -> Ok(photoacoustic_excitation_characteristics_sequence)
    0x9822 -> Ok(excitation_spectral_width)
    0x9823 -> Ok(excitation_energy)
    0x9824 -> Ok(excitation_pulse_duration)
    0x9825 -> Ok(excitation_wavelength_sequence)
    0x9826 -> Ok(excitation_wavelength)
    0x9828 -> Ok(illumination_translation_flag)
    0x9829 -> Ok(acoustic_coupling_medium_flag)
    0x982A -> Ok(acoustic_coupling_medium_code_sequence)
    0x982B -> Ok(acoustic_coupling_medium_temperature)
    0x982C -> Ok(transducer_response_sequence)
    0x982D -> Ok(center_frequency)
    0x982E -> Ok(fractional_bandwidth)
    0x982F -> Ok(lower_cutoff_frequency)
    0x9830 -> Ok(upper_cutoff_frequency)
    0x9831 -> Ok(transducer_technology_sequence)
    0x9832 -> Ok(sound_speed_correction_mechanism_code_sequence)
    0x9833 -> Ok(object_sound_speed)
    0x9834 -> Ok(acoustic_coupling_medium_sound_speed)
    0x9835 -> Ok(photoacoustic_image_frame_type_sequence)
    0x9836 -> Ok(image_data_type_code_sequence)
    0x9900 -> Ok(reference_location_label)
    0x9901 -> Ok(reference_location_description)
    0x9902 -> Ok(reference_basis_code_sequence)
    0x9903 -> Ok(reference_geometry_code_sequence)
    0x9904 -> Ok(offset_distance)
    0x9905 -> Ok(offset_direction)
    0x9906 -> Ok(potential_scheduled_protocol_code_sequence)
    0x9907 -> Ok(potential_requested_procedure_code_sequence)
    0x9908 -> Ok(potential_reasons_for_procedure)
    0x9909 -> Ok(potential_reasons_for_procedure_code_sequence)
    0x990A -> Ok(potential_diagnostic_tasks)
    0x990B -> Ok(contraindications_code_sequence)
    0x990C -> Ok(referenced_defined_protocol_sequence)
    0x990D -> Ok(referenced_performed_protocol_sequence)
    0x990E -> Ok(predecessor_protocol_sequence)
    0x990F -> Ok(protocol_planning_information)
    0x9910 -> Ok(protocol_design_rationale)
    0x9911 -> Ok(patient_specification_sequence)
    0x9912 -> Ok(model_specification_sequence)
    0x9913 -> Ok(parameters_specification_sequence)
    0x9914 -> Ok(instruction_sequence)
    0x9915 -> Ok(instruction_index)
    0x9916 -> Ok(instruction_text)
    0x9917 -> Ok(instruction_description)
    0x9918 -> Ok(instruction_performed_flag)
    0x9919 -> Ok(instruction_performed_date_time)
    0x991A -> Ok(instruction_performance_comment)
    0x991B -> Ok(patient_positioning_instruction_sequence)
    0x991C -> Ok(positioning_method_code_sequence)
    0x991D -> Ok(positioning_landmark_sequence)
    0x991E -> Ok(target_frame_of_reference_uid)
    0x991F -> Ok(acquisition_protocol_element_specification_sequence)
    0x9920 -> Ok(acquisition_protocol_element_sequence)
    0x9921 -> Ok(protocol_element_number)
    0x9922 -> Ok(protocol_element_name)
    0x9923 -> Ok(protocol_element_characteristics_summary)
    0x9924 -> Ok(protocol_element_purpose)
    0x9930 -> Ok(acquisition_motion)
    0x9931 -> Ok(acquisition_start_location_sequence)
    0x9932 -> Ok(acquisition_end_location_sequence)
    0x9933 -> Ok(reconstruction_protocol_element_specification_sequence)
    0x9934 -> Ok(reconstruction_protocol_element_sequence)
    0x9935 -> Ok(storage_protocol_element_specification_sequence)
    0x9936 -> Ok(storage_protocol_element_sequence)
    0x9937 -> Ok(requested_series_description)
    0x9938 -> Ok(source_acquisition_protocol_element_number)
    0x9939 -> Ok(source_acquisition_beam_number)
    0x993A -> Ok(source_reconstruction_protocol_element_number)
    0x993B -> Ok(reconstruction_start_location_sequence)
    0x993C -> Ok(reconstruction_end_location_sequence)
    0x993D -> Ok(reconstruction_algorithm_sequence)
    0x993E -> Ok(reconstruction_target_center_location_sequence)
    0x9941 -> Ok(image_filter_description)
    0x9942 -> Ok(ctdi_vol_notification_trigger)
    0x9943 -> Ok(dlp_notification_trigger)
    0x9944 -> Ok(auto_kvp_selection_type)
    0x9945 -> Ok(auto_kvp_upper_bound)
    0x9946 -> Ok(auto_kvp_lower_bound)
    0x9947 -> Ok(protocol_defined_patient_position)
    0xA001 -> Ok(contributing_equipment_sequence)
    0xA002 -> Ok(contribution_date_time)
    0xA003 -> Ok(contribution_description)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0020.
///
fn find_element_in_group_0020(element: Int) -> Result(Item, Nil) {
  case element {
    0x000D -> Ok(study_instance_uid)
    0x000E -> Ok(series_instance_uid)
    0x0010 -> Ok(study_id)
    0x0011 -> Ok(series_number)
    0x0012 -> Ok(acquisition_number)
    0x0013 -> Ok(instance_number)
    0x0014 -> Ok(isotope_number)
    0x0015 -> Ok(phase_number)
    0x0016 -> Ok(interval_number)
    0x0017 -> Ok(time_slot_number)
    0x0018 -> Ok(angle_number)
    0x0019 -> Ok(item_number)
    0x0020 -> Ok(patient_orientation)
    0x0022 -> Ok(overlay_number)
    0x0024 -> Ok(curve_number)
    0x0026 -> Ok(lut_number)
    0x0027 -> Ok(pyramid_label)
    0x0030 -> Ok(image_position)
    0x0032 -> Ok(image_position_patient)
    0x0035 -> Ok(image_orientation)
    0x0037 -> Ok(image_orientation_patient)
    0x0050 -> Ok(location)
    0x0052 -> Ok(frame_of_reference_uid)
    0x0060 -> Ok(laterality)
    0x0062 -> Ok(image_laterality)
    0x0070 -> Ok(image_geometry_type)
    0x0080 -> Ok(masking_image)
    0x00AA -> Ok(report_number)
    0x0100 -> Ok(temporal_position_identifier)
    0x0105 -> Ok(number_of_temporal_positions)
    0x0110 -> Ok(temporal_resolution)
    0x0200 -> Ok(synchronization_frame_of_reference_uid)
    0x0242 -> Ok(sop_instance_uid_of_concatenation_source)
    0x1000 -> Ok(series_in_study)
    0x1001 -> Ok(acquisitions_in_series)
    0x1002 -> Ok(images_in_acquisition)
    0x1003 -> Ok(images_in_series)
    0x1004 -> Ok(acquisitions_in_study)
    0x1005 -> Ok(images_in_study)
    0x1020 -> Ok(reference)
    0x103F -> Ok(target_position_reference_indicator)
    0x1040 -> Ok(position_reference_indicator)
    0x1041 -> Ok(slice_location)
    0x1070 -> Ok(other_study_numbers)
    0x1200 -> Ok(number_of_patient_related_studies)
    0x1202 -> Ok(number_of_patient_related_series)
    0x1204 -> Ok(number_of_patient_related_instances)
    0x1206 -> Ok(number_of_study_related_series)
    0x1208 -> Ok(number_of_study_related_instances)
    0x1209 -> Ok(number_of_series_related_instances)
    0x3401 -> Ok(modifying_device_id)
    0x3402 -> Ok(modified_image_id)
    0x3403 -> Ok(modified_image_date)
    0x3404 -> Ok(modifying_device_manufacturer)
    0x3405 -> Ok(modified_image_time)
    0x3406 -> Ok(modified_image_description)
    0x4000 -> Ok(image_comments)
    0x5000 -> Ok(original_image_identification)
    0x5002 -> Ok(original_image_identification_nomenclature)
    0x9056 -> Ok(stack_id)
    0x9057 -> Ok(in_stack_position_number)
    0x9071 -> Ok(frame_anatomy_sequence)
    0x9072 -> Ok(frame_laterality)
    0x9111 -> Ok(frame_content_sequence)
    0x9113 -> Ok(plane_position_sequence)
    0x9116 -> Ok(plane_orientation_sequence)
    0x9128 -> Ok(temporal_position_index)
    0x9153 -> Ok(nominal_cardiac_trigger_delay_time)
    0x9154 -> Ok(nominal_cardiac_trigger_time_prior_to_r_peak)
    0x9155 -> Ok(actual_cardiac_trigger_time_prior_to_r_peak)
    0x9156 -> Ok(frame_acquisition_number)
    0x9157 -> Ok(dimension_index_values)
    0x9158 -> Ok(frame_comments)
    0x9161 -> Ok(concatenation_uid)
    0x9162 -> Ok(in_concatenation_number)
    0x9163 -> Ok(in_concatenation_total_number)
    0x9164 -> Ok(dimension_organization_uid)
    0x9165 -> Ok(dimension_index_pointer)
    0x9167 -> Ok(functional_group_pointer)
    0x9170 -> Ok(unassigned_shared_converted_attributes_sequence)
    0x9171 -> Ok(unassigned_per_frame_converted_attributes_sequence)
    0x9172 -> Ok(conversion_source_attributes_sequence)
    0x9213 -> Ok(dimension_index_private_creator)
    0x9221 -> Ok(dimension_organization_sequence)
    0x9222 -> Ok(dimension_index_sequence)
    0x9228 -> Ok(concatenation_frame_offset_number)
    0x9238 -> Ok(functional_group_private_creator)
    0x9241 -> Ok(nominal_percentage_of_cardiac_phase)
    0x9245 -> Ok(nominal_percentage_of_respiratory_phase)
    0x9246 -> Ok(starting_respiratory_amplitude)
    0x9247 -> Ok(starting_respiratory_phase)
    0x9248 -> Ok(ending_respiratory_amplitude)
    0x9249 -> Ok(ending_respiratory_phase)
    0x9250 -> Ok(respiratory_trigger_type)
    0x9251 -> Ok(rr_interval_time_nominal)
    0x9252 -> Ok(actual_cardiac_trigger_delay_time)
    0x9253 -> Ok(respiratory_synchronization_sequence)
    0x9254 -> Ok(respiratory_interval_time)
    0x9255 -> Ok(nominal_respiratory_trigger_delay_time)
    0x9256 -> Ok(respiratory_trigger_delay_threshold)
    0x9257 -> Ok(actual_respiratory_trigger_delay_time)
    0x9301 -> Ok(image_position_volume)
    0x9302 -> Ok(image_orientation_volume)
    0x9307 -> Ok(ultrasound_acquisition_geometry)
    0x9308 -> Ok(apex_position)
    0x9309 -> Ok(volume_to_transducer_mapping_matrix)
    0x930A -> Ok(volume_to_table_mapping_matrix)
    0x930B -> Ok(volume_to_transducer_relationship)
    0x930C -> Ok(patient_frame_of_reference_source)
    0x930D -> Ok(temporal_position_time_offset)
    0x930E -> Ok(plane_position_volume_sequence)
    0x930F -> Ok(plane_orientation_volume_sequence)
    0x9310 -> Ok(temporal_position_sequence)
    0x9311 -> Ok(dimension_organization_type)
    0x9312 -> Ok(volume_frame_of_reference_uid)
    0x9313 -> Ok(table_frame_of_reference_uid)
    0x9421 -> Ok(dimension_description_label)
    0x9450 -> Ok(patient_orientation_in_frame_sequence)
    0x9453 -> Ok(frame_label)
    0x9518 -> Ok(acquisition_index)
    0x9529 -> Ok(contributing_sop_instances_reference_sequence)
    0x9536 -> Ok(reconstruction_index)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0022.
///
fn find_element_in_group_0022(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(light_path_filter_pass_through_wavelength)
    0x0002 -> Ok(light_path_filter_pass_band)
    0x0003 -> Ok(image_path_filter_pass_through_wavelength)
    0x0004 -> Ok(image_path_filter_pass_band)
    0x0005 -> Ok(patient_eye_movement_commanded)
    0x0006 -> Ok(patient_eye_movement_command_code_sequence)
    0x0007 -> Ok(spherical_lens_power)
    0x0008 -> Ok(cylinder_lens_power)
    0x0009 -> Ok(cylinder_axis)
    0x000A -> Ok(emmetropic_magnification)
    0x000B -> Ok(intra_ocular_pressure)
    0x000C -> Ok(horizontal_field_of_view)
    0x000D -> Ok(pupil_dilated)
    0x000E -> Ok(degree_of_dilation)
    0x000F -> Ok(vertex_distance)
    0x0010 -> Ok(stereo_baseline_angle)
    0x0011 -> Ok(stereo_baseline_displacement)
    0x0012 -> Ok(stereo_horizontal_pixel_offset)
    0x0013 -> Ok(stereo_vertical_pixel_offset)
    0x0014 -> Ok(stereo_rotation)
    0x0015 -> Ok(acquisition_device_type_code_sequence)
    0x0016 -> Ok(illumination_type_code_sequence)
    0x0017 -> Ok(light_path_filter_type_stack_code_sequence)
    0x0018 -> Ok(image_path_filter_type_stack_code_sequence)
    0x0019 -> Ok(lenses_code_sequence)
    0x001A -> Ok(channel_description_code_sequence)
    0x001B -> Ok(refractive_state_sequence)
    0x001C -> Ok(mydriatic_agent_code_sequence)
    0x001D -> Ok(relative_image_position_code_sequence)
    0x001E -> Ok(camera_angle_of_view)
    0x0020 -> Ok(stereo_pairs_sequence)
    0x0021 -> Ok(left_image_sequence)
    0x0022 -> Ok(right_image_sequence)
    0x0028 -> Ok(stereo_pairs_present)
    0x0030 -> Ok(axial_length_of_the_eye)
    0x0031 -> Ok(ophthalmic_frame_location_sequence)
    0x0032 -> Ok(reference_coordinates)
    0x0035 -> Ok(depth_spatial_resolution)
    0x0036 -> Ok(maximum_depth_distortion)
    0x0037 -> Ok(along_scan_spatial_resolution)
    0x0038 -> Ok(maximum_along_scan_distortion)
    0x0039 -> Ok(ophthalmic_image_orientation)
    0x0041 -> Ok(depth_of_transverse_image)
    0x0042 -> Ok(mydriatic_agent_concentration_units_sequence)
    0x0048 -> Ok(across_scan_spatial_resolution)
    0x0049 -> Ok(maximum_across_scan_distortion)
    0x004E -> Ok(mydriatic_agent_concentration)
    0x0055 -> Ok(illumination_wave_length)
    0x0056 -> Ok(illumination_power)
    0x0057 -> Ok(illumination_bandwidth)
    0x0058 -> Ok(mydriatic_agent_sequence)
    0x1007 -> Ok(ophthalmic_axial_measurements_right_eye_sequence)
    0x1008 -> Ok(ophthalmic_axial_measurements_left_eye_sequence)
    0x1009 -> Ok(ophthalmic_axial_measurements_device_type)
    0x1010 -> Ok(ophthalmic_axial_length_measurements_type)
    0x1012 -> Ok(ophthalmic_axial_length_sequence)
    0x1019 -> Ok(ophthalmic_axial_length)
    0x1024 -> Ok(lens_status_code_sequence)
    0x1025 -> Ok(vitreous_status_code_sequence)
    0x1028 -> Ok(iol_formula_code_sequence)
    0x1029 -> Ok(iol_formula_detail)
    0x1033 -> Ok(keratometer_index)
    0x1035 -> Ok(source_of_ophthalmic_axial_length_code_sequence)
    0x1036 -> Ok(source_of_corneal_size_data_code_sequence)
    0x1037 -> Ok(target_refraction)
    0x1039 -> Ok(refractive_procedure_occurred)
    0x1040 -> Ok(refractive_surgery_type_code_sequence)
    0x1044 -> Ok(ophthalmic_ultrasound_method_code_sequence)
    0x1045 -> Ok(surgically_induced_astigmatism_sequence)
    0x1046 -> Ok(type_of_optical_correction)
    0x1047 -> Ok(toric_iol_power_sequence)
    0x1048 -> Ok(predicted_toric_error_sequence)
    0x1049 -> Ok(pre_selected_for_implantation)
    0x104A -> Ok(toric_iol_power_for_exact_emmetropia_sequence)
    0x104B -> Ok(toric_iol_power_for_exact_target_refraction_sequence)
    0x1050 -> Ok(ophthalmic_axial_length_measurements_sequence)
    0x1053 -> Ok(iol_power)
    0x1054 -> Ok(predicted_refractive_error)
    0x1059 -> Ok(ophthalmic_axial_length_velocity)
    0x1065 -> Ok(lens_status_description)
    0x1066 -> Ok(vitreous_status_description)
    0x1090 -> Ok(iol_power_sequence)
    0x1092 -> Ok(lens_constant_sequence)
    0x1093 -> Ok(iol_manufacturer)
    0x1094 -> Ok(lens_constant_description)
    0x1095 -> Ok(implant_name)
    0x1096 -> Ok(keratometry_measurement_type_code_sequence)
    0x1097 -> Ok(implant_part_number)
    0x1100 -> Ok(referenced_ophthalmic_axial_measurements_sequence)
    0x1101 ->
      Ok(ophthalmic_axial_length_measurements_segment_name_code_sequence)
    0x1103 -> Ok(refractive_error_before_refractive_surgery_code_sequence)
    0x1121 -> Ok(iol_power_for_exact_emmetropia)
    0x1122 -> Ok(iol_power_for_exact_target_refraction)
    0x1125 -> Ok(anterior_chamber_depth_definition_code_sequence)
    0x1127 -> Ok(lens_thickness_sequence)
    0x1128 -> Ok(anterior_chamber_depth_sequence)
    0x112A -> Ok(calculation_comment_sequence)
    0x112B -> Ok(calculation_comment_type)
    0x112C -> Ok(calculation_comment)
    0x1130 -> Ok(lens_thickness)
    0x1131 -> Ok(anterior_chamber_depth)
    0x1132 -> Ok(source_of_lens_thickness_data_code_sequence)
    0x1133 -> Ok(source_of_anterior_chamber_depth_data_code_sequence)
    0x1134 -> Ok(source_of_refractive_measurements_sequence)
    0x1135 -> Ok(source_of_refractive_measurements_code_sequence)
    0x1140 -> Ok(ophthalmic_axial_length_measurement_modified)
    0x1150 -> Ok(ophthalmic_axial_length_data_source_code_sequence)
    0x1153 -> Ok(ophthalmic_axial_length_acquisition_method_code_sequence)
    0x1155 -> Ok(signal_to_noise_ratio)
    0x1159 -> Ok(ophthalmic_axial_length_data_source_description)
    0x1210 -> Ok(ophthalmic_axial_length_measurements_total_length_sequence)
    0x1211 -> Ok(ophthalmic_axial_length_measurements_segmental_length_sequence)
    0x1212 -> Ok(ophthalmic_axial_length_measurements_length_summation_sequence)
    0x1220 -> Ok(ultrasound_ophthalmic_axial_length_measurements_sequence)
    0x1225 -> Ok(optical_ophthalmic_axial_length_measurements_sequence)
    0x1230 -> Ok(ultrasound_selected_ophthalmic_axial_length_sequence)
    0x1250 -> Ok(ophthalmic_axial_length_selection_method_code_sequence)
    0x1255 -> Ok(optical_selected_ophthalmic_axial_length_sequence)
    0x1257 -> Ok(selected_segmental_ophthalmic_axial_length_sequence)
    0x1260 -> Ok(selected_total_ophthalmic_axial_length_sequence)
    0x1262 -> Ok(ophthalmic_axial_length_quality_metric_sequence)
    0x1265 -> Ok(ophthalmic_axial_length_quality_metric_type_code_sequence)
    0x1273 -> Ok(ophthalmic_axial_length_quality_metric_type_description)
    0x1300 -> Ok(intraocular_lens_calculations_right_eye_sequence)
    0x1310 -> Ok(intraocular_lens_calculations_left_eye_sequence)
    0x1330 ->
      Ok(referenced_ophthalmic_axial_length_measurement_qc_image_sequence)
    0x1415 -> Ok(ophthalmic_mapping_device_type)
    0x1420 -> Ok(acquisition_method_code_sequence)
    0x1423 -> Ok(acquisition_method_algorithm_sequence)
    0x1436 -> Ok(ophthalmic_thickness_map_type_code_sequence)
    0x1443 -> Ok(ophthalmic_thickness_mapping_normals_sequence)
    0x1445 -> Ok(retinal_thickness_definition_code_sequence)
    0x1450 -> Ok(pixel_value_mapping_to_coded_concept_sequence)
    0x1452 -> Ok(mapped_pixel_value)
    0x1454 -> Ok(pixel_value_mapping_explanation)
    0x1458 -> Ok(ophthalmic_thickness_map_quality_threshold_sequence)
    0x1460 -> Ok(ophthalmic_thickness_map_threshold_quality_rating)
    0x1463 -> Ok(anatomic_structure_reference_point)
    0x1465 -> Ok(registration_to_localizer_sequence)
    0x1466 -> Ok(registered_localizer_units)
    0x1467 -> Ok(registered_localizer_top_left_hand_corner)
    0x1468 -> Ok(registered_localizer_bottom_right_hand_corner)
    0x1470 -> Ok(ophthalmic_thickness_map_quality_rating_sequence)
    0x1472 -> Ok(relevant_opt_attributes_sequence)
    0x1512 -> Ok(transformation_method_code_sequence)
    0x1513 -> Ok(transformation_algorithm_sequence)
    0x1515 -> Ok(ophthalmic_axial_length_method)
    0x1517 -> Ok(ophthalmic_fov)
    0x1518 -> Ok(two_dimensional_to_three_dimensional_map_sequence)
    0x1525 -> Ok(wide_field_ophthalmic_photography_quality_rating_sequence)
    0x1526 -> Ok(wide_field_ophthalmic_photography_quality_threshold_sequence)
    0x1527 -> Ok(wide_field_ophthalmic_photography_threshold_quality_rating)
    0x1528 -> Ok(x_coordinates_center_pixel_view_angle)
    0x1529 -> Ok(y_coordinates_center_pixel_view_angle)
    0x1530 -> Ok(number_of_map_points)
    0x1531 -> Ok(two_dimensional_to_three_dimensional_map_data)
    0x1612 -> Ok(derivation_algorithm_sequence)
    0x1615 -> Ok(ophthalmic_image_type_code_sequence)
    0x1616 -> Ok(ophthalmic_image_type_description)
    0x1618 -> Ok(scan_pattern_type_code_sequence)
    0x1620 -> Ok(referenced_surface_mesh_identification_sequence)
    0x1622 -> Ok(ophthalmic_volumetric_properties_flag)
    0x1624 -> Ok(ophthalmic_anatomic_reference_point_x_coordinate)
    0x1626 -> Ok(ophthalmic_anatomic_reference_point_y_coordinate)
    0x1628 -> Ok(ophthalmic_en_face_image_quality_rating_sequence)
    0x1630 -> Ok(quality_threshold)
    0x1640 -> Ok(oct_bscan_analysis_acquisition_parameters_sequence)
    0x1642 -> Ok(number_of_bscans_per_frame)
    0x1643 -> Ok(bscan_slab_thickness)
    0x1644 -> Ok(distance_between_bscan_slabs)
    0x1645 -> Ok(bscan_cycle_time)
    0x1646 -> Ok(bscan_cycle_time_vector)
    0x1649 -> Ok(ascan_rate)
    0x1650 -> Ok(bscan_rate)
    0x1658 -> Ok(surface_mesh_z_pixel_offset)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0024.
///
fn find_element_in_group_0024(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(visual_field_horizontal_extent)
    0x0011 -> Ok(visual_field_vertical_extent)
    0x0012 -> Ok(visual_field_shape)
    0x0016 -> Ok(screening_test_mode_code_sequence)
    0x0018 -> Ok(maximum_stimulus_luminance)
    0x0020 -> Ok(background_luminance)
    0x0021 -> Ok(stimulus_color_code_sequence)
    0x0024 -> Ok(background_illumination_color_code_sequence)
    0x0025 -> Ok(stimulus_area)
    0x0028 -> Ok(stimulus_presentation_time)
    0x0032 -> Ok(fixation_sequence)
    0x0033 -> Ok(fixation_monitoring_code_sequence)
    0x0034 -> Ok(visual_field_catch_trial_sequence)
    0x0035 -> Ok(fixation_checked_quantity)
    0x0036 -> Ok(patient_not_properly_fixated_quantity)
    0x0037 -> Ok(presented_visual_stimuli_data_flag)
    0x0038 -> Ok(number_of_visual_stimuli)
    0x0039 -> Ok(excessive_fixation_losses_data_flag)
    0x0040 -> Ok(excessive_fixation_losses)
    0x0042 -> Ok(stimuli_retesting_quantity)
    0x0044 -> Ok(comments_on_patient_performance_of_visual_field)
    0x0045 -> Ok(false_negatives_estimate_flag)
    0x0046 -> Ok(false_negatives_estimate)
    0x0048 -> Ok(negative_catch_trials_quantity)
    0x0050 -> Ok(false_negatives_quantity)
    0x0051 -> Ok(excessive_false_negatives_data_flag)
    0x0052 -> Ok(excessive_false_negatives)
    0x0053 -> Ok(false_positives_estimate_flag)
    0x0054 -> Ok(false_positives_estimate)
    0x0055 -> Ok(catch_trials_data_flag)
    0x0056 -> Ok(positive_catch_trials_quantity)
    0x0057 -> Ok(test_point_normals_data_flag)
    0x0058 -> Ok(test_point_normals_sequence)
    0x0059 -> Ok(global_deviation_probability_normals_flag)
    0x0060 -> Ok(false_positives_quantity)
    0x0061 -> Ok(excessive_false_positives_data_flag)
    0x0062 -> Ok(excessive_false_positives)
    0x0063 -> Ok(visual_field_test_normals_flag)
    0x0064 -> Ok(results_normals_sequence)
    0x0065 -> Ok(age_corrected_sensitivity_deviation_algorithm_sequence)
    0x0066 -> Ok(global_deviation_from_normal)
    0x0067 -> Ok(generalized_defect_sensitivity_deviation_algorithm_sequence)
    0x0068 -> Ok(localized_deviation_from_normal)
    0x0069 -> Ok(patient_reliability_indicator)
    0x0070 -> Ok(visual_field_mean_sensitivity)
    0x0071 -> Ok(global_deviation_probability)
    0x0072 -> Ok(local_deviation_probability_normals_flag)
    0x0073 -> Ok(localized_deviation_probability)
    0x0074 -> Ok(short_term_fluctuation_calculated)
    0x0075 -> Ok(short_term_fluctuation)
    0x0076 -> Ok(short_term_fluctuation_probability_calculated)
    0x0077 -> Ok(short_term_fluctuation_probability)
    0x0078 -> Ok(corrected_localized_deviation_from_normal_calculated)
    0x0079 -> Ok(corrected_localized_deviation_from_normal)
    0x0080 ->
      Ok(corrected_localized_deviation_from_normal_probability_calculated)
    0x0081 -> Ok(corrected_localized_deviation_from_normal_probability)
    0x0083 -> Ok(global_deviation_probability_sequence)
    0x0085 -> Ok(localized_deviation_probability_sequence)
    0x0086 -> Ok(foveal_sensitivity_measured)
    0x0087 -> Ok(foveal_sensitivity)
    0x0088 -> Ok(visual_field_test_duration)
    0x0089 -> Ok(visual_field_test_point_sequence)
    0x0090 -> Ok(visual_field_test_point_x_coordinate)
    0x0091 -> Ok(visual_field_test_point_y_coordinate)
    0x0092 -> Ok(age_corrected_sensitivity_deviation_value)
    0x0093 -> Ok(stimulus_results)
    0x0094 -> Ok(sensitivity_value)
    0x0095 -> Ok(retest_stimulus_seen)
    0x0096 -> Ok(retest_sensitivity_value)
    0x0097 -> Ok(visual_field_test_point_normals_sequence)
    0x0098 -> Ok(quantified_defect)
    0x0100 -> Ok(age_corrected_sensitivity_deviation_probability_value)
    0x0102 -> Ok(generalized_defect_corrected_sensitivity_deviation_flag)
    0x0103 -> Ok(generalized_defect_corrected_sensitivity_deviation_value)
    0x0104 ->
      Ok(generalized_defect_corrected_sensitivity_deviation_probability_value)
    0x0105 -> Ok(minimum_sensitivity_value)
    0x0106 -> Ok(blind_spot_localized)
    0x0107 -> Ok(blind_spot_x_coordinate)
    0x0108 -> Ok(blind_spot_y_coordinate)
    0x0110 -> Ok(visual_acuity_measurement_sequence)
    0x0112 -> Ok(refractive_parameters_used_on_patient_sequence)
    0x0113 -> Ok(measurement_laterality)
    0x0114 -> Ok(ophthalmic_patient_clinical_information_left_eye_sequence)
    0x0115 -> Ok(ophthalmic_patient_clinical_information_right_eye_sequence)
    0x0117 -> Ok(foveal_point_normative_data_flag)
    0x0118 -> Ok(foveal_point_probability_value)
    0x0120 -> Ok(screening_baseline_measured)
    0x0122 -> Ok(screening_baseline_measured_sequence)
    0x0124 -> Ok(screening_baseline_type)
    0x0126 -> Ok(screening_baseline_value)
    0x0202 -> Ok(algorithm_source)
    0x0306 -> Ok(data_set_name)
    0x0307 -> Ok(data_set_version)
    0x0308 -> Ok(data_set_source)
    0x0309 -> Ok(data_set_description)
    0x0317 -> Ok(visual_field_test_reliability_global_index_sequence)
    0x0320 -> Ok(visual_field_global_results_index_sequence)
    0x0325 -> Ok(data_observation_sequence)
    0x0338 -> Ok(index_normals_flag)
    0x0341 -> Ok(index_probability)
    0x0344 -> Ok(index_probability_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0028.
///
fn find_element_in_group_0028(element: Int) -> Result(Item, Nil) {
  case element {
    0x0002 -> Ok(samples_per_pixel)
    0x0003 -> Ok(samples_per_pixel_used)
    0x0004 -> Ok(photometric_interpretation)
    0x0005 -> Ok(image_dimensions)
    0x0006 -> Ok(planar_configuration)
    0x0008 -> Ok(number_of_frames)
    0x0009 -> Ok(frame_increment_pointer)
    0x000A -> Ok(frame_dimension_pointer)
    0x0010 -> Ok(rows)
    0x0011 -> Ok(columns)
    0x0012 -> Ok(planes)
    0x0014 -> Ok(ultrasound_color_data_present)
    0x0030 -> Ok(pixel_spacing)
    0x0031 -> Ok(zoom_factor)
    0x0032 -> Ok(zoom_center)
    0x0034 -> Ok(pixel_aspect_ratio)
    0x0040 -> Ok(image_format)
    0x0050 -> Ok(manipulated_image)
    0x0051 -> Ok(corrected_image)
    0x005F -> Ok(compression_recognition_code)
    0x0060 -> Ok(compression_code)
    0x0061 -> Ok(compression_originator)
    0x0062 -> Ok(compression_label)
    0x0063 -> Ok(compression_description)
    0x0065 -> Ok(compression_sequence)
    0x0066 -> Ok(compression_step_pointers)
    0x0068 -> Ok(repeat_interval)
    0x0069 -> Ok(bits_grouped)
    0x0070 -> Ok(perimeter_table)
    0x0071 -> Ok(perimeter_value)
    0x0080 -> Ok(predictor_rows)
    0x0081 -> Ok(predictor_columns)
    0x0082 -> Ok(predictor_constants)
    0x0090 -> Ok(blocked_pixels)
    0x0091 -> Ok(block_rows)
    0x0092 -> Ok(block_columns)
    0x0093 -> Ok(row_overlap)
    0x0094 -> Ok(column_overlap)
    0x0100 -> Ok(bits_allocated)
    0x0101 -> Ok(bits_stored)
    0x0102 -> Ok(high_bit)
    0x0103 -> Ok(pixel_representation)
    0x0104 -> Ok(smallest_valid_pixel_value)
    0x0105 -> Ok(largest_valid_pixel_value)
    0x0106 -> Ok(smallest_image_pixel_value)
    0x0107 -> Ok(largest_image_pixel_value)
    0x0108 -> Ok(smallest_pixel_value_in_series)
    0x0109 -> Ok(largest_pixel_value_in_series)
    0x0110 -> Ok(smallest_image_pixel_value_in_plane)
    0x0111 -> Ok(largest_image_pixel_value_in_plane)
    0x0120 -> Ok(pixel_padding_value)
    0x0121 -> Ok(pixel_padding_range_limit)
    0x0122 -> Ok(float_pixel_padding_value)
    0x0123 -> Ok(double_float_pixel_padding_value)
    0x0124 -> Ok(float_pixel_padding_range_limit)
    0x0125 -> Ok(double_float_pixel_padding_range_limit)
    0x0200 -> Ok(image_location)
    0x0300 -> Ok(quality_control_image)
    0x0301 -> Ok(burned_in_annotation)
    0x0302 -> Ok(recognizable_visual_features)
    0x0303 -> Ok(longitudinal_temporal_information_modified)
    0x0304 -> Ok(referenced_color_palette_instance_uid)
    0x0400 -> Ok(transform_label)
    0x0401 -> Ok(transform_version_number)
    0x0402 -> Ok(number_of_transform_steps)
    0x0403 -> Ok(sequence_of_compressed_data)
    0x0404 -> Ok(details_of_coefficients)
    0x0700 -> Ok(dct_label)
    0x0701 -> Ok(data_block_description)
    0x0702 -> Ok(data_block)
    0x0710 -> Ok(normalization_factor_format)
    0x0720 -> Ok(zonal_map_number_format)
    0x0721 -> Ok(zonal_map_location)
    0x0722 -> Ok(zonal_map_format)
    0x0730 -> Ok(adaptive_map_format)
    0x0740 -> Ok(code_number_format)
    0x0A02 -> Ok(pixel_spacing_calibration_type)
    0x0A04 -> Ok(pixel_spacing_calibration_description)
    0x1040 -> Ok(pixel_intensity_relationship)
    0x1041 -> Ok(pixel_intensity_relationship_sign)
    0x1050 -> Ok(window_center)
    0x1051 -> Ok(window_width)
    0x1052 -> Ok(rescale_intercept)
    0x1053 -> Ok(rescale_slope)
    0x1054 -> Ok(rescale_type)
    0x1055 -> Ok(window_center_width_explanation)
    0x1056 -> Ok(voilut_function)
    0x1080 -> Ok(gray_scale)
    0x1090 -> Ok(recommended_viewing_mode)
    0x1100 -> Ok(gray_lookup_table_descriptor)
    0x1101 -> Ok(red_palette_color_lookup_table_descriptor)
    0x1102 -> Ok(green_palette_color_lookup_table_descriptor)
    0x1103 -> Ok(blue_palette_color_lookup_table_descriptor)
    0x1104 -> Ok(alpha_palette_color_lookup_table_descriptor)
    0x1111 -> Ok(large_red_palette_color_lookup_table_descriptor)
    0x1112 -> Ok(large_green_palette_color_lookup_table_descriptor)
    0x1113 -> Ok(large_blue_palette_color_lookup_table_descriptor)
    0x1199 -> Ok(palette_color_lookup_table_uid)
    0x1200 -> Ok(gray_lookup_table_data)
    0x1201 -> Ok(red_palette_color_lookup_table_data)
    0x1202 -> Ok(green_palette_color_lookup_table_data)
    0x1203 -> Ok(blue_palette_color_lookup_table_data)
    0x1204 -> Ok(alpha_palette_color_lookup_table_data)
    0x1211 -> Ok(large_red_palette_color_lookup_table_data)
    0x1212 -> Ok(large_green_palette_color_lookup_table_data)
    0x1213 -> Ok(large_blue_palette_color_lookup_table_data)
    0x1214 -> Ok(large_palette_color_lookup_table_uid)
    0x1221 -> Ok(segmented_red_palette_color_lookup_table_data)
    0x1222 -> Ok(segmented_green_palette_color_lookup_table_data)
    0x1223 -> Ok(segmented_blue_palette_color_lookup_table_data)
    0x1224 -> Ok(segmented_alpha_palette_color_lookup_table_data)
    0x1230 -> Ok(stored_value_color_range_sequence)
    0x1231 -> Ok(minimum_stored_value_mapped)
    0x1232 -> Ok(maximum_stored_value_mapped)
    0x1300 -> Ok(breast_implant_present)
    0x1350 -> Ok(partial_view)
    0x1351 -> Ok(partial_view_description)
    0x1352 -> Ok(partial_view_code_sequence)
    0x135A -> Ok(spatial_locations_preserved)
    0x1401 -> Ok(data_frame_assignment_sequence)
    0x1402 -> Ok(data_path_assignment)
    0x1403 -> Ok(bits_mapped_to_color_lookup_table)
    0x1404 -> Ok(blending_lut1_sequence)
    0x1405 -> Ok(blending_lut1_transfer_function)
    0x1406 -> Ok(blending_weight_constant)
    0x1407 -> Ok(blending_lookup_table_descriptor)
    0x1408 -> Ok(blending_lookup_table_data)
    0x140B -> Ok(enhanced_palette_color_lookup_table_sequence)
    0x140C -> Ok(blending_lut2_sequence)
    0x140D -> Ok(blending_lut2_transfer_function)
    0x140E -> Ok(data_path_id)
    0x140F -> Ok(rgblut_transfer_function)
    0x1410 -> Ok(alpha_lut_transfer_function)
    0x2000 -> Ok(icc_profile)
    0x2002 -> Ok(color_space)
    0x2110 -> Ok(lossy_image_compression)
    0x2112 -> Ok(lossy_image_compression_ratio)
    0x2114 -> Ok(lossy_image_compression_method)
    0x3000 -> Ok(modality_lut_sequence)
    0x3001 -> Ok(variable_modality_lut_sequence)
    0x3002 -> Ok(lut_descriptor)
    0x3003 -> Ok(lut_explanation)
    0x3004 -> Ok(modality_lut_type)
    0x3006 -> Ok(lut_data)
    0x3010 -> Ok(voilut_sequence)
    0x3110 -> Ok(softcopy_voilut_sequence)
    0x4000 -> Ok(image_presentation_comments)
    0x5000 -> Ok(bi_plane_acquisition_sequence)
    0x6010 -> Ok(representative_frame_number)
    0x6020 -> Ok(frame_numbers_of_interest)
    0x6022 -> Ok(frame_of_interest_description)
    0x6023 -> Ok(frame_of_interest_type)
    0x6030 -> Ok(mask_pointers)
    0x6040 -> Ok(r_wave_pointer)
    0x6100 -> Ok(mask_subtraction_sequence)
    0x6101 -> Ok(mask_operation)
    0x6102 -> Ok(applicable_frame_range)
    0x6110 -> Ok(mask_frame_numbers)
    0x6112 -> Ok(contrast_frame_averaging)
    0x6114 -> Ok(mask_sub_pixel_shift)
    0x6120 -> Ok(tid_offset)
    0x6190 -> Ok(mask_operation_explanation)
    0x7000 -> Ok(equipment_administrator_sequence)
    0x7001 -> Ok(number_of_display_subsystems)
    0x7002 -> Ok(current_configuration_id)
    0x7003 -> Ok(display_subsystem_id)
    0x7004 -> Ok(display_subsystem_name)
    0x7005 -> Ok(display_subsystem_description)
    0x7006 -> Ok(system_status)
    0x7007 -> Ok(system_status_comment)
    0x7008 -> Ok(target_luminance_characteristics_sequence)
    0x7009 -> Ok(luminance_characteristics_id)
    0x700A -> Ok(display_subsystem_configuration_sequence)
    0x700B -> Ok(configuration_id)
    0x700C -> Ok(configuration_name)
    0x700D -> Ok(configuration_description)
    0x700E -> Ok(referenced_target_luminance_characteristics_id)
    0x700F -> Ok(qa_results_sequence)
    0x7010 -> Ok(display_subsystem_qa_results_sequence)
    0x7011 -> Ok(configuration_qa_results_sequence)
    0x7012 -> Ok(measurement_equipment_sequence)
    0x7013 -> Ok(measurement_functions)
    0x7014 -> Ok(measurement_equipment_type)
    0x7015 -> Ok(visual_evaluation_result_sequence)
    0x7016 -> Ok(display_calibration_result_sequence)
    0x7017 -> Ok(ddl_value)
    0x7018 -> Ok(ci_exy_white_point)
    0x7019 -> Ok(display_function_type)
    0x701A -> Ok(gamma_value)
    0x701B -> Ok(number_of_luminance_points)
    0x701C -> Ok(luminance_response_sequence)
    0x701D -> Ok(target_minimum_luminance)
    0x701E -> Ok(target_maximum_luminance)
    0x701F -> Ok(luminance_value)
    0x7020 -> Ok(luminance_response_description)
    0x7021 -> Ok(white_point_flag)
    0x7022 -> Ok(display_device_type_code_sequence)
    0x7023 -> Ok(display_subsystem_sequence)
    0x7024 -> Ok(luminance_result_sequence)
    0x7025 -> Ok(ambient_light_value_source)
    0x7026 -> Ok(measured_characteristics)
    0x7027 -> Ok(luminance_uniformity_result_sequence)
    0x7028 -> Ok(visual_evaluation_test_sequence)
    0x7029 -> Ok(test_result)
    0x702A -> Ok(test_result_comment)
    0x702B -> Ok(test_image_validation)
    0x702C -> Ok(test_pattern_code_sequence)
    0x702D -> Ok(measurement_pattern_code_sequence)
    0x702E -> Ok(visual_evaluation_method_code_sequence)
    0x7FE0 -> Ok(pixel_data_provider_url)
    0x9001 -> Ok(data_point_rows)
    0x9002 -> Ok(data_point_columns)
    0x9003 -> Ok(signal_domain_columns)
    0x9099 -> Ok(largest_monochrome_pixel_value)
    0x9108 -> Ok(data_representation)
    0x9110 -> Ok(pixel_measures_sequence)
    0x9132 -> Ok(frame_voilut_sequence)
    0x9145 -> Ok(pixel_value_transformation_sequence)
    0x9235 -> Ok(signal_domain_rows)
    0x9411 -> Ok(display_filter_percentage)
    0x9415 -> Ok(frame_pixel_shift_sequence)
    0x9416 -> Ok(subtraction_item_id)
    0x9422 -> Ok(pixel_intensity_relationship_lut_sequence)
    0x9443 -> Ok(frame_pixel_data_properties_sequence)
    0x9444 -> Ok(geometrical_properties)
    0x9445 -> Ok(geometric_maximum_distortion)
    0x9446 -> Ok(image_processing_applied)
    0x9454 -> Ok(mask_selection_mode)
    0x9474 -> Ok(lut_function)
    0x9478 -> Ok(mask_visibility_percentage)
    0x9501 -> Ok(pixel_shift_sequence)
    0x9502 -> Ok(region_pixel_shift_sequence)
    0x9503 -> Ok(vertices_of_the_region)
    0x9505 -> Ok(multi_frame_presentation_sequence)
    0x9506 -> Ok(pixel_shift_frame_range)
    0x9507 -> Ok(lut_frame_range)
    0x9520 -> Ok(image_to_equipment_mapping_matrix)
    0x9537 -> Ok(equipment_coordinate_system_identification)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0032.
///
fn find_element_in_group_0032(element: Int) -> Result(Item, Nil) {
  case element {
    0x000A -> Ok(study_status_id)
    0x000C -> Ok(study_priority_id)
    0x0012 -> Ok(study_id_issuer)
    0x0032 -> Ok(study_verified_date)
    0x0033 -> Ok(study_verified_time)
    0x0034 -> Ok(study_read_date)
    0x0035 -> Ok(study_read_time)
    0x1000 -> Ok(scheduled_study_start_date)
    0x1001 -> Ok(scheduled_study_start_time)
    0x1010 -> Ok(scheduled_study_stop_date)
    0x1011 -> Ok(scheduled_study_stop_time)
    0x1020 -> Ok(scheduled_study_location)
    0x1021 -> Ok(scheduled_study_location_ae_title)
    0x1030 -> Ok(reason_for_study)
    0x1031 -> Ok(requesting_physician_identification_sequence)
    0x1032 -> Ok(requesting_physician)
    0x1033 -> Ok(requesting_service)
    0x1034 -> Ok(requesting_service_code_sequence)
    0x1040 -> Ok(study_arrival_date)
    0x1041 -> Ok(study_arrival_time)
    0x1050 -> Ok(study_completion_date)
    0x1051 -> Ok(study_completion_time)
    0x1055 -> Ok(study_component_status_id)
    0x1060 -> Ok(requested_procedure_description)
    0x1064 -> Ok(requested_procedure_code_sequence)
    0x1065 -> Ok(requested_laterality_code_sequence)
    0x1066 -> Ok(reason_for_visit)
    0x1067 -> Ok(reason_for_visit_code_sequence)
    0x1070 -> Ok(requested_contrast_agent)
    0x4000 -> Ok(study_comments)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0034.
///
fn find_element_in_group_0034(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(flow_identifier_sequence)
    0x0002 -> Ok(flow_identifier)
    0x0003 -> Ok(flow_transfer_syntax_uid)
    0x0004 -> Ok(flow_rtp_sampling_rate)
    0x0005 -> Ok(source_identifier)
    0x0007 -> Ok(frame_origin_timestamp)
    0x0008 -> Ok(includes_imaging_subject)
    0x0009 -> Ok(frame_usefulness_group_sequence)
    0x000A -> Ok(real_time_bulk_data_flow_sequence)
    0x000B -> Ok(camera_position_group_sequence)
    0x000C -> Ok(includes_information)
    0x000D -> Ok(time_of_frame_group_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0038.
///
fn find_element_in_group_0038(element: Int) -> Result(Item, Nil) {
  case element {
    0x0004 -> Ok(referenced_patient_alias_sequence)
    0x0008 -> Ok(visit_status_id)
    0x0010 -> Ok(admission_id)
    0x0011 -> Ok(issuer_of_admission_id)
    0x0014 -> Ok(issuer_of_admission_id_sequence)
    0x0016 -> Ok(route_of_admissions)
    0x001A -> Ok(scheduled_admission_date)
    0x001B -> Ok(scheduled_admission_time)
    0x001C -> Ok(scheduled_discharge_date)
    0x001D -> Ok(scheduled_discharge_time)
    0x001E -> Ok(scheduled_patient_institution_residence)
    0x0020 -> Ok(admitting_date)
    0x0021 -> Ok(admitting_time)
    0x0030 -> Ok(discharge_date)
    0x0032 -> Ok(discharge_time)
    0x0040 -> Ok(discharge_diagnosis_description)
    0x0044 -> Ok(discharge_diagnosis_code_sequence)
    0x0050 -> Ok(special_needs)
    0x0060 -> Ok(service_episode_id)
    0x0061 -> Ok(issuer_of_service_episode_id)
    0x0062 -> Ok(service_episode_description)
    0x0064 -> Ok(issuer_of_service_episode_id_sequence)
    0x0100 -> Ok(pertinent_documents_sequence)
    0x0101 -> Ok(pertinent_resources_sequence)
    0x0102 -> Ok(resource_description)
    0x0300 -> Ok(current_patient_location)
    0x0400 -> Ok(patient_institution_residence)
    0x0500 -> Ok(patient_state)
    0x0502 -> Ok(patient_clinical_trial_participation_sequence)
    0x4000 -> Ok(visit_comments)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x003A.
///
fn find_element_in_group_003a(element: Int) -> Result(Item, Nil) {
  case element {
    0x0004 -> Ok(waveform_originality)
    0x0005 -> Ok(number_of_waveform_channels)
    0x0010 -> Ok(number_of_waveform_samples)
    0x001A -> Ok(sampling_frequency)
    0x0020 -> Ok(multiplex_group_label)
    0x0200 -> Ok(channel_definition_sequence)
    0x0202 -> Ok(waveform_channel_number)
    0x0203 -> Ok(channel_label)
    0x0205 -> Ok(channel_status)
    0x0208 -> Ok(channel_source_sequence)
    0x0209 -> Ok(channel_source_modifiers_sequence)
    0x020A -> Ok(source_waveform_sequence)
    0x020C -> Ok(channel_derivation_description)
    0x0210 -> Ok(channel_sensitivity)
    0x0211 -> Ok(channel_sensitivity_units_sequence)
    0x0212 -> Ok(channel_sensitivity_correction_factor)
    0x0213 -> Ok(channel_baseline)
    0x0214 -> Ok(channel_time_skew)
    0x0215 -> Ok(channel_sample_skew)
    0x0218 -> Ok(channel_offset)
    0x021A -> Ok(waveform_bits_stored)
    0x0220 -> Ok(filter_low_frequency)
    0x0221 -> Ok(filter_high_frequency)
    0x0222 -> Ok(notch_filter_frequency)
    0x0223 -> Ok(notch_filter_bandwidth)
    0x0230 -> Ok(waveform_data_display_scale)
    0x0231 -> Ok(waveform_display_background_cie_lab_value)
    0x0240 -> Ok(waveform_presentation_group_sequence)
    0x0241 -> Ok(presentation_group_number)
    0x0242 -> Ok(channel_display_sequence)
    0x0244 -> Ok(channel_recommended_display_cie_lab_value)
    0x0245 -> Ok(channel_position)
    0x0246 -> Ok(display_shading_flag)
    0x0247 -> Ok(fractional_channel_display_scale)
    0x0248 -> Ok(absolute_channel_display_scale)
    0x0300 -> Ok(multiplexed_audio_channels_description_code_sequence)
    0x0301 -> Ok(channel_identification_code)
    0x0302 -> Ok(channel_mode)
    0x0310 -> Ok(multiplex_group_uid)
    0x0311 -> Ok(powerline_frequency)
    0x0312 -> Ok(channel_impedance_sequence)
    0x0313 -> Ok(impedance_value)
    0x0314 -> Ok(impedance_measurement_date_time)
    0x0315 -> Ok(impedance_measurement_frequency)
    0x0316 -> Ok(impedance_measurement_current_type)
    0x0317 -> Ok(waveform_amplifier_type)
    0x0318 -> Ok(filter_low_frequency_characteristics_sequence)
    0x0319 -> Ok(filter_high_frequency_characteristics_sequence)
    0x0320 -> Ok(summarized_filter_lookup_table)
    0x0321 -> Ok(notch_filter_characteristics_sequence)
    0x0322 -> Ok(waveform_filter_type)
    0x0323 -> Ok(analog_filter_characteristics_sequence)
    0x0324 -> Ok(analog_filter_roll_off)
    0x0325 -> Ok(analog_filter_type)
    0x0326 -> Ok(digital_filter_characteristics_sequence)
    0x0327 -> Ok(digital_filter_order)
    0x0328 -> Ok(digital_filter_type_code_sequence)
    0x0329 -> Ok(waveform_filter_description)
    0x032A -> Ok(filter_lookup_table_sequence)
    0x032B -> Ok(filter_lookup_table_description)
    0x032C -> Ok(frequency_encoding_code_sequence)
    0x032D -> Ok(magnitude_encoding_code_sequence)
    0x032E -> Ok(filter_lookup_table_data)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0040.
///
fn find_element_in_group_0040(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(scheduled_station_ae_title)
    0x0002 -> Ok(scheduled_procedure_step_start_date)
    0x0003 -> Ok(scheduled_procedure_step_start_time)
    0x0004 -> Ok(scheduled_procedure_step_end_date)
    0x0005 -> Ok(scheduled_procedure_step_end_time)
    0x0006 -> Ok(scheduled_performing_physician_name)
    0x0007 -> Ok(scheduled_procedure_step_description)
    0x0008 -> Ok(scheduled_protocol_code_sequence)
    0x0009 -> Ok(scheduled_procedure_step_id)
    0x000A -> Ok(stage_code_sequence)
    0x000B -> Ok(scheduled_performing_physician_identification_sequence)
    0x0010 -> Ok(scheduled_station_name)
    0x0011 -> Ok(scheduled_procedure_step_location)
    0x0012 -> Ok(pre_medication)
    0x0020 -> Ok(scheduled_procedure_step_status)
    0x0026 -> Ok(order_placer_identifier_sequence)
    0x0027 -> Ok(order_filler_identifier_sequence)
    0x0031 -> Ok(local_namespace_entity_id)
    0x0032 -> Ok(universal_entity_id)
    0x0033 -> Ok(universal_entity_id_type)
    0x0035 -> Ok(identifier_type_code)
    0x0036 -> Ok(assigning_facility_sequence)
    0x0039 -> Ok(assigning_jurisdiction_code_sequence)
    0x003A -> Ok(assigning_agency_or_department_code_sequence)
    0x0100 -> Ok(scheduled_procedure_step_sequence)
    0x0220 -> Ok(referenced_non_image_composite_sop_instance_sequence)
    0x0241 -> Ok(performed_station_ae_title)
    0x0242 -> Ok(performed_station_name)
    0x0243 -> Ok(performed_location)
    0x0244 -> Ok(performed_procedure_step_start_date)
    0x0245 -> Ok(performed_procedure_step_start_time)
    0x0250 -> Ok(performed_procedure_step_end_date)
    0x0251 -> Ok(performed_procedure_step_end_time)
    0x0252 -> Ok(performed_procedure_step_status)
    0x0253 -> Ok(performed_procedure_step_id)
    0x0254 -> Ok(performed_procedure_step_description)
    0x0255 -> Ok(performed_procedure_type_description)
    0x0260 -> Ok(performed_protocol_code_sequence)
    0x0261 -> Ok(performed_protocol_type)
    0x0270 -> Ok(scheduled_step_attributes_sequence)
    0x0275 -> Ok(request_attributes_sequence)
    0x0280 -> Ok(comments_on_the_performed_procedure_step)
    0x0281 -> Ok(performed_procedure_step_discontinuation_reason_code_sequence)
    0x0293 -> Ok(quantity_sequence)
    0x0294 -> Ok(quantity)
    0x0295 -> Ok(measuring_units_sequence)
    0x0296 -> Ok(billing_item_sequence)
    0x0300 -> Ok(total_time_of_fluoroscopy)
    0x0301 -> Ok(total_number_of_exposures)
    0x0302 -> Ok(entrance_dose)
    0x0303 -> Ok(exposed_area)
    0x0306 -> Ok(distance_source_to_entrance)
    0x0307 -> Ok(distance_source_to_support)
    0x030E -> Ok(exposure_dose_sequence)
    0x0310 -> Ok(comments_on_radiation_dose)
    0x0312 -> Ok(x_ray_output)
    0x0314 -> Ok(half_value_layer)
    0x0316 -> Ok(organ_dose)
    0x0318 -> Ok(organ_exposed)
    0x0320 -> Ok(billing_procedure_step_sequence)
    0x0321 -> Ok(film_consumption_sequence)
    0x0324 -> Ok(billing_supplies_and_devices_sequence)
    0x0330 -> Ok(referenced_procedure_step_sequence)
    0x0340 -> Ok(performed_series_sequence)
    0x0400 -> Ok(comments_on_the_scheduled_procedure_step)
    0x0440 -> Ok(protocol_context_sequence)
    0x0441 -> Ok(content_item_modifier_sequence)
    0x0500 -> Ok(scheduled_specimen_sequence)
    0x050A -> Ok(specimen_accession_number)
    0x0512 -> Ok(container_identifier)
    0x0513 -> Ok(issuer_of_the_container_identifier_sequence)
    0x0515 -> Ok(alternate_container_identifier_sequence)
    0x0518 -> Ok(container_type_code_sequence)
    0x051A -> Ok(container_description)
    0x0520 -> Ok(container_component_sequence)
    0x0550 -> Ok(specimen_sequence)
    0x0551 -> Ok(specimen_identifier)
    0x0552 -> Ok(specimen_description_sequence_trial)
    0x0553 -> Ok(specimen_description_trial)
    0x0554 -> Ok(specimen_uid)
    0x0555 -> Ok(acquisition_context_sequence)
    0x0556 -> Ok(acquisition_context_description)
    0x0560 -> Ok(specimen_description_sequence)
    0x0562 -> Ok(issuer_of_the_specimen_identifier_sequence)
    0x059A -> Ok(specimen_type_code_sequence)
    0x0600 -> Ok(specimen_short_description)
    0x0602 -> Ok(specimen_detailed_description)
    0x0610 -> Ok(specimen_preparation_sequence)
    0x0612 -> Ok(specimen_preparation_step_content_item_sequence)
    0x0620 -> Ok(specimen_localization_content_item_sequence)
    0x06FA -> Ok(slide_identifier)
    0x0710 -> Ok(whole_slide_microscopy_image_frame_type_sequence)
    0x071A -> Ok(image_center_point_coordinates_sequence)
    0x072A -> Ok(x_offset_in_slide_coordinate_system)
    0x073A -> Ok(y_offset_in_slide_coordinate_system)
    0x074A -> Ok(z_offset_in_slide_coordinate_system)
    0x08D8 -> Ok(pixel_spacing_sequence)
    0x08DA -> Ok(coordinate_system_axis_code_sequence)
    0x08EA -> Ok(measurement_units_code_sequence)
    0x09F8 -> Ok(vital_stain_code_sequence_trial)
    0x1001 -> Ok(requested_procedure_id)
    0x1002 -> Ok(reason_for_the_requested_procedure)
    0x1003 -> Ok(requested_procedure_priority)
    0x1004 -> Ok(patient_transport_arrangements)
    0x1005 -> Ok(requested_procedure_location)
    0x1006 -> Ok(placer_order_number_procedure)
    0x1007 -> Ok(filler_order_number_procedure)
    0x1008 -> Ok(confidentiality_code)
    0x1009 -> Ok(reporting_priority)
    0x100A -> Ok(reason_for_requested_procedure_code_sequence)
    0x1010 -> Ok(names_of_intended_recipients_of_results)
    0x1011 -> Ok(intended_recipients_of_results_identification_sequence)
    0x1012 -> Ok(reason_for_performed_procedure_code_sequence)
    0x1060 -> Ok(requested_procedure_description_trial)
    0x1101 -> Ok(person_identification_code_sequence)
    0x1102 -> Ok(person_address)
    0x1103 -> Ok(person_telephone_numbers)
    0x1104 -> Ok(person_telecom_information)
    0x1400 -> Ok(requested_procedure_comments)
    0x2001 -> Ok(reason_for_the_imaging_service_request)
    0x2004 -> Ok(issue_date_of_imaging_service_request)
    0x2005 -> Ok(issue_time_of_imaging_service_request)
    0x2006 -> Ok(placer_order_number_imaging_service_request_retired)
    0x2007 -> Ok(filler_order_number_imaging_service_request_retired)
    0x2008 -> Ok(order_entered_by)
    0x2009 -> Ok(order_enterer_location)
    0x2010 -> Ok(order_callback_phone_number)
    0x2011 -> Ok(order_callback_telecom_information)
    0x2016 -> Ok(placer_order_number_imaging_service_request)
    0x2017 -> Ok(filler_order_number_imaging_service_request)
    0x2400 -> Ok(imaging_service_request_comments)
    0x3001 -> Ok(confidentiality_constraint_on_patient_data_description)
    0x4001 -> Ok(general_purpose_scheduled_procedure_step_status)
    0x4002 -> Ok(general_purpose_performed_procedure_step_status)
    0x4003 -> Ok(general_purpose_scheduled_procedure_step_priority)
    0x4004 -> Ok(scheduled_processing_applications_code_sequence)
    0x4005 -> Ok(scheduled_procedure_step_start_date_time)
    0x4006 -> Ok(multiple_copies_flag)
    0x4007 -> Ok(performed_processing_applications_code_sequence)
    0x4008 -> Ok(scheduled_procedure_step_expiration_date_time)
    0x4009 -> Ok(human_performer_code_sequence)
    0x4010 -> Ok(scheduled_procedure_step_modification_date_time)
    0x4011 -> Ok(expected_completion_date_time)
    0x4015 -> Ok(resulting_general_purpose_performed_procedure_steps_sequence)
    0x4016 -> Ok(referenced_general_purpose_scheduled_procedure_step_sequence)
    0x4018 -> Ok(scheduled_workitem_code_sequence)
    0x4019 -> Ok(performed_workitem_code_sequence)
    0x4020 -> Ok(input_availability_flag)
    0x4021 -> Ok(input_information_sequence)
    0x4022 -> Ok(relevant_information_sequence)
    0x4023 ->
      Ok(referenced_general_purpose_scheduled_procedure_step_transaction_uid)
    0x4025 -> Ok(scheduled_station_name_code_sequence)
    0x4026 -> Ok(scheduled_station_class_code_sequence)
    0x4027 -> Ok(scheduled_station_geographic_location_code_sequence)
    0x4028 -> Ok(performed_station_name_code_sequence)
    0x4029 -> Ok(performed_station_class_code_sequence)
    0x4030 -> Ok(performed_station_geographic_location_code_sequence)
    0x4031 -> Ok(requested_subsequent_workitem_code_sequence)
    0x4032 -> Ok(non_dicom_output_code_sequence)
    0x4033 -> Ok(output_information_sequence)
    0x4034 -> Ok(scheduled_human_performers_sequence)
    0x4035 -> Ok(actual_human_performers_sequence)
    0x4036 -> Ok(human_performer_organization)
    0x4037 -> Ok(human_performer_name)
    0x4040 -> Ok(raw_data_handling)
    0x4041 -> Ok(input_readiness_state)
    0x4050 -> Ok(performed_procedure_step_start_date_time)
    0x4051 -> Ok(performed_procedure_step_end_date_time)
    0x4052 -> Ok(procedure_step_cancellation_date_time)
    0x4070 -> Ok(output_destination_sequence)
    0x4071 -> Ok(dicom_storage_sequence)
    0x4072 -> Ok(stowrs_storage_sequence)
    0x4073 -> Ok(storage_url)
    0x4074 -> Ok(xds_storage_sequence)
    0x8302 -> Ok(entrance_dose_inm_gy)
    0x8303 -> Ok(entrance_dose_derivation)
    0x9092 -> Ok(parametric_map_frame_type_sequence)
    0x9094 -> Ok(referenced_image_real_world_value_mapping_sequence)
    0x9096 -> Ok(real_world_value_mapping_sequence)
    0x9098 -> Ok(pixel_value_mapping_code_sequence)
    0x9210 -> Ok(lut_label)
    0x9211 -> Ok(real_world_value_last_value_mapped)
    0x9212 -> Ok(real_world_value_lut_data)
    0x9213 -> Ok(double_float_real_world_value_last_value_mapped)
    0x9214 -> Ok(double_float_real_world_value_first_value_mapped)
    0x9216 -> Ok(real_world_value_first_value_mapped)
    0x9220 -> Ok(quantity_definition_sequence)
    0x9224 -> Ok(real_world_value_intercept)
    0x9225 -> Ok(real_world_value_slope)
    0xA007 -> Ok(findings_flag_trial)
    0xA010 -> Ok(relationship_type)
    0xA020 -> Ok(findings_sequence_trial)
    0xA021 -> Ok(findings_group_uid_trial)
    0xA022 -> Ok(referenced_findings_group_uid_trial)
    0xA023 -> Ok(findings_group_recording_date_trial)
    0xA024 -> Ok(findings_group_recording_time_trial)
    0xA026 -> Ok(findings_source_category_code_sequence_trial)
    0xA027 -> Ok(verifying_organization)
    0xA028 -> Ok(documenting_organization_identifier_code_sequence_trial)
    0xA030 -> Ok(verification_date_time)
    0xA032 -> Ok(observation_date_time)
    0xA033 -> Ok(observation_start_date_time)
    0xA040 -> Ok(value_type)
    0xA043 -> Ok(concept_name_code_sequence)
    0xA047 -> Ok(measurement_precision_description_trial)
    0xA050 -> Ok(continuity_of_content)
    0xA057 -> Ok(urgency_or_priority_alerts_trial)
    0xA060 -> Ok(sequencing_indicator_trial)
    0xA066 -> Ok(document_identifier_code_sequence_trial)
    0xA067 -> Ok(document_author_trial)
    0xA068 -> Ok(document_author_identifier_code_sequence_trial)
    0xA070 -> Ok(identifier_code_sequence_trial)
    0xA073 -> Ok(verifying_observer_sequence)
    0xA074 -> Ok(object_binary_identifier_trial)
    0xA075 -> Ok(verifying_observer_name)
    0xA076 -> Ok(documenting_observer_identifier_code_sequence_trial)
    0xA078 -> Ok(author_observer_sequence)
    0xA07A -> Ok(participant_sequence)
    0xA07C -> Ok(custodial_organization_sequence)
    0xA080 -> Ok(participation_type)
    0xA082 -> Ok(participation_date_time)
    0xA084 -> Ok(observer_type)
    0xA085 -> Ok(procedure_identifier_code_sequence_trial)
    0xA088 -> Ok(verifying_observer_identification_code_sequence)
    0xA089 -> Ok(object_directory_binary_identifier_trial)
    0xA090 -> Ok(equivalent_cda_document_sequence)
    0xA0B0 -> Ok(referenced_waveform_channels)
    0xA110 -> Ok(date_of_document_or_verbal_transaction_trial)
    0xA112 -> Ok(time_of_document_creation_or_verbal_transaction_trial)
    0xA120 -> Ok(date_time)
    0xA121 -> Ok(date)
    0xA122 -> Ok(time)
    0xA123 -> Ok(person_name)
    0xA124 -> Ok(uid)
    0xA125 -> Ok(report_status_id_trial)
    0xA130 -> Ok(temporal_range_type)
    0xA132 -> Ok(referenced_sample_positions)
    0xA136 -> Ok(referenced_frame_numbers)
    0xA138 -> Ok(referenced_time_offsets)
    0xA13A -> Ok(referenced_date_time)
    0xA160 -> Ok(text_value)
    0xA161 -> Ok(floating_point_value)
    0xA162 -> Ok(rational_numerator_value)
    0xA163 -> Ok(rational_denominator_value)
    0xA167 -> Ok(observation_category_code_sequence_trial)
    0xA168 -> Ok(concept_code_sequence)
    0xA16A -> Ok(bibliographic_citation_trial)
    0xA170 -> Ok(purpose_of_reference_code_sequence)
    0xA171 -> Ok(observation_uid)
    0xA172 -> Ok(referenced_observation_uid_trial)
    0xA173 -> Ok(referenced_observation_class_trial)
    0xA174 -> Ok(referenced_object_observation_class_trial)
    0xA180 -> Ok(annotation_group_number)
    0xA192 -> Ok(observation_date_trial)
    0xA193 -> Ok(observation_time_trial)
    0xA194 -> Ok(measurement_automation_trial)
    0xA195 -> Ok(modifier_code_sequence)
    0xA224 -> Ok(identification_description_trial)
    0xA290 -> Ok(coordinates_set_geometric_type_trial)
    0xA296 -> Ok(algorithm_code_sequence_trial)
    0xA297 -> Ok(algorithm_description_trial)
    0xA29A -> Ok(pixel_coordinates_set_trial)
    0xA300 -> Ok(measured_value_sequence)
    0xA301 -> Ok(numeric_value_qualifier_code_sequence)
    0xA307 -> Ok(current_observer_trial)
    0xA30A -> Ok(numeric_value)
    0xA313 -> Ok(referenced_accession_sequence_trial)
    0xA33A -> Ok(report_status_comment_trial)
    0xA340 -> Ok(procedure_context_sequence_trial)
    0xA352 -> Ok(verbal_source_trial)
    0xA353 -> Ok(address_trial)
    0xA354 -> Ok(telephone_number_trial)
    0xA358 -> Ok(verbal_source_identifier_code_sequence_trial)
    0xA360 -> Ok(predecessor_documents_sequence)
    0xA370 -> Ok(referenced_request_sequence)
    0xA372 -> Ok(performed_procedure_code_sequence)
    0xA375 -> Ok(current_requested_procedure_evidence_sequence)
    0xA380 -> Ok(report_detail_sequence_trial)
    0xA385 -> Ok(pertinent_other_evidence_sequence)
    0xA390 -> Ok(hl7_structured_document_reference_sequence)
    0xA402 -> Ok(observation_subject_uid_trial)
    0xA403 -> Ok(observation_subject_class_trial)
    0xA404 -> Ok(observation_subject_type_code_sequence_trial)
    0xA491 -> Ok(completion_flag)
    0xA492 -> Ok(completion_flag_description)
    0xA493 -> Ok(verification_flag)
    0xA494 -> Ok(archive_requested)
    0xA496 -> Ok(preliminary_flag)
    0xA504 -> Ok(content_template_sequence)
    0xA525 -> Ok(identical_documents_sequence)
    0xA600 -> Ok(observation_subject_context_flag_trial)
    0xA601 -> Ok(observer_context_flag_trial)
    0xA603 -> Ok(procedure_context_flag_trial)
    0xA730 -> Ok(content_sequence)
    0xA731 -> Ok(relationship_sequence_trial)
    0xA732 -> Ok(relationship_type_code_sequence_trial)
    0xA744 -> Ok(language_code_sequence_trial)
    0xA801 -> Ok(tabulated_values_sequence)
    0xA802 -> Ok(number_of_table_rows)
    0xA803 -> Ok(number_of_table_columns)
    0xA804 -> Ok(table_row_number)
    0xA805 -> Ok(table_column_number)
    0xA806 -> Ok(table_row_definition_sequence)
    0xA807 -> Ok(table_column_definition_sequence)
    0xA808 -> Ok(cell_values_sequence)
    0xA992 -> Ok(uniform_resource_locator_trial)
    0xB020 -> Ok(waveform_annotation_sequence)
    0xDB00 -> Ok(template_identifier)
    0xDB06 -> Ok(template_version)
    0xDB07 -> Ok(template_local_version)
    0xDB0B -> Ok(template_extension_flag)
    0xDB0C -> Ok(template_extension_organization_uid)
    0xDB0D -> Ok(template_extension_creator_uid)
    0xDB73 -> Ok(referenced_content_item_identifier)
    0xE001 -> Ok(hl7_instance_identifier)
    0xE004 -> Ok(hl7_document_effective_time)
    0xE006 -> Ok(hl7_document_type_code_sequence)
    0xE008 -> Ok(document_class_code_sequence)
    0xE010 -> Ok(retrieve_uri)
    0xE011 -> Ok(retrieve_location_uid)
    0xE020 -> Ok(type_of_instances)
    0xE021 -> Ok(dicom_retrieval_sequence)
    0xE022 -> Ok(dicom_media_retrieval_sequence)
    0xE023 -> Ok(wado_retrieval_sequence)
    0xE024 -> Ok(xds_retrieval_sequence)
    0xE025 -> Ok(wadors_retrieval_sequence)
    0xE030 -> Ok(repository_unique_id)
    0xE031 -> Ok(home_community_id)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0042.
///
fn find_element_in_group_0042(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(document_title)
    0x0011 -> Ok(encapsulated_document)
    0x0012 -> Ok(mime_type_of_encapsulated_document)
    0x0013 -> Ok(source_instance_sequence)
    0x0014 -> Ok(list_of_mime_types)
    0x0015 -> Ok(encapsulated_document_length)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0044.
///
fn find_element_in_group_0044(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(product_package_identifier)
    0x0002 -> Ok(substance_administration_approval)
    0x0003 -> Ok(approval_status_further_description)
    0x0004 -> Ok(approval_status_date_time)
    0x0007 -> Ok(product_type_code_sequence)
    0x0008 -> Ok(product_name)
    0x0009 -> Ok(product_description)
    0x000A -> Ok(product_lot_identifier)
    0x000B -> Ok(product_expiration_date_time)
    0x0010 -> Ok(substance_administration_date_time)
    0x0011 -> Ok(substance_administration_notes)
    0x0012 -> Ok(substance_administration_device_id)
    0x0013 -> Ok(product_parameter_sequence)
    0x0019 -> Ok(substance_administration_parameter_sequence)
    0x0100 -> Ok(approval_sequence)
    0x0101 -> Ok(assertion_code_sequence)
    0x0102 -> Ok(assertion_uid)
    0x0103 -> Ok(asserter_identification_sequence)
    0x0104 -> Ok(assertion_date_time)
    0x0105 -> Ok(assertion_expiration_date_time)
    0x0106 -> Ok(assertion_comments)
    0x0107 -> Ok(related_assertion_sequence)
    0x0108 -> Ok(referenced_assertion_uid)
    0x0109 -> Ok(approval_subject_sequence)
    0x010A -> Ok(organizational_role_code_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0046.
///
fn find_element_in_group_0046(element: Int) -> Result(Item, Nil) {
  case element {
    0x0012 -> Ok(lens_description)
    0x0014 -> Ok(right_lens_sequence)
    0x0015 -> Ok(left_lens_sequence)
    0x0016 -> Ok(unspecified_laterality_lens_sequence)
    0x0018 -> Ok(cylinder_sequence)
    0x0028 -> Ok(prism_sequence)
    0x0030 -> Ok(horizontal_prism_power)
    0x0032 -> Ok(horizontal_prism_base)
    0x0034 -> Ok(vertical_prism_power)
    0x0036 -> Ok(vertical_prism_base)
    0x0038 -> Ok(lens_segment_type)
    0x0040 -> Ok(optical_transmittance)
    0x0042 -> Ok(channel_width)
    0x0044 -> Ok(pupil_size)
    0x0046 -> Ok(corneal_size)
    0x0047 -> Ok(corneal_size_sequence)
    0x0050 -> Ok(autorefraction_right_eye_sequence)
    0x0052 -> Ok(autorefraction_left_eye_sequence)
    0x0060 -> Ok(distance_pupillary_distance)
    0x0062 -> Ok(near_pupillary_distance)
    0x0063 -> Ok(intermediate_pupillary_distance)
    0x0064 -> Ok(other_pupillary_distance)
    0x0070 -> Ok(keratometry_right_eye_sequence)
    0x0071 -> Ok(keratometry_left_eye_sequence)
    0x0074 -> Ok(steep_keratometric_axis_sequence)
    0x0075 -> Ok(radius_of_curvature)
    0x0076 -> Ok(keratometric_power)
    0x0077 -> Ok(keratometric_axis)
    0x0080 -> Ok(flat_keratometric_axis_sequence)
    0x0092 -> Ok(background_color)
    0x0094 -> Ok(optotype)
    0x0095 -> Ok(optotype_presentation)
    0x0097 -> Ok(subjective_refraction_right_eye_sequence)
    0x0098 -> Ok(subjective_refraction_left_eye_sequence)
    0x0100 -> Ok(add_near_sequence)
    0x0101 -> Ok(add_intermediate_sequence)
    0x0102 -> Ok(add_other_sequence)
    0x0104 -> Ok(add_power)
    0x0106 -> Ok(viewing_distance)
    0x0110 -> Ok(cornea_measurements_sequence)
    0x0111 -> Ok(source_of_cornea_measurement_data_code_sequence)
    0x0112 -> Ok(steep_corneal_axis_sequence)
    0x0113 -> Ok(flat_corneal_axis_sequence)
    0x0114 -> Ok(corneal_power)
    0x0115 -> Ok(corneal_axis)
    0x0116 -> Ok(cornea_measurement_method_code_sequence)
    0x0117 -> Ok(refractive_index_of_cornea)
    0x0118 -> Ok(refractive_index_of_aqueous_humor)
    0x0121 -> Ok(visual_acuity_type_code_sequence)
    0x0122 -> Ok(visual_acuity_right_eye_sequence)
    0x0123 -> Ok(visual_acuity_left_eye_sequence)
    0x0124 -> Ok(visual_acuity_both_eyes_open_sequence)
    0x0125 -> Ok(viewing_distance_type)
    0x0135 -> Ok(visual_acuity_modifiers)
    0x0137 -> Ok(decimal_visual_acuity)
    0x0139 -> Ok(optotype_detailed_definition)
    0x0145 -> Ok(referenced_refractive_measurements_sequence)
    0x0146 -> Ok(sphere_power)
    0x0147 -> Ok(cylinder_power)
    0x0201 -> Ok(corneal_topography_surface)
    0x0202 -> Ok(corneal_vertex_location)
    0x0203 -> Ok(pupil_centroid_x_coordinate)
    0x0204 -> Ok(pupil_centroid_y_coordinate)
    0x0205 -> Ok(equivalent_pupil_radius)
    0x0207 -> Ok(corneal_topography_map_type_code_sequence)
    0x0208 -> Ok(vertices_of_the_outline_of_pupil)
    0x0210 -> Ok(corneal_topography_mapping_normals_sequence)
    0x0211 -> Ok(maximum_corneal_curvature_sequence)
    0x0212 -> Ok(maximum_corneal_curvature)
    0x0213 -> Ok(maximum_corneal_curvature_location)
    0x0215 -> Ok(minimum_keratometric_sequence)
    0x0218 -> Ok(simulated_keratometric_cylinder_sequence)
    0x0220 -> Ok(average_corneal_power)
    0x0224 -> Ok(corneal_is_value)
    0x0227 -> Ok(analyzed_area)
    0x0230 -> Ok(surface_regularity_index)
    0x0232 -> Ok(surface_asymmetry_index)
    0x0234 -> Ok(corneal_eccentricity_index)
    0x0236 -> Ok(keratoconus_prediction_index)
    0x0238 -> Ok(decimal_potential_visual_acuity)
    0x0242 -> Ok(corneal_topography_map_quality_evaluation)
    0x0244 -> Ok(source_image_corneal_processed_data_sequence)
    0x0247 -> Ok(corneal_point_location)
    0x0248 -> Ok(corneal_point_estimated)
    0x0249 -> Ok(axial_power)
    0x0250 -> Ok(tangential_power)
    0x0251 -> Ok(refractive_power)
    0x0252 -> Ok(relative_elevation)
    0x0253 -> Ok(corneal_wavefront)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0048.
///
fn find_element_in_group_0048(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(imaged_volume_width)
    0x0002 -> Ok(imaged_volume_height)
    0x0003 -> Ok(imaged_volume_depth)
    0x0006 -> Ok(total_pixel_matrix_columns)
    0x0007 -> Ok(total_pixel_matrix_rows)
    0x0008 -> Ok(total_pixel_matrix_origin_sequence)
    0x0010 -> Ok(specimen_label_in_image)
    0x0011 -> Ok(focus_method)
    0x0012 -> Ok(extended_depth_of_field)
    0x0013 -> Ok(number_of_focal_planes)
    0x0014 -> Ok(distance_between_focal_planes)
    0x0015 -> Ok(recommended_absent_pixel_cie_lab_value)
    0x0100 -> Ok(illuminator_type_code_sequence)
    0x0102 -> Ok(image_orientation_slide)
    0x0105 -> Ok(optical_path_sequence)
    0x0106 -> Ok(optical_path_identifier)
    0x0107 -> Ok(optical_path_description)
    0x0108 -> Ok(illumination_color_code_sequence)
    0x0110 -> Ok(specimen_reference_sequence)
    0x0111 -> Ok(condenser_lens_power)
    0x0112 -> Ok(objective_lens_power)
    0x0113 -> Ok(objective_lens_numerical_aperture)
    0x0114 -> Ok(confocal_mode)
    0x0115 -> Ok(tissue_location)
    0x0116 -> Ok(confocal_microscopy_image_frame_type_sequence)
    0x0117 -> Ok(image_acquisition_depth)
    0x0120 -> Ok(palette_color_lookup_table_sequence)
    0x0200 -> Ok(referenced_image_navigation_sequence)
    0x0201 -> Ok(top_left_hand_corner_of_localizer_area)
    0x0202 -> Ok(bottom_right_hand_corner_of_localizer_area)
    0x0207 -> Ok(optical_path_identification_sequence)
    0x021A -> Ok(plane_position_slide_sequence)
    0x021E -> Ok(column_position_in_total_image_pixel_matrix)
    0x021F -> Ok(row_position_in_total_image_pixel_matrix)
    0x0301 -> Ok(pixel_origin_interpretation)
    0x0302 -> Ok(number_of_optical_paths)
    0x0303 -> Ok(total_pixel_matrix_focal_planes)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0050.
///
fn find_element_in_group_0050(element: Int) -> Result(Item, Nil) {
  case element {
    0x0004 -> Ok(calibration_image)
    0x0010 -> Ok(device_sequence)
    0x0012 -> Ok(container_component_type_code_sequence)
    0x0013 -> Ok(container_component_thickness)
    0x0014 -> Ok(device_length)
    0x0015 -> Ok(container_component_width)
    0x0016 -> Ok(device_diameter)
    0x0017 -> Ok(device_diameter_units)
    0x0018 -> Ok(device_volume)
    0x0019 -> Ok(inter_marker_distance)
    0x001A -> Ok(container_component_material)
    0x001B -> Ok(container_component_id)
    0x001C -> Ok(container_component_length)
    0x001D -> Ok(container_component_diameter)
    0x001E -> Ok(container_component_description)
    0x0020 -> Ok(device_description)
    0x0021 -> Ok(long_device_description)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0052.
///
fn find_element_in_group_0052(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(contrast_bolus_ingredient_percent_by_volume)
    0x0002 -> Ok(oct_focal_distance)
    0x0003 -> Ok(beam_spot_size)
    0x0004 -> Ok(effective_refractive_index)
    0x0006 -> Ok(oct_acquisition_domain)
    0x0007 -> Ok(oct_optical_center_wavelength)
    0x0008 -> Ok(axial_resolution)
    0x0009 -> Ok(ranging_depth)
    0x0011 -> Ok(a_line_rate)
    0x0012 -> Ok(a_lines_per_frame)
    0x0013 -> Ok(catheter_rotational_rate)
    0x0014 -> Ok(a_line_pixel_spacing)
    0x0016 -> Ok(mode_of_percutaneous_access_sequence)
    0x0025 -> Ok(intravascular_oct_frame_type_sequence)
    0x0026 -> Ok(octz_offset_applied)
    0x0027 -> Ok(intravascular_frame_content_sequence)
    0x0028 -> Ok(intravascular_longitudinal_distance)
    0x0029 -> Ok(intravascular_oct_frame_content_sequence)
    0x0030 -> Ok(octz_offset_correction)
    0x0031 -> Ok(catheter_direction_of_rotation)
    0x0033 -> Ok(seam_line_location)
    0x0034 -> Ok(first_a_line_location)
    0x0036 -> Ok(seam_line_index)
    0x0038 -> Ok(number_of_padded_a_lines)
    0x0039 -> Ok(interpolation_type)
    0x003A -> Ok(refractive_index_applied)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0054.
///
fn find_element_in_group_0054(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(energy_window_vector)
    0x0011 -> Ok(number_of_energy_windows)
    0x0012 -> Ok(energy_window_information_sequence)
    0x0013 -> Ok(energy_window_range_sequence)
    0x0014 -> Ok(energy_window_lower_limit)
    0x0015 -> Ok(energy_window_upper_limit)
    0x0016 -> Ok(radiopharmaceutical_information_sequence)
    0x0017 -> Ok(residual_syringe_counts)
    0x0018 -> Ok(energy_window_name)
    0x0020 -> Ok(detector_vector)
    0x0021 -> Ok(number_of_detectors)
    0x0022 -> Ok(detector_information_sequence)
    0x0030 -> Ok(phase_vector)
    0x0031 -> Ok(number_of_phases)
    0x0032 -> Ok(phase_information_sequence)
    0x0033 -> Ok(number_of_frames_in_phase)
    0x0036 -> Ok(phase_delay)
    0x0038 -> Ok(pause_between_frames)
    0x0039 -> Ok(phase_description)
    0x0050 -> Ok(rotation_vector)
    0x0051 -> Ok(number_of_rotations)
    0x0052 -> Ok(rotation_information_sequence)
    0x0053 -> Ok(number_of_frames_in_rotation)
    0x0060 -> Ok(rr_interval_vector)
    0x0061 -> Ok(number_of_rr_intervals)
    0x0062 -> Ok(gated_information_sequence)
    0x0063 -> Ok(data_information_sequence)
    0x0070 -> Ok(time_slot_vector)
    0x0071 -> Ok(number_of_time_slots)
    0x0072 -> Ok(time_slot_information_sequence)
    0x0073 -> Ok(time_slot_time)
    0x0080 -> Ok(slice_vector)
    0x0081 -> Ok(number_of_slices)
    0x0090 -> Ok(angular_view_vector)
    0x0100 -> Ok(time_slice_vector)
    0x0101 -> Ok(number_of_time_slices)
    0x0200 -> Ok(start_angle)
    0x0202 -> Ok(type_of_detector_motion)
    0x0210 -> Ok(trigger_vector)
    0x0211 -> Ok(number_of_triggers_in_phase)
    0x0220 -> Ok(view_code_sequence)
    0x0222 -> Ok(view_modifier_code_sequence)
    0x0300 -> Ok(radionuclide_code_sequence)
    0x0302 -> Ok(administration_route_code_sequence)
    0x0304 -> Ok(radiopharmaceutical_code_sequence)
    0x0306 -> Ok(calibration_data_sequence)
    0x0308 -> Ok(energy_window_number)
    0x0400 -> Ok(image_id)
    0x0410 -> Ok(patient_orientation_code_sequence)
    0x0412 -> Ok(patient_orientation_modifier_code_sequence)
    0x0414 -> Ok(patient_gantry_relationship_code_sequence)
    0x0500 -> Ok(slice_progression_direction)
    0x0501 -> Ok(scan_progression_direction)
    0x1000 -> Ok(series_type)
    0x1001 -> Ok(units)
    0x1002 -> Ok(counts_source)
    0x1004 -> Ok(reprojection_method)
    0x1006 -> Ok(suv_type)
    0x1100 -> Ok(randoms_correction_method)
    0x1101 -> Ok(attenuation_correction_method)
    0x1102 -> Ok(decay_correction)
    0x1103 -> Ok(reconstruction_method)
    0x1104 -> Ok(detector_lines_of_response_used)
    0x1105 -> Ok(scatter_correction_method)
    0x1200 -> Ok(axial_acceptance)
    0x1201 -> Ok(axial_mash)
    0x1202 -> Ok(transverse_mash)
    0x1203 -> Ok(detector_element_size)
    0x1210 -> Ok(coincidence_window_width)
    0x1220 -> Ok(secondary_counts_type)
    0x1300 -> Ok(frame_reference_time)
    0x1310 -> Ok(primary_prompts_counts_accumulated)
    0x1311 -> Ok(secondary_counts_accumulated)
    0x1320 -> Ok(slice_sensitivity_factor)
    0x1321 -> Ok(decay_factor)
    0x1322 -> Ok(dose_calibration_factor)
    0x1323 -> Ok(scatter_fraction_factor)
    0x1324 -> Ok(dead_time_factor)
    0x1330 -> Ok(image_index)
    0x1400 -> Ok(counts_included)
    0x1401 -> Ok(dead_time_correction_flag)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0060.
///
fn find_element_in_group_0060(element: Int) -> Result(Item, Nil) {
  case element {
    0x3000 -> Ok(histogram_sequence)
    0x3002 -> Ok(histogram_number_of_bins)
    0x3004 -> Ok(histogram_first_bin_value)
    0x3006 -> Ok(histogram_last_bin_value)
    0x3008 -> Ok(histogram_bin_width)
    0x3010 -> Ok(histogram_explanation)
    0x3020 -> Ok(histogram_data)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0062.
///
fn find_element_in_group_0062(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(segmentation_type)
    0x0002 -> Ok(segment_sequence)
    0x0003 -> Ok(segmented_property_category_code_sequence)
    0x0004 -> Ok(segment_number)
    0x0005 -> Ok(segment_label)
    0x0006 -> Ok(segment_description)
    0x0007 -> Ok(segmentation_algorithm_identification_sequence)
    0x0008 -> Ok(segment_algorithm_type)
    0x0009 -> Ok(segment_algorithm_name)
    0x000A -> Ok(segment_identification_sequence)
    0x000B -> Ok(referenced_segment_number)
    0x000C -> Ok(recommended_display_grayscale_value)
    0x000D -> Ok(recommended_display_cie_lab_value)
    0x000E -> Ok(maximum_fractional_value)
    0x000F -> Ok(segmented_property_type_code_sequence)
    0x0010 -> Ok(segmentation_fractional_type)
    0x0011 -> Ok(segmented_property_type_modifier_code_sequence)
    0x0012 -> Ok(used_segments_sequence)
    0x0013 -> Ok(segments_overlap)
    0x0020 -> Ok(tracking_id)
    0x0021 -> Ok(tracking_uid)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0064.
///
fn find_element_in_group_0064(element: Int) -> Result(Item, Nil) {
  case element {
    0x0002 -> Ok(deformable_registration_sequence)
    0x0003 -> Ok(source_frame_of_reference_uid)
    0x0005 -> Ok(deformable_registration_grid_sequence)
    0x0007 -> Ok(grid_dimensions)
    0x0008 -> Ok(grid_resolution)
    0x0009 -> Ok(vector_grid_data)
    0x000F -> Ok(pre_deformation_matrix_registration_sequence)
    0x0010 -> Ok(post_deformation_matrix_registration_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0066.
///
fn find_element_in_group_0066(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(number_of_surfaces)
    0x0002 -> Ok(surface_sequence)
    0x0003 -> Ok(surface_number)
    0x0004 -> Ok(surface_comments)
    0x0009 -> Ok(surface_processing)
    0x000A -> Ok(surface_processing_ratio)
    0x000B -> Ok(surface_processing_description)
    0x000C -> Ok(recommended_presentation_opacity)
    0x000D -> Ok(recommended_presentation_type)
    0x000E -> Ok(finite_volume)
    0x0010 -> Ok(manifold)
    0x0011 -> Ok(surface_points_sequence)
    0x0012 -> Ok(surface_points_normals_sequence)
    0x0013 -> Ok(surface_mesh_primitives_sequence)
    0x0015 -> Ok(number_of_surface_points)
    0x0016 -> Ok(point_coordinates_data)
    0x0017 -> Ok(point_position_accuracy)
    0x0018 -> Ok(mean_point_distance)
    0x0019 -> Ok(maximum_point_distance)
    0x001A -> Ok(points_bounding_box_coordinates)
    0x001B -> Ok(axis_of_rotation)
    0x001C -> Ok(center_of_rotation)
    0x001E -> Ok(number_of_vectors)
    0x001F -> Ok(vector_dimensionality)
    0x0020 -> Ok(vector_accuracy)
    0x0021 -> Ok(vector_coordinate_data)
    0x0022 -> Ok(double_point_coordinates_data)
    0x0023 -> Ok(triangle_point_index_list)
    0x0024 -> Ok(edge_point_index_list)
    0x0025 -> Ok(vertex_point_index_list)
    0x0026 -> Ok(triangle_strip_sequence)
    0x0027 -> Ok(triangle_fan_sequence)
    0x0028 -> Ok(line_sequence)
    0x0029 -> Ok(primitive_point_index_list)
    0x002A -> Ok(surface_count)
    0x002B -> Ok(referenced_surface_sequence)
    0x002C -> Ok(referenced_surface_number)
    0x002D -> Ok(segment_surface_generation_algorithm_identification_sequence)
    0x002E -> Ok(segment_surface_source_instance_sequence)
    0x002F -> Ok(algorithm_family_code_sequence)
    0x0030 -> Ok(algorithm_name_code_sequence)
    0x0031 -> Ok(algorithm_version)
    0x0032 -> Ok(algorithm_parameters)
    0x0034 -> Ok(facet_sequence)
    0x0035 -> Ok(surface_processing_algorithm_identification_sequence)
    0x0036 -> Ok(algorithm_name)
    0x0037 -> Ok(recommended_point_radius)
    0x0038 -> Ok(recommended_line_thickness)
    0x0040 -> Ok(long_primitive_point_index_list)
    0x0041 -> Ok(long_triangle_point_index_list)
    0x0042 -> Ok(long_edge_point_index_list)
    0x0043 -> Ok(long_vertex_point_index_list)
    0x0101 -> Ok(track_set_sequence)
    0x0102 -> Ok(track_sequence)
    0x0103 -> Ok(recommended_display_cie_lab_value_list)
    0x0104 -> Ok(tracking_algorithm_identification_sequence)
    0x0105 -> Ok(track_set_number)
    0x0106 -> Ok(track_set_label)
    0x0107 -> Ok(track_set_description)
    0x0108 -> Ok(track_set_anatomical_type_code_sequence)
    0x0121 -> Ok(measurements_sequence)
    0x0124 -> Ok(track_set_statistics_sequence)
    0x0125 -> Ok(floating_point_values)
    0x0129 -> Ok(track_point_index_list)
    0x0130 -> Ok(track_statistics_sequence)
    0x0132 -> Ok(measurement_values_sequence)
    0x0133 -> Ok(diffusion_acquisition_code_sequence)
    0x0134 -> Ok(diffusion_model_code_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0068.
///
fn find_element_in_group_0068(element: Int) -> Result(Item, Nil) {
  case element {
    0x6210 -> Ok(implant_size)
    0x6221 -> Ok(implant_template_version)
    0x6222 -> Ok(replaced_implant_template_sequence)
    0x6223 -> Ok(implant_type)
    0x6224 -> Ok(derivation_implant_template_sequence)
    0x6225 -> Ok(original_implant_template_sequence)
    0x6226 -> Ok(effective_date_time)
    0x6230 -> Ok(implant_target_anatomy_sequence)
    0x6260 -> Ok(information_from_manufacturer_sequence)
    0x6265 -> Ok(notification_from_manufacturer_sequence)
    0x6270 -> Ok(information_issue_date_time)
    0x6280 -> Ok(information_summary)
    0x62A0 -> Ok(implant_regulatory_disapproval_code_sequence)
    0x62A5 -> Ok(overall_template_spatial_tolerance)
    0x62C0 -> Ok(hpgl_document_sequence)
    0x62D0 -> Ok(hpgl_document_id)
    0x62D5 -> Ok(hpgl_document_label)
    0x62E0 -> Ok(view_orientation_code_sequence)
    0x62F0 -> Ok(view_orientation_modifier_code_sequence)
    0x62F2 -> Ok(hpgl_document_scaling)
    0x6300 -> Ok(hpgl_document)
    0x6310 -> Ok(hpgl_contour_pen_number)
    0x6320 -> Ok(hpgl_pen_sequence)
    0x6330 -> Ok(hpgl_pen_number)
    0x6340 -> Ok(hpgl_pen_label)
    0x6345 -> Ok(hpgl_pen_description)
    0x6346 -> Ok(recommended_rotation_point)
    0x6347 -> Ok(bounding_rectangle)
    0x6350 -> Ok(implant_template_3d_model_surface_number)
    0x6360 -> Ok(surface_model_description_sequence)
    0x6380 -> Ok(surface_model_label)
    0x6390 -> Ok(surface_model_scaling_factor)
    0x63A0 -> Ok(materials_code_sequence)
    0x63A4 -> Ok(coating_materials_code_sequence)
    0x63A8 -> Ok(implant_type_code_sequence)
    0x63AC -> Ok(fixation_method_code_sequence)
    0x63B0 -> Ok(mating_feature_sets_sequence)
    0x63C0 -> Ok(mating_feature_set_id)
    0x63D0 -> Ok(mating_feature_set_label)
    0x63E0 -> Ok(mating_feature_sequence)
    0x63F0 -> Ok(mating_feature_id)
    0x6400 -> Ok(mating_feature_degree_of_freedom_sequence)
    0x6410 -> Ok(degree_of_freedom_id)
    0x6420 -> Ok(degree_of_freedom_type)
    0x6430 -> Ok(two_d_mating_feature_coordinates_sequence)
    0x6440 -> Ok(referenced_hpgl_document_id)
    0x6450 -> Ok(two_d_mating_point)
    0x6460 -> Ok(two_d_mating_axes)
    0x6470 -> Ok(two_d_degree_of_freedom_sequence)
    0x6490 -> Ok(three_d_degree_of_freedom_axis)
    0x64A0 -> Ok(range_of_freedom)
    0x64C0 -> Ok(three_d_mating_point)
    0x64D0 -> Ok(three_d_mating_axes)
    0x64F0 -> Ok(two_d_degree_of_freedom_axis)
    0x6500 -> Ok(planning_landmark_point_sequence)
    0x6510 -> Ok(planning_landmark_line_sequence)
    0x6520 -> Ok(planning_landmark_plane_sequence)
    0x6530 -> Ok(planning_landmark_id)
    0x6540 -> Ok(planning_landmark_description)
    0x6545 -> Ok(planning_landmark_identification_code_sequence)
    0x6550 -> Ok(two_d_point_coordinates_sequence)
    0x6560 -> Ok(two_d_point_coordinates)
    0x6590 -> Ok(three_d_point_coordinates)
    0x65A0 -> Ok(two_d_line_coordinates_sequence)
    0x65B0 -> Ok(two_d_line_coordinates)
    0x65D0 -> Ok(three_d_line_coordinates)
    0x65E0 -> Ok(two_d_plane_coordinates_sequence)
    0x65F0 -> Ok(two_d_plane_intersection)
    0x6610 -> Ok(three_d_plane_origin)
    0x6620 -> Ok(three_d_plane_normal)
    0x7001 -> Ok(model_modification)
    0x7002 -> Ok(model_mirroring)
    0x7003 -> Ok(model_usage_code_sequence)
    0x7004 -> Ok(model_group_uid)
    0x7005 -> Ok(relative_uri_reference_within_encapsulated_document)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x006A.
///
fn find_element_in_group_006a(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(annotation_coordinate_type)
    0x0002 -> Ok(annotation_group_sequence)
    0x0003 -> Ok(annotation_group_uid)
    0x0005 -> Ok(annotation_group_label)
    0x0006 -> Ok(annotation_group_description)
    0x0007 -> Ok(annotation_group_generation_type)
    0x0008 -> Ok(annotation_group_algorithm_identification_sequence)
    0x0009 -> Ok(annotation_property_category_code_sequence)
    0x000A -> Ok(annotation_property_type_code_sequence)
    0x000B -> Ok(annotation_property_type_modifier_code_sequence)
    0x000C -> Ok(number_of_annotations)
    0x000D -> Ok(annotation_applies_to_all_optical_paths)
    0x000E -> Ok(referenced_optical_path_identifier)
    0x000F -> Ok(annotation_applies_to_all_z_planes)
    0x0010 -> Ok(common_z_coordinate_value)
    0x0011 -> Ok(annotation_index_list)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0070.
///
fn find_element_in_group_0070(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(graphic_annotation_sequence)
    0x0002 -> Ok(graphic_layer)
    0x0003 -> Ok(bounding_box_annotation_units)
    0x0004 -> Ok(anchor_point_annotation_units)
    0x0005 -> Ok(graphic_annotation_units)
    0x0006 -> Ok(unformatted_text_value)
    0x0008 -> Ok(text_object_sequence)
    0x0009 -> Ok(graphic_object_sequence)
    0x0010 -> Ok(bounding_box_top_left_hand_corner)
    0x0011 -> Ok(bounding_box_bottom_right_hand_corner)
    0x0012 -> Ok(bounding_box_text_horizontal_justification)
    0x0014 -> Ok(anchor_point)
    0x0015 -> Ok(anchor_point_visibility)
    0x0020 -> Ok(graphic_dimensions)
    0x0021 -> Ok(number_of_graphic_points)
    0x0022 -> Ok(graphic_data)
    0x0023 -> Ok(graphic_type)
    0x0024 -> Ok(graphic_filled)
    0x0040 -> Ok(image_rotation_retired)
    0x0041 -> Ok(image_horizontal_flip)
    0x0042 -> Ok(image_rotation)
    0x0050 -> Ok(displayed_area_top_left_hand_corner_trial)
    0x0051 -> Ok(displayed_area_bottom_right_hand_corner_trial)
    0x0052 -> Ok(displayed_area_top_left_hand_corner)
    0x0053 -> Ok(displayed_area_bottom_right_hand_corner)
    0x005A -> Ok(displayed_area_selection_sequence)
    0x0060 -> Ok(graphic_layer_sequence)
    0x0062 -> Ok(graphic_layer_order)
    0x0066 -> Ok(graphic_layer_recommended_display_grayscale_value)
    0x0067 -> Ok(graphic_layer_recommended_display_rgb_value)
    0x0068 -> Ok(graphic_layer_description)
    0x0080 -> Ok(content_label)
    0x0081 -> Ok(content_description)
    0x0082 -> Ok(presentation_creation_date)
    0x0083 -> Ok(presentation_creation_time)
    0x0084 -> Ok(content_creator_name)
    0x0086 -> Ok(content_creator_identification_code_sequence)
    0x0087 -> Ok(alternate_content_description_sequence)
    0x0100 -> Ok(presentation_size_mode)
    0x0101 -> Ok(presentation_pixel_spacing)
    0x0102 -> Ok(presentation_pixel_aspect_ratio)
    0x0103 -> Ok(presentation_pixel_magnification_ratio)
    0x0207 -> Ok(graphic_group_label)
    0x0208 -> Ok(graphic_group_description)
    0x0209 -> Ok(compound_graphic_sequence)
    0x0226 -> Ok(compound_graphic_instance_id)
    0x0227 -> Ok(font_name)
    0x0228 -> Ok(font_name_type)
    0x0229 -> Ok(css_font_name)
    0x0230 -> Ok(rotation_angle)
    0x0231 -> Ok(text_style_sequence)
    0x0232 -> Ok(line_style_sequence)
    0x0233 -> Ok(fill_style_sequence)
    0x0234 -> Ok(graphic_group_sequence)
    0x0241 -> Ok(text_color_cie_lab_value)
    0x0242 -> Ok(horizontal_alignment)
    0x0243 -> Ok(vertical_alignment)
    0x0244 -> Ok(shadow_style)
    0x0245 -> Ok(shadow_offset_x)
    0x0246 -> Ok(shadow_offset_y)
    0x0247 -> Ok(shadow_color_cie_lab_value)
    0x0248 -> Ok(underlined)
    0x0249 -> Ok(bold)
    0x0250 -> Ok(italic)
    0x0251 -> Ok(pattern_on_color_cie_lab_value)
    0x0252 -> Ok(pattern_off_color_cie_lab_value)
    0x0253 -> Ok(line_thickness)
    0x0254 -> Ok(line_dashing_style)
    0x0255 -> Ok(line_pattern)
    0x0256 -> Ok(fill_pattern)
    0x0257 -> Ok(fill_mode)
    0x0258 -> Ok(shadow_opacity)
    0x0261 -> Ok(gap_length)
    0x0262 -> Ok(diameter_of_visibility)
    0x0273 -> Ok(rotation_point)
    0x0274 -> Ok(tick_alignment)
    0x0278 -> Ok(show_tick_label)
    0x0279 -> Ok(tick_label_alignment)
    0x0282 -> Ok(compound_graphic_units)
    0x0284 -> Ok(pattern_on_opacity)
    0x0285 -> Ok(pattern_off_opacity)
    0x0287 -> Ok(major_ticks_sequence)
    0x0288 -> Ok(tick_position)
    0x0289 -> Ok(tick_label)
    0x0294 -> Ok(compound_graphic_type)
    0x0295 -> Ok(graphic_group_id)
    0x0306 -> Ok(shape_type)
    0x0308 -> Ok(registration_sequence)
    0x0309 -> Ok(matrix_registration_sequence)
    0x030A -> Ok(matrix_sequence)
    0x030B ->
      Ok(
        frame_of_reference_to_displayed_coordinate_system_transformation_matrix,
      )
    0x030C -> Ok(frame_of_reference_transformation_matrix_type)
    0x030D -> Ok(registration_type_code_sequence)
    0x030F -> Ok(fiducial_description)
    0x0310 -> Ok(fiducial_identifier)
    0x0311 -> Ok(fiducial_identifier_code_sequence)
    0x0312 -> Ok(contour_uncertainty_radius)
    0x0314 -> Ok(used_fiducials_sequence)
    0x0315 -> Ok(used_rt_structure_set_roi_sequence)
    0x0318 -> Ok(graphic_coordinates_data_sequence)
    0x031A -> Ok(fiducial_uid)
    0x031B -> Ok(referenced_fiducial_uid)
    0x031C -> Ok(fiducial_set_sequence)
    0x031E -> Ok(fiducial_sequence)
    0x031F -> Ok(fiducials_property_category_code_sequence)
    0x0401 -> Ok(graphic_layer_recommended_display_cie_lab_value)
    0x0402 -> Ok(blending_sequence)
    0x0403 -> Ok(relative_opacity)
    0x0404 -> Ok(referenced_spatial_registration_sequence)
    0x0405 -> Ok(blending_position)
    0x1101 -> Ok(presentation_display_collection_uid)
    0x1102 -> Ok(presentation_sequence_collection_uid)
    0x1103 -> Ok(presentation_sequence_position_index)
    0x1104 -> Ok(rendered_image_reference_sequence)
    0x1201 -> Ok(volumetric_presentation_state_input_sequence)
    0x1202 -> Ok(presentation_input_type)
    0x1203 -> Ok(input_sequence_position_index)
    0x1204 -> Ok(crop)
    0x1205 -> Ok(cropping_specification_index)
    0x1206 -> Ok(compositing_method)
    0x1207 -> Ok(volumetric_presentation_input_number)
    0x1208 -> Ok(image_volume_geometry)
    0x1209 -> Ok(volumetric_presentation_input_set_uid)
    0x120A -> Ok(volumetric_presentation_input_set_sequence)
    0x120B -> Ok(global_crop)
    0x120C -> Ok(global_cropping_specification_index)
    0x120D -> Ok(rendering_method)
    0x1301 -> Ok(volume_cropping_sequence)
    0x1302 -> Ok(volume_cropping_method)
    0x1303 -> Ok(bounding_box_crop)
    0x1304 -> Ok(oblique_cropping_plane_sequence)
    0x1305 -> Ok(plane)
    0x1306 -> Ok(plane_normal)
    0x1309 -> Ok(cropping_specification_number)
    0x1501 -> Ok(multi_planar_reconstruction_style)
    0x1502 -> Ok(mpr_thickness_type)
    0x1503 -> Ok(mpr_slab_thickness)
    0x1505 -> Ok(mpr_top_left_hand_corner)
    0x1507 -> Ok(mpr_view_width_direction)
    0x1508 -> Ok(mpr_view_width)
    0x150C -> Ok(number_of_volumetric_curve_points)
    0x150D -> Ok(volumetric_curve_points)
    0x1511 -> Ok(mpr_view_height_direction)
    0x1512 -> Ok(mpr_view_height)
    0x1602 -> Ok(render_projection)
    0x1603 -> Ok(viewpoint_position)
    0x1604 -> Ok(viewpoint_look_at_point)
    0x1605 -> Ok(viewpoint_up_direction)
    0x1606 -> Ok(render_field_of_view)
    0x1607 -> Ok(sampling_step_size)
    0x1701 -> Ok(shading_style)
    0x1702 -> Ok(ambient_reflection_intensity)
    0x1703 -> Ok(light_direction)
    0x1704 -> Ok(diffuse_reflection_intensity)
    0x1705 -> Ok(specular_reflection_intensity)
    0x1706 -> Ok(shininess)
    0x1801 -> Ok(presentation_state_classification_component_sequence)
    0x1802 -> Ok(component_type)
    0x1803 -> Ok(component_input_sequence)
    0x1804 -> Ok(volumetric_presentation_input_index)
    0x1805 -> Ok(presentation_state_compositor_component_sequence)
    0x1806 -> Ok(weighting_transfer_function_sequence)
    0x1807 -> Ok(weighting_lookup_table_descriptor)
    0x1808 -> Ok(weighting_lookup_table_data)
    0x1901 -> Ok(volumetric_annotation_sequence)
    0x1903 -> Ok(referenced_structured_context_sequence)
    0x1904 -> Ok(referenced_content_item)
    0x1905 -> Ok(volumetric_presentation_input_annotation_sequence)
    0x1907 -> Ok(annotation_clipping)
    0x1A01 -> Ok(presentation_animation_style)
    0x1A03 -> Ok(recommended_animation_rate)
    0x1A04 -> Ok(animation_curve_sequence)
    0x1A05 -> Ok(animation_step_size)
    0x1A06 -> Ok(swivel_range)
    0x1A07 -> Ok(volumetric_curve_up_directions)
    0x1A08 -> Ok(volume_stream_sequence)
    0x1A09 -> Ok(rgba_transfer_function_description)
    0x1B01 -> Ok(advanced_blending_sequence)
    0x1B02 -> Ok(blending_input_number)
    0x1B03 -> Ok(blending_display_input_sequence)
    0x1B04 -> Ok(blending_display_sequence)
    0x1B06 -> Ok(blending_mode)
    0x1B07 -> Ok(time_series_blending)
    0x1B08 -> Ok(geometry_for_display)
    0x1B11 -> Ok(threshold_sequence)
    0x1B12 -> Ok(threshold_value_sequence)
    0x1B13 -> Ok(threshold_type)
    0x1B14 -> Ok(threshold_value)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0072.
///
fn find_element_in_group_0072(element: Int) -> Result(Item, Nil) {
  case element {
    0x0002 -> Ok(hanging_protocol_name)
    0x0004 -> Ok(hanging_protocol_description)
    0x0006 -> Ok(hanging_protocol_level)
    0x0008 -> Ok(hanging_protocol_creator)
    0x000A -> Ok(hanging_protocol_creation_date_time)
    0x000C -> Ok(hanging_protocol_definition_sequence)
    0x000E -> Ok(hanging_protocol_user_identification_code_sequence)
    0x0010 -> Ok(hanging_protocol_user_group_name)
    0x0012 -> Ok(source_hanging_protocol_sequence)
    0x0014 -> Ok(number_of_priors_referenced)
    0x0020 -> Ok(image_sets_sequence)
    0x0022 -> Ok(image_set_selector_sequence)
    0x0024 -> Ok(image_set_selector_usage_flag)
    0x0026 -> Ok(selector_attribute)
    0x0028 -> Ok(selector_value_number)
    0x0030 -> Ok(time_based_image_sets_sequence)
    0x0032 -> Ok(image_set_number)
    0x0034 -> Ok(image_set_selector_category)
    0x0038 -> Ok(relative_time)
    0x003A -> Ok(relative_time_units)
    0x003C -> Ok(abstract_prior_value)
    0x003E -> Ok(abstract_prior_code_sequence)
    0x0040 -> Ok(image_set_label)
    0x0050 -> Ok(selector_attribute_vr)
    0x0052 -> Ok(selector_sequence_pointer)
    0x0054 -> Ok(selector_sequence_pointer_private_creator)
    0x0056 -> Ok(selector_attribute_private_creator)
    0x005E -> Ok(selector_ae_value)
    0x005F -> Ok(selector_as_value)
    0x0060 -> Ok(selector_at_value)
    0x0061 -> Ok(selector_da_value)
    0x0062 -> Ok(selector_cs_value)
    0x0063 -> Ok(selector_dt_value)
    0x0064 -> Ok(selector_is_value)
    0x0065 -> Ok(selector_ob_value)
    0x0066 -> Ok(selector_lo_value)
    0x0067 -> Ok(selector_of_value)
    0x0068 -> Ok(selector_lt_value)
    0x0069 -> Ok(selector_ow_value)
    0x006A -> Ok(selector_pn_value)
    0x006B -> Ok(selector_tm_value)
    0x006C -> Ok(selector_sh_value)
    0x006D -> Ok(selector_un_value)
    0x006E -> Ok(selector_st_value)
    0x006F -> Ok(selector_uc_value)
    0x0070 -> Ok(selector_ut_value)
    0x0071 -> Ok(selector_ur_value)
    0x0072 -> Ok(selector_ds_value)
    0x0073 -> Ok(selector_od_value)
    0x0074 -> Ok(selector_fd_value)
    0x0075 -> Ok(selector_ol_value)
    0x0076 -> Ok(selector_fl_value)
    0x0078 -> Ok(selector_ul_value)
    0x007A -> Ok(selector_us_value)
    0x007C -> Ok(selector_sl_value)
    0x007E -> Ok(selector_ss_value)
    0x007F -> Ok(selector_ui_value)
    0x0080 -> Ok(selector_code_sequence_value)
    0x0081 -> Ok(selector_ov_value)
    0x0082 -> Ok(selector_sv_value)
    0x0083 -> Ok(selector_uv_value)
    0x0100 -> Ok(number_of_screens)
    0x0102 -> Ok(nominal_screen_definition_sequence)
    0x0104 -> Ok(number_of_vertical_pixels)
    0x0106 -> Ok(number_of_horizontal_pixels)
    0x0108 -> Ok(display_environment_spatial_position)
    0x010A -> Ok(screen_minimum_grayscale_bit_depth)
    0x010C -> Ok(screen_minimum_color_bit_depth)
    0x010E -> Ok(application_maximum_repaint_time)
    0x0200 -> Ok(display_sets_sequence)
    0x0202 -> Ok(display_set_number)
    0x0203 -> Ok(display_set_label)
    0x0204 -> Ok(display_set_presentation_group)
    0x0206 -> Ok(display_set_presentation_group_description)
    0x0208 -> Ok(partial_data_display_handling)
    0x0210 -> Ok(synchronized_scrolling_sequence)
    0x0212 -> Ok(display_set_scrolling_group)
    0x0214 -> Ok(navigation_indicator_sequence)
    0x0216 -> Ok(navigation_display_set)
    0x0218 -> Ok(reference_display_sets)
    0x0300 -> Ok(image_boxes_sequence)
    0x0302 -> Ok(image_box_number)
    0x0304 -> Ok(image_box_layout_type)
    0x0306 -> Ok(image_box_tile_horizontal_dimension)
    0x0308 -> Ok(image_box_tile_vertical_dimension)
    0x0310 -> Ok(image_box_scroll_direction)
    0x0312 -> Ok(image_box_small_scroll_type)
    0x0314 -> Ok(image_box_small_scroll_amount)
    0x0316 -> Ok(image_box_large_scroll_type)
    0x0318 -> Ok(image_box_large_scroll_amount)
    0x0320 -> Ok(image_box_overlap_priority)
    0x0330 -> Ok(cine_relative_to_real_time)
    0x0400 -> Ok(filter_operations_sequence)
    0x0402 -> Ok(filter_by_category)
    0x0404 -> Ok(filter_by_attribute_presence)
    0x0406 -> Ok(filter_by_operator)
    0x0420 -> Ok(structured_display_background_cie_lab_value)
    0x0421 -> Ok(empty_image_box_cie_lab_value)
    0x0422 -> Ok(structured_display_image_box_sequence)
    0x0424 -> Ok(structured_display_text_box_sequence)
    0x0427 -> Ok(referenced_first_frame_sequence)
    0x0430 -> Ok(image_box_synchronization_sequence)
    0x0432 -> Ok(synchronized_image_box_list)
    0x0434 -> Ok(type_of_synchronization)
    0x0500 -> Ok(blending_operation_type)
    0x0510 -> Ok(reformatting_operation_type)
    0x0512 -> Ok(reformatting_thickness)
    0x0514 -> Ok(reformatting_interval)
    0x0516 -> Ok(reformatting_operation_initial_view_direction)
    0x0520 -> Ok(three_d_rendering_type)
    0x0600 -> Ok(sorting_operations_sequence)
    0x0602 -> Ok(sort_by_category)
    0x0604 -> Ok(sorting_direction)
    0x0700 -> Ok(display_set_patient_orientation)
    0x0702 -> Ok(voi_type)
    0x0704 -> Ok(pseudo_color_type)
    0x0705 -> Ok(pseudo_color_palette_instance_reference_sequence)
    0x0706 -> Ok(show_grayscale_inverted)
    0x0710 -> Ok(show_image_true_size_flag)
    0x0712 -> Ok(show_graphic_annotation_flag)
    0x0714 -> Ok(show_patient_demographics_flag)
    0x0716 -> Ok(show_acquisition_techniques_flag)
    0x0717 -> Ok(display_set_horizontal_justification)
    0x0718 -> Ok(display_set_vertical_justification)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0074.
///
fn find_element_in_group_0074(element: Int) -> Result(Item, Nil) {
  case element {
    0x0120 -> Ok(continuation_start_meterset)
    0x0121 -> Ok(continuation_end_meterset)
    0x1000 -> Ok(procedure_step_state)
    0x1002 -> Ok(procedure_step_progress_information_sequence)
    0x1004 -> Ok(procedure_step_progress)
    0x1006 -> Ok(procedure_step_progress_description)
    0x1007 -> Ok(procedure_step_progress_parameters_sequence)
    0x1008 -> Ok(procedure_step_communications_uri_sequence)
    0x100A -> Ok(contact_uri)
    0x100C -> Ok(contact_display_name)
    0x100E -> Ok(procedure_step_discontinuation_reason_code_sequence)
    0x1020 -> Ok(beam_task_sequence)
    0x1022 -> Ok(beam_task_type)
    0x1024 -> Ok(beam_order_index_trial)
    0x1025 -> Ok(autosequence_flag)
    0x1026 -> Ok(table_top_vertical_adjusted_position)
    0x1027 -> Ok(table_top_longitudinal_adjusted_position)
    0x1028 -> Ok(table_top_lateral_adjusted_position)
    0x102A -> Ok(patient_support_adjusted_angle)
    0x102B -> Ok(table_top_eccentric_adjusted_angle)
    0x102C -> Ok(table_top_pitch_adjusted_angle)
    0x102D -> Ok(table_top_roll_adjusted_angle)
    0x1030 -> Ok(delivery_verification_image_sequence)
    0x1032 -> Ok(verification_image_timing)
    0x1034 -> Ok(double_exposure_flag)
    0x1036 -> Ok(double_exposure_ordering)
    0x1038 -> Ok(double_exposure_meterset_trial)
    0x103A -> Ok(double_exposure_field_delta_trial)
    0x1040 -> Ok(related_reference_rt_image_sequence)
    0x1042 -> Ok(general_machine_verification_sequence)
    0x1044 -> Ok(conventional_machine_verification_sequence)
    0x1046 -> Ok(ion_machine_verification_sequence)
    0x1048 -> Ok(failed_attributes_sequence)
    0x104A -> Ok(overridden_attributes_sequence)
    0x104C -> Ok(conventional_control_point_verification_sequence)
    0x104E -> Ok(ion_control_point_verification_sequence)
    0x1050 -> Ok(attribute_occurrence_sequence)
    0x1052 -> Ok(attribute_occurrence_pointer)
    0x1054 -> Ok(attribute_item_selector)
    0x1056 -> Ok(attribute_occurrence_private_creator)
    0x1057 -> Ok(selector_sequence_pointer_items)
    0x1200 -> Ok(scheduled_procedure_step_priority)
    0x1202 -> Ok(worklist_label)
    0x1204 -> Ok(procedure_step_label)
    0x1210 -> Ok(scheduled_processing_parameters_sequence)
    0x1212 -> Ok(performed_processing_parameters_sequence)
    0x1216 -> Ok(unified_procedure_step_performed_procedure_sequence)
    0x1220 -> Ok(related_procedure_step_sequence)
    0x1222 -> Ok(procedure_step_relationship_type)
    0x1224 -> Ok(replaced_procedure_step_sequence)
    0x1230 -> Ok(deletion_lock)
    0x1234 -> Ok(receiving_ae)
    0x1236 -> Ok(requesting_ae)
    0x1238 -> Ok(reason_for_cancellation)
    0x1242 -> Ok(scp_status)
    0x1244 -> Ok(subscription_list_status)
    0x1246 -> Ok(unified_procedure_step_list_status)
    0x1324 -> Ok(beam_order_index)
    0x1338 -> Ok(double_exposure_meterset)
    0x133A -> Ok(double_exposure_field_delta)
    0x1401 -> Ok(brachy_task_sequence)
    0x1402 -> Ok(continuation_start_total_reference_air_kerma)
    0x1403 -> Ok(continuation_end_total_reference_air_kerma)
    0x1404 -> Ok(continuation_pulse_number)
    0x1405 -> Ok(channel_delivery_order_sequence)
    0x1406 -> Ok(referenced_channel_number)
    0x1407 -> Ok(start_cumulative_time_weight)
    0x1408 -> Ok(end_cumulative_time_weight)
    0x1409 -> Ok(omitted_channel_sequence)
    0x140A -> Ok(reason_for_channel_omission)
    0x140B -> Ok(reason_for_channel_omission_description)
    0x140C -> Ok(channel_delivery_order_index)
    0x140D -> Ok(channel_delivery_continuation_sequence)
    0x140E -> Ok(omitted_application_setup_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0076.
///
fn find_element_in_group_0076(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(implant_assembly_template_name)
    0x0003 -> Ok(implant_assembly_template_issuer)
    0x0006 -> Ok(implant_assembly_template_version)
    0x0008 -> Ok(replaced_implant_assembly_template_sequence)
    0x000A -> Ok(implant_assembly_template_type)
    0x000C -> Ok(original_implant_assembly_template_sequence)
    0x000E -> Ok(derivation_implant_assembly_template_sequence)
    0x0010 -> Ok(implant_assembly_template_target_anatomy_sequence)
    0x0020 -> Ok(procedure_type_code_sequence)
    0x0030 -> Ok(surgical_technique)
    0x0032 -> Ok(component_types_sequence)
    0x0034 -> Ok(component_type_code_sequence)
    0x0036 -> Ok(exclusive_component_type)
    0x0038 -> Ok(mandatory_component_type)
    0x0040 -> Ok(component_sequence)
    0x0055 -> Ok(component_id)
    0x0060 -> Ok(component_assembly_sequence)
    0x0070 -> Ok(component_1_referenced_id)
    0x0080 -> Ok(component_1_referenced_mating_feature_set_id)
    0x0090 -> Ok(component_1_referenced_mating_feature_id)
    0x00A0 -> Ok(component_2_referenced_id)
    0x00B0 -> Ok(component_2_referenced_mating_feature_set_id)
    0x00C0 -> Ok(component_2_referenced_mating_feature_id)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0078.
///
fn find_element_in_group_0078(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(implant_template_group_name)
    0x0010 -> Ok(implant_template_group_description)
    0x0020 -> Ok(implant_template_group_issuer)
    0x0024 -> Ok(implant_template_group_version)
    0x0026 -> Ok(replaced_implant_template_group_sequence)
    0x0028 -> Ok(implant_template_group_target_anatomy_sequence)
    0x002A -> Ok(implant_template_group_members_sequence)
    0x002E -> Ok(implant_template_group_member_id)
    0x0050 -> Ok(three_d_implant_template_group_member_matching_point)
    0x0060 -> Ok(three_d_implant_template_group_member_matching_axes)
    0x0070 -> Ok(implant_template_group_member_matching_2d_coordinates_sequence)
    0x0090 -> Ok(two_d_implant_template_group_member_matching_point)
    0x00A0 -> Ok(two_d_implant_template_group_member_matching_axes)
    0x00B0 -> Ok(implant_template_group_variation_dimension_sequence)
    0x00B2 -> Ok(implant_template_group_variation_dimension_name)
    0x00B4 -> Ok(implant_template_group_variation_dimension_rank_sequence)
    0x00B6 -> Ok(referenced_implant_template_group_member_id)
    0x00B8 -> Ok(implant_template_group_variation_dimension_rank)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0080.
///
fn find_element_in_group_0080(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(surface_scan_acquisition_type_code_sequence)
    0x0002 -> Ok(surface_scan_mode_code_sequence)
    0x0003 -> Ok(registration_method_code_sequence)
    0x0004 -> Ok(shot_duration_time)
    0x0005 -> Ok(shot_offset_time)
    0x0006 -> Ok(surface_point_presentation_value_data)
    0x0007 -> Ok(surface_point_color_cie_lab_value_data)
    0x0008 -> Ok(uv_mapping_sequence)
    0x0009 -> Ok(texture_label)
    0x0010 -> Ok(u_value_data)
    0x0011 -> Ok(v_value_data)
    0x0012 -> Ok(referenced_texture_sequence)
    0x0013 -> Ok(referenced_surface_data_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0082.
///
fn find_element_in_group_0082(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(assessment_summary)
    0x0003 -> Ok(assessment_summary_description)
    0x0004 -> Ok(assessed_sop_instance_sequence)
    0x0005 -> Ok(referenced_comparison_sop_instance_sequence)
    0x0006 -> Ok(number_of_assessment_observations)
    0x0007 -> Ok(assessment_observations_sequence)
    0x0008 -> Ok(observation_significance)
    0x000A -> Ok(observation_description)
    0x000C -> Ok(structured_constraint_observation_sequence)
    0x0010 -> Ok(assessed_attribute_value_sequence)
    0x0016 -> Ok(assessment_set_id)
    0x0017 -> Ok(assessment_requester_sequence)
    0x0018 -> Ok(selector_attribute_name)
    0x0019 -> Ok(selector_attribute_keyword)
    0x0021 -> Ok(assessment_type_code_sequence)
    0x0022 -> Ok(observation_basis_code_sequence)
    0x0023 -> Ok(assessment_label)
    0x0032 -> Ok(constraint_type)
    0x0033 -> Ok(specification_selection_guidance)
    0x0034 -> Ok(constraint_value_sequence)
    0x0035 -> Ok(recommended_default_value_sequence)
    0x0036 -> Ok(constraint_violation_significance)
    0x0037 -> Ok(constraint_violation_condition)
    0x0038 -> Ok(modifiable_constraint_flag)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0088.
///
fn find_element_in_group_0088(element: Int) -> Result(Item, Nil) {
  case element {
    0x0130 -> Ok(storage_media_file_set_id)
    0x0140 -> Ok(storage_media_file_set_uid)
    0x0200 -> Ok(icon_image_sequence)
    0x0904 -> Ok(topic_title)
    0x0906 -> Ok(topic_subject)
    0x0910 -> Ok(topic_author)
    0x0912 -> Ok(topic_keywords)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0100.
///
fn find_element_in_group_0100(element: Int) -> Result(Item, Nil) {
  case element {
    0x0410 -> Ok(sop_instance_status)
    0x0420 -> Ok(sop_authorization_date_time)
    0x0424 -> Ok(sop_authorization_comment)
    0x0426 -> Ok(authorization_equipment_certification_number)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x0400.
///
fn find_element_in_group_0400(element: Int) -> Result(Item, Nil) {
  case element {
    0x0005 -> Ok(macid_number)
    0x0010 -> Ok(mac_calculation_transfer_syntax_uid)
    0x0015 -> Ok(mac_algorithm)
    0x0020 -> Ok(data_elements_signed)
    0x0100 -> Ok(digital_signature_uid)
    0x0105 -> Ok(digital_signature_date_time)
    0x0110 -> Ok(certificate_type)
    0x0115 -> Ok(certificate_of_signer)
    0x0120 -> Ok(signature)
    0x0305 -> Ok(certified_timestamp_type)
    0x0310 -> Ok(certified_timestamp)
    0x0401 -> Ok(digital_signature_purpose_code_sequence)
    0x0402 -> Ok(referenced_digital_signature_sequence)
    0x0403 -> Ok(referenced_sop_instance_mac_sequence)
    0x0404 -> Ok(mac)
    0x0500 -> Ok(encrypted_attributes_sequence)
    0x0510 -> Ok(encrypted_content_transfer_syntax_uid)
    0x0520 -> Ok(encrypted_content)
    0x0550 -> Ok(modified_attributes_sequence)
    0x0551 -> Ok(nonconforming_modified_attributes_sequence)
    0x0552 -> Ok(nonconforming_data_element_value)
    0x0561 -> Ok(original_attributes_sequence)
    0x0562 -> Ok(attribute_modification_date_time)
    0x0563 -> Ok(modifying_system)
    0x0564 -> Ok(source_of_previous_values)
    0x0565 -> Ok(reason_for_the_attribute_modification)
    0x0600 -> Ok(instance_origin_status)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x1000.
///
fn find_element_in_group_1000(element: Int) -> Result(Item, Nil) {
  case element {
    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x1010.
///
fn find_element_in_group_1010(element: Int) -> Result(Item, Nil) {
  case element {
    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x2000.
///
fn find_element_in_group_2000(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(number_of_copies)
    0x001E -> Ok(printer_configuration_sequence)
    0x0020 -> Ok(print_priority)
    0x0030 -> Ok(medium_type)
    0x0040 -> Ok(film_destination)
    0x0050 -> Ok(film_session_label)
    0x0060 -> Ok(memory_allocation)
    0x0061 -> Ok(maximum_memory_allocation)
    0x0062 -> Ok(color_image_printing_flag)
    0x0063 -> Ok(collation_flag)
    0x0065 -> Ok(annotation_flag)
    0x0067 -> Ok(image_overlay_flag)
    0x0069 -> Ok(presentation_lut_flag)
    0x006A -> Ok(image_box_presentation_lut_flag)
    0x00A0 -> Ok(memory_bit_depth)
    0x00A1 -> Ok(printing_bit_depth)
    0x00A2 -> Ok(media_installed_sequence)
    0x00A4 -> Ok(other_media_available_sequence)
    0x00A8 -> Ok(supported_image_display_formats_sequence)
    0x0500 -> Ok(referenced_film_box_sequence)
    0x0510 -> Ok(referenced_stored_print_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x2010.
///
fn find_element_in_group_2010(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(image_display_format)
    0x0030 -> Ok(annotation_display_format_id)
    0x0040 -> Ok(film_orientation)
    0x0050 -> Ok(film_size_id)
    0x0052 -> Ok(printer_resolution_id)
    0x0054 -> Ok(default_printer_resolution_id)
    0x0060 -> Ok(magnification_type)
    0x0080 -> Ok(smoothing_type)
    0x00A6 -> Ok(default_magnification_type)
    0x00A7 -> Ok(other_magnification_types_available)
    0x00A8 -> Ok(default_smoothing_type)
    0x00A9 -> Ok(other_smoothing_types_available)
    0x0100 -> Ok(border_density)
    0x0110 -> Ok(empty_image_density)
    0x0120 -> Ok(min_density)
    0x0130 -> Ok(max_density)
    0x0140 -> Ok(trim)
    0x0150 -> Ok(configuration_information)
    0x0152 -> Ok(configuration_information_description)
    0x0154 -> Ok(maximum_collated_films)
    0x015E -> Ok(illumination)
    0x0160 -> Ok(reflected_ambient_light)
    0x0376 -> Ok(printer_pixel_spacing)
    0x0500 -> Ok(referenced_film_session_sequence)
    0x0510 -> Ok(referenced_image_box_sequence)
    0x0520 -> Ok(referenced_basic_annotation_box_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x2020.
///
fn find_element_in_group_2020(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(image_box_position)
    0x0020 -> Ok(polarity)
    0x0030 -> Ok(requested_image_size)
    0x0040 -> Ok(requested_decimate_crop_behavior)
    0x0050 -> Ok(requested_resolution_id)
    0x00A0 -> Ok(requested_image_size_flag)
    0x00A2 -> Ok(decimate_crop_result)
    0x0110 -> Ok(basic_grayscale_image_sequence)
    0x0111 -> Ok(basic_color_image_sequence)
    0x0130 -> Ok(referenced_image_overlay_box_sequence)
    0x0140 -> Ok(referenced_voilut_box_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x2030.
///
fn find_element_in_group_2030(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(annotation_position)
    0x0020 -> Ok(text_string)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x2040.
///
fn find_element_in_group_2040(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(referenced_overlay_plane_sequence)
    0x0011 -> Ok(referenced_overlay_plane_groups)
    0x0020 -> Ok(overlay_pixel_data_sequence)
    0x0060 -> Ok(overlay_magnification_type)
    0x0070 -> Ok(overlay_smoothing_type)
    0x0072 -> Ok(overlay_or_image_magnification)
    0x0074 -> Ok(magnify_to_number_of_columns)
    0x0080 -> Ok(overlay_foreground_density)
    0x0082 -> Ok(overlay_background_density)
    0x0090 -> Ok(overlay_mode)
    0x0100 -> Ok(threshold_density)
    0x0500 -> Ok(referenced_image_box_sequence_retired)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x2050.
///
fn find_element_in_group_2050(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(presentation_lut_sequence)
    0x0020 -> Ok(presentation_lut_shape)
    0x0500 -> Ok(referenced_presentation_lut_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x2100.
///
fn find_element_in_group_2100(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(print_job_id)
    0x0020 -> Ok(execution_status)
    0x0030 -> Ok(execution_status_info)
    0x0040 -> Ok(creation_date)
    0x0050 -> Ok(creation_time)
    0x0070 -> Ok(originator)
    0x0140 -> Ok(destination_ae)
    0x0160 -> Ok(owner_id)
    0x0170 -> Ok(number_of_films)
    0x0500 -> Ok(referenced_print_job_sequence_pull_stored_print)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x2110.
///
fn find_element_in_group_2110(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(printer_status)
    0x0020 -> Ok(printer_status_info)
    0x0030 -> Ok(printer_name)
    0x0099 -> Ok(print_queue_id)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x2120.
///
fn find_element_in_group_2120(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(queue_status)
    0x0050 -> Ok(print_job_description_sequence)
    0x0070 -> Ok(referenced_print_job_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x2130.
///
fn find_element_in_group_2130(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(print_management_capabilities_sequence)
    0x0015 -> Ok(printer_characteristics_sequence)
    0x0030 -> Ok(film_box_content_sequence)
    0x0040 -> Ok(image_box_content_sequence)
    0x0050 -> Ok(annotation_content_sequence)
    0x0060 -> Ok(image_overlay_box_content_sequence)
    0x0080 -> Ok(presentation_lut_content_sequence)
    0x00A0 -> Ok(proposed_study_sequence)
    0x00C0 -> Ok(original_image_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x2200.
///
fn find_element_in_group_2200(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(label_using_information_extracted_from_instances)
    0x0002 -> Ok(label_text)
    0x0003 -> Ok(label_style_selection)
    0x0004 -> Ok(media_disposition)
    0x0005 -> Ok(barcode_value)
    0x0006 -> Ok(barcode_symbology)
    0x0007 -> Ok(allow_media_splitting)
    0x0008 -> Ok(include_non_dicom_objects)
    0x0009 -> Ok(include_display_application)
    0x000A -> Ok(preserve_composite_instances_after_media_creation)
    0x000B -> Ok(total_number_of_pieces_of_media_created)
    0x000C -> Ok(requested_media_application_profile)
    0x000D -> Ok(referenced_storage_media_sequence)
    0x000E -> Ok(failure_attributes)
    0x000F -> Ok(allow_lossy_compression)
    0x0020 -> Ok(request_priority)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x3002.
///
fn find_element_in_group_3002(element: Int) -> Result(Item, Nil) {
  case element {
    0x0002 -> Ok(rt_image_label)
    0x0003 -> Ok(rt_image_name)
    0x0004 -> Ok(rt_image_description)
    0x000A -> Ok(reported_values_origin)
    0x000C -> Ok(rt_image_plane)
    0x000D -> Ok(x_ray_image_receptor_translation)
    0x000E -> Ok(x_ray_image_receptor_angle)
    0x0010 -> Ok(rt_image_orientation)
    0x0011 -> Ok(image_plane_pixel_spacing)
    0x0012 -> Ok(rt_image_position)
    0x0020 -> Ok(radiation_machine_name)
    0x0022 -> Ok(radiation_machine_sad)
    0x0024 -> Ok(radiation_machine_ssd)
    0x0026 -> Ok(rt_image_sid)
    0x0028 -> Ok(source_to_reference_object_distance)
    0x0029 -> Ok(fraction_number)
    0x0030 -> Ok(exposure_sequence)
    0x0032 -> Ok(meterset_exposure)
    0x0034 -> Ok(diaphragm_position)
    0x0040 -> Ok(fluence_map_sequence)
    0x0041 -> Ok(fluence_data_source)
    0x0042 -> Ok(fluence_data_scale)
    0x0050 -> Ok(primary_fluence_mode_sequence)
    0x0051 -> Ok(fluence_mode)
    0x0052 -> Ok(fluence_mode_id)
    0x0100 -> Ok(selected_frame_number)
    0x0101 -> Ok(selected_frame_functional_groups_sequence)
    0x0102 -> Ok(rt_image_frame_general_content_sequence)
    0x0103 -> Ok(rt_image_frame_context_sequence)
    0x0104 -> Ok(rt_image_scope_sequence)
    0x0105 -> Ok(beam_modifier_coordinates_presence_flag)
    0x0106 -> Ok(start_cumulative_meterset)
    0x0107 -> Ok(stop_cumulative_meterset)
    0x0108 -> Ok(rt_acquisition_patient_position_sequence)
    0x0109 -> Ok(rt_image_frame_imaging_device_position_sequence)
    0x010A -> Ok(rt_image_framek_v_radiation_acquisition_sequence)
    0x010B -> Ok(rt_image_frame_mv_radiation_acquisition_sequence)
    0x010C -> Ok(rt_image_frame_radiation_acquisition_sequence)
    0x010D -> Ok(imaging_source_position_sequence)
    0x010E -> Ok(image_receptor_position_sequence)
    0x010F -> Ok(device_position_to_equipment_mapping_matrix)
    0x0110 -> Ok(device_position_parameter_sequence)
    0x0111 -> Ok(imaging_source_location_specification_type)
    0x0112 -> Ok(imaging_device_location_matrix_sequence)
    0x0113 -> Ok(imaging_device_location_parameter_sequence)
    0x0114 -> Ok(imaging_aperture_sequence)
    0x0115 -> Ok(imaging_aperture_specification_type)
    0x0116 -> Ok(number_of_acquisition_devices)
    0x0117 -> Ok(acquisition_device_sequence)
    0x0118 -> Ok(acquisition_task_sequence)
    0x0119 -> Ok(acquisition_task_workitem_code_sequence)
    0x011A -> Ok(acquisition_subtask_sequence)
    0x011B -> Ok(subtask_workitem_code_sequence)
    0x011C -> Ok(acquisition_task_index)
    0x011D -> Ok(acquisition_subtask_index)
    0x011E -> Ok(referenced_baseline_parameters_rt_radiation_instance_sequence)
    0x011F -> Ok(position_acquisition_template_identification_sequence)
    0x0120 -> Ok(position_acquisition_template_id)
    0x0121 -> Ok(position_acquisition_template_name)
    0x0122 -> Ok(position_acquisition_template_code_sequence)
    0x0123 -> Ok(position_acquisition_template_description)
    0x0124 -> Ok(acquisition_task_applicability_sequence)
    0x0125 -> Ok(projection_imaging_acquisition_parameter_sequence)
    0x0126 -> Ok(ct_imaging_acquisition_parameter_sequence)
    0x0127 -> Ok(kv_imaging_generation_parameters_sequence)
    0x0128 -> Ok(mv_imaging_generation_parameters_sequence)
    0x0129 -> Ok(acquisition_signal_type)
    0x012A -> Ok(acquisition_method)
    0x012B -> Ok(scan_start_position_sequence)
    0x012C -> Ok(scan_stop_position_sequence)
    0x012D -> Ok(imaging_source_to_beam_modifier_definition_plane_distance)
    0x012E -> Ok(scan_arc_type)
    0x012F -> Ok(detector_positioning_type)
    0x0130 -> Ok(additional_rt_accessory_device_sequence)
    0x0131 -> Ok(device_specific_acquisition_parameter_sequence)
    0x0132 -> Ok(referenced_position_reference_instance_sequence)
    0x0133 -> Ok(energy_derivation_code_sequence)
    0x0134 -> Ok(maximum_cumulative_meterset_exposure)
    0x0135 -> Ok(acquisition_initiation_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x3004.
///
fn find_element_in_group_3004(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(dvh_type)
    0x0002 -> Ok(dose_units)
    0x0004 -> Ok(dose_type)
    0x0005 -> Ok(spatial_transform_of_dose)
    0x0006 -> Ok(dose_comment)
    0x0008 -> Ok(normalization_point)
    0x000A -> Ok(dose_summation_type)
    0x000C -> Ok(grid_frame_offset_vector)
    0x000E -> Ok(dose_grid_scaling)
    0x0010 -> Ok(rt_dose_roi_sequence)
    0x0012 -> Ok(dose_value)
    0x0014 -> Ok(tissue_heterogeneity_correction)
    0x0040 -> Ok(dvh_normalization_point)
    0x0042 -> Ok(dvh_normalization_dose_value)
    0x0050 -> Ok(dvh_sequence)
    0x0052 -> Ok(dvh_dose_scaling)
    0x0054 -> Ok(dvh_volume_units)
    0x0056 -> Ok(dvh_number_of_bins)
    0x0058 -> Ok(dvh_data)
    0x0060 -> Ok(dvh_referenced_roi_sequence)
    0x0062 -> Ok(dvh_roi_contribution_type)
    0x0070 -> Ok(dvh_minimum_dose)
    0x0072 -> Ok(dvh_maximum_dose)
    0x0074 -> Ok(dvh_mean_dose)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x3006.
///
fn find_element_in_group_3006(element: Int) -> Result(Item, Nil) {
  case element {
    0x0002 -> Ok(structure_set_label)
    0x0004 -> Ok(structure_set_name)
    0x0006 -> Ok(structure_set_description)
    0x0008 -> Ok(structure_set_date)
    0x0009 -> Ok(structure_set_time)
    0x0010 -> Ok(referenced_frame_of_reference_sequence)
    0x0012 -> Ok(rt_referenced_study_sequence)
    0x0014 -> Ok(rt_referenced_series_sequence)
    0x0016 -> Ok(contour_image_sequence)
    0x0018 -> Ok(predecessor_structure_set_sequence)
    0x0020 -> Ok(structure_set_roi_sequence)
    0x0022 -> Ok(roi_number)
    0x0024 -> Ok(referenced_frame_of_reference_uid)
    0x0026 -> Ok(roi_name)
    0x0028 -> Ok(roi_description)
    0x002A -> Ok(roi_display_color)
    0x002C -> Ok(roi_volume)
    0x002D -> Ok(roi_date_time)
    0x002E -> Ok(roi_observation_date_time)
    0x0030 -> Ok(rt_related_roi_sequence)
    0x0033 -> Ok(rtroi_relationship)
    0x0036 -> Ok(roi_generation_algorithm)
    0x0037 -> Ok(roi_derivation_algorithm_identification_sequence)
    0x0038 -> Ok(roi_generation_description)
    0x0039 -> Ok(roi_contour_sequence)
    0x0040 -> Ok(contour_sequence)
    0x0042 -> Ok(contour_geometric_type)
    0x0044 -> Ok(contour_slab_thickness)
    0x0045 -> Ok(contour_offset_vector)
    0x0046 -> Ok(number_of_contour_points)
    0x0048 -> Ok(contour_number)
    0x0049 -> Ok(attached_contours)
    0x004A -> Ok(source_pixel_planes_characteristics_sequence)
    0x004B -> Ok(source_series_sequence)
    0x004C -> Ok(source_series_information_sequence)
    0x004D -> Ok(roi_creator_sequence)
    0x004E -> Ok(roi_interpreter_sequence)
    0x004F -> Ok(roi_observation_context_code_sequence)
    0x0050 -> Ok(contour_data)
    0x0080 -> Ok(rtroi_observations_sequence)
    0x0082 -> Ok(observation_number)
    0x0084 -> Ok(referenced_roi_number)
    0x0085 -> Ok(roi_observation_label)
    0x0086 -> Ok(rtroi_identification_code_sequence)
    0x0088 -> Ok(roi_observation_description)
    0x00A0 -> Ok(related_rtroi_observations_sequence)
    0x00A4 -> Ok(rtroi_interpreted_type)
    0x00A6 -> Ok(roi_interpreter)
    0x00B0 -> Ok(roi_physical_properties_sequence)
    0x00B2 -> Ok(roi_physical_property)
    0x00B4 -> Ok(roi_physical_property_value)
    0x00B6 -> Ok(roi_elemental_composition_sequence)
    0x00B7 -> Ok(roi_elemental_composition_atomic_number)
    0x00B8 -> Ok(roi_elemental_composition_atomic_mass_fraction)
    0x00B9 -> Ok(additional_rtroi_identification_code_sequence)
    0x00C0 -> Ok(frame_of_reference_relationship_sequence)
    0x00C2 -> Ok(related_frame_of_reference_uid)
    0x00C4 -> Ok(frame_of_reference_transformation_type)
    0x00C6 -> Ok(frame_of_reference_transformation_matrix)
    0x00C8 -> Ok(frame_of_reference_transformation_comment)
    0x00C9 -> Ok(patient_location_coordinates_sequence)
    0x00CA -> Ok(patient_location_coordinates_code_sequence)
    0x00CB -> Ok(patient_support_position_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x3008.
///
fn find_element_in_group_3008(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(measured_dose_reference_sequence)
    0x0012 -> Ok(measured_dose_description)
    0x0014 -> Ok(measured_dose_type)
    0x0016 -> Ok(measured_dose_value)
    0x0020 -> Ok(treatment_session_beam_sequence)
    0x0021 -> Ok(treatment_session_ion_beam_sequence)
    0x0022 -> Ok(current_fraction_number)
    0x0024 -> Ok(treatment_control_point_date)
    0x0025 -> Ok(treatment_control_point_time)
    0x002A -> Ok(treatment_termination_status)
    0x002B -> Ok(treatment_termination_code)
    0x002C -> Ok(treatment_verification_status)
    0x0030 -> Ok(referenced_treatment_record_sequence)
    0x0032 -> Ok(specified_primary_meterset)
    0x0033 -> Ok(specified_secondary_meterset)
    0x0036 -> Ok(delivered_primary_meterset)
    0x0037 -> Ok(delivered_secondary_meterset)
    0x003A -> Ok(specified_treatment_time)
    0x003B -> Ok(delivered_treatment_time)
    0x0040 -> Ok(control_point_delivery_sequence)
    0x0041 -> Ok(ion_control_point_delivery_sequence)
    0x0042 -> Ok(specified_meterset)
    0x0044 -> Ok(delivered_meterset)
    0x0045 -> Ok(meterset_rate_set)
    0x0046 -> Ok(meterset_rate_delivered)
    0x0047 -> Ok(scan_spot_metersets_delivered)
    0x0048 -> Ok(dose_rate_delivered)
    0x0050 -> Ok(treatment_summary_calculated_dose_reference_sequence)
    0x0052 -> Ok(cumulative_dose_to_dose_reference)
    0x0054 -> Ok(first_treatment_date)
    0x0056 -> Ok(most_recent_treatment_date)
    0x005A -> Ok(number_of_fractions_delivered)
    0x0060 -> Ok(override_sequence)
    0x0061 -> Ok(parameter_sequence_pointer)
    0x0062 -> Ok(override_parameter_pointer)
    0x0063 -> Ok(parameter_item_index)
    0x0064 -> Ok(measured_dose_reference_number)
    0x0065 -> Ok(parameter_pointer)
    0x0066 -> Ok(override_reason)
    0x0067 -> Ok(parameter_value_number)
    0x0068 -> Ok(corrected_parameter_sequence)
    0x006A -> Ok(correction_value)
    0x0070 -> Ok(calculated_dose_reference_sequence)
    0x0072 -> Ok(calculated_dose_reference_number)
    0x0074 -> Ok(calculated_dose_reference_description)
    0x0076 -> Ok(calculated_dose_reference_dose_value)
    0x0078 -> Ok(start_meterset)
    0x007A -> Ok(end_meterset)
    0x0080 -> Ok(referenced_measured_dose_reference_sequence)
    0x0082 -> Ok(referenced_measured_dose_reference_number)
    0x0090 -> Ok(referenced_calculated_dose_reference_sequence)
    0x0092 -> Ok(referenced_calculated_dose_reference_number)
    0x00A0 -> Ok(beam_limiting_device_leaf_pairs_sequence)
    0x00A1 -> Ok(enhanced_rt_beam_limiting_device_sequence)
    0x00A2 -> Ok(enhanced_rt_beam_limiting_opening_sequence)
    0x00A3 -> Ok(enhanced_rt_beam_limiting_device_definition_flag)
    0x00A4 -> Ok(parallel_rt_beam_delimiter_opening_extents)
    0x00B0 -> Ok(recorded_wedge_sequence)
    0x00C0 -> Ok(recorded_compensator_sequence)
    0x00D0 -> Ok(recorded_block_sequence)
    0x00D1 -> Ok(recorded_block_slab_sequence)
    0x00E0 -> Ok(treatment_summary_measured_dose_reference_sequence)
    0x00F0 -> Ok(recorded_snout_sequence)
    0x00F2 -> Ok(recorded_range_shifter_sequence)
    0x00F4 -> Ok(recorded_lateral_spreading_device_sequence)
    0x00F6 -> Ok(recorded_range_modulator_sequence)
    0x0100 -> Ok(recorded_source_sequence)
    0x0105 -> Ok(source_serial_number)
    0x0110 -> Ok(treatment_session_application_setup_sequence)
    0x0116 -> Ok(application_setup_check)
    0x0120 -> Ok(recorded_brachy_accessory_device_sequence)
    0x0122 -> Ok(referenced_brachy_accessory_device_number)
    0x0130 -> Ok(recorded_channel_sequence)
    0x0132 -> Ok(specified_channel_total_time)
    0x0134 -> Ok(delivered_channel_total_time)
    0x0136 -> Ok(specified_number_of_pulses)
    0x0138 -> Ok(delivered_number_of_pulses)
    0x013A -> Ok(specified_pulse_repetition_interval)
    0x013C -> Ok(delivered_pulse_repetition_interval)
    0x0140 -> Ok(recorded_source_applicator_sequence)
    0x0142 -> Ok(referenced_source_applicator_number)
    0x0150 -> Ok(recorded_channel_shield_sequence)
    0x0152 -> Ok(referenced_channel_shield_number)
    0x0160 -> Ok(brachy_control_point_delivered_sequence)
    0x0162 -> Ok(safe_position_exit_date)
    0x0164 -> Ok(safe_position_exit_time)
    0x0166 -> Ok(safe_position_return_date)
    0x0168 -> Ok(safe_position_return_time)
    0x0171 -> Ok(pulse_specific_brachy_control_point_delivered_sequence)
    0x0172 -> Ok(pulse_number)
    0x0173 -> Ok(brachy_pulse_control_point_delivered_sequence)
    0x0200 -> Ok(current_treatment_status)
    0x0202 -> Ok(treatment_status_comment)
    0x0220 -> Ok(fraction_group_summary_sequence)
    0x0223 -> Ok(referenced_fraction_number)
    0x0224 -> Ok(fraction_group_type)
    0x0230 -> Ok(beam_stopper_position)
    0x0240 -> Ok(fraction_status_summary_sequence)
    0x0250 -> Ok(treatment_date)
    0x0251 -> Ok(treatment_time)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x300A.
///
fn find_element_in_group_300a(element: Int) -> Result(Item, Nil) {
  case element {
    0x0002 -> Ok(rt_plan_label)
    0x0003 -> Ok(rt_plan_name)
    0x0004 -> Ok(rt_plan_description)
    0x0006 -> Ok(rt_plan_date)
    0x0007 -> Ok(rt_plan_time)
    0x0009 -> Ok(treatment_protocols)
    0x000A -> Ok(plan_intent)
    0x000B -> Ok(treatment_sites)
    0x000C -> Ok(rt_plan_geometry)
    0x000E -> Ok(prescription_description)
    0x0010 -> Ok(dose_reference_sequence)
    0x0012 -> Ok(dose_reference_number)
    0x0013 -> Ok(dose_reference_uid)
    0x0014 -> Ok(dose_reference_structure_type)
    0x0015 -> Ok(nominal_beam_energy_unit)
    0x0016 -> Ok(dose_reference_description)
    0x0018 -> Ok(dose_reference_point_coordinates)
    0x001A -> Ok(nominal_prior_dose)
    0x0020 -> Ok(dose_reference_type)
    0x0021 -> Ok(constraint_weight)
    0x0022 -> Ok(delivery_warning_dose)
    0x0023 -> Ok(delivery_maximum_dose)
    0x0025 -> Ok(target_minimum_dose)
    0x0026 -> Ok(target_prescription_dose)
    0x0027 -> Ok(target_maximum_dose)
    0x0028 -> Ok(target_underdose_volume_fraction)
    0x002A -> Ok(organ_at_risk_full_volume_dose)
    0x002B -> Ok(organ_at_risk_limit_dose)
    0x002C -> Ok(organ_at_risk_maximum_dose)
    0x002D -> Ok(organ_at_risk_overdose_volume_fraction)
    0x0040 -> Ok(tolerance_table_sequence)
    0x0042 -> Ok(tolerance_table_number)
    0x0043 -> Ok(tolerance_table_label)
    0x0044 -> Ok(gantry_angle_tolerance)
    0x0046 -> Ok(beam_limiting_device_angle_tolerance)
    0x0048 -> Ok(beam_limiting_device_tolerance_sequence)
    0x004A -> Ok(beam_limiting_device_position_tolerance)
    0x004B -> Ok(snout_position_tolerance)
    0x004C -> Ok(patient_support_angle_tolerance)
    0x004E -> Ok(table_top_eccentric_angle_tolerance)
    0x004F -> Ok(table_top_pitch_angle_tolerance)
    0x0050 -> Ok(table_top_roll_angle_tolerance)
    0x0051 -> Ok(table_top_vertical_position_tolerance)
    0x0052 -> Ok(table_top_longitudinal_position_tolerance)
    0x0053 -> Ok(table_top_lateral_position_tolerance)
    0x0055 -> Ok(rt_plan_relationship)
    0x0070 -> Ok(fraction_group_sequence)
    0x0071 -> Ok(fraction_group_number)
    0x0072 -> Ok(fraction_group_description)
    0x0078 -> Ok(number_of_fractions_planned)
    0x0079 -> Ok(number_of_fraction_pattern_digits_per_day)
    0x007A -> Ok(repeat_fraction_cycle_length)
    0x007B -> Ok(fraction_pattern)
    0x0080 -> Ok(number_of_beams)
    0x0082 -> Ok(beam_dose_specification_point)
    0x0083 -> Ok(referenced_dose_reference_uid)
    0x0084 -> Ok(beam_dose)
    0x0086 -> Ok(beam_meterset)
    0x0088 -> Ok(beam_dose_point_depth)
    0x0089 -> Ok(beam_dose_point_equivalent_depth)
    0x008A -> Ok(beam_dose_point_ssd)
    0x008B -> Ok(beam_dose_meaning)
    0x008C -> Ok(beam_dose_verification_control_point_sequence)
    0x008D -> Ok(average_beam_dose_point_depth)
    0x008E -> Ok(average_beam_dose_point_equivalent_depth)
    0x008F -> Ok(average_beam_dose_point_ssd)
    0x0090 -> Ok(beam_dose_type)
    0x0091 -> Ok(alternate_beam_dose)
    0x0092 -> Ok(alternate_beam_dose_type)
    0x0093 -> Ok(depth_value_averaging_flag)
    0x0094 -> Ok(beam_dose_point_source_to_external_contour_distance)
    0x00A0 -> Ok(number_of_brachy_application_setups)
    0x00A2 -> Ok(brachy_application_setup_dose_specification_point)
    0x00A4 -> Ok(brachy_application_setup_dose)
    0x00B0 -> Ok(beam_sequence)
    0x00B2 -> Ok(treatment_machine_name)
    0x00B3 -> Ok(primary_dosimeter_unit)
    0x00B4 -> Ok(source_axis_distance)
    0x00B6 -> Ok(beam_limiting_device_sequence)
    0x00B8 -> Ok(rt_beam_limiting_device_type)
    0x00BA -> Ok(source_to_beam_limiting_device_distance)
    0x00BB -> Ok(isocenter_to_beam_limiting_device_distance)
    0x00BC -> Ok(number_of_leaf_jaw_pairs)
    0x00BE -> Ok(leaf_position_boundaries)
    0x00C0 -> Ok(beam_number)
    0x00C2 -> Ok(beam_name)
    0x00C3 -> Ok(beam_description)
    0x00C4 -> Ok(beam_type)
    0x00C5 -> Ok(beam_delivery_duration_limit)
    0x00C6 -> Ok(radiation_type)
    0x00C7 -> Ok(high_dose_technique_type)
    0x00C8 -> Ok(reference_image_number)
    0x00CA -> Ok(planned_verification_image_sequence)
    0x00CC -> Ok(imaging_device_specific_acquisition_parameters)
    0x00CE -> Ok(treatment_delivery_type)
    0x00D0 -> Ok(number_of_wedges)
    0x00D1 -> Ok(wedge_sequence)
    0x00D2 -> Ok(wedge_number)
    0x00D3 -> Ok(wedge_type)
    0x00D4 -> Ok(wedge_id)
    0x00D5 -> Ok(wedge_angle)
    0x00D6 -> Ok(wedge_factor)
    0x00D7 -> Ok(total_wedge_tray_water_equivalent_thickness)
    0x00D8 -> Ok(wedge_orientation)
    0x00D9 -> Ok(isocenter_to_wedge_tray_distance)
    0x00DA -> Ok(source_to_wedge_tray_distance)
    0x00DB -> Ok(wedge_thin_edge_position)
    0x00DC -> Ok(bolus_id)
    0x00DD -> Ok(bolus_description)
    0x00DE -> Ok(effective_wedge_angle)
    0x00E0 -> Ok(number_of_compensators)
    0x00E1 -> Ok(material_id)
    0x00E2 -> Ok(total_compensator_tray_factor)
    0x00E3 -> Ok(compensator_sequence)
    0x00E4 -> Ok(compensator_number)
    0x00E5 -> Ok(compensator_id)
    0x00E6 -> Ok(source_to_compensator_tray_distance)
    0x00E7 -> Ok(compensator_rows)
    0x00E8 -> Ok(compensator_columns)
    0x00E9 -> Ok(compensator_pixel_spacing)
    0x00EA -> Ok(compensator_position)
    0x00EB -> Ok(compensator_transmission_data)
    0x00EC -> Ok(compensator_thickness_data)
    0x00ED -> Ok(number_of_boli)
    0x00EE -> Ok(compensator_type)
    0x00EF -> Ok(compensator_tray_id)
    0x00F0 -> Ok(number_of_blocks)
    0x00F2 -> Ok(total_block_tray_factor)
    0x00F3 -> Ok(total_block_tray_water_equivalent_thickness)
    0x00F4 -> Ok(block_sequence)
    0x00F5 -> Ok(block_tray_id)
    0x00F6 -> Ok(source_to_block_tray_distance)
    0x00F7 -> Ok(isocenter_to_block_tray_distance)
    0x00F8 -> Ok(block_type)
    0x00F9 -> Ok(accessory_code)
    0x00FA -> Ok(block_divergence)
    0x00FB -> Ok(block_mounting_position)
    0x00FC -> Ok(block_number)
    0x00FE -> Ok(block_name)
    0x0100 -> Ok(block_thickness)
    0x0102 -> Ok(block_transmission)
    0x0104 -> Ok(block_number_of_points)
    0x0106 -> Ok(block_data)
    0x0107 -> Ok(applicator_sequence)
    0x0108 -> Ok(applicator_id)
    0x0109 -> Ok(applicator_type)
    0x010A -> Ok(applicator_description)
    0x010C -> Ok(cumulative_dose_reference_coefficient)
    0x010E -> Ok(final_cumulative_meterset_weight)
    0x0110 -> Ok(number_of_control_points)
    0x0111 -> Ok(control_point_sequence)
    0x0112 -> Ok(control_point_index)
    0x0114 -> Ok(nominal_beam_energy)
    0x0115 -> Ok(dose_rate_set)
    0x0116 -> Ok(wedge_position_sequence)
    0x0118 -> Ok(wedge_position)
    0x011A -> Ok(beam_limiting_device_position_sequence)
    0x011C -> Ok(leaf_jaw_positions)
    0x011E -> Ok(gantry_angle)
    0x011F -> Ok(gantry_rotation_direction)
    0x0120 -> Ok(beam_limiting_device_angle)
    0x0121 -> Ok(beam_limiting_device_rotation_direction)
    0x0122 -> Ok(patient_support_angle)
    0x0123 -> Ok(patient_support_rotation_direction)
    0x0124 -> Ok(table_top_eccentric_axis_distance)
    0x0125 -> Ok(table_top_eccentric_angle)
    0x0126 -> Ok(table_top_eccentric_rotation_direction)
    0x0128 -> Ok(table_top_vertical_position)
    0x0129 -> Ok(table_top_longitudinal_position)
    0x012A -> Ok(table_top_lateral_position)
    0x012C -> Ok(isocenter_position)
    0x012E -> Ok(surface_entry_point)
    0x0130 -> Ok(source_to_surface_distance)
    0x0131 -> Ok(average_beam_dose_point_source_to_external_contour_distance)
    0x0132 -> Ok(source_to_external_contour_distance)
    0x0133 -> Ok(external_contour_entry_point)
    0x0134 -> Ok(cumulative_meterset_weight)
    0x0140 -> Ok(table_top_pitch_angle)
    0x0142 -> Ok(table_top_pitch_rotation_direction)
    0x0144 -> Ok(table_top_roll_angle)
    0x0146 -> Ok(table_top_roll_rotation_direction)
    0x0148 -> Ok(head_fixation_angle)
    0x014A -> Ok(gantry_pitch_angle)
    0x014C -> Ok(gantry_pitch_rotation_direction)
    0x014E -> Ok(gantry_pitch_angle_tolerance)
    0x0150 -> Ok(fixation_eye)
    0x0151 -> Ok(chair_head_frame_position)
    0x0152 -> Ok(head_fixation_angle_tolerance)
    0x0153 -> Ok(chair_head_frame_position_tolerance)
    0x0154 -> Ok(fixation_light_azimuthal_angle_tolerance)
    0x0155 -> Ok(fixation_light_polar_angle_tolerance)
    0x0180 -> Ok(patient_setup_sequence)
    0x0182 -> Ok(patient_setup_number)
    0x0183 -> Ok(patient_setup_label)
    0x0184 -> Ok(patient_additional_position)
    0x0190 -> Ok(fixation_device_sequence)
    0x0192 -> Ok(fixation_device_type)
    0x0194 -> Ok(fixation_device_label)
    0x0196 -> Ok(fixation_device_description)
    0x0198 -> Ok(fixation_device_position)
    0x0199 -> Ok(fixation_device_pitch_angle)
    0x019A -> Ok(fixation_device_roll_angle)
    0x01A0 -> Ok(shielding_device_sequence)
    0x01A2 -> Ok(shielding_device_type)
    0x01A4 -> Ok(shielding_device_label)
    0x01A6 -> Ok(shielding_device_description)
    0x01A8 -> Ok(shielding_device_position)
    0x01B0 -> Ok(setup_technique)
    0x01B2 -> Ok(setup_technique_description)
    0x01B4 -> Ok(setup_device_sequence)
    0x01B6 -> Ok(setup_device_type)
    0x01B8 -> Ok(setup_device_label)
    0x01BA -> Ok(setup_device_description)
    0x01BC -> Ok(setup_device_parameter)
    0x01D0 -> Ok(setup_reference_description)
    0x01D2 -> Ok(table_top_vertical_setup_displacement)
    0x01D4 -> Ok(table_top_longitudinal_setup_displacement)
    0x01D6 -> Ok(table_top_lateral_setup_displacement)
    0x0200 -> Ok(brachy_treatment_technique)
    0x0202 -> Ok(brachy_treatment_type)
    0x0206 -> Ok(treatment_machine_sequence)
    0x0210 -> Ok(source_sequence)
    0x0212 -> Ok(source_number)
    0x0214 -> Ok(source_type)
    0x0216 -> Ok(source_manufacturer)
    0x0218 -> Ok(active_source_diameter)
    0x021A -> Ok(active_source_length)
    0x021B -> Ok(source_model_id)
    0x021C -> Ok(source_description)
    0x0222 -> Ok(source_encapsulation_nominal_thickness)
    0x0224 -> Ok(source_encapsulation_nominal_transmission)
    0x0226 -> Ok(source_isotope_name)
    0x0228 -> Ok(source_isotope_half_life)
    0x0229 -> Ok(source_strength_units)
    0x022A -> Ok(reference_air_kerma_rate)
    0x022B -> Ok(source_strength)
    0x022C -> Ok(source_strength_reference_date)
    0x022E -> Ok(source_strength_reference_time)
    0x0230 -> Ok(application_setup_sequence)
    0x0232 -> Ok(application_setup_type)
    0x0234 -> Ok(application_setup_number)
    0x0236 -> Ok(application_setup_name)
    0x0238 -> Ok(application_setup_manufacturer)
    0x0240 -> Ok(template_number)
    0x0242 -> Ok(template_type)
    0x0244 -> Ok(template_name)
    0x0250 -> Ok(total_reference_air_kerma)
    0x0260 -> Ok(brachy_accessory_device_sequence)
    0x0262 -> Ok(brachy_accessory_device_number)
    0x0263 -> Ok(brachy_accessory_device_id)
    0x0264 -> Ok(brachy_accessory_device_type)
    0x0266 -> Ok(brachy_accessory_device_name)
    0x026A -> Ok(brachy_accessory_device_nominal_thickness)
    0x026C -> Ok(brachy_accessory_device_nominal_transmission)
    0x0271 -> Ok(channel_effective_length)
    0x0272 -> Ok(channel_inner_length)
    0x0273 -> Ok(afterloader_channel_id)
    0x0274 -> Ok(source_applicator_tip_length)
    0x0280 -> Ok(channel_sequence)
    0x0282 -> Ok(channel_number)
    0x0284 -> Ok(channel_length)
    0x0286 -> Ok(channel_total_time)
    0x0288 -> Ok(source_movement_type)
    0x028A -> Ok(number_of_pulses)
    0x028C -> Ok(pulse_repetition_interval)
    0x0290 -> Ok(source_applicator_number)
    0x0291 -> Ok(source_applicator_id)
    0x0292 -> Ok(source_applicator_type)
    0x0294 -> Ok(source_applicator_name)
    0x0296 -> Ok(source_applicator_length)
    0x0298 -> Ok(source_applicator_manufacturer)
    0x029C -> Ok(source_applicator_wall_nominal_thickness)
    0x029E -> Ok(source_applicator_wall_nominal_transmission)
    0x02A0 -> Ok(source_applicator_step_size)
    0x02A1 -> Ok(applicator_shape_referenced_roi_number)
    0x02A2 -> Ok(transfer_tube_number)
    0x02A4 -> Ok(transfer_tube_length)
    0x02B0 -> Ok(channel_shield_sequence)
    0x02B2 -> Ok(channel_shield_number)
    0x02B3 -> Ok(channel_shield_id)
    0x02B4 -> Ok(channel_shield_name)
    0x02B8 -> Ok(channel_shield_nominal_thickness)
    0x02BA -> Ok(channel_shield_nominal_transmission)
    0x02C8 -> Ok(final_cumulative_time_weight)
    0x02D0 -> Ok(brachy_control_point_sequence)
    0x02D2 -> Ok(control_point_relative_position)
    0x02D4 -> Ok(control_point_3d_position)
    0x02D6 -> Ok(cumulative_time_weight)
    0x02E0 -> Ok(compensator_divergence)
    0x02E1 -> Ok(compensator_mounting_position)
    0x02E2 -> Ok(source_to_compensator_distance)
    0x02E3 -> Ok(total_compensator_tray_water_equivalent_thickness)
    0x02E4 -> Ok(isocenter_to_compensator_tray_distance)
    0x02E5 -> Ok(compensator_column_offset)
    0x02E6 -> Ok(isocenter_to_compensator_distances)
    0x02E7 -> Ok(compensator_relative_stopping_power_ratio)
    0x02E8 -> Ok(compensator_milling_tool_diameter)
    0x02EA -> Ok(ion_range_compensator_sequence)
    0x02EB -> Ok(compensator_description)
    0x0302 -> Ok(radiation_mass_number)
    0x0304 -> Ok(radiation_atomic_number)
    0x0306 -> Ok(radiation_charge_state)
    0x0308 -> Ok(scan_mode)
    0x0309 -> Ok(modulated_scan_mode_type)
    0x030A -> Ok(virtual_source_axis_distances)
    0x030C -> Ok(snout_sequence)
    0x030D -> Ok(snout_position)
    0x030F -> Ok(snout_id)
    0x0312 -> Ok(number_of_range_shifters)
    0x0314 -> Ok(range_shifter_sequence)
    0x0316 -> Ok(range_shifter_number)
    0x0318 -> Ok(range_shifter_id)
    0x0320 -> Ok(range_shifter_type)
    0x0322 -> Ok(range_shifter_description)
    0x0330 -> Ok(number_of_lateral_spreading_devices)
    0x0332 -> Ok(lateral_spreading_device_sequence)
    0x0334 -> Ok(lateral_spreading_device_number)
    0x0336 -> Ok(lateral_spreading_device_id)
    0x0338 -> Ok(lateral_spreading_device_type)
    0x033A -> Ok(lateral_spreading_device_description)
    0x033C -> Ok(lateral_spreading_device_water_equivalent_thickness)
    0x0340 -> Ok(number_of_range_modulators)
    0x0342 -> Ok(range_modulator_sequence)
    0x0344 -> Ok(range_modulator_number)
    0x0346 -> Ok(range_modulator_id)
    0x0348 -> Ok(range_modulator_type)
    0x034A -> Ok(range_modulator_description)
    0x034C -> Ok(beam_current_modulation_id)
    0x0350 -> Ok(patient_support_type)
    0x0352 -> Ok(patient_support_id)
    0x0354 -> Ok(patient_support_accessory_code)
    0x0355 -> Ok(tray_accessory_code)
    0x0356 -> Ok(fixation_light_azimuthal_angle)
    0x0358 -> Ok(fixation_light_polar_angle)
    0x035A -> Ok(meterset_rate)
    0x0360 -> Ok(range_shifter_settings_sequence)
    0x0362 -> Ok(range_shifter_setting)
    0x0364 -> Ok(isocenter_to_range_shifter_distance)
    0x0366 -> Ok(range_shifter_water_equivalent_thickness)
    0x0370 -> Ok(lateral_spreading_device_settings_sequence)
    0x0372 -> Ok(lateral_spreading_device_setting)
    0x0374 -> Ok(isocenter_to_lateral_spreading_device_distance)
    0x0380 -> Ok(range_modulator_settings_sequence)
    0x0382 -> Ok(range_modulator_gating_start_value)
    0x0384 -> Ok(range_modulator_gating_stop_value)
    0x0386 -> Ok(range_modulator_gating_start_water_equivalent_thickness)
    0x0388 -> Ok(range_modulator_gating_stop_water_equivalent_thickness)
    0x038A -> Ok(isocenter_to_range_modulator_distance)
    0x038F -> Ok(scan_spot_time_offset)
    0x0390 -> Ok(scan_spot_tune_id)
    0x0391 -> Ok(scan_spot_prescribed_indices)
    0x0392 -> Ok(number_of_scan_spot_positions)
    0x0393 -> Ok(scan_spot_reordered)
    0x0394 -> Ok(scan_spot_position_map)
    0x0395 -> Ok(scan_spot_reordering_allowed)
    0x0396 -> Ok(scan_spot_meterset_weights)
    0x0398 -> Ok(scanning_spot_size)
    0x0399 -> Ok(scan_spot_sizes_delivered)
    0x039A -> Ok(number_of_paintings)
    0x03A0 -> Ok(ion_tolerance_table_sequence)
    0x03A2 -> Ok(ion_beam_sequence)
    0x03A4 -> Ok(ion_beam_limiting_device_sequence)
    0x03A6 -> Ok(ion_block_sequence)
    0x03A8 -> Ok(ion_control_point_sequence)
    0x03AA -> Ok(ion_wedge_sequence)
    0x03AC -> Ok(ion_wedge_position_sequence)
    0x0401 -> Ok(referenced_setup_image_sequence)
    0x0402 -> Ok(setup_image_comment)
    0x0410 -> Ok(motion_synchronization_sequence)
    0x0412 -> Ok(control_point_orientation)
    0x0420 -> Ok(general_accessory_sequence)
    0x0421 -> Ok(general_accessory_id)
    0x0422 -> Ok(general_accessory_description)
    0x0423 -> Ok(general_accessory_type)
    0x0424 -> Ok(general_accessory_number)
    0x0425 -> Ok(source_to_general_accessory_distance)
    0x0426 -> Ok(isocenter_to_general_accessory_distance)
    0x0431 -> Ok(applicator_geometry_sequence)
    0x0432 -> Ok(applicator_aperture_shape)
    0x0433 -> Ok(applicator_opening)
    0x0434 -> Ok(applicator_opening_x)
    0x0435 -> Ok(applicator_opening_y)
    0x0436 -> Ok(source_to_applicator_mounting_position_distance)
    0x0440 -> Ok(number_of_block_slab_items)
    0x0441 -> Ok(block_slab_sequence)
    0x0442 -> Ok(block_slab_thickness)
    0x0443 -> Ok(block_slab_number)
    0x0450 -> Ok(device_motion_control_sequence)
    0x0451 -> Ok(device_motion_execution_mode)
    0x0452 -> Ok(device_motion_observation_mode)
    0x0453 -> Ok(device_motion_parameter_code_sequence)
    0x0501 -> Ok(distal_depth_fraction)
    0x0502 -> Ok(distal_depth)
    0x0503 -> Ok(nominal_range_modulation_fractions)
    0x0504 -> Ok(nominal_range_modulated_region_depths)
    0x0505 -> Ok(depth_dose_parameters_sequence)
    0x0506 -> Ok(delivered_depth_dose_parameters_sequence)
    0x0507 -> Ok(delivered_distal_depth_fraction)
    0x0508 -> Ok(delivered_distal_depth)
    0x0509 -> Ok(delivered_nominal_range_modulation_fractions)
    0x0510 -> Ok(delivered_nominal_range_modulated_region_depths)
    0x0511 -> Ok(delivered_reference_dose_definition)
    0x0512 -> Ok(reference_dose_definition)
    0x0600 -> Ok(rt_control_point_index)
    0x0601 -> Ok(radiation_generation_mode_index)
    0x0602 -> Ok(referenced_defined_device_index)
    0x0603 -> Ok(radiation_dose_identification_index)
    0x0604 -> Ok(number_of_rt_control_points)
    0x0605 -> Ok(referenced_radiation_generation_mode_index)
    0x0606 -> Ok(treatment_position_index)
    0x0607 -> Ok(referenced_device_index)
    0x0608 -> Ok(treatment_position_group_label)
    0x0609 -> Ok(treatment_position_group_uid)
    0x060A -> Ok(treatment_position_group_sequence)
    0x060B -> Ok(referenced_treatment_position_index)
    0x060C -> Ok(referenced_radiation_dose_identification_index)
    0x060D -> Ok(rt_accessory_holder_water_equivalent_thickness)
    0x060E -> Ok(referenced_rt_accessory_holder_device_index)
    0x060F -> Ok(rt_accessory_holder_slot_existence_flag)
    0x0610 -> Ok(rt_accessory_holder_slot_sequence)
    0x0611 -> Ok(rt_accessory_holder_slot_id)
    0x0612 -> Ok(rt_accessory_holder_slot_distance)
    0x0613 -> Ok(rt_accessory_slot_distance)
    0x0614 -> Ok(rt_accessory_holder_definition_sequence)
    0x0615 -> Ok(rt_accessory_device_slot_id)
    0x0616 -> Ok(rt_radiation_sequence)
    0x0617 -> Ok(radiation_dose_sequence)
    0x0618 -> Ok(radiation_dose_identification_sequence)
    0x0619 -> Ok(radiation_dose_identification_label)
    0x061A -> Ok(reference_dose_type)
    0x061B -> Ok(primary_dose_value_indicator)
    0x061C -> Ok(dose_values_sequence)
    0x061D -> Ok(dose_value_purpose)
    0x061E -> Ok(reference_dose_point_coordinates)
    0x061F -> Ok(radiation_dose_values_parameters_sequence)
    0x0620 -> Ok(meterset_to_dose_mapping_sequence)
    0x0621 -> Ok(expected_in_vivo_measurement_values_sequence)
    0x0622 -> Ok(expected_in_vivo_measurement_value_index)
    0x0623 -> Ok(radiation_dose_in_vivo_measurement_label)
    0x0624 -> Ok(radiation_dose_central_axis_displacement)
    0x0625 -> Ok(radiation_dose_value)
    0x0626 -> Ok(radiation_dose_source_to_skin_distance)
    0x0627 -> Ok(radiation_dose_measurement_point_coordinates)
    0x0628 -> Ok(radiation_dose_source_to_external_contour_distance)
    0x0629 -> Ok(rt_tolerance_set_sequence)
    0x062A -> Ok(rt_tolerance_set_label)
    0x062B -> Ok(attribute_tolerance_values_sequence)
    0x062C -> Ok(tolerance_value)
    0x062D -> Ok(patient_support_position_tolerance_sequence)
    0x062E -> Ok(treatment_time_limit)
    0x062F -> Ok(c_arm_photon_electron_control_point_sequence)
    0x0630 -> Ok(referenced_rt_radiation_sequence)
    0x0631 -> Ok(referenced_rt_instance_sequence)
    0x0632 -> Ok(referenced_rt_patient_setup_sequence)
    0x0634 -> Ok(source_to_patient_surface_distance)
    0x0635 -> Ok(treatment_machine_special_mode_code_sequence)
    0x0636 -> Ok(intended_number_of_fractions)
    0x0637 -> Ok(rt_radiation_set_intent)
    0x0638 -> Ok(rt_radiation_physical_and_geometric_content_detail_flag)
    0x0639 -> Ok(rt_record_flag)
    0x063A -> Ok(treatment_device_identification_sequence)
    0x063B -> Ok(referenced_rt_physician_intent_sequence)
    0x063C -> Ok(cumulative_meterset)
    0x063D -> Ok(delivery_rate)
    0x063E -> Ok(delivery_rate_unit_sequence)
    0x063F -> Ok(treatment_position_sequence)
    0x0640 -> Ok(radiation_source_axis_distance)
    0x0641 -> Ok(number_of_rt_beam_limiting_devices)
    0x0642 -> Ok(rt_beam_limiting_device_proximal_distance)
    0x0643 -> Ok(rt_beam_limiting_device_distal_distance)
    0x0644 ->
      Ok(parallel_rt_beam_delimiter_device_orientation_label_code_sequence)
    0x0645 -> Ok(beam_modifier_orientation_angle)
    0x0646 -> Ok(fixed_rt_beam_delimiter_device_sequence)
    0x0647 -> Ok(parallel_rt_beam_delimiter_device_sequence)
    0x0648 -> Ok(number_of_parallel_rt_beam_delimiters)
    0x0649 -> Ok(parallel_rt_beam_delimiter_boundaries)
    0x064A -> Ok(parallel_rt_beam_delimiter_positions)
    0x064B -> Ok(rt_beam_limiting_device_offset)
    0x064C -> Ok(rt_beam_delimiter_geometry_sequence)
    0x064D -> Ok(rt_beam_limiting_device_definition_sequence)
    0x064E -> Ok(parallel_rt_beam_delimiter_opening_mode)
    0x064F -> Ok(parallel_rt_beam_delimiter_leaf_mounting_side)
    0x0650 -> Ok(patient_setup_uid)
    0x0651 -> Ok(wedge_definition_sequence)
    0x0652 -> Ok(radiation_beam_wedge_angle)
    0x0653 -> Ok(radiation_beam_wedge_thin_edge_distance)
    0x0654 -> Ok(radiation_beam_effective_wedge_angle)
    0x0655 -> Ok(number_of_wedge_positions)
    0x0656 -> Ok(rt_beam_limiting_device_opening_sequence)
    0x0657 -> Ok(number_of_rt_beam_limiting_device_openings)
    0x0658 -> Ok(radiation_dosimeter_unit_sequence)
    0x0659 -> Ok(rt_device_distance_reference_location_code_sequence)
    0x065A -> Ok(radiation_device_configuration_and_commissioning_key_sequence)
    0x065B -> Ok(patient_support_position_parameter_sequence)
    0x065C -> Ok(patient_support_position_specification_method)
    0x065D -> Ok(patient_support_position_device_parameter_sequence)
    0x065E -> Ok(device_order_index)
    0x065F -> Ok(patient_support_position_parameter_order_index)
    0x0660 -> Ok(patient_support_position_device_tolerance_sequence)
    0x0661 -> Ok(patient_support_position_tolerance_order_index)
    0x0662 -> Ok(compensator_definition_sequence)
    0x0663 -> Ok(compensator_map_orientation)
    0x0664 -> Ok(compensator_proximal_thickness_map)
    0x0665 -> Ok(compensator_distal_thickness_map)
    0x0666 -> Ok(compensator_base_plane_offset)
    0x0667 -> Ok(compensator_shape_fabrication_code_sequence)
    0x0668 -> Ok(compensator_shape_sequence)
    0x0669 -> Ok(radiation_beam_compensator_milling_tool_diameter)
    0x066A -> Ok(block_definition_sequence)
    0x066B -> Ok(block_edge_data)
    0x066C -> Ok(block_orientation)
    0x066D -> Ok(radiation_beam_block_thickness)
    0x066E -> Ok(radiation_beam_block_slab_thickness)
    0x066F -> Ok(block_edge_data_sequence)
    0x0670 -> Ok(number_of_rt_accessory_holders)
    0x0671 -> Ok(general_accessory_definition_sequence)
    0x0672 -> Ok(number_of_general_accessories)
    0x0673 -> Ok(bolus_definition_sequence)
    0x0674 -> Ok(number_of_boluses)
    0x0675 -> Ok(equipment_frame_of_reference_uid)
    0x0676 -> Ok(equipment_frame_of_reference_description)
    0x0677 -> Ok(equipment_reference_point_coordinates_sequence)
    0x0678 -> Ok(equipment_reference_point_code_sequence)
    0x0679 -> Ok(rt_beam_limiting_device_angle)
    0x067A -> Ok(source_roll_angle)
    0x067B -> Ok(radiation_generation_mode_sequence)
    0x067C -> Ok(radiation_generation_mode_label)
    0x067D -> Ok(radiation_generation_mode_description)
    0x067E -> Ok(radiation_generation_mode_machine_code_sequence)
    0x067F -> Ok(radiation_type_code_sequence)
    0x0680 -> Ok(nominal_energy)
    0x0681 -> Ok(minimum_nominal_energy)
    0x0682 -> Ok(maximum_nominal_energy)
    0x0683 -> Ok(radiation_fluence_modifier_code_sequence)
    0x0684 -> Ok(energy_unit_code_sequence)
    0x0685 -> Ok(number_of_radiation_generation_modes)
    0x0686 -> Ok(patient_support_devices_sequence)
    0x0687 -> Ok(number_of_patient_support_devices)
    0x0688 -> Ok(rt_beam_modifier_definition_distance)
    0x0689 -> Ok(beam_area_limit_sequence)
    0x068A -> Ok(referenced_rt_prescription_sequence)
    0x068B -> Ok(dose_value_interpretation)
    0x0700 -> Ok(treatment_session_uid)
    0x0701 -> Ok(rt_radiation_usage)
    0x0702 -> Ok(referenced_rt_radiation_set_sequence)
    0x0703 -> Ok(referenced_rt_radiation_record_sequence)
    0x0704 -> Ok(rt_radiation_set_delivery_number)
    0x0705 -> Ok(clinical_fraction_number)
    0x0706 -> Ok(rt_treatment_fraction_completion_status)
    0x0707 -> Ok(rt_radiation_set_usage)
    0x0708 -> Ok(treatment_delivery_continuation_flag)
    0x0709 -> Ok(treatment_record_content_origin)
    0x0714 -> Ok(rt_treatment_termination_status)
    0x0715 -> Ok(rt_treatment_termination_reason_code_sequence)
    0x0716 -> Ok(machine_specific_treatment_termination_code_sequence)
    0x0722 -> Ok(rt_radiation_salvage_record_control_point_sequence)
    0x0723 -> Ok(starting_meterset_value_known_flag)
    0x0730 -> Ok(treatment_termination_description)
    0x0731 -> Ok(treatment_tolerance_violation_sequence)
    0x0732 -> Ok(treatment_tolerance_violation_category)
    0x0733 -> Ok(treatment_tolerance_violation_attribute_sequence)
    0x0734 -> Ok(treatment_tolerance_violation_description)
    0x0735 -> Ok(treatment_tolerance_violation_identification)
    0x0736 -> Ok(treatment_tolerance_violation_date_time)
    0x073A -> Ok(recorded_rt_control_point_date_time)
    0x073B -> Ok(referenced_radiation_rt_control_point_index)
    0x073E -> Ok(alternate_value_sequence)
    0x073F -> Ok(confirmation_sequence)
    0x0740 -> Ok(interlock_sequence)
    0x0741 -> Ok(interlock_date_time)
    0x0742 -> Ok(interlock_description)
    0x0743 -> Ok(interlock_originating_device_sequence)
    0x0744 -> Ok(interlock_code_sequence)
    0x0745 -> Ok(interlock_resolution_code_sequence)
    0x0746 -> Ok(interlock_resolution_user_sequence)
    0x0760 -> Ok(override_date_time)
    0x0761 -> Ok(treatment_tolerance_violation_type_code_sequence)
    0x0762 -> Ok(treatment_tolerance_violation_cause_code_sequence)
    0x0772 -> Ok(measured_meterset_to_dose_mapping_sequence)
    0x0773 -> Ok(referenced_expected_in_vivo_measurement_value_index)
    0x0774 -> Ok(dose_measurement_device_code_sequence)
    0x0780 -> Ok(additional_parameter_recording_instance_sequence)
    0x0783 -> Ok(interlock_origin_description)
    0x0784 -> Ok(rt_patient_position_scope_sequence)
    0x0785 -> Ok(referenced_treatment_position_group_uid)
    0x0786 -> Ok(radiation_order_index)
    0x0787 -> Ok(omitted_radiation_sequence)
    0x0788 -> Ok(reason_for_omission_code_sequence)
    0x0789 -> Ok(rt_delivery_start_patient_position_sequence)
    0x078A -> Ok(rt_treatment_preparation_patient_position_sequence)
    0x078B -> Ok(referenced_rt_treatment_preparation_sequence)
    0x078C -> Ok(referenced_patient_setup_photo_sequence)
    0x078D -> Ok(patient_treatment_preparation_method_code_sequence)
    0x078E -> Ok(patient_treatment_preparation_procedure_parameter_description)
    0x078F -> Ok(patient_treatment_preparation_device_sequence)
    0x0790 -> Ok(patient_treatment_preparation_procedure_sequence)
    0x0791 -> Ok(patient_treatment_preparation_procedure_code_sequence)
    0x0792 -> Ok(patient_treatment_preparation_method_description)
    0x0793 -> Ok(patient_treatment_preparation_procedure_parameter_sequence)
    0x0794 -> Ok(patient_setup_photo_description)
    0x0795 -> Ok(patient_treatment_preparation_procedure_index)
    0x0796 -> Ok(referenced_patient_setup_procedure_index)
    0x0797 -> Ok(rt_radiation_task_sequence)
    0x0798 -> Ok(rt_patient_position_displacement_sequence)
    0x0799 -> Ok(rt_patient_position_sequence)
    0x079A -> Ok(displacement_reference_label)
    0x079B -> Ok(displacement_matrix)
    0x079C -> Ok(patient_support_displacement_sequence)
    0x079D -> Ok(displacement_reference_location_code_sequence)
    0x079E -> Ok(rt_radiation_set_delivery_usage)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x300C.
///
fn find_element_in_group_300c(element: Int) -> Result(Item, Nil) {
  case element {
    0x0002 -> Ok(referenced_rt_plan_sequence)
    0x0004 -> Ok(referenced_beam_sequence)
    0x0006 -> Ok(referenced_beam_number)
    0x0007 -> Ok(referenced_reference_image_number)
    0x0008 -> Ok(start_cumulative_meterset_weight)
    0x0009 -> Ok(end_cumulative_meterset_weight)
    0x000A -> Ok(referenced_brachy_application_setup_sequence)
    0x000C -> Ok(referenced_brachy_application_setup_number)
    0x000E -> Ok(referenced_source_number)
    0x0020 -> Ok(referenced_fraction_group_sequence)
    0x0022 -> Ok(referenced_fraction_group_number)
    0x0040 -> Ok(referenced_verification_image_sequence)
    0x0042 -> Ok(referenced_reference_image_sequence)
    0x0050 -> Ok(referenced_dose_reference_sequence)
    0x0051 -> Ok(referenced_dose_reference_number)
    0x0055 -> Ok(brachy_referenced_dose_reference_sequence)
    0x0060 -> Ok(referenced_structure_set_sequence)
    0x006A -> Ok(referenced_patient_setup_number)
    0x0080 -> Ok(referenced_dose_sequence)
    0x00A0 -> Ok(referenced_tolerance_table_number)
    0x00B0 -> Ok(referenced_bolus_sequence)
    0x00C0 -> Ok(referenced_wedge_number)
    0x00D0 -> Ok(referenced_compensator_number)
    0x00E0 -> Ok(referenced_block_number)
    0x00F0 -> Ok(referenced_control_point_index)
    0x00F2 -> Ok(referenced_control_point_sequence)
    0x00F4 -> Ok(referenced_start_control_point_index)
    0x00F6 -> Ok(referenced_stop_control_point_index)
    0x0100 -> Ok(referenced_range_shifter_number)
    0x0102 -> Ok(referenced_lateral_spreading_device_number)
    0x0104 -> Ok(referenced_range_modulator_number)
    0x0111 -> Ok(omitted_beam_task_sequence)
    0x0112 -> Ok(reason_for_omission)
    0x0113 -> Ok(reason_for_omission_description)
    0x0114 -> Ok(prescription_overview_sequence)
    0x0115 -> Ok(total_prescription_dose)
    0x0116 -> Ok(plan_overview_sequence)
    0x0117 -> Ok(plan_overview_index)
    0x0118 -> Ok(referenced_plan_overview_index)
    0x0119 -> Ok(number_of_fractions_included)
    0x0120 -> Ok(dose_calibration_conditions_sequence)
    0x0121 -> Ok(absorbed_dose_to_meterset_ratio)
    0x0122 -> Ok(delineated_radiation_field_size)
    0x0123 -> Ok(dose_calibration_conditions_verified_flag)
    0x0124 -> Ok(calibration_reference_point_depth)
    0x0125 -> Ok(gating_beam_hold_transition_sequence)
    0x0126 -> Ok(beam_hold_transition)
    0x0127 -> Ok(beam_hold_transition_date_time)
    0x0128 -> Ok(beam_hold_originating_device_sequence)
    0x0129 -> Ok(beam_hold_transition_trigger_source)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x300E.
///
fn find_element_in_group_300e(element: Int) -> Result(Item, Nil) {
  case element {
    0x0002 -> Ok(approval_status)
    0x0004 -> Ok(review_date)
    0x0005 -> Ok(review_time)
    0x0008 -> Ok(reviewer_name)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x3010.
///
fn find_element_in_group_3010(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(radiobiological_dose_effect_sequence)
    0x0002 -> Ok(radiobiological_dose_effect_flag)
    0x0003 -> Ok(effective_dose_calculation_method_category_code_sequence)
    0x0004 -> Ok(effective_dose_calculation_method_code_sequence)
    0x0005 -> Ok(effective_dose_calculation_method_description)
    0x0006 -> Ok(conceptual_volume_uid)
    0x0007 -> Ok(originating_sop_instance_reference_sequence)
    0x0008 -> Ok(conceptual_volume_constituent_sequence)
    0x0009 -> Ok(equivalent_conceptual_volume_instance_reference_sequence)
    0x000A -> Ok(equivalent_conceptual_volumes_sequence)
    0x000B -> Ok(referenced_conceptual_volume_uid)
    0x000C -> Ok(conceptual_volume_combination_expression)
    0x000D -> Ok(conceptual_volume_constituent_index)
    0x000E -> Ok(conceptual_volume_combination_flag)
    0x000F -> Ok(conceptual_volume_combination_description)
    0x0010 -> Ok(conceptual_volume_segmentation_defined_flag)
    0x0011 -> Ok(conceptual_volume_segmentation_reference_sequence)
    0x0012 -> Ok(conceptual_volume_constituent_segmentation_reference_sequence)
    0x0013 -> Ok(constituent_conceptual_volume_uid)
    0x0014 -> Ok(derivation_conceptual_volume_sequence)
    0x0015 -> Ok(source_conceptual_volume_uid)
    0x0016 -> Ok(conceptual_volume_derivation_algorithm_sequence)
    0x0017 -> Ok(conceptual_volume_description)
    0x0018 -> Ok(source_conceptual_volume_sequence)
    0x0019 -> Ok(author_identification_sequence)
    0x001A -> Ok(manufacturer_model_version)
    0x001B -> Ok(device_alternate_identifier)
    0x001C -> Ok(device_alternate_identifier_type)
    0x001D -> Ok(device_alternate_identifier_format)
    0x001E -> Ok(segmentation_creation_template_label)
    0x001F -> Ok(segmentation_template_uid)
    0x0020 -> Ok(referenced_segment_reference_index)
    0x0021 -> Ok(segment_reference_sequence)
    0x0022 -> Ok(segment_reference_index)
    0x0023 -> Ok(direct_segment_reference_sequence)
    0x0024 -> Ok(combination_segment_reference_sequence)
    0x0025 -> Ok(conceptual_volume_sequence)
    0x0026 -> Ok(segmented_rt_accessory_device_sequence)
    0x0027 -> Ok(segment_characteristics_sequence)
    0x0028 -> Ok(related_segment_characteristics_sequence)
    0x0029 -> Ok(segment_characteristics_precedence)
    0x002A -> Ok(rt_segment_annotation_sequence)
    0x002B -> Ok(segment_annotation_category_code_sequence)
    0x002C -> Ok(segment_annotation_type_code_sequence)
    0x002D -> Ok(device_label)
    0x002E -> Ok(device_type_code_sequence)
    0x002F -> Ok(segment_annotation_type_modifier_code_sequence)
    0x0030 -> Ok(patient_equipment_relationship_code_sequence)
    0x0031 -> Ok(referenced_fiducials_uid)
    0x0032 -> Ok(patient_treatment_orientation_sequence)
    0x0033 -> Ok(user_content_label)
    0x0034 -> Ok(user_content_long_label)
    0x0035 -> Ok(entity_label)
    0x0036 -> Ok(entity_name)
    0x0037 -> Ok(entity_description)
    0x0038 -> Ok(entity_long_label)
    0x0039 -> Ok(device_index)
    0x003A -> Ok(rt_treatment_phase_index)
    0x003B -> Ok(rt_treatment_phase_uid)
    0x003C -> Ok(rt_prescription_index)
    0x003D -> Ok(rt_segment_annotation_index)
    0x003E -> Ok(basis_rt_treatment_phase_index)
    0x003F -> Ok(related_rt_treatment_phase_index)
    0x0040 -> Ok(referenced_rt_treatment_phase_index)
    0x0041 -> Ok(referenced_rt_prescription_index)
    0x0042 -> Ok(referenced_parent_rt_prescription_index)
    0x0043 -> Ok(manufacturer_device_identifier)
    0x0044 -> Ok(instance_level_referenced_performed_procedure_step_sequence)
    0x0045 -> Ok(rt_treatment_phase_intent_presence_flag)
    0x0046 -> Ok(radiotherapy_treatment_type)
    0x0047 -> Ok(teletherapy_radiation_type)
    0x0048 -> Ok(brachytherapy_source_type)
    0x0049 -> Ok(referenced_rt_treatment_phase_sequence)
    0x004A -> Ok(referenced_direct_segment_instance_sequence)
    0x004B -> Ok(intended_rt_treatment_phase_sequence)
    0x004C -> Ok(intended_phase_start_date)
    0x004D -> Ok(intended_phase_end_date)
    0x004E -> Ok(rt_treatment_phase_interval_sequence)
    0x004F -> Ok(temporal_relationship_interval_anchor)
    0x0050 -> Ok(minimum_number_of_interval_days)
    0x0051 -> Ok(maximum_number_of_interval_days)
    0x0052 -> Ok(pertinent_sop_classes_in_study)
    0x0053 -> Ok(pertinent_sop_classes_in_series)
    0x0054 -> Ok(rt_prescription_label)
    0x0055 -> Ok(rt_physician_intent_predecessor_sequence)
    0x0056 -> Ok(rt_treatment_approach_label)
    0x0057 -> Ok(rt_physician_intent_sequence)
    0x0058 -> Ok(rt_physician_intent_index)
    0x0059 -> Ok(rt_treatment_intent_type)
    0x005A -> Ok(rt_physician_intent_narrative)
    0x005B -> Ok(rt_protocol_code_sequence)
    0x005C -> Ok(reason_for_superseding)
    0x005D -> Ok(rt_diagnosis_code_sequence)
    0x005E -> Ok(referenced_rt_physician_intent_index)
    0x005F -> Ok(rt_physician_intent_input_instance_sequence)
    0x0060 -> Ok(rt_anatomic_prescription_sequence)
    0x0061 -> Ok(prior_treatment_dose_description)
    0x0062 -> Ok(prior_treatment_reference_sequence)
    0x0063 -> Ok(dosimetric_objective_evaluation_scope)
    0x0064 -> Ok(therapeutic_role_category_code_sequence)
    0x0065 -> Ok(therapeutic_role_type_code_sequence)
    0x0066 -> Ok(conceptual_volume_optimization_precedence)
    0x0067 -> Ok(conceptual_volume_category_code_sequence)
    0x0068 -> Ok(conceptual_volume_blocking_constraint)
    0x0069 -> Ok(conceptual_volume_type_code_sequence)
    0x006A -> Ok(conceptual_volume_type_modifier_code_sequence)
    0x006B -> Ok(rt_prescription_sequence)
    0x006C -> Ok(dosimetric_objective_sequence)
    0x006D -> Ok(dosimetric_objective_type_code_sequence)
    0x006E -> Ok(dosimetric_objective_uid)
    0x006F -> Ok(referenced_dosimetric_objective_uid)
    0x0070 -> Ok(dosimetric_objective_parameter_sequence)
    0x0071 -> Ok(referenced_dosimetric_objectives_sequence)
    0x0073 -> Ok(absolute_dosimetric_objective_flag)
    0x0074 -> Ok(dosimetric_objective_weight)
    0x0075 -> Ok(dosimetric_objective_purpose)
    0x0076 -> Ok(planning_input_information_sequence)
    0x0077 -> Ok(treatment_site)
    0x0078 -> Ok(treatment_site_code_sequence)
    0x0079 -> Ok(fraction_pattern_sequence)
    0x007A -> Ok(treatment_technique_notes)
    0x007B -> Ok(prescription_notes)
    0x007C -> Ok(number_of_interval_fractions)
    0x007D -> Ok(number_of_fractions)
    0x007E -> Ok(intended_delivery_duration)
    0x007F -> Ok(fractionation_notes)
    0x0080 -> Ok(rt_treatment_technique_code_sequence)
    0x0081 -> Ok(prescription_notes_sequence)
    0x0082 -> Ok(fraction_based_relationship_sequence)
    0x0083 -> Ok(fraction_based_relationship_interval_anchor)
    0x0084 -> Ok(minimum_hours_between_fractions)
    0x0085 -> Ok(intended_fraction_start_time)
    0x0086 -> Ok(intended_start_day_of_week)
    0x0087 -> Ok(weekday_fraction_pattern_sequence)
    0x0088 -> Ok(delivery_time_structure_code_sequence)
    0x0089 -> Ok(treatment_site_modifier_code_sequence)
    0x0090 -> Ok(robotic_base_location_indicator)
    0x0091 -> Ok(robotic_path_node_set_code_sequence)
    0x0092 -> Ok(robotic_node_identifier)
    0x0093 -> Ok(rt_treatment_source_coordinates)
    0x0094 -> Ok(radiation_source_coordinate_system_yaw_angle)
    0x0095 -> Ok(radiation_source_coordinate_system_roll_angle)
    0x0096 -> Ok(radiation_source_coordinate_system_pitch_angle)
    0x0097 -> Ok(robotic_path_control_point_sequence)
    0x0098 -> Ok(tomotherapeutic_control_point_sequence)
    0x0099 -> Ok(tomotherapeutic_leaf_open_durations)
    0x009A -> Ok(tomotherapeutic_leaf_initial_closed_durations)
    0x00A0 -> Ok(conceptual_volume_identification_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x4000.
///
fn find_element_in_group_4000(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(arbitrary)
    0x4000 -> Ok(text_comments)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x4008.
///
fn find_element_in_group_4008(element: Int) -> Result(Item, Nil) {
  case element {
    0x0040 -> Ok(results_id)
    0x0042 -> Ok(results_id_issuer)
    0x0050 -> Ok(referenced_interpretation_sequence)
    0x00FF -> Ok(report_production_status_trial)
    0x0100 -> Ok(interpretation_recorded_date)
    0x0101 -> Ok(interpretation_recorded_time)
    0x0102 -> Ok(interpretation_recorder)
    0x0103 -> Ok(reference_to_recorded_sound)
    0x0108 -> Ok(interpretation_transcription_date)
    0x0109 -> Ok(interpretation_transcription_time)
    0x010A -> Ok(interpretation_transcriber)
    0x010B -> Ok(interpretation_text)
    0x010C -> Ok(interpretation_author)
    0x0111 -> Ok(interpretation_approver_sequence)
    0x0112 -> Ok(interpretation_approval_date)
    0x0113 -> Ok(interpretation_approval_time)
    0x0114 -> Ok(physician_approving_interpretation)
    0x0115 -> Ok(interpretation_diagnosis_description)
    0x0117 -> Ok(interpretation_diagnosis_code_sequence)
    0x0118 -> Ok(results_distribution_list_sequence)
    0x0119 -> Ok(distribution_name)
    0x011A -> Ok(distribution_address)
    0x0200 -> Ok(interpretation_id)
    0x0202 -> Ok(interpretation_id_issuer)
    0x0210 -> Ok(interpretation_type_id)
    0x0212 -> Ok(interpretation_status_id)
    0x0300 -> Ok(impressions)
    0x4000 -> Ok(results_comments)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x4010.
///
fn find_element_in_group_4010(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(low_energy_detectors)
    0x0002 -> Ok(high_energy_detectors)
    0x0004 -> Ok(detector_geometry_sequence)
    0x1001 -> Ok(threat_roi_voxel_sequence)
    0x1004 -> Ok(threat_roi_base)
    0x1005 -> Ok(threat_roi_extents)
    0x1006 -> Ok(threat_roi_bitmap)
    0x1007 -> Ok(route_segment_id)
    0x1008 -> Ok(gantry_type)
    0x1009 -> Ok(ooi_owner_type)
    0x100A -> Ok(route_segment_sequence)
    0x1010 -> Ok(potential_threat_object_id)
    0x1011 -> Ok(threat_sequence)
    0x1012 -> Ok(threat_category)
    0x1013 -> Ok(threat_category_description)
    0x1014 -> Ok(atd_ability_assessment)
    0x1015 -> Ok(atd_assessment_flag)
    0x1016 -> Ok(atd_assessment_probability)
    0x1017 -> Ok(mass)
    0x1018 -> Ok(density)
    0x1019 -> Ok(z_effective)
    0x101A -> Ok(boarding_pass_id)
    0x101B -> Ok(center_of_mass)
    0x101C -> Ok(center_of_pto)
    0x101D -> Ok(bounding_polygon)
    0x101E -> Ok(route_segment_start_location_id)
    0x101F -> Ok(route_segment_end_location_id)
    0x1020 -> Ok(route_segment_location_id_type)
    0x1021 -> Ok(abort_reason)
    0x1023 -> Ok(volume_of_pto)
    0x1024 -> Ok(abort_flag)
    0x1025 -> Ok(route_segment_start_time)
    0x1026 -> Ok(route_segment_end_time)
    0x1027 -> Ok(tdr_type)
    0x1028 -> Ok(international_route_segment)
    0x1029 -> Ok(threat_detection_algorithm_and_version)
    0x102A -> Ok(assigned_location)
    0x102B -> Ok(alarm_decision_time)
    0x1031 -> Ok(alarm_decision)
    0x1033 -> Ok(number_of_total_objects)
    0x1034 -> Ok(number_of_alarm_objects)
    0x1037 -> Ok(pto_representation_sequence)
    0x1038 -> Ok(atd_assessment_sequence)
    0x1039 -> Ok(tip_type)
    0x103A -> Ok(dicos_version)
    0x1041 -> Ok(ooi_owner_creation_time)
    0x1042 -> Ok(ooi_type)
    0x1043 -> Ok(ooi_size)
    0x1044 -> Ok(acquisition_status)
    0x1045 -> Ok(basis_materials_code_sequence)
    0x1046 -> Ok(phantom_type)
    0x1047 -> Ok(ooi_owner_sequence)
    0x1048 -> Ok(scan_type)
    0x1051 -> Ok(itinerary_id)
    0x1052 -> Ok(itinerary_id_type)
    0x1053 -> Ok(itinerary_id_assigning_authority)
    0x1054 -> Ok(route_id)
    0x1055 -> Ok(route_id_assigning_authority)
    0x1056 -> Ok(inbound_arrival_type)
    0x1058 -> Ok(carrier_id)
    0x1059 -> Ok(carrier_id_assigning_authority)
    0x1060 -> Ok(source_orientation)
    0x1061 -> Ok(source_position)
    0x1062 -> Ok(belt_height)
    0x1064 -> Ok(algorithm_routing_code_sequence)
    0x1067 -> Ok(transport_classification)
    0x1068 -> Ok(ooi_type_descriptor)
    0x1069 -> Ok(total_processing_time)
    0x106C -> Ok(detector_calibration_data)
    0x106D -> Ok(additional_screening_performed)
    0x106E -> Ok(additional_inspection_selection_criteria)
    0x106F -> Ok(additional_inspection_method_sequence)
    0x1070 -> Ok(ait_device_type)
    0x1071 -> Ok(qr_measurements_sequence)
    0x1072 -> Ok(target_material_sequence)
    0x1073 -> Ok(snr_threshold)
    0x1075 -> Ok(image_scale_representation)
    0x1076 -> Ok(referenced_pto_sequence)
    0x1077 -> Ok(referenced_tdr_instance_sequence)
    0x1078 -> Ok(pto_location_description)
    0x1079 -> Ok(anomaly_locator_indicator_sequence)
    0x107A -> Ok(anomaly_locator_indicator)
    0x107B -> Ok(pto_region_sequence)
    0x107C -> Ok(inspection_selection_criteria)
    0x107D -> Ok(secondary_inspection_method_sequence)
    0x107E -> Ok(prcs_to_rcs_orientation)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x4FFE.
///
fn find_element_in_group_4ffe(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(mac_parameters_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x5200.
///
fn find_element_in_group_5200(element: Int) -> Result(Item, Nil) {
  case element {
    0x9229 -> Ok(shared_functional_groups_sequence)
    0x9230 -> Ok(per_frame_functional_groups_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x5400.
///
fn find_element_in_group_5400(element: Int) -> Result(Item, Nil) {
  case element {
    0x0100 -> Ok(waveform_sequence)
    0x0110 -> Ok(channel_minimum_value)
    0x0112 -> Ok(channel_maximum_value)
    0x1004 -> Ok(waveform_bits_allocated)
    0x1006 -> Ok(waveform_sample_interpretation)
    0x100A -> Ok(waveform_padding_value)
    0x1010 -> Ok(waveform_data)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x5600.
///
fn find_element_in_group_5600(element: Int) -> Result(Item, Nil) {
  case element {
    0x0010 -> Ok(first_order_phase_correction_angle)
    0x0020 -> Ok(spectroscopy_data)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0x7FE0.
///
fn find_element_in_group_7fe0(element: Int) -> Result(Item, Nil) {
  case element {
    0x0001 -> Ok(extended_offset_table)
    0x0002 -> Ok(extended_offset_table_lengths)
    0x0003 -> Ok(encapsulated_pixel_data_value_total_length)
    0x0008 -> Ok(float_pixel_data)
    0x0009 -> Ok(double_float_pixel_data)
    0x0010 -> Ok(pixel_data)
    0x0020 -> Ok(coefficients_sdvn)
    0x0030 -> Ok(coefficients_sdhn)
    0x0040 -> Ok(coefficients_sddn)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0xFFFA.
///
fn find_element_in_group_fffa(element: Int) -> Result(Item, Nil) {
  case element {
    0xFFFA -> Ok(digital_signatures_sequence)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0xFFFC.
///
fn find_element_in_group_fffc(element: Int) -> Result(Item, Nil) {
  case element {
    0xFFFC -> Ok(data_set_trailing_padding)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element in group 0xFFFE.
///
fn find_element_in_group_fffe(element: Int) -> Result(Item, Nil) {
  case element {
    0xE000 -> Ok(item)
    0xE00D -> Ok(item_delimitation_item)
    0xE0DD -> Ok(sequence_delimitation_item)

    _ -> Error(Nil)
  }
}

/// Returns details for a data element based on a tag. The private creator is
/// required in order to look up well-known privately defined data elements.
///
pub fn find(
  tag: DataElementTag,
  private_creator: Option(String),
) -> Result(Item, Nil) {
  case tag.group {
    0x0002 -> find_element_in_group_0002(tag.element)
    0x0004 -> find_element_in_group_0004(tag.element)
    0x0006 -> find_element_in_group_0006(tag.element)
    0x0008 -> find_element_in_group_0008(tag.element)
    0x0010 -> find_element_in_group_0010(tag.element)
    0x0012 -> find_element_in_group_0012(tag.element)
    0x0014 -> find_element_in_group_0014(tag.element)
    0x0016 -> find_element_in_group_0016(tag.element)
    0x0018 -> find_element_in_group_0018(tag.element)
    0x0020 -> find_element_in_group_0020(tag.element)
    0x0022 -> find_element_in_group_0022(tag.element)
    0x0024 -> find_element_in_group_0024(tag.element)
    0x0028 -> find_element_in_group_0028(tag.element)
    0x0032 -> find_element_in_group_0032(tag.element)
    0x0034 -> find_element_in_group_0034(tag.element)
    0x0038 -> find_element_in_group_0038(tag.element)
    0x003A -> find_element_in_group_003a(tag.element)
    0x0040 -> find_element_in_group_0040(tag.element)
    0x0042 -> find_element_in_group_0042(tag.element)
    0x0044 -> find_element_in_group_0044(tag.element)
    0x0046 -> find_element_in_group_0046(tag.element)
    0x0048 -> find_element_in_group_0048(tag.element)
    0x0050 -> find_element_in_group_0050(tag.element)
    0x0052 -> find_element_in_group_0052(tag.element)
    0x0054 -> find_element_in_group_0054(tag.element)
    0x0060 -> find_element_in_group_0060(tag.element)
    0x0062 -> find_element_in_group_0062(tag.element)
    0x0064 -> find_element_in_group_0064(tag.element)
    0x0066 -> find_element_in_group_0066(tag.element)
    0x0068 -> find_element_in_group_0068(tag.element)
    0x006A -> find_element_in_group_006a(tag.element)
    0x0070 -> find_element_in_group_0070(tag.element)
    0x0072 -> find_element_in_group_0072(tag.element)
    0x0074 -> find_element_in_group_0074(tag.element)
    0x0076 -> find_element_in_group_0076(tag.element)
    0x0078 -> find_element_in_group_0078(tag.element)
    0x0080 -> find_element_in_group_0080(tag.element)
    0x0082 -> find_element_in_group_0082(tag.element)
    0x0088 -> find_element_in_group_0088(tag.element)
    0x0100 -> find_element_in_group_0100(tag.element)
    0x0400 -> find_element_in_group_0400(tag.element)
    0x1000 -> find_element_in_group_1000(tag.element)
    0x1010 -> find_element_in_group_1010(tag.element)
    0x2000 -> find_element_in_group_2000(tag.element)
    0x2010 -> find_element_in_group_2010(tag.element)
    0x2020 -> find_element_in_group_2020(tag.element)
    0x2030 -> find_element_in_group_2030(tag.element)
    0x2040 -> find_element_in_group_2040(tag.element)
    0x2050 -> find_element_in_group_2050(tag.element)
    0x2100 -> find_element_in_group_2100(tag.element)
    0x2110 -> find_element_in_group_2110(tag.element)
    0x2120 -> find_element_in_group_2120(tag.element)
    0x2130 -> find_element_in_group_2130(tag.element)
    0x2200 -> find_element_in_group_2200(tag.element)
    0x3002 -> find_element_in_group_3002(tag.element)
    0x3004 -> find_element_in_group_3004(tag.element)
    0x3006 -> find_element_in_group_3006(tag.element)
    0x3008 -> find_element_in_group_3008(tag.element)
    0x300A -> find_element_in_group_300a(tag.element)
    0x300C -> find_element_in_group_300c(tag.element)
    0x300E -> find_element_in_group_300e(tag.element)
    0x3010 -> find_element_in_group_3010(tag.element)
    0x4000 -> find_element_in_group_4000(tag.element)
    0x4008 -> find_element_in_group_4008(tag.element)
    0x4010 -> find_element_in_group_4010(tag.element)
    0x4FFE -> find_element_in_group_4ffe(tag.element)
    0x5200 -> find_element_in_group_5200(tag.element)
    0x5400 -> find_element_in_group_5400(tag.element)
    0x5600 -> find_element_in_group_5600(tag.element)
    0x7FE0 -> find_element_in_group_7fe0(tag.element)
    0xFFFA -> find_element_in_group_fffa(tag.element)
    0xFFFC -> find_element_in_group_fffc(tag.element)
    0xFFFE -> find_element_in_group_fffe(tag.element)

    _ ->
      case tag.group, tag.element {
        // Handle the '(0020,31XX) Source Image IDs' range of data elements
        0x0020, element if element >= 0x3100 && element <= 0x31FF ->
          Ok(Item(..source_image_ids, tag: tag))

        // Handle the '(0028,04X0) Rows For Nth Order Coefficients' range of data elements
        0x0028, element
          if element == 0x0400
          || element == 0x0410
          || element == 0x0420
          || element == 0x0430
          || element == 0x0440
          || element == 0x0450
          || element == 0x0460
          || element == 0x0470
          || element == 0x0480
          || element == 0x0490
          || element == 0x04A0
          || element == 0x04B0
          || element == 0x04C0
          || element == 0x04D0
          || element == 0x04E0
          || element == 0x04F0
        -> Ok(Item(..rows_for_nth_order_coefficients, tag: tag))

        // Handle the '(0028,04X1) Columns For Nth Order Coefficients' range of data elements
        0x0028, element
          if element == 0x0401
          || element == 0x0411
          || element == 0x0421
          || element == 0x0431
          || element == 0x0441
          || element == 0x0451
          || element == 0x0461
          || element == 0x0471
          || element == 0x0481
          || element == 0x0491
          || element == 0x04A1
          || element == 0x04B1
          || element == 0x04C1
          || element == 0x04D1
          || element == 0x04E1
          || element == 0x04F1
        -> Ok(Item(..columns_for_nth_order_coefficients, tag: tag))

        // Handle the '(0028,04X2) Coefficient Coding' range of data elements
        0x0028, element
          if element == 0x0402
          || element == 0x0412
          || element == 0x0422
          || element == 0x0432
          || element == 0x0442
          || element == 0x0452
          || element == 0x0462
          || element == 0x0472
          || element == 0x0482
          || element == 0x0492
          || element == 0x04A2
          || element == 0x04B2
          || element == 0x04C2
          || element == 0x04D2
          || element == 0x04E2
          || element == 0x04F2
        -> Ok(Item(..coefficient_coding, tag: tag))

        // Handle the '(0028,04X3) Coefficient Coding Pointers' range of data elements
        0x0028, element
          if element == 0x0403
          || element == 0x0413
          || element == 0x0423
          || element == 0x0433
          || element == 0x0443
          || element == 0x0453
          || element == 0x0463
          || element == 0x0473
          || element == 0x0483
          || element == 0x0493
          || element == 0x04A3
          || element == 0x04B3
          || element == 0x04C3
          || element == 0x04D3
          || element == 0x04E3
          || element == 0x04F3
        -> Ok(Item(..coefficient_coding_pointers, tag: tag))

        // Handle the '(0028,08X0) Code Label' range of data elements
        0x0028, element
          if element == 0x0800
          || element == 0x0810
          || element == 0x0820
          || element == 0x0830
          || element == 0x0840
          || element == 0x0850
          || element == 0x0860
          || element == 0x0870
          || element == 0x0880
          || element == 0x0890
          || element == 0x08A0
          || element == 0x08B0
          || element == 0x08C0
          || element == 0x08D0
          || element == 0x08E0
          || element == 0x08F0
        -> Ok(Item(..code_label, tag: tag))

        // Handle the '(0028,08X2) Number of Tables' range of data elements
        0x0028, element
          if element == 0x0802
          || element == 0x0812
          || element == 0x0822
          || element == 0x0832
          || element == 0x0842
          || element == 0x0852
          || element == 0x0862
          || element == 0x0872
          || element == 0x0882
          || element == 0x0892
          || element == 0x08A2
          || element == 0x08B2
          || element == 0x08C2
          || element == 0x08D2
          || element == 0x08E2
          || element == 0x08F2
        -> Ok(Item(..number_of_tables, tag: tag))

        // Handle the '(0028,08X3) Code Table Location' range of data elements
        0x0028, element
          if element == 0x0803
          || element == 0x0813
          || element == 0x0823
          || element == 0x0833
          || element == 0x0843
          || element == 0x0853
          || element == 0x0863
          || element == 0x0873
          || element == 0x0883
          || element == 0x0893
          || element == 0x08A3
          || element == 0x08B3
          || element == 0x08C3
          || element == 0x08D3
          || element == 0x08E3
          || element == 0x08F3
        -> Ok(Item(..code_table_location, tag: tag))

        // Handle the '(0028,08X4) Bits For Code Word' range of data elements
        0x0028, element
          if element == 0x0804
          || element == 0x0814
          || element == 0x0824
          || element == 0x0834
          || element == 0x0844
          || element == 0x0854
          || element == 0x0864
          || element == 0x0874
          || element == 0x0884
          || element == 0x0894
          || element == 0x08A4
          || element == 0x08B4
          || element == 0x08C4
          || element == 0x08D4
          || element == 0x08E4
          || element == 0x08F4
        -> Ok(Item(..bits_for_code_word, tag: tag))

        // Handle the '(0028,08X8) Image Data Location' range of data elements
        0x0028, element
          if element == 0x0808
          || element == 0x0818
          || element == 0x0828
          || element == 0x0838
          || element == 0x0848
          || element == 0x0858
          || element == 0x0868
          || element == 0x0878
          || element == 0x0888
          || element == 0x0898
          || element == 0x08A8
          || element == 0x08B8
          || element == 0x08C8
          || element == 0x08D8
          || element == 0x08E8
          || element == 0x08F8
        -> Ok(Item(..image_data_location, tag: tag))

        // Handle the '(1010,XXXX) Zonal Map' range of data elements
        0x1010, _ -> Ok(Item(..zonal_map, tag: tag))

        // Handle the '(50XX,0005) Curve Dimensions' range of data elements
        group, 0x0005 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..curve_dimensions, tag: tag))

        // Handle the '(50XX,0010) Number of Points' range of data elements
        group, 0x0010 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..number_of_points, tag: tag))

        // Handle the '(50XX,0020) Type of Data' range of data elements
        group, 0x0020 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..type_of_data, tag: tag))

        // Handle the '(50XX,0022) Curve Description' range of data elements
        group, 0x0022 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..curve_description, tag: tag))

        // Handle the '(50XX,0030) Axis Units' range of data elements
        group, 0x0030 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..axis_units, tag: tag))

        // Handle the '(50XX,0040) Axis Labels' range of data elements
        group, 0x0040 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..axis_labels, tag: tag))

        // Handle the '(50XX,0103) Data Value Representation' range of data elements
        group, 0x0103 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..data_value_representation, tag: tag))

        // Handle the '(50XX,0104) Minimum Coordinate Value' range of data elements
        group, 0x0104 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..minimum_coordinate_value, tag: tag))

        // Handle the '(50XX,0105) Maximum Coordinate Value' range of data elements
        group, 0x0105 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..maximum_coordinate_value, tag: tag))

        // Handle the '(50XX,0106) Curve Range' range of data elements
        group, 0x0106 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..curve_range, tag: tag))

        // Handle the '(50XX,0110) Curve Data Descriptor' range of data elements
        group, 0x0110 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..curve_data_descriptor, tag: tag))

        // Handle the '(50XX,0112) Coordinate Start Value' range of data elements
        group, 0x0112 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..coordinate_start_value, tag: tag))

        // Handle the '(50XX,0114) Coordinate Step Value' range of data elements
        group, 0x0114 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..coordinate_step_value, tag: tag))

        // Handle the '(50XX,1001) Curve Activation Layer' range of data elements
        group, 0x1001 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..curve_activation_layer, tag: tag))

        // Handle the '(50XX,2000) Audio Type' range of data elements
        group, 0x2000 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..audio_type, tag: tag))

        // Handle the '(50XX,2002) Audio Sample Format' range of data elements
        group, 0x2002 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..audio_sample_format, tag: tag))

        // Handle the '(50XX,2004) Number of Channels' range of data elements
        group, 0x2004 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..number_of_channels, tag: tag))

        // Handle the '(50XX,2006) Number of Samples' range of data elements
        group, 0x2006 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..number_of_samples, tag: tag))

        // Handle the '(50XX,2008) Sample Rate' range of data elements
        group, 0x2008 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..sample_rate, tag: tag))

        // Handle the '(50XX,200A) Total Time' range of data elements
        group, 0x200A if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..total_time, tag: tag))

        // Handle the '(50XX,200C) Audio Sample Data' range of data elements
        group, 0x200C if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..audio_sample_data, tag: tag))

        // Handle the '(50XX,200E) Audio Comments' range of data elements
        group, 0x200E if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..audio_comments, tag: tag))

        // Handle the '(50XX,2500) Curve Label' range of data elements
        group, 0x2500 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..curve_label, tag: tag))

        // Handle the '(50XX,2600) Curve Referenced Overlay Sequence' range of data elements
        group, 0x2600 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..curve_referenced_overlay_sequence, tag: tag))

        // Handle the '(50XX,2610) Curve Referenced Overlay Group' range of data elements
        group, 0x2610 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..curve_referenced_overlay_group, tag: tag))

        // Handle the '(50XX,3000) Curve Data' range of data elements
        group, 0x3000 if group >= 0x5000 && group <= 0x50FF ->
          Ok(Item(..curve_data, tag: tag))

        // Handle the '(60XX,0010) Overlay Rows' range of data elements
        group, 0x0010 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_rows, tag: tag))

        // Handle the '(60XX,0011) Overlay Columns' range of data elements
        group, 0x0011 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_columns, tag: tag))

        // Handle the '(60XX,0012) Overlay Planes' range of data elements
        group, 0x0012 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_planes, tag: tag))

        // Handle the '(60XX,0015) Number of Frames in Overlay' range of data elements
        group, 0x0015 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..number_of_frames_in_overlay, tag: tag))

        // Handle the '(60XX,0022) Overlay Description' range of data elements
        group, 0x0022 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_description, tag: tag))

        // Handle the '(60XX,0040) Overlay Type' range of data elements
        group, 0x0040 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_type, tag: tag))

        // Handle the '(60XX,0045) Overlay Subtype' range of data elements
        group, 0x0045 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_subtype, tag: tag))

        // Handle the '(60XX,0050) Overlay Origin' range of data elements
        group, 0x0050 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_origin, tag: tag))

        // Handle the '(60XX,0051) Image Frame Origin' range of data elements
        group, 0x0051 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..image_frame_origin, tag: tag))

        // Handle the '(60XX,0052) Overlay Plane Origin' range of data elements
        group, 0x0052 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_plane_origin, tag: tag))

        // Handle the '(60XX,0060) Overlay Compression Code' range of data elements
        group, 0x0060 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_compression_code, tag: tag))

        // Handle the '(60XX,0061) Overlay Compression Originator' range of data elements
        group, 0x0061 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_compression_originator, tag: tag))

        // Handle the '(60XX,0062) Overlay Compression Label' range of data elements
        group, 0x0062 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_compression_label, tag: tag))

        // Handle the '(60XX,0063) Overlay Compression Description' range of data elements
        group, 0x0063 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_compression_description, tag: tag))

        // Handle the '(60XX,0066) Overlay Compression Step Pointers' range of data elements
        group, 0x0066 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_compression_step_pointers, tag: tag))

        // Handle the '(60XX,0068) Overlay Repeat Interval' range of data elements
        group, 0x0068 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_repeat_interval, tag: tag))

        // Handle the '(60XX,0069) Overlay Bits Grouped' range of data elements
        group, 0x0069 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_bits_grouped, tag: tag))

        // Handle the '(60XX,0100) Overlay Bits Allocated' range of data elements
        group, 0x0100 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_bits_allocated, tag: tag))

        // Handle the '(60XX,0102) Overlay Bit Position' range of data elements
        group, 0x0102 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_bit_position, tag: tag))

        // Handle the '(60XX,0110) Overlay Format' range of data elements
        group, 0x0110 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_format, tag: tag))

        // Handle the '(60XX,0200) Overlay Location' range of data elements
        group, 0x0200 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_location, tag: tag))

        // Handle the '(60XX,0800) Overlay Code Label' range of data elements
        group, 0x0800 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_code_label, tag: tag))

        // Handle the '(60XX,0802) Overlay Number of Tables' range of data elements
        group, 0x0802 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_number_of_tables, tag: tag))

        // Handle the '(60XX,0803) Overlay Code Table Location' range of data elements
        group, 0x0803 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_code_table_location, tag: tag))

        // Handle the '(60XX,0804) Overlay Bits For Code Word' range of data elements
        group, 0x0804 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_bits_for_code_word, tag: tag))

        // Handle the '(60XX,1001) Overlay Activation Layer' range of data elements
        group, 0x1001 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_activation_layer, tag: tag))

        // Handle the '(60XX,1100) Overlay Descriptor - Gray' range of data elements
        group, 0x1100 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_descriptor_gray, tag: tag))

        // Handle the '(60XX,1101) Overlay Descriptor - Red' range of data elements
        group, 0x1101 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_descriptor_red, tag: tag))

        // Handle the '(60XX,1102) Overlay Descriptor - Green' range of data elements
        group, 0x1102 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_descriptor_green, tag: tag))

        // Handle the '(60XX,1103) Overlay Descriptor - Blue' range of data elements
        group, 0x1103 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_descriptor_blue, tag: tag))

        // Handle the '(60XX,1200) Overlays - Gray' range of data elements
        group, 0x1200 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlays_gray, tag: tag))

        // Handle the '(60XX,1201) Overlays - Red' range of data elements
        group, 0x1201 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlays_red, tag: tag))

        // Handle the '(60XX,1202) Overlays - Green' range of data elements
        group, 0x1202 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlays_green, tag: tag))

        // Handle the '(60XX,1203) Overlays - Blue' range of data elements
        group, 0x1203 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlays_blue, tag: tag))

        // Handle the '(60XX,1301) ROI Area' range of data elements
        group, 0x1301 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..roi_area, tag: tag))

        // Handle the '(60XX,1302) ROI Mean' range of data elements
        group, 0x1302 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..roi_mean, tag: tag))

        // Handle the '(60XX,1303) ROI Standard Deviation' range of data elements
        group, 0x1303 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..roi_standard_deviation, tag: tag))

        // Handle the '(60XX,1500) Overlay Label' range of data elements
        group, 0x1500 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_label, tag: tag))

        // Handle the '(60XX,3000) Overlay Data' range of data elements
        group, 0x3000 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_data, tag: tag))

        // Handle the '(60XX,4000) Overlay Comments' range of data elements
        group, 0x4000 if group >= 0x6000 && group <= 0x60FF ->
          Ok(Item(..overlay_comments, tag: tag))

        // Handle the '(7FXX,0010) Variable Pixel Data' range of data elements
        group, 0x0010 if group >= 0x7F00 && group <= 0x7FFF ->
          Ok(Item(..variable_pixel_data, tag: tag))

        // Handle the '(7FXX,0011) Variable Next Data Group' range of data elements
        group, 0x0011 if group >= 0x7F00 && group <= 0x7FFF ->
          Ok(Item(..variable_next_data_group, tag: tag))

        // Handle the '(7FXX,0020) Variable Coefficients SDVN' range of data elements
        group, 0x0020 if group >= 0x7F00 && group <= 0x7FFF ->
          Ok(Item(..variable_coefficients_sdvn, tag: tag))

        // Handle the '(7FXX,0030) Variable Coefficients SDHN' range of data elements
        group, 0x0030 if group >= 0x7F00 && group <= 0x7FFF ->
          Ok(Item(..variable_coefficients_sdhn, tag: tag))

        // Handle the '(7FXX,0040) Variable Coefficients SDDN' range of data elements
        group, 0x0040 if group >= 0x7F00 && group <= 0x7FFF ->
          Ok(Item(..variable_coefficients_sddn, tag: tag))

        // Handle the '(1000,XXXY)' range of data elements, where Y is in the range 0-5
        0x1000, element ->
          case element % 16 {
            0 -> Ok(Item(..escape_triplet, tag: tag))
            1 -> Ok(Item(..run_length_triplet, tag: tag))
            2 -> Ok(Item(..huffman_table_size, tag: tag))
            3 -> Ok(Item(..huffman_table_triplet, tag: tag))
            4 -> Ok(Item(..shift_table_size, tag: tag))
            5 -> Ok(Item(..shift_table_triplet, tag: tag))
            _ -> Error(Nil)
          }

        // Handle private range tags
        _, _ -> {
          // Check this is a private range tag
          use <- bool.guard(!data_element_tag.is_private(tag), Error(Nil))

          // Handle the '(gggg,00XX) Private Creator' data elements.
          // Ref: PS3.5 7.8.1.
          use <- bool.guard(
            data_element_tag.is_private_creator(tag),
            Ok(Item(tag, "Private Creator", [LongString], vm_1)),
          )

          // Handle other private range tags
          case private_creator {
            Some(private_creator) -> find_private(tag, private_creator)
            None -> Error(Nil)
          }
        }
      }
  }
}

/// Returns details for a well-known privately defined data element.
///
fn find_private(
  tag: DataElementTag,
  private_creator: String,
) -> Result(Item, Nil) {
  // Get the high and low bytes of the group and element to match against
  let g0 = int.bitwise_shift_right(tag.group, 8)
  let g1 = int.bitwise_and(tag.group, 0xFF)
  let e0 = int.bitwise_shift_right(tag.element, 8)
  let e1 = int.bitwise_and(tag.element, 0xFF)

  case private_creator {
    "SIEMENS MEDCOM HEADER2" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x60 ->
          Ok(Item(tag, "Series Workflow Status", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-XSB-VISUB Release 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x00 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x10 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x11 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x12 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x20 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x40 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x50 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x00 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x01 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x02 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x29, _, 0x0f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x11 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x12 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x29, _, 0x1f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x29, _, 0x20 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x21 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x22 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x29, _, 0x2f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x29, _, 0x30 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x31 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x32 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x29, _, 0x3f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "V1" ->
      case g0, g1, e0, e1 {
        0x00, 0x11, _, 0x01 ->
          Ok(Item(tag, "User Data", [OtherByteString], vm_1))
        0x00, 0x11, _, 0x02 ->
          Ok(Item(tag, "Normalization Coefficient", [DecimalString], vm_1))
        0x00, 0x11, _, 0x03 ->
          Ok(Item(tag, "Receiving Gain", [DecimalString], vm_1_to_n))
        0x00, 0x11, _, 0x04 ->
          Ok(Item(tag, "Mean Image Noise", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PRIVATE ORIGINAL ATTRIBUTES" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Private Original Attribute Sequence", [Sequence], vm_1))
        0x00, 0x21, _, 0x05 ->
          Ok(Item(tag, "Replacement Date and Time", [DateTime], vm_1))
        0x00, 0x21, _, 0x10 ->
          Ok(Item(tag, "Replacement Originator Name", [LongString], vm_1))
        0x00, 0x21, _, 0x12 ->
          Ok(Item(tag, "Replacement Reason", [LongString], vm_1))
        0x00, 0x21, _, 0x70 ->
          Ok(Item(tag, "Original Operators' Name", [PersonName], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS SITE NAME" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x78 -> Ok(Item(tag, "Site Name", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIENET" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x01 ->
          Ok(Item(tag, "SIENET Command Field", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x14 -> Ok(Item(tag, "Receiver PLA", [LongString], vm_1))
        0x00, 0x09, _, 0x16 ->
          Ok(Item(tag, "Transfer Priority", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x29 -> Ok(Item(tag, "Actual User", [LongString], vm_1))
        0x00, 0x09, _, 0x70 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x09, _, 0x71 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x09, _, 0x72 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x73 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x74 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x75 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x91, _, 0x20 ->
          Ok(Item(tag, "Patient Name", [PersonName], vm_1_to_n))
        0x00, 0x95, _, 0x01 ->
          Ok(Item(tag, "Examination Folder ID", [LongString], vm_1))
        0x00, 0x95, _, 0x04 ->
          Ok(Item(tag, "Folder Reported Status", [UnsignedLong], vm_1))
        0x00, 0x95, _, 0x05 ->
          Ok(Item(tag, "Folder Reporting Radiologist", [LongString], vm_1))
        0x00, 0x95, _, 0x07 ->
          Ok(Item(tag, "SIENET ISA PLA", [LongString], vm_1))
        0x00, 0x95, _, 0x0c ->
          Ok(Item(tag, "Folder Rebuild Status", [UnsignedLong], vm_1))
        0x00, 0x95, _, 0x20 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x99, _, 0x02 -> Ok(Item(tag, "Key Images", [UnsignedLong], vm_1))
        0x00, 0x99, _, 0x05 -> Ok(Item(tag, "Image Number", [SignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_SERS_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x25, 0x10, _ ->
          Ok(Item(tag, "Private Element Creator", [LongString], vm_1))
        0x00, 0x25, _, 0x06 ->
          Ok(Item(tag, "Last pulse sequence used", [SignedShort], vm_1))
        0x00, 0x25, _, 0x07 ->
          Ok(Item(tag, "Images in Series", [SignedLong], vm_1))
        0x00, 0x25, _, 0x10 ->
          Ok(Item(tag, "Landmark Counter", [SignedLong], vm_1))
        0x00, 0x25, _, 0x11 ->
          Ok(Item(tag, "Number of Acquisitions", [SignedShort], vm_1))
        0x00, 0x25, _, 0x14 ->
          Ok(Item(tag, "Indicates no. of updates to header", [SignedLong], vm_1))
        0x00, 0x25, _, 0x17 ->
          Ok(Item(tag, "Series Complete Flag", [SignedLong], vm_1))
        0x00, 0x25, _, 0x18 ->
          Ok(Item(tag, "Number of images archived", [SignedLong], vm_1))
        0x00, 0x25, _, 0x19 ->
          Ok(Item(tag, "Last image number used", [SignedLong], vm_1))
        0x00, 0x25, _, 0x1a ->
          Ok(Item(tag, "Primary Receiver Suite and Host", [ShortString], vm_1))
        0x00, 0x25, _, 0x1b ->
          Ok(Item(
            tag,
            "Protocol Data Block (compressed)",
            [OtherByteString],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "SPI RELEASE 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Comments", [LongString], vm_1))
        0x00, 0x09, _, 0x15 ->
          Ok(Item(tag, "Unique Identifier", [LongString], vm_1))
        0x00, 0x09, _, 0x40 ->
          Ok(Item(tag, "Data Object Type", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x41 ->
          Ok(Item(tag, "Data Object Subtype", [ShortString], vm_1))
        0x00, 0x11, _, 0x10 -> Ok(Item(tag, "Organ", [LongString], vm_1))
        0x00, 0x11, _, 0x15 ->
          Ok(Item(tag, "Allergy Indication", [LongString], vm_1))
        0x00, 0x11, _, 0x20 -> Ok(Item(tag, "Pregnancy", [CodeString], vm_1))
        0x00, 0x29, _, 0x60 ->
          Ok(Item(tag, "Compression Algorithm", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED SP DXMG WH AWS 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x01 ->
          Ok(Item(tag, "Unknown", [UnsignedLong], vm_1_to_n))
        0x00, 0x19, _, 0x02 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_2))
        0x00, 0x41, _, 0x02 ->
          Ok(Item(
            tag,
            "Reason for the Requested Procedure",
            [ShortString],
            vm_1,
          ))
        0x00, 0x55, _, 0x01 ->
          Ok(Item(tag, "Projection View Display String", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "REPORT_FROM_APP" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x95 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_IT_US_REPORT" ->
      case g0, g1, e0, e1 {
        0x00, 0x45, _, 0x11 ->
          Ok(Item(tag, "Vivid excel file", [OtherWordString], vm_1))
        0x00, 0x45, _, 0x12 ->
          Ok(Item(tag, "Vivid CHM file", [OtherWordString], vm_1))
        0x00, 0x45, _, 0x13 ->
          Ok(Item(tag, "Vivid PDF file", [OtherWordString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS NUMBER OF SUB FRAMES" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x77 ->
          Ok(Item(tag, "Number of Sub-Frames", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "MITRA LINKED ATTRIBUTES 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x31, _, 0x20 ->
          Ok(Item(tag, "Global Patient ID", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_ACRQA_1.0 BLOCK2" ->
      case g0, g1, e0, e1 {
        0x00, 0x23, _, 0x00 ->
          Ok(Item(tag, "CR S-Shift", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x10 ->
          Ok(Item(tag, "CR C-Shift", [DecimalString], vm_1))
        0x00, 0x23, _, 0x20 -> Ok(Item(tag, "CR GT", [DecimalString], vm_1))
        0x00, 0x23, _, 0x30 -> Ok(Item(tag, "CR GA", [DecimalString], vm_1))
        0x00, 0x23, _, 0x40 -> Ok(Item(tag, "CR GC", [DecimalString], vm_1))
        0x00, 0x23, _, 0x50 -> Ok(Item(tag, "CR GS", [DecimalString], vm_1))
        0x00, 0x23, _, 0x60 -> Ok(Item(tag, "CR RT", [DecimalString], vm_1))
        0x00, 0x23, _, 0x70 -> Ok(Item(tag, "CR RE", [DecimalString], vm_1))
        0x00, 0x23, _, 0x80 -> Ok(Item(tag, "CR RN", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x90 -> Ok(Item(tag, "CR DRT", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS TABLE VERTICAL POSITION" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x75 ->
          Ok(Item(tag, "vertical Table Position", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_DL_SERIES" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x86 -> Ok(Item(tag, "Calibration time", [Time], vm_1))
        0x00, 0x19, _, 0x95 -> Ok(Item(tag, "Image sweep", [CodeString], vm_2))
        0x00, 0x19, _, 0x93 ->
          Ok(Item(tag, "Spatial change", [CodeString], vm_1))
        0x00, 0x19, _, 0x32 ->
          Ok(Item(tag, "default spatial filter strength", [IntegerString], vm_1))
        0x00, 0x19, _, 0xd4 ->
          Ok(Item(tag, "Detection gain value", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x83 ->
          Ok(Item(tag, "Calibration object size mm", [DecimalString], vm_1))
        0x00, 0x19, _, 0xca ->
          Ok(Item(
            tag,
            "3Dspin expected number of frames",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(tag, "Calibration object", [CodeString], vm_1))
        0x00, 0x19, _, 0xa0 -> Ok(Item(tag, "ABD value", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa6 ->
          Ok(Item(tag, "injection delay", [DecimalString], vm_1))
        0x00, 0x19, _, 0x8c ->
          Ok(Item(tag, "Calibration points row", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x97 ->
          Ok(Item(tag, "Angle 1 increment", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xa9 -> Ok(Item(tag, "EPT", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xae ->
          Ok(Item(tag, "SUB operator LUTs names", [LongString], vm_1_to_n))
        0x00, 0x19, _, 0x8f ->
          Ok(Item(tag, "Calibration sw version", [LongString], vm_1))
        0x00, 0x19, _, 0x98 ->
          Ok(Item(tag, "Angle 2 increment", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x9a ->
          Ok(Item(tag, "sensor feedback", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x9d ->
          Ok(Item(tag, "applicable review mode", [CodeString], vm_1))
        0x00, 0x19, _, 0xaa ->
          Ok(Item(tag, "can downscan 512", [CodeString], vm_1))
        0x00, 0x19, _, 0xc5 ->
          Ok(Item(
            tag,
            "Preselected pivot rotation speed",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0xc4 ->
          Ok(Item(tag, "Default spatial filter family", [IntegerString], vm_1))
        0x00, 0x19, _, 0x9e ->
          Ok(Item(tag, "log LUT control points", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "Extend calib sw version", [LongString], vm_1))
        0x00, 0x19, _, 0xad ->
          Ok(Item(
            tag,
            "exp LUT NOSUB control points",
            [DecimalString],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0xd5 ->
          Ok(Item(tag, "mR mAs calibration value", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x8a ->
          Ok(Item(tag, "Calibration frame original", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xa5 ->
          Ok(Item(tag, "injection phase", [CodeString], vm_1))
        0x00, 0x19, _, 0x4e ->
          Ok(Item(tag, "def_bright_contr", [DecimalString], vm_2))
        0x00, 0x19, _, 0x31 ->
          Ok(Item(tag, "default spatial filter family", [IntegerString], vm_1))
        0x00, 0x19, _, 0xdc ->
          Ok(Item(tag, "DRM LUT file name", [LongString], vm_1))
        0x00, 0x19, _, 0x85 -> Ok(Item(tag, "Calibration date", [Date], vm_1))
        0x00, 0x19, _, 0x0b ->
          Ok(Item(tag, "fov dimension double", [DecimalString], vm_1_to_2))
        0x00, 0x19, _, 0xc7 ->
          Ok(Item(tag, "Patient position per image", [CodeString], vm_1))
        0x00, 0x19, _, 0xdd ->
          Ok(Item(tag, "DRM Strength", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xa2 ->
          Ok(Item(tag, "Sub window width", [DecimalString], vm_1))
        0x00, 0x19, _, 0xc8 ->
          Ok(Item(tag, "3D structure of interest", [CodeString], vm_1))
        0x00, 0x19, _, 0x92 ->
          Ok(Item(tag, "detector_rot_angle", [DecimalString], vm_1))
        0x00, 0x19, _, 0x89 ->
          Ok(Item(tag, "Calibration image original", [UnsignedShort], vm_1))
        0x00, 0x15, _, 0x87 ->
          Ok(Item(tag, "Number of images", [IntegerString], vm_1))
        0x00, 0x19, _, 0x99 ->
          Ok(Item(tag, "Angle 3 increment", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xa4 ->
          Ok(Item(tag, "Auto injection enabled", [CodeString], vm_1))
        0x00, 0x19, _, 0xa7 ->
          Ok(Item(
            tag,
            "reference injection frame number",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x4b ->
          Ok(Item(tag, "Detector origin", [IntegerString], vm_2))
        0x00, 0x19, _, 0x8b ->
          Ok(Item(tag, "Calibration nb points uif", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x9f ->
          Ok(Item(tag, "exp LUT SUB control points", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xa1 ->
          Ok(Item(tag, "Sub window center", [DecimalString], vm_1))
        0x00, 0x19, _, 0x87 ->
          Ok(Item(tag, "Calibration accuracy", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x8e ->
          Ok(Item(tag, "Calibration mag ratio", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x88 ->
          Ok(Item(tag, "Calibration extended", [CodeString], vm_1))
        0x00, 0x19, _, 0x81 ->
          Ok(Item(tag, "Calibration frame", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xc9 ->
          Ok(Item(tag, "3D calibration out of date flag", [CodeString], vm_1))
        0x00, 0x19, _, 0x84 ->
          Ok(Item(tag, "Calibration factor", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x91 ->
          Ok(Item(tag, "Calibration return code", [IntegerString], vm_1))
        0x00, 0x19, _, 0x8d ->
          Ok(Item(tag, "Calibration points column", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x4f ->
          Ok(Item(tag, "user_bright_contr", [DecimalString], vm_2))
        0x00, 0x19, _, 0xab ->
          Ok(Item(tag, "current spatial filter strength", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_CT_HINO_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x4b, _, 0x01 ->
          Ok(Item(tag, "Beam Thickess", [DecimalString], vm_1_to_n))
        0x00, 0x4b, _, 0x02 ->
          Ok(Item(tag, "R Time", [DecimalString], vm_1_to_n))
        0x00, 0x4b, _, 0x03 ->
          Ok(Item(tag, "HBC Number", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-Private-CWS Release 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x00 ->
          Ok(Item(tag, "Window Of Images ID", [LongText], vm_1))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Window Of Images Type", [CodeString], vm_1))
        0x00, 0x21, _, 0x02 ->
          Ok(Item(tag, "WindowOfImagesScope", [IntegerString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "Silhouette ROI V1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x11 -> Ok(Item(tag, "ROI Name", [IntegerString], vm_1))
        0x00, 0x29, _, 0x12 -> Ok(Item(tag, "ROI Name Font", [LongText], vm_1))
        0x00, 0x29, _, 0x13 ->
          Ok(Item(tag, "ROI Normal Color", [LongText], vm_1))
        0x00, 0x29, _, 0x14 ->
          Ok(Item(tag, "ROI Fill Pattern", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x15 -> Ok(Item(tag, "ROI Bp Seg", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x16 ->
          Ok(Item(tag, "ROI Bp Seg Pairs", [Unknown], vm_1))
        0x00, 0x29, _, 0x17 ->
          Ok(Item(tag, "ROI Seed Space", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x18 -> Ok(Item(tag, "ROI Seeds", [Unknown], vm_1))
        0x00, 0x29, _, 0x19 ->
          Ok(Item(tag, "ROI Line Thickness", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "ROI Line Style", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x21 ->
          Ok(Item(tag, "ROI Line Dash Length", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x22 ->
          Ok(Item(tag, "ROI Interactivity", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x23 ->
          Ok(Item(tag, "ROI Name Position", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x24 ->
          Ok(Item(tag, "ROI Name Display", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x25 -> Ok(Item(tag, "ROI Label", [LongText], vm_1))
        0x00, 0x29, _, 0x26 -> Ok(Item(tag, "ROI Shape", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x27 ->
          Ok(Item(tag, "ROI Shape Tilt", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x28 ->
          Ok(Item(tag, "ROI Shape Points Count", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x29 ->
          Ok(Item(tag, "ROI Shape Points Space", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x30 ->
          Ok(Item(tag, "ROI Shape Points", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x31 ->
          Ok(Item(tag, "ROI Shape Control Points Count", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x32 ->
          Ok(Item(tag, "ROI Shape Control Points Space", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x33 ->
          Ok(Item(tag, "ROI Shape Control Points", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x34 ->
          Ok(Item(tag, "ROI Don't Save", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "MeVis eatDicom" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "EatDicomVersion", [Unknown], vm_1))
        0x00, 0x09, _, 0x11 -> Ok(Item(tag, "EatDicomOptions", [Unknown], vm_1))
        0x00, 0x09, _, 0x21 -> Ok(Item(tag, "TimepointsID", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_ACQU_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x52 ->
          Ok(Item(tag, "Recon post proc. Flag", [SignedShort], vm_1))
        0x00, 0x19, _, 0xbe ->
          Ok(Item(tag, "Projection angle", [DecimalString], vm_1))
        0x00, 0x19, _, 0xba ->
          Ok(Item(tag, "User data 19", [DecimalString], vm_1))
        0x00, 0x19, _, 0xcb ->
          Ok(Item(tag, "Phase Contrast flow axis", [SignedShort], vm_1))
        0x00, 0x19, _, 0x9b ->
          Ok(Item(tag, "Pulse Sequence Mode", [SignedShort], vm_1))
        0x00, 0x19, _, 0xb3 ->
          Ok(Item(tag, "User data 12", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa3 ->
          Ok(Item(tag, "Calibrated Field strength", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0xce ->
          Ok(Item(tag, "Prescan type", [SignedShort], vm_1))
        0x00, 0x19, _, 0xd6 -> Ok(Item(tag, "Prep pulse", [SignedShort], vm_1))
        0x00, 0x19, _, 0x19 ->
          Ok(Item(tag, "First scan location", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd9 ->
          Ok(Item(
            tag,
            "Concatenated SAT {# DTI Diffusion Dir., release 9.0 & below}",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x19, _, 0x2d -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x86 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xe2 ->
          Ok(Item(tag, "Velocity Encode Scale", [DecimalString], vm_1))
        0x00, 0x19, _, 0x12 -> Ok(Item(tag, "Last pseq", [SignedShort], vm_1))
        0x00, 0x19, _, 0x5d -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x95 ->
          Ok(Item(tag, "Auto Prescan Analog receiver gain", [SignedShort], vm_1))
        0x00, 0x19, _, 0x6a ->
          Ok(Item(tag, "Dependent on #views processed", [SignedShort], vm_1))
        0x00, 0x19, _, 0x93 ->
          Ok(Item(tag, "Auto Prescan Center Frequency", [DecimalString], vm_1))
        0x00, 0x09, _, 0x43 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x1e ->
          Ok(Item(tag, "Display field of view", [DecimalString], vm_1))
        0x00, 0x19, _, 0xbb ->
          Ok(Item(tag, "User data 20", [DecimalString], vm_1))
        0x00, 0x19, _, 0xbd ->
          Ok(Item(tag, "User data 22", [DecimalString], vm_1))
        0x00, 0x19, _, 0x3c -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x2a ->
          Ok(Item(tag, "x-ray On position", [DecimalString], vm_1))
        0x00, 0x19, _, 0x0f ->
          Ok(Item(tag, "Horiz. Frame of ref.", [DecimalString], vm_1))
        0x00, 0x19, _, 0xaf ->
          Ok(Item(tag, "User data 8", [DecimalString], vm_1))
        0x00, 0x19, _, 0x3a -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0xc1 ->
          Ok(Item(tag, "Surface coil intensity", [SignedShort], vm_1))
        0x00, 0x19, _, 0xb1 ->
          Ok(Item(tag, "User data 10", [DecimalString], vm_1))
        0x00, 0x19, _, 0xe4 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x5a ->
          Ok(Item(tag, "Acquisition Duration", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x94 ->
          Ok(Item(tag, "Auto Prescan Transmit Gain", [SignedShort], vm_1))
        0x00, 0x19, _, 0xe6 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xde ->
          Ok(Item(tag, "Dynamic Z alpha value", [DecimalString], vm_1))
        0x00, 0x19, _, 0x6b ->
          Ok(Item(tag, "Field of view in detector cells", [SignedShort], vm_1))
        0x00, 0x19, _, 0xd4 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x83 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb7 ->
          Ok(Item(tag, "User data 16", [DecimalString], vm_1))
        0x00, 0x19, _, 0xe5 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(tag, "Increment between views", [SignedLong], vm_1))
        0x00, 0x19, _, 0xd2 ->
          Ok(Item(tag, "Projection Algorithm", [SignedShort], vm_1))
        0x00, 0x19, _, 0xec -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xf2 -> Ok(Item(tag, "Fast phases", [SignedShort], vm_1))
        0x00, 0x19, _, 0x2f ->
          Ok(Item(tag, "Trigger frequency", [DecimalString], vm_1))
        0x00, 0x19, _, 0xca ->
          Ok(Item(tag, "SAT thickness H/F", [SignedShort], vm_1))
        0x00, 0x19, _, 0x44 ->
          Ok(Item(tag, "Interscan delay", [DecimalString], vm_1))
        0x00, 0x19, _, 0x3e -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x03 ->
          Ok(Item(tag, "Cell number at Theta", [DecimalString], vm_1))
        0x00, 0x19, _, 0xe1 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x05 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x09, _, 0xf8 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xd7 ->
          Ok(Item(tag, "Cardiac phase number", [SignedShort], vm_1))
        0x00, 0x19, _, 0x82 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xa0 ->
          Ok(Item(tag, "Surface Coil Type", [SignedShort], vm_1))
        0x00, 0x19, _, 0x43 ->
          Ok(Item(tag, "Total Segments Required", [SignedShort], vm_1))
        0x00, 0x19, _, 0xd8 ->
          Ok(Item(tag, "Variable echoflag", [SignedShort], vm_1))
        0x00, 0x19, _, 0x49 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x97 ->
          Ok(Item(tag, "Bitmap defining CVs", [SignedLong], vm_1))
        0x00, 0x19, _, 0xa9 ->
          Ok(Item(tag, "User data 2", [DecimalString], vm_1))
        0x00, 0x19, _, 0xae ->
          Ok(Item(tag, "User data 7", [DecimalString], vm_1))
        0x00, 0x19, _, 0x40 ->
          Ok(Item(tag, "Stat recon flag", [SignedShort], vm_1))
        0x00, 0x19, _, 0x8f -> Ok(Item(tag, "Swappf", [SignedShort], vm_1))
        0x00, 0x19, _, 0xc3 ->
          Ok(Item(tag, "SAT location L", [SignedShort], vm_1))
        0x00, 0x19, _, 0x2b ->
          Ok(Item(tag, "x-ray Off position", [DecimalString], vm_1))
        0x00, 0x19, _, 0x98 ->
          Ok(Item(tag, "Center freq. Method", [SignedShort], vm_1))
        0x00, 0x19, _, 0xd3 ->
          Ok(Item(tag, "Projection Algorithm Name", [ShortString], vm_1))
        0x00, 0x19, _, 0xe0 ->
          Ok(Item(
            tag,
            "User data 24 {# DTI Diffusion Dir., release 10.0 & above}",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x19, _, 0xac ->
          Ok(Item(tag, "User data 5", [DecimalString], vm_1))
        0x00, 0x19, _, 0xf3 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x58 ->
          Ok(Item(tag, "CT bone number", [SignedShort], vm_1))
        0x00, 0x19, _, 0x48 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x9d ->
          Ok(Item(tag, "Pulse Sequence Date", [DateTime], vm_1))
        0x00, 0x19, _, 0xda ->
          Ok(Item(tag, "Reference channel used", [SignedShort], vm_1))
        0x00, 0x19, _, 0x06 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x42 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xaa ->
          Ok(Item(tag, "User data 3", [DecimalString], vm_1))
        0x00, 0x19, _, 0xc5 ->
          Ok(Item(tag, "SAT location P", [SignedShort], vm_1))
        0x00, 0x19, _, 0xc6 ->
          Ok(Item(tag, "SAT location H", [SignedShort], vm_1))
        0x00, 0x19, _, 0xc4 ->
          Ok(Item(tag, "SAT location A", [SignedShort], vm_1))
        0x00, 0x19, _, 0xb0 ->
          Ok(Item(tag, "User data 9", [DecimalString], vm_1))
        0x00, 0x19, _, 0xcf ->
          Ok(Item(tag, "Prescan status", [SignedShort], vm_1))
        0x00, 0x19, _, 0x76 ->
          Ok(Item(tag, "Max right chan over views", [DecimalString], vm_1))
        0x00, 0x19, _, 0x23 ->
          Ok(Item(tag, "Table Speed [mm/rotation]", [DecimalString], vm_1))
        0x00, 0x19, _, 0xf9 ->
          Ok(Item(tag, "Transmit gain", [DecimalString], vm_1))
        0x00, 0x19, _, 0xdf ->
          Ok(Item(
            tag,
            "User data 23 {# DTI Diffusion Dir., release 9.0 & below}",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x19, _, 0x26 ->
          Ok(Item(tag, "Tube Azimuth [degree]", [SignedLong], vm_1))
        0x00, 0x19, _, 0x7d ->
          Ok(Item(tag, "Second echo", [DecimalString], vm_1))
        0x00, 0x09, _, 0x3f -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x24 ->
          Ok(Item(tag, "Mid Scan Time [sec]", [DecimalString], vm_1))
        0x00, 0x19, _, 0x1a ->
          Ok(Item(tag, "Last scan ras", [LongString], vm_1))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "Series contrast", [SignedShort], vm_1))
        0x00, 0x19, _, 0x47 ->
          Ok(Item(tag, "View compression factor", [SignedShort], vm_1))
        0x00, 0x19, _, 0x2c ->
          Ok(Item(tag, "Number of triggers", [SignedLong], vm_1))
        0x00, 0x19, _, 0x9e ->
          Ok(Item(tag, "Internal Pulse Sequence Name", [LongString], vm_1))
        0x00, 0x19, _, 0x75 ->
          Ok(Item(
            tag,
            "Avg of right ref chans over views",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x19, _, 0x39 -> Ok(Item(tag, "SFOV Type", [SignedShort], vm_1))
        0x00, 0x19, _, 0x7f ->
          Ok(Item(tag, "Table delta", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb8 ->
          Ok(Item(tag, "User data 17", [DecimalString], vm_1))
        0x00, 0x19, _, 0xc2 ->
          Ok(Item(tag, "SAT location R", [SignedShort], vm_1))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "Pause Interval", [SignedShort], vm_1))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "Start number for enhanced scans", [SignedShort], vm_1))
        0x00, 0x19, _, 0xad ->
          Ok(Item(tag, "User data 6", [DecimalString], vm_1))
        0x00, 0x19, _, 0x27 ->
          Ok(Item(tag, "Rotation Speed [msec]", [DecimalString], vm_1))
        0x00, 0x09, _, 0x24 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xf4 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x17 ->
          Ok(Item(tag, "Series plane", [SignedShort], vm_1))
        0x00, 0x19, _, 0x18 ->
          Ok(Item(tag, "First scan ras", [LongString], vm_1))
        0x00, 0x19, _, 0x54 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0xd5 ->
          Ok(Item(tag, "Fractional echo", [SignedShort], vm_1))
        0x00, 0x19, 0x10, _ ->
          Ok(Item(tag, "Private Element Creator", [LongString], vm_1))
        0x00, 0x19, _, 0xc0 ->
          Ok(Item(tag, "Saturation planes", [SignedShort], vm_1))
        0x00, 0x19, _, 0x8a ->
          Ok(Item(tag, "Actual receive gain analog", [SignedShort], vm_1))
        0x00, 0x19, _, 0x9c ->
          Ok(Item(tag, "Pulse Sequence Name", [LongString], vm_1))
        0x00, 0x19, _, 0x57 ->
          Ok(Item(tag, "CT water number", [SignedShort], vm_1))
        0x00, 0x19, _, 0xa5 ->
          Ok(Item(tag, "Receive bandwidth", [DecimalString], vm_1))
        0x00, 0x19, _, 0x73 ->
          Ok(Item(
            tag,
            "Avg of left ref chans over views",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x19, _, 0xdc ->
          Ok(Item(tag, "Primary speed correction used", [SignedShort], vm_1))
        0x00, 0x19, _, 0x41 ->
          Ok(Item(tag, "Compute type", [SignedShort], vm_1))
        0x00, 0x19, _, 0x85 -> Ok(Item(tag, "Monitor SAR", [SignedShort], vm_1))
        0x00, 0x19, _, 0xc7 ->
          Ok(Item(tag, "SAT location F", [SignedShort], vm_1))
        0x00, 0x19, _, 0xdd ->
          Ok(Item(tag, "Overrange correction used", [SignedShort], vm_1))
        0x00, 0x19, _, 0xdb ->
          Ok(Item(tag, "Back projector coefficient", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb9 ->
          Ok(Item(tag, "User data 18", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa2 ->
          Ok(Item(tag, "Raw data run number", [SignedLong], vm_1))
        0x00, 0x19, _, 0x16 ->
          Ok(Item(tag, "End number for enhanced scans", [SignedShort], vm_1))
        0x00, 0x19, _, 0x02 ->
          Ok(Item(tag, "Detector Channel", [SignedLong], vm_1))
        0x00, 0x19, _, 0x2e ->
          Ok(Item(tag, "Angle of first view", [DecimalString], vm_1))
        0x00, 0x19, _, 0xc8 ->
          Ok(Item(tag, "SAT thickness R/L", [SignedShort], vm_1))
        0x00, 0x19, _, 0x71 ->
          Ok(Item(tag, "Set if fatq estimates were used", [SignedShort], vm_1))
        0x00, 0x19, _, 0x13 ->
          Ok(Item(tag, "Start number for baseline", [SignedShort], vm_1))
        0x00, 0x19, _, 0x92 ->
          Ok(Item(tag, "Slice offset on freq axis", [SignedLong], vm_1))
        0x00, 0x19, _, 0x3f -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x5f ->
          Ok(Item(tag, "Increment between channels", [SignedLong], vm_1))
        0x00, 0x19, _, 0xe8 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x5e ->
          Ok(Item(tag, "Number of channels (1...512)", [SignedLong], vm_1))
        0x00, 0x19, _, 0x61 ->
          Ok(Item(tag, "Number of views", [SignedLong], vm_1))
        0x00, 0x19, _, 0xb6 ->
          Ok(Item(tag, "User data 15", [DecimalString], vm_1))
        0x00, 0x19, _, 0xbc ->
          Ok(Item(tag, "User data 21", [DecimalString], vm_1))
        0x00, 0x19, _, 0x01 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x74 ->
          Ok(Item(tag, "Max left chan over views", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb2 ->
          Ok(Item(tag, "User data 11", [DecimalString], vm_1))
        0x00, 0x09, _, 0x25 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x99 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xa4 ->
          Ok(Item(tag, "SAT fat/water/bone", [SignedShort], vm_1))
        0x00, 0x19, _, 0x7e ->
          Ok(Item(tag, "Number of echoes", [SignedShort], vm_1))
        0x00, 0x19, _, 0xa7 ->
          Ok(Item(tag, "User data 0", [DecimalString], vm_1))
        0x00, 0x19, _, 0x4b ->
          Ok(Item(tag, "Data size for scan data", [SignedLong], vm_1))
        0x00, 0x19, _, 0x8b ->
          Ok(Item(tag, "Actual receive gain digital", [SignedShort], vm_1))
        0x00, 0x19, _, 0xcc ->
          Ok(Item(tag, "Velocity encoding", [SignedShort], vm_1))
        0x00, 0x09, _, 0xfb -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Value of back projection button", [SignedShort], vm_1))
        0x00, 0x19, _, 0xb4 ->
          Ok(Item(tag, "User data 13", [DecimalString], vm_1))
        0x00, 0x19, _, 0x9f ->
          Ok(Item(tag, "Transmitting Coil Type", [SignedShort], vm_1))
        0x00, 0x19, _, 0xa8 ->
          Ok(Item(tag, "User data 1", [DecimalString], vm_1))
        0x00, 0x19, _, 0xe3 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x22 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xf1 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0xa1 ->
          Ok(Item(tag, "Extremity Coil flag", [SignedShort], vm_1))
        0x00, 0x19, _, 0xeb -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x0e -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x87 ->
          Ok(Item(tag, "Cardiac repetition time", [DecimalString], vm_1))
        0x00, 0x19, _, 0x3b -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x09, _, 0x3e -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xcd ->
          Ok(Item(tag, "Thickness disclaimer", [SignedShort], vm_1))
        0x00, 0x19, _, 0x20 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x25 ->
          Ok(Item(tag, "Mid scan flag", [SignedShort], vm_1))
        0x00, 0x19, _, 0x42 ->
          Ok(Item(tag, "Segment Number", [SignedShort], vm_1))
        0x00, 0x19, _, 0xe9 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd0 ->
          Ok(Item(tag, "Raw data type", [ShortString], vm_1))
        0x00, 0x19, _, 0x88 ->
          Ok(Item(tag, "Images per cardiac cycle", [SignedShort], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Starting view", [SignedLong], vm_1))
        0x00, 0x19, _, 0x14 ->
          Ok(Item(tag, "End number for baseline", [SignedShort], vm_1))
        0x00, 0x19, _, 0x96 ->
          Ok(Item(
            tag,
            "Auto Prescan Digital receiver gain",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x81 -> Ok(Item(tag, "Contiguous", [SignedShort], vm_1))
        0x00, 0x19, _, 0x72 ->
          Ok(Item(tag, "Z chan avg over views", [DecimalString], vm_1))
        0x00, 0x19, _, 0x4a ->
          Ok(Item(tag, "Total no. of ref channels", [SignedShort], vm_1))
        0x00, 0x19, _, 0xc9 ->
          Ok(Item(tag, "SAT thickness A/P", [SignedShort], vm_1))
        0x00, 0x19, _, 0x84 -> Ok(Item(tag, "Peak SAR", [DecimalString], vm_1))
        0x00, 0x19, _, 0xf0 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x91 ->
          Ok(Item(tag, "Pause Time", [DecimalString], vm_1))
        0x00, 0x19, _, 0x8d ->
          Ok(Item(tag, "Delay after trigger", [DecimalString], vm_1))
        0x00, 0x19, _, 0x04 ->
          Ok(Item(tag, "Cell spacing", [DecimalString], vm_1))
        0x00, 0x19, _, 0x1b ->
          Ok(Item(tag, "Last scan loc", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb5 ->
          Ok(Item(tag, "User data 14", [DecimalString], vm_1))
        0x00, 0x19, _, 0xab ->
          Ok(Item(tag, "User data 4", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "CEMAX-ICON" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "CR Processing Parameters", [LongText], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "CR Exposure Menu Code", [LongString], vm_1))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(tag, "CR Exposure Menu String", [LongString], vm_1))
        0x00, 0x19, _, 0x30 -> Ok(Item(tag, "CR EDR Mode", [LongString], vm_1))
        0x00, 0x19, _, 0x40 -> Ok(Item(tag, "CR Latitude", [LongString], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "CR Group Number", [LongString], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "CR Equipment ID", [LongString], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "CR Image Serial Number", [LongString], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "CR Bar Code Number", [LongString], vm_1))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "CR Film Output Exposure", [LongString], vm_1))
        0x00, 0x29, _, 0x00 -> Ok(Item(tag, "Key Image", [LongString], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Note", [LongText], vm_1_to_n))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "Annotation Sequence", [Sequence], vm_1))
        0x00, 0x29, _, 0x30 ->
          Ok(Item(tag, "X Start Position", [IntegerString], vm_1))
        0x00, 0x29, _, 0x40 ->
          Ok(Item(tag, "Y Start Position", [IntegerString], vm_1))
        0x00, 0x29, _, 0x50 ->
          Ok(Item(tag, "X End Position", [IntegerString], vm_1))
        0x00, 0x29, _, 0x60 ->
          Ok(Item(tag, "Y End Position", [IntegerString], vm_1))
        0x00, 0x29, _, 0x70 ->
          Ok(Item(tag, "Annotation Text", [LongString], vm_1))
        0x00, 0x29, _, 0x80 ->
          Ok(Item(tag, "Which Marker", [IntegerString], vm_1))
        0x00, 0x29, _, 0x90 ->
          Ok(Item(tag, "Annotation Sequence", [Sequence], vm_1))
        0x00, 0x29, _, 0x91 ->
          Ok(Item(tag, "X Coordinates", [IntegerString], vm_1_to_n))
        0x00, 0x29, _, 0x92 ->
          Ok(Item(tag, "Y Coordinates", [IntegerString], vm_1_to_n))
        0x00, 0x29, _, 0x93 ->
          Ok(Item(tag, "Annotation Type", [IntegerString], vm_1))
        0x00, 0x29, _, 0x94 ->
          Ok(Item(tag, "Number of points", [IntegerString], vm_1))
        0x00, 0x29, _, 0x95 -> Ok(Item(tag, "Fill Type", [IntegerString], vm_1))
        0x30, 0x33, _, 0x00 ->
          Ok(Item(tag, "Study Priority Status", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_Ultrasound_MovieGroup_001" ->
      case g0, g1, e0, e1 {
        0x7f, 0xe1, _, 0x57 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x7f, 0xe1, _, 0x03 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x7f, 0xe1, _, 0x20 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x7f, 0xe1, _, 0x77 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1_to_n))
        0x7f, 0xe1, _, 0x86 -> Ok(Item(tag, "Unknown", [SignedLong], vm_4))
        0x7f, 0xe1, _, 0x10 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x7f, 0xe1, _, 0x70 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x7f, 0xe1, _, 0x26 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x7f, 0xe1, _, 0x84 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x7f, 0xe1, _, 0x55 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x7f, 0xe1, _, 0x12 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x7f, 0xe1, _, 0x74 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x7f, 0xe1, _, 0x43 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x7f, 0xe1, _, 0x48 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1_to_2))
        0x7f, 0xe1, _, 0x37 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x7f, 0xe1, _, 0x71 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x7f, 0xe1, _, 0x79 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x7f, 0xe1, _, 0x54 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x7f, 0xe1, _, 0x36 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x7f, 0xe1, _, 0x08 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x7f, 0xe1, _, 0x24 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x7f, 0xe1, _, 0x02 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x7f, 0xe1, _, 0x73 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x7f, 0xe1, _, 0x53 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x7f, 0xe1, _, 0x87 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_4))
        0x7f, 0xe1, _, 0x72 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x7f, 0xe1, _, 0x52 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x7f, 0xe1, _, 0x49 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x7f, 0xe1, _, 0x83 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x7f, 0xe1, _, 0x88 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x7f, 0xe1, _, 0x75 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x7f, 0xe1, _, 0x18 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x7f, 0xe1, _, 0x60 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x7f, 0xe1, _, 0x61 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x7f, 0xe1, _, 0x85 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x7f, 0xe1, _, 0x51 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x7f, 0xe1, _, 0x01 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_IQTB_IDEN_47" ->
      case g0, g1, e0, e1 {
        0x00, 0x47, _, 0x01 -> Ok(Item(tag, "Image Path", [ShortString], vm_1))
        0x00, 0x47, _, 0x02 ->
          Ok(Item(tag, "Image Date/Time", [UnsignedLong], vm_1))
        0x00, 0x47, _, 0x03 ->
          Ok(Item(tag, "Queue Sequence Number", [UnsignedLong], vm_1))
        0x00, 0x47, _, 0x04 ->
          Ok(Item(tag, "Recon Sequence ID", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_LUNAR_RAW" ->
      case g0, g1, e0, e1 {
        0x70, 0x03, _, 0x01 ->
          Ok(Item(tag, "enCORE File Name", [ShortText], vm_1))
        0x70, 0x03, _, 0x02 ->
          Ok(Item(tag, "enCORE File Data", [OtherByteString], vm_1))
        0x70, 0x03, _, 0x03 ->
          Ok(Item(tag, "enCORE File Length", [UnsignedLong], vm_1))
        0x70, 0x03, _, 0x04 ->
          Ok(Item(tag, "enCORE File Modified Time", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS REFERENCE LOCKED" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x88 ->
          Ok(Item(tag, "Locked Flag", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS TABLE LATERAL POSITION" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x98 ->
          Ok(Item(tag, "Lateral Table Position", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "HOLOGIC" ->
      case g0, g1, e0, e1 {
        0x00, 0x11, _, 0x00 ->
          Ok(Item(tag, "Hx Questionnaire", [LongString], vm_1))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Image Analysis Data in XML", [LongText], vm_1))
        0x00, 0x23, _, 0x00 ->
          Ok(Item(tag, "Encoding Scheme Version", [LongString], vm_1))
        0x00, 0x23, _, 0x01 -> Ok(Item(tag, "P File Name", [LongString], vm_1))
        0x00, 0x23, _, 0x02 ->
          Ok(Item(tag, "P File Data", [OtherByteString], vm_1))
        0x00, 0x23, _, 0x03 ->
          Ok(Item(tag, "P File Length", [UnsignedLong], vm_1))
        0x00, 0x23, _, 0x04 ->
          Ok(Item(tag, "R File Data", [OtherByteString], vm_1))
        0x00, 0x23, _, 0x05 ->
          Ok(Item(tag, "R File Length", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "BrainLAB_BeamProfile" ->
      case g0, g1, e0, e1 {
        0x34, 0x11, _, 0x01 ->
          Ok(Item(tag, "Beam Profile Sequence", [Sequence], vm_1))
        0x34, 0x11, _, 0x02 ->
          Ok(Item(tag, "Beam Profile Number", [IntegerString], vm_1))
        0x34, 0x11, _, 0x03 ->
          Ok(Item(tag, "Beam Parameter Sequence", [Sequence], vm_1))
        0x34, 0x11, _, 0x04 ->
          Ok(Item(tag, "Parameter Description", [UnlimitedText], vm_1))
        0x34, 0x11, _, 0x05 ->
          Ok(Item(tag, "Parameter Data", [OtherByteString], vm_1))
        0x34, 0x11, _, 0x06 ->
          Ok(Item(tag, "Referenced Beam Profile Number", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips MR Imaging DD 003" ->
      case g0, g1, e0, e1 {
        0x20, 0x05, _, 0x00 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x01 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x13 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x34 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x05, _, 0x45 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x49 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x51 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x52 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x53 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x56 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x57 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x81 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x20, 0x05, _, 0x82 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-CTBE-Private Release 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x00 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "ISG Image" ->
      case g0, g1, e0, e1 {
        0x00, 0x65, _, 0x11 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "LORAD Selenia" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x06 ->
          Ok(Item(tag, "Paddle ID", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x07 ->
          Ok(Item(tag, "Paddle Position", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x08 ->
          Ok(Item(tag, "Collimation Size", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x26 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x27 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x28 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x29 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x30 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x31 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x32 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x33 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x34 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x35 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x40 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x41 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x50 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x51 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x52 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x53 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x70 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x71 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "TOSHIBA_SR" ->
      case g0, g1, e0, e1 {
        0x70, 0x15, _, 0x10 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x70, 0x15, _, 0x60 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "KINETDX_GRAPHICS" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0xa4 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "MeVis eD: Timepoint Information" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "TPDateTime", [Unknown], vm_1))
        0x00, 0x09, _, 0x11 -> Ok(Item(tag, "TPDateTimeType", [Unknown], vm_1))
        0x00, 0x09, _, 0x12 ->
          Ok(Item(tag, "TPSeriesDescription", [Unknown], vm_1))
        0x00, 0x09, _, 0x13 ->
          Ok(Item(tag, "TPGradientDirections", [Unknown], vm_1))
        0x00, 0x09, _, 0x21 -> Ok(Item(tag, "GeometryID", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Silhouette V1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x13 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x14 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x17 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x18 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x19 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x1a -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x1b -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x1c -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x1d -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x1e -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x21 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x22 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x23 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x24 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x25 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x27 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x28 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x29 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x30 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x52 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x53 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x29, _, 0x54 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x55 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x29, _, 0x56 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x29, _, 0x57 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "HMC - CT - ID" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 ->
          Ok(Item(
            tag,
            "Image ID Information (e.g. Patient Name, Patient ID)",
            [Unknown],
            vm_1,
          ))
        0x00, 0x09, _, 0x01 ->
          Ok(Item(
            tag,
            "Image ID Information (e.g. Patient Comment)",
            [Unknown],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "AGFA PACS Archive Mirroring 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x31, _, 0x00 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x31, _, 0x01 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MR VA0  GEN" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x46 ->
          Ok(Item(tag, "AC Combination Mask", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x30 ->
          Ok(Item(
            tag,
            "Number of 3D Raw Partitions nominal",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x86 ->
          Ok(Item(
            tag,
            "Filter Parameter for Phase Correction",
            [DecimalString],
            ValueMultiplicity(1, Some(4)),
          ))
        0x00, 0x21, _, 0x58 ->
          Ok(Item(tag, "Gate Threshold", [DecimalString], vm_1))
        0x00, 0x19, _, 0x12 ->
          Ok(Item(tag, "Start Delay Time", [DecimalString], vm_1))
        0x00, 0x19, _, 0x93 ->
          Ok(Item(tag, "EPI Stimulation Monitor Mode", [IntegerString], vm_1))
        0x00, 0x21, _, 0x92 ->
          Ok(Item(
            tag,
            "Saturation Readout Vector Transversal Component",
            [DecimalString],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "Acquisition Columns", [IntegerString], vm_1))
        0x00, 0x21, _, 0x4f ->
          Ok(Item(tag, "Order of Slices", [CodeString], vm_1))
        0x00, 0x21, _, 0x4a ->
          Ok(Item(tag, "MIP Stop Slice", [IntegerString], vm_1))
        0x00, 0x19, _, 0x94 ->
          Ok(Item(tag, "Image Rotation Angle", [DecimalString], vm_1))
        0x00, 0x21, _, 0x49 ->
          Ok(Item(tag, "MIP Start Slice", [IntegerString], vm_1))
        0x00, 0x21, _, 0x45 ->
          Ok(Item(tag, "MIP Start Row", [IntegerString], vm_1))
        0x00, 0x21, _, 0x50 ->
          Ok(Item(tag, "Signal Mask", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x83 ->
          Ok(Item(tag, "Filter Type for Image Data", [CodeString], vm_1))
        0x00, 0x19, _, 0x44 ->
          Ok(Item(tag, "AC Element Noise Level", [IntegerString], vm_1_to_n))
        0x00, 0x21, _, 0x34 ->
          Ok(Item(tag, "Number of 3D Image Partitions", [IntegerString], vm_1))
        0x00, 0x19, _, 0x28 ->
          Ok(Item(tag, "First Measured Fourier Line", [IntegerString], vm_1))
        0x00, 0x21, _, 0x93 ->
          Ok(Item(tag, "EPI Change Value of Magnitude", [DecimalString], vm_1))
        0x00, 0x21, _, 0x43 ->
          Ok(Item(tag, "Current Group Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(
            tag,
            "Filter Parameter for Raw Data",
            [DecimalString],
            ValueMultiplicity(1, Some(4)),
          ))
        0x00, 0x19, _, 0xa0 ->
          Ok(Item(tag, "EPI Reconstruction Phase", [DecimalString], vm_1))
        0x00, 0x21, _, 0x60 ->
          Ok(Item(tag, "Number of Interpolated Images", [IntegerString], vm_1))
        0x00, 0x19, _, 0x43 ->
          Ok(Item(tag, "AC Element To ADC Connect", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0x97 ->
          Ok(Item(tag, "Coil Class Mask", [UnsignedLong], vm_1_to_n))
        0x00, 0x19, _, 0x40 ->
          Ok(Item(tag, "AC Element Number", [IntegerString], vm_1))
        0x00, 0x21, _, 0x31 ->
          Ok(Item(
            tag,
            "Number of 3D Raw Partitions current",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x21, _, 0x20 ->
          Ok(Item(tag, "Phase Corrections Rows sequence", [IntegerString], vm_1))
        0x00, 0x19, _, 0x98 ->
          Ok(Item(tag, "Coil Position", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x54 ->
          Ok(Item(tag, "Number of Trigger Pulses", [DecimalString], vm_1))
        0x00, 0x21, _, 0x22 ->
          Ok(Item(
            tag,
            "Phase Corrections Rows reconstruction",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x21, _, 0x53 ->
          Ok(Item(tag, "RRInterval", [IntegerString], vm_1))
        0x00, 0x21, _, 0x48 ->
          Ok(Item(tag, "MIP Stop Column", [IntegerString], vm_1))
        0x00, 0x21, _, 0x70 ->
          Ok(Item(tag, "Number of Echoes", [IntegerString], vm_1))
        0x00, 0x21, _, 0x41 ->
          Ok(Item(tag, "Number of Slices current", [IntegerString], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Total Measurement Time nominal", [DecimalString], vm_1))
        0x00, 0x21, _, 0x91 ->
          Ok(Item(
            tag,
            "Saturation Phase Encoding Vector Transversal Co...",
            [DecimalString],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0x26 ->
          Ok(Item(
            tag,
            "Number of Fourier Lines after Zero",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "Total Measurement Time current", [DecimalString], vm_1))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "Number of Saturation Regions", [IntegerString], vm_1))
        0x00, 0x21, _, 0x24 ->
          Ok(Item(
            tag,
            "Phase Corrections Columns reconstruction",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x21, _, 0x52 ->
          Ok(Item(tag, "Delay after Trigger", [IntegerString], vm_1))
        0x00, 0x19, _, 0x18 ->
          Ok(Item(tag, "Measurement Status Mask", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x47 ->
          Ok(Item(tag, "MIP Start Column", [IntegerString], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "Number of Averages current", [IntegerString], vm_1))
        0x00, 0x19, _, 0x31 ->
          Ok(Item(tag, "Reconstruction Columns", [IntegerString], vm_1))
        0x00, 0x19, _, 0x41 ->
          Ok(Item(tag, "AC Element Select Mask", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x39 ->
          Ok(Item(tag, "Slab Thickness", [DecimalString], vm_1))
        0x00, 0x19, _, 0x85 ->
          Ok(Item(tag, "Filter Type for Phase Correction", [CodeString], vm_1))
        0x00, 0x19, _, 0x16 ->
          Ok(Item(tag, "Sequence Control Mask", [UnsignedLong], vm_1_to_n))
        0x00, 0x21, _, 0x95 ->
          Ok(Item(tag, "EPI Change Value of Y Component", [DecimalString], vm_1))
        0x00, 0x21, _, 0x94 ->
          Ok(Item(tag, "EPI Change Value of X Component", [DecimalString], vm_1))
        0x00, 0x21, _, 0x44 ->
          Ok(Item(tag, "Current Slice Distance Factor", [DecimalString], vm_1))
        0x00, 0x19, _, 0x13 ->
          Ok(Item(tag, "Dwell Time", [DecimalString], vm_1))
        0x00, 0x19, _, 0x92 ->
          Ok(Item(
            tag,
            "Saturation Readout Vector Sagittal Component",
            [DecimalString],
            ValueMultiplicity(1, Some(5)),
          ))
        0x00, 0x21, _, 0x80 ->
          Ok(Item(tag, "Cardiac Code", [IntegerString], vm_1))
        0x00, 0x21, _, 0x56 ->
          Ok(Item(tag, "Repetition Time effective", [DecimalString], vm_1))
        0x00, 0x21, _, 0x73 ->
          Ok(Item(tag, "Second Repetition Time", [DecimalString], vm_1))
        0x00, 0x21, _, 0x72 ->
          Ok(Item(tag, "Second Echo Time", [DecimalString], vm_1))
        0x00, 0x21, _, 0x57 -> Ok(Item(tag, "Gate Phase", [CodeString], vm_1))
        0x00, 0x21, _, 0x42 ->
          Ok(Item(tag, "Current Slice Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Number of Prescans", [IntegerString], vm_1))
        0x00, 0x19, _, 0xa1 ->
          Ok(Item(tag, "EPI Reconstruction Slope", [DecimalString], vm_1))
        0x00, 0x21, _, 0x46 ->
          Ok(Item(tag, "MIP Stop Row", [IntegerString], vm_1))
        0x00, 0x19, _, 0x87 ->
          Ok(Item(
            tag,
            "Normalization Filter Type for Image Data",
            [CodeString],
            vm_1,
          ))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(tag, "Number of Fourier Lines nominal", [IntegerString], vm_1))
        0x00, 0x19, _, 0x45 ->
          Ok(Item(tag, "AC ADC Pair Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x42 ->
          Ok(Item(tag, "AC Element Data Mask", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x36 ->
          Ok(Item(
            tag,
            "Actual 3D Image Partition Number",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x21, _, 0x40 ->
          Ok(Item(tag, "Number of Slices nominal", [IntegerString], vm_1))
        0x00, 0x19, _, 0x88 ->
          Ok(Item(
            tag,
            "Normalization Filter Parameter for Image Data",
            [DecimalString],
            ValueMultiplicity(1, Some(4)),
          ))
        0x00, 0x21, _, 0x96 ->
          Ok(Item(tag, "EPI Change Value of Z Component", [DecimalString], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Flip Angle", [DecimalString], vm_1))
        0x00, 0x19, _, 0x14 ->
          Ok(Item(tag, "Number of Phases", [IntegerString], vm_1))
        0x00, 0x21, _, 0x21 ->
          Ok(Item(
            tag,
            "Phase Corrections Columns sequence",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x21 ->
          Ok(Item(tag, "Number of Fourier Lines current", [IntegerString], vm_1))
        0x00, 0x19, _, 0x96 ->
          Ok(Item(tag, "Coil ID Mask", [UnsignedLong], vm_1_to_n))
        0x00, 0x19, _, 0x81 ->
          Ok(Item(tag, "Filter Type for Raw Data", [CodeString], vm_1))
        0x00, 0x21, _, 0x59 ->
          Ok(Item(tag, "Gated Ratio", [DecimalString], vm_1))
        0x00, 0x19, _, 0x84 ->
          Ok(Item(
            tag,
            "Filter Parameter for Image Data",
            [DecimalString],
            ValueMultiplicity(1, Some(4)),
          ))
        0x00, 0x19, _, 0x91 ->
          Ok(Item(
            tag,
            "Saturation Phase Encoding Vector Sagittal Compo...",
            [DecimalString],
            ValueMultiplicity(1, Some(5)),
          ))
        _, _, _, _ -> Error(Nil)
      }
    "TOSHIBA_MEC_MR3" ->
      case g0, g1, e0, e1 {
        0x70, 0x0d, _, 0x00 ->
          Ok(Item(tag, "Scale Factor", [DecimalString], vm_1))
        0x70, 0x0d, _, 0x01 ->
          Ok(Item(tag, "Acquisition Order", [OtherByteString], vm_1))
        0x70, 0x0d, _, 0x02 ->
          Ok(Item(
            tag,
            "Orientation Vector",
            [DecimalString],
            ValueMultiplicity(9, Some(9)),
          ))
        0x70, 0x0d, _, 0x03 -> Ok(Item(tag, "Flip Flag", [SignedShort], vm_1))
        0x70, 0x0d, _, 0x04 ->
          Ok(Item(tag, "Rotate Information", [OtherByteString], vm_1))
        0x70, 0x0d, _, 0x05 -> Ok(Item(tag, "FOV", [DecimalString], vm_1))
        0x70, 0x0d, _, 0x06 ->
          Ok(Item(tag, "Image Matrix", [UnsignedShort], vm_4))
        0x70, 0x0d, _, 0x07 ->
          Ok(Item(tag, "Image Information", [OtherByteString], vm_1))
        0x70, 0x0d, _, 0x08 ->
          Ok(Item(tag, "Original Data", [OtherByteString], vm_1))
        0x70, 0x0d, _, 0x09 ->
          Ok(Item(tag, "Original Data Flag", [SignedShort], vm_1))
        0x70, 0x0d, _, 0x0c ->
          Ok(Item(
            tag,
            "Receiver Gain Correction Check Flag",
            [CodeString],
            vm_1,
          ))
        0x70, 0x0d, _, 0x20 ->
          Ok(Item(tag, "Identification Flag of 3D GDC", [ShortString], vm_1))
        0x70, 0x0d, _, 0x80 ->
          Ok(Item(tag, "Number of PAC channel", [UnsignedShort], vm_1))
        0x70, 0x0d, _, 0x81 ->
          Ok(Item(tag, "Reference mode", [UnsignedShort], vm_1))
        0x70, 0x0d, _, 0x82 ->
          Ok(Item(tag, "Gain value group for MRS", [Sequence], vm_1))
        0x70, 0x0d, _, 0x83 ->
          Ok(Item(
            tag,
            "Gain value of each channel for MRS",
            [FloatingPointSingle],
            vm_1,
          ))
        0x70, 0x0d, _, 0x84 ->
          Ok(Item(
            tag,
            "Phase value of each channel for MRS",
            [FloatingPointSingle],
            vm_1,
          ))
        0x70, 0x0d, _, 0x85 ->
          Ok(Item(
            tag,
            "Reference gain value of each channel for MRS",
            [FloatingPointSingle],
            vm_1,
          ))
        0x70, 0x0d, _, 0x86 ->
          Ok(Item(
            tag,
            "Reference gain value of each channel for MRS",
            [FloatingPointSingle],
            vm_1,
          ))
        0x70, 0x0d, _, 0x87 ->
          Ok(Item(
            tag,
            "Receiver gain of reference scan",
            [FloatingPointSingle],
            vm_1,
          ))
        0x70, 0x0d, _, 0x88 ->
          Ok(Item(tag, "Flag of water Sat pulse", [UnsignedLong], vm_1))
        0x70, 0x0d, _, 0x89 ->
          Ok(Item(tag, "Selected contrast TE", [FloatingPointSingle], vm_1))
        0x70, 0x0d, _, 0x8a ->
          Ok(Item(tag, "Raw Data Set Sequence", [Sequence], vm_1))
        0x70, 0x0d, _, 0x8b ->
          Ok(Item(tag, "Multi Slice number", [DecimalString], vm_1))
        0x70, 0x0d, _, 0x8c ->
          Ok(Item(tag, "Multi Coverage number", [DecimalString], vm_1))
        0x70, 0x0d, _, 0x8d ->
          Ok(Item(tag, "Raw Data Sequence", [Sequence], vm_1))
        0x70, 0x0d, _, 0x8e ->
          Ok(Item(tag, "Coil Channel No.", [DecimalString], vm_1))
        0x70, 0x0d, _, 0x8f ->
          Ok(Item(tag, "MRS Raw Data", [OtherByteString], vm_1))
        0x70, 0x0d, _, 0x90 ->
          Ok(Item(tag, "MRS Ref Raw Data", [OtherFloatString], vm_1))
        0x70, 0x0d, _, 0x91 ->
          Ok(Item(tag, "Receiver gain of prescan", [FloatingPointSingle], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED SMS USG S2000" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x46 ->
          Ok(Item(tag, "Color Flow Smooth Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "M-Mode Dynamic Range", [Unknown], vm_1))
        0x00, 0x19, _, 0x2d ->
          Ok(Item(tag, "B-Mode Tint Index", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x86 ->
          Ok(Item(tag, "M-Mode Tint Type", [Unknown], vm_1))
        0x00, 0x19, _, 0x66 -> Ok(Item(tag, "Doppler Submode", [Unknown], vm_1))
        0x00, 0x19, _, 0x6a ->
          Ok(Item(tag, "Doppler Trace Inverted", [Unknown], vm_1))
        0x00, 0x19, _, 0x3c ->
          Ok(Item(tag, "Thumbnail Data", [UnlimitedText], vm_1))
        0x00, 0x19, _, 0x2a ->
          Ok(Item(tag, "B-Mode Tint Type", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x3a -> Ok(Item(tag, "Image Flag", [Unknown], vm_1))
        0x00, 0x19, _, 0x83 ->
          Ok(Item(tag, "M-Mode Map Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(tag, "S2000 Private Doppler Wall Filter", [Unknown], vm_1))
        0x00, 0x19, _, 0x44 ->
          Ok(Item(tag, "Color Flow Res/Speed Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x03 ->
          Ok(Item(tag, "Frame Rate", [FloatingPointDouble], vm_1))
        0x00, 0x19, _, 0x28 -> Ok(Item(tag, "??", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x65 ->
          Ok(Item(tag, "Doppler Map Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(tag, "M-Mode Edge Enhance Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x43 ->
          Ok(Item(tag, "Color Flow Overall Gain", [Unknown], vm_1))
        0x00, 0x19, _, 0x49 ->
          Ok(Item(tag, "Color Flow Priority Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x40 ->
          Ok(Item(tag, "Color Flow state", [Unknown], vm_1))
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "Private Creator Version", [Unknown], vm_1))
        0x00, 0x19, _, 0x0c ->
          Ok(Item(tag, "Burned in Graphics", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x48 ->
          Ok(Item(tag, "Color Flow Map Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x23 ->
          Ok(Item(tag, "B-Mode Res/Speed Index", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x26 ->
          Ok(Item(tag, "B-Mode Map Index", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x24 ->
          Ok(Item(tag, "B-Mode Edge Enhance Index", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x47 ->
          Ok(Item(tag, "Color Flow Persistence Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x29 -> Ok(Item(tag, "??", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x0d ->
          Ok(Item(tag, "SieClear Index", [ShortString], vm_1))
        0x00, 0x19, _, 0x27 -> Ok(Item(tag, "??", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x54 ->
          Ok(Item(tag, "Color Flow Maximum Velocity", [Unknown], vm_1))
        0x00, 0x19, _, 0x41 ->
          Ok(Item(tag, "Color Flow Wall Filter Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x2e ->
          Ok(Item(tag, "ClarifyVE Index", [ShortString], vm_1))
        0x00, 0x19, _, 0x61 ->
          Ok(Item(tag, "Doppler Overall Gain", [Unknown], vm_1))
        0x00, 0x19, _, 0x69 ->
          Ok(Item(tag, "Doppler Time/Freq Res Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x22 ->
          Ok(Item(tag, "B-Mode Overall Gain", [FloatingPointDouble], vm_1))
        0x00, 0x19, _, 0x6c ->
          Ok(Item(tag, "Doppler Tint Type", [Unknown], vm_1))
        0x00, 0x19, _, 0x87 -> Ok(Item(tag, "M-Mode Submode", [Unknown], vm_1))
        0x00, 0x19, _, 0x3b -> Ok(Item(tag, "IPDA/MDA Data", [LongText], vm_1))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(tag, "B-Mode Submode", [ShortString], vm_1))
        0x00, 0x19, _, 0x25 ->
          Ok(Item(tag, "B-Mode Persistence Index", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x42 ->
          Ok(Item(tag, "Color Flow Submode", [Unknown], vm_1))
        0x00, 0x19, _, 0x88 ->
          Ok(Item(tag, "M-Mode Tint Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Doppler Dynamic Range", [Unknown], vm_1))
        0x00, 0x19, _, 0x21 ->
          Ok(Item(tag, "B-Mode Dynamic Range", [FloatingPointDouble], vm_1))
        0x00, 0x19, _, 0x81 ->
          Ok(Item(tag, "M-Mode Overall Gain", [Unknown], vm_1))
        0x00, 0x19, _, 0x72 ->
          Ok(Item(tag, "Doppler Tint Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x63 ->
          Ok(Item(tag, "Attributes Doppler Gate Size", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips Imaging DD 070" ->
      case g0, g1, e0, e1 {
        0x40, 0x01, _, 0x10 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x40, 0x01, _, 0x11 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x40, 0x01, _, 0x12 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x40, 0x01, _, 0x16 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x40, 0x01, _, 0x17 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x40, 0x01, _, 0x18 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x40, 0x01, _, 0x1c -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x40, 0x01, _, 0x1d -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_Ultrasound_ImageGroup_001" ->
      case g0, g1, e0, e1 {
        0x60, 0x03, _, 0x10 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x60, 0x03, _, 0x11 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Eclipse 60" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0xff ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x0a ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x59 ->
          Ok(Item(tag, "Private data", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x20 -> Ok(Item(tag, "Private data", [Sequence], vm_1))
        0x20, 0x0d, _, 0x08 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x00, 0x31, _, 0x35 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x60 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x50 -> Ok(Item(tag, "Private data", [CodeString], vm_1))
        0x00, 0x29, _, 0x54 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x50 -> Ok(Item(tag, "Private data", [CodeString], vm_1))
        0x00, 0x31, _, 0x33 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x52 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x0e ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x34 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x77, 0x77, _, 0x10 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x77, 0x77, _, 0x01 -> Ok(Item(tag, "Private data", [Date], vm_1))
        0x00, 0x29, _, 0x33 ->
          Ok(Item(tag, "Private data", [DecimalString], vm_1))
        0x20, 0x0d, _, 0x09 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x37 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x05 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x52 ->
          Ok(Item(tag, "Private data", [FloatingPointDouble], vm_1))
        0x00, 0x31, _, 0x30 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x5e -> Ok(Item(tag, "Private data", [CodeString], vm_1))
        0x20, 0x0d, _, 0x56 ->
          Ok(Item(tag, "Private data", [FloatingPointDouble], vm_1))
        0x77, 0x77, _, 0x02 -> Ok(Item(tag, "Private data", [CodeString], vm_1))
        0x20, 0x0d, _, 0x06 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x1a ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x00, 0x29, _, 0x32 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x28 ->
          Ok(Item(tag, "Private data", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x0f ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x04 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x38 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x10 ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x00, 0x29, _, 0x30 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x33 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x00, 0x29, _, 0x36 -> Ok(Item(tag, "Private data", [SignedLong], vm_1))
        0x20, 0x0d, _, 0x1b ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x58 ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x36 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x77, 0x77, _, 0x14 -> Ok(Item(tag, "Private data", [LongText], vm_1))
        0x20, 0x0d, _, 0x5d -> Ok(Item(tag, "Private data", [CodeString], vm_1))
        0x20, 0x0d, _, 0x32 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x57 ->
          Ok(Item(tag, "Private data", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x07 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x15 ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x39 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x54 -> Ok(Item(tag, "Private data", [CodeString], vm_1))
        0x00, 0x29, _, 0x53 ->
          Ok(Item(tag, "Private data", [DecimalString], vm_1))
        0x20, 0x0d, _, 0x02 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x31 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x01 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x11 ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x55 ->
          Ok(Item(tag, "Private data", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x40 -> Ok(Item(tag, "Private data", [CodeString], vm_1))
        0x20, 0x0d, _, 0x5a ->
          Ok(Item(tag, "Private data", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x51 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x0c ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x14 ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x00, 0x29, _, 0x56 ->
          Ok(Item(tag, "Private data", [UnsignedShort], vm_1))
        0x20, 0x0d, _, 0x53 -> Ok(Item(tag, "Private data", [CodeString], vm_1))
        0x00, 0x31, _, 0x32 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x0b ->
          Ok(Item(tag, "Private data", [OtherByteString], vm_1))
        0x20, 0x0d, _, 0x12 ->
          Ok(Item(tag, "Private data", [OtherByteString], vm_1))
        0x00, 0x31, _, 0x34 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x55 ->
          Ok(Item(tag, "Private data", [FloatingPointSingle], vm_1))
        0x20, 0x0d, _, 0x03 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x00, 0x29, _, 0x34 ->
          Ok(Item(tag, "Private data", [DecimalString], vm_1))
        0x20, 0x0d, _, 0x51 -> Ok(Item(tag, "Private data", [CodeString], vm_1))
        0x20, 0x0d, _, 0x0d ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x13 ->
          Ok(Item(tag, "Private data", [IntegerString], vm_1))
        0x77, 0x77, _, 0x03 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x3a -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x20, 0x0d, _, 0x35 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x00, 0x31, _, 0x31 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x27 ->
          Ok(Item(tag, "Private data", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x30 -> Ok(Item(tag, "Private data", [LongString], vm_1))
        0x00, 0x29, _, 0x31 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CBT RECON FILTER TYPE" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x90 ->
          Ok(Item(tag, "Reconstruction Filter Type", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_DL_IMG_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x52 ->
          Ok(Item(tag, "Source Frame Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x46 ->
          Ok(Item(tag, "Max Object Speed", [DecimalString], vm_1))
        0x00, 0x19, _, 0xbe ->
          Ok(Item(
            tag,
            "Source to image distance per frame vector",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0xba ->
          Ok(Item(tag, "Acquisition region", [CodeString], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Image Dose", [DecimalString], vm_1))
        0x00, 0x19, _, 0x9b -> Ok(Item(tag, "Grid", [CodeString], vm_1))
        0x00, 0x19, _, 0xb3 ->
          Ok(Item(tag, "Acquisition Protocol User Name", [LongString], vm_1))
        0x00, 0x19, _, 0xa3 ->
          Ok(Item(tag, "Image Rotation", [DecimalString], vm_1))
        0x00, 0x19, _, 0x86 -> Ok(Item(tag, "Calibration Time", [Time], vm_1))
        0x00, 0x19, _, 0xe2 ->
          Ok(Item(tag, "Carm Lateral Angle", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x95 -> Ok(Item(tag, "Image Sweep", [CodeString], vm_1))
        0x00, 0x19, _, 0x93 ->
          Ok(Item(tag, "Spatial Change", [CodeString], vm_1))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "Image File Name", [LongString], vm_1))
        0x00, 0x19, _, 0xbb ->
          Ok(Item(tag, "Acquisition SUB mode", [CodeString], vm_1))
        0x00, 0x19, _, 0x32 ->
          Ok(Item(tag, "Default Spatial Filter Strength", [IntegerString], vm_1))
        0x00, 0x19, _, 0xbd ->
          Ok(Item(tag, "Table rotation status vector", [CodeString], vm_1_to_n))
        0x00, 0x19, _, 0xaf ->
          Ok(Item(tag, "kVp actual vector", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x3a ->
          Ok(Item(tag, "Sensor Roi x Size", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb1 ->
          Ok(Item(tag, "Acquisition Mode Description", [LongString], vm_1))
        0x00, 0x19, _, 0xe4 ->
          Ok(Item(
            tag,
            "Carm Lateral Angle increment",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0x94 ->
          Ok(Item(tag, "Inconsistent Flag", [CodeString], vm_1))
        0x00, 0x19, _, 0xde ->
          Ok(Item(tag, "Acquisition Plane", [CodeString], vm_1))
        0x00, 0x19, _, 0x55 ->
          Ok(Item(tag, "Source Frame Item Id", [UniqueIdentifier], vm_1))
        0x00, 0x19, _, 0xd4 ->
          Ok(Item(tag, "Detection gain value", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x83 ->
          Ok(Item(tag, "Calibration Object Size mm", [DecimalString], vm_1))
        0x00, 0x19, _, 0xed ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0xec ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0xca ->
          Ok(Item(
            tag,
            "3Dspin expected number of frames",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x44 ->
          Ok(Item(tag, "Min Object Size", [DecimalString], vm_1))
        0x00, 0x19, _, 0x3e ->
          Ok(Item(tag, "Sharp Sensitivity", [DecimalString], vm_1))
        0x00, 0x19, _, 0xe1 ->
          Ok(Item(tag, "Pivot Lateral Angle", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x51 ->
          Ok(Item(tag, "Source Image Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(tag, "Calibration Object", [CodeString], vm_1))
        0x00, 0x19, _, 0xa0 -> Ok(Item(tag, "ABD Value", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa6 ->
          Ok(Item(tag, "Injection Delay", [DecimalString], vm_1))
        0x00, 0x19, _, 0x34 ->
          Ok(Item(tag, "Detector Gain", [DecimalString], vm_1))
        0x00, 0x19, _, 0x43 ->
          Ok(Item(tag, "Detector Size Columns", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x8c ->
          Ok(Item(tag, "Calibration Points Row", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x49 ->
          Ok(Item(tag, "Window Time Duration", [DecimalString], vm_1))
        0x00, 0x19, _, 0x97 ->
          Ok(Item(tag, "Angle 1 Increment", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa9 -> Ok(Item(tag, "EPT", [DecimalString], vm_1))
        0x00, 0x19, _, 0xae ->
          Ok(Item(tag, "SUB operator LUTs names", [LongString], vm_1_to_n))
        0x00, 0x19, _, 0x40 ->
          Ok(Item(tag, "Lag Sensitivity", [DecimalString], vm_1))
        0x00, 0x19, _, 0x8f ->
          Ok(Item(tag, "Calibration Sw Version", [LongString], vm_1))
        0x00, 0x19, _, 0x2b ->
          Ok(Item(tag, "Distance to table top", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x98 ->
          Ok(Item(tag, "Angle 2 Increment", [DecimalString], vm_1))
        0x00, 0x19, _, 0xe0 ->
          Ok(Item(tag, "DAP of current record", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0xac ->
          Ok(Item(tag, "Brightness Sensitivity", [DecimalString], vm_1))
        0x00, 0x19, _, 0x9a ->
          Ok(Item(tag, "Sensor Feedback", [DecimalString], vm_1))
        0x00, 0x19, _, 0x37 ->
          Ok(Item(tag, "Sensor Roi Shape", [CodeString], vm_1))
        0x00, 0x19, _, 0x0c ->
          Ok(Item(tag, "LV Diastolic contour", [FloatingPointSingle], vm_2_to_n))
        0x00, 0x19, _, 0x48 ->
          Ok(Item(tag, "Exposure Trajectory Family", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x9d ->
          Ok(Item(tag, "Applicable Review Mode", [CodeString], vm_1))
        0x00, 0x19, _, 0xaa ->
          Ok(Item(tag, "Can Downscan 512", [CodeString], vm_1))
        0x00, 0x19, _, 0xc5 ->
          Ok(Item(
            tag,
            "Preselected pivot rotation speed",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0xc4 ->
          Ok(Item(tag, "Spectral filter thickness", [IntegerString], vm_1))
        0x00, 0x19, _, 0xb0 ->
          Ok(Item(tag, "mAs actual vector", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xdf ->
          Ok(Item(
            tag,
            "LP off longitudinal position Z",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0x4c -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x33 ->
          Ok(Item(tag, "Min Saturation Dose", [DecimalString], vm_1))
        0x00, 0x19, _, 0x35 ->
          Ok(Item(tag, "Patient Dose Limit", [DecimalString], vm_1))
        0x00, 0x19, _, 0x47 ->
          Ok(Item(tag, "Object Back Motion", [CodeString], vm_1))
        0x00, 0x19, _, 0x38 ->
          Ok(Item(tag, "Sensor Roi x Position", [DecimalString], vm_1))
        0x00, 0x19, _, 0x9e ->
          Ok(Item(tag, "Log Lut Control Points", [DecimalString], vm_1))
        0x00, 0x19, _, 0x39 ->
          Ok(Item(tag, "Sensor Roi y Position", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb8 ->
          Ok(Item(
            tag,
            "Recommended display frame rate float",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0xc2 ->
          Ok(Item(tag, "pw actual vector", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "Extend Calibration Sw Version", [LongString], vm_1))
        0x00, 0x19, _, 0x0d ->
          Ok(Item(tag, "LV Systolic contour", [FloatingPointSingle], vm_2_to_n))
        0x00, 0x19, _, 0x3d ->
          Ok(Item(tag, "Noise Sensitivity", [DecimalString], vm_1))
        0x00, 0x19, _, 0xad ->
          Ok(Item(tag, "Exp Lut NOSUB Control Points", [DecimalString], vm_1))
        0x00, 0x19, _, 0x54 ->
          Ok(Item(tag, "Source Image Item Id", [UniqueIdentifier], vm_1))
        0x00, 0x19, _, 0xd5 ->
          Ok(Item(tag, "mR mAs calibration value", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x8a ->
          Ok(Item(tag, "Calibration Frame Original", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x9c ->
          Ok(Item(tag, "Default Mask Pixel Shift", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "Source Series Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0xa5 ->
          Ok(Item(tag, "Injection Phase", [CodeString], vm_1))
        0x00, 0x19, _, 0x4e ->
          Ok(Item(tag, "Default Brightness Contrast", [DecimalString], vm_1))
        0x00, 0x19, _, 0x31 ->
          Ok(Item(tag, "Default Spatial Filter Family", [IntegerString], vm_1))
        0x00, 0x19, _, 0xdc ->
          Ok(Item(tag, "DRM LUT file name", [LongString], vm_1))
        0x00, 0x19, _, 0x41 -> Ok(Item(tag, "Tube", [CodeString], vm_1))
        0x00, 0x19, _, 0x85 -> Ok(Item(tag, "Calibration Date", [Date], vm_1))
        0x00, 0x19, _, 0x0b ->
          Ok(Item(tag, "Fov Dimension Double", [DecimalString], vm_1))
        0x00, 0x19, _, 0xc7 ->
          Ok(Item(tag, "Patient position per image", [CodeString], vm_1))
        0x00, 0x19, _, 0xdd ->
          Ok(Item(tag, "DRM Strength", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xb9 ->
          Ok(Item(tag, "ABD Vector", [FloatingPointSingle], vm_1_to_n))
        0x00, 0x19, _, 0xa2 ->
          Ok(Item(tag, "Sub Window Width", [DecimalString], vm_1))
        0x00, 0x19, _, 0x36 ->
          Ok(Item(tag, "Preproc Image Rate Max", [DecimalString], vm_1))
        0x00, 0x19, _, 0xc8 ->
          Ok(Item(tag, "3D structure of interest", [CodeString], vm_1))
        0x00, 0x19, _, 0xe7 ->
          Ok(Item(
            tag,
            "LP off long pos Z first frame",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0x92 ->
          Ok(Item(tag, "Detector Rotation Angle", [DecimalString], vm_1))
        0x00, 0x19, _, 0x3f ->
          Ok(Item(tag, "Contrast Sensitivity", [DecimalString], vm_1))
        0x00, 0x19, _, 0xe8 ->
          Ok(Item(
            tag,
            "LP off long pos Z increment",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0x89 ->
          Ok(Item(tag, "Calibration Image Original", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xbc ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0xb2 ->
          Ok(Item(tag, "Acquisition Mode Display Label", [LongString], vm_1))
        0x00, 0x19, _, 0x99 ->
          Ok(Item(tag, "Angle 3 Increment", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa4 ->
          Ok(Item(tag, "Auto Injection Enabled", [CodeString], vm_1))
        0x00, 0x19, _, 0xa7 ->
          Ok(Item(
            tag,
            "Reference Injection Frame Number",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x4b ->
          Ok(Item(tag, "Detector Origin", [IntegerString], vm_1))
        0x00, 0x19, _, 0x8b ->
          Ok(Item(
            tag,
            "Calibration Number Of Points Uif",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x9f ->
          Ok(Item(tag, "Exp Lut Control Points", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa8 ->
          Ok(Item(tag, "Injection Duration", [DecimalString], vm_1))
        0x00, 0x19, _, 0xe3 ->
          Ok(Item(
            tag,
            "Pivot Lateral Angle increment",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0xa1 ->
          Ok(Item(tag, "Sub Window Center", [DecimalString], vm_1))
        0x00, 0x19, _, 0xeb ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x87 ->
          Ok(Item(tag, "Calibration Accuracy", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x3b ->
          Ok(Item(tag, "Sensor Roi y Size", [DecimalString], vm_1))
        0x00, 0x19, _, 0x45 ->
          Ok(Item(tag, "Max Object Size", [DecimalString], vm_1))
        0x00, 0x19, _, 0x42 ->
          Ok(Item(tag, "Detector Size Rows", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x53 ->
          Ok(Item(tag, "Source Series Item Id", [UniqueIdentifier], vm_1))
        0x00, 0x19, _, 0xea ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0xe9 ->
          Ok(Item(
            tag,
            "Source to detector distance per frame vector",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0x8e ->
          Ok(Item(
            tag,
            "Calibration Magnification Ratio",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0x88 ->
          Ok(Item(tag, "Calibration Extended", [CodeString], vm_1))
        0x00, 0x19, _, 0x96 ->
          Ok(Item(tag, "Internal Label Image", [CodeString], vm_1))
        0x00, 0x19, _, 0x81 ->
          Ok(Item(tag, "Calibration Frame", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x4a ->
          Ok(Item(tag, "Positioner Angle Display Mode", [CodeString], vm_1))
        0x00, 0x19, _, 0xc9 ->
          Ok(Item(tag, "3D calibration out of date flag", [CodeString], vm_1))
        0x00, 0x19, _, 0x84 ->
          Ok(Item(tag, "Calibration Factor", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x91 ->
          Ok(Item(tag, "Calibration Return Code", [IntegerString], vm_1))
        0x00, 0x19, _, 0x8d ->
          Ok(Item(tag, "Calibration Points Column", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x4f ->
          Ok(Item(tag, "User Brightness Contrast", [DecimalString], vm_1))
        0x00, 0x19, _, 0xab ->
          Ok(Item(tag, "Current Spatial Filter Strength", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AgilityRuntime" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x11 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x29, _, 0x12 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x13 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x14 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x1f -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SECTRA_ImageInfo_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Image info", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x02 -> Ok(Item(tag, "Marking", [CodeString], vm_1))
        0x00, 0x29, _, 0x03 ->
          Ok(Item(tag, "No Decompression", [LongString], vm_1))
        0x00, 0x29, _, 0x04 ->
          Ok(Item(tag, "Image Info new", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "MITRA OBJECT ATTRIBUTES 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x33, _, 0x02 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x33, _, 0x04 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x33, _, 0x06 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x33, _, 0x08 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x33, _, 0x0a -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_HELIOS_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x45, _, 0x0c ->
          Ok(Item(tag, "Number of Views shifted", [SignedShort], vm_1))
        0x00, 0x45, _, 0x21 ->
          Ok(Item(tag, "Iterbone Flag", [SignedShort], vm_1))
        0x00, 0x45, _, 0x30 ->
          Ok(Item(tag, "CardiacReconAlgorithm", [CodeString], vm_1))
        0x00, 0x45, _, 0x09 ->
          Ok(Item(tag, "Sigma Row number", [SignedShort], vm_1))
        0x00, 0x45, _, 0x20 ->
          Ok(Item(tag, "Cross Talk Calibration Time", [SignedShort], vm_1))
        0x00, 0x45, _, 0x04 -> Ok(Item(tag, "DAS gain", [SignedShort], vm_1))
        0x00, 0x45, _, 0x06 ->
          Ok(Item(tag, "Table Direction", [CodeString], vm_1))
        0x00, 0x45, _, 0x1e ->
          Ok(Item(tag, "Z Slope Calibration Time", [SignedShort], vm_1))
        0x00, 0x45, _, 0x14 ->
          Ok(Item(tag, "Number of Views 1A", [SignedShort], vm_1))
        0x00, 0x45, _, 0x05 ->
          Ok(Item(tag, "DAS Temperature", [SignedShort], vm_1))
        0x00, 0x45, _, 0x36 ->
          Ok(Item(tag, "EkgFullMaStartPhase", [CodeString], vm_1))
        0x00, 0x45, _, 0x0f ->
          Ok(Item(tag, "Z tracking Error", [FloatingPointSingle], vm_1))
        0x00, 0x45, _, 0x12 ->
          Ok(Item(tag, "Start View 1A", [SignedShort], vm_1))
        0x00, 0x45, _, 0x02 ->
          Ok(Item(tag, "Macro width at ISO Center", [FloatingPointSingle], vm_1))
        0x00, 0x45, _, 0x13 -> Ok(Item(tag, "Sigma Mode", [SignedShort], vm_1))
        0x00, 0x45, _, 0x11 ->
          Ok(Item(tag, "Number of Views 2A", [SignedShort], vm_1))
        0x00, 0x45, _, 0x03 -> Ok(Item(tag, "DAS type", [SignedShort], vm_1))
        0x00, 0x45, _, 0x01 ->
          Ok(Item(tag, "Number of Macro Rows in Detector", [SignedShort], vm_1))
        0x00, 0x45, _, 0x1b ->
          Ok(Item(tag, "Phantom Calibration Date", [SignedShort], vm_1))
        0x00, 0x45, _, 0x22 ->
          Ok(Item(tag, "Perisstaltic Flag", [SignedShort], vm_1))
        0x00, 0x45, _, 0x1d ->
          Ok(Item(tag, "Z Slope Calibration Date", [SignedShort], vm_1))
        0x00, 0x45, _, 0x07 ->
          Ok(Item(tag, "Z smoothing Factor", [FloatingPointSingle], vm_1))
        0x00, 0x45, _, 0x10 ->
          Ok(Item(tag, "Start View 2A", [SignedShort], vm_1))
        0x00, 0x45, _, 0x15 ->
          Ok(Item(tag, "Start View 2B", [SignedShort], vm_1))
        0x00, 0x45, _, 0x32 ->
          Ok(Item(tag, "TemporalResolution", [FloatingPointSingle], vm_1))
        0x00, 0x45, _, 0x08 ->
          Ok(Item(tag, "View Weighting Mode", [SignedShort], vm_1))
        0x00, 0x45, _, 0x19 ->
          Ok(Item(tag, "Air Calibration Date", [SignedShort], vm_1))
        0x00, 0x45, _, 0x33 ->
          Ok(Item(tag, "PctRpeakDelay", [CodeString], vm_1))
        0x00, 0x45, _, 0x3b ->
          Ok(Item(tag, "NoiseReductionImageFilterDesc", [LongString], vm_1))
        0x00, 0x45, _, 0x1f ->
          Ok(Item(tag, "Cross Talk Calibration Date", [SignedShort], vm_1))
        0x00, 0x45, _, 0x1c ->
          Ok(Item(tag, "Phantom Calibration Time", [SignedShort], vm_1))
        0x00, 0x45, _, 0x39 ->
          Ok(Item(tag, "EkgModulationMinMa", [CodeString], vm_1))
        0x00, 0x45, _, 0x0d ->
          Ok(Item(tag, "Z tracking Flag", [SignedShort], vm_1))
        0x00, 0x45, _, 0x34 ->
          Ok(Item(tag, "ActualPctRpeakDelay", [CodeString], vm_1))
        0x00, 0x45, _, 0x31 ->
          Ok(Item(tag, "AvgHeartRateForImage", [CodeString], vm_1))
        0x00, 0x45, _, 0x1a ->
          Ok(Item(tag, "Air Calibration Time", [SignedShort], vm_1))
        0x00, 0x45, _, 0x0a ->
          Ok(Item(tag, "Minimum DAS value", [FloatingPointSingle], vm_1))
        0x00, 0x45, _, 0x17 ->
          Ok(Item(tag, "Start View 1B", [SignedShort], vm_1))
        0x00, 0x45, _, 0x0e ->
          Ok(Item(tag, "Mean Z error", [FloatingPointSingle], vm_1))
        0x00, 0x45, _, 0x0b ->
          Ok(Item(tag, "Maximum Offset Value", [FloatingPointSingle], vm_1))
        0x00, 0x45, _, 0x18 ->
          Ok(Item(tag, "Number of Views 1B", [SignedShort], vm_1))
        0x00, 0x45, _, 0x16 ->
          Ok(Item(tag, "Number Views 2B", [SignedShort], vm_1))
        0x00, 0x45, _, 0x38 ->
          Ok(Item(tag, "EkgModulationMaxMa", [CodeString], vm_1))
        0x00, 0x45, _, 0x37 ->
          Ok(Item(tag, "EkgFullMaEndPhase", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "APEX_PRIVATE" ->
      case g0, g1, e0, e1 {
        0x00, 0x27, _, 0x10 ->
          Ok(Item(tag, "Private Creator", [LongString], vm_1))
        0x00, 0x27, _, 0x11 ->
          Ok(Item(tag, "Bed Position", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "TMDTK" ->
      case g0, g1, e0, e1 {
        0x7e, 0xff, _, 0x21 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x7e, 0xff, _, 0x2e -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips Imaging DD 129" ->
      case g0, g1, e0, e1 {
        0x20, 0x01, _, 0x00 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x01, _, 0x01 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CBT RECON SLICE WIDTH" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x87 ->
          Ok(Item(tag, "Reconstruction Slice Width", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CM VA0  LAB" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 ->
          Ok(Item(tag, "Generator Identification Label", [LongString], vm_1))
        0x00, 0x09, _, 0x11 ->
          Ok(Item(tag, "Gantry Identification Label", [LongString], vm_1))
        0x00, 0x09, _, 0x12 ->
          Ok(Item(tag, "XRay Tube Identification Label", [LongString], vm_1))
        0x00, 0x09, _, 0x13 ->
          Ok(Item(tag, "Detector Identification Label", [LongString], vm_1))
        0x00, 0x09, _, 0x14 ->
          Ok(Item(tag, "DAS Identification Label", [LongString], vm_1))
        0x00, 0x09, _, 0x15 ->
          Ok(Item(tag, "SMI Identification Label", [LongString], vm_1))
        0x00, 0x09, _, 0x16 ->
          Ok(Item(tag, "CPU Identification Label", [LongString], vm_1))
        0x00, 0x09, _, 0x20 ->
          Ok(Item(tag, "Header Version", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "TOSHIBA_MEC_XA3" ->
      case g0, g1, e0, e1 {
        0x70, 0x79, _, 0x43 -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x3f -> Ok(Item(tag, "", [UnsignedShort], vm_2))
        0x70, 0x79, _, 0x6c -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x70, 0x79, _, 0x41 -> Ok(Item(tag, "", [SignedShort], vm_2))
        0x70, 0x79, _, 0x64 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x6a -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x74 ->
          Ok(Item(tag, "", [SignedLong], ValueMultiplicity(28, Some(28))))
        0x70, 0x79, _, 0x5a -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x70, 0x79, _, 0x31 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x33 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x2c -> Ok(Item(tag, "", [ShortString], vm_3))
        0x70, 0x79, _, 0x80 -> Ok(Item(tag, "", [LongString], vm_1))
        0x70, 0x79, _, 0x2a -> Ok(Item(tag, "", [UnsignedShort], vm_5))
        0x70, 0x79, _, 0x7b -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x70, 0x79, _, 0x2f -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x3b -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x27 -> Ok(Item(tag, "", [UnsignedShort], vm_2))
        0x70, 0x79, _, 0x58 -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x70, 0x79, _, 0x6d -> Ok(Item(tag, "", [DecimalString], vm_1))
        0x70, 0x79, _, 0x45 -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x32 -> Ok(Item(tag, "", [ShortString], vm_2))
        0x70, 0x79, _, 0x61 ->
          Ok(Item(tag, "", [SignedShort], ValueMultiplicity(30, None)))
        0x70, 0x79, _, 0x5b -> Ok(Item(tag, "", [UnsignedShort], vm_2))
        0x70, 0x79, _, 0x5d -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x2d -> Ok(Item(tag, "", [SignedShort], vm_2))
        0x70, 0x79, _, 0x68 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x5f ->
          Ok(Item(tag, "", [SignedShort], ValueMultiplicity(4, None)))
        0x70, 0x79, _, 0x3e -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x2e -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x67 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x42 -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x76 -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x70, 0x79, _, 0x28 -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x70, 0x79, _, 0x59 -> Ok(Item(tag, "", [UnsignedShort], vm_2_to_n))
        0x70, 0x79, _, 0x51 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x38 -> Ok(Item(tag, "", [SignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x60 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x48 ->
          Ok(Item(tag, "", [UnsignedShort], ValueMultiplicity(12, Some(12))))
        0x70, 0x79, _, 0x2b -> Ok(Item(tag, "", [Unknown], vm_1))
        0x70, 0x79, _, 0x49 -> Ok(Item(tag, "", [UnsignedShort], vm_3))
        0x70, 0x79, _, 0x54 -> Ok(Item(tag, "", [UnsignedShort], vm_5))
        0x70, 0x79, _, 0x4f -> Ok(Item(tag, "", [ShortString], vm_3))
        0x70, 0x79, _, 0x62 -> Ok(Item(tag, "", [UnsignedShort], vm_4))
        0x70, 0x79, _, 0x5c -> Ok(Item(tag, "", [UnsignedShort], vm_2_to_n))
        0x70, 0x79, _, 0x10 -> Ok(Item(tag, "", [LongString], vm_1))
        0x70, 0x79, _, 0x73 -> Ok(Item(tag, "", [SignedLong], vm_4))
        0x70, 0x79, _, 0x46 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x70, 0x79, _, 0x55 ->
          Ok(Item(tag, "", [UnsignedLong], ValueMultiplicity(47, None)))
        0x70, 0x79, _, 0x37 -> Ok(Item(tag, "", [UnsignedShort], vm_4))
        0x70, 0x79, _, 0x3d -> Ok(Item(tag, "", [SignedShort], vm_2))
        0x70, 0x79, _, 0x4c -> Ok(Item(tag, "", [OtherByteString], vm_1))
        0x70, 0x79, _, 0x30 -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x70, 0x79, _, 0x70 -> Ok(Item(tag, "", [DecimalString], vm_1))
        0x70, 0x79, _, 0x47 ->
          Ok(Item(tag, "", [SignedShort], ValueMultiplicity(18, Some(18))))
        0x70, 0x79, _, 0x25 -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x79 -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x70, 0x79, _, 0x65 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x82 -> Ok(Item(tag, "", [SignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x52 -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x70, 0x79, _, 0x22 -> Ok(Item(tag, "", [IntegerString], vm_2))
        0x70, 0x79, _, 0x56 -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x70, 0x79, _, 0x35 -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x3a -> Ok(Item(tag, "", [UnsignedShort], vm_2))
        0x70, 0x79, _, 0x81 -> Ok(Item(tag, "", [SignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x72 -> Ok(Item(tag, "", [DecimalString], vm_1_to_n))
        0x70, 0x79, _, 0x63 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x21 -> Ok(Item(tag, "", [ShortString], vm_5))
        0x70, 0x79, _, 0x4e ->
          Ok(Item(tag, "", [SignedLong], ValueMultiplicity(35, Some(35))))
        0x70, 0x79, _, 0x3c -> Ok(Item(tag, "", [DecimalString], vm_2))
        0x70, 0x79, _, 0x26 -> Ok(Item(tag, "", [DecimalString], vm_2))
        0x70, 0x79, _, 0x44 -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x70, 0x79, _, 0x34 -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x40 -> Ok(Item(tag, "", [ShortString], vm_2))
        0x70, 0x79, _, 0x6e -> Ok(Item(tag, "", [LongString], vm_1))
        0x70, 0x79, _, 0x4b -> Ok(Item(tag, "", [LongString], vm_3))
        0x70, 0x79, _, 0x69 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x6b -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x39 -> Ok(Item(tag, "", [SignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x24 -> Ok(Item(tag, "", [DecimalString], vm_1))
        0x70, 0x79, _, 0x78 -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x70, 0x79, _, 0x36 -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x57 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x6f -> Ok(Item(tag, "", [DecimalString], vm_1))
        0x70, 0x79, _, 0x66 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x23 -> Ok(Item(tag, "", [IntegerString], vm_2))
        0x70, 0x79, _, 0x50 -> Ok(Item(tag, "", [UnsignedShort], vm_1_to_n))
        0x70, 0x79, _, 0x4d -> Ok(Item(tag, "", [LongString], vm_3))
        0x70, 0x79, _, 0x4a -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x70, 0x79, _, 0x75 -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x53 -> Ok(Item(tag, "", [ShortString], vm_1))
        0x70, 0x79, _, 0x5e -> Ok(Item(tag, "", [UnsignedShort], vm_2))
        0x70, 0x79, _, 0x71 -> Ok(Item(tag, "", [DecimalString], vm_1_to_n))
        0x70, 0x79, _, 0x77 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x70, 0x79, _, 0x29 ->
          Ok(Item(tag, "", [UnsignedShort], ValueMultiplicity(10, Some(10))))
        _, _, _, _ -> Error(Nil)
      }
    "http://www.gemedicalsystems.com/it_solutions/orthoview/2.1" ->
      case g0, g1, e0, e1 {
        0x31, 0x17, _, 0x10 ->
          Ok(Item(tag, "OrthoView Session Date/Time", [DateTime], vm_1))
        0x31, 0x17, _, 0x20 ->
          Ok(Item(tag, "OrthoView Session Creator", [PersonName], vm_1))
        0x31, 0x17, _, 0x30 ->
          Ok(Item(tag, "OrthoView Session Completion Flag", [CodeString], vm_1))
        0x31, 0x17, _, 0x40 ->
          Ok(Item(tag, "OrthoView File Sequence", [Sequence], vm_1))
        0x31, 0x17, _, 0x50 ->
          Ok(Item(tag, "OrthoView File Name", [ShortText], vm_1))
        0x31, 0x17, _, 0x60 ->
          Ok(Item(tag, "OrthoView File Content", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AMI StudyExtensions_01" ->
      case g0, g1, e0, e1 {
        0x31, 0x11, _, 0x01 ->
          Ok(Item(
            tag,
            "AMI Last Released Annot Label (RET)",
            [UnsignedLong],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "ISG shadow" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x70 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x80 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x90 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED DISPLAY" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x04 ->
          Ok(Item(tag, "Photometric Interpretation", [CodeString], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Rows", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x11 -> Ok(Item(tag, "Columns", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x20 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x21 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x50 -> Ok(Item(tag, "Origin", [UnsignedShort], vm_2))
        0x00, 0x29, _, 0x80 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x99 -> Ok(Item(tag, "Shutter Type", [LongString], vm_1))
        0x00, 0x29, _, 0xa0 ->
          Ok(Item(tag, "Rows of Rectangular Shutter", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xa1 ->
          Ok(Item(tag, "Columns of Rectangular Shutter", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xa2 ->
          Ok(Item(tag, "Origin of Rectangular Shutter", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xb0 ->
          Ok(Item(tag, "Radius of Circular Shutter", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xb2 ->
          Ok(Item(tag, "Origin of Circular Shutter", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xc1 ->
          Ok(Item(tag, "Contour of Irregular Shutter", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P Release 1;2" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x00 ->
          Ok(Item(tag, "Subtraction Mask ID", [LongText], vm_1))
        0x00, 0x29, _, 0x04 ->
          Ok(Item(tag, "Masking Function", [Unknown], vm_1))
        0x00, 0x29, _, 0x0c ->
          Ok(Item(tag, "Proprietary Masking Parameters", [Unknown], vm_1))
        0x00, 0x29, _, 0x1e ->
          Ok(Item(tag, "Subtraction Mask Enable Status", [CodeString], vm_1))
        0x00, 0x29, _, 0x1f ->
          Ok(Item(tag, "Subtraction Mask Select Status", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SCHICK TECHNOLOGIES - Change List Creator ID" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Reference Image Instance UID", [UniqueIdentifier], vm_1))
        0x00, 0x21, _, 0x02 -> Ok(Item(tag, "Sequence", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS PI VALID PIXEL MAP" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x92 ->
          Ok(Item(tag, "Valid Pixel Map Flag", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Applicare/Workflow/Version 1.0" ->
      case g0, g1, e0, e1 {
        0x31, 0x13, _, 0x01 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x13, _, 0x10 -> Ok(Item(tag, "<internal", [ShortString], vm_1))
        0x31, 0x13, _, 0x11 -> Ok(Item(tag, "<internal", [ShortString], vm_1))
        0x31, 0x13, _, 0x12 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x31, 0x13, _, 0x15 -> Ok(Item(tag, "<internal", [ShortString], vm_1))
        0x31, 0x13, _, 0x16 -> Ok(Item(tag, "<internal", [ShortString], vm_1))
        0x31, 0x13, _, 0x17 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x31, 0x13, _, 0x20 -> Ok(Item(tag, "<internal", [ShortString], vm_1))
        0x31, 0x13, _, 0x21 -> Ok(Item(tag, "<internal", [ShortString], vm_1))
        0x31, 0x13, _, 0x22 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x31, 0x13, _, 0x25 -> Ok(Item(tag, "<internal", [ShortString], vm_1))
        0x31, 0x13, _, 0x26 -> Ok(Item(tag, "<internal", [ShortString], vm_1))
        0x31, 0x13, _, 0x27 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x31, 0x13, _, 0x30 ->
          Ok(Item(tag, "<internal", [UniqueIdentifier], vm_1))
        0x31, 0x13, _, 0x31 ->
          Ok(Item(tag, "<internal", [UniqueIdentifier], vm_1))
        0x31, 0x13, _, 0xe0 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x13, _, 0xe1 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x13, _, 0xe2 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "VEPRO DICOM RECEIVE DATA 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x59, _, 0x40 -> Ok(Item(tag, "Receive date", [Date], vm_1))
        0x00, 0x59, _, 0x41 -> Ok(Item(tag, "Receive time", [Time], vm_1))
        0x00, 0x59, _, 0x42 -> Ok(Item(tag, "Receive node", [ShortText], vm_1))
        0x00, 0x59, _, 0x43 ->
          Ok(Item(tag, "Receive application", [ShortText], vm_1))
        0x00, 0x59, _, 0x50 ->
          Ok(Item(tag, "Receive local computer", [ShortText], vm_1))
        0x00, 0x59, _, 0x51 ->
          Ok(Item(tag, "Receive local ae title", [ShortText], vm_1))
        0x00, 0x59, _, 0x60 ->
          Ok(Item(tag, "Receive remote computer", [ShortText], vm_1))
        0x00, 0x59, _, 0x61 ->
          Ok(Item(tag, "Receive remote ae title", [ShortText], vm_1))
        0x00, 0x59, _, 0x70 ->
          Ok(Item(
            tag,
            "Receive original transfer syntax",
            [UniqueIdentifier],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "GE_GROUP" ->
      case g0, g1, e0, e1 {
        0x60, 0x05, _, 0x10 -> Ok(Item(tag, "Unknown", [UnlimitedText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_ACRQA_2.0 BLOCK1" ->
      case g0, g1, e0, e1 {
        0x00, 0x23, _, 0x00 ->
          Ok(Item(tag, "CR Exposure Menu Code", [LongString], vm_1))
        0x00, 0x23, _, 0x10 ->
          Ok(Item(tag, "CR Exposure Menu String", [LongString], vm_1))
        0x00, 0x23, _, 0x20 -> Ok(Item(tag, "CR EDR Mode", [LongString], vm_1))
        0x00, 0x23, _, 0x30 -> Ok(Item(tag, "CR Latitude", [LongString], vm_1))
        0x00, 0x23, _, 0x40 ->
          Ok(Item(tag, "CR Group Number", [LongString], vm_1))
        0x00, 0x23, _, 0x50 ->
          Ok(Item(tag, "CR Image Serial Number", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x60 ->
          Ok(Item(tag, "CR Bar Code Number", [LongString], vm_1))
        0x00, 0x23, _, 0x70 ->
          Ok(Item(tag, "CR Film Output Exposure", [LongString], vm_1))
        0x00, 0x23, _, 0x80 ->
          Ok(Item(tag, "CR Film Format", [LongString], vm_1))
        0x00, 0x23, _, 0x90 ->
          Ok(Item(tag, "CR S Shift String", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 041" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x1e -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_PATI_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x11, 0x10, _ ->
          Ok(Item(tag, "Private Element Creator", [LongString], vm_1))
        0x00, 0x11, _, 0x10 ->
          Ok(Item(tag, "Patient Status", [SignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Silhouette VRS 3.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x13 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x14 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x17 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_2))
        0x00, 0x29, _, 0x18 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_2))
        0x00, 0x29, _, 0x19 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x1a ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x1b -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x1c -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x1d -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_3))
        0x00, 0x29, _, 0x1e -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_3))
        0x00, 0x29, _, 0x27 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x28 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x30 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x32 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x34 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x35 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x29, _, 0x36 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SCHICK TECHNOLOGIES - Image Security Creator ID" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Image Checksum", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_YMHD_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x33, _, 0x05 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x33, _, 0x06 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "IDEXX" ->
      case g0, g1, e0, e1 {
        0x00, 0x11, _, 0x00 -> Ok(Item(tag, "Breed Name", [LongString], vm_1))
        0x00, 0x11, _, 0x01 -> Ok(Item(tag, "Species Name", [LongString], vm_1))
        0x00, 0x11, _, 0x02 -> Ok(Item(tag, "Owner", [PersonName], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Applicare/RadStore/Version 1.0" ->
      case g0, g1, e0, e1 {
        0x31, 0x13, _, 0x21 -> Ok(Item(tag, "Version", [SignedLong], vm_1))
        0x31, 0x13, _, 0x36 ->
          Ok(Item(tag, "ImageMediumLabel", [LongString], vm_1))
        0x31, 0x13, _, 0x04 -> Ok(Item(tag, "Id3", [SignedLong], vm_1))
        0x31, 0x13, _, 0x14 ->
          Ok(Item(tag, "DateLastAccessed", [DateTime], vm_1))
        0x31, 0x13, _, 0x69 ->
          Ok(Item(tag, "DeletedTags", [AttributeTag], vm_1))
        0x31, 0x13, _, 0x37 ->
          Ok(Item(tag, "ImageMediumState", [CodeString], vm_1))
        0x31, 0x13, _, 0x3a ->
          Ok(Item(tag, "SeriesMediumState", [CodeString], vm_1))
        0x31, 0x13, _, 0x15 -> Ok(Item(tag, "OBSOLETE", [CodeString], vm_1))
        0x31, 0x13, _, 0x22 -> Ok(Item(tag, "OBSOLETE", [SignedLong], vm_1))
        0x31, 0x13, _, 0x57 ->
          Ok(Item(tag, "StudyStateText", [CodeString], vm_1))
        0x31, 0x13, _, 0x16 ->
          Ok(Item(tag, "ByteSize", [FloatingPointDouble], vm_1))
        0x31, 0x13, _, 0x02 -> Ok(Item(tag, "Id1", [SignedLong], vm_1))
        0x31, 0x13, _, 0x53 -> Ok(Item(tag, "SeriesState", [CodeString], vm_1))
        0x31, 0x13, _, 0x55 ->
          Ok(Item(tag, "ImageStateText", [CodeString], vm_1))
        0x31, 0x13, _, 0x56 ->
          Ok(Item(tag, "SeriesStateText", [CodeString], vm_1))
        0x31, 0x13, _, 0x1e -> Ok(Item(tag, "Origin", [LongString], vm_1))
        0x31, 0x13, _, 0x31 -> Ok(Item(tag, "OBSOLETE", [IntegerString], vm_1))
        0x31, 0x13, _, 0x60 -> Ok(Item(tag, "Expiration", [DateTime], vm_1))
        0x31, 0x13, _, 0x18 -> Ok(Item(tag, "Pathnames", [LongString], vm_1))
        0x31, 0x13, _, 0x1d -> Ok(Item(tag, "ArchiveId", [LongString], vm_1))
        0x31, 0x13, _, 0x3d ->
          Ok(Item(tag, "StudyMediumState", [CodeString], vm_1))
        0x31, 0x13, _, 0x38 ->
          Ok(Item(tag, "SeriesMediumLocation", [LongString], vm_1))
        0x31, 0x13, _, 0x17 -> Ok(Item(tag, "LibraryId", [LongString], vm_1))
        0x31, 0x13, _, 0x13 ->
          Ok(Item(tag, "DateLastModified", [DateTime], vm_1))
        0x31, 0x13, _, 0x32 -> Ok(Item(tag, "OBSOLETE", [IntegerString], vm_1))
        0x31, 0x13, _, 0x1b -> Ok(Item(tag, "Destination", [LongString], vm_1))
        0x31, 0x13, _, 0x01 -> Ok(Item(tag, "OBSOLETE", [SignedLong], vm_1))
        0x31, 0x13, _, 0x33 -> Ok(Item(tag, "OBSOLETE", [IntegerString], vm_1))
        0x31, 0x13, _, 0x23 ->
          Ok(Item(tag, "InstanceFileLocation", [ShortText], vm_1))
        0x31, 0x13, _, 0x1a -> Ok(Item(tag, "Source", [LongString], vm_1))
        0x31, 0x13, _, 0x3c ->
          Ok(Item(tag, "StudyMediumLabel", [LongString], vm_1))
        0x31, 0x13, _, 0x3b ->
          Ok(Item(tag, "StudyMediumLocation", [LongString], vm_1))
        0x31, 0x13, _, 0x52 -> Ok(Item(tag, "StudyState", [CodeString], vm_1))
        0x31, 0x13, _, 0x1c -> Ok(Item(tag, "MediumId", [SignedLong], vm_1))
        0x31, 0x13, _, 0x39 ->
          Ok(Item(tag, "SeriesMediumLabel", [LongString], vm_1))
        0x31, 0x13, _, 0x03 -> Ok(Item(tag, "Id2", [SignedLong], vm_1))
        0x31, 0x13, _, 0x19 -> Ok(Item(tag, "DriverPath", [LongString], vm_1))
        0x31, 0x13, _, 0x35 ->
          Ok(Item(tag, "ImageMediumLocation", [LongString], vm_1))
        0x31, 0x13, _, 0x12 -> Ok(Item(tag, "State", [CodeString], vm_1))
        0x31, 0x13, _, 0x11 -> Ok(Item(tag, "OBSOLETE", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips EnVisor" ->
      case g0, g1, e0, e1 {
        0x77, 0x77, _, 0x01 ->
          Ok(Item(
            tag,
            "Date 3D/PanView internal 'dataset' file was acquired",
            [Date],
            vm_1,
          ))
        0x77, 0x77, _, 0x02 ->
          Ok(Item(tag, "Type of 3D or PanView", [CodeString], vm_1))
        0x77, 0x77, _, 0x03 ->
          Ok(Item(
            tag,
            "Internal 3D/PanView software version number",
            [LongString],
            vm_1,
          ))
        0x77, 0x77, _, 0x14 -> Ok(Item(tag, "Private string", [LongText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CBT PATIENT_ORIENTATION" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x93 ->
          Ok(Item(tag, "Patient Orientation", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_AWSoft_SB1" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x50 ->
          Ok(Item(tag, "Reference to Study UID", [UniqueIdentifier], vm_1))
        0x00, 0x39, _, 0x51 ->
          Ok(Item(tag, "Reference to Series UID", [UniqueIdentifier], vm_1))
        0x00, 0x39, _, 0x52 ->
          Ok(Item(
            tag,
            "Reference to Original Instance Number",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x39, _, 0x95 ->
          Ok(Item(tag, "Private Entity Launch Command", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-GV-CT Release 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x21, _, 0xa1 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x80 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0xa3 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x60 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x21, _, 0x30 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x21, _, 0x90 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x80 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0xb1 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x21, _, 0x50 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x90 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x33 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0xb0 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x65 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x75 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0xa0 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x21, _, 0x60 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x32 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0x00 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x08 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x21, _, 0xa4 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x21, _, 0x20 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0xd1 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x21, _, 0xa3 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x29, _, 0x30 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x70 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb0 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0xd0 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x64 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x10 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x50 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x40 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x21, _, 0xa0 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x0a -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x90 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x50 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x09 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x30 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x90 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0xa2 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0xa2 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x61 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x80 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x21, _, 0xc0 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x70 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x70 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x09, _, 0x80 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x20 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0xa1 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x20 -> Ok(Item(tag, "Unknown", [Time], vm_1))
        0x00, 0x21, _, 0x40 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x60 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x81 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x63 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x31 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS COMMON EDGE" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x83 ->
          Ok(Item(tag, "Common Edge", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 038" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "MeVis eD: Slice Information" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 ->
          Ok(Item(tag, "SlicesSOPInstanceUID", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS FIELD NAME" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x79 -> Ok(Item(tag, "Field Name", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_AWSOFT_CD1" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x65 ->
          Ok(Item(tag, "Reference to Study UID", [UniqueIdentifier], vm_1))
        0x00, 0x39, _, 0x70 ->
          Ok(Item(tag, "Reference to Series UID", [UniqueIdentifier], vm_1))
        0x00, 0x39, _, 0x75 ->
          Ok(Item(tag, "Reference to Original Instance", [IntegerString], vm_1))
        0x00, 0x39, _, 0x80 ->
          Ok(Item(tag, "DPO Number", [IntegerString], vm_1))
        0x00, 0x39, _, 0x85 -> Ok(Item(tag, "DPO Date", [Date], vm_1))
        0x00, 0x39, _, 0x90 -> Ok(Item(tag, "DPO Time", [Time], vm_1))
        0x00, 0x39, _, 0x95 ->
          Ok(Item(tag, "DPO Invocation String", [LongString], vm_1))
        0x00, 0x39, _, 0xaa -> Ok(Item(tag, "DPO type", [CodeString], vm_1))
        0x00, 0x39, _, 0xff ->
          Ok(Item(tag, "DPO data", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_ACRQA_2.0 BLOCK2" ->
      case g0, g1, e0, e1 {
        0x00, 0x23, _, 0x00 ->
          Ok(Item(tag, "CR S Shift", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x10 -> Ok(Item(tag, "CR C Shift", [LongString], vm_1))
        0x00, 0x23, _, 0x20 -> Ok(Item(tag, "CR GT", [LongString], vm_1))
        0x00, 0x23, _, 0x30 -> Ok(Item(tag, "CR GA", [DecimalString], vm_1))
        0x00, 0x23, _, 0x40 -> Ok(Item(tag, "CR GC", [DecimalString], vm_1))
        0x00, 0x23, _, 0x50 -> Ok(Item(tag, "CR GS", [DecimalString], vm_1))
        0x00, 0x23, _, 0x60 -> Ok(Item(tag, "CR RT", [LongString], vm_1))
        0x00, 0x23, _, 0x70 -> Ok(Item(tag, "CR RE", [DecimalString], vm_1))
        0x00, 0x23, _, 0x80 -> Ok(Item(tag, "CR RN", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x90 -> Ok(Item(tag, "CR DRT", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "ACUSON: 1.2.840.11386.1.0" ->
      case g0, g1, e0, e1 {
        0x7f, 0xdf, _, 0x00 ->
          Ok(Item(tag, "Lossy Compression Ratio", [IntegerString], vm_1))
        0x7f, 0xdf, _, 0x01 ->
          Ok(Item(tag, "Image Format", [UnsignedShort], vm_1))
        0x7f, 0xdf, _, 0x02 ->
          Ok(Item(tag, "Acuson Region Type", [UnsignedShort], vm_1))
        0x7f, 0xdf, _, 0x0b ->
          Ok(Item(tag, "Acuson Image Apex X", [UnsignedLong], vm_1))
        0x7f, 0xdf, _, 0x0c ->
          Ok(Item(tag, "Acuson Image Apex Y", [UnsignedLong], vm_1))
        0x7f, 0xdf, _, 0x0d ->
          Ok(Item(tag, "B-Color-On Flag", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "KRETZ_US" ->
      case g0, g1, e0, e1 {
        0x7f, 0xe1, _, 0x01 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "1.2.840.113663.1" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x00 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x01 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips EV Imaging DD 021" ->
      case g0, g1, e0, e1 {
        0x20, 0x07, _, 0x04 ->
          Ok(Item(tag, "Vol Seg Edit Connectivity", [SignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Picker MR Private Group" ->
      case g0, g1, e0, e1 {
        0x71, 0x01, _, 0x00 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x71, 0x01, _, 0x01 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x71, 0x01, _, 0x02 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x71, 0x01, _, 0x03 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x71, 0x01, _, 0x04 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x71, 0x01, _, 0x05 -> Ok(Item(tag, "Unknown", [ShortString], vm_2))
        0x71, 0x01, _, 0x06 -> Ok(Item(tag, "Unknown", [ShortString], vm_4))
        0x71, 0x01, _, 0x10 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CM VA0  CMS" ->
      case g0, g1, e0, e1 {
        0x60, 0x21, _, 0x00 ->
          Ok(Item(tag, "Image Graphics Format Code", [CodeString], vm_1))
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Storage Mode", [CodeString], vm_1))
        0x00, 0x21, _, 0x61 ->
          Ok(Item(tag, "Image Normal", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x63 ->
          Ok(Item(tag, "Image Distance", [DecimalString], vm_1))
        0x00, 0x21, _, 0x65 ->
          Ok(Item(tag, "Image Positioning History Mask", [UnsignedShort], vm_1))
        0x00, 0x13, _, 0x53 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x80 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x60 -> Ok(Item(tag, "Splash", [IntegerString], vm_1))
        0x00, 0x21, _, 0x30 ->
          Ok(Item(tag, "View Direction", [CodeString], vm_1))
        0x00, 0x13, _, 0x50 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "Pixel Quality Code", [CodeString], vm_1_to_n))
        0x00, 0x29, _, 0x50 -> Ok(Item(tag, "Archive Code", [CodeString], vm_1))
        0x00, 0x11, _, 0x23 ->
          Ok(Item(tag, "Used Patient Weight", [DecimalString], vm_1))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "Calculation Mode", [CodeString], vm_1))
        0x00, 0x29, _, 0x13 -> Ok(Item(tag, "Window Scale", [CodeString], vm_1))
        0x00, 0x29, _, 0x52 -> Ok(Item(tag, "Sort Code", [IntegerString], vm_1))
        0x00, 0x11, _, 0x0a -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x21, _, 0x6b ->
          Ok(Item(tag, "Image Column", [DecimalString], vm_1_to_n))
        0x00, 0x29, _, 0x12 ->
          Ok(Item(tag, "Window Table Index", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x71 ->
          Ok(Item(tag, "Patient Orientation Set 2", [CodeString], vm_1_to_n))
        0x00, 0x21, _, 0x32 ->
          Ok(Item(tag, "Rest Direction", [CodeString], vm_1))
        0x00, 0x21, _, 0x60 ->
          Ok(Item(tag, "Image Position", [DecimalString], vm_1_to_n))
        0x00, 0x09, _, 0x00 ->
          Ok(Item(tag, "Number of Measurements", [IntegerString], vm_1))
        0x00, 0x11, _, 0x10 -> Ok(Item(tag, "Registration Date", [Date], vm_1))
        0x00, 0x13, _, 0x33 ->
          Ok(Item(tag, "Referring Physician", [PersonName], vm_1))
        0x00, 0x13, _, 0x40 ->
          Ok(Item(tag, "Procedure Description", [LongString], vm_1))
        0x00, 0x21, _, 0x20 ->
          Ok(Item(tag, "Field of View", [DecimalString], vm_1_to_n))
        0x00, 0x13, _, 0x34 ->
          Ok(Item(tag, "Admitting Diagnosis", [LongString], vm_1))
        0x00, 0x09, _, 0x27 -> Ok(Item(tag, "Table Zero Time", [Time], vm_1))
        0x00, 0x13, _, 0x32 ->
          Ok(Item(tag, "Patient Maiden Name", [PersonName], vm_1))
        0x00, 0x13, _, 0x42 ->
          Ok(Item(tag, "Rest Direction", [CodeString], vm_1))
        0x00, 0x13, _, 0x20 -> Ok(Item(tag, "Patient Name", [PersonName], vm_1))
        0x00, 0x11, _, 0x22 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x21, _, 0x22 ->
          Ok(Item(tag, "Image Magnification Factor", [DecimalString], vm_1))
        0x60, 0x21, _, 0x10 ->
          Ok(Item(tag, "Image Graphics", [OtherByteString], vm_1))
        0x00, 0x21, _, 0x70 ->
          Ok(Item(tag, "Patient Orientation Set 1", [CodeString], vm_1_to_n))
        0x00, 0x13, _, 0x30 -> Ok(Item(tag, "Patient Birthdate", [Date], vm_1))
        0x00, 0x13, _, 0x51 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Net Frequency", [IntegerString], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Window Style", [CodeString], vm_1))
        0x00, 0x13, _, 0x55 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x13, _, 0x56 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x13, _, 0x31 ->
          Ok(Item(tag, "Patient Weight", [DecimalString], vm_1))
        0x00, 0x21, _, 0x24 ->
          Ok(Item(tag, "Image Scroll Offset", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x6a ->
          Ok(Item(tag, "Image Row", [DecimalString], vm_1_to_n))
        0x00, 0x29, _, 0x53 ->
          Ok(Item(tag, "Remote Copy Code", [CodeString], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "Noise Level", [IntegerString], vm_1))
        0x00, 0x09, _, 0x26 -> Ok(Item(tag, "Table Zero Date", [Date], vm_1))
        0x00, 0x13, _, 0x12 -> Ok(Item(tag, "Modification Time", [Time], vm_1))
        0x00, 0x21, _, 0x26 ->
          Ok(Item(tag, "Image Pixel Offset", [IntegerString], vm_1))
        0x00, 0x29, _, 0x22 ->
          Ok(Item(tag, "Pixel Quality Value", [IntegerString], vm_1_to_n))
        0x00, 0x13, _, 0x52 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x11 -> Ok(Item(tag, "Window Look", [CodeString], vm_1))
        0x00, 0x09, _, 0x12 ->
          Ok(Item(tag, "Evaluation Mask Image", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x80 -> Ok(Item(tag, "Study Name", [LongString], vm_1))
        0x00, 0x13, _, 0x00 ->
          Ok(Item(tag, "Modifying Physician", [PersonName], vm_1))
        0x00, 0x13, _, 0x46 ->
          Ok(Item(tag, "View Direction", [ShortString], vm_1))
        0x00, 0x29, _, 0x51 ->
          Ok(Item(tag, "Exposure Code", [CodeString], vm_1))
        0x00, 0x13, _, 0x22 -> Ok(Item(tag, "Patient Id", [LongString], vm_1))
        0x00, 0x13, _, 0x44 ->
          Ok(Item(tag, "Patient Position", [CodeString], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x13, _, 0x35 -> Ok(Item(tag, "Patient Sex", [CodeString], vm_1))
        0x00, 0x13, _, 0x10 -> Ok(Item(tag, "Modification Date", [Date], vm_1))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(tag, "Measurement Mode", [CodeString], vm_1))
        0x00, 0x13, _, 0x54 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x7f, 0xe1, _, 0x00 ->
          Ok(Item(tag, "Binary Data", [OtherByteString], vm_1_to_n))
        0x00, 0x21, _, 0x82 -> Ok(Item(tag, "Study Type", [ShortString], vm_1))
        0x00, 0x11, _, 0x11 -> Ok(Item(tag, "Registration Time", [Time], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Number of Data Bytes", [IntegerString], vm_1))
        0x00, 0x11, _, 0x40 ->
          Ok(Item(tag, "Organ Code", [IntegerString], vm_1))
        0x00, 0x51, _, 0x10 ->
          Ok(Item(tag, "Image Text", [LongString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "ALOKA:1.2.392.200039.103.2" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x09, _, 0x04 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x09, _, 0x06 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x09, _, 0x0a -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x09, _, 0x20 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x09, _, 0x22 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x09, _, 0x24 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x09, _, 0x26 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x28 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x2a -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x09, _, 0x30 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x09, _, 0x32 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x09, _, 0x34 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x08 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x19, _, 0x0c -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x0e -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x18 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x19, _, 0x1a -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x19, _, 0x40 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0x19, _, 0x46 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x50 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x19, _, 0x52 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x54 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x56 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips EV Imaging DD 017" ->
      case g0, g1, e0, e1 {
        0x20, 0x07, _, 0xc1 ->
          Ok(Item(tag, "? SOP Instance UID ?", [UniqueIdentifier], vm_1))
        0x20, 0x07, _, 0xc2 -> Ok(Item(tag, "Unknown", [Date], vm_1))
        0x20, 0x07, _, 0xc3 -> Ok(Item(tag, "Unknown", [Time], vm_1))
        0x20, 0x07, _, 0xc4 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Mitra Presentation 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x00 ->
          Ok(Item(tag, "Mitra Rotation", [CodeString], vm_1))
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Mitra Window Width", [LongString], vm_1))
        0x00, 0x29, _, 0x02 ->
          Ok(Item(tag, "Mitra Window Centre", [LongString], vm_1))
        0x00, 0x29, _, 0x03 ->
          Ok(Item(tag, "Mitra Invert", [IntegerString], vm_1))
        0x00, 0x29, _, 0x04 ->
          Ok(Item(tag, "Mitra Has Tabstop", [IntegerString], vm_1))
        0x00, 0x29, _, 0x05 ->
          Ok(Item(tag, "Smooth Rotation", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_PETD_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x1c ->
          Ok(Item(tag, "PET sel_stop_cond", [SignedLong], vm_1))
        0x00, 0x09, _, 0xeb ->
          Ok(Item(tag, "3D Filter cutoff", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x65 ->
          Ok(Item(tag, "PET patient_entry", [SignedLong], vm_1))
        0x50, 0x03, _, 0x1d ->
          Ok(Item(
            tag,
            "GE Advance Graph.y_axis_min",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x9c ->
          Ok(Item(tag, "PET emiss_sub_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x48 ->
          Ok(Item(tag, "PET source2_meas_dt", [DateTime], vm_1))
        0x00, 0x09, _, 0x10 ->
          Ok(Item(tag, "PET hospital_name", [LongString], vm_1))
        0x00, 0x09, _, 0x6e ->
          Ok(Item(tag, "PET acq_bin_dur", [SignedLong], vm_1))
        0x50, 0x03, _, 0x02 ->
          Ok(Item(tag, "GE Advance Graph.graph_id", [UniqueIdentifier], vm_1))
        0x50, 0x03, _, 0x04 ->
          Ok(Item(tag, "GE Advance Graph.software_version", [ShortString], vm_1))
        0x00, 0x09, _, 0xde ->
          Ok(Item(tag, "PET num_of_time_slots", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x2a ->
          Ok(Item(tag, "PET collimation", [SignedLong], vm_1))
        0x00, 0x09, _, 0x58 ->
          Ok(Item(tag, "PET blank_cal_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x07 ->
          Ok(Item(tag, "PET exam_id", [UniqueIdentifier], vm_1))
        0x50, 0x03, _, 0x16 ->
          Ok(Item(tag, "GE Advance Graph.x_axis_units", [SignedLong], vm_1))
        0x00, 0x09, _, 0x44 ->
          Ok(Item(tag, "PET source1_radnuclide", [ShortString], vm_1))
        0x00, 0x09, _, 0x7f ->
          Ok(Item(tag, "PET is_reference", [DecimalString], vm_3))
        0x00, 0x09, _, 0x98 ->
          Ok(Item(tag, "PET norm_cal_id", [UniqueIdentifier], vm_1))
        0x50, 0x01, _, 0x07 ->
          Ok(Item(tag, "GE Advance Curve.multi_patient", [SignedLong], vm_1))
        0x00, 0x09, _, 0xc2 ->
          Ok(Item(tag, "PET ac_img_smooth_parm", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x6b ->
          Ok(Item(tag, "PET acq_delay", [SignedLong], vm_1))
        0x00, 0x09, _, 0x4b ->
          Ok(Item(tag, "PET source_speed", [SignedLong], vm_1))
        0x50, 0x05, _, 0x05 ->
          Ok(Item(
            tag,
            "GE Advance CurvePresentation.compatible_version",
            [ShortString],
            vm_1,
          ))
        0x00, 0x09, _, 0xa2 ->
          Ok(Item(tag, "PET axial_spacing", [FloatingPointSingle], vm_1))
        0x50, 0x03, _, 0x0d ->
          Ok(Item(tag, "GE Advance Graph.background_color", [LongString], vm_1))
        0x00, 0x09, _, 0x5f ->
          Ok(Item(tag, "PET patient_id", [LongString], vm_1))
        0x00, 0x09, _, 0xa1 ->
          Ok(Item(tag, "PET axial_start", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x4d ->
          Ok(Item(tag, "PET emission_present", [SignedLong], vm_1))
        0x00, 0x13, _, 0x13 ->
          Ok(Item(
            tag,
            "GE Advance Annotation.annotation_size",
            [SignedLong],
            vm_1,
          ))
        0x00, 0x09, _, 0xa4 ->
          Ok(Item(tag, "PET compatible_version", [ShortString], vm_1))
        0x00, 0x11, _, 0x0c ->
          Ok(Item(tag, "GE Advance ROI.height", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0xd7 ->
          Ok(Item(tag, "PET image_index_loc", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x60 ->
          Ok(Item(tag, "PET compatible_version", [ShortString], vm_1))
        0x00, 0x09, _, 0x41 ->
          Ok(Item(tag, "PET source1_holder", [SignedLong], vm_1))
        0x00, 0x09, _, 0x6c -> Ok(Item(tag, "PET acq_start", [DateTime], vm_1))
        0x50, 0x03, _, 0x13 ->
          Ok(Item(tag, "GE Advance Graph.label_font_size", [ShortString], vm_1))
        0x00, 0x09, _, 0xb6 ->
          Ok(Item(tag, "PET ir_loop_filter", [SignedLong], vm_1))
        0x00, 0x09, _, 0x11 ->
          Ok(Item(tag, "PET scanner_desc", [LongString], vm_1))
        0x00, 0x09, _, 0x31 ->
          Ok(Item(tag, "PET number_for_reject", [SignedLong], vm_1))
        0x00, 0x19, _, 0x12 ->
          Ok(Item(tag, "PET axial_cutoff_3d", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0xdc ->
          Ok(Item(tag, "PET ir_z_filter_ratio", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0xbe ->
          Ok(Item(tag, "PET ac_bp_filter", [SignedLong], vm_1))
        0x00, 0x09, _, 0x55 ->
          Ok(Item(tag, "PET lower_energy_limit", [SignedLong], vm_1))
        0x00, 0x09, _, 0x5d ->
          Ok(Item(tag, "PET scan_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x82 ->
          Ok(Item(tag, "PET color_map_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x0c ->
          Ok(Item(tag, "PET software_version", [ShortString], vm_1))
        0x00, 0x09, _, 0xd2 ->
          Ok(Item(tag, "PET image_set_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0xec ->
          Ok(Item(tag, "3D Filter order", [SignedLong], vm_1))
        0x00, 0x09, _, 0x2f ->
          Ok(Item(tag, "PET binning_mode", [SignedLong], vm_1))
        0x00, 0x09, _, 0x43 ->
          Ok(Item(tag, "PET source1_meas_dt", [DateTime], vm_1))
        0x00, 0x11, _, 0x01 ->
          Ok(Item(tag, "GE Advance ROI Sequence", [Sequence], vm_1))
        0x00, 0x09, _, 0x87 -> Ok(Item(tag, "PET pan_x", [SignedLong], vm_1))
        0x00, 0x09, _, 0x49 ->
          Ok(Item(tag, "PET source2_radnuclide", [ShortString], vm_1))
        0x00, 0x13, _, 0x11 ->
          Ok(Item(tag, "GE Advance Annotation.end_symbol", [SignedLong], vm_1))
        0x00, 0x09, _, 0xb2 ->
          Ok(Item(tag, "PET ir_num_iterations", [SignedLong], vm_1))
        0x00, 0x09, _, 0xd3 ->
          Ok(Item(tag, "PET constrast_route", [SignedLong], vm_1))
        0x00, 0x09, _, 0xcb ->
          Ok(Item(tag, "PET vqc_x_axis_trans", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x0f ->
          Ok(Item(tag, "PET meas_activity", [FloatingPointSingle], vm_1))
        0x00, 0x11, _, 0x12 ->
          Ok(Item(tag, "GE Advance ROI.line_type", [SignedLong], vm_1))
        0x00, 0x17, _, 0x05 ->
          Ok(Item(tag, "PET cal_description", [LongString], vm_1))
        0x00, 0x09, _, 0x7b ->
          Ok(Item(tag, "PET is_datetime", [DateTime], vm_1))
        0x50, 0x03, _, 0x23 ->
          Ok(Item(tag, "GE Advance Graph.legend_width", [SignedLong], vm_1))
        0x00, 0x11, _, 0x0a ->
          Ok(Item(tag, "GE Advance ROI.center_y", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x97 ->
          Ok(Item(tag, "PET trans_scan_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x8e ->
          Ok(Item(tag, "PET bp_filter", [SignedLong], vm_1))
        0x00, 0x09, _, 0x74 ->
          Ok(Item(tag, "PET validity_info", [SignedLong], vm_1))
        0x50, 0x03, _, 0x12 ->
          Ok(Item(tag, "GE Advance Graph.label_font_name", [LongString], vm_1))
        0x00, 0x17, _, 0x0b ->
          Ok(Item(tag, "PET norm_2d_cal_id", [LongString], vm_1))
        0x00, 0x09, _, 0x76 ->
          Ok(Item(tag, "PET compression", [SignedLong], vm_1))
        0x00, 0x09, _, 0x06 -> Ok(Item(tag, "PET type", [SignedLong], vm_1))
        0x50, 0x05, _, 0x08 ->
          Ok(Item(tag, "GE Advance CurvePresentation.color", [LongString], vm_1))
        0x00, 0x09, _, 0xc3 ->
          Ok(Item(tag, "PET scatter_method", [SignedLong], vm_1))
        0x50, 0x03, _, 0x03 ->
          Ok(Item(
            tag,
            "GE Advance Graph.compatible_version",
            [ShortString],
            vm_1,
          ))
        0x00, 0x23, _, 0x02 ->
          Ok(Item(tag, "PET raw_data_blob", [OtherByteString], vm_1))
        0x50, 0x03, _, 0x0f ->
          Ok(Item(tag, "GE Advance Graph.graph_width", [SignedLong], vm_1))
        0x00, 0x09, _, 0x1d ->
          Ok(Item(tag, "PET sel_stop_cond_data", [SignedLong], vm_1))
        0x00, 0x09, _, 0x99 ->
          Ok(Item(tag, "PET blnk_cal_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x72 ->
          Ok(Item(tag, "PET total_delays", [FloatingPointDouble], vm_1))
        0x50, 0x03, _, 0x25 ->
          Ok(Item(tag, "GE Advance Graph.legend_border", [SignedLong], vm_1))
        0x00, 0x09, _, 0x33 ->
          Ok(Item(tag, "PET upper_reject_limit", [SignedLong], vm_1))
        0x00, 0x09, _, 0x93 ->
          Ok(Item(tag, "PET atten_smooth", [SignedLong], vm_1))
        0x50, 0x03, _, 0x11 ->
          Ok(Item(tag, "GE Advance Graph.grid", [SignedLong], vm_1))
        0x00, 0x09, _, 0xae ->
          Ok(Item(tag, "PET tpluse_frame_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x90 ->
          Ok(Item(tag, "PET bp_filter_order", [SignedLong], vm_1))
        0x00, 0x09, _, 0xb7 ->
          Ok(Item(tag, "PET ir_pre_filt_parm", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0xe5 ->
          Ok(Item(tag, "PET left shift", [FloatingPointSingle], vm_1))
        0x00, 0x13, _, 0x05 ->
          Ok(Item(
            tag,
            "GE Advance Annotation.software_version",
            [ShortString],
            vm_1,
          ))
        0x00, 0x09, _, 0x78 ->
          Ok(Item(tag, "PET accum_bin_dur", [SignedLong], vm_1))
        0x50, 0x03, _, 0x0c ->
          Ok(Item(tag, "GE Advance Graph.foreground_color", [LongString], vm_1))
        0x00, 0x09, _, 0xcc ->
          Ok(Item(tag, "PET vqc_x_axis_tilt", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x67 ->
          Ok(Item(tag, "PET table_z_position", [FloatingPointSingle], vm_1))
        0x50, 0x05, _, 0x02 ->
          Ok(Item(
            tag,
            "GE Advance CurvePresentation.curvepresent_id",
            [UniqueIdentifier],
            vm_1,
          ))
        0x00, 0x09, _, 0xb1 ->
          Ok(Item(tag, "PET profile_spacing", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x14 ->
          Ok(Item(tag, "PET landmark_name", [LongString], vm_1))
        0x00, 0x09, _, 0xac ->
          Ok(Item(tag, "PET bp_center_y", [FloatingPointSingle], vm_1))
        0x00, 0x11, _, 0x16 ->
          Ok(Item(tag, "GE Advance ROI.atten_corr_flag", [SignedLong], vm_1))
        0x00, 0x09, _, 0x2c ->
          Ok(Item(tag, "PET axial_fov", [SignedLong], vm_1))
        0x50, 0x03, _, 0x26 ->
          Ok(Item(tag, "GE Advance Graph.multi_patient", [SignedLong], vm_1))
        0x50, 0x03, _, 0x1a ->
          Ok(Item(tag, "GE Advance Graph.y_axis_label", [LongString], vm_1))
        0x00, 0x09, _, 0xe6 ->
          Ok(Item(tag, "PET posterior shift", [FloatingPointSingle], vm_1))
        0x50, 0x05, _, 0x0d ->
          Ok(Item(
            tag,
            "GE Advance CurvePresentation.point_color",
            [LongString],
            vm_1,
          ))
        0x00, 0x09, _, 0x29 ->
          Ok(Item(tag, "PET gantry_tilt_angle", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x03 ->
          Ok(Item(tag, "PET software_version", [ShortString], vm_1))
        0x00, 0x09, _, 0xcf ->
          Ok(Item(tag, "PET vqc_z_axis_trans", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x05 -> Ok(Item(tag, "PET cal_type", [SignedLong], vm_1))
        0x00, 0x11, _, 0x08 ->
          Ok(Item(tag, "GE Advance ROI.roi_type", [SignedLong], vm_1))
        0x00, 0x09, _, 0x75 -> Ok(Item(tag, "PET archived", [SignedLong], vm_1))
        0x00, 0x09, _, 0x23 ->
          Ok(Item(tag, "PET delayed_bias", [SignedLong], vm_1))
        0x00, 0x09, _, 0x96 ->
          Ok(Item(tag, "PET wellcountercal_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x21 ->
          Ok(Item(tag, "PET countrate_period", [SignedLong], vm_1))
        0x50, 0x03, _, 0x17 ->
          Ok(Item(
            tag,
            "GE Advance Graph.x_major_tics",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x95 ->
          Ok(Item(tag, "PET angle_smooth_param", [SignedLong], vm_1))
        0x00, 0x09, _, 0xe8 ->
          Ok(Item(tag, "PET acq_bin_num", [SignedLong], vm_1))
        0x50, 0x01, _, 0x01 ->
          Ok(Item(tag, "GE Advance Curve.curve_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x91 ->
          Ok(Item(tag, "PET bp_center_l", [FloatingPointSingle], vm_1))
        0x50, 0x03, _, 0x22 ->
          Ok(Item(tag, "GE Advance Graph.legend_location_y", [SignedLong], vm_1))
        0x00, 0x09, _, 0x05 ->
          Ok(Item(tag, "PET patient_datetime", [DateTime], vm_1))
        0x00, 0x09, _, 0xbb ->
          Ok(Item(tag, "PET post_filt_parm", [FloatingPointSingle], vm_1))
        0x50, 0x01, _, 0x06 ->
          Ok(Item(tag, "GE Advance Curve.how_derived_size", [SignedLong], vm_1))
        0x50, 0x03, _, 0x08 ->
          Ok(Item(tag, "GE Advance Graph.title_font_name", [LongString], vm_1))
        0x00, 0x09, _, 0xa9 ->
          Ok(Item(tag, "PET other_atts_size", [SignedLong], vm_1))
        0x00, 0x11, _, 0x06 ->
          Ok(Item(tag, "GE Advance ROI.roi_name", [LongString], vm_1))
        0x50, 0x03, _, 0x07 ->
          Ok(Item(tag, "GE Advance Graph.graph_description", [ShortText], vm_1))
        0x00, 0x19, _, 0x08 ->
          Ok(Item(tag, "PET coefficients", [OtherByteString], vm_1))
        0x00, 0x09, _, 0x9f ->
          Ok(Item(tag, "PET axial_filter_3d", [SignedLong], vm_1))
        0x00, 0x09, _, 0x2b -> Ok(Item(tag, "PET scan_fov", [SignedLong], vm_1))
        0x00, 0x11, _, 0x10 ->
          Ok(Item(tag, "GE Advance ROI.roi_size", [SignedLong], vm_1))
        0x00, 0x09, _, 0x77 ->
          Ok(Item(tag, "PET uncompressed_size", [SignedLong], vm_1))
        0x00, 0x13, _, 0x03 ->
          Ok(Item(
            tag,
            "GE Advance Annotation.image_id",
            [UniqueIdentifier],
            vm_1,
          ))
        0x00, 0x09, _, 0x38 ->
          Ok(Item(tag, "PET tracer_activity", [FloatingPointSingle], vm_1))
        0x00, 0x23, _, 0x01 ->
          Ok(Item(tag, "raw_data_blob", [OtherByteString], vm_1))
        0x00, 0x09, _, 0x54 ->
          Ok(Item(tag, "PET upper_energy_limit", [SignedLong], vm_1))
        0x00, 0x09, _, 0x6a ->
          Ok(Item(tag, "PET start_location", [FloatingPointSingle], vm_1))
        0x00, 0x13, _, 0x02 ->
          Ok(Item(
            tag,
            "GE Advance Annotation.annotation_id",
            [UniqueIdentifier],
            vm_1,
          ))
        0x00, 0x09, _, 0x53 ->
          Ok(Item(tag, "PET coinc_output_mode", [SignedLong], vm_1))
        0x00, 0x09, _, 0x89 ->
          Ok(Item(tag, "PET window_level_min", [FloatingPointSingle], vm_1))
        0x00, 0x17, _, 0x0c ->
          Ok(Item(tag, "PET hosp_identifier", [ShortString], vm_1))
        0x00, 0x17, _, 0x08 ->
          Ok(Item(tag, "PET corr_file_size", [SignedLong], vm_1))
        0x00, 0x09, _, 0xb3 ->
          Ok(Item(tag, "PET ir_num_subsets", [SignedLong], vm_1))
        0x00, 0x09, _, 0x7d ->
          Ok(Item(tag, "PET is_contents", [SignedLong], vm_1))
        0x00, 0x09, _, 0x18 ->
          Ok(Item(tag, "PET scan_type", [SignedLong], vm_1))
        0x00, 0x09, _, 0x1a ->
          Ok(Item(tag, "PET start_condition", [SignedLong], vm_1))
        0x00, 0x09, _, 0x15 ->
          Ok(Item(tag, "PET landmark_abbrev", [ShortString], vm_1))
        0x00, 0x09, _, 0xc8 ->
          Ok(Item(tag, "PET ovlp_frm_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x37 ->
          Ok(Item(tag, "PET batch_description", [LongString], vm_1))
        0x50, 0x03, _, 0x1b ->
          Ok(Item(tag, "GE Advance Graph.y_axis_units", [SignedLong], vm_1))
        0x00, 0x13, _, 0x08 ->
          Ok(Item(tag, "GE Advance Annotation.font_size", [ShortString], vm_1))
        0x00, 0x13, _, 0x0f ->
          Ok(Item(
            tag,
            "GE Advance Annotation.end_y",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0xc5 ->
          Ok(Item(tag, "PET scatter_parm", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x56 ->
          Ok(Item(tag, "PET normal_cal_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x27 ->
          Ok(Item(tag, "PET theta_compression", [SignedLong], vm_1))
        0x50, 0x01, _, 0x04 ->
          Ok(Item(tag, "GE Advance Curve.statistics_type", [SignedLong], vm_1))
        0x00, 0x11, _, 0x15 ->
          Ok(Item(tag, "GE Advance ROI.convex", [SignedLong], vm_1))
        0x00, 0x09, _, 0xe7 ->
          Ok(Item(tag, "PET superior shift", [FloatingPointSingle], vm_1))
        0x00, 0x17, _, 0x09 -> Ok(Item(tag, "PET scan_id", [LongString], vm_1))
        0x00, 0x09, _, 0x64 ->
          Ok(Item(tag, "PET file_exists", [SignedLong], vm_1))
        0x00, 0x13, _, 0x09 ->
          Ok(Item(
            tag,
            "GE Advance Annotation.foreground_color",
            [LongString],
            vm_1,
          ))
        0x00, 0x09, _, 0xcd ->
          Ok(Item(tag, "PET vqc_y_axis_trans", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0xab ->
          Ok(Item(tag, "PET bp_center_x", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x28 ->
          Ok(Item(tag, "PET axial_compression", [SignedLong], vm_1))
        0x00, 0x19, _, 0x0c -> Ok(Item(tag, "PET scan_id", [LongString], vm_1))
        0x00, 0x09, _, 0xd8 ->
          Ok(Item(tag, "PET frame_number", [SignedLong], vm_1))
        0x50, 0x03, _, 0x0a ->
          Ok(Item(tag, "GE Advance Graph.footer", [LongString], vm_1))
        0x00, 0x09, _, 0xaa -> Ok(Item(tag, "PET archived", [SignedLong], vm_1))
        0x00, 0x09, _, 0x32 ->
          Ok(Item(tag, "PET lower_reject_limit", [SignedLong], vm_1))
        0x00, 0x13, _, 0x0e ->
          Ok(Item(
            tag,
            "GE Advance Annotation.end_x",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0x06 ->
          Ok(Item(tag, "PET cal_description", [LongString], vm_1))
        0x00, 0x09, _, 0x42 ->
          Ok(Item(tag, "PET source1_activity", [FloatingPointSingle], vm_1))
        0x00, 0x11, _, 0x0e ->
          Ok(Item(tag, "GE Advance ROI.number_of_points", [SignedLong], vm_1))
        0x00, 0x09, _, 0x8b ->
          Ok(Item(tag, "PET recon_method", [SignedLong], vm_1))
        0x00, 0x11, _, 0x0f ->
          Ok(Item(tag, "GE Advance ROI.roi_data", [OtherByteString], vm_1))
        0x00, 0x11, _, 0x0d ->
          Ok(Item(tag, "GE Advance ROI.angle", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x8a ->
          Ok(Item(tag, "PET window_level_max", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x69 ->
          Ok(Item(tag, "PET slice_count", [SignedLong], vm_1))
        0x00, 0x11, _, 0x04 ->
          Ok(Item(tag, "GE Advance ROI.compatible_version", [ShortString], vm_1))
        0x00, 0x17, _, 0x01 ->
          Ok(Item(tag, "PET correction_cal_id", [UniqueIdentifier], vm_1))
        0x00, 0x11, _, 0x03 ->
          Ok(Item(tag, "GE Advance ROI.image_id", [UniqueIdentifier], vm_1))
        0x50, 0x03, _, 0x19 ->
          Ok(Item(
            tag,
            "GE Advance Graph.x_axis_max",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x19 ->
          Ok(Item(tag, "PET scan_mode", [SignedLong], vm_1))
        0x00, 0x11, _, 0x14 ->
          Ok(Item(tag, "GE Advance ROI.roi_number", [SignedLong], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "PET meas_datetime", [DateTime], vm_1))
        0x00, 0x09, _, 0x50 ->
          Ok(Item(tag, "PET lower_coinc_limit", [SignedLong], vm_1))
        0x00, 0x09, _, 0xdb ->
          Ok(Item(tag, "PET ir_z_filter_flag", [SignedLong], vm_1))
        0x00, 0x09, _, 0x71 ->
          Ok(Item(tag, "PET total_prompts", [FloatingPointDouble], vm_1))
        0x00, 0x09, _, 0x40 ->
          Ok(Item(tag, "PET positron_fraction", [FloatingPointSingle], vm_1))
        0x50, 0x03, _, 0x10 ->
          Ok(Item(tag, "GE Advance Graph.graph_height", [SignedLong], vm_1))
        0x00, 0x09, _, 0xe9 ->
          Ok(Item(tag, "PET acq_bin_dur_percent", [FloatingPointSingle], vm_1))
        0x50, 0x03, _, 0x1e ->
          Ok(Item(
            tag,
            "GE Advance Graph.y_axis_max",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0xea ->
          Ok(Item(tag, "3D Filter flag", [SignedLong], vm_1))
        0x00, 0x09, _, 0xc1 ->
          Ok(Item(tag, "PET ac_img_smooth", [SignedLong], vm_1))
        0x00, 0x13, _, 0x04 ->
          Ok(Item(
            tag,
            "GE Advance Annotation.compatible_version",
            [ShortString],
            vm_1,
          ))
        0x00, 0x17, _, 0x03 ->
          Ok(Item(tag, "PET software_version", [ShortString], vm_1))
        0x00, 0x09, _, 0x03 ->
          Ok(Item(tag, "PET compatible_version", [ShortString], vm_1))
        0x00, 0x09, _, 0x3f ->
          Ok(Item(tag, "PET half_life", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x83 ->
          Ok(Item(tag, "PET window_level_type", [SignedLong], vm_1))
        0x00, 0x09, _, 0xe3 ->
          Ok(Item(tag, "PET phase percentage", [FloatingPointSingle], vm_1))
        0x00, 0x11, _, 0x0b ->
          Ok(Item(tag, "GE Advance ROI.width", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0xe0 ->
          Ok(Item(tag, "PET num_of_time_slices", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x17 ->
          Ok(Item(tag, "PET scan_perspective", [SignedLong], vm_1))
        0x00, 0x09, _, 0xa5 ->
          Ok(Item(tag, "PET software_version", [ShortString], vm_1))
        0x50, 0x01, _, 0x08 ->
          Ok(Item(tag, "GE Advance Curve.deadtime", [SignedLong], vm_1))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "PET axial_filter_3d", [SignedLong], vm_1))
        0x00, 0x09, _, 0x2d ->
          Ok(Item(tag, "PET event_separation", [SignedLong], vm_1))
        0x00, 0x09, _, 0x7a ->
          Ok(Item(tag, "PET software_version", [ShortString], vm_1))
        0x00, 0x09, _, 0x47 ->
          Ok(Item(tag, "PET source2_activity", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0xe2 ->
          Ok(Item(tag, "PET rest_stress", [SignedLong], vm_1))
        0x00, 0x09, _, 0x86 ->
          Ok(Item(tag, "PET zoom", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x02 ->
          Ok(Item(tag, "PET raw_data_size", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0xd5 ->
          Ok(Item(tag, "PET loop_filter_parm", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x01 ->
          Ok(Item(
            tag,
            "GE Discovery PET Implementation Version Name",
            [LongString],
            vm_2,
          ))
        0x00, 0x09, _, 0x52 ->
          Ok(Item(tag, "PET coinc_delay_offset", [SignedLong], vm_1))
        0x00, 0x09, _, 0x51 ->
          Ok(Item(tag, "PET upper_coinc_limit", [SignedLong], vm_1))
        0x00, 0x19, _, 0x0a ->
          Ok(Item(tag, "PET activity_factor_hs", [FloatingPointSingle], vm_1))
        0x00, 0x17, _, 0x02 ->
          Ok(Item(tag, "PET compatible_version", [ShortString], vm_1))
        0x50, 0x05, _, 0x0b ->
          Ok(Item(
            tag,
            "GE Advance CurvePresentation.point_symbol",
            [SignedLong],
            vm_1,
          ))
        0x00, 0x11, _, 0x09 ->
          Ok(Item(tag, "GE Advance ROI.center_x", [FloatingPointSingle], vm_1))
        0x50, 0x03, _, 0x18 ->
          Ok(Item(
            tag,
            "GE Advance Graph.x_axis_min",
            [FloatingPointSingle],
            vm_1,
          ))
        0x50, 0x05, _, 0x07 ->
          Ok(Item(
            tag,
            "GE Advance CurvePresentation.curve_label",
            [LongString],
            vm_1,
          ))
        0x00, 0x17, _, 0x04 ->
          Ok(Item(tag, "PET cal_datetime", [DateTime], vm_1))
        0x00, 0x19, _, 0x0d ->
          Ok(Item(tag, "PET scan_datetime", [DateTime], vm_1))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "PET wc_cal_rec_method", [SignedLong], vm_1))
        0x00, 0x09, _, 0xe1 ->
          Ok(Item(tag, "PET unlisted_scan", [SignedLong], vm_1))
        0x00, 0x09, _, 0xa6 ->
          Ok(Item(tag, "PET slice_number", [SignedLong], vm_1))
        0x50, 0x03, _, 0x14 ->
          Ok(Item(tag, "GE Advance Graph.axes_color", [LongString], vm_1))
        0x00, 0x09, _, 0xce ->
          Ok(Item(tag, "PET vqc_y_axis_swivel", [FloatingPointSingle], vm_1))
        0x50, 0x03, _, 0x1f ->
          Ok(Item(tag, "GE Advance Graph.legend_font_name", [LongString], vm_1))
        0x00, 0x09, _, 0x5b ->
          Ok(Item(tag, "PET contrast_agent", [LongString], vm_1))
        0x00, 0x09, _, 0xd0 ->
          Ok(Item(tag, "PET vqc_z_axis_roll", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x61 ->
          Ok(Item(tag, "PET software_version", [ShortString], vm_1))
        0x00, 0x09, _, 0xa8 ->
          Ok(Item(tag, "PET other_atts", [OtherByteString], vm_1))
        0x00, 0x09, _, 0x24 ->
          Ok(Item(tag, "PET word_size", [SignedLong], vm_1))
        0x50, 0x03, _, 0x05 ->
          Ok(Item(tag, "GE Advance Graph.title", [LongString], vm_1))
        0x00, 0x09, _, 0x45 ->
          Ok(Item(tag, "PET source1_half_life", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x3d ->
          Ok(Item(tag, "PET post_inj_datetime", [DateTime], vm_1))
        0x00, 0x19, _, 0x17 -> Ok(Item(tag, "PET isotope", [SignedLong], vm_1))
        0x00, 0x09, _, 0x8c ->
          Ok(Item(tag, "PET attenuation", [SignedLong], vm_1))
        0x00, 0x09, _, 0x4e ->
          Ok(Item(tag, "PET lower_axial_acc", [SignedLong], vm_1))
        0x00, 0x09, _, 0xf0 ->
          Ok(Item(tag, "Reformat group", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0xda ->
          Ok(Item(tag, "PET where_is_list_frame", [ShortText], vm_1))
        0x50, 0x05, _, 0x03 ->
          Ok(Item(
            tag,
            "GE Advance CurvePresentation.graph_id",
            [UniqueIdentifier],
            vm_1,
          ))
        0x00, 0x09, _, 0x39 ->
          Ok(Item(tag, "PET meas_datetime", [DateTime], vm_1))
        0x00, 0x09, _, 0xd6 ->
          Ok(Item(tag, "PET image_one_loc", [FloatingPointSingle], vm_1))
        0x50, 0x01, _, 0x05 ->
          Ok(Item(tag, "GE Advance Curve.how_derived", [LongText], vm_1))
        0x00, 0x09, _, 0x26 ->
          Ok(Item(tag, "PET axial_angle_3d", [SignedLong], vm_1))
        0x00, 0x19, _, 0x09 ->
          Ok(Item(tag, "PET activity_factor_hr", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x30 ->
          Ok(Item(tag, "PET trig_rej_method", [SignedLong], vm_1))
        0x00, 0x09, _, 0x0e -> Ok(Item(tag, "PET scan_ready", [DateTime], vm_1))
        0x00, 0x11, _, 0x18 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x13, _, 0x12 ->
          Ok(Item(
            tag,
            "GE Advance Annotation.annotation_data",
            [OtherByteString],
            vm_1,
          ))
        0x00, 0x17, _, 0x07 ->
          Ok(Item(tag, "PET where_is_corr", [ShortText], vm_1))
        0x00, 0x09, _, 0xb9 ->
          Ok(Item(tag, "PET response_filt_parm", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0xdf ->
          Ok(Item(tag, "PET num_of_slices", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x3b ->
          Ok(Item(tag, "PET admin_datetime", [DateTime], vm_1))
        0x00, 0x13, _, 0x0c ->
          Ok(Item(
            tag,
            "GE Advance Annotation.start_x",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x13, _, 0x01 ->
          Ok(Item(tag, "GE Advance Annotation Sequence", [Sequence], vm_1))
        0x00, 0x09, _, 0x79 ->
          Ok(Item(tag, "PET compatible_version", [ShortString], vm_1))
        0x00, 0x09, _, 0x5a -> Ok(Item(tag, "PET derived", [SignedLong], vm_1))
        0x00, 0x09, _, 0xba ->
          Ok(Item(tag, "PET post_filter", [SignedLong], vm_1))
        0x00, 0x11, _, 0x02 ->
          Ok(Item(tag, "GE Advance ROI.roi_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x22 ->
          Ok(Item(tag, "PET delayed_events", [SignedLong], vm_1))
        0x50, 0x01, _, 0x02 ->
          Ok(Item(
            tag,
            "GE Advance Curve.compatible_version",
            [ShortString],
            vm_1,
          ))
        0x50, 0x03, _, 0x0e ->
          Ok(Item(tag, "GE Advance Graph.graph_border", [SignedLong], vm_1))
        0x00, 0x09, _, 0x59 ->
          Ok(Item(tag, "PET wc_cal_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0xd4 ->
          Ok(Item(tag, "PET ctac_conv_scale", [LongString], vm_1))
        0x00, 0x19, _, 0x0b ->
          Ok(Item(tag, "PET activity_factor_3d", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x5e ->
          Ok(Item(tag, "PET exam_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x16 ->
          Ok(Item(tag, "PET patient_position", [SignedLong], vm_1))
        0x00, 0x09, _, 0x0b ->
          Ok(Item(tag, "PET compatible_version", [ShortString], vm_1))
        0x00, 0x09, _, 0xc9 ->
          Ok(Item(tag, "PET ovlp_trans_frm_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x36 ->
          Ok(Item(tag, "PET tracer_name", [LongString], vm_1))
        0x00, 0x09, _, 0x13 ->
          Ok(Item(tag, "PET for_identifier", [UniqueIdentifier], vm_1))
        0x00, 0x19, _, 0x16 ->
          Ok(Item(tag, "PET activity_factor_2d", [SignedLong], vm_1))
        0x00, 0x09, _, 0x9a ->
          Ok(Item(tag, "PET cac_edge_threshold", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x46 ->
          Ok(Item(tag, "PET source2_holder", [SignedLong], vm_1))
        0x00, 0x19, _, 0x07 ->
          Ok(Item(tag, "PET cal_hardware", [LongString], vm_1))
        0x00, 0x19, _, 0x02 ->
          Ok(Item(tag, "PET compatible_version", [ShortString], vm_1))
        0x00, 0x09, _, 0xad ->
          Ok(Item(tag, "PET trans_frame_id", [UniqueIdentifier], vm_1))
        0x50, 0x03, _, 0x20 ->
          Ok(Item(tag, "GE Advance Graph.legend_font_size", [ShortString], vm_1))
        0x00, 0x09, _, 0x68 ->
          Ok(Item(tag, "PET landmark_datetime", [DateTime], vm_1))
        0x50, 0x05, _, 0x04 ->
          Ok(Item(
            tag,
            "GE Advance CurvePresentation.curve_id",
            [UniqueIdentifier],
            vm_1,
          ))
        0x00, 0x09, _, 0x4a ->
          Ok(Item(tag, "PET source2_half_life", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x13 ->
          Ok(Item(tag, "PET default_flag", [SignedLong], vm_1))
        0x00, 0x09, _, 0xa3 ->
          Ok(Item(tag, "PET axial_angles_used", [SignedLong], vm_1))
        0x00, 0x09, _, 0x57 ->
          Ok(Item(tag, "PET normal_2d_cal_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x84 ->
          Ok(Item(tag, "PET rotate", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x12 ->
          Ok(Item(tag, "PET manufacturer", [LongString], vm_1))
        0x00, 0x09, _, 0x66 ->
          Ok(Item(tag, "PET table_height", [FloatingPointSingle], vm_1))
        0x00, 0x13, _, 0x0b ->
          Ok(Item(
            tag,
            "GE Advance Annotation.coordinate_system",
            [SignedLong],
            vm_1,
          ))
        0x00, 0x13, _, 0x0d ->
          Ok(Item(
            tag,
            "GE Advance Annotation.start_y",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x5c ->
          Ok(Item(tag, "PET frame_id", [UniqueIdentifier], vm_1))
        0x00, 0x13, _, 0x06 ->
          Ok(Item(tag, "GE Advance Annotation.type", [SignedLong], vm_1))
        0x00, 0x09, _, 0x04 ->
          Ok(Item(
            tag,
            "GE Advance Patient.software_version",
            [ShortString],
            vm_1,
          ))
        0x00, 0x09, _, 0x70 ->
          Ok(Item(tag, "PET actual_stop_cond", [SignedLong], vm_1))
        0x00, 0x09, _, 0x94 ->
          Ok(Item(tag, "PET atten_smooth_param", [SignedLong], vm_1))
        0x00, 0x11, _, 0x05 ->
          Ok(Item(tag, "GE Advance ROI.software_version", [ShortString], vm_1))
        0x00, 0x09, _, 0xca ->
          Ok(Item(tag, "PET ovlp_tpulse_frm_id", [UniqueIdentifier], vm_1))
        0x00, 0x19, _, 0x01 ->
          Ok(Item(tag, "PET wc_cal_id", [UniqueIdentifier], vm_1))
        0x50, 0x05, _, 0x06 ->
          Ok(Item(
            tag,
            "GE Advance CurvePresentation.software_version",
            [ShortString],
            vm_1,
          ))
        0x00, 0x09, _, 0xbc ->
          Ok(Item(tag, "PET ir_regularize", [SignedLong], vm_1))
        0x00, 0x09, _, 0x63 ->
          Ok(Item(tag, "PET frame_size", [SignedLong], vm_1))
        0x00, 0x09, _, 0xa7 ->
          Ok(Item(tag, "PET total_counts", [FloatingPointSingle], vm_1))
        0x50, 0x05, _, 0x0a ->
          Ok(Item(
            tag,
            "GE Advance CurvePresentation.line_width",
            [SignedLong],
            vm_1,
          ))
        0x00, 0x09, _, 0x8f ->
          Ok(Item(tag, "PET bp_filter_cutoff", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x08 ->
          Ok(Item(tag, "PET compatible_version", [ShortString], vm_1))
        0x00, 0x13, _, 0x14 ->
          Ok(Item(tag, "GE Advance Annotation.label_id", [LongString], vm_1))
        0x00, 0x09, _, 0x81 ->
          Ok(Item(tag, "PET number_of_normals", [SignedLong], vm_1))
        0x00, 0x09, _, 0x25 ->
          Ok(Item(tag, "PET axial_acceptance", [SignedLong], vm_1))
        0x00, 0x09, _, 0xd1 ->
          Ok(Item(tag, "PET ctac_conv_scale", [LongString], vm_1))
        0x00, 0x09, _, 0x09 ->
          Ok(Item(tag, "PET software_version", [ShortString], vm_1))
        0x00, 0x09, _, 0xe4 ->
          Ok(Item(tag, "Recon Protocol", [ShortText], vm_1))
        0x00, 0x13, _, 0x07 ->
          Ok(Item(tag, "GE Advance Annotation.font_name", [LongString], vm_1))
        0x00, 0x09, _, 0x85 -> Ok(Item(tag, "PET flip", [SignedLong], vm_1))
        0x00, 0x09, _, 0xb8 ->
          Ok(Item(tag, "PET ir_loop_filt_parm", [SignedLong], vm_1))
        0x00, 0x09, _, 0x02 ->
          Ok(Item(tag, "PET patient_id", [LongString], vm_1))
        0x50, 0x03, _, 0x0b ->
          Ok(Item(tag, "GE Advance Graph.footer_font_size", [ShortString], vm_1))
        0x00, 0x09, _, 0x3a ->
          Ok(Item(tag, "PET pre_inj_volume", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x4c ->
          Ok(Item(tag, "PET source_location", [FloatingPointSingle], vm_1))
        0x50, 0x05, _, 0x09 ->
          Ok(Item(
            tag,
            "GE Advance CurvePresentation.line_type",
            [SignedLong],
            vm_1,
          ))
        0x50, 0x03, _, 0x24 ->
          Ok(Item(tag, "GE Advance Graph.legend_height", [SignedLong], vm_1))
        0x00, 0x09, _, 0x80 ->
          Ok(Item(tag, "PET multi_patient", [SignedLong], vm_1))
        0x00, 0x17, _, 0x0d -> Ok(Item(tag, "PET archived", [SignedLong], vm_1))
        0x00, 0x09, _, 0x0a ->
          Ok(Item(tag, "PET scan_id", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x7c ->
          Ok(Item(tag, "PET is_source", [SignedLong], vm_1))
        0x00, 0x11, _, 0x07 ->
          Ok(Item(tag, "GE Advance ROI.roi_datetime", [DateTime], vm_1))
        0x00, 0x09, _, 0x9b ->
          Ok(Item(tag, "PET cac_skull_offset", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0xc6 ->
          Ok(Item(tag, "PET seg_qc_parm", [FloatingPointSingle], vm_1))
        0x00, 0x13, _, 0x10 ->
          Ok(Item(tag, "GE Advance Annotation.start_symbol", [SignedLong], vm_1))
        0x00, 0x09, _, 0x20 ->
          Ok(Item(tag, "PET collect_countrate", [SignedLong], vm_1))
        0x00, 0x09, _, 0xbd ->
          Ok(Item(tag, "PET regularize_parm", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x0d ->
          Ok(Item(tag, "PET scan_datetime", [DateTime], vm_1))
        0x50, 0x03, _, 0x06 ->
          Ok(Item(tag, "GE Advance Graph.graph_datetime", [DateTime], vm_1))
        0x00, 0x09, _, 0xc7 -> Ok(Item(tag, "PET overlap", [SignedLong], vm_1))
        0x00, 0x11, _, 0x13 ->
          Ok(Item(tag, "GE Advance ROI.line_width", [SignedLong], vm_1))
        0x50, 0x05, _, 0x0c ->
          Ok(Item(
            tag,
            "GE Advance CurvePresentation.point_symbol_dim",
            [SignedLong],
            vm_1,
          ))
        0x00, 0x09, _, 0x6d ->
          Ok(Item(tag, "PET acq_duration", [SignedLong], vm_1))
        0x00, 0x19, _, 0x0e ->
          Ok(Item(tag, "PET hosp_identifier", [ShortString], vm_1))
        0x00, 0x09, _, 0x3e ->
          Ok(Item(tag, "PET radionuclide_name", [ShortString], vm_1))
        0x00, 0x09, _, 0x1b ->
          Ok(Item(tag, "PET start_cond_data", [SignedLong], vm_1))
        0x00, 0x09, _, 0xa0 ->
          Ok(Item(tag, "PET axial_cutoff_3d", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x3c ->
          Ok(Item(tag, "PET post_inj_activity", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x62 ->
          Ok(Item(tag, "PET where_is_frame", [ShortText], vm_1))
        0x00, 0x09, _, 0x88 -> Ok(Item(tag, "PET pan_y", [SignedLong], vm_1))
        0x50, 0x03, _, 0x09 ->
          Ok(Item(tag, "GE Advance Graph.title_font_size", [ShortString], vm_1))
        0x00, 0x09, _, 0x9d ->
          Ok(Item(tag, "PET radial_filter_3d", [SignedLong], vm_1))
        0x00, 0x09, _, 0x9e ->
          Ok(Item(tag, "PET radial_cutoff_3d", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0xc0 ->
          Ok(Item(tag, "PET ac_bp_filt_order", [SignedLong], vm_1))
        0x00, 0x09, _, 0x34 ->
          Ok(Item(tag, "PET triggers_acquired", [SignedLong], vm_1))
        0x00, 0x09, _, 0x35 ->
          Ok(Item(tag, "PET triggers_rejected", [SignedLong], vm_1))
        0x50, 0x03, _, 0x21 ->
          Ok(Item(tag, "GE Advance Graph.legend_location_x", [SignedLong], vm_1))
        0x00, 0x17, _, 0x06 -> Ok(Item(tag, "PET cal_type", [SignedLong], vm_1))
        0x50, 0x05, _, 0x01 ->
          Ok(Item(
            tag,
            "GE Advance CurvePresentation Sequence",
            [Sequence],
            vm_1,
          ))
        0x00, 0x09, _, 0x4f ->
          Ok(Item(tag, "PET upper_axial_acc", [SignedLong], vm_1))
        0x00, 0x11, _, 0x11 ->
          Ok(Item(tag, "GE Advance ROI.color", [LongString], vm_1))
        0x00, 0x09, _, 0x8d ->
          Ok(Item(tag, "PET atten_coefficient", [FloatingPointSingle], vm_1))
        0x00, 0x13, _, 0x0a ->
          Ok(Item(
            tag,
            "GE Advance Annotation.background_color",
            [LongString],
            vm_1,
          ))
        0x00, 0x09, _, 0x7e -> Ok(Item(tag, "PET is_type", [SignedLong], vm_1))
        0x00, 0x19, _, 0x14 -> Ok(Item(tag, "PET archived", [SignedLong], vm_1))
        0x00, 0x09, _, 0x73 ->
          Ok(Item(tag, "PET frame_valid", [SignedLong], vm_1))
        0x00, 0x09, _, 0x1f ->
          Ok(Item(tag, "PET collect_singles", [SignedLong], vm_1))
        0x00, 0x09, _, 0x0f ->
          Ok(Item(tag, "PET scan_description", [ShortText], vm_1))
        0x00, 0x09, _, 0xd9 ->
          Ok(Item(tag, "PET list_file_exists", [SignedLong], vm_1))
        0x00, 0x09, _, 0xb5 ->
          Ok(Item(tag, "PET ir_corr_model", [SignedLong], vm_1))
        0x00, 0x17, _, 0x0a ->
          Ok(Item(tag, "PET scan_datetime", [DateTime], vm_1))
        0x00, 0x09, _, 0xc4 ->
          Ok(Item(tag, "PET scatter_num_iter", [SignedLong], vm_1))
        0x50, 0x01, _, 0x03 ->
          Ok(Item(tag, "GE Advance Curve.software_version", [ShortString], vm_1))
        0x50, 0x03, _, 0x01 ->
          Ok(Item(tag, "GE Advance Graph Sequence", [Sequence], vm_1))
        0x00, 0x09, _, 0x92 ->
          Ok(Item(tag, "PET bp_center_p", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "PET raw_data_type", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x1e ->
          Ok(Item(tag, "PET collect_deadtime", [SignedLong], vm_1))
        0x00, 0x09, _, 0xbf ->
          Ok(Item(tag, "PET ac_bp_filt_cut_off", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x2e ->
          Ok(Item(tag, "PET mask_width", [SignedLong], vm_1))
        0x00, 0x09, _, 0x6f ->
          Ok(Item(tag, "PET acq_bin_start", [SignedLong], vm_1))
        0x50, 0x03, _, 0x1c ->
          Ok(Item(
            tag,
            "GE Advance Graph.y_major_tics",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0x04 ->
          Ok(Item(tag, "PET cal_datetime", [DateTime], vm_1))
        0x00, 0x09, _, 0xdd ->
          Ok(Item(tag, "PET num_of_rr_interval", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0xb4 ->
          Ok(Item(tag, "PET ir_recon_fov", [FloatingPointSingle], vm_1))
        0x50, 0x03, _, 0x15 ->
          Ok(Item(tag, "GE Advance Graph.x_axis_label", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Siemens: Thorax/Multix FD Image Stamp" ->
      case g0, g1, e0, e1 {
        0x00, 0x23, _, 0x00 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x01 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x02 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x03 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x04 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P Release 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x12 ->
          Ok(Item(tag, "Series Unique Identifier", [LongText], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Acquisition Delay", [DecimalString], vm_1))
        0x00, 0x29, _, 0x70 -> Ok(Item(tag, "Window ID", [LongText], vm_1))
        0x00, 0x29, _, 0x60 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x09, _, 0x41 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x31 ->
          Ok(Item(tag, "PACS Unique Identifier", [LongString], vm_1))
        0x00, 0x29, _, 0x8e ->
          Ok(Item(
            tag,
            "Physiological Display Enable Status",
            [CodeString],
            vm_1,
          ))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "Pixel Aspect Ratio", [DecimalString], vm_1))
        0x00, 0x29, _, 0xbf -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x11, _, 0x30 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "ECG Triggering", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x32 -> Ok(Item(tag, "ECG 2 Offset 1", [Unknown], vm_1))
        0x00, 0x29, _, 0x80 ->
          Ok(Item(tag, "Physiological Display ID", [LongText], vm_1))
        0x00, 0x29, _, 0xa0 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x29, _, 0x8f ->
          Ok(Item(
            tag,
            "Physiological Display Select Status",
            [CodeString],
            vm_1,
          ))
        0x00, 0x29, _, 0xc5 ->
          Ok(Item(tag, "Field Of Shutter Rectangle", [LongText], vm_1))
        0x7f, 0xe1, _, 0x10 -> Ok(Item(tag, "Pixel Data", [Unknown], vm_1))
        0x00, 0x29, _, 0xc1 ->
          Ok(Item(tag, "Field Of Shutter", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(tag, "Iris Diaphragm", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x81 ->
          Ok(Item(
            tag,
            "Preferred Physiological Channel Display",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x29, _, 0x79 ->
          Ok(Item(tag, "ECG Display Printing", [CodeString], vm_1))
        0x00, 0x19, _, 0x51 ->
          Ok(Item(tag, "Video LineRate", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x65 -> Ok(Item(tag, "Cine Master", [CodeString], vm_1))
        0x00, 0x09, _, 0x21 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0xa0 ->
          Ok(Item(tag, "Angulation", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x91 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x09, _, 0xf3 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x00 ->
          Ok(Item(tag, "Data Object Recognition Code", [LongText], vm_1))
        0x00, 0x11, _, 0x21 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x11, _, 0x10 ->
          Ok(Item(tag, "Patient Entry ID", [LongText], vm_1))
        0x00, 0x09, _, 0x38 ->
          Ok(Item(tag, "System Unique Identifier", [LongString], vm_1))
        0x00, 0x29, _, 0x77 ->
          Ok(Item(tag, "Window Select Status", [CodeString], vm_1))
        0x00, 0x29, _, 0x72 ->
          Ok(Item(tag, "Video Invert Nonsubtracted", [CodeString], vm_1))
        0x00, 0x09, _, 0x18 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x15 ->
          Ok(Item(tag, "Unique Identifier", [LongString], vm_1))
        0x00, 0x19, _, 0x00 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x11, _, 0x22 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x30 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x29, _, 0xce ->
          Ok(Item(tag, "Shutter Enable Status", [CodeString], vm_1))
        0x00, 0x19, _, 0x64 ->
          Ok(Item(tag, "Cine Parallel", [CodeString], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Mains Frequency", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x40 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x33 -> Ok(Item(tag, "ECG 2 Offset 2", [Unknown], vm_1))
        0x00, 0x29, _, 0x91 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0xf2 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x09, _, 0x51 ->
          Ok(Item(tag, "Study Unique Identifier", [LongString], vm_1))
        0x00, 0x29, _, 0x7e ->
          Ok(Item(tag, "ECG Display Printing Enable Status", [CodeString], vm_1))
        0x00, 0x29, _, 0x00 -> Ok(Item(tag, "Unknown", [DecimalString], vm_4))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "Video White Compression", [CodeString], vm_1))
        0x00, 0x09, _, 0x61 ->
          Ok(Item(tag, "Series Unique Identifier", [LongString], vm_1))
        0x00, 0x11, _, 0x32 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0xcf ->
          Ok(Item(tag, "Shutter Select Status", [CodeString], vm_1))
        0x00, 0x09, _, 0x39 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x11, _, 0x20 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "Video Scan Mode", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x31 -> Ok(Item(tag, "ECG 1 Offset", [Unknown], vm_1))
        0x00, 0x09, _, 0x22 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x16 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x90 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x29, _, 0xa1 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xb1 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x02 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x71 ->
          Ok(Item(tag, "Exposure Channel First Image", [Unknown], vm_1))
        0x00, 0x11, _, 0x31 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x78 ->
          Ok(Item(tag, "ECG Display Printing ID", [LongText], vm_1))
        0x00, 0x09, _, 0x12 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0xaf -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x61 ->
          Ok(Item(tag, "Image Identifier Format", [DecimalString], vm_1))
        0x00, 0x09, _, 0xf4 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x29, _, 0x71 ->
          Ok(Item(tag, "Video Invert Subtracted", [CodeString], vm_1))
        0x00, 0x29, _, 0xc0 ->
          Ok(Item(tag, "Functional Shutter ID", [LongText], vm_1))
        0x00, 0x09, _, 0x04 ->
          Ok(Item(tag, "Image Data Consistency", [LongString], vm_1_to_n))
        0x00, 0x29, _, 0x67 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x08 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x25 ->
          Ok(Item(tag, "Processed Pixel Data Quality", [LongString], vm_1_to_n))
        0x00, 0x21, _, 0x14 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Exposure Channel", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x38 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xa1 -> Ok(Item(tag, "Rotation", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0xa0 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x25 ->
          Ok(Item(tag, "Original Pixel Data Quality", [LongString], vm_1_to_n))
        0x00, 0x09, _, 0x34 ->
          Ok(Item(tag, "Cluster Unique Identifier", [LongString], vm_1))
        0x00, 0x09, _, 0xf7 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x29, _, 0x9f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Xray Technique", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x81 ->
          Ok(Item(tag, "Relative Image Time", [Unknown], vm_1))
        0x00, 0x29, _, 0x7f ->
          Ok(Item(tag, "ECG Display Printing Select Status", [CodeString], vm_1))
        0x00, 0x19, _, 0x72 ->
          Ok(Item(tag, "Processing Channel", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x61 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x29, _, 0xb0 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x09, _, 0xf5 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x63 -> Ok(Item(tag, "Filter", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS TABLE LONGITUDINAL POSITION" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x99 ->
          Ok(Item(tag, "Longitudinal Table Position", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "VEPRO BROKER 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x57, _, 0x10 ->
          Ok(Item(tag, "VEPRO Data replace sequence", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "TOSHIBA ENCRYPTED SR DATA" ->
      case g0, g1, e0, e1 {
        0x70, 0x15, _, 0x00 ->
          Ok(Item(tag, "Toshiba US Private Data", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "TOSHIBA_MEC_CT3" ->
      case g0, g1, e0, e1 {
        0x70, 0x05, _, 0x04 ->
          Ok(Item(
            tag,
            "Cardiac Reconstruction Gating Phase in Percent",
            [ShortString],
            vm_1,
          ))
        0x70, 0x05, _, 0x24 ->
          Ok(Item(tag, "The Acquisition Date of NRA", [Date], vm_1))
        0x70, 0x05, _, 0x03 ->
          Ok(Item(tag, "Cardiac R-R Mean Time", [ShortString], vm_1))
        0x70, 0x05, _, 0x0b -> Ok(Item(tag, "Filter", [ShortString], vm_1))
        0x70, 0x05, _, 0x0f -> Ok(Item(tag, "Direction", [ShortString], vm_1))
        0x70, 0x05, _, 0x19 ->
          Ok(Item(tag, "Frame Sort Key", [UnsignedLong], vm_1))
        0x70, 0x05, _, 0x0d -> Ok(Item(tag, "Organ", [CodeString], vm_1))
        0x70, 0x05, _, 0x10 ->
          Ok(Item(tag, "CT Private Data 2", [OtherByteString], vm_1_to_n))
        0x70, 0x05, _, 0x1d ->
          Ok(Item(tag, "Reconstruction Number", [UnsignedLong], vm_1))
        0x70, 0x05, _, 0x23 ->
          Ok(Item(tag, "Pitch Factor", [DecimalString], vm_1))
        0x70, 0x05, _, 0x39 -> Ok(Item(tag, "End Frame", [IntegerString], vm_1))
        0x70, 0x05, _, 0x20 ->
          Ok(Item(tag, "Local Series Number", [UnsignedLong], vm_1))
        0x70, 0x05, _, 0x00 ->
          Ok(Item(tag, "CT Private Data 1", [OtherByteString], vm_1_to_n))
        0x70, 0x05, _, 0x06 ->
          Ok(Item(tag, "Cardiac Reconstruction Mode", [ShortString], vm_1))
        0x70, 0x05, _, 0x0e ->
          Ok(Item(tag, "File Type Remarks", [ShortString], vm_1))
        0x70, 0x05, _, 0xf1 ->
          Ok(Item(
            tag,
            "Protect Mark for Image, Curve or Private Record",
            [CodeString],
            vm_1,
          ))
        0x70, 0x05, _, 0x35 ->
          Ok(Item(tag, "Scan Range", [DecimalString], vm_2))
        0x70, 0x05, _, 0x43 ->
          Ok(Item(tag, "Volume Vector", [DecimalString], vm_3))
        0x70, 0x05, _, 0x1c ->
          Ok(Item(tag, "Contrast/Bolus Agent", [LongString], vm_1))
        0x70, 0x05, _, 0xf2 ->
          Ok(Item(tag, "Protect Mark for Series Record", [CodeString], vm_1))
        0x70, 0x05, _, 0x42 ->
          Ok(Item(tag, "Local Frame No", [UnsignedShort], vm_1))
        0x70, 0x05, _, 0x48 ->
          Ok(Item(tag, "Respiratory Gating Inf.", [LongString], vm_1))
        0x70, 0x05, _, 0x26 ->
          Ok(Item(
            tag,
            "Large Data File Name",
            [CodeString],
            ValueMultiplicity(1, Some(8)),
          ))
        0x70, 0x05, _, 0x18 -> Ok(Item(tag, "Frame No.", [UnsignedShort], vm_1))
        0x70, 0x05, _, 0x13 ->
          Ok(Item(tag, "Expert Plan No.", [UnsignedShort], vm_1))
        0x70, 0x05, _, 0x0a ->
          Ok(Item(tag, "Table Speed in mm/rot", [DecimalString], vm_1))
        0x70, 0x05, _, 0x07 ->
          Ok(Item(tag, "Reconstruction Center", [DecimalString], vm_2))
        0x70, 0x05, _, 0x22 ->
          Ok(Item(tag, "Reconstruction Interval", [DecimalString], vm_1))
        0x70, 0x05, _, 0x17 ->
          Ok(Item(tag, "Total Frame Count in the Volume", [UnsignedShort], vm_1))
        0x70, 0x05, _, 0x41 ->
          Ok(Item(tag, "Raw Slice Information", [ShortString], vm_1))
        0x70, 0x05, _, 0x1e ->
          Ok(Item(tag, "Raw Data Number", [UnsignedLong], vm_1))
        0x70, 0x05, _, 0x29 ->
          Ok(Item(tag, "Frame UID", [UniqueIdentifier], vm_1))
        0x70, 0x05, _, 0x05 ->
          Ok(Item(
            tag,
            "Cardiac Reconstruction Gating Phase in ms",
            [ShortString],
            vm_1,
          ))
        0x70, 0x05, _, 0x25 ->
          Ok(Item(tag, "Large Data File Attribute", [UnsignedLong], vm_1))
        0x70, 0x05, _, 0x49 ->
          Ok(Item(tag, "Respiration Phase", [ShortString], vm_1))
        0x70, 0x05, _, 0x15 ->
          Ok(Item(tag, "Special Helical ACQ No.", [UnsignedShort], vm_1))
        0x70, 0x05, _, 0x37 ->
          Ok(Item(tag, "Total Frames", [IntegerString], vm_1))
        0x70, 0x05, _, 0x47 ->
          Ok(Item(tag, "Slice Pitch of 4D Volume", [DecimalString], vm_1))
        0x70, 0x05, _, 0x21 ->
          Ok(Item(tag, "Decrease in Artifact Filter", [LongString], vm_1))
        0x70, 0x05, _, 0x1f ->
          Ok(Item(tag, "Volume Number", [LongString], vm_1))
        0x70, 0x05, _, 0x30 ->
          Ok(Item(tag, "Main Modality in Study", [CodeString], vm_1))
        0x70, 0x05, _, 0x46 ->
          Ok(Item(
            tag,
            "Absolute Table Position of 4D Volume",
            [DecimalString],
            vm_1,
          ))
        0x70, 0x05, _, 0x08 ->
          Ok(Item(tag, "Detector Slice Thickness in mm", [DecimalString], vm_1))
        0x70, 0x05, _, 0x1b ->
          Ok(Item(tag, "Convolution Kernel", [ShortString], vm_1))
        0x70, 0x05, _, 0x40 ->
          Ok(Item(tag, "DLP Dose Length Product", [FloatingPointDouble], vm_1))
        0x70, 0x05, _, 0x45 ->
          Ok(Item(
            tag,
            "Relative Table Position of 4D Volume",
            [DecimalString],
            vm_1,
          ))
        0x70, 0x05, _, 0x28 ->
          Ok(Item(tag, "Enhanced CT Private Sequence", [Sequence], vm_1))
        0x70, 0x05, _, 0x09 ->
          Ok(Item(
            tag,
            "Number of Detector rows to Reconstruct",
            [LongString],
            vm_1,
          ))
        0x70, 0x05, _, 0x38 ->
          Ok(Item(tag, "Start Frame", [IntegerString], vm_1))
        0x70, 0x05, _, 0x12 -> Ok(Item(tag, "Position", [ShortString], vm_1))
        0x70, 0x05, _, 0x36 ->
          Ok(Item(tag, "CT Private Data 3", [OtherByteString], vm_1_to_n))
        0x70, 0x05, _, 0x14 ->
          Ok(Item(tag, "Reconstruction ROI No.", [UnsignedShort], vm_1))
        0x70, 0x05, _, 0x44 ->
          Ok(Item(tag, "Volume Type", [UnsignedShort], vm_1))
        0x70, 0x05, _, 0x16 ->
          Ok(Item(tag, "Volume UID", [UniqueIdentifier], vm_1))
        0x70, 0x05, _, 0x11 -> Ok(Item(tag, "Series Comment", [LongText], vm_1))
        0x70, 0x05, _, 0xf3 ->
          Ok(Item(tag, "Protect Mark for Study Record", [CodeString], vm_1))
        0x70, 0x05, _, 0x1a ->
          Ok(Item(tag, "Frame Sort Order", [UnsignedShort], vm_1))
        0x70, 0x05, _, 0x0c ->
          Ok(Item(tag, "Reconstruction Correction Type", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Mitra Object Document 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x00 ->
          Ok(Item(tag, "IMPAX object document", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "IMPAX markup XML stored", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "QVA" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x40 ->
          Ok(Item(tag, "Calibration Frame", [IntegerString], vm_1))
        0x00, 0x09, _, 0x41 ->
          Ok(Item(tag, "End Diastolic Frame", [IntegerString], vm_1))
        0x00, 0x09, _, 0x42 ->
          Ok(Item(tag, "End Systolic Frame", [IntegerString], vm_1))
        0x00, 0x09, _, 0x43 ->
          Ok(Item(tag, "End Diastolic Volume", [DecimalString], vm_1))
        0x00, 0x09, _, 0x44 ->
          Ok(Item(tag, "End Systolic Volume", [DecimalString], vm_1))
        0x00, 0x09, _, 0x45 ->
          Ok(Item(tag, "Stroke Volume", [DecimalString], vm_1))
        0x00, 0x09, _, 0x46 ->
          Ok(Item(tag, "Cardiac Output", [DecimalString], vm_1))
        0x00, 0x09, _, 0x47 ->
          Ok(Item(tag, "Ejection Fraction", [DecimalString], vm_1))
        0x00, 0x09, _, 0x48 ->
          Ok(Item(tag, "Body Surface Area", [DecimalString], vm_1))
        0x00, 0x09, _, 0x49 ->
          Ok(Item(tag, "Artery Territory Region", [ShortString], vm_1))
        0x00, 0x09, _, 0x50 ->
          Ok(Item(tag, "Number of Diseased Vessels", [IntegerString], vm_1))
        0x00, 0x09, _, 0x51 ->
          Ok(Item(tag, "Hypokinesis in Region", [DecimalString], vm_1))
        0x00, 0x09, _, 0x52 ->
          Ok(Item(tag, "Hyperkinesis in Region", [DecimalString], vm_1))
        0x00, 0x09, _, 0x53 ->
          Ok(Item(
            tag,
            "percent of chords with hyperkinesis <- 2 SD",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x09, _, 0x54 ->
          Ok(Item(
            tag,
            "percent of chords with alkinesis/dyskinesis",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x09, _, 0x55 ->
          Ok(Item(tag, "Calibration Factor", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_IMAG_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x15 ->
          Ok(Item(tag, "Lower range of Pixels1", [SignedLong], vm_1))
        0x00, 0x29, _, 0x26 ->
          Ok(Item(tag, "Version of the hdr struct", [SignedShort], vm_1))
        0x00, 0x27, _, 0x33 ->
          Ok(Item(tag, "Imaging Options", [SignedLong], vm_1))
        0x00, 0x27, _, 0x51 ->
          Ok(Item(tag, "Scan End Location", [FloatingPointSingle], vm_1))
        0x00, 0x27, _, 0x53 ->
          Ok(Item(tag, "RAS letter for anterior/posterior", [ShortString], vm_1))
        0x00, 0x27, _, 0x41 ->
          Ok(Item(tag, "Image location", [FloatingPointSingle], vm_1))
        0x00, 0x27, _, 0x47 ->
          Ok(Item(tag, "Normal S coord", [FloatingPointSingle], vm_1))
        0x00, 0x27, _, 0x35 -> Ok(Item(tag, "Plane Type", [SignedShort], vm_1))
        0x00, 0x29, _, 0x17 ->
          Ok(Item(tag, "Lower range of Pixels2", [SignedLong], vm_1))
        0x00, 0x27, 0x10, _ ->
          Ok(Item(tag, "Private Element Creator", [LongString], vm_1))
        0x00, 0x27, _, 0x4c ->
          Ok(Item(
            tag,
            "A Coord of Bottom Right Corner",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x27, _, 0x55 ->
          Ok(Item(tag, "RAS letter for scout end loc", [ShortString], vm_1))
        0x00, 0x27, _, 0x4d ->
          Ok(Item(
            tag,
            "S Coord of Bottom Right Corner",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x27, _, 0x45 ->
          Ok(Item(tag, "Normal R coord", [FloatingPointSingle], vm_1))
        0x00, 0x27, _, 0x40 ->
          Ok(Item(tag, "RAS letter of image location", [ShortString], vm_1))
        0x00, 0x27, _, 0x61 ->
          Ok(Item(tag, "Image dimension - Y", [FloatingPointSingle], vm_1))
        0x00, 0x27, _, 0x54 ->
          Ok(Item(tag, "RAS letter for scout start loc", [ShortString], vm_1))
        0x00, 0x27, _, 0x1d -> Ok(Item(tag, "Vma phase", [SignedShort], vm_1))
        0x00, 0x27, _, 0x50 ->
          Ok(Item(tag, "Scan Start Location", [FloatingPointSingle], vm_1))
        0x00, 0x27, _, 0x1c -> Ok(Item(tag, "Vma mamp", [SignedLong], vm_1))
        0x00, 0x27, _, 0x32 ->
          Ok(Item(tag, "Pulse Sequence", [SignedShort], vm_1))
        0x00, 0x27, _, 0x4b ->
          Ok(Item(
            tag,
            "R Coord of Bottom Right Corner",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x27, _, 0x62 ->
          Ok(Item(tag, "Number of Excitations", [FloatingPointSingle], vm_1))
        0x00, 0x27, _, 0x46 ->
          Ok(Item(tag, "Normal A coord", [FloatingPointSingle], vm_1))
        0x00, 0x27, _, 0x20 ->
          Ok(Item(tag, "Smart scan ON/OFF flag", [SignedShort], vm_1))
        0x00, 0x27, _, 0x36 ->
          Ok(Item(tag, "Oblique Plane", [SignedLong], vm_1))
        0x00, 0x27, _, 0x52 ->
          Ok(Item(tag, "RAS letter for side of image", [ShortString], vm_1))
        0x00, 0x27, _, 0x30 ->
          Ok(Item(tag, "Foreign Image Revision", [ShortString], vm_1))
        0x00, 0x27, _, 0x1e -> Ok(Item(tag, "Vma mod", [SignedLong], vm_1))
        0x00, 0x29, _, 0x18 ->
          Ok(Item(tag, "Upper range of Pixels2", [SignedLong], vm_1))
        0x00, 0x27, _, 0x43 ->
          Ok(Item(
            tag,
            "Center A coord of plane image",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x27, _, 0x10 -> Ok(Item(tag, "Scout Type", [SignedShort], vm_1))
        0x00, 0x27, _, 0x06 ->
          Ok(Item(tag, "Image archive flag", [SignedLong], vm_1))
        0x00, 0x27, _, 0x42 ->
          Ok(Item(
            tag,
            "Center R coord of plane image",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x29, _, 0x34 ->
          Ok(Item(tag, "Advantage comp. Overflow", [SignedLong], vm_1))
        0x00, 0x27, _, 0x4a ->
          Ok(Item(
            tag,
            "S Coord of Top Right Corner",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x27, _, 0x44 ->
          Ok(Item(
            tag,
            "Center S coord of plane image",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x29, _, 0x16 ->
          Ok(Item(tag, "Lower range of Pixels1", [SignedLong], vm_1))
        0x00, 0x29, _, 0x35 ->
          Ok(Item(tag, "Advantage comp. Underflow", [SignedLong], vm_1))
        0x00, 0x27, _, 0x60 ->
          Ok(Item(tag, "Image dimension - X", [FloatingPointSingle], vm_1))
        0x00, 0x27, _, 0x49 ->
          Ok(Item(
            tag,
            "A Coord of Top Right Corner",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x27, _, 0x1f -> Ok(Item(tag, "Vma clip", [SignedLong], vm_1))
        0x00, 0x29, _, 0x1a ->
          Ok(Item(
            tag,
            "Len of tot hdr in bytes No longer supported",
            [SignedLong],
            vm_1,
          ))
        0x00, 0x27, _, 0x48 ->
          Ok(Item(
            tag,
            "R Coord of Top Right Corner",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x27, _, 0x31 ->
          Ok(Item(tag, "Imaging Mode", [SignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "CARDIO-SMS 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x02 ->
          Ok(Item(tag, "Private Data", [OtherByteString], vm_1))
        0x00, 0x09, _, 0x03 ->
          Ok(Item(tag, "Private Data", [OtherByteString], vm_1))
        0x00, 0x09, _, 0x04 ->
          Ok(Item(tag, "Private Data", [OtherByteString], vm_1))
        0x00, 0x09, _, 0x05 ->
          Ok(Item(tag, "Private Data", [OtherByteString], vm_1))
        0x00, 0x09, _, 0x06 ->
          Ok(Item(tag, "Private Data", [OtherByteString], vm_1))
        0x00, 0x09, _, 0x08 ->
          Ok(Item(tag, "ACOM flags", [OtherByteString], vm_1))
        0x00, 0x09, _, 0x0a -> Ok(Item(tag, "Private Data", [Unknown], vm_1))
        0x00, 0x09, _, 0x0b -> Ok(Item(tag, "Private Data", [Unknown], vm_1))
        0x00, 0x09, _, 0x0c -> Ok(Item(tag, "Private Data", [Unknown], vm_1))
        0x00, 0x29, _, 0x80 -> Ok(Item(tag, "Private Data", [Sequence], vm_1))
        0x00, 0x31, _, 0x01 ->
          Ok(Item(tag, "Private Data stream", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Canon Inc." ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Canon Internal Data 1", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x13 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x15 -> Ok(Item(tag, "Unknown", [DecimalString], vm_2))
        0x00, 0x19, _, 0x16 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x17 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x18 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x19 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x1a -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x1b -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x1c -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x1e -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x1f -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x21 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Performed number of series", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Performed number of images", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x7f ->
          Ok(Item(tag, "Canon Internal Data 111", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GE LUT Asymmetry Parameter" ->
      case g0, g1, e0, e1 {
        0x00, 0x45, _, 0x67 ->
          Ok(Item(tag, "LUT Assymetry", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips MR Imaging DD 004" ->
      case g0, g1, e0, e1 {
        0x20, 0x05, _, 0x08 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x81 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x52 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x41 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x38 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x55 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1_to_n))
        0x20, 0x05, _, 0x78 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x82 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x62 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x53 -> Ok(Item(tag, "Unknown", [LongString], vm_1_to_n))
        0x20, 0x05, _, 0x54 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x05 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x61 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_2))
        0x20, 0x05, _, 0x28 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x58 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x05, _, 0x09 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x44 ->
          Ok(Item(tag, "Unknown", [SignedShort], vm_1_to_n))
        0x20, 0x05, _, 0x57 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x25 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x03 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x49 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x27 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x12 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x51 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x31 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x16 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x29 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x64 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x36 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x06 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x76 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x70 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x72 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x96 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x89 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x05, _, 0x90 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x79 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x48 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x50 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_2))
        0x20, 0x05, _, 0x42 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x77 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x13 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x26 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x97 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x05, _, 0x33 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_3))
        0x20, 0x05, _, 0x17 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x46 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x98 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x00 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x92 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x73 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x71 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x05, _, 0x45 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x47 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x34 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x02 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x91 -> Ok(Item(tag, "Unknown", [PersonName], vm_1))
        0x20, 0x05, _, 0x14 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x39 -> Ok(Item(tag, "Unknown", [SignedShort], vm_2))
        0x20, 0x05, _, 0x04 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x30 -> Ok(Item(tag, "Unknown", [CodeString], vm_1_to_n))
        0x20, 0x05, _, 0x37 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x43 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x10 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x93 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x60 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x15 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x56 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x01 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x07 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x63 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x59 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x75 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x40 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x74 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x35 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x99 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x95 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips Imaging DD 067" ->
      case g0, g1, e0, e1 {
        0x40, 0x01, _, 0x00 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x40, 0x01, _, 0x01 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x40, 0x01, _, 0x08 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "BioPri3D" ->
      case g0, g1, e0, e1 {
        0x00, 0x11, 0x10, _ ->
          Ok(Item(tag, "Private Segmentation Data", [Unknown], vm_1))
        0x00, 0x63, 0x10, _ -> Ok(Item(tag, "Private Creator", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GDCM CONFORMANCE TESTS" ->
      case g0, g1, e0, e1 {
        0x4d, 0x4d, _, 0x01 ->
          Ok(Item(tag, "Array Container Sequence", [Sequence], vm_1))
        0x4d, 0x4d, _, 0x02 ->
          Ok(Item(tag, "0-Filled Array", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS_FLCOMPACT_VA01A_PROC" ->
      case g0, g1, e0, e1 {
        0x00, 0x17, _, 0x17 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0xc0 ->
          Ok(Item(tag, "Internal Data", [LongString], vm_1))
        0x00, 0x17, _, 0xa2 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x51 ->
          Ok(Item(tag, "Internal Data", [FloatingPointSingle], vm_1))
        0x00, 0x17, _, 0x4b ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x87 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x52 ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x1e ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x55 ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x1c ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x8b ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x0b ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x18 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x68 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x1f ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x1a ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x25 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x67 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x28 ->
          Ok(Item(tag, "Internal Data", [FloatingPointSingle], vm_1))
        0x00, 0x17, _, 0x16 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x29 ->
          Ok(Item(tag, "Internal Data", [FloatingPointSingle], vm_1))
        0x00, 0x17, _, 0xa5 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x0c ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x48 ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x4d ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x88 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x0e ->
          Ok(Item(tag, "Internal Data", [LongString], vm_1))
        0x00, 0x17, _, 0xb0 ->
          Ok(Item(tag, "Internal Data", [DecimalString], vm_1))
        0x00, 0x17, _, 0xa3 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x20 ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0xa1 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0xa0 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x0f ->
          Ok(Item(tag, "Internal Data", [LongString], vm_1))
        0x00, 0x17, _, 0x8f ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x64 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0xa4 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x53 ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x8d ->
          Ok(Item(tag, "Internal Data", [FloatingPointSingle], vm_1))
        0x00, 0x17, _, 0x1b ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x24 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x23 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x21 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x5a ->
          Ok(Item(tag, "Internal Data", [OtherWordString], vm_1))
        0x00, 0x17, _, 0x8e ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x5c ->
          Ok(Item(tag, "Internal Data", [OtherWordString], vm_1))
        0x00, 0x17, _, 0x5b ->
          Ok(Item(tag, "Internal Data", [OtherWordString], vm_1))
        0x00, 0x17, _, 0x8a ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x85 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x22 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x50 ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x66 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x0d ->
          Ok(Item(tag, "Internal Data", [FloatingPointSingle], vm_1))
        0x00, 0x17, _, 0xa6 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x8c ->
          Ok(Item(tag, "Internal Data", [FloatingPointSingle], vm_1))
        0x00, 0x17, _, 0x4f ->
          Ok(Item(tag, "Internal Data", [LongString], vm_1))
        0x00, 0x17, _, 0x4e ->
          Ok(Item(tag, "Internal Data", [LongString], vm_1))
        0x00, 0x17, _, 0x27 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x19 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x89 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x49 ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x4c ->
          Ok(Item(tag, "Internal Data", [LongString], vm_1))
        0x00, 0x17, _, 0x26 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x0a ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x14 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x4a ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x54 ->
          Ok(Item(tag, "Internal Data", [SignedShort], vm_1))
        0x00, 0x17, _, 0x86 ->
          Ok(Item(tag, "Internal Data", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Siemens: Thorax/Multix FD Raw Image Settings" ->
      case g0, g1, e0, e1 {
        0x00, 0x25, _, 0x30 ->
          Ok(Item(tag, "Manual Cropping", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x1b ->
          Ok(Item(tag, "Image Crop Upper Right", [UnsignedShort], vm_2))
        0x00, 0x25, _, 0x14 ->
          Ok(Item(tag, "Image Alignment", [SignedShort], vm_1))
        0x00, 0x25, _, 0x0c ->
          Ok(Item(tag, "Harmonization Kernel", [SignedShort], vm_1))
        0x00, 0x25, _, 0x1c ->
          Ok(Item(tag, "Image Crop Lower Left", [UnsignedShort], vm_2))
        0x00, 0x25, _, 0x06 ->
          Ok(Item(
            tag,
            "Collimator Low Right X Percentage",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x25, _, 0x32 ->
          Ok(Item(tag, "Gamma LUT Parameter 2", [DecimalString], vm_1))
        0x00, 0x25, _, 0x17 -> Ok(Item(tag, "System Type", [LongString], vm_1))
        0x00, 0x25, _, 0x10 ->
          Ok(Item(tag, "Raw Image File Name", [LongText], vm_1))
        0x00, 0x25, _, 0x02 ->
          Ok(Item(tag, "Collimator Manual", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x01 -> Ok(Item(tag, "Gamma LUT", [SignedShort], vm_1))
        0x00, 0x25, _, 0x04 ->
          Ok(Item(
            tag,
            "Collimator Up Right X Percentage",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x25, _, 0x0f ->
          Ok(Item(tag, "Edge Enhancement Gain", [FloatingPointSingle], vm_1))
        0x00, 0x25, _, 0x0b -> Ok(Item(tag, "Set Gray", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x13 -> Ok(Item(tag, "Image Rows", [SignedShort], vm_1))
        0x00, 0x25, _, 0x15 ->
          Ok(Item(tag, "Active Image Columns", [SignedShort], vm_1))
        0x00, 0x25, _, 0x05 ->
          Ok(Item(
            tag,
            "Collimator Low Left X Percentage",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x25, _, 0x07 ->
          Ok(Item(
            tag,
            "Collimator Up Left Y Percentage",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x25, _, 0x1a ->
          Ok(Item(tag, "Image Crop Upper Left", [UnsignedShort], vm_2))
        0x00, 0x25, _, 0x11 ->
          Ok(Item(tag, "Global Offset", [SignedShort], vm_1))
        0x00, 0x25, _, 0x09 ->
          Ok(Item(
            tag,
            "Collimator Low Left Y Percentage",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x25, _, 0x31 ->
          Ok(Item(tag, "Gamma LUT Parameter 1", [SignedShort], vm_1))
        0x00, 0x25, _, 0x12 ->
          Ok(Item(tag, "Image Columns", [SignedShort], vm_1))
        0x00, 0x25, _, 0x03 ->
          Ok(Item(
            tag,
            "Collimator Up Left X Percentage",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x25, _, 0x18 -> Ok(Item(tag, "Auto Gain", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x34 ->
          Ok(Item(tag, "Gamma LUT Parameter 4", [SignedShort], vm_1))
        0x00, 0x25, _, 0x1d ->
          Ok(Item(tag, "Image Crop Lower Right", [UnsignedShort], vm_2))
        0x00, 0x25, _, 0x0a ->
          Ok(Item(
            tag,
            "Collimator Low Right Y Percentage",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x25, _, 0x16 ->
          Ok(Item(tag, "Active Image Rows", [SignedShort], vm_1))
        0x00, 0x25, _, 0x0e ->
          Ok(Item(tag, "Edge Enhancement Kernel", [SignedShort], vm_1))
        0x00, 0x25, _, 0x00 ->
          Ok(Item(tag, "Raw Image Amplification", [SignedShort], vm_1))
        0x00, 0x25, _, 0x0d ->
          Ok(Item(tag, "Harmonization Gain", [FloatingPointSingle], vm_1))
        0x00, 0x25, _, 0x33 ->
          Ok(Item(tag, "Gamma LUT Parameter 3", [SignedShort], vm_1))
        0x00, 0x25, _, 0x08 ->
          Ok(Item(
            tag,
            "Collimator Up Right Y Percentage",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x25, _, 0x19 ->
          Ok(Item(tag, "Ortho Sub Sampling", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS SC IMG SAD" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x86 ->
          Ok(Item(tag, "Non-RT Image SAD", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_ACRQA_1.0 BLOCK3" ->
      case g0, g1, e0, e1 {
        0x00, 0x23, _, 0x00 -> Ok(Item(tag, "CR DRE", [DecimalString], vm_1))
        0x00, 0x23, _, 0x10 -> Ok(Item(tag, "CR DRN", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x20 -> Ok(Item(tag, "CR ORE", [DecimalString], vm_1))
        0x00, 0x23, _, 0x30 -> Ok(Item(tag, "CR ORN", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x40 -> Ok(Item(tag, "CR ORD", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x50 ->
          Ok(Item(tag, "CR Cassette Size", [LongString], vm_1))
        0x00, 0x23, _, 0x60 ->
          Ok(Item(tag, "CR Machine ID", [LongString], vm_1))
        0x00, 0x23, _, 0x70 ->
          Ok(Item(tag, "CR Machine Type", [LongString], vm_1))
        0x00, 0x23, _, 0x80 ->
          Ok(Item(tag, "CR Technician Code", [LongString], vm_1))
        0x00, 0x23, _, 0x90 ->
          Ok(Item(tag, "CR ES Parameters", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SCHICK TECHNOLOGIES - Change Item Creator ID" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Change List Item UID", [UniqueIdentifier], vm_1))
        0x00, 0x21, _, 0x02 -> Ok(Item(tag, "Operation", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x03 -> Ok(Item(tag, "Date", [DateTime], vm_1))
        0x00, 0x21, _, 0x04 -> Ok(Item(tag, "User Name", [PersonName], vm_1))
        0x00, 0x21, _, 0x05 ->
          Ok(Item(tag, "Additional Change Data", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_ADWSoft_3D1" ->
      case g0, g1, e0, e1 {
        0x00, 0x47, _, 0xc2 ->
          Ok(Item(
            tag,
            "Volume Upper Left High Corner TLOC",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x47, _, 0x63 ->
          Ok(Item(tag, "Volume Skew Base", [SignedLong], vm_1))
        0x00, 0x47, _, 0x9c ->
          Ok(Item(tag, "Transform Label", [LongString], vm_1))
        0x00, 0x47, _, 0x89 ->
          Ok(Item(tag, "Contrast Agent Volume List", [DecimalString], vm_1_to_n))
        0x00, 0x47, _, 0xf8 ->
          Ok(Item(tag, "Max Converted Density", [DecimalString], vm_1_to_n))
        0x00, 0x47, _, 0xb8 ->
          Ok(Item(tag, "Wireframe Attributes", [SignedLong], vm_1))
        0x00, 0x47, _, 0xfc ->
          Ok(Item(tag, "Volume midscan times list", [OtherByteString], vm_1))
        0x00, 0x47, _, 0x65 ->
          Ok(Item(
            tag,
            "Volume Registration Transform Translation Vector",
            [DecimalString],
            vm_3,
          ))
        0x00, 0x47, _, 0x66 ->
          Ok(Item(tag, "Volume Tilt", [DecimalString], vm_1))
        0x00, 0x47, _, 0xbb ->
          Ok(Item(tag, "Wireframe Point List", [Sequence], vm_1))
        0x00, 0x47, _, 0x85 ->
          Ok(Item(tag, "Acquisition DLX 2D Series Sequence", [Sequence], vm_1))
        0x00, 0x47, _, 0xff ->
          Ok(Item(tag, "Protocol Title", [LongString], vm_1))
        0x00, 0x47, _, 0x51 ->
          Ok(Item(tag, "Volume Segment Count", [UnsignedLong], vm_1_to_n))
        0x00, 0x47, _, 0x50 ->
          Ok(Item(tag, "Volume Voxel Count", [UnsignedLong], vm_1))
        0x00, 0x47, _, 0xfe ->
          Ok(Item(tag, "Protocol Name", [LongString], vm_1))
        0x00, 0x47, _, 0x9a ->
          Ok(Item(
            tag,
            "Transform Rotation Matrix",
            [DecimalString],
            ValueMultiplicity(9, Some(9)),
          ))
        0x00, 0x47, _, 0x93 ->
          Ok(Item(tag, "DLX Calibration Date", [Date], vm_1))
        0x00, 0x47, _, 0xb9 ->
          Ok(Item(tag, "Wireframe Point Count", [SignedLong], vm_1))
        0x00, 0x47, _, 0x64 ->
          Ok(Item(
            tag,
            "Volume Registration Transform Rotation Matrix",
            [DecimalString],
            ValueMultiplicity(9, Some(9)),
          ))
        0x00, 0x47, _, 0xb2 ->
          Ok(Item(tag, "Location System", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0x8b ->
          Ok(Item(tag, "Frame Count", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0xd2 ->
          Ok(Item(tag, "Volume Gradient List", [OtherByteString], vm_1))
        0x00, 0x47, _, 0xb6 ->
          Ok(Item(tag, "Wireframe Group Name", [LongString], vm_1))
        0x00, 0x47, _, 0x72 ->
          Ok(Item(tag, "Exposure List", [IntegerString], vm_1_to_n))
        0x00, 0x47, _, 0xbc ->
          Ok(Item(tag, "Wireframe Points Coordinates", [DecimalString], vm_3))
        0x00, 0x47, _, 0xb1 ->
          Ok(Item(tag, "Wireframe Count", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0x58 ->
          Ok(Item(tag, "Volume Voxel Size", [DecimalString], vm_1))
        0x00, 0x47, _, 0xd3 ->
          Ok(Item(tag, "Volume Density List", [OtherByteString], vm_1))
        0x00, 0x47, _, 0x9b ->
          Ok(Item(tag, "Transform Translation Vector", [DecimalString], vm_3))
        0x00, 0x47, _, 0x57 ->
          Ok(Item(tag, "Volume Voxel Ratio", [DecimalString], vm_1))
        0x00, 0x47, _, 0x99 ->
          Ok(Item(tag, "Transform Sequence", [Sequence], vm_1))
        0x00, 0x47, _, 0xd1 ->
          Ok(Item(tag, "Volume Segment List", [OtherByteString], vm_1))
        0x00, 0x47, _, 0x95 ->
          Ok(Item(tag, "DLX Calibration Status", [CodeString], vm_1))
        0x00, 0x47, _, 0xf5 ->
          Ok(Item(tag, "Min original density", [DecimalString], vm_1_to_n))
        0x00, 0x47, _, 0xba ->
          Ok(Item(tag, "Wireframe Timestamp", [SignedLong], vm_1))
        0x00, 0x47, _, 0xb7 ->
          Ok(Item(tag, "Wireframe Color", [LongString], vm_1))
        0x00, 0x47, _, 0xf4 ->
          Ok(Item(tag, "Volume Name(s)", [LongString], vm_1_to_n))
        0x00, 0x47, _, 0x80 ->
          Ok(Item(tag, "Acquisition DLX Identifier", [LongString], vm_1))
        0x00, 0x47, _, 0x61 ->
          Ok(Item(tag, "Volume Center Point", [DecimalString], vm_3))
        0x00, 0x47, _, 0x55 ->
          Ok(Item(tag, "Volume Threshold Value", [SignedLong], vm_1))
        0x00, 0x47, _, 0x92 ->
          Ok(Item(
            tag,
            "XA 3D Reconstruction Algorithm Version",
            [CodeString],
            vm_1,
          ))
        0x00, 0x47, _, 0x98 ->
          Ok(Item(tag, "Transform Count", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0xb5 ->
          Ok(Item(tag, "Wireframe Name", [LongString], vm_1))
        0x00, 0x47, _, 0x8a ->
          Ok(Item(tag, "Number Of Injections", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0xfd ->
          Ok(Item(tag, "Volume Registered Phases List", [OtherByteString], vm_1))
        0x00, 0x47, _, 0x54 ->
          Ok(Item(tag, "Volume Slice Count", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0x01 ->
          Ok(Item(tag, "Reconstruction Parameters Sequence", [Sequence], vm_1))
        0x00, 0x47, _, 0x96 ->
          Ok(Item(tag, "Used Frames", [IntegerString], vm_1_to_n))
        0x00, 0x47, _, 0x91 ->
          Ok(Item(
            tag,
            "XA 3D Reconstruction Algorithm Name",
            [LongString],
            vm_1,
          ))
        0x00, 0x47, _, 0x81 ->
          Ok(Item(tag, "Acquisition DLX 2D Series Count", [IntegerString], vm_1))
        0x00, 0x47, _, 0x70 ->
          Ok(Item(tag, "KPV List", [DecimalString], vm_1_to_n))
        0x00, 0x47, _, 0x53 ->
          Ok(Item(tag, "Volume Slice Size", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0x49 ->
          Ok(Item(tag, "Volume Color", [UnsignedLong], vm_3_to_n))
        0x00, 0x47, _, 0xfb ->
          Ok(Item(tag, "Phase Number (percent)", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0xd4 ->
          Ok(Item(tag, "Volume Z Position List", [OtherByteString], vm_1))
        0x00, 0x47, _, 0xf7 ->
          Ok(Item(tag, "Min Converted Density", [DecimalString], vm_1_to_n))
        0x00, 0x47, _, 0xf6 ->
          Ok(Item(tag, "Max original density", [DecimalString], vm_1_to_n))
        0x00, 0x47, _, 0xfa ->
          Ok(Item(tag, "Protocol Resolution", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0xc1 ->
          Ok(Item(
            tag,
            "Volume Slice To RAS Rotation Matrix",
            [DecimalString],
            ValueMultiplicity(9, Some(9)),
          ))
        0x00, 0x47, _, 0xd5 ->
          Ok(Item(tag, "Volume Original Index List", [OtherByteString], vm_1))
        0x00, 0x47, _, 0xc0 ->
          Ok(Item(
            tag,
            "Volume Upper Left High Corner RAS",
            [DecimalString],
            vm_3,
          ))
        0x00, 0x47, _, 0x71 ->
          Ok(Item(tag, "X-Ray Tube Current List", [IntegerString], vm_1_to_n))
        0x00, 0x47, _, 0x59 ->
          Ok(Item(tag, "Volume Z Position Size", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0x94 ->
          Ok(Item(tag, "DLX Calibration Time", [Time], vm_1))
        0x00, 0x47, _, 0xf9 ->
          Ok(Item(tag, "Protocol Film Name", [LongString], vm_1))
        0x00, 0x47, _, 0xb0 -> Ok(Item(tag, "Wireframe List", [Sequence], vm_1))
        0x00, 0x47, _, 0x60 ->
          Ok(Item(
            tag,
            "Volume Base Line",
            [DecimalString],
            ValueMultiplicity(9, Some(9)),
          ))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS I0 MU SCALE FACTOR" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x97 ->
          Ok(Item(tag, "I0-MU Scale Factor", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_HINO_CT_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x4b, _, 0x01 ->
          Ok(Item(tag, "Beam Thickness", [DecimalString], vm_1_to_n))
        0x00, 0x4b, _, 0x02 ->
          Ok(Item(tag, "R Time", [DecimalString], vm_1_to_n))
        0x00, 0x4b, _, 0x03 ->
          Ok(Item(tag, "HBC number", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "QCA_RESULTS" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 ->
          Ok(Item(tag, "Analysis Views", [CodeString], vm_1))
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Segment", [LongString], vm_1))
        0x00, 0x09, _, 0x11 ->
          Ok(Item(tag, "Pre Catheter Name", [LongString], vm_1))
        0x00, 0x09, _, 0x12 ->
          Ok(Item(tag, "Pre Catheter Size", [DecimalString], vm_1))
        0x00, 0x09, _, 0x13 ->
          Ok(Item(tag, "Pre Reference Diameter", [DecimalString], vm_1))
        0x00, 0x09, _, 0x14 ->
          Ok(Item(tag, "Pre Minimum Lumen Diameter", [DecimalString], vm_1))
        0x00, 0x09, _, 0x15 ->
          Ok(Item(tag, "Pre Average Diameter", [DecimalString], vm_1))
        0x00, 0x09, _, 0x16 ->
          Ok(Item(tag, "Pre Stenosis Length", [DecimalString], vm_1))
        0x00, 0x09, _, 0x17 ->
          Ok(Item(tag, "Pre Stenosis %", [IntegerString], vm_1))
        0x00, 0x09, _, 0x18 ->
          Ok(Item(tag, "Pre Geometric Area Reduction %", [IntegerString], vm_1))
        0x00, 0x09, _, 0x21 ->
          Ok(Item(tag, "Post Catheter Name", [LongString], vm_1))
        0x00, 0x09, _, 0x22 ->
          Ok(Item(tag, "Post Catheter Size", [DecimalString], vm_1))
        0x00, 0x09, _, 0x23 ->
          Ok(Item(tag, "Post Reference Diameter", [DecimalString], vm_1))
        0x00, 0x09, _, 0x24 ->
          Ok(Item(tag, "Post Minimum Lumen Diameter", [DecimalString], vm_1))
        0x00, 0x09, _, 0x25 ->
          Ok(Item(tag, "Post Average Diameter", [DecimalString], vm_1))
        0x00, 0x09, _, 0x26 ->
          Ok(Item(tag, "Post Stenosis Length", [DecimalString], vm_1))
        0x00, 0x09, _, 0x27 ->
          Ok(Item(tag, "Post Stenosis %", [IntegerString], vm_1))
        0x00, 0x09, _, 0x28 ->
          Ok(Item(tag, "Post Geometric Area Reduction %", [IntegerString], vm_1))
        0x00, 0x09, _, 0x40 ->
          Ok(Item(tag, "Calibration Frame", [IntegerString], vm_1))
        0x00, 0x09, _, 0x41 ->
          Ok(Item(tag, "End Diastolic Frame", [IntegerString], vm_1))
        0x00, 0x09, _, 0x42 ->
          Ok(Item(tag, "End Systolic Frame", [IntegerString], vm_1))
        0x00, 0x09, _, 0x43 ->
          Ok(Item(tag, "End Diastolic Volume", [DecimalString], vm_1))
        0x00, 0x09, _, 0x44 ->
          Ok(Item(tag, "End Systolic Volume", [DecimalString], vm_1))
        0x00, 0x09, _, 0x45 ->
          Ok(Item(tag, "Stroke Volume", [DecimalString], vm_1))
        0x00, 0x09, _, 0x47 ->
          Ok(Item(tag, "Ejection Fraction", [DecimalString], vm_1))
        0x00, 0x09, _, 0x48 ->
          Ok(Item(tag, "Body Surface Area", [DecimalString], vm_1))
        0x00, 0x09, _, 0x49 ->
          Ok(Item(tag, "Artery Territory Region", [ShortString], vm_1))
        0x00, 0x09, _, 0x50 ->
          Ok(Item(tag, "Number of Diseased Vessels", [IntegerString], vm_1))
        0x00, 0x09, _, 0x51 ->
          Ok(Item(tag, "Hypokinesis in Region", [DecimalString], vm_1))
        0x00, 0x09, _, 0x52 ->
          Ok(Item(tag, "Hyperkinesis in Opposite Region", [DecimalString], vm_1))
        0x00, 0x09, _, 0x53 ->
          Ok(Item(tag, "Percent Total LV Hypokinesis", [IntegerString], vm_1))
        0x00, 0x09, _, 0x55 ->
          Ok(Item(tag, "Calibration Factor", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "POLYTRON-SMS 2.5" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x02 -> Ok(Item(tag, "Private Data 1", [Unknown], vm_1))
        0x00, 0x09, _, 0x03 -> Ok(Item(tag, "Private Data 2", [Unknown], vm_1))
        0x00, 0x09, _, 0x04 -> Ok(Item(tag, "Private Data 3", [Unknown], vm_1))
        0x00, 0x09, _, 0x06 -> Ok(Item(tag, "Private Data 3", [Unknown], vm_1))
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Private Data 4", [Unknown], vm_1))
        0x00, 0x09, _, 0x11 -> Ok(Item(tag, "Private Data 5", [Unknown], vm_1))
        0x00, 0x09, _, 0x12 -> Ok(Item(tag, "Private Data 6", [Unknown], vm_1))
        0x00, 0x89, _, 0x10 -> Ok(Item(tag, "Private Data", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CSA ENVELOPE" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "syngo Report Data", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x11 ->
          Ok(Item(tag, "syngo Report Presentation", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CT VA0  OST" ->
      case g0, g1, e0, e1 {
        0x60, 0x21, _, 0x00 ->
          Ok(Item(tag, "Osteo Contour Comment", [LongString], vm_1))
        0x60, 0x21, _, 0x10 ->
          Ok(Item(
            tag,
            "Osteo Contour Buffer",
            [UnsignedShort],
            ValueMultiplicity(256, Some(256)),
          ))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MR HEADER" ->
      case g0, g1, e0, e1 {
        0x00, 0x51, _, 0x0d -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x19, _, 0x12 ->
          Ok(Item(tag, "TablePositionOrigin", [SignedLong], vm_3))
        0x00, 0x51, _, 0x12 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x51, _, 0x0e -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x19, _, 0x0f ->
          Ok(Item(tag, "GradientMode", [ShortString], vm_1))
        0x00, 0x51, _, 0x0c -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x51, _, 0x15 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x51, _, 0x0a -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x51, _, 0x0b ->
          Ok(Item(tag, "AcquisitionMatrixText", [ShortString], vm_1))
        0x00, 0x19, _, 0x28 ->
          Ok(Item(
            tag,
            "BandwidthPerPixelPhaseEncode",
            [FloatingPointDouble],
            vm_1,
          ))
        0x00, 0x51, _, 0x0f -> Ok(Item(tag, "CoilString", [LongString], vm_1))
        0x00, 0x51, _, 0x16 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x08 ->
          Ok(Item(tag, "CSA Image Header Type", [CodeString], vm_1))
        0x00, 0x51, _, 0x08 ->
          Ok(Item(tag, "CSA Image Header Type", [CodeString], vm_1))
        0x00, 0x19, _, 0x0c -> Ok(Item(tag, "B_value", [IntegerString], vm_1))
        0x00, 0x19, _, 0x23 ->
          Ok(Item(tag, "FMRIStimulInfo", [IntegerString], vm_1))
        0x00, 0x19, _, 0x26 ->
          Ok(Item(tag, "RBMoCoRot", [FloatingPointDouble], vm_3))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "FlowCompensation", [ShortString], vm_1))
        0x00, 0x19, _, 0x0a ->
          Ok(Item(tag, "NumberOfImagesInMosaic", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x29 ->
          Ok(Item(tag, "MosaicRefAcqTimes", [FloatingPointDouble], vm_1))
        0x00, 0x19, _, 0x0d ->
          Ok(Item(tag, "DiffusionDirectionality", [CodeString], vm_1))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "SlicePosition_PCS", [FloatingPointDouble], vm_3))
        0x00, 0x19, _, 0x27 ->
          Ok(Item(tag, "B_matrix", [FloatingPointDouble], vm_6))
        0x00, 0x51, _, 0x18 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x19, _, 0x17 ->
          Ok(Item(tag, "SliceResolution", [DecimalString], vm_1))
        0x00, 0x19, _, 0x18 ->
          Ok(Item(tag, "RealDwellTime", [IntegerString], vm_1))
        0x00, 0x19, _, 0x09 ->
          Ok(Item(tag, "CSA Image Header Version ??", [LongString], vm_1))
        0x00, 0x19, _, 0x0b ->
          Ok(Item(tag, "SliceMeasurementDuration", [DecimalString], vm_1))
        0x00, 0x51, _, 0x09 ->
          Ok(Item(tag, "CSA Image Header Version ??", [LongString], vm_1))
        0x00, 0x19, _, 0x16 ->
          Ok(Item(tag, "TimeAfterStart", [DecimalString], vm_1))
        0x00, 0x51, _, 0x11 -> Ok(Item(tag, "PATModeText", [LongString], vm_1))
        0x00, 0x19, _, 0x13 ->
          Ok(Item(tag, "ImaAbsTablePosition", [SignedLong], vm_3))
        0x00, 0x51, _, 0x13 ->
          Ok(Item(tag, "PositivePCSDirections", [ShortString], vm_1))
        0x00, 0x19, _, 0x0e ->
          Ok(Item(
            tag,
            "DiffusionGradientDirection",
            [FloatingPointDouble],
            vm_3,
          ))
        0x00, 0x19, _, 0x25 ->
          Ok(Item(tag, "RBMoCoTrans", [FloatingPointDouble], vm_3))
        0x00, 0x51, _, 0x17 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x19, _, 0x14 ->
          Ok(Item(tag, "ImaRelTablePosition", [IntegerString], vm_3))
        0x00, 0x51, _, 0x19 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SET WINDOW" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "Set Window Image Filter", [Unknown], vm_1))
        0x00, 0x19, _, 0x01 ->
          Ok(Item(tag, "Set Window Magnification Power", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS FIELD ID" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x80 -> Ok(Item(tag, "Field ID", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_ADWSoft_DPO" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x80 ->
          Ok(Item(tag, "Private Entity Number", [IntegerString], vm_1))
        0x00, 0x39, _, 0x85 ->
          Ok(Item(tag, "Private Entity Date", [Date], vm_1))
        0x00, 0x39, _, 0x90 ->
          Ok(Item(tag, "Private Entity Time", [Time], vm_1))
        0x00, 0x39, _, 0x95 ->
          Ok(Item(tag, "Private Entity Launch Command", [LongString], vm_1))
        0x00, 0x39, _, 0xaa ->
          Ok(Item(tag, "Private Entity Type", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SCHICK TECHNOLOGIES - Note Item Creator ID" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x01 -> Ok(Item(tag, "Text", [ShortText], vm_1))
        0x00, 0x21, _, 0x02 -> Ok(Item(tag, "Date", [DateTime], vm_1))
        0x00, 0x21, _, 0x03 -> Ok(Item(tag, "User Name", [PersonName], vm_1))
        0x00, 0x21, _, 0x04 ->
          Ok(Item(tag, "Coordinates (X, Y)", [UnsignedShort], vm_2))
        _, _, _, _ -> Error(Nil)
      }
    "SPI" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Comments", [LongString], vm_1))
        0x00, 0x09, _, 0x15 ->
          Ok(Item(tag, "Unique Identifier", [LongString], vm_1))
        0x00, 0x09, _, 0x40 ->
          Ok(Item(tag, "Data Object Type", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x41 ->
          Ok(Item(tag, "Data Object Subtype", [ShortString], vm_1))
        0x00, 0x11, _, 0x10 -> Ok(Item(tag, "Organ", [LongString], vm_1))
        0x00, 0x11, _, 0x15 ->
          Ok(Item(tag, "Allergy Indication", [LongString], vm_1))
        0x00, 0x11, _, 0x20 -> Ok(Item(tag, "Pregnancy", [CodeString], vm_1))
        0x00, 0x29, _, 0x60 ->
          Ok(Item(tag, "Compression Algorithm", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "DLX_EXAMS_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x15, _, 0x01 ->
          Ok(Item(tag, "Stenos_calibr_ratio;", [DecimalString], vm_1))
        0x00, 0x15, _, 0x02 ->
          Ok(Item(tag, "Stenos_magnification;", [DecimalString], vm_1))
        0x00, 0x15, _, 0x03 ->
          Ok(Item(tag, "Cardiac_calibr_ratio;", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS RA GEN" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x52 ->
          Ok(Item(tag, "Table Tilt", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x46 ->
          Ok(Item(tag, "InversNot Invers", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x7a ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x21, _, 0x30 ->
          Ok(Item(tag, "Images in All Scenes", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x86 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x66 ->
          Ok(Item(tag, "PERI Overlap Bottom", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x6a ->
          Ok(Item(tag, "XRay Data Valid", [UnsignedLong], vm_1))
        0x00, 0x11, _, 0x30 -> Ok(Item(tag, "Patient DOB", [LongString], vm_1))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "FramesPhase", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x32 ->
          Ok(Item(tag, "Stepping Direction", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x3c -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x2a ->
          Ok(Item(tag, "Number of Positions", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x78 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x3a -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x5a ->
          Ok(Item(tag, "Table Isocenter Height", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x94 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(tag, "PERI Total Scenes", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x44 ->
          Ok(Item(tag, "Image Transfer Delay", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x3e -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x28 ->
          Ok(Item(tag, "Mixed Pulse Mode", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x15 ->
          Ok(Item(tag, "Images in Study", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x34 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x8c ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x40 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x20 ->
          Ok(Item(tag, "Scenes in Study", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x98 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x58 ->
          Ok(Item(tag, "Table Side Offset", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x9a ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x48 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x76 ->
          Ok(Item(tag, "Filling Average Factor", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x64 ->
          Ok(Item(tag, "PERI Overlap Top", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x26 ->
          Ok(Item(tag, "Acquisition Index", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x4c ->
          Ok(Item(tag, "Blanking Circle Diameter", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x24 -> Ok(Item(tag, "Scene Name", [LongString], vm_1))
        0x00, 0x19, _, 0x38 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x2c ->
          Ok(Item(tag, "Number of Phases", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x9e ->
          Ok(Item(tag, "Nativ Review Flag", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x56 ->
          Ok(Item(tag, "Table Longitudinal Position", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "Acquired Plane", [CodeString], vm_1))
        0x00, 0x19, _, 0x7c ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x54 ->
          Ok(Item(tag, "Table Axis Rotation", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x8a ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x11, _, 0x20 ->
          Ok(Item(tag, "Total Fluoro TimePatient", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x9c ->
          Ok(Item(tag, "II Level CalibrationFactor", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "Stand Data Valid", [UnsignedShort], vm_1))
        0x00, 0x11, _, 0x25 ->
          Ok(Item(tag, "Dose Area ProductPatient", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x36 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x2e ->
          Ok(Item(tag, "Framerate for 8 Positions", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x92 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x5e ->
          Ok(Item(tag, "Collimation Data Valid", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x5c -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x25 ->
          Ok(Item(tag, "Images in Photofile", [UnsignedShort], vm_1))
        0x00, 0x11, _, 0x35 ->
          Ok(Item(tag, "Patient Initial Puck Counter", [LongString], vm_1))
        0x00, 0x19, _, 0x74 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x7e ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x22 ->
          Ok(Item(tag, "ReferencePhotofile Flag", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x68 ->
          Ok(Item(tag, "Raw Image Number", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x20 -> Ok(Item(tag, "Scene Flag", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x42 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x8e ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x21, _, 0x40 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x88 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "PERI Sequence Number", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x96 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x72 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x4a -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x84 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x11, _, 0x40 ->
          Ok(Item(tag, "Patient Initial Position", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "RadWorksTBR" ->
      case g0, g1, e0, e1 {
        0x31, 0x11, _, 0x02 ->
          Ok(Item(tag, "AMI Compression Type (RET)", [CodeString], vm_1))
        0x31, 0x11, _, 0xff -> Ok(Item(tag, "<internal", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_DL_FRAME_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x25, _, 0x36 ->
          Ok(Item(tag, "Collimator Up Horizontal Edge", [IntegerString], vm_1))
        0x00, 0x25, _, 0x30 ->
          Ok(Item(tag, "Fov Dimension", [IntegerString], vm_1))
        0x00, 0x25, _, 0x1b ->
          Ok(Item(tag, "Table Vertical Position", [DecimalString], vm_1))
        0x00, 0x25, _, 0x3a ->
          Ok(Item(tag, "Contour Filter Angle", [UnsignedLong], vm_1))
        0x00, 0x25, _, 0x3c ->
          Ok(Item(tag, "Internal Label Frame", [CodeString], vm_1))
        0x00, 0x25, _, 0x2b ->
          Ok(Item(tag, "Spectral Filter Znb", [IntegerString], vm_1))
        0x00, 0x25, _, 0x1e ->
          Ok(Item(tag, "Beam Cover Area", [IntegerString], vm_1))
        0x00, 0x25, _, 0x1c ->
          Ok(Item(tag, "Table Longitudinal Position", [DecimalString], vm_1))
        0x00, 0x25, _, 0x06 ->
          Ok(Item(tag, "Positioner Primary Angle", [DecimalString], vm_1))
        0x00, 0x25, _, 0x39 ->
          Ok(Item(tag, "Contour Filter Distance", [IntegerString], vm_1))
        0x00, 0x25, _, 0x24 ->
          Ok(Item(tag, "Pw Commanded", [DecimalString], vm_1))
        0x00, 0x25, _, 0x10 ->
          Ok(Item(tag, "Pivot Angle", [DecimalString], vm_1))
        0x00, 0x25, _, 0x23 ->
          Ok(Item(tag, "Mas Commanded", [DecimalString], vm_1))
        0x00, 0x25, _, 0x38 ->
          Ok(Item(tag, "Vertices Polygonal Collimator", [IntegerString], vm_1))
        0x00, 0x25, _, 0x02 -> Ok(Item(tag, "Frame Id", [IntegerString], vm_1))
        0x00, 0x25, _, 0x26 ->
          Ok(Item(tag, "Sensor Feedback", [DecimalString], vm_1))
        0x00, 0x25, _, 0x04 ->
          Ok(Item(tag, "Distance Source To Patient", [DecimalString], vm_1))
        0x00, 0x25, _, 0x22 ->
          Ok(Item(tag, "Kvp Commanded", [DecimalString], vm_1))
        0x00, 0x25, _, 0x0b ->
          Ok(Item(tag, "Target Cnr", [DecimalString], vm_1))
        0x00, 0x25, _, 0x29 ->
          Ok(Item(tag, "Contrast Commanded", [DecimalString], vm_1))
        0x00, 0x25, _, 0x05 ->
          Ok(Item(tag, "Distance Source To Skin", [DecimalString], vm_1))
        0x00, 0x25, _, 0x07 ->
          Ok(Item(tag, "Positioner Secondary Angle", [DecimalString], vm_1))
        0x00, 0x25, _, 0x1f ->
          Ok(Item(tag, "Kvp Actual", [DecimalString], vm_1))
        0x00, 0x25, _, 0x2d ->
          Ok(Item(tag, "Spectral Filter Density", [DecimalString], vm_1))
        0x00, 0x25, _, 0x1a -> Ok(Item(tag, "Arc Angle", [DecimalString], vm_1))
        0x00, 0x25, _, 0x2c ->
          Ok(Item(tag, "Spectral Filter Weight", [DecimalString], vm_1))
        0x00, 0x25, _, 0x09 ->
          Ok(Item(tag, "Larm Angle", [DecimalString], vm_1))
        0x00, 0x25, _, 0x2f ->
          Ok(Item(tag, "Spectral Filter Status", [IntegerString], vm_1))
        0x00, 0x25, _, 0x37 ->
          Ok(Item(tag, "Collimator Low Horizontal Edge", [IntegerString], vm_1))
        0x00, 0x25, _, 0x28 ->
          Ok(Item(tag, "Cnr Commanded", [DecimalString], vm_1))
        0x00, 0x25, _, 0x03 ->
          Ok(Item(tag, "Distance Source To Detector", [DecimalString], vm_1))
        0x00, 0x25, _, 0x3b ->
          Ok(Item(tag, "Table Rotation Status", [CodeString], vm_1))
        0x00, 0x25, _, 0x27 ->
          Ok(Item(tag, "Target Entrance Dose", [DecimalString], vm_1))
        0x00, 0x25, _, 0x2a ->
          Ok(Item(tag, "Ept Actual", [DecimalString], vm_1))
        0x00, 0x25, _, 0x35 ->
          Ok(Item(tag, "Collimator Right Vertical Edge", [IntegerString], vm_1))
        0x00, 0x25, _, 0x34 ->
          Ok(Item(tag, "Collimator Left Vertical Edge", [IntegerString], vm_1))
        0x00, 0x25, _, 0x1d ->
          Ok(Item(tag, "Table Lateral Position", [DecimalString], vm_1))
        0x00, 0x25, _, 0x25 -> Ok(Item(tag, "Grid", [CodeString], vm_1))
        0x00, 0x25, _, 0x0a -> Ok(Item(tag, "Frame Sequence", [Sequence], vm_1))
        0x00, 0x25, _, 0x20 ->
          Ok(Item(tag, "Mas Actual", [DecimalString], vm_1))
        0x00, 0x25, _, 0x33 ->
          Ok(Item(tag, "Fov Origin", [IntegerString], vm_1))
        0x00, 0x25, _, 0x21 -> Ok(Item(tag, "Pw Actual", [DecimalString], vm_1))
        0x00, 0x25, _, 0x08 ->
          Ok(Item(tag, "Beam Orientation", [IntegerString], vm_1))
        0x00, 0x25, _, 0x2e ->
          Ok(Item(tag, "Spectral Filter Thickness", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "ACUSON:1.2.840.113680.1.0:7f10" ->
      case g0, g1, e0, e1 {
        0x7f, 0xdf, _, 0x34 ->
          Ok(Item(tag, "Gamma coefficient", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x8c -> Ok(Item(tag, "ECG Sample Size", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x64 ->
          Ok(Item(tag, "CD Velocity Scale Max", [Unknown], vm_1))
        0x7f, 0xdf, _, 0xf5 -> Ok(Item(tag, "Teaching Study", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x80 ->
          Ok(Item(tag, "B-mode 1D Post Processing Curve", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x7f -> Ok(Item(tag, "B Delta", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x93 ->
          Ok(Item(tag, "Perspective Capture Type", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x69 ->
          Ok(Item(tag, "CD Pan Box Min X0", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x36 ->
          Ok(Item(tag, "Persistence adaptive flag", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x28 ->
          Ok(Item(tag, "CD Color Mix Points X1", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x50 ->
          Ok(Item(tag, "Capture Type Name", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x6a ->
          Ok(Item(tag, "CD Pan Box Min Y0", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x87 ->
          Ok(Item(tag, "Last Destruction Timestamp", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x0d -> Ok(Item(tag, "B-Color-On Flag", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x88 ->
          Ok(Item(tag, "Pixels Per Second", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x6f ->
          Ok(Item(tag, "CPS Balance Setting", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x67 -> Ok(Item(tag, "CD Balance", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x54 ->
          Ok(Item(tag, "Number of Capture Types", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x66 -> Ok(Item(tag, "CD Frequency", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x20 -> Ok(Item(tag, "Left angle", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x7d ->
          Ok(Item(tag, "B-mode Post Processing", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x8b ->
          Ok(Item(tag, "ECG Sample Count", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x10 ->
          Ok(Item(tag, "Acquisition Type:", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x40 ->
          Ok(Item(tag, "Observation Date Time SQ", [Unknown], vm_1))
        0x7f, 0xdf, _, 0xf1 -> Ok(Item(tag, "Trigger Mask.", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x38 -> Ok(Item(tag, "Persistence ID", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x73 ->
          Ok(Item(tag, "B-mode Dynamic Range", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x26 -> Ok(Item(tag, "Color Invert", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x78 ->
          Ok(Item(tag, "B-mode Display Depth End", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x62 ->
          Ok(Item(tag, "CD Dynamic Range", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x6c ->
          Ok(Item(tag, "CD Pan Box Min Y1", [Unknown], vm_1))
        0x7f, 0xdf, _, 0xf6 -> Ok(Item(tag, "Series Base UID", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x72 ->
          Ok(Item(tag, "B-mode Frequency", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x76 ->
          Ok(Item(tag, "B-mode Persistence", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x18 ->
          Ok(Item(tag, "Transformation Matrix Sequence", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x8d -> Ok(Item(tag, "ECG Data Value", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x7c ->
          Ok(Item(tag, "B Preset Image Look", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x8a ->
          Ok(Item(tag, "ECG Sampling Interval (milliseconds)", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x7e -> Ok(Item(tag, "B Edge", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x6b ->
          Ok(Item(tag, "CD Pan Box Min X1", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x33 ->
          Ok(Item(tag, "Alpha coefficient", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x52 ->
          Ok(Item(tag, "Capture Type Number", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x75 ->
          Ok(Item(tag, "B-mode Space Time", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x89 ->
          Ok(Item(tag, "ECG Reference Timestamp", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x8f ->
          Ok(Item(tag, "Live Dual Mode Indicator", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x71 ->
          Ok(Item(tag, "3DCard Xdcr Angle", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x81 ->
          Ok(Item(tag, "B-mode Delta (ECRI) Map Diagonal", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x92 ->
          Ok(Item(tag, "3DCard HRWave Max", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x83 ->
          Ok(Item(tag, "Microseconds in unit timestamp", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x02 ->
          Ok(Item(tag, "Acuson Region Type", [Unknown], vm_1))
        0x7f, 0xdf, _, 0xf4 ->
          Ok(Item(tag, "Last Modify Time", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x82 ->
          Ok(Item(tag, "Bytes Per Timestamp", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x30 -> Ok(Item(tag, "Persistence SQ", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x25 -> Ok(Item(tag, "Full Colormap.", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x24 ->
          Ok(Item(tag, "Color Map Family", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x63 ->
          Ok(Item(tag, "CD Velocity Scale Min", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x70 ->
          Ok(Item(tag, "3DCard Step Angle", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x6d -> Ok(Item(tag, "CPS Map Type", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x2c -> Ok(Item(tag, "Color Accent", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x32 ->
          Ok(Item(tag, "Persistence Coefficient Mode", [Unknown], vm_1))
        0x7f, 0xdf, _, 0xf3 ->
          Ok(Item(tag, "Last Modify Date", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x0f ->
          Ok(Item(tag, "Acuson Mechanical Apex Y", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x6e -> Ok(Item(tag, "CPS Map Data", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x2b ->
          Ok(Item(tag, "CD Color Mix Points Y2", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x31 ->
          Ok(Item(tag, "Persistence Mode", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x79 -> Ok(Item(tag, "B-mode Res Mode", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x86 ->
          Ok(Item(tag, "R-Wave Timestamp", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x65 -> Ok(Item(tag, "CD Color Mode", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x35 ->
          Ok(Item(tag, "Persistence Time Flag", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x84 ->
          Ok(Item(tag, "Start Stopwatch Timestamp", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x77 ->
          Ok(Item(tag, "B-mode Display Depth Start", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x7a ->
          Ok(Item(tag, "B-mode Preset Application", [Unknown], vm_1))
        0x7f, 0xdf, _, 0xf2 -> Ok(Item(tag, "Study Directory", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x7b -> Ok(Item(tag, "Image Spec Name", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x0e ->
          Ok(Item(tag, "Acuson Mechanical Apex X", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x61 -> Ok(Item(tag, "CD PRI", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x85 ->
          Ok(Item(tag, "Acoustic Frame Timestamp", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x0c ->
          Ok(Item(tag, "Acuson Image Apex Y", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x01 -> Ok(Item(tag, "Image Format", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x0b ->
          Ok(Item(tag, "Acuson Image Apex X", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x8e ->
          Ok(Item(tag, "Contrast/Active Image Indicator", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x90 ->
          Ok(Item(tag, "3DCard Clipset ID", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x2a ->
          Ok(Item(tag, "CD Color Mix Points X2", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x22 -> Ok(Item(tag, "Right angle", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x68 -> Ok(Item(tag, "CD Delta", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x27 -> Ok(Item(tag, "Color Baseline", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x91 ->
          Ok(Item(tag, "3DCard HRWave Min", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x29 ->
          Ok(Item(tag, "CD Color Mix Points Y1", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x37 ->
          Ok(Item(tag, "Persistence Frame Rate", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x00 ->
          Ok(Item(tag, "Lossy Compression Ratio", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x60 ->
          Ok(Item(tag, "CD Steering Angle", [Unknown], vm_1))
        0x7f, 0xdf, _, 0x74 ->
          Ok(Item(tag, "B-mode Frame Rate", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Imaging Dynamics Company Ltd." ->
      case g0, g1, e0, e1 {
        0x43, 0x21, _, 0x05 -> Ok(Item(tag, "Custom Tag", [Unknown], vm_1))
        0x43, 0x21, _, 0x10 -> Ok(Item(tag, "Custom Tag", [Unknown], vm_1))
        0x43, 0x21, _, 0x41 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x43, 0x21, _, 0x42 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x43, 0x21, _, 0x50 ->
          Ok(Item(tag, "Custom Tag", [DecimalString], vm_1))
        0x43, 0x21, _, 0x51 ->
          Ok(Item(tag, "Custom Tag", [DecimalString], vm_1))
        0x43, 0x21, _, 0x64 -> Ok(Item(tag, "Custom Tag", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AMICAS0" ->
      case g0, g1, e0, e1 {
        0x00, 0x23, _, 0x01 -> Ok(Item(tag, "", [UniqueIdentifier], vm_1))
        0x00, 0x23, _, 0x08 -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x10 -> Ok(Item(tag, "", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x16 -> Ok(Item(tag, "", [SignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS RIS" ->
      case g0, g1, e0, e1 {
        0x00, 0x11, _, 0x10 -> Ok(Item(tag, "Patient UID", [LongString], vm_1))
        0x00, 0x11, _, 0x11 -> Ok(Item(tag, "Patient ID", [LongString], vm_1))
        0x00, 0x11, _, 0x20 ->
          Ok(Item(tag, "Patient Registration Date", [Date], vm_1))
        0x00, 0x11, _, 0x21 ->
          Ok(Item(tag, "Patient Registration Time", [Time], vm_1))
        0x00, 0x11, _, 0x30 ->
          Ok(Item(tag, "Patient NameRIS", [PersonName], vm_1))
        0x00, 0x11, _, 0x31 ->
          Ok(Item(tag, "Patient Prename", [PersonName], vm_1))
        0x00, 0x11, _, 0x40 ->
          Ok(Item(tag, "Patient Hospital Status", [LongString], vm_1))
        0x00, 0x11, _, 0x41 ->
          Ok(Item(tag, "Medical Alerts", [LongString], vm_1))
        0x00, 0x11, _, 0x42 ->
          Ok(Item(tag, "Contrast Allergy", [LongString], vm_1))
        0x00, 0x31, _, 0x10 -> Ok(Item(tag, "Request UID", [LongString], vm_1))
        0x00, 0x31, _, 0x45 ->
          Ok(Item(tag, "Requesting Physician", [LongString], vm_1))
        0x00, 0x31, _, 0x50 ->
          Ok(Item(tag, "Requested Physician", [LongString], vm_1))
        0x00, 0x33, _, 0x10 ->
          Ok(Item(tag, "Patient Study UID", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "IMS s.r.l. Biopsy Private Code" ->
      case g0, g1, e0, e1 {
        0x12, 0x69, _, 0x01 ->
          Ok(Item(tag, "Biopsy Image", [IntegerString], vm_1))
        0x12, 0x69, _, 0x10 ->
          Ok(Item(tag, "Biopsy Markers X", [IntegerString], vm_1_to_n))
        0x12, 0x69, _, 0x11 ->
          Ok(Item(tag, "Biopsy Markers Y", [IntegerString], vm_1_to_n))
        0x12, 0x69, _, 0x12 ->
          Ok(Item(tag, "Biopsy Markers Number", [IntegerString], vm_1))
        0x12, 0x69, _, 0x20 ->
          Ok(Item(tag, "Biopsy Area Left Border", [IntegerString], vm_1))
        0x12, 0x69, _, 0x21 ->
          Ok(Item(tag, "Biopsy Area Right Border", [IntegerString], vm_1))
        0x12, 0x69, _, 0x22 ->
          Ok(Item(tag, "Biopsy Area Top Border", [IntegerString], vm_1))
        0x12, 0x69, _, 0x23 ->
          Ok(Item(tag, "Biopsy Area Bottom Border", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Picker NM Private Group" ->
      case g0, g1, e0, e1 {
        0x70, 0x01, _, 0x01 ->
          Ok(Item(tag, "Private", [UniqueIdentifier], vm_1))
        0x70, 0x01, _, 0x02 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x03 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x04 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x05 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x06 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x07 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x08 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x09 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x10 -> Ok(Item(tag, "Private", [Sequence], vm_1))
        0x70, 0x01, _, 0x11 -> Ok(Item(tag, "Private", [LongString], vm_1))
        0x70, 0x01, _, 0x12 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x13 -> Ok(Item(tag, "Private", [UnsignedShort], vm_1))
        0x70, 0x01, _, 0x14 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x15 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x16 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x17 ->
          Ok(Item(
            tag,
            "Contains a text string that includes some of the same information that appears on the Odyssey Clinical Index (image directory) for this Image.",
            [LongString],
            vm_1,
          ))
        0x70, 0x43, _, 0x00 -> Ok(Item(tag, "Private.", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SVISION" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x03 ->
          Ok(Item(tag, "Ref. Image Instance UID", [LongString], vm_1))
        0x00, 0x17, _, 0x00 ->
          Ok(Item(tag, "Extended Body Part", [LongString], vm_1))
        0x00, 0x29, _, 0x04 ->
          Ok(Item(tag, "Rel. Presentation State Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Bucky Format", [IntegerString], vm_1))
        0x00, 0x21, _, 0x30 ->
          Ok(Item(tag, "Lower Window Offset", [DecimalString], vm_1))
        0x00, 0x17, _, 0xf0 ->
          Ok(Item(tag, "Images SOP Class", [IntegerString], vm_1))
        0x00, 0x19, _, 0x93 ->
          Ok(Item(tag, "Tube Turn Angle", [IntegerString], vm_1))
        0x00, 0x21, _, 0x92 ->
          Ok(Item(tag, "Shape Factor", [DecimalString], vm_1))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "Bucky Grid", [IntegerString], vm_1))
        0x00, 0x21, _, 0x90 ->
          Ok(Item(tag, "Brightness", [DecimalString], vm_1))
        0x00, 0x19, _, 0x78 ->
          Ok(Item(tag, "Filter Thickness 1", [DecimalString], vm_1))
        0x00, 0x23, _, 0x00 ->
          Ok(Item(tag, "Image Laterality", [LongString], vm_1))
        0x00, 0x19, _, 0xb1 ->
          Ok(Item(tag, "Shift Reference Value", [IntegerString], vm_1))
        0x00, 0x23, _, 0x02 ->
          Ok(Item(tag, "Burned In Annotation", [IntegerString], vm_1))
        0x00, 0x19, _, 0x94 ->
          Ok(Item(tag, "Stand drive level", [IntegerString], vm_1))
        0x00, 0x21, _, 0x51 ->
          Ok(Item(tag, "Max. Window Latitude", [DecimalString], vm_1))
        0x00, 0x27, _, 0x00 ->
          Ok(Item(tag, "Number of Series", [IntegerString], vm_1))
        0x00, 0x21, _, 0x50 ->
          Ok(Item(tag, "Min. Window Latitude", [DecimalString], vm_1))
        0x00, 0x25, _, 0x06 -> Ok(Item(tag, "New Image", [IntegerString], vm_1))
        0x00, 0x27, _, 0x13 -> Ok(Item(tag, "Newest Study", [DateTime], vm_1))
        0x00, 0x21, _, 0x11 ->
          Ok(Item(tag, "Threshold C-Algorithm", [DecimalString], vm_1))
        0x00, 0x25, _, 0x02 ->
          Ok(Item(tag, "Cut Out Image", [IntegerString], vm_1))
        0x00, 0x25, _, 0x01 ->
          Ok(Item(tag, "Not Processed Image", [IntegerString], vm_1))
        0x00, 0x19, _, 0x28 ->
          Ok(Item(tag, "Tube Number", [IntegerString], vm_1))
        0x00, 0x21, _, 0x10 ->
          Ok(Item(tag, "Find Range Algorithm", [LongString], vm_1))
        0x00, 0x25, _, 0x04 ->
          Ok(Item(tag, "Stored Image", [IntegerString], vm_1))
        0x00, 0x19, _, 0xa0 ->
          Ok(Item(tag, "Extended Exposure Time", [DecimalString], vm_1))
        0x00, 0x21, _, 0x60 ->
          Ok(Item(tag, "Decomposition Layer", [DecimalString], vm_1))
        0x00, 0x19, _, 0x34 -> Ok(Item(tag, "Focus", [IntegerString], vm_1))
        0x00, 0x23, _, 0x01 ->
          Ok(Item(tag, "Letter Position", [IntegerString], vm_1))
        0x00, 0x19, _, 0x40 ->
          Ok(Item(tag, "Collimator Distance X", [IntegerString], vm_1))
        0x00, 0x21, _, 0x31 ->
          Ok(Item(tag, "Upper Window Offset", [DecimalString], vm_1))
        0x00, 0x21, _, 0x20 ->
          Ok(Item(tag, "Sensometric Curve", [LongString], vm_1))
        0x00, 0x19, _, 0x00 -> Ok(Item(tag, "AEC Field", [IntegerString], vm_1))
        0x00, 0x25, _, 0x05 ->
          Ok(Item(tag, "Retrieved Image", [IntegerString], vm_1))
        0x00, 0x25, _, 0x07 ->
          Ok(Item(tag, "Media Stored Image", [IntegerString], vm_1))
        0x00, 0x21, _, 0x41 ->
          Ok(Item(tag, "Max. Printable Density", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb0 ->
          Ok(Item(tag, "Dose Indicator", [IntegerString], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Patient Thickness", [IntegerString], vm_1))
        0x00, 0x21, _, 0x91 -> Ok(Item(tag, "Contrast", [DecimalString], vm_1))
        0x00, 0x19, _, 0x38 -> Ok(Item(tag, "Age Group", [IntegerString], vm_1))
        0x00, 0x17, _, 0x20 ->
          Ok(Item(tag, "Scheduled Procedure Step", [Sequence], vm_1))
        0x00, 0x21, _, 0x02 ->
          Ok(Item(tag, "Edge Contrast Boosting", [DecimalString], vm_1))
        0x00, 0x19, _, 0x75 ->
          Ok(Item(tag, "Filter Material 2", [LongString], vm_1))
        0x00, 0x17, _, 0xa0 ->
          Ok(Item(tag, "Fixed Grid System", [IntegerString], vm_1))
        0x00, 0x29, _, 0x00 ->
          Ok(Item(tag, "Key Note Instance UID", [IntegerString], vm_1))
        0x00, 0x19, _, 0x90 -> Ok(Item(tag, "Desk Command", [LongString], vm_1))
        0x00, 0x25, _, 0x09 ->
          Ok(Item(tag, "Image Stitched Manually", [IntegerString], vm_1))
        0x00, 0x21, _, 0x52 ->
          Ok(Item(tag, "Rel. Window Alignment", [DecimalString], vm_1))
        0x00, 0x19, _, 0x18 ->
          Ok(Item(tag, "Beam Distance", [IntegerString], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "Bucky Height", [IntegerString], vm_1))
        0x00, 0x27, _, 0x11 -> Ok(Item(tag, "Newest Series", [DateTime], vm_1))
        0x00, 0x21, _, 0x03 ->
          Ok(Item(tag, "Latitude Reduction", [DecimalString], vm_1))
        0x00, 0x29, _, 0x02 ->
          Ok(Item(tag, "Referenced Image SOP Class", [IntegerString], vm_1))
        0x00, 0x19, _, 0x79 ->
          Ok(Item(tag, "Filter Thickness 2", [DecimalString], vm_1))
        0x00, 0x27, _, 0x01 ->
          Ok(Item(tag, "Number of Studies", [IntegerString], vm_1))
        0x00, 0x19, _, 0x41 ->
          Ok(Item(tag, "Collimator Distance Y", [IntegerString], vm_1))
        0x00, 0x23, _, 0xf0 ->
          Ok(Item(tag, "Image SOP Class", [IntegerString], vm_1))
        0x00, 0x19, _, 0x16 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x02 ->
          Ok(Item(tag, "AEC Density", [IntegerString], vm_1))
        0x00, 0x17, _, 0x10 ->
          Ok(Item(tag, "Extended View Position", [LongString], vm_1))
        0x00, 0x21, _, 0x00 ->
          Ok(Item(tag, "Noise Reduction", [DecimalString], vm_1))
        0x00, 0x25, _, 0x03 ->
          Ok(Item(tag, "Duplicated Image", [IntegerString], vm_1))
        0x00, 0x19, _, 0x92 ->
          Ok(Item(tag, "Central Beam Y", [IntegerString], vm_1))
        0x00, 0x23, _, 0x03 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x01 ->
          Ok(Item(tag, "AEC Film Screen", [IntegerString], vm_1))
        0x00, 0x19, _, 0x69 ->
          Ok(Item(tag, "Collimator Angle", [IntegerString], vm_1))
        0x00, 0x19, _, 0x74 ->
          Ok(Item(tag, "Filter Material 1", [LongString], vm_1))
        0x00, 0x27, _, 0x12 -> Ok(Item(tag, "Oldest Study", [DateTime], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Filter Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0xa8 ->
          Ok(Item(tag, "Extended X-ray Tube Current", [DecimalString], vm_1))
        0x00, 0x25, _, 0x0a ->
          Ok(Item(tag, "Image Stitched Automatically", [IntegerString], vm_1))
        0x00, 0x25, _, 0x00 ->
          Ok(Item(tag, "Original Image", [IntegerString], vm_1))
        0x00, 0x19, _, 0xa1 ->
          Ok(Item(tag, "Actual Exposure Time", [DecimalString], vm_1))
        0x00, 0x19, _, 0x68 ->
          Ok(Item(tag, "C-Arm Angle", [IntegerString], vm_1))
        0x00, 0x27, _, 0x10 -> Ok(Item(tag, "Oldest Series", [DateTime], vm_1))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(tag, "Workstation Number", [IntegerString], vm_1))
        0x00, 0x25, _, 0x20 ->
          Ok(Item(tag, "Source Image File", [LongString], vm_1))
        0x00, 0x21, _, 0x40 ->
          Ok(Item(tag, "Min. Printable Density", [DecimalString], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Bucky Angle", [IntegerString], vm_1))
        0x00, 0x19, _, 0x81 ->
          Ok(Item(tag, "Object Position", [IntegerString], vm_1))
        0x00, 0x25, _, 0x21 -> Ok(Item(tag, "Source UID", [LongString], vm_1))
        0x00, 0x25, _, 0x08 ->
          Ok(Item(tag, "Image State", [IntegerString], vm_1))
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Storage State", [IntegerString], vm_1))
        0x00, 0x19, _, 0xf0 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x91 ->
          Ok(Item(tag, "Central Beam X", [IntegerString], vm_1))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Contrast Amplification", [DecimalString], vm_1))
        0x00, 0x29, _, 0x05 ->
          Ok(Item(tag, "Rel. Presentation State UID", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Mortara_Inc" ->
      case g0, g1, e0, e1 {
        0x14, 0x55, _, 0x00 ->
          Ok(Item(tag, "ELI Interpretation Vector", [OtherWordString], vm_1))
        0x14, 0x55, _, 0x01 -> Ok(Item(tag, "Custom ID", [Unknown], vm_1))
        0x14, 0x55, _, 0x02 -> Ok(Item(tag, "Race", [UnlimitedText], vm_1))
        0x14, 0x55, _, 0x03 ->
          Ok(Item(tag, "Social Security Number", [UnlimitedText], vm_1))
        0x14, 0x55, _, 0x04 ->
          Ok(Item(tag, "Attending Physician", [UnlimitedText], vm_1))
        0x14, 0x55, _, 0x05 ->
          Ok(Item(tag, "Procedural Diagnosis", [UnlimitedText], vm_1))
        0x14, 0x55, _, 0x06 -> Ok(Item(tag, "Note1", [UnlimitedText], vm_1))
        0x14, 0x55, _, 0x07 -> Ok(Item(tag, "Note2", [UnlimitedText], vm_1))
        0x14, 0x55, _, 0x08 ->
          Ok(Item(tag, "Order Request Number", [LongString], vm_1))
        0x14, 0x55, _, 0x10 ->
          Ok(Item(tag, "Manufacturer Name", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-Private_ICS Release 1;6" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x03 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x15 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_2))
        0x00, 0x29, _, 0x04 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x66 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x37 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x2e -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x2f -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x0a -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x17 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x39 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x32 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x1d -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x43 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x06 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x48 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x36 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x5d ->
          Ok(Item(tag, "Unknown", [UnsignedLong], vm_1_to_n))
        0x00, 0x29, _, 0x44 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x1f ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x0f -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x4f -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x14 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x2b -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x2d -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x07 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x0d -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x3d -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x0b -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x02 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x21 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x69 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x24 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x5c -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x23 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x6d -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x67 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x5e -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x2a -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x68 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x0c -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x63 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x38 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x5f -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x2c -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x34 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x08 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x16 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x35 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x1a -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x65 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-Private_ICS Release 1;1" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x00 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0x05 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x06 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x21 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x22 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x23 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x24 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x25 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x26 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x30 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x29, _, 0x6b ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0xc1 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xcb ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0xcc ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0xcd -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0xd4 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0xd5 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0xd6 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "EMAGEON STUDY HOME" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_XR3DCAL_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "3Dcal image rows", [IntegerString], vm_1))
        0x00, 0x21, _, 0x02 ->
          Ok(Item(tag, "3Dcal image columns", [IntegerString], vm_1))
        0x00, 0x21, _, 0x03 ->
          Ok(Item(tag, "3Dcal field of view", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x04 ->
          Ok(Item(tag, "3Dcal acquisition date", [Date], vm_1))
        0x00, 0x21, _, 0x05 ->
          Ok(Item(tag, "3Dcal acquisition time", [Time], vm_1))
        0x00, 0x21, _, 0x06 ->
          Ok(Item(tag, "3Dcal calibration processing date", [Date], vm_1))
        0x00, 0x21, _, 0x07 ->
          Ok(Item(tag, "3Dcal calibration processing time", [Time], vm_1))
        0x00, 0x21, _, 0x08 ->
          Ok(Item(tag, "3Dcal L arm angle", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x09 ->
          Ok(Item(
            tag,
            "3Dcal Pivot angle vector",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x21, _, 0x0a ->
          Ok(Item(tag, "3Dcal C arm angle", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x0b ->
          Ok(Item(tag, "3Dcal matrix sequence", [Sequence], vm_1))
        0x00, 0x21, _, 0x0c ->
          Ok(Item(tag, "3Dcal matrix elements", [LongString], vm_1_to_n))
        0x00, 0x21, _, 0x0d ->
          Ok(Item(tag, "3Dcal algorithm version", [LongString], vm_1))
        0x00, 0x21, _, 0x0e ->
          Ok(Item(tag, "3Dcal 3D frame unit size", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x0f ->
          Ok(Item(tag, "3Dcal calibration mode", [LongString], vm_1))
        0x00, 0x21, _, 0x10 ->
          Ok(Item(
            tag,
            "3Dcal image frame origin row",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x21, _, 0x11 ->
          Ok(Item(
            tag,
            "3Dcal image frame origin column",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x21, _, 0x12 ->
          Ok(Item(
            tag,
            "3Dcal positioner pivot rotation speed",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x21, _, 0x13 ->
          Ok(Item(tag, "3Dcal number of images", [IntegerString], vm_1))
        0x00, 0x21, _, 0x14 ->
          Ok(Item(tag, "3Dcal Instance UID", [UniqueIdentifier], vm_1))
        0x00, 0x21, _, 0x15 ->
          Ok(Item(tag, "3Dcal image pixel spacing", [FloatingPointSingle], vm_2))
        0x00, 0x21, _, 0x16 ->
          Ok(Item(tag, "3Dcal centering mode", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AGFA" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x11 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x13 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x14 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x15 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Private Identification Code", [ShortString], vm_1))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "Identification Data (Note 2)", [LongString], vm_3))
        0x00, 0x19, _, 0x13 ->
          Ok(Item(tag, "Sensitometry Name", [LongString], vm_1))
        0x00, 0x19, _, 0x14 ->
          Ok(Item(tag, "Window/Level List (Note 3)", [ShortText], vm_3))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "Dose Monitoring List", [LongString], vm_1))
        0x00, 0x19, _, 0x16 ->
          Ok(Item(tag, "Other Info (Note 5)", [LongString], vm_3))
        0x00, 0x19, _, 0x1a ->
          Ok(Item(tag, "Clipped Exposure Deviation", [LongString], vm_1))
        0x00, 0x19, _, 0x1b ->
          Ok(Item(tag, "Logarithmic PLT Full Scale", [LongString], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Total number of series", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x61 ->
          Ok(Item(tag, "Session Number", [ShortString], vm_1))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(tag, "ID Station name", [ShortString], vm_1))
        0x00, 0x19, _, 0x65 ->
          Ok(Item(
            tag,
            "Number of images in study to be transmitted (only sent with autoverify: on)",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Total number of images", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Geometrical Transformations", [ShortText], vm_1))
        0x00, 0x19, _, 0x81 -> Ok(Item(tag, "Roam Origin", [ShortText], vm_1))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(tag, "Zoom factor", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x93 -> Ok(Item(tag, "Status", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Applicare/Print/Version 5.1" ->
      case g0, g1, e0, e1 {
        0x41, 0x01, _, 0x01 -> Ok(Item(tag, "<internal", [UnsignedLong], vm_1))
        0x41, 0x01, _, 0x02 -> Ok(Item(tag, "<internal", [Sequence], vm_1))
        0x41, 0x01, _, 0x03 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x41, 0x01, _, 0x04 -> Ok(Item(tag, "<internal", [UnsignedLong], vm_1))
        0x41, 0x01, _, 0x05 ->
          Ok(Item(tag, "<internal", [FloatingPointDouble], vm_1))
        0x41, 0x01, _, 0x06 -> Ok(Item(tag, "<internal", [UnsignedShort], vm_1))
        0x41, 0x01, _, 0x07 -> Ok(Item(tag, "<internal", [UnsignedShort], vm_1))
        0x41, 0x01, _, 0x08 -> Ok(Item(tag, "<internal", [UnsignedShort], vm_1))
        0x41, 0x01, _, 0x09 -> Ok(Item(tag, "<internal", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_GENIE_1" ->
      case g0, g1, e0, e1 {
        0x00, 0x11, _, 0x84 ->
          Ok(Item(tag, "Interpolation Center Y", [FloatingPointDouble], vm_1))
        0x00, 0x33, _, 0x18 -> Ok(Item(tag, "Time", [ShortString], vm_1))
        0x00, 0x11, _, 0x3d ->
          Ok(Item(tag, "Energy Peak (retired)", [SignedLong], vm_4))
        0x50, 0x01, _, 0x14 -> Ok(Item(tag, "StylePSize", [SignedLong], vm_1))
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Study Name", [LongString], vm_1))
        0x50, 0x01, _, 0x45 -> Ok(Item(tag, "SOPClassUID", [LongString], vm_1))
        0x00, 0x09, _, 0x2a ->
          Ok(Item(tag, "Number View Sets", [SignedLong], vm_1))
        0x50, 0x01, _, 0x59 ->
          Ok(Item(tag, "ShapePtsSpace", [SignedLong], vm_1_to_n))
        0x00, 0x11, _, 0x57 -> Ok(Item(tag, "FOV", [FloatingPointDouble], vm_2))
        0x00, 0x33, _, 0x08 ->
          Ok(Item(tag, "Xeleris Data Object Type", [CodeString], vm_1))
        0x00, 0x11, _, 0x7e ->
          Ok(Item(tag, "Ref Slice Width", [SignedLong], vm_1))
        0x00, 0x09, _, 0x44 ->
          Ok(Item(tag, "Num Views Acquired (retired)", [SignedLong], vm_1))
        0x00, 0x11, _, 0x2e ->
          Ok(Item(tag, "Pixel Overflow Flag", [SignedLong], vm_1))
        0x00, 0x11, _, 0x24 ->
          Ok(Item(tag, "FOV Mask Y Cutoff Distance", [SignedLong], vm_1))
        0x50, 0x01, _, 0x54 ->
          Ok(Item(tag, "Seeds", [FloatingPointDouble], vm_1_to_n))
        0x50, 0x01, _, 0x07 -> Ok(Item(tag, "CurveType", [SignedLong], vm_1))
        0x00, 0x33, _, 0x20 ->
          Ok(Item(tag, "BulkDataFormat", [LongText], vm_1_to_n))
        0x50, 0x01, _, 0x3a ->
          Ok(Item(tag, "Software version", [LongString], vm_1))
        0x50, 0x01, _, 0x60 ->
          Ok(Item(tag, "DatasetROIMapping", [LongString], vm_1_to_n))
        0x50, 0x01, _, 0x46 ->
          Ok(Item(tag, "SOPInstanceUID", [LongString], vm_1))
        0x00, 0x13, _, 0x13 ->
          Ok(Item(tag, "Xeleris Frame Sequence", [Sequence], vm_1))
        0x00, 0x11, _, 0x0c -> Ok(Item(tag, "Num Beats", [SignedLong], vm_1))
        0x00, 0x15, _, 0x17 ->
          Ok(Item(tag, "Preceding Beat", [UnsignedLong], vm_1))
        0x50, 0x01, _, 0x25 -> Ok(Item(tag, "TxtText", [LongString], vm_1))
        0x00, 0x13, _, 0x1c ->
          Ok(Item(tag, "Axial Acceptance Angle", [SignedLong], vm_1))
        0x00, 0x09, _, 0x41 ->
          Ok(Item(tag, "Patient Flags", [SignedLong], vm_1))
        0x00, 0x11, _, 0x42 ->
          Ok(Item(tag, "Rotation Angle", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x2a ->
          Ok(Item(tag, "Phase Duration (retired)", [FloatingPointDouble], vm_1))
        0x50, 0x01, _, 0x24 ->
          Ok(Item(tag, "TxtY", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x09, _, 0x11 -> Ok(Item(tag, "Study Flags", [SignedLong], vm_1))
        0x00, 0x11, _, 0x6a ->
          Ok(Item(tag, "Cursor Coordinates", [SignedLong], vm_1))
        0x50, 0x01, _, 0x0a -> Ok(Item(tag, "XUnits", [LongString], vm_1))
        0x00, 0x35, _, 0x01 ->
          Ok(Item(tag, "Start Angle", [FloatingPointDouble], vm_1_to_n))
        0x50, 0x01, _, 0x34 -> Ok(Item(tag, "CurveName", [LongString], vm_1))
        0x00, 0x09, _, 0x2f ->
          Ok(Item(tag, "Table Direction", [SignedLong], vm_1))
        0x00, 0x09, _, 0x43 ->
          Ok(Item(tag, "Patient Creation Time", [Time], vm_1))
        0x00, 0x11, _, 0x23 -> Ok(Item(tag, "Use FOV Mask", [SignedLong], vm_1))
        0x50, 0x01, _, 0x19 ->
          Ok(Item(tag, "SegStyleLine", [SignedLong], vm_1_to_n))
        0x00, 0x11, _, 0x30 ->
          Ok(Item(tag, "Picture Object Name", [LongString], vm_1))
        0x00, 0x11, _, 0x69 ->
          Ok(Item(tag, "Number of Cursors", [SignedLong], vm_1))
        0x50, 0x01, _, 0x4b ->
          Ok(Item(tag, "LineDashLength", [SignedLong], vm_1))
        0x00, 0x13, _, 0x11 ->
          Ok(Item(tag, "Source Translator", [SignedLong], vm_1))
        0x00, 0x11, _, 0x12 ->
          Ok(Item(tag, "Dataset Name", [LongString], vm_1_to_n))
        0x00, 0x11, _, 0x1d -> Ok(Item(tag, "Energy Range", [SignedLong], vm_1))
        0x00, 0x33, _, 0x33 ->
          Ok(Item(tag, "Number of triggers", [UnsignedLong], vm_1))
        0x00, 0x11, _, 0x0a -> Ok(Item(tag, "Series Type", [SignedLong], vm_1))
        0x50, 0x01, _, 0x41 -> Ok(Item(tag, "Modified", [SignedLong], vm_1))
        0x50, 0x01, _, 0x4d ->
          Ok(Item(tag, "Interactivity", [SignedLong], vm_1))
        0x50, 0x01, _, 0x31 ->
          Ok(Item(tag, "DerivedFromImageUID", [LongString], vm_1))
        0x00, 0x11, _, 0x71 ->
          Ok(Item(tag, "Back Proj Filter Type", [SignedLong], vm_1))
        0x00, 0x13, _, 0x1a ->
          Ok(Item(
            tag,
            "Copper Attenuator Thickness",
            [FloatingPointDouble],
            vm_1,
          ))
        0x00, 0x09, _, 0x33 ->
          Ok(Item(
            tag,
            "Rotational Continuous Speed",
            [FloatingPointDouble],
            vm_1,
          ))
        0x00, 0x11, _, 0x7b ->
          Ok(Item(tag, "Back Proj Filter Param", [ShortString], vm_1))
        0x00, 0x11, _, 0x65 ->
          Ok(Item(tag, "Reference Dataset UID", [LongString], vm_1))
        0x50, 0x01, _, 0x55 -> Ok(Item(tag, "Shape", [SignedLong], vm_1_to_n))
        0x00, 0x33, _, 0x1a ->
          Ok(Item(tag, "ProtocolName", [UnsignedLong], vm_1))
        0x00, 0x11, _, 0x27 -> Ok(Item(tag, "ROI Top Left", [SignedLong], vm_2))
        0x00, 0x11, _, 0x43 ->
          Ok(Item(tag, "Window Inverse Flag", [SignedLong], vm_1))
        0x50, 0x01, _, 0x5d -> Ok(Item(tag, "ROIFlags", [SignedLong], vm_1))
        0x50, 0x01, _, 0x36 -> Ok(Item(tag, "CurveUID", [LongString], vm_1))
        0x50, 0x01, _, 0x39 -> Ok(Item(tag, "Name", [LongString], vm_1))
        0x00, 0x11, _, 0x6d ->
          Ok(Item(tag, "Motion Curve UID", [UniqueIdentifier], vm_1))
        0x50, 0x01, _, 0x0d -> Ok(Item(tag, "Suspend", [SignedLong], vm_1))
        0x00, 0x13, _, 0x15 ->
          Ok(Item(tag, "Fscalar", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x7f ->
          Ok(Item(tag, "Ref Trans Pixel Volume", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x16 ->
          Ok(Item(tag, "Energy Number", [SignedLong], vm_1))
        0x00, 0x09, _, 0x2c ->
          Ok(Item(tag, "Series Comments", [LongString], vm_1))
        0x00, 0x11, _, 0x55 ->
          Ok(Item(tag, "Period", [FloatingPointDouble], vm_1))
        0x00, 0x55, _, 0x65 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x33, _, 0x1b ->
          Ok(Item(tag, "RelevantDataUID", [LongString], vm_1))
        0x00, 0x55, _, 0x63 ->
          Ok(Item(tag, "Xeleris Data Information Sequence", [Sequence], vm_1))
        0x00, 0x09, _, 0x29 ->
          Ok(Item(tag, "Number MG Time Slots", [SignedLong], vm_1))
        0x00, 0x11, _, 0x44 ->
          Ok(Item(tag, "Threshold Center", [FloatingPointDouble], vm_1))
        0x50, 0x01, _, 0x30 -> Ok(Item(tag, "ROIName", [LongString], vm_1))
        0x00, 0x11, _, 0x41 ->
          Ok(Item(tag, "Orientation Angle", [SignedLong], vm_1))
        0x50, 0x01, _, 0x0c -> Ok(Item(tag, "Edit", [SignedLong], vm_1))
        0x50, 0x01, _, 0x5b ->
          Ok(Item(tag, "ShapeCtrlPts", [FloatingPointDouble], vm_1_to_n))
        0x50, 0x01, _, 0x3b -> Ok(Item(tag, "StartDate", [ShortString], vm_1))
        0x50, 0x01, _, 0x4c ->
          Ok(Item(tag, "LineThickness", [SignedLong], vm_1))
        0x00, 0x15, _, 0x14 ->
          Ok(Item(tag, "ECT Phase Num", [SignedLong], vm_1))
        0x00, 0x11, _, 0x2f ->
          Ok(Item(tag, "Overflow Level", [SignedLong], vm_1))
        0x50, 0x01, _, 0x0f -> Ok(Item(tag, "StyleFill", [SignedLong], vm_1))
        0x00, 0x13, _, 0x1b ->
          Ok(Item(tag, "Det Ang Separation", [FloatingPointDouble], vm_1))
        0x50, 0x01, _, 0x44 -> Ok(Item(tag, "Name", [SignedLong], vm_1))
        0x00, 0x09, _, 0x23 ->
          Ok(Item(tag, "Initiation Type", [SignedLong], vm_1))
        0x50, 0x01, _, 0x22 -> Ok(Item(tag, "TextAnnots", [SignedLong], vm_1))
        0x00, 0x11, _, 0x75 ->
          Ok(Item(tag, "Recon Area", [FloatingPointDouble], vm_1))
        0x50, 0x01, _, 0x5c -> Ok(Item(tag, "ShapeCPSpace", [SignedLong], vm_1))
        0x00, 0x09, _, 0x21 -> Ok(Item(tag, "Series Flags", [SignedLong], vm_1))
        0x00, 0x55, _, 0x22 ->
          Ok(Item(
            tag,
            "Xeleris Detector Information Sequence",
            [Sequence],
            vm_1,
          ))
        0x00, 0x11, _, 0x3a ->
          Ok(Item(tag, "Picture Format", [SignedLong], vm_1))
        0x50, 0x01, _, 0x21 ->
          Ok(Item(tag, "SegAllowDirInt", [SignedLong], vm_1_to_n))
        0x00, 0x33, _, 0x22 ->
          Ok(Item(tag, "DoubleDataFormat", [LongText], vm_1_to_n))
        0x50, 0x01, _, 0x38 -> Ok(Item(tag, "Modified", [SignedLong], vm_1))
        0x50, 0x01, _, 0x01 -> Ok(Item(tag, "Modified", [SignedLong], vm_1))
        0x50, 0x01, _, 0x5f -> Ok(Item(tag, "Id", [SignedLong], vm_1))
        0x00, 0x33, _, 0x30 ->
          Ok(Item(tag, "Allocate trigger buffer", [UnsignedLong], vm_1))
        0x50, 0x01, _, 0x06 ->
          Ok(Item(tag, "SOPInstanceUID", [LongString], vm_1))
        0x00, 0x55, _, 0x64 ->
          Ok(Item(tag, "SDODoubleData SQ", [Sequence], vm_1))
        0x00, 0x09, _, 0x2b ->
          Ok(Item(tag, "Trigger History UID", [LongString], vm_1))
        0x50, 0x01, _, 0x3c ->
          Ok(Item(tag, "CompletionDate", [ShortString], vm_1))
        0x00, 0x11, _, 0x21 ->
          Ok(Item(tag, "Acq Zoom (retired)", [DecimalString], vm_1))
        0x50, 0x01, _, 0x4a -> Ok(Item(tag, "LineStyle", [SignedLong], vm_1))
        0x00, 0x11, _, 0x10 ->
          Ok(Item(tag, "Dataset Object Name", [LongString], vm_1))
        0x50, 0x01, _, 0x37 ->
          Ok(Item(tag, "ROIArea", [FloatingPointDouble], vm_1))
        0x50, 0x01, _, 0x4f -> Ok(Item(tag, "NameDisplay", [SignedLong], vm_1))
        0x00, 0x11, _, 0x8d ->
          Ok(Item(tag, "Three-D Zero In", [SignedLong], vm_1))
        0x00, 0x09, _, 0x38 ->
          Ok(Item(tag, "RR Window Width", [SignedLong], vm_1))
        0x50, 0x01, _, 0x1d ->
          Ok(Item(tag, "SegStylePoint", [SignedLong], vm_1_to_n))
        0x00, 0x11, _, 0x76 -> Ok(Item(tag, "Start View", [SignedLong], vm_1))
        0x50, 0x01, _, 0x56 ->
          Ok(Item(tag, "ShapeTilt", [FloatingPointDouble], vm_1_to_n))
        0x50, 0x01, _, 0x47 -> Ok(Item(tag, "NormalColor", [LongString], vm_1))
        0x00, 0x11, _, 0x64 ->
          Ok(Item(tag, "Spatial Orientation", [FloatingPointDouble], vm_1))
        0x00, 0x13, _, 0x19 ->
          Ok(Item(tag, "Transmission Mask Width", [FloatingPointDouble], vm_1))
        0x50, 0x01, _, 0x1e ->
          Ok(Item(tag, "SegStylePColour", [SignedLong], vm_1))
        0x00, 0x55, _, 0x13 ->
          Ok(Item(tag, "Xeleris Energy Window Range Sequence", [Sequence], vm_1))
        0x00, 0x09, _, 0x37 ->
          Ok(Item(tag, "Starting Heart Rate", [SignedLong], vm_1))
        0x50, 0x01, _, 0x1a ->
          Ok(Item(tag, "SegStyleFill", [SignedLong], vm_1_to_n))
        0x00, 0x09, _, 0x27 ->
          Ok(Item(tag, "Number Detectors", [SignedLong], vm_1))
        0x00, 0x11, _, 0x17 ->
          Ok(Item(tag, "RR Interval Window Number", [SignedLong], vm_1))
        0x50, 0x01, _, 0x04 -> Ok(Item(tag, "Srid", [SignedLong], vm_1))
        0x00, 0x11, _, 0x15 ->
          Ok(Item(tag, "Detector Number", [SignedLong], vm_1))
        0x50, 0x01, _, 0x09 -> Ok(Item(tag, "Legend", [LongString], vm_1))
        0x50, 0x01, _, 0x20 -> Ok(Item(tag, "SegName", [LongString], vm_1))
        0x00, 0x11, _, 0x85 ->
          Ok(Item(tag, "Quant Filter Flag", [SignedLong], vm_1))
        0x50, 0x01, _, 0x42 -> Ok(Item(tag, "Name", [LongString], vm_1))
        0x00, 0x11, _, 0x6c ->
          Ok(Item(tag, "Motion Threshold", [FloatingPointDouble], vm_1))
        0x00, 0x33, _, 0x24 -> Ok(Item(tag, "Description", [LongText], vm_1))
        0x00, 0x11, _, 0x62 ->
          Ok(Item(tag, "Linear FOV", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x33 ->
          Ok(Item(tag, "Energy Correct Name", [LongString], vm_1))
        0x00, 0x13, _, 0x20 ->
          Ok(Item(tag, "Accepted Beats Time", [FloatingPointDouble], vm_1))
        0x00, 0x09, _, 0x28 ->
          Ok(Item(tag, "Number RR Windows", [SignedLong], vm_1))
        0x00, 0x11, _, 0x22 ->
          Ok(Item(tag, "Acq Pan (retired)", [DecimalString], vm_1))
        0x00, 0x33, _, 0x1e ->
          Ok(Item(tag, "DoubleData", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x13, _, 0x24 ->
          Ok(Item(tag, "Series Accepted Beats", [SignedLong], vm_1))
        0x00, 0x11, _, 0x7d ->
          Ok(Item(tag, "Attenuation Coef", [ShortString], vm_1))
        0x00, 0x33, _, 0x1d -> Ok(Item(tag, "IntData", [SignedLong], vm_1_to_n))
        0x50, 0x01, _, 0x0b -> Ok(Item(tag, "YUnits", [LongString], vm_1))
        0x50, 0x01, _, 0x35 -> Ok(Item(tag, "DatasetName", [LongString], vm_1))
        0x00, 0x13, _, 0x21 ->
          Ok(Item(tag, "Threshold", [FloatingPointDouble], vm_2))
        0x00, 0x11, _, 0x34 ->
          Ok(Item(tag, "Spatial Correct Name", [LongString], vm_1))
        0x00, 0x09, _, 0x42 ->
          Ok(Item(tag, "Patient Creation Date", [Date], vm_1))
        0x00, 0x33, _, 0x36 ->
          Ok(Item(tag, "Trigger data", [OtherByteString], vm_1_to_n))
        0x00, 0x11, _, 0x0d ->
          Ok(Item(tag, "Radio Nuclide Name", [LongString], vm_1))
        0x00, 0x55, _, 0x12 ->
          Ok(Item(
            tag,
            "Xeleris Energy Window Information Sequence",
            [Sequence],
            vm_1,
          ))
        0x00, 0x11, _, 0x14 ->
          Ok(Item(tag, "Completion Time", [ShortString], vm_1))
        0x00, 0x11, _, 0x3e -> Ok(Item(tag, "FOV Shape", [SignedLong], vm_1))
        0x00, 0x11, _, 0x81 ->
          Ok(Item(tag, "Attenuation Threshold", [ShortString], vm_1))
        0x00, 0x09, _, 0x40 ->
          Ok(Item(tag, "Patient Object Name", [PersonName], vm_1))
        0x00, 0x11, _, 0x7c ->
          Ok(Item(tag, "Back Proj Filter Param 2", [ShortString], vm_1))
        0x50, 0x01, _, 0x12 -> Ok(Item(tag, "StylePoint", [SignedLong], vm_1))
        0x50, 0x01, _, 0x49 -> Ok(Item(tag, "FillPattern", [SignedLong], vm_1))
        0x00, 0x11, _, 0x0b ->
          Ok(Item(tag, "Effective Series Duration", [SignedLong], vm_1))
        0x50, 0x01, _, 0x53 -> Ok(Item(tag, "SeedSpace", [SignedLong], vm_1))
        0x00, 0x13, _, 0x17 ->
          Ok(Item(tag, "AutoTrack Width", [SignedLong], vm_1))
        0x50, 0x01, _, 0x0e -> Ok(Item(tag, "StyleLine", [SignedLong], vm_1))
        0x00, 0x11, _, 0x7a ->
          Ok(Item(tag, "Pre Filter Param 2", [ShortString], vm_1))
        0x50, 0x01, _, 0x08 -> Ok(Item(tag, "GraphType", [SignedLong], vm_1))
        0x00, 0x11, _, 0x36 ->
          Ok(Item(tag, "Uniformity Correct Name", [LongString], vm_1))
        0x00, 0x11, _, 0x66 ->
          Ok(Item(tag, "Starcam Reference Dataset", [ShortString], vm_1))
        0x00, 0x09, _, 0x2d ->
          Ok(Item(tag, "Track Beat Average", [SignedLong], vm_1))
        0x00, 0x11, _, 0x68 ->
          Ok(Item(tag, "Cursor Length", [SignedLong], vm_1))
        0x00, 0x33, _, 0x34 ->
          Ok(Item(tag, "Trigger size", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0x01 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x11, _, 0x78 ->
          Ok(Item(tag, "Dual Energy Processing", [SignedLong], vm_1))
        0x50, 0x01, _, 0x23 ->
          Ok(Item(tag, "TxtX", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x11, _, 0x1f ->
          Ok(Item(tag, "Image Orientation", [SignedLong], vm_1))
        0x00, 0x33, _, 0x17 -> Ok(Item(tag, "Date", [ShortString], vm_1))
        0x00, 0x33, _, 0x23 ->
          Ok(Item(tag, "StringDataFormat", [LongText], vm_1_to_n))
        0x00, 0x11, _, 0x3b ->
          Ok(Item(tag, "Pixel Scale", [FloatingPointDouble], vm_1))
        0x00, 0x15, _, 0x12 ->
          Ok(Item(tag, "Num ECT Phases", [SignedLong], vm_1))
        0x00, 0x11, _, 0x45 ->
          Ok(Item(tag, "Threshold Width", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x77 ->
          Ok(Item(tag, "Attenuation Type", [SignedLong], vm_1))
        0x00, 0x11, _, 0x38 -> Ok(Item(tag, "Byte Order", [SignedLong], vm_1))
        0x50, 0x01, _, 0x1f ->
          Ok(Item(tag, "SegStylePSize", [SignedLong], vm_1))
        0x00, 0x11, _, 0x61 -> Ok(Item(tag, "Image Size", [SignedLong], vm_1))
        0x00, 0x11, _, 0x79 ->
          Ok(Item(tag, "Pre Filter Param", [ShortString], vm_1))
        0x00, 0x11, _, 0x82 ->
          Ok(Item(tag, "Interpolation Distance", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x37 ->
          Ok(Item(tag, "Acquisition Specific Correction Name", [LongText], vm_1))
        0x50, 0x01, _, 0x32 ->
          Ok(Item(tag, "DerivedFromImages", [SignedLong], vm_1_to_n))
        0x00, 0x11, _, 0x8b -> Ok(Item(tag, "Three-D Zero", [SignedLong], vm_1))
        0x50, 0x01, _, 0x15 -> Ok(Item(tag, "Segments", [SignedLong], vm_1))
        0x00, 0x09, _, 0x24 ->
          Ok(Item(tag, "Initiation Delay", [SignedLong], vm_1))
        0x00, 0x09, _, 0x45 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x15, _, 0x15 -> Ok(Item(tag, "WB Scan Num", [SignedLong], vm_1))
        0x00, 0x11, _, 0x63 ->
          Ok(Item(tag, "Spatial Offset", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x74 ->
          Ok(Item(tag, "Recon Pan LR Offset", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x32 ->
          Ok(Item(tag, "Processing Parent UID", [LongString], vm_1))
        0x00, 0x09, _, 0x39 ->
          Ok(Item(tag, "RR Window Offset", [SignedLong], vm_1))
        0x00, 0x11, _, 0x6e -> Ok(Item(tag, "Recon Type", [SignedLong], vm_1))
        0x50, 0x01, _, 0x05 -> Ok(Item(tag, "SOPClassUID", [LongString], vm_1))
        0x00, 0x11, _, 0x25 ->
          Ok(Item(tag, "FOV Mask Cutoff Angle", [SignedLong], vm_1))
        0x00, 0x09, _, 0x26 ->
          Ok(Item(tag, "Number Energy Sets", [SignedLong], vm_1))
        0x00, 0x11, _, 0x89 ->
          Ok(Item(tag, "Rfmtr Trans Ref mm", [FloatingPointDouble], vm_1))
        0x00, 0x09, _, 0x30 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x11, _, 0x18 ->
          Ok(Item(tag, "MG Bin Number", [SignedLong], vm_1))
        0x00, 0x33, _, 0x19 ->
          Ok(Item(tag, "ProtocoldataFlags", [UnsignedLong], vm_1))
        0x00, 0x13, _, 0x12 -> Ok(Item(tag, "RAL Flags", [UnsignedLong], vm_1))
        0x00, 0x33, _, 0x1c -> Ok(Item(tag, "BulkData", [LongString], vm_1))
        0x00, 0x13, _, 0x26 -> Ok(Item(tag, "Study Comments", [LongText], vm_1))
        0x00, 0x15, _, 0x16 ->
          Ok(Item(tag, "Comb Head Number", [SignedLong], vm_1))
        0x00, 0x11, _, 0x8c ->
          Ok(Item(tag, "Three-D Zero Length", [SignedLong], vm_1))
        0x00, 0x11, _, 0x8a ->
          Ok(Item(tag, "Two Line Trans Ref", [SignedLong], vm_1))
        0x50, 0x01, _, 0x33 -> Ok(Item(tag, "CurveFlags", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0x22 ->
          Ok(Item(tag, "User Orientation", [ShortString], vm_1))
        0x50, 0x01, _, 0x02 -> Ok(Item(tag, "Name", [LongString], vm_1))
        0x50, 0x01, _, 0x52 ->
          Ok(Item(tag, "BpSegPairs", [UnsignedShort], vm_1_to_n))
        0x00, 0x11, _, 0x87 ->
          Ok(Item(tag, "Slice Width Pixels", [SignedLong], vm_1))
        0x00, 0x11, _, 0x72 -> Ok(Item(tag, "Recon Arc", [SignedLong], vm_1))
        0x00, 0x33, _, 0x16 ->
          Ok(Item(tag, "ProtocolDataUID", [LongString], vm_1))
        0x50, 0x01, _, 0x51 -> Ok(Item(tag, "BpSeg", [SignedLong], vm_1_to_n))
        0x00, 0x13, _, 0x1d ->
          Ok(Item(tag, "Theta Acceptance Value", [SignedLong], vm_1))
        0x50, 0x01, _, 0x5a ->
          Ok(Item(tag, "ShapeCtrlPtsCounts", [SignedLong], vm_1_to_n))
        0x00, 0x11, _, 0x2d ->
          Ok(Item(tag, "View Y Adjustment", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x28 ->
          Ok(Item(tag, "ROI Bottom Right", [SignedLong], vm_2))
        0x00, 0x15, _, 0x11 ->
          Ok(Item(tag, "Frame Termination Value", [SignedLong], vm_1))
        0x00, 0x11, _, 0x29 ->
          Ok(Item(tag, "Uniformity Mean", [SignedLong], vm_1))
        0x00, 0x11, _, 0x83 ->
          Ok(Item(tag, "Interpolation Center X", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x1e ->
          Ok(Item(tag, "Energy Width (retired)", [SignedLong], vm_4))
        0x00, 0x11, _, 0x31 ->
          Ok(Item(tag, "Acquisition Parent UID", [LongString], vm_1))
        0x50, 0x01, _, 0x18 ->
          Ok(Item(tag, "SegEnd", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x19, _, 0x5f -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x11, _, 0x1a ->
          Ok(Item(tag, "Detector Count Zone", [SignedLong], vm_1))
        0x00, 0x09, _, 0x12 -> Ok(Item(tag, "Study Type", [SignedLong], vm_1))
        0x00, 0x55, _, 0x62 ->
          Ok(Item(tag, "Xeleris Gated Information Sequence", [Sequence], vm_1))
        0x00, 0x55, _, 0x52 ->
          Ok(Item(
            tag,
            "Xeleris Rotation Information Sequence",
            [Sequence],
            vm_1,
          ))
        0x00, 0x11, _, 0x35 ->
          Ok(Item(tag, "Tuning Calib Name", [LongString], vm_1))
        0x00, 0x11, _, 0x56 ->
          Ok(Item(tag, "Elapsed Time", [FloatingPointDouble], vm_1))
        0x50, 0x01, _, 0x43 -> Ok(Item(tag, "Name", [SignedLong], vm_1))
        0x00, 0x11, _, 0x19 ->
          Ok(Item(tag, "Radius Of Rotation", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x86 ->
          Ok(Item(tag, "Head Conversion", [SignedLong], vm_1))
        0x50, 0x01, _, 0x50 -> Ok(Item(tag, "Label", [LongString], vm_1))
        0x00, 0x33, _, 0x21 ->
          Ok(Item(tag, "IntDataFormat", [LongText], vm_1_to_n))
        0x00, 0x13, _, 0x22 ->
          Ok(Item(tag, "Linear Depth", [FloatingPointDouble], vm_2))
        0x00, 0x13, _, 0x25 ->
          Ok(Item(tag, "Series Rejected Beats", [SignedLong], vm_1))
        0x00, 0x13, _, 0x14 ->
          Ok(Item(tag, "Original Image Num", [SignedLong], vm_1))
        0x00, 0x09, _, 0x25 ->
          Ok(Item(tag, "Initiation Count Rate", [SignedLong], vm_1))
        0x00, 0x15, _, 0x13 -> Ok(Item(tag, "Num WB Scans", [SignedLong], vm_1))
        0x00, 0x33, _, 0x07 ->
          Ok(Item(tag, "Orig SOP Instance UID", [Sequence], vm_1_to_n))
        0x00, 0x33, _, 0x1f ->
          Ok(Item(tag, "StringData", [OtherByteString], vm_1))
        0x00, 0x13, _, 0x23 ->
          Ok(Item(tag, "Unif Date Time", [LongString], vm_1))
        0x50, 0x01, _, 0x16 -> Ok(Item(tag, "SegType", [SignedLong], vm_1))
        0x00, 0x09, _, 0x3a ->
          Ok(Item(tag, "Percent Cycle Imaged", [SignedLong], vm_1))
        0x00, 0x13, _, 0x1e ->
          Ok(Item(tag, "Tomo View Offset", [FloatingPointDouble], vm_1_to_n))
        0x50, 0x01, _, 0x3d -> Ok(Item(tag, "DetectorName", [LongString], vm_1))
        0x00, 0x11, _, 0x50 ->
          Ok(Item(tag, "Where Object Name", [LongString], vm_1))
        0x00, 0x11, _, 0x3c ->
          Ok(Item(tag, "Pixel Offset", [FloatingPointDouble], vm_1))
        0x50, 0x01, _, 0x26 -> Ok(Item(tag, "TxtName", [LongString], vm_1))
        0x00, 0x11, _, 0x73 ->
          Ok(Item(tag, "Recon Pan AP Offset", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x3f ->
          Ok(Item(tag, "Dataset Flags", [SignedLong], vm_1))
        0x00, 0x13, _, 0x10 ->
          Ok(Item(tag, "Digital FOV", [FloatingPointDouble], vm_2))
        0x00, 0x09, _, 0x20 ->
          Ok(Item(tag, "Series Object Name", [LongString], vm_1))
        0x50, 0x01, _, 0x48 -> Ok(Item(tag, "NameFont", [LongText], vm_1))
        0x00, 0x13, _, 0x18 ->
          Ok(Item(tag, "Transmission Scan Time", [FloatingPointDouble], vm_1))
        0x50, 0x01, _, 0x5e -> Ok(Item(tag, "FrameNumber", [SignedLong], vm_1))
        0x00, 0x11, _, 0x88 ->
          Ok(Item(tag, "Rfmtr Trans Ref", [SignedLong], vm_1))
        0x50, 0x01, _, 0x4e -> Ok(Item(tag, "NamePos", [SignedLong], vm_1))
        0x00, 0x11, _, 0x39 ->
          Ok(Item(tag, "Compression Type", [SignedLong], vm_1))
        0x50, 0x01, _, 0x17 ->
          Ok(Item(tag, "SegStart", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x11, _, 0x13 -> Ok(Item(tag, "Dataset Type", [SignedLong], vm_1))
        0x50, 0x01, _, 0x13 -> Ok(Item(tag, "StylePColour", [LongString], vm_1))
        0x00, 0x33, _, 0x35 ->
          Ok(Item(tag, "Trigger data size", [UnsignedLong], vm_1))
        0x00, 0x11, _, 0x46 ->
          Ok(Item(tag, "Interpolation Type", [SignedLong], vm_1))
        0x50, 0x01, _, 0x1b ->
          Ok(Item(tag, "SegStyleColour", [LongString], vm_1))
        0x00, 0x09, _, 0x34 ->
          Ok(Item(tag, "Gantry Motion Type (retired)", [SignedLong], vm_1))
        0x00, 0x09, _, 0x35 ->
          Ok(Item(tag, "Gantry Locus Type", [SignedLong], vm_1))
        0x00, 0x11, _, 0x6f ->
          Ok(Item(tag, "Pre Filter Type", [SignedLong], vm_1))
        0x00, 0x11, _, 0x1c ->
          Ok(Item(tag, "Energy Offset", [SignedLong], vm_4))
        0x00, 0x11, _, 0x2c ->
          Ok(Item(tag, "View X Adjustment", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x11 ->
          Ok(Item(tag, "Dataset Modified", [IntegerString], vm_1))
        0x00, 0x33, _, 0x10 -> Ok(Item(tag, "Modified", [SignedLong], vm_1))
        0x00, 0x11, _, 0x6b ->
          Ok(Item(tag, "Recon Options Flag", [SignedLong], vm_1))
        0x00, 0x33, _, 0x11 -> Ok(Item(tag, "Name", [LongString], vm_1))
        0x00, 0x11, _, 0x1b ->
          Ok(Item(tag, "Num Energy Windows", [SignedLong], vm_1))
        0x50, 0x01, _, 0x11 -> Ok(Item(tag, "StyleWidth", [SignedLong], vm_1))
        0x00, 0x15, _, 0x10 ->
          Ok(Item(tag, "Frame Termination Condition", [SignedLong], vm_1))
        0x50, 0x01, _, 0x03 -> Ok(Item(tag, "Cid", [SignedLong], vm_1))
        0x00, 0x13, _, 0x16 ->
          Ok(Item(tag, "AutoTrack Peak", [SignedLong], vm_1))
        0x00, 0x09, _, 0x1e ->
          Ok(Item(tag, "Dataset UID", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x2e ->
          Ok(Item(tag, "Distance Prescribed", [FloatingPointDouble], vm_1))
        0x00, 0x11, _, 0x26 ->
          Ok(Item(tag, "Table Orientation", [SignedLong], vm_1))
        0x00, 0x11, _, 0x40 ->
          Ok(Item(tag, "Viewing Object Name", [LongString], vm_1))
        0x00, 0x11, _, 0x67 ->
          Ok(Item(tag, "Reference Frame Number", [SignedLong], vm_1))
        0x50, 0x01, _, 0x10 -> Ok(Item(tag, "StyleColour", [LongString], vm_1))
        0x50, 0x01, _, 0x1c ->
          Ok(Item(tag, "SegStyleWidth", [SignedLong], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "SCHICK TECHNOLOGIES - Note List Creator ID" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Reference Image Instance UID", [UniqueIdentifier], vm_1))
        0x00, 0x21, _, 0x02 -> Ok(Item(tag, "Item", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips PET Private Group" ->
      case g0, g1, e0, e1 {
        0x05, 0x11, _, 0x00 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x05, 0x11, _, 0x01 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x05, 0x11, _, 0x02 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x05, 0x11, _, 0x03 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x05, 0x11, _, 0x32 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x05, 0x11, _, 0x50 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x70, 0x53, _, 0x00 ->
          Ok(Item(tag, "SUV Scale Factor", [DecimalString], vm_1))
        0x70, 0x53, _, 0x01 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x53, _, 0x02 -> Ok(Item(tag, "Private", [OtherByteString], vm_1))
        0x70, 0x53, _, 0x03 ->
          Ok(Item(tag, "Original image file name", [ShortText], vm_1))
        0x70, 0x53, _, 0x04 ->
          Ok(Item(tag, "File Data", [OtherByteString], vm_1))
        0x70, 0x53, _, 0x05 ->
          Ok(Item(tag, "Worklist Info File Name", [LongString], vm_1))
        0x70, 0x53, _, 0x06 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x70, 0x53, _, 0x07 ->
          Ok(Item(tag, "Acquisition File Sequence", [Sequence], vm_1))
        0x70, 0x53, _, 0x08 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x70, 0x53, _, 0x09 ->
          Ok(Item(
            tag,
            "Activity Concentration Scale Factor",
            [DecimalString],
            vm_1,
          ))
        0x70, 0x53, _, 0x0f ->
          Ok(Item(tag, "Segment Size", [UnsignedLong], vm_1))
        0x70, 0x53, _, 0x10 ->
          Ok(Item(tag, "Segment Number", [UnsignedShort], vm_1))
        0x70, 0x53, _, 0x11 ->
          Ok(Item(tag, "Number of Segments", [UnsignedShort], vm_1))
        0x70, 0x53, _, 0x12 ->
          Ok(Item(tag, "File Data Sequence", [Sequence], vm_1))
        0x70, 0x53, _, 0x13 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x70, 0x53, _, 0x14 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x70, 0x53, _, 0x15 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x70, 0x53, _, 0x16 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x70, 0x53, _, 0x17 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x70, 0x53, _, 0x18 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x70, 0x53, _, 0xc2 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_FALCON_03" ->
      case g0, g1, e0, e1 {
        0x00, 0x45, _, 0x55 ->
          Ok(Item(
            tag,
            "A_Coefficients",
            [DecimalString],
            ValueMultiplicity(8, Some(8)),
          ))
        0x00, 0x45, _, 0x62 ->
          Ok(Item(tag, "User Window Center", [IntegerString], vm_1))
        0x00, 0x45, _, 0x63 ->
          Ok(Item(tag, "User Window Width", [IntegerString], vm_1))
        0x00, 0x45, _, 0x65 ->
          Ok(Item(
            tag,
            "Requested Detector Entrance Dose",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x45, _, 0x67 ->
          Ok(Item(
            tag,
            "VOI LUT Assymmetry parameter beta",
            [DecimalString],
            vm_3,
          ))
        0x00, 0x45, _, 0x69 ->
          Ok(Item(tag, "Collimator rotation", [IntegerString], vm_1))
        0x00, 0x45, _, 0x72 ->
          Ok(Item(tag, "Collimator Width", [DecimalString], vm_1))
        0x00, 0x45, _, 0x73 ->
          Ok(Item(tag, "Collimator Height", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS MR SPECTRO;1" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x46 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x80 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x12 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x32 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x78 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x03 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x28 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x05 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x08 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x43 -> Ok(Item(tag, "Unknown", [IntegerString], vm_2))
        0x00, 0x19, _, 0x49 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x48 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x06 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x76 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x23 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x10 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x26 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x24 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x47 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x29 ->
          Ok(Item(tag, "Unknown", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x27 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x17 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x18 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x50 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x09 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x73 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x79 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x31 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x41 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x16 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x07 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x02 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x71 ->
          Ok(Item(tag, "Unknown", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0x13 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x61 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x01 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x77 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x74 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x70 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x22 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x20 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x25 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x45 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x42 -> Ok(Item(tag, "Unknown", [IntegerString], vm_2))
        0x00, 0x19, _, 0x60 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x14 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x21 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x72 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x04 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Siemens: Thorax/Multix FD Post Processing" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x00 ->
          Ok(Item(tag, "Label Left", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Label Left Orientation", [SignedShort], vm_1))
        0x00, 0x21, _, 0x02 ->
          Ok(Item(tag, "Label Left Percentage X", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x03 ->
          Ok(Item(tag, "Label Left Percentage X", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x04 ->
          Ok(Item(tag, "Label Right", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x05 ->
          Ok(Item(tag, "Label Right Orientation", [SignedShort], vm_1))
        0x00, 0x21, _, 0x06 ->
          Ok(Item(tag, "Label Right Percentage X", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x07 ->
          Ok(Item(tag, "Label Right Percentage X", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x08 ->
          Ok(Item(tag, "Auto Window Flag", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x09 ->
          Ok(Item(tag, "Auto Window Center", [SignedLong], vm_1))
        0x00, 0x21, _, 0x0a ->
          Ok(Item(tag, "Auto Window Width", [SignedLong], vm_1))
        0x00, 0x21, _, 0x0b -> Ok(Item(tag, "Filter ID", [SignedShort], vm_1))
        0x00, 0x21, _, 0x0c ->
          Ok(Item(
            tag,
            "Degree of Edge Enhancement",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x21, _, 0x0d ->
          Ok(Item(tag, "Half Kernel Size", [SignedShort], vm_1))
        0x00, 0x21, _, 0x0e ->
          Ok(Item(tag, "Dose Control Value", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x0f ->
          Ok(Item(tag, "Deleted Image Flag", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x10 ->
          Ok(Item(tag, "Same Size Support", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x11 ->
          Ok(Item(tag, "Label Left Init Position", [SignedShort], vm_1))
        0x00, 0x21, _, 0x12 ->
          Ok(Item(tag, "Label Right Init Position", [SignedShort], vm_1))
        0x00, 0x21, _, 0x13 ->
          Ok(Item(tag, "Patient Rotation", [SignedShort], vm_1))
        0x00, 0x21, _, 0x14 ->
          Ok(Item(tag, "Anatomic Correct View Flag", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x15 ->
          Ok(Item(tag, "Auto Window Shift", [SignedShort], vm_1))
        0x00, 0x21, _, 0x16 ->
          Ok(Item(tag, "Auto Window Expansion", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Applicare/Centricity Radiology Web/Version 1.0" ->
      case g0, g1, e0, e1 {
        0x41, 0x09, _, 0x01 ->
          Ok(Item(tag, "Mammography Laterality", [ShortString], vm_1))
        0x41, 0x09, _, 0x02 ->
          Ok(Item(tag, "Mammography View Name", [ShortString], vm_1))
        0x41, 0x09, _, 0x03 ->
          Ok(Item(tag, "Mammography View Modifier", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips Imaging DD 073" ->
      case g0, g1, e0, e1 {
        0x40, 0x07, _, 0x48 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEHC_CT_ADVAPP_001" ->
      case g0, g1, e0, e1 {
        0x00, 0x53, _, 0x20 ->
          Ok(Item(tag, "ShuttleFlag", [IntegerString], vm_1))
        0x00, 0x53, _, 0x21 ->
          Ok(Item(tag, "TableSpeedNotReachesTargetFlag", [IntegerString], vm_1))
        0x00, 0x53, _, 0x40 ->
          Ok(Item(tag, "IterativeReconAnnotation", [ShortString], vm_1))
        0x00, 0x53, _, 0x41 ->
          Ok(Item(tag, "IterativeReconMode", [ShortString], vm_1))
        0x00, 0x53, _, 0x42 ->
          Ok(Item(tag, "IterativeReconConfiguration", [LongString], vm_1))
        0x00, 0x53, _, 0x43 ->
          Ok(Item(tag, "IterativeReconLevel", [ShortString], vm_1))
        0x00, 0x53, _, 0x60 ->
          Ok(Item(tag, "reconFlipRotateAnno", [ShortString], vm_1))
        0x00, 0x53, _, 0x61 ->
          Ok(Item(tag, "highResolutionFlag", [ShortString], vm_1))
        0x00, 0x53, _, 0x62 ->
          Ok(Item(tag, "RespiratoryFlag", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "ACUSON" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x01 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x02 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x03 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x04 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x05 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x06 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x07 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x08 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x09, _, 0x09 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x09, _, 0x0a -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x0b -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x0c -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x0d -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x0e -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x0f -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x11 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x12 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x13 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x09, _, 0x14 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x09, _, 0x15 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Siemens: Thorax/Multix FD Version" ->
      case g0, g1, e0, e1 {
        0x00, 0x17, _, 0x00 -> Ok(Item(tag, "Build Date", [LongString], vm_1))
        0x00, 0x17, _, 0x01 -> Ok(Item(tag, "IOD Version", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P Release 1;1" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x6e ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x29, _, 0x03 ->
          Ok(Item(tag, "Zoom Factor", [DecimalString], vm_1))
        0x00, 0x21, _, 0x61 ->
          Ok(Item(tag, "Unknown", [IntegerString], vm_1_to_n))
        0x00, 0x29, _, 0x04 ->
          Ok(Item(tag, "Zoom Function", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x6d ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x19 -> Ok(Item(tag, "Sample Data 2", [Unknown], vm_1))
        0x00, 0x29, _, 0x0e ->
          Ok(Item(tag, "Zoom Enable Status", [CodeString], vm_1))
        0x00, 0x21, _, 0x6f ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x12 ->
          Ok(Item(tag, "Sample Bits Allocated 2", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x4e ->
          Ok(Item(tag, "Magnifying Glass Enable Status", [CodeString], vm_1))
        0x00, 0x21, _, 0x6b ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x51 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x45 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x21, _, 0x50 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x03 ->
          Ok(Item(tag, "Sample Bits Stored", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x67 -> Ok(Item(tag, "Unknown", [LongString], vm_1_to_n))
        0x00, 0x19, _, 0x05 ->
          Ok(Item(tag, "Sample Representation", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x43 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x60 ->
          Ok(Item(tag, "Unknown", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0x08 ->
          Ok(Item(tag, "Number Of Samples", [Unknown], vm_1))
        0x00, 0x29, _, 0x43 ->
          Ok(Item(tag, "Magnifying Glass Factor", [DecimalString], vm_1))
        0x00, 0x29, _, 0x41 ->
          Ok(Item(tag, "Magnifying Glass Rectangle", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "Physiological Data Type", [Unknown], vm_1))
        0x00, 0x19, _, 0x06 ->
          Ok(Item(tag, "Smallest Sample Value", [Unknown], vm_1))
        0x00, 0x21, _, 0x41 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x44 ->
          Ok(Item(tag, "Magnifying Glass Function", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Physiological Data Type 2", [Unknown], vm_1))
        0x00, 0x29, _, 0x0f ->
          Ok(Item(tag, "Zoom Select Status", [CodeString], vm_1))
        0x00, 0x09, _, 0xc1 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x29, _, 0x4f ->
          Ok(Item(tag, "Magnifying Glass Select Status", [CodeString], vm_1))
        0x00, 0x19, _, 0x1a -> Ok(Item(tag, "Sample Rate 2", [Unknown], vm_1))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "Physiological Data Channel And Kind 2", [Unknown], vm_1))
        0x00, 0x19, _, 0x0a -> Ok(Item(tag, "Sample Rate", [Unknown], vm_1))
        0x00, 0x29, _, 0x00 -> Ok(Item(tag, "Zoom ID", [LongText], vm_1))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "Sample Representation 2", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x52 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x6a ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x17 ->
          Ok(Item(tag, "Largest Sample Value 2", [Unknown], vm_1))
        0x00, 0x19, _, 0x18 ->
          Ok(Item(tag, "Number Of Samples 2", [Unknown], vm_1))
        0x00, 0x19, _, 0x09 -> Ok(Item(tag, "Sample Data", [Unknown], vm_1))
        0x00, 0x19, _, 0x16 ->
          Ok(Item(tag, "Smallest Sample Value 2", [Unknown], vm_1))
        0x00, 0x19, _, 0x07 ->
          Ok(Item(tag, "Largest Sample Value", [Unknown], vm_1))
        0x00, 0x19, _, 0x02 ->
          Ok(Item(tag, "Sample Bits Allocated", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x6c ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x29, _, 0x40 ->
          Ok(Item(tag, "Magnifying Glass ID", [LongText], vm_1))
        0x00, 0x21, _, 0x44 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x13 ->
          Ok(Item(tag, "Sample Bits Stored 2", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x01 ->
          Ok(Item(tag, "Physiological Data Channel And Kind", [Unknown], vm_1))
        0x00, 0x21, _, 0x42 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0xc0 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x14 ->
          Ok(Item(tag, "Sample High Bit 2", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Zoom Rectangle", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x04 ->
          Ok(Item(tag, "Sample High Bit", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CBT RECON SLICE HEIGHT" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x88 ->
          Ok(Item(tag, "Reconstruction Slice Height", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "DL_INTERNAL_USE" ->
      case g0, g1, e0, e1 {
        0x00, 0x15, _, 0x8f -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips EV Imaging DD 019" ->
      case g0, g1, e0, e1 {
        0x20, 0x07, _, 0x00 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x07, _, 0x01 -> Ok(Item(tag, "Unknown", [UnlimitedText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CM VA0  OST" ->
      case g0, g1, e0, e1 {
        0x60, 0x23, _, 0x00 ->
          Ok(Item(tag, "Osteo Contour Comment", [LongString], vm_1))
        0x60, 0x23, _, 0x10 ->
          Ok(Item(tag, "Osteo Contour Buffer", [SignedShort], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "Applicare/RadWorks/Version 6.0" ->
      case g0, g1, e0, e1 {
        0x41, 0x03, _, 0x01 ->
          Ok(Item(tag, "Internal: non-existent tags", [AttributeTag], vm_1))
        0x41, 0x03, _, 0x02 ->
          Ok(Item(
            tag,
            "Internal: non-existent objects",
            [UniqueIdentifier],
            vm_1,
          ))
        0x41, 0x05, _, 0x01 ->
          Ok(Item(tag, "Annotation Type", [CodeString], vm_1))
        0x41, 0x05, _, 0x02 ->
          Ok(Item(tag, "Annotation Value", [DecimalString], vm_1))
        0x41, 0x05, _, 0x03 ->
          Ok(Item(tag, "Cutline Image UID", [UniqueIdentifier], vm_1))
        0x41, 0x05, _, 0x04 ->
          Ok(Item(tag, "Cutline Set UID", [UniqueIdentifier], vm_1))
        0x41, 0x05, _, 0x05 ->
          Ok(Item(tag, "Annotation Color", [UnsignedShort], vm_1))
        0x41, 0x05, _, 0x06 ->
          Ok(Item(tag, "Annotation Line Style", [CodeString], vm_1))
        0x41, 0x05, _, 0x07 ->
          Ok(Item(tag, "Annotation Label", [ShortString], vm_1))
        0x41, 0x05, _, 0x08 ->
          Ok(Item(tag, "Annotation Creator", [PersonName], vm_1))
        0x41, 0x05, _, 0x09 ->
          Ok(Item(tag, "Annotation Creation Date", [Date], vm_1))
        0x41, 0x05, _, 0x0a ->
          Ok(Item(tag, "Annotation Creation Time", [Time], vm_1))
        0x41, 0x05, _, 0x0b ->
          Ok(Item(tag, "Annotation Modification Sequence", [Sequence], vm_1))
        0x41, 0x05, _, 0x0c ->
          Ok(Item(tag, "Annotation Modifier", [PersonName], vm_1))
        0x41, 0x05, _, 0x0d ->
          Ok(Item(tag, "Annotation Modification Date", [Date], vm_1))
        0x41, 0x05, _, 0x0e ->
          Ok(Item(tag, "Annotation Modification Time", [Time], vm_1))
        0x41, 0x05, _, 0x0f ->
          Ok(Item(tag, "Palette Color LUT Name", [LongString], vm_1))
        0x41, 0x05, _, 0x10 ->
          Ok(Item(tag, "Annotation Number", [UnsignedShort], vm_1))
        0x41, 0x07, _, 0x01 ->
          Ok(Item(tag, "Requested Palette Color LUT", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED DISPLAY 0000" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x99 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0xc1 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P Release 1;3" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x00 ->
          Ok(Item(tag, "Image Enhancement ID", [LongText], vm_1))
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Image Enhancement", [LongText], vm_1))
        0x00, 0x29, _, 0x02 -> Ok(Item(tag, "Convolution ID", [LongText], vm_1))
        0x00, 0x29, _, 0x03 ->
          Ok(Item(tag, "Convolution Type", [LongText], vm_1))
        0x00, 0x29, _, 0x04 ->
          Ok(Item(tag, "Convolution Kernel Size ID", [LongText], vm_1))
        0x00, 0x29, _, 0x05 ->
          Ok(Item(tag, "Convolution Kernel Size", [UnsignedShort], vm_2))
        0x00, 0x29, _, 0x06 ->
          Ok(Item(tag, "Convolution Kernel", [UnsignedShort], vm_1_to_n))
        0x00, 0x29, _, 0x0c ->
          Ok(Item(tag, "Enhancement Gain", [DecimalString], vm_1))
        0x00, 0x29, _, 0x1e ->
          Ok(Item(tag, "Image Enhancement Enable Status", [CodeString], vm_1))
        0x00, 0x29, _, 0x1f ->
          Ok(Item(tag, "Image Enhancement Select Status", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "A.L.I. Technologies, Inc." ->
      case g0, g1, e0, e1 {
        0x37, 0x11, _, 0x01 -> Ok(Item(tag, "Filename", [LongString], vm_1))
        0x37, 0x11, _, 0x02 ->
          Ok(Item(tag, "Data Blob of a Visit", [OtherByteString], vm_1))
        0x37, 0x11, _, 0x03 ->
          Ok(Item(tag, "Revision Number", [UnsignedShort], vm_1))
        0x37, 0x11, _, 0x04 ->
          Ok(Item(tag, "Unix Timestamp", [UnsignedLong], vm_1))
        0x37, 0x11, _, 0x05 -> Ok(Item(tag, "Bag ID", [IntegerString], vm_1))
        0x37, 0x11, _, 0x0c ->
          Ok(Item(tag, "Original Study UID", [UniqueIdentifier], vm_1))
        0x37, 0x11, _, 0x0d ->
          Ok(Item(tag, "Overlay Grayscale Value", [UnsignedShort], vm_1))
        0x37, 0x11, _, 0x0e ->
          Ok(Item(tag, "Anonymization Status", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "TOSHIBA_MEC_OT3" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 ->
          Ok(Item(tag, "HIS/RIS Study ID", [LongString], vm_1))
        0x70, 0x19, _, 0x71 ->
          Ok(Item(tag, "Indicator of creator", [CodeString], vm_1))
        0x70, 0x19, _, 0x72 ->
          Ok(Item(tag, "ID of quality assurance reviewer", [LongString], vm_1))
        0x70, 0x19, _, 0x73 ->
          Ok(Item(tag, "Name of quality assurance reviewer", [PersonName], vm_1))
        0x70, 0x19, _, 0x74 ->
          Ok(Item(tag, "Date of completion of quality assurance", [Date], vm_1))
        0x70, 0x19, _, 0x75 ->
          Ok(Item(tag, "Time of completion of quality assurance", [Time], vm_1))
        0x70, 0x19, _, 0x76 ->
          Ok(Item(
            tag,
            "Host name of quality assurance station",
            [LongString],
            vm_1,
          ))
        0x70, 0x19, _, 0x77 ->
          Ok(Item(
            tag,
            "Station name and version of quality assurance station",
            [CodeString],
            vm_1,
          ))
        0x70, 0x19, _, 0x78 ->
          Ok(Item(
            tag,
            "Flag of completion of quality assurance",
            [CodeString],
            vm_1,
          ))
        0x70, 0x19, _, 0x79 ->
          Ok(Item(tag, "Status of quality assurance review", [CodeString], vm_1))
        0x70, 0x19, _, 0x7a ->
          Ok(Item(tag, "Original SOP Instance UID", [UniqueIdentifier], vm_1))
        0x70, 0x19, _, 0x7b ->
          Ok(Item(tag, "Original Series Instance UID", [UniqueIdentifier], vm_1))
        0x70, 0x19, _, 0x7c ->
          Ok(Item(tag, "Original Study Instance UID", [UniqueIdentifier], vm_1))
        0x70, 0x19, _, 0x7d ->
          Ok(Item(
            tag,
            "Rotation information for image display from original image",
            [UnsignedShort],
            vm_1,
          ))
        0x70, 0x19, _, 0x7e ->
          Ok(Item(tag, "Sequence of LR mark", [Sequence], vm_1))
        0x70, 0x19, _, 0x7f ->
          Ok(Item(
            tag,
            "Rotation status at creation of LR mark",
            [UnsignedShort],
            vm_1,
          ))
        0x70, 0x19, _, 0x80 ->
          Ok(Item(
            tag,
            "Original image data on area of original LR mark",
            [OtherByteString, OtherWordString],
            vm_1,
          ))
        0x70, 0x19, _, 0x81 ->
          Ok(Item(tag, "X start position of LR mark", [SignedShort], vm_1))
        0x70, 0x19, _, 0x82 ->
          Ok(Item(tag, "Y start position of LR mark", [SignedShort], vm_1))
        0x70, 0x19, _, 0x83 ->
          Ok(Item(tag, "Size of LR mark in X direction", [UnsignedShort], vm_1))
        0x70, 0x19, _, 0x84 ->
          Ok(Item(tag, "Size of LR mark in Y direction", [UnsignedShort], vm_1))
        0x70, 0x19, _, 0x85 ->
          Ok(Item(tag, "Previous Patient ID", [LongString], vm_1))
        0x70, 0x19, _, 0x86 ->
          Ok(Item(tag, "Previous modality", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MR VA0  RAW" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x00 ->
          Ok(Item(tag, "Sequence Type", [CodeString], vm_1))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Vector Size original", [IntegerString], vm_1))
        0x00, 0x21, _, 0x02 ->
          Ok(Item(tag, "Vector Size extended", [IntegerString], vm_1))
        0x00, 0x21, _, 0x03 ->
          Ok(Item(tag, "Acquired Spectral Range", [DecimalString], vm_1))
        0x00, 0x21, _, 0x04 ->
          Ok(Item(tag, "VOI Position", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x05 ->
          Ok(Item(tag, "VOI Size", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x06 ->
          Ok(Item(tag, "CSI Matrix Size original", [IntegerString], vm_1_to_n))
        0x00, 0x21, _, 0x07 ->
          Ok(Item(tag, "CSI Matrix Size extended", [IntegerString], vm_1_to_n))
        0x00, 0x21, _, 0x08 ->
          Ok(Item(tag, "Spatial Grid Shift", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x09 ->
          Ok(Item(tag, "Signal Limits Minimum", [DecimalString], vm_1))
        0x00, 0x21, _, 0x10 ->
          Ok(Item(tag, "Signal Limits Maximum", [DecimalString], vm_1))
        0x00, 0x21, _, 0x11 ->
          Ok(Item(tag, "Spec Info Mask", [DecimalString], vm_1))
        0x00, 0x21, _, 0x12 ->
          Ok(Item(
            tag,
            "EPI Time Rate of Change of Magnitude",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x21, _, 0x13 ->
          Ok(Item(
            tag,
            "EPI Time Rate of Change of X Component",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x21, _, 0x14 ->
          Ok(Item(
            tag,
            "EPI Time Rate of Change of Y Component",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x21, _, 0x15 ->
          Ok(Item(
            tag,
            "EPI Time Rate of Change of Z Component",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x21, _, 0x16 ->
          Ok(Item(
            tag,
            "EPI Time Rate of Change Legal Limit 1",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x21, _, 0x17 ->
          Ok(Item(tag, "EPI Operation Mode Flag", [IntegerString], vm_1))
        0x00, 0x21, _, 0x18 ->
          Ok(Item(
            tag,
            "EPI Field Calculation Safety Factor",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x21, _, 0x19 ->
          Ok(Item(
            tag,
            "EPI Legal Limit 1 of Change Value",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x21, _, 0x20 ->
          Ok(Item(
            tag,
            "EPI Legal Limit 2 of Change Value",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x21, _, 0x21 ->
          Ok(Item(tag, "EPI Rise Time", [DecimalString], vm_1))
        0x00, 0x21, _, 0x30 ->
          Ok(Item(tag, "AC ADC Offset", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x31 ->
          Ok(Item(tag, "AC Preamplifier Gain", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x50 ->
          Ok(Item(tag, "Saturation Type", [CodeString], vm_1))
        0x00, 0x21, _, 0x51 ->
          Ok(Item(tag, "Saturation Normal Vector", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x52 ->
          Ok(Item(tag, "Saturation Position Vector", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x53 ->
          Ok(Item(tag, "Saturation Thickness", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x54 ->
          Ok(Item(tag, "Saturation Width", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x55 ->
          Ok(Item(tag, "Saturation Distance", [DecimalString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS DLR.01" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x52 ->
          Ok(Item(tag, "Cassette Submatrix", [LongString], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Reader Header", [LongString], vm_1))
        0x00, 0x19, _, 0x66 ->
          Ok(Item(tag, "RT Frequency Type", [LongString], vm_1))
        0x00, 0x19, _, 0x30 -> Ok(Item(tag, "Orientation", [LongString], vm_1))
        0x00, 0x19, _, 0x32 ->
          Ok(Item(tag, "Rotation on DRC", [LongString], vm_1))
        0x00, 0x41, _, 0x20 -> Ok(Item(tag, "Film Format", [CodeString], vm_1))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(tag, "GC Rotation Center", [LongString], vm_1))
        0x00, 0x19, _, 0x28 -> Ok(Item(tag, "Subregion", [LongString], vm_1))
        0x00, 0x19, _, 0x51 ->
          Ok(Item(tag, "Cassette Matrix", [LongString], vm_1))
        0x00, 0x19, _, 0x65 ->
          Ok(Item(tag, "RE Frequency Enhancement", [LongString], vm_1))
        0x00, 0x19, _, 0xa0 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x40 -> Ok(Item(tag, "Reader Type", [LongString], vm_1))
        0x00, 0x19, _, 0x76 -> Ok(Item(tag, "Filterset", [LongString], vm_1))
        0x00, 0x19, _, 0x64 ->
          Ok(Item(tag, "RN Frequency Rank", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x23 -> Ok(Item(tag, "EDR", [LongString], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Measurement Mode", [LongString], vm_1))
        0x00, 0x19, _, 0x26 -> Ok(Item(tag, "Preset Mode", [LongString], vm_1))
        0x00, 0x41, _, 0x31 ->
          Ok(Item(tag, "Full Film Format", [LongString], vm_1))
        0x00, 0x19, _, 0x24 -> Ok(Item(tag, "l fix", [LongString], vm_1))
        0x00, 0x19, _, 0x11 -> Ok(Item(tag, "Image Type", [LongString], vm_1))
        0x00, 0x19, _, 0x75 ->
          Ok(Item(tag, "UID Original Image", [LongString], vm_1))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "PLA of Secondary Destination", [LongString], vm_1))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "Software Version", [LongString], vm_1))
        0x00, 0x19, _, 0x27 -> Ok(Item(tag, "Region", [LongString], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "Cassette Scale", [LongString], vm_1))
        0x00, 0x19, _, 0x31 -> Ok(Item(tag, "Mark on Film", [LongString], vm_1))
        0x00, 0x19, _, 0x41 -> Ok(Item(tag, "Sub Modality", [LongString], vm_1))
        0x00, 0x19, _, 0x71 ->
          Ok(Item(tag, "PLA Destination", [LongString], vm_1))
        0x00, 0x19, _, 0x61 ->
          Ok(Item(tag, "GA Rotation Amount", [LongString], vm_1))
        0x00, 0x19, _, 0x69 ->
          Ok(Item(tag, "Convulsion Mode", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x70 -> Ok(Item(tag, "PLA Source", [LongString], vm_1))
        0x00, 0x19, _, 0x22 -> Ok(Item(tag, "Sensitivity", [LongString], vm_1))
        0x00, 0x19, _, 0xa1 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x68 ->
          Ok(Item(tag, "Kernel Mode", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x20 -> Ok(Item(tag, "MPM Code", [LongString], vm_1))
        0x00, 0x19, _, 0x25 -> Ok(Item(tag, "s fix", [LongString], vm_1))
        0x00, 0x19, _, 0x42 ->
          Ok(Item(tag, "Reader Serial Number", [LongString], vm_1))
        0x00, 0x19, _, 0x53 -> Ok(Item(tag, "Barcode", [LongString], vm_1))
        0x00, 0x41, _, 0x30 -> Ok(Item(tag, "Film Size", [LongString], vm_1))
        0x00, 0x41, _, 0x10 ->
          Ok(Item(tag, "Number of Hardcopies", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "GT Contrast Type", [LongString], vm_1))
        0x00, 0x19, _, 0x21 -> Ok(Item(tag, "Latitude", [LongString], vm_1))
        0x00, 0x19, _, 0x63 ->
          Ok(Item(tag, "GS Density Shift", [LongString], vm_1))
        0x00, 0x19, _, 0x67 ->
          Ok(Item(tag, "Kernel Length", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CSA REPORT" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "syngo Report Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x09 -> Ok(Item(tag, "syngo Report", [LongString], vm_1))
        0x00, 0x29, _, 0x15 ->
          Ok(Item(tag, "SR Variant", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x17 ->
          Ok(Item(tag, "SC SOP Instance UID", [UniqueIdentifier], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS ACKNOWLEDGE FLAG" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x81 ->
          Ok(Item(tag, "Acknowledge Flag", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS SC IMG PIX SPC" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x87 ->
          Ok(Item(tag, "Non-RT Image Pixel Spacing", [DecimalString], vm_2))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_IMPS_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, 0x10, _ ->
          Ok(Item(tag, "Private Element Creator", [LongString], vm_1))
        0x00, 0x29, _, 0x04 ->
          Ok(Item(tag, "Lower range of Pixels1", [SignedLong], vm_1))
        0x00, 0x29, _, 0x05 ->
          Ok(Item(tag, "Lower range of Pixels1", [DecimalString], vm_1))
        0x00, 0x29, _, 0x06 ->
          Ok(Item(tag, "Lower range of Pixels1", [DecimalString], vm_1))
        0x00, 0x29, _, 0x07 ->
          Ok(Item(tag, "Lower range of Pixels1", [SignedLong], vm_1))
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "Lower range of Pixels1", [ShortString], vm_1))
        0x00, 0x29, _, 0x09 ->
          Ok(Item(tag, "Lower range of Pixels1", [ShortString], vm_1))
        0x00, 0x29, _, 0x0a ->
          Ok(Item(tag, "Lower range of Pixels1", [SignedShort], vm_1))
        0x00, 0x29, _, 0x15 ->
          Ok(Item(tag, "Lower range of Pixels1", [SignedLong], vm_1))
        0x00, 0x29, _, 0x16 ->
          Ok(Item(tag, "Upper range of Pixels1", [SignedLong], vm_1))
        0x00, 0x29, _, 0x17 ->
          Ok(Item(tag, "Lower range of Pixels2", [SignedLong], vm_1))
        0x00, 0x29, _, 0x18 ->
          Ok(Item(tag, "Upper range of Pixels2", [SignedLong], vm_1))
        0x00, 0x29, _, 0x1a ->
          Ok(Item(tag, "Len of tot hdr in bytes", [SignedLong], vm_1))
        0x00, 0x29, _, 0x26 ->
          Ok(Item(tag, "Version of the hdr struct", [SignedShort], vm_1))
        0x00, 0x29, _, 0x34 ->
          Ok(Item(tag, "Advantage comp. Overflow", [SignedLong], vm_1))
        0x00, 0x29, _, 0x35 ->
          Ok(Item(tag, "Advantage comp. Underflow", [SignedLong], vm_1))
        0x00, 0x43, _, 0x13 ->
          Ok(Item(tag, "Decon kernel parameters", [SignedShort], vm_5))
        _, _, _, _ -> Error(Nil)
      }
    "INTELERAD MEDICAL SYSTEMS" ->
      case g0, g1, e0, e1 {
        0x3f, 0x01, _, 0x01 ->
          Ok(Item(tag, "Institution Code", [LongString], vm_1))
        0x3f, 0x01, _, 0x02 ->
          Ok(Item(tag, "Routed Transfer AE", [LongString], vm_1))
        0x3f, 0x01, _, 0x03 -> Ok(Item(tag, "Source AE", [LongString], vm_1))
        0x3f, 0x01, _, 0x04 ->
          Ok(Item(tag, "Deferred Validation", [LongString], vm_1))
        0x3f, 0x01, _, 0x05 -> Ok(Item(tag, "Series Owner", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_ACRQA_1.0 BLOCK1" ->
      case g0, g1, e0, e1 {
        0x00, 0x23, _, 0x00 ->
          Ok(Item(tag, "CR Exposure Menu Code", [LongString], vm_1))
        0x00, 0x23, _, 0x10 ->
          Ok(Item(tag, "CR Exposure Menu String", [LongString], vm_1))
        0x00, 0x23, _, 0x20 -> Ok(Item(tag, "CR EDR Mode", [LongString], vm_1))
        0x00, 0x23, _, 0x30 -> Ok(Item(tag, "CR Latitude", [LongString], vm_1))
        0x00, 0x23, _, 0x40 ->
          Ok(Item(tag, "CR Group Number", [LongString], vm_1))
        0x00, 0x23, _, 0x50 ->
          Ok(Item(tag, "CR Image Serial Number", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x60 ->
          Ok(Item(tag, "CR Bar Code Number", [LongString], vm_1))
        0x00, 0x23, _, 0x70 ->
          Ok(Item(tag, "CR Film Output Exposure", [LongString], vm_1))
        0x00, 0x23, _, 0x80 ->
          Ok(Item(tag, "CR Film Format", [LongString], vm_1))
        0x00, 0x23, _, 0x90 ->
          Ok(Item(tag, "CR S-Shift String", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS SMS-AX  VIEW 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "Review Mode", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x01 ->
          Ok(Item(tag, "Anatomical Background Percent", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x02 ->
          Ok(Item(tag, "Number of Phases", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x03 ->
          Ok(Item(tag, "Apply Anatomical Background", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x04 ->
          Ok(Item(
            tag,
            "Pixel Shift Array",
            [SignedShort],
            ValueMultiplicity(4, None),
          ))
        0x00, 0x19, _, 0x05 ->
          Ok(Item(tag, "Brightness", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x06 -> Ok(Item(tag, "Contrast", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x07 -> Ok(Item(tag, "Enabled", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x08 ->
          Ok(Item(tag, "Native Edge Enh. Percent Gain", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x09 ->
          Ok(Item(tag, "Native Edge Enh. LUT Index", [SignedShort], vm_1))
        0x00, 0x19, _, 0x0a ->
          Ok(Item(tag, "Native Edge Enh. Kernel Size", [SignedShort], vm_1))
        0x00, 0x19, _, 0x0b ->
          Ok(Item(tag, "Subtr. Edge Enh. Percent Gain", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x0c ->
          Ok(Item(tag, "Subtr. Edge Enh. LUT Index", [SignedShort], vm_1))
        0x00, 0x19, _, 0x0d ->
          Ok(Item(tag, "Subtr. Edge Enh. Kernel Size", [SignedShort], vm_1))
        0x00, 0x19, _, 0x0e ->
          Ok(Item(tag, "Fade Percent", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x0f ->
          Ok(Item(
            tag,
            "Flipped Before Laterality Applied",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Apply Fade", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "RefImages Taken", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x12 -> Ok(Item(tag, "Zoom", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x13 -> Ok(Item(tag, "Pan X", [SignedShort], vm_1))
        0x00, 0x19, _, 0x14 -> Ok(Item(tag, "Pan Y", [SignedShort], vm_1))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "Native Edge Enh. Adv Perc. Gain", [SignedShort], vm_1))
        0x00, 0x19, _, 0x16 ->
          Ok(Item(tag, "Subtr. Edge Enh. Adv Perc. Gain", [SignedShort], vm_1))
        0x00, 0x19, _, 0x17 ->
          Ok(Item(tag, "Invert Flag", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x1a ->
          Ok(Item(tag, "Quant 1K Overlay", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x1b ->
          Ok(Item(tag, "Original Resolution", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x1c ->
          Ok(Item(tag, "Auto Window Center", [DecimalString], vm_1))
        0x00, 0x19, _, 0x1d ->
          Ok(Item(tag, "Auto Window Width", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "INTEGRIS 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x08 ->
          Ok(Item(tag, "Exposure Channel", [CodeString], vm_1))
        0x00, 0x09, _, 0x32 ->
          Ok(Item(tag, "Exposure Start Time", [Time], vm_1))
        0x00, 0x19, _, 0x00 -> Ok(Item(tag, "APR Name", [LongString], vm_1))
        0x00, 0x19, _, 0x40 ->
          Ok(Item(tag, "Frame Rate", [DecimalString], vm_1))
        0x00, 0x21, _, 0x12 ->
          Ok(Item(tag, "Exposure Number", [IntegerString], vm_1))
        0x00, 0x29, _, 0x00 ->
          Ok(Item(tag, "Edge Enhancement Sequence", [Sequence], vm_1))
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Convolution Kernel Size", [UnsignedShort], vm_2))
        0x00, 0x29, _, 0x02 ->
          Ok(Item(
            tag,
            "Convolution Kernel Coefficients",
            [UnsignedShort],
            vm_1_to_n,
          ))
        0x00, 0x29, _, 0x03 ->
          Ok(Item(tag, "Edge Enhancement Gain", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "Number of Exposure Results", [IntegerString], vm_1))
        0x00, 0x41, _, 0x20 ->
          Ok(Item(tag, "Accumulated Fluoroscopy Dose", [DecimalString], vm_1))
        0x00, 0x41, _, 0x30 ->
          Ok(Item(tag, "Accumulated Exposure Dose", [DecimalString], vm_1))
        0x00, 0x41, _, 0x40 ->
          Ok(Item(tag, "Total Dose", [DecimalString], vm_1))
        0x00, 0x41, _, 0x41 ->
          Ok(Item(tag, "Total Number of Frames", [UnsignedShort], vm_1))
        0x00, 0x41, _, 0x50 ->
          Ok(Item(tag, "Exposure Information Sequence", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS UNKNOWN" ->
      case g0, g1, e0, e1 {
        0x20, 0x01, _, 0x01 ->
          Ok(Item(tag, "MRSeriesNrOfEchoes", [Unknown], vm_1))
        0x20, 0x01, _, 0x02 ->
          Ok(Item(tag, "MRSeriesScanningTechniqueDescription", [Unknown], vm_1))
        0x20, 0x01, _, 0x05 -> Ok(Item(tag, "StackSequence", [Unknown], vm_1))
        0x20, 0x01, _, 0x06 ->
          Ok(Item(tag, "Examination Source", [Unknown], vm_1))
        0x20, 0x01, _, 0x07 ->
          Ok(Item(tag, "MRSeriesAcquisitionNumber", [Unknown], vm_1))
        0x20, 0x01, _, 0x08 ->
          Ok(Item(tag, "MRSeriesNrOfDynamicScans", [Unknown], vm_1))
        0x20, 0x05, _, 0x02 ->
          Ok(Item(tag, "MRSeriesNrOfChemicalShifts", [Unknown], vm_1))
        0x20, 0x05, _, 0x03 ->
          Ok(Item(tag, "MRSeriesRepetitionTime", [Unknown], vm_1))
        0x20, 0x05, _, 0x36 ->
          Ok(Item(tag, "MRVolumeSelection", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PMOD_GENPET" ->
      case g0, g1, e0, e1 {
        0x7f, 0xe1, _, 0x01 ->
          Ok(Item(tag, "Slices Names", [UnlimitedText], vm_1))
        0x7f, 0xe1, _, 0x02 ->
          Ok(Item(tag, "Gene Codes", [UnlimitedText], vm_1))
        0x7f, 0xe1, _, 0x03 ->
          Ok(Item(tag, "Gene Labels", [UnlimitedText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "MITRA OBJECT UTF8 ATTRIBUTES 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x33, _, 0x02 ->
          Ok(Item(tag, "Patient's Name", [PersonName], vm_1))
        0x00, 0x33, _, 0x04 ->
          Ok(Item(tag, "Study Description", [CodeString], vm_1))
        0x00, 0x33, _, 0x06 ->
          Ok(Item(tag, "Referring Physician's Name", [PersonName], vm_1))
        0x00, 0x33, _, 0x08 ->
          Ok(Item(tag, "Requesting Physician's Name", [PersonName], vm_1))
        0x00, 0x33, _, 0x0a ->
          Ok(Item(tag, "Performing Physician's Name", [PersonName], vm_1))
        0x00, 0x33, _, 0x0c ->
          Ok(Item(tag, "Reason for Study", [LongString], vm_1))
        0x00, 0x33, _, 0x0e -> Ok(Item(tag, "Study Comments", [LongText], vm_1))
        0x00, 0x33, _, 0x13 ->
          Ok(Item(tag, "Patient's Name Single Byte", [PersonName], vm_1))
        0x00, 0x33, _, 0x14 ->
          Ok(Item(tag, "Patient's Name Ideographic", [PersonName], vm_1))
        0x00, 0x33, _, 0x15 ->
          Ok(Item(tag, "Patient's Name Phonetic", [PersonName], vm_1))
        0x00, 0x33, _, 0x16 ->
          Ok(Item(
            tag,
            "Referring Physician's Name Single Byte",
            [PersonName],
            vm_1,
          ))
        0x00, 0x33, _, 0x17 ->
          Ok(Item(
            tag,
            "Referring Physician's Name Ideographic",
            [PersonName],
            vm_1,
          ))
        0x00, 0x33, _, 0x18 ->
          Ok(Item(
            tag,
            "Referring Physician's Name Phonetic",
            [PersonName],
            vm_1,
          ))
        0x00, 0x33, _, 0x19 ->
          Ok(Item(
            tag,
            "Requesting Physician's Name Single Byte",
            [PersonName],
            vm_1,
          ))
        0x00, 0x33, _, 0x1a ->
          Ok(Item(
            tag,
            "Requesting Physician's Name Ideographic",
            [PersonName],
            vm_1,
          ))
        0x00, 0x33, _, 0x1b ->
          Ok(Item(
            tag,
            "Requesting Physician's Name Phonetic",
            [PersonName],
            vm_1,
          ))
        0x00, 0x33, _, 0x1c ->
          Ok(Item(
            tag,
            "Performing Physician's Name Single Byte",
            [PersonName],
            vm_1,
          ))
        0x00, 0x33, _, 0x1d ->
          Ok(Item(
            tag,
            "Performing Physician's Name Ideographic",
            [PersonName],
            vm_1,
          ))
        0x00, 0x33, _, 0x1e ->
          Ok(Item(
            tag,
            "Performing Physician's Name Phonetic",
            [PersonName],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MR VA0  COAD" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x52 ->
          Ok(Item(tag, "Receiver Preamplifier Gain", [DecimalString], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Gradient Delay Time", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xd6 ->
          Ok(Item(tag, "3D Phase Oversampling Part", [IntegerString], vm_1))
        0x00, 0x19, _, 0xd9 ->
          Ok(Item(tag, "Lines per Segment", [IntegerString], vm_1))
        0x00, 0x19, _, 0x12 ->
          Ok(Item(tag, "Magnetic Field Strength", [DecimalString], vm_1))
        0x00, 0x19, _, 0xc1 ->
          Ok(Item(tag, "EPI Capacity", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x55 ->
          Ok(Item(tag, "Receiver Reference Gain", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd4 ->
          Ok(Item(tag, "Base Raw Matrix Size", [IntegerString], vm_1))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(tag, "Reference Scale Factor", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd2 ->
          Ok(Item(tag, "Calculation Submode", [CodeString], vm_1))
        0x00, 0x19, _, 0x51 ->
          Ok(Item(tag, "Receiver Amplifier Gain", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd7 ->
          Ok(Item(tag, "Echo Line Position", [IntegerString], vm_1))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(tag, "Total Gradient Delay Time", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa0 ->
          Ok(Item(tag, "RF Watchdog Mask", [IntegerString], vm_1))
        0x00, 0x19, _, 0xa6 ->
          Ok(Item(tag, "Specific Energy Dose SED", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xd8 ->
          Ok(Item(tag, "Echo Column Position", [IntegerString], vm_1))
        0x00, 0x19, _, 0xc3 ->
          Ok(Item(
            tag,
            "EPI Switch Configuration Code",
            [IntegerString],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0xd1 ->
          Ok(Item(tag, "Flow Sensitivity", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd3 ->
          Ok(Item(tag, "Field of View Ratio", [DecimalString], vm_1))
        0x00, 0x19, _, 0xda ->
          Ok(Item(tag, "Phase Coding Direction", [CodeString], vm_1))
        0x00, 0x19, _, 0xc5 ->
          Ok(Item(tag, "EPI Switch Delay Time", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xc4 ->
          Ok(Item(tag, "EPI Switch Hardware Code", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0xb0 ->
          Ok(Item(tag, "Adjustment Status Mask", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x26 ->
          Ok(Item(tag, "Transmitter Reference", [DecimalString], vm_1))
        0x00, 0x19, _, 0x24 ->
          Ok(Item(tag, "Transmitter Calibration", [DecimalString], vm_1))
        0x00, 0x19, _, 0xc2 ->
          Ok(Item(tag, "EPI Inductance", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "Sensitivity Correction Label", [LongString], vm_1))
        0x00, 0x19, _, 0x56 ->
          Ok(Item(tag, "Receiver Filter Frequency", [IntegerString], vm_1))
        0x00, 0x19, _, 0x54 ->
          Ok(Item(tag, "Receiver Cable Attenuation", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd5 ->
          Ok(Item(tag, "2D Phase Oversampling Lines", [IntegerString], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "Receiver Total Gain", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa5 ->
          Ok(Item(
            tag,
            "Specific Absorption Rate SAR",
            [DecimalString],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0xa2 ->
          Ok(Item(tag, "RF Power Error Indicator", [DecimalString], vm_1))
        0x00, 0x19, _, 0x16 ->
          Ok(Item(tag, "ADC Offset", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x71 ->
          Ok(Item(tag, "Readout Gradient Amplitude", [DecimalString], vm_1))
        0x00, 0x19, _, 0x92 ->
          Ok(Item(
            tag,
            "Saturation Readout Vector Coronal Component",
            [DecimalString],
            ValueMultiplicity(1, Some(5)),
          ))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Phase Gradient Amplitude", [DecimalString], vm_1))
        0x00, 0x19, _, 0x22 ->
          Ok(Item(tag, "Transmitter Attenuator", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa1 ->
          Ok(Item(tag, "EPI Reconstruction Slope", [DecimalString], vm_1))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(tag, "Transmitter Amplitude", [DecimalString], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Reconstruction Scale Factor", [DecimalString], vm_1))
        0x00, 0x19, _, 0x14 ->
          Ok(Item(tag, "ADC Voltage", [DecimalString], vm_1))
        0x00, 0x19, _, 0x21 ->
          Ok(Item(
            tag,
            "Number of Transmitter Amplitudes",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x72 ->
          Ok(Item(tag, "Selection Gradient Amplitude", [DecimalString], vm_1))
        0x00, 0x19, _, 0x91 ->
          Ok(Item(
            tag,
            "Saturation Phase Encoding Vector Coronal Component",
            [DecimalString],
            ValueMultiplicity(1, Some(5)),
          ))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED MG" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "List of Group Numbers", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x15 ->
          Ok(Item(tag, "List of Shadow Owner Codes", [LongString], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "List of Element Numbers", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x30 ->
          Ok(Item(tag, "List of Total Display Length", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x40 ->
          Ok(Item(tag, "List of Display Prefix", [LongString], vm_1_to_n))
        0x00, 0x29, _, 0x50 ->
          Ok(Item(tag, "List of Display Postfix", [LongString], vm_1_to_n))
        0x00, 0x29, _, 0x60 ->
          Ok(Item(tag, "List of Text Position", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x70 ->
          Ok(Item(tag, "List of Text Concatenation", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Voxar 2.16.124.113543.6003.1999.12.20.12.5.0" ->
      case g0, g1, e0, e1 {
        0x11, 0x35, _, 0x00 ->
          Ok(Item(tag, "Private Voxar Capture UID", [UniqueIdentifier], vm_1))
        0x11, 0x35, _, 0x01 ->
          Ok(Item(tag, "Private Voxar Saved State", [OtherByteString], vm_1))
        0x11, 0x35, _, 0x02 ->
          Ok(Item(tag, "Private Voxar Icon Image Sequence", [Sequence], vm_1))
        0x11, 0x35, _, 0x03 ->
          Ok(Item(
            tag,
            "Private Voxar Top Right Display Demographics",
            [ShortText],
            vm_1,
          ))
        0x11, 0x35, _, 0x04 ->
          Ok(Item(
            tag,
            "Private Voxar Bottom Left Display Demographics",
            [ShortText],
            vm_1,
          ))
        0x11, 0x35, _, 0x05 ->
          Ok(Item(tag, "Private Voxar Span State Schema", [IntegerString], vm_1))
        0x11, 0x35, _, 0x06 ->
          Ok(Item(
            tag,
            "Private Voxar Live Image Restored Size",
            [UnsignedLong],
            vm_1,
          ))
        0x11, 0x35, _, 0x07 ->
          Ok(Item(tag, "Private Voxar CaptureType", [UniqueIdentifier], vm_1))
        0x11, 0x35, _, 0x08 ->
          Ok(Item(
            tag,
            "Private Voxar Capture Source Series UID Sequence",
            [Sequence],
            vm_1,
          ))
        0x11, 0x35, _, 0x09 ->
          Ok(Item(
            tag,
            "Private Voxar Capture Source Series UID",
            [UniqueIdentifier],
            vm_1,
          ))
        0x11, 0x35, _, 0x10 ->
          Ok(Item(
            tag,
            "Private Voxar Background Gray For Capture",
            [IntegerString],
            vm_1,
          ))
        0x11, 0x35, _, 0x11 ->
          Ok(Item(
            tag,
            "Private Voxar Calcium Scoring Report Schema",
            [IntegerString],
            vm_1,
          ))
        0x11, 0x35, _, 0x12 ->
          Ok(Item(
            tag,
            "Private Voxar Source Series Number",
            [IntegerString],
            vm_1,
          ))
        0x11, 0x35, _, 0x13 ->
          Ok(Item(
            tag,
            "Private Voxar Bottom Left Display Demographics",
            [LongString],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 042" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x50 -> Ok(Item(tag, "Unknown", [LongString], vm_3))
        0x20, 0x0d, _, 0x51 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x52 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x53 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x54 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x55 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x56 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x57 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x58 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x59 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x5a -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x5b -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x5c -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x5d -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x5e -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x5f -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x60 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x70 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x71 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x72 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x73 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x74 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x75 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x76 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x77 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEIIS" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 ->
          Ok(Item(tag, "GE IIS Thumbnail Sequence", [Sequence], vm_1))
        0x00, 0x09, _, 0x12 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "Shift Count", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x12 -> Ok(Item(tag, "Offset", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x14 ->
          Ok(Item(tag, "Actual Frame Number", [UnsignedLong], vm_1))
        0x00, 0x4b, _, 0x13 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x4b, _, 0x15 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x09, 0x05, _, 0x30 ->
          Ok(Item(tag, "Assigning Authority For Patient ID", [LongString], vm_1))
        0x09, 0x07, _, 0x10 ->
          Ok(Item(tag, "Original Study Instance UID", [UniqueIdentifier], vm_1))
        0x09, 0x07, _, 0x20 ->
          Ok(Item(tag, "Original Series Instance UID", [UniqueIdentifier], vm_1))
        0x09, 0x07, _, 0x30 ->
          Ok(Item(tag, "Original SOP Instance UID", [UniqueIdentifier], vm_1))
        0x7f, 0xd1, _, 0x10 ->
          Ok(Item(tag, "GE IIS Compression ID", [UnsignedLong], vm_1))
        0x7f, 0xd1, _, 0x20 ->
          Ok(Item(tag, "GE IIS Multiframe Offsets", [UnsignedLong], vm_1))
        0x7f, 0xd1, _, 0x30 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x7f, 0xd1, _, 0x40 ->
          Ok(Item(tag, "Unknown", [UnsignedLong], vm_1_to_n))
        0x7f, 0xd1, _, 0x50 ->
          Ok(Item(tag, "Unknown", [UnsignedLong], vm_1_to_n))
        0x7f, 0xd1, _, 0x60 ->
          Ok(Item(tag, "Unknown", [UnsignedLong], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS DFR.01 ORIGINAL" ->
      case g0, g1, e0, e1 {
        0x00, 0x17, _, 0x51 ->
          Ok(Item(tag, "Image Intensifier Zoom", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x52 ->
          Ok(Item(tag, "ROSA Receiver ErrCount", [UnsignedLong], vm_1))
        0x00, 0x17, _, 0x2a -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x37 ->
          Ok(Item(
            tag,
            "Rectangle Shutter Horizontal Original",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x17, _, 0x72 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0xb2 ->
          Ok(Item(tag, "L2 Acquisition Monitor", [IntegerString], vm_1))
        0x00, 0x17, _, 0x71 ->
          Ok(Item(tag, "Landmark Original", [LongString], vm_1))
        0x00, 0x17, _, 0x7b -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x17, _, 0x32 ->
          Ok(Item(tag, "Number of Maske Original", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0xb1 -> Ok(Item(tag, "L2 Image", [CodeString], vm_1))
        0x00, 0x17, _, 0x18 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x45 ->
          Ok(Item(tag, "Image Intensifer Format", [DecimalString], vm_1))
        0x00, 0x17, _, 0x79 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x41 -> Ok(Item(tag, "Dose", [DecimalString], vm_1))
        0x00, 0x17, _, 0x62 ->
          Ok(Item(tag, "Series Numbers of Petri", [UnsignedShort], vm_1_to_n))
        0x00, 0x17, _, 0x11 ->
          Ok(Item(tag, "Window Width Native Original", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x44 -> Ok(Item(tag, "SDM", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x25 ->
          Ok(Item(
            tag,
            "Edge Enhancement Native Original",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x17, _, 0x42 ->
          Ok(Item(tag, "Dose Area Product", [DecimalString], vm_1))
        0x00, 0x17, _, 0x16 ->
          Ok(Item(tag, "LUT Number for Autowindow", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x74 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x48 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x17, _, 0x43 -> Ok(Item(tag, "Focus", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x34 ->
          Ok(Item(tag, "Slice Position", [DecimalString], vm_1))
        0x00, 0x17, _, 0xc2 -> Ok(Item(tag, "Series UID", [LongString], vm_1))
        0x00, 0x17, _, 0x31 ->
          Ok(Item(tag, "DSA Representation Original", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0xa0 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x17, _, 0x24 ->
          Ok(Item(tag, "Filter Type Native Original", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x23 ->
          Ok(Item(
            tag,
            "Edge Enhancement LUTs Original",
            [UnsignedShort],
            vm_1_to_n,
          ))
        0x00, 0x17, _, 0x21 ->
          Ok(Item(
            tag,
            "Edge Enhancement Kernelsize Original",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x17, _, 0xc3 ->
          Ok(Item(tag, "Subseries UID", [LongString], vm_1))
        0x00, 0x17, _, 0x10 -> Ok(Item(tag, "Image Type", [CodeString], vm_1))
        0x00, 0x17, _, 0x22 ->
          Ok(Item(tag, "Edge Enhancement Mode Original", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x46 ->
          Ok(Item(tag, "Density Correction", [DecimalString], vm_1))
        0x00, 0x17, _, 0x47 ->
          Ok(Item(tag, "Exposure Curves", [LongString], vm_1))
        0x00, 0x17, _, 0x38 ->
          Ok(Item(tag, "Rectangle Vertical Original", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x61 ->
          Ok(Item(tag, "Table Position Peri", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x33 ->
          Ok(Item(tag, "RightLeft Mark Original", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x12 ->
          Ok(Item(tag, "Window Center Native", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0xc1 -> Ok(Item(tag, "Folder UID", [LongString], vm_1))
        0x00, 0x17, _, 0x30 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x17, _, 0x27 ->
          Ok(Item(
            tag,
            "Edge Enhancement Subtraction Original",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x17, _, 0x49 ->
          Ok(Item(tag, "Organ Program Name", [LongString], vm_1))
        0x00, 0x17, _, 0x73 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x26 ->
          Ok(Item(
            tag,
            "Filter Type Subtraction Original",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x17, _, 0x14 ->
          Ok(Item(
            tag,
            "Window Width Subtraction Original",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x17, _, 0x4a ->
          Ok(Item(tag, "Count of Images in Series", [IntegerString], vm_1))
        0x00, 0x17, _, 0x7a ->
          Ok(Item(tag, "Invers Original", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x15 ->
          Ok(Item(
            tag,
            "Window Center Subtraction Original",
            [UnsignedShort],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "BrainLAB_Conversion" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x01 ->
          Ok(Item(tag, "Export Platform Name", [LongString], vm_1))
        0x00, 0x09, _, 0x02 ->
          Ok(Item(tag, "Export Platform Data", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "VEPRO VIF 3.0 DATA" ->
      case g0, g1, e0, e1 {
        0x00, 0x55, _, 0x30 ->
          Ok(Item(tag, "Icon data", [OtherByteString], vm_1))
        0x00, 0x55, _, 0x65 ->
          Ok(Item(tag, "Image hash value", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "BrainLAB_PatientSetup" ->
      case g0, g1, e0, e1 {
        0x32, 0x73, _, 0x00 ->
          Ok(Item(tag, "Isocenter Position", [DecimalString], vm_3))
        0x32, 0x73, _, 0x01 ->
          Ok(Item(tag, "Patient Position", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Silhouette Sequence Ids V1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x41 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x42 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x43 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging 60" ->
      case g0, g1, e0, e1 {
        0x00, 0x31, _, 0x30 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        0x00, 0x31, _, 0x31 ->
          Ok(Item(tag, "Private data", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AMI Sequence AnnotElements_01" ->
      case g0, g1, e0, e1 {
        0x31, 0x05, _, 0x10 ->
          Ok(Item(tag, "AMI Annotation Element Position", [DecimalString], vm_1))
        0x31, 0x05, _, 0x20 ->
          Ok(Item(tag, "AMI Annotation Element Text", [LongText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CBT TOTAL_MU" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x96 ->
          Ok(Item(
            tag,
            "Total MU delivered during Cone Beam",
            [DecimalString],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "Philips X-ray Imaging DD 001" ->
      case g0, g1, e0, e1 {
        0x20, 0x03, _, 0x2b ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x03, _, 0x11 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x03, _, 0x32 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x20, 0x03, _, 0x26 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x03, _, 0x24 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_4))
        0x20, 0x03, _, 0x29 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x03, _, 0x04 ->
          Ok(Item(tag, "Private enhanced Table Sequence", [Sequence], vm_1))
        0x20, 0x03, _, 0x28 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x03, _, 0x2e -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x03, _, 0x2d -> Ok(Item(tag, "Unknown", [SignedLong], vm_1_to_n))
        0x20, 0x03, _, 0x15 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x03, _, 0x03 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x03, _, 0x14 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x03, _, 0x02 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_3))
        0x20, 0x03, _, 0x12 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x03, _, 0x2c -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x03, _, 0x09 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x03, _, 0x27 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x03, _, 0x17 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x03, _, 0x30 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x03, _, 0x16 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x03, _, 0x00 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x03, _, 0x13 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x03, _, 0x19 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x03, _, 0x2f ->
          Ok(Item(tag, "IsResolvePatientMixApplied", [CodeString], vm_1))
        0x20, 0x03, _, 0x18 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x03, _, 0x2a -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x03, _, 0x22 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x03, _, 0x31 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x03, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x03, _, 0x10 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x03, _, 0x25 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x03, _, 0x06 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SEGAMI MIML" ->
      case g0, g1, e0, e1 {
        0x00, 0x31, _, 0x98 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED HG" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "List of Group Numbers", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x15 ->
          Ok(Item(tag, "List of Shadow Owner Codes", [LongString], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "List of Element Numbers", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x30 ->
          Ok(Item(tag, "List of Total Display Length", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x40 ->
          Ok(Item(tag, "List of Display Prefix", [LongString], vm_1_to_n))
        0x00, 0x29, _, 0x50 ->
          Ok(Item(tag, "List of Display Postfix", [LongString], vm_1_to_n))
        0x00, 0x29, _, 0x60 ->
          Ok(Item(tag, "List of Text Position", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x70 ->
          Ok(Item(tag, "List of Text Concatenation", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "ATL PRIVATE TAGS" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x30 -> Ok(Item(tag, "Loop Mode", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x31 ->
          Ok(Item(tag, "Trigger mode", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x32 ->
          Ok(Item(tag, "Number of Loops", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x33 ->
          Ok(Item(tag, "Loop Indexes", [DecimalString], vm_1_to_n))
        0x00, 0x29, _, 0x34 ->
          Ok(Item(tag, "Loop Heart Rates", [DecimalString], vm_1_to_n))
        0x00, 0x29, _, 0x35 -> Ok(Item(tag, "Medications", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "MAROTECH Inc." ->
      case g0, g1, e0, e1 {
        0x00, 0x37, _, 0x01 ->
          Ok(Item(tag, "Some kind of version number", [LongString], vm_1))
        0x00, 0x37, _, 0x21 -> Ok(Item(tag, "Icon Row", [UnsignedShort], vm_1))
        0x00, 0x37, _, 0x22 -> Ok(Item(tag, "Icon Col", [UnsignedShort], vm_1))
        0x00, 0x37, _, 0x23 ->
          Ok(Item(tag, "JPEG Compressed Icon", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_IDEN_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, 0x10, _ ->
          Ok(Item(tag, "Private Element Creator", [LongString], vm_1))
        0x00, 0x09, _, 0x01 ->
          Ok(Item(tag, "Full fidelity", [LongString], vm_1))
        0x00, 0x09, _, 0x02 -> Ok(Item(tag, "Suite id", [ShortString], vm_1))
        0x00, 0x09, _, 0x04 -> Ok(Item(tag, "Product id", [ShortString], vm_1))
        0x00, 0x09, _, 0x17 ->
          Ok(Item(tag, "Series Description", [LongText], vm_1))
        0x00, 0x09, _, 0x1a -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x20 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x27 ->
          Ok(Item(tag, "Image actual date", [SignedLong], vm_1))
        0x00, 0x09, _, 0x2f -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x09, _, 0x30 -> Ok(Item(tag, "Service id", [ShortString], vm_1))
        0x00, 0x09, _, 0x31 ->
          Ok(Item(tag, "Mobile location number", [ShortString], vm_1))
        0x00, 0x09, _, 0xe2 ->
          Ok(Item(
            tag,
            "Image Type (ORIGINAL\\PROSPECTIVE ...)",
            [LongText],
            vm_1_to_n,
          ))
        0x00, 0x09, _, 0xe3 ->
          Ok(Item(tag, "Equipment UID", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0xe6 ->
          Ok(Item(tag, "Genesis Version - now", [ShortString], vm_1))
        0x00, 0x09, _, 0xe7 ->
          Ok(Item(tag, "Exam Record checksum", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0xe8 ->
          Ok(Item(tag, "Series Suite Id", [ShortString], vm_1))
        0x00, 0x09, _, 0xe9 ->
          Ok(Item(tag, "Actual series data time stamp", [SignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CSA HEADER" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "CSA Image Header Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x09 ->
          Ok(Item(tag, "CSA Image Header Version", [LongString], vm_1))
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "CSA Image Header Info", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x18 ->
          Ok(Item(tag, "CSA Series Header Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x19 ->
          Ok(Item(tag, "CSA Series Header Version", [LongString], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "CSA Series Header Info", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Acuson X500" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x20 -> Ok(Item(tag, "(a)View Name", [Unknown], vm_1))
        0x00, 0x09, _, 0x2a -> Ok(Item(tag, "View List", [Unknown], vm_1))
        0x00, 0x11, _, 0x10 -> Ok(Item(tag, "Siemens Medical", [Unknown], vm_1))
        0x00, 0x11, _, 0x11 -> Ok(Item(tag, "DIMAQ Software", [Unknown], vm_1))
        0x00, 0x11, _, 0x20 -> Ok(Item(tag, "Private Data", [Unknown], vm_1))
        0x00, 0x11, _, 0x21 -> Ok(Item(tag, "Private Data", [Unknown], vm_1))
        0x00, 0x13, _, 0x10 -> Ok(Item(tag, "Siemens Medical", [Unknown], vm_1))
        0x00, 0x13, _, 0x11 -> Ok(Item(tag, "DIMAQ Software", [Unknown], vm_1))
        0x00, 0x13, _, 0x20 -> Ok(Item(tag, "Private Data", [Unknown], vm_1))
        0x00, 0x15, _, 0x10 -> Ok(Item(tag, "Siemens Medical", [Unknown], vm_1))
        0x00, 0x15, _, 0x11 -> Ok(Item(tag, "DIMAQ Software", [Unknown], vm_1))
        0x00, 0x15, _, 0x20 -> Ok(Item(tag, "Private Data", [Unknown], vm_1))
        0x00, 0x17, _, 0x10 -> Ok(Item(tag, "Siemens Medical", [Unknown], vm_1))
        0x00, 0x17, _, 0x11 -> Ok(Item(tag, "DIMAQ Software", [Unknown], vm_1))
        0x00, 0x17, _, 0x20 -> Ok(Item(tag, "Private Data", [Unknown], vm_1))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(tag, "Import Structured", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "MMCPrivate" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x48 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x15 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x26 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x27 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x09 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x0e -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x20 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x2e -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x29 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x11, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x0f -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x13 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x12 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x2f -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x0a -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x17 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x03 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x19, _, 0x05 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x08 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x06 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x28 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x0c -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x10 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x0f -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x14 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x2b -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x1c -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x0a -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x2d -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x0d -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x4e -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x09 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x0b -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x02 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x22 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x19, _, 0x0b -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x21 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x02 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x11 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x24 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x23 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x25 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x2a -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x18 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x0c -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x2c -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x08 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x01 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x16 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x05 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x04 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips Imaging DD 065" ->
      case g0, g1, e0, e1 {
        0x40, 0x07, _, 0x00 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips NM Private Group" ->
      case g0, g1, e0, e1 {
        0x70, 0x43, _, 0x00 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "TOSHIBA MDW NON-IMAGE" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "Application Header Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x09 ->
          Ok(Item(tag, "Application Header Version", [LongString], vm_1))
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "Application Header Data", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "Application Header Data", [OtherByteString], vm_1))
        0x7f, 0xe1, _, 0x10 ->
          Ok(Item(tag, "Toshiba US Private Data", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_QVA_PHOTO_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x60 ->
          Ok(Item(
            tag,
            "Dodge End Diastolic Volume ml",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x61 ->
          Ok(Item(
            tag,
            "Dodge End Systolic Volume ml",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x62 ->
          Ok(Item(tag, "Dodge Stroke Volume ml", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x63 ->
          Ok(Item(tag, "Dodge Ejection Fraction", [IntegerString], vm_1))
        0x00, 0x09, _, 0x64 ->
          Ok(Item(
            tag,
            "Simpson End Diastolic Volume ml",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x65 ->
          Ok(Item(
            tag,
            "Simpson End Systolic Volume ml",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x66 ->
          Ok(Item(tag, "Simpson Stroke Volume ml", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x67 ->
          Ok(Item(tag, "Simpson Ejection Fraction", [IntegerString], vm_1))
        0x00, 0x09, _, 0x68 ->
          Ok(Item(
            tag,
            "CFX Single Hypokinesia in Region",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x69 ->
          Ok(Item(
            tag,
            "CFX Single Hyperkinesia in Opposite Region",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x6a ->
          Ok(Item(
            tag,
            "CFX Single Total LV contour Percent",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x09, _, 0x6b ->
          Ok(Item(
            tag,
            "CFX Multiple Hypokinesia in Region",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x6c ->
          Ok(Item(
            tag,
            "CFX Multiple Hyperkinesia in Opposite Region",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x6d ->
          Ok(Item(
            tag,
            "CFX Multiple Total LV contour Percent",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x09, _, 0x6e ->
          Ok(Item(
            tag,
            "RCA Single Hypokinesia in Region",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x6f ->
          Ok(Item(
            tag,
            "RCA Single Hyperkinesia in Opposite Region",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x70 ->
          Ok(Item(
            tag,
            "RCA Single Total LV contour Percent",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x09, _, 0x71 ->
          Ok(Item(
            tag,
            "RCA Multiple Hypokinesia in Region",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x72 ->
          Ok(Item(
            tag,
            "RCA Multiple Hyperkinesia in Opposite Region",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x73 ->
          Ok(Item(
            tag,
            "RCA Multiple Total LV contour Percent",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x09, _, 0x74 ->
          Ok(Item(
            tag,
            "LAD Single Hypokinesia in Region",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x75 ->
          Ok(Item(
            tag,
            "LAD Single Hyperkinesia in Opposite Region",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x76 ->
          Ok(Item(
            tag,
            "LAD Single Total LV contour Percent",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x09, _, 0x77 ->
          Ok(Item(
            tag,
            "LAD Multiple Hypokinesia in Region",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x78 ->
          Ok(Item(
            tag,
            "LAD Multiple Hyperkinesia in Opposite Region",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x79 ->
          Ok(Item(
            tag,
            "LAD Multiple Total LV contour Percent",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x09, _, 0x7a ->
          Ok(Item(
            tag,
            "Dodge End Diastolic Volume ml/m2",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x7c ->
          Ok(Item(
            tag,
            "Dodge End Systolic Volume ml/m2",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x7e ->
          Ok(Item(tag, "Dodge Stroke Volume ml/m2", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x80 ->
          Ok(Item(
            tag,
            "Simpson End Diastolic Volume ml/m2",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x82 ->
          Ok(Item(
            tag,
            "Simpson End Systolic Volume ml/m2",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x09, _, 0x84 ->
          Ok(Item(
            tag,
            "Simpson Stroke Volume ml/m2",
            [FloatingPointSingle],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "MITRA OBJECT DOCUMENT 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x00 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-Private_CDS Release 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x40 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x00 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "BRIT Systems, Inc." ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0xa1 -> Ok(Item(tag, "Object Action", [ShortText], vm_1))
        0x00, 0x21, _, 0x12 ->
          Ok(Item(tag, "Original Study Instance UID", [UniqueIdentifier], vm_1))
        0x00, 0x21, _, 0x0d -> Ok(Item(tag, "Physician ID", [LongString], vm_1))
        0x00, 0x21, _, 0x30 -> Ok(Item(tag, "QC Done Time", [LongString], vm_1))
        0x00, 0x21, _, 0x92 ->
          Ok(Item(tag, "Software Version", [ShortString], vm_1))
        0x00, 0x21, _, 0x90 ->
          Ok(Item(tag, "Original Sender AE Title", [ApplicationEntity], vm_1))
        0x00, 0x21, _, 0x07 ->
          Ok(Item(tag, "Person Pager Phone", [ShortString], vm_1))
        0x00, 0x21, _, 0x16 -> Ok(Item(tag, "Patient ICN", [LongString], vm_1))
        0x00, 0x21, _, 0x18 ->
          Ok(Item(tag, "Patient Class", [LongString], vm_1))
        0x00, 0x21, _, 0x50 ->
          Ok(Item(tag, "QC Deletion Requested", [LongString], vm_1))
        0x00, 0x21, _, 0xa5 ->
          Ok(Item(tag, "Local AE Title", [ApplicationEntity], vm_1))
        0x00, 0x21, _, 0x11 ->
          Ok(Item(tag, "Original Patient ID", [LongString], vm_1))
        0x00, 0x21, _, 0x34 -> Ok(Item(tag, "QC Done Date", [Date], vm_1))
        0x00, 0x21, _, 0x32 ->
          Ok(Item(tag, "QC Image Accepted By", [LongString], vm_1))
        0x00, 0x21, _, 0x93 ->
          Ok(Item(tag, "Serial Number", [LongString], vm_1))
        0x00, 0x21, _, 0x15 ->
          Ok(Item(tag, "Order Category", [LongString], vm_1))
        0x00, 0x21, _, 0x33 ->
          Ok(Item(tag, "QC Image Rejected By", [LongString], vm_1))
        0x00, 0x21, _, 0xa7 ->
          Ok(Item(tag, "Remote AE Title", [ApplicationEntity], vm_1))
        0x00, 0x21, _, 0x13 ->
          Ok(Item(tag, "Original Series Instance UID", [UniqueIdentifier], vm_1))
        0x00, 0x21, _, 0x17 -> Ok(Item(tag, "Patient DFS", [LongString], vm_1))
        0x00, 0x21, _, 0x31 ->
          Ok(Item(tag, "QC Last Modification Time", [LongString], vm_1))
        0x00, 0x21, _, 0x20 ->
          Ok(Item(tag, "QC Study Assigned By", [LongString], vm_1))
        0x00, 0x21, _, 0xa8 ->
          Ok(Item(tag, "Remote IP Address", [ShortString], vm_1))
        0x00, 0x21, _, 0xa3 -> Ok(Item(tag, "Object Action Time", [Time], vm_1))
        0x00, 0x21, _, 0x22 ->
          Ok(Item(tag, "QC Study Moved By", [LongString], vm_1))
        0x00, 0x21, _, 0x19 -> Ok(Item(tag, "Patient Type", [LongString], vm_1))
        0x00, 0x21, _, 0x05 ->
          Ok(Item(tag, "Person Work Phone", [ShortString], vm_1))
        0x00, 0x21, _, 0x91 ->
          Ok(Item(tag, "Software Title", [LongString], vm_1))
        0x00, 0x21, _, 0xa0 ->
          Ok(Item(tag, "Object Action Sequence", [Sequence], vm_1))
        0x00, 0x21, _, 0x02 -> Ok(Item(tag, "Person Name", [PersonName], vm_1))
        0x00, 0x21, _, 0x24 ->
          Ok(Item(tag, "QC Series Split By", [LongString], vm_1))
        0x00, 0x21, _, 0x0b ->
          Ok(Item(tag, "Person Password", [LongString], vm_1))
        0x00, 0x21, _, 0x06 ->
          Ok(Item(tag, "Person Cell Phone", [ShortString], vm_1))
        0x00, 0x21, _, 0x03 -> Ok(Item(tag, "Person Role", [LongString], vm_1))
        0x00, 0x21, _, 0x0a ->
          Ok(Item(tag, "Person Address", [ShortText], vm_1))
        0x00, 0x21, _, 0x26 ->
          Ok(Item(tag, "QC Series Edited By", [LongString], vm_1))
        0x00, 0x21, _, 0x04 ->
          Ok(Item(tag, "Person Home Phone", [ShortString], vm_1))
        0x00, 0x21, _, 0x00 ->
          Ok(Item(tag, "Person Information Sequence", [Sequence], vm_1))
        0x00, 0x21, _, 0xa2 -> Ok(Item(tag, "Object Action Date", [Date], vm_1))
        0x00, 0x21, _, 0x27 ->
          Ok(Item(tag, "QC Image Moved By", [LongString], vm_1))
        0x00, 0x21, _, 0x25 ->
          Ok(Item(tag, "QC Series Moved By", [LongString], vm_1))
        0x00, 0x21, _, 0xa6 ->
          Ok(Item(tag, "Local IP Address", [ShortString], vm_1))
        0x00, 0x21, _, 0x28 ->
          Ok(Item(tag, "QC Image Edited By", [LongString], vm_1))
        0x00, 0x21, _, 0x14 ->
          Ok(Item(tag, "Master Accession Number", [LongString], vm_1))
        0x00, 0x21, _, 0x08 ->
          Ok(Item(tag, "Person Fax Phone", [ShortString], vm_1))
        0x00, 0x21, _, 0x23 ->
          Ok(Item(tag, "QC Study Edited By", [LongString], vm_1))
        0x00, 0x21, _, 0x1f -> Ok(Item(tag, "Generic String", [LongText], vm_1))
        0x00, 0x21, _, 0x21 ->
          Ok(Item(tag, "QC Study Split By", [LongString], vm_1))
        0x00, 0x21, _, 0x09 -> Ok(Item(tag, "Person EMail", [LongString], vm_1))
        0x00, 0x21, _, 0x01 -> Ok(Item(tag, "Person ID", [LongString], vm_1))
        0x00, 0x21, _, 0x0c ->
          Ok(Item(tag, "Person Emergency Phone", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CBT MISSING PROJECTION FRAMES" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x91 ->
          Ok(Item(tag, "Missing Projection Frames", [IntegerString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "Philips Imaging DD 002" ->
      case g0, g1, e0, e1 {
        0x20, 0x01, _, 0x22 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x33 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x1a ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x3b -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x01, _, 0x13 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x30 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x26 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x29 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x01, _, 0x14 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x21 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x2c ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x24 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x1e ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x27 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x1f ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x36 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x2e -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x2a -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x01, _, 0x2b -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x37 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x28 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x01, _, 0x17 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x1d ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x16 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x23 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x2d ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x3e -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x02 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x1c ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x19 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x34 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x15 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x1b ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x35 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x2f -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x40 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x3c -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x01, _, 0x3a -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x01, _, 0x31 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x32 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x25 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x3f -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x01 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x01, _, 0x39 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x01, _, 0x20 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x18 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x01, _, 0x3d -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Mayo/IBM Archive Project" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x01 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x10 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x11 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x12 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x13 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x14 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x15 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x16 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x17 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x18 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x19 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x1a -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x1b -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x1c -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x1d -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x1e -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x1f -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x20 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x40 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x41 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x50 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x60 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x65 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS DFR.01 MANIPULATED" ->
      case g0, g1, e0, e1 {
        0x00, 0x17, _, 0x35 ->
          Ok(Item(tag, "Number of Series Representative", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0xa2 ->
          Ok(Item(tag, "Image Name Extension 1", [LongString], vm_1))
        0x00, 0x17, _, 0x37 ->
          Ok(Item(
            tag,
            "Rectangle Shutter Horizontal Current",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x17, _, 0x72 ->
          Ok(Item(tag, "Zoom Factor", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x71 ->
          Ok(Item(tag, "Landmark Current", [LongString], vm_1))
        0x00, 0x17, _, 0x32 ->
          Ok(Item(tag, "Number of Mask Current", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x78 ->
          Ok(Item(tag, "Pixel Shift Vertical", [IntegerString], vm_1))
        0x00, 0x17, _, 0x79 ->
          Ok(Item(tag, "Image Flip", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x92 ->
          Ok(Item(tag, "Summation Count Mask", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x11 ->
          Ok(Item(tag, "Window Width Native Current", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x25 ->
          Ok(Item(tag, "Edge Enhancement Native Current", [DecimalString], vm_1))
        0x00, 0x17, _, 0x74 ->
          Ok(Item(tag, "Roam Vertical", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x93 ->
          Ok(Item(tag, "PeakOp Start", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x29 ->
          Ok(Item(tag, "Edge Enhancement %", [IntegerString], vm_1))
        0x00, 0x17, _, 0xa3 ->
          Ok(Item(tag, "Image Name Extension 2", [LongString], vm_1))
        0x00, 0x17, _, 0x31 ->
          Ok(Item(tag, "DSA Representation Current", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x80 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0xa1 -> Ok(Item(tag, "Image Name", [LongString], vm_1))
        0x00, 0x17, _, 0xa0 -> Ok(Item(tag, "Cine Rate", [IntegerString], vm_1))
        0x00, 0x17, _, 0x91 ->
          Ok(Item(tag, "Summation Count Filling", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x77 ->
          Ok(Item(tag, "Pixel Shift Horizontal", [IntegerString], vm_1))
        0x00, 0x17, _, 0x84 -> Ok(Item(tag, "Right Marker", [LongString], vm_1))
        0x00, 0x17, _, 0x94 ->
          Ok(Item(tag, "PeakOp End", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x83 ->
          Ok(Item(tag, "Documentation Flag", [ShortString], vm_1))
        0x00, 0x17, _, 0x38 ->
          Ok(Item(
            tag,
            "Rectangle Shutter Vertical Aktuell",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x17, _, 0x33 ->
          Ok(Item(tag, "RightLeft Mark Current", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x12 ->
          Ok(Item(tag, "Window Center Native", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x30 ->
          Ok(Item(tag, "Harmonization %", [IntegerString], vm_1))
        0x00, 0x17, _, 0x27 ->
          Ok(Item(
            tag,
            "Edge Enhancement Subtraction Current",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x17, _, 0x73 ->
          Ok(Item(tag, "Roam Horizontal", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x14 ->
          Ok(Item(
            tag,
            "Window Width Subtraction Current",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x17, _, 0x7a ->
          Ok(Item(tag, "Invers Current", [UnsignedShort], vm_1))
        0x00, 0x17, _, 0x15 ->
          Ok(Item(
            tag,
            "Window Center Subtraction Current",
            [UnsignedShort],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "ELGEMS_XPERT" ->
      case g0, g1, e0, e1 {
        0x7f, 0xa1, _, 0x00 ->
          Ok(Item(
            tag,
            "XPert Composite Report Item buffer",
            [OtherByteString],
            vm_1,
          ))
        0x7f, 0xa1, _, 0x10 ->
          Ok(Item(
            tag,
            "Xpert Composite Report Item Identificator",
            [OtherByteString],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_MR_RAW_01" ->
      case g0, g1, e0, e1 {
        0x70, 0x01, _, 0x01 ->
          Ok(Item(tag, "rdb_hdr_rec", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x02 ->
          Ok(Item(tag, "rdb_hdr_per_pass_tab", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x03 ->
          Ok(Item(tag, "rdb_hdr_unlock_raw", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x04 ->
          Ok(Item(tag, "rdb_hdr_data_acq_tab", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x05 ->
          Ok(Item(tag, "rdb_hdr_nex_tab", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x06 ->
          Ok(Item(tag, "rdb_hdr_nex_abort_tab", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x07 ->
          Ok(Item(tag, "rdb_hdr_tool", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x08 ->
          Ok(Item(tag, "rdb_raw_data", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x09 ->
          Ok(Item(tag, "SSP save", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x0a ->
          Ok(Item(tag, "UDA save", [OtherByteString], vm_1))
        0x70, 0x01, _, 0x0b ->
          Ok(Item(tag, "rdb_chemsat_data", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "CAMTRONICS IP" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x29, _, 0x20 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x30 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x40 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-Private_ICS Release 1;5" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x50 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x29, _, 0x55 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "IMPAC" ->
      case g0, g1, e0, e1 {
        0x30, 0x0b, _, 0x02 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x30, 0x0b, _, 0x04 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x30, 0x0b, _, 0x0e ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Mitra Markup 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x00 ->
          Ok(Item(tag, "Markup1", [OtherByteString], vm_1_to_n))
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Markup2", [OtherByteString], vm_1_to_n))
        0x00, 0x29, _, 0x02 ->
          Ok(Item(tag, "Markup3", [OtherByteString], vm_1_to_n))
        0x00, 0x29, _, 0x03 ->
          Ok(Item(tag, "Markup4", [OtherByteString], vm_1_to_n))
        0x00, 0x29, _, 0x04 ->
          Ok(Item(tag, "Markup5", [OtherByteString], vm_1_to_n))
        0x00, 0x29, _, 0x05 ->
          Ok(Item(tag, "Markup6", [OtherByteString], vm_1_to_n))
        0x00, 0x29, _, 0x06 ->
          Ok(Item(tag, "Markup7", [OtherByteString], vm_1_to_n))
        0x00, 0x29, _, 0x07 ->
          Ok(Item(tag, "Markup8", [OtherByteString], vm_1_to_n))
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "Markup9", [OtherByteString], vm_1_to_n))
        0x00, 0x29, _, 0x09 ->
          Ok(Item(tag, "Markup10", [OtherByteString], vm_1_to_n))
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "Markup11", [OtherByteString], vm_1_to_n))
        0x00, 0x29, _, 0x11 ->
          Ok(Item(tag, "Markup12", [OtherByteString], vm_1_to_n))
        0x00, 0x29, _, 0x12 ->
          Ok(Item(tag, "Markup13", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x13 ->
          Ok(Item(tag, "Markup14", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x14 ->
          Ok(Item(tag, "Markup15", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x25, _, 0x00 ->
          Ok(Item(tag, "View Native", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x01 ->
          Ok(Item(tag, "Original Series Number", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x02 ->
          Ok(Item(tag, "Original Image Number", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x03 ->
          Ok(Item(tag, "Win Center", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x04 -> Ok(Item(tag, "Win Width", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x05 ->
          Ok(Item(tag, "Win Brightness", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x06 ->
          Ok(Item(tag, "Win Contrast", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x07 ->
          Ok(Item(tag, "Original Frame Number", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x08 ->
          Ok(Item(tag, "Original Mask Frame Number", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x09 -> Ok(Item(tag, "Opac", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x0a ->
          Ok(Item(tag, "Original Number of Frames", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x0b ->
          Ok(Item(tag, "Original Scene Duration", [DecimalString], vm_1))
        0x00, 0x25, _, 0x0c ->
          Ok(Item(tag, "Identifier LOID", [LongString], vm_1))
        0x00, 0x25, _, 0x0d ->
          Ok(Item(tag, "Original Scene VFR Info", [SignedShort], vm_1_to_n))
        0x00, 0x25, _, 0x0e ->
          Ok(Item(tag, "Original Frame ECG Position", [SignedShort], vm_1))
        0x00, 0x25, _, 0x0f ->
          Ok(Item(
            tag,
            "Original ECG 1st Frame Offset (retired)",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x25, _, 0x10 -> Ok(Item(tag, "Zoom Flag", [SignedShort], vm_1))
        0x00, 0x25, _, 0x11 -> Ok(Item(tag, "Flex", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x12 ->
          Ok(Item(tag, "Number of Mask Frames", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x13 ->
          Ok(Item(tag, "Number of Fill Frames", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x14 ->
          Ok(Item(tag, "Series Number", [IntegerString], vm_1))
        0x00, 0x25, _, 0x15 ->
          Ok(Item(tag, "Image Number", [IntegerString], vm_1))
        0x00, 0x25, _, 0x16 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_DRS_1" ->
      case g0, g1, e0, e1 {
        0x00, 0x37, _, 0x10 ->
          Ok(Item(tag, "Referring Department", [LongString], vm_1))
        0x00, 0x37, _, 0x20 ->
          Ok(Item(tag, "Screen Number", [UnsignedShort], vm_1))
        0x00, 0x37, _, 0x40 ->
          Ok(Item(tag, "Left Orientation", [ShortString], vm_1))
        0x00, 0x37, _, 0x42 ->
          Ok(Item(tag, "Right Orientation", [ShortString], vm_1))
        0x00, 0x37, _, 0x50 -> Ok(Item(tag, "Inversion", [CodeString], vm_1))
        0x00, 0x37, _, 0x60 -> Ok(Item(tag, "DSA", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_XELPRV_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x57, _, 0x5e ->
          Ok(Item(tag, "FrameNumber", [UnsignedLong], vm_1))
        0x00, 0x57, _, 0x59 ->
          Ok(Item(tag, "ShapePtsSpace", [SignedLong], vm_1_to_n))
        0x00, 0x33, _, 0x18 -> Ok(Item(tag, "Time", [ShortString], vm_1))
        0x00, 0x33, _, 0x51 ->
          Ok(Item(tag, "PDOSOPClassUID", [UniqueIdentifier], vm_1))
        0x00, 0x33, _, 0x08 -> Ok(Item(tag, "Object Type", [CodeString], vm_1))
        0x00, 0x33, _, 0x20 ->
          Ok(Item(tag, "BulkDataFormat", [OtherByteString], vm_1))
        0x00, 0x57, _, 0x60 ->
          Ok(Item(tag, "DatasetROIMapping", [LongString], vm_1_to_n))
        0x00, 0x57, _, 0x5b ->
          Ok(Item(tag, "Shap CtrlPts", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x33, _, 0x29 ->
          Ok(Item(tag, "RTSpecification", [LongText], vm_1))
        0x00, 0x57, _, 0x56 ->
          Ok(Item(tag, "ShapeTilt", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x33, _, 0x60 ->
          Ok(Item(tag, "ReviewtemplateSQ", [Sequence], vm_1))
        0x00, 0x57, _, 0x13 -> Ok(Item(tag, "Type", [UniqueIdentifier], vm_1))
        0x00, 0x33, _, 0x2b ->
          Ok(Item(tag, "DataValidationSpec", [LongText], vm_1))
        0x00, 0x57, _, 0x42 -> Ok(Item(tag, "Name", [LongString], vm_1))
        0x00, 0x33, _, 0x73 ->
          Ok(Item(tag, "SDODoubleDataSQ", [Sequence], vm_1))
        0x00, 0x57, _, 0x4c ->
          Ok(Item(tag, "LineThickness", [SignedLong], vm_1))
        0x00, 0x57, _, 0x12 -> Ok(Item(tag, "Points", [UniqueIdentifier], vm_1))
        0x00, 0x33, _, 0x14 -> Ok(Item(tag, "StudyId", [LongString], vm_1))
        0x00, 0x33, _, 0x1a -> Ok(Item(tag, "ProtocolName", [LongString], vm_1))
        0x00, 0x33, _, 0x72 ->
          Ok(Item(tag, "SDOSOPInstanceUID", [UniqueIdentifier], vm_1))
        0x00, 0x57, _, 0x5c -> Ok(Item(tag, "ShapeCPSpace", [SignedLong], vm_1))
        0x00, 0x33, _, 0x1b -> Ok(Item(tag, "StudyId", [LongString], vm_1))
        0x00, 0x33, _, 0x61 ->
          Ok(Item(tag, "RTOSOPClassUID", [UniqueIdentifier], vm_1))
        0x00, 0x33, _, 0x22 ->
          Ok(Item(tag, "DoubleDataFormat", [OtherByteString], vm_1))
        0x00, 0x57, _, 0x4a -> Ok(Item(tag, "LineStyle", [SignedLong], vm_1))
        0x00, 0x57, _, 0x03 ->
          Ok(Item(tag, "SOPInstanceUID", [UniqueIdentifier], vm_1))
        0x00, 0x57, _, 0x54 ->
          Ok(Item(tag, "Seeds", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x33, _, 0x28 -> Ok(Item(tag, "RTName", [LongString], vm_1))
        0x00, 0x33, _, 0x24 -> Ok(Item(tag, "Description", [LongText], vm_1))
        0x00, 0x57, _, 0x47 ->
          Ok(Item(tag, "Normal Colour", [LongString], vm_1))
        0x00, 0x57, _, 0x02 ->
          Ok(Item(tag, "SOPClassUID", [UniqueIdentifier], vm_1))
        0x00, 0x57, _, 0x10 -> Ok(Item(tag, "ROINumber", [IntegerString], vm_1))
        0x00, 0x33, _, 0x2d ->
          Ok(Item(tag, "IconDescription", [LongText], vm_1))
        0x00, 0x57, _, 0x45 -> Ok(Item(tag, "SOPClassUID", [LongString], vm_1))
        0x00, 0x33, _, 0x1e ->
          Ok(Item(tag, "DoubleData", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x57, _, 0x5d ->
          Ok(Item(tag, "ROIFlags", [UnsignedLong], vm_1_to_n))
        0x00, 0x33, _, 0x1d -> Ok(Item(tag, "IntData", [SignedLong], vm_1_to_n))
        0x00, 0x33, _, 0x70 -> Ok(Item(tag, "SeriesdataSQ", [Sequence], vm_1))
        0x00, 0x33, _, 0x71 ->
          Ok(Item(tag, "SDOSOPClassUID", [UniqueIdentifier], vm_1))
        0x00, 0x57, _, 0x43 -> Ok(Item(tag, "Rid", [SignedLong], vm_1))
        0x00, 0x57, _, 0x15 ->
          Ok(Item(tag, "Data value Representation", [UniqueIdentifier], vm_1))
        0x00, 0x57, _, 0x14 ->
          Ok(Item(tag, "Description", [UniqueIdentifier], vm_1))
        0x00, 0x33, _, 0x17 -> Ok(Item(tag, "Date", [ShortString], vm_1))
        0x00, 0x33, _, 0x23 ->
          Ok(Item(tag, "StringDataFormat", [OtherByteString], vm_1))
        0x00, 0x33, _, 0x50 -> Ok(Item(tag, "ProtocoldataSQ", [Sequence], vm_1))
        0x00, 0x57, _, 0x5a ->
          Ok(Item(tag, "ShapeCtrlPtsCount", [SignedLong], vm_1_to_n))
        0x00, 0x33, _, 0x19 ->
          Ok(Item(tag, "ProtocoldataFlags", [UnsignedLong], vm_1))
        0x00, 0x33, _, 0x1c ->
          Ok(Item(tag, "BulkData", [OtherByteString], vm_1))
        0x00, 0x33, _, 0x52 ->
          Ok(Item(tag, "PDOSOPInstanceUID", [UniqueIdentifier], vm_1))
        0x00, 0x57, _, 0x4f -> Ok(Item(tag, "NameDisplay", [SignedLong], vm_1))
        0x00, 0x33, _, 0x16 ->
          Ok(Item(tag, "ProtocolDataUID", [LongString], vm_1))
        0x00, 0x33, _, 0x2a ->
          Ok(Item(tag, "ReviewTemplatesFlags", [UnsignedLong], vm_1))
        0x00, 0x33, _, 0x21 ->
          Ok(Item(tag, "IntDataFormat", [OtherByteString], vm_1))
        0x00, 0x57, _, 0x51 -> Ok(Item(tag, "BpSeg", [SignedLong], vm_1_to_n))
        0x00, 0x57, _, 0x53 -> Ok(Item(tag, "SeedSpace", [SignedLong], vm_1))
        0x00, 0x57, _, 0x55 -> Ok(Item(tag, "Shape", [SignedLong], vm_1_to_n))
        0x00, 0x33, _, 0x1f ->
          Ok(Item(tag, "StringData", [OtherByteString], vm_1))
        0x00, 0x57, _, 0x11 ->
          Ok(Item(tag, "Dimensions", [UniqueIdentifier], vm_1))
        0x00, 0x57, _, 0x50 -> Ok(Item(tag, "Label", [LongString], vm_1))
        0x00, 0x57, _, 0x4e -> Ok(Item(tag, "NamePos", [SignedLong], vm_1))
        0x00, 0x57, _, 0x46 ->
          Ok(Item(tag, "SOPInstanceUID", [LongString], vm_1))
        0x00, 0x57, _, 0x16 -> Ok(Item(tag, "Label", [UniqueIdentifier], vm_1))
        0x00, 0x57, _, 0x41 -> Ok(Item(tag, "Modified", [SignedLong], vm_1))
        0x00, 0x57, _, 0x48 -> Ok(Item(tag, "NameFont", [LongText], vm_1))
        0x00, 0x57, _, 0x4b ->
          Ok(Item(tag, "LineDashLength", [SignedLong], vm_1))
        0x00, 0x57, _, 0x01 -> Ok(Item(tag, "ROISQ", [Sequence], vm_1))
        0x00, 0x57, _, 0x52 ->
          Ok(Item(tag, "BpSegpairs", [UnsignedShort], vm_1_to_n))
        0x00, 0x57, _, 0x17 -> Ok(Item(tag, "Data", [UniqueIdentifier], vm_1))
        0x00, 0x33, _, 0x10 -> Ok(Item(tag, "Modified", [SignedLong], vm_1))
        0x00, 0x57, _, 0x4d ->
          Ok(Item(tag, "Interactivity", [SignedLong], vm_1))
        0x00, 0x33, _, 0x11 -> Ok(Item(tag, "Name", [LongString], vm_1))
        0x00, 0x57, _, 0x49 -> Ok(Item(tag, "FillPattern", [SignedLong], vm_1))
        0x00, 0x33, _, 0x2c -> Ok(Item(tag, "Description", [LongText], vm_1))
        0x00, 0x33, _, 0x62 ->
          Ok(Item(tag, "RTOSOPInstanceUID", [UniqueIdentifier], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CT VA0  ORI" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x20 ->
          Ok(Item(tag, "Original Data Set Owner", [LongString], vm_1))
        0x00, 0x09, _, 0x30 ->
          Ok(Item(tag, "Original Modality", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS ISI" ->
      case g0, g1, e0, e1 {
        0x01, 0x93, _, 0x02 -> Ok(Item(tag, "RIS Key", [LongString], vm_1))
        0x00, 0x11, _, 0xbc ->
          Ok(Item(tag, "Current Location Time", [LongString], vm_1))
        0x00, 0x11, _, 0x42 ->
          Ok(Item(tag, "Contrast Allergy", [LongString], vm_1))
        0x40, 0x09, _, 0xe2 ->
          Ok(Item(tag, "Report Transcriber", [PersonName], vm_1))
        0x00, 0x03, _, 0x08 ->
          Ok(Item(tag, "ISI Command Field", [UnsignedShort], vm_1))
        0x00, 0x11, _, 0x23 ->
          Ok(Item(tag, "Examination UID", [LongString], vm_1))
        0x00, 0x31, _, 0x33 ->
          Ok(Item(tag, "Worklist Request End Time", [Time], vm_1))
        0x00, 0x31, _, 0x12 ->
          Ok(Item(tag, "Examination Reason", [LongString], vm_1))
        0x00, 0x11, _, 0x0a -> Ok(Item(tag, "Case ID", [LongString], vm_1))
        0x00, 0x11, _, 0xa1 ->
          Ok(Item(tag, "Patient Registration Date", [Date], vm_1))
        0x00, 0x09, _, 0x14 ->
          Ok(Item(tag, "RIS Patient Info IMGEF", [Sequence], vm_1))
        0x00, 0x11, _, 0xd0 ->
          Ok(Item(tag, "Patient Billing Type", [LongString], vm_1))
        0x00, 0x11, _, 0x41 ->
          Ok(Item(tag, "Medical Alerts", [LongString], vm_1))
        0x00, 0x31, _, 0x30 -> Ok(Item(tag, "Requested Date", [Date], vm_1))
        0x03, 0x09, _, 0x01 ->
          Ok(Item(tag, "RIS Report IMGEF", [Sequence], vm_1))
        0x00, 0x31, _, 0x4a -> Ok(Item(tag, "Requested Time", [Time], vm_1))
        0x03, 0x07, _, 0x01 ->
          Ok(Item(tag, "RIS Worklist IMGEF", [Sequence], vm_1))
        0x00, 0x11, _, 0xb0 ->
          Ok(Item(tag, "Patient Last Name", [LongString], vm_1))
        0x00, 0x03, _, 0x12 ->
          Ok(Item(tag, "Attach ID Message Count", [UnsignedLong], vm_1))
        0x00, 0x11, _, 0xd2 ->
          Ok(Item(tag, "Patient Billing Address", [LongString], vm_1))
        0x00, 0x11, _, 0x22 -> Ok(Item(tag, "Request ID", [LongString], vm_1))
        0x40, 0x09, _, 0xe1 ->
          Ok(Item(tag, "Report Author", [LongString], vm_1))
        0x00, 0x03, _, 0x11 ->
          Ok(Item(tag, "Attach ID Application Code", [UnsignedShort], vm_1))
        0x00, 0x11, _, 0x04 -> Ok(Item(tag, "Patient ID", [LongString], vm_1))
        0x00, 0x11, _, 0x03 -> Ok(Item(tag, "Patient UID", [LongString], vm_1))
        0x00, 0x11, _, 0xa2 ->
          Ok(Item(tag, "Patient Registration Time", [Time], vm_1))
        0x00, 0x03, _, 0x30 -> Ok(Item(tag, "Max Waiting Date", [Date], vm_1))
        0x00, 0x03, _, 0x31 -> Ok(Item(tag, "Max Waiting Time", [Time], vm_1))
        0x00, 0x09, _, 0x01 ->
          Ok(Item(tag, "RIS Patient Info IMGEF", [Unknown], vm_1))
        0x00, 0x03, _, 0x14 -> Ok(Item(tag, "Attach ID Time", [Time], vm_1))
        0x00, 0x11, _, 0xc0 ->
          Ok(Item(tag, "Patient Insurance Status", [CodeString], vm_1))
        0x00, 0x11, _, 0xb2 ->
          Ok(Item(tag, "Patient First Name", [LongString], vm_1))
        0x00, 0x03, _, 0x13 -> Ok(Item(tag, "Attach ID Date", [Date], vm_1))
        0x40, 0x09, _, 0x20 ->
          Ok(Item(tag, "Report Status", [CodeString], vm_1))
        0x40, 0x09, _, 0xe3 ->
          Ok(Item(tag, "Reporting Radiologist", [PersonName], vm_1))
        0x40, 0x09, _, 0x01 -> Ok(Item(tag, "Report ID", [LongString], vm_1))
        0x00, 0x31, _, 0x32 ->
          Ok(Item(tag, "Worklist Request Start Time", [Time], vm_1))
        0x40, 0x09, _, 0x30 ->
          Ok(Item(tag, "Report Creation Date", [Date], vm_1))
        0x40, 0x09, _, 0x70 ->
          Ok(Item(tag, "Report Approving Physician", [PersonName], vm_1))
        0x40, 0x09, _, 0xe0 -> Ok(Item(tag, "Report Text", [LongString], vm_1))
        0x00, 0x03, _, 0x20 ->
          Ok(Item(tag, "Message Type", [UnsignedShort], vm_1))
        0x00, 0x31, _, 0x80 ->
          Ok(Item(tag, "Requested Location", [LongString], vm_1))
        0x00, 0x55, _, 0x46 -> Ok(Item(tag, "Current Ward", [PersonName], vm_1))
        0x00, 0x11, _, 0xb4 ->
          Ok(Item(tag, "Patient Hospital Status", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "DLX_PATNT_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x11, _, 0x01 -> Ok(Item(tag, "patient DOB", [LongText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_DL_STUDY_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x15, _, 0x80 ->
          Ok(Item(tag, "Study Dose", [DecimalString], vm_1))
        0x00, 0x15, _, 0x81 ->
          Ok(Item(tag, "Study Total Dap", [DecimalString], vm_1))
        0x00, 0x15, _, 0x82 ->
          Ok(Item(tag, "Study Fluoro Dap", [DecimalString], vm_1))
        0x00, 0x15, _, 0x83 ->
          Ok(Item(tag, "Study Fluoro Time", [IntegerString], vm_1))
        0x00, 0x15, _, 0x84 ->
          Ok(Item(tag, "Study Record Dap", [DecimalString], vm_1))
        0x00, 0x15, _, 0x85 ->
          Ok(Item(tag, "Study Record Time", [IntegerString], vm_1))
        0x00, 0x15, _, 0x86 ->
          Ok(Item(tag, "Last Xa Number", [IntegerString], vm_1))
        0x00, 0x15, _, 0x88 ->
          Ok(Item(tag, "Default Operator Name", [PersonName], vm_1))
        0x00, 0x15, _, 0x89 ->
          Ok(Item(tag, "Default Performing Physician Name", [PersonName], vm_1))
        0x00, 0x15, _, 0x8a ->
          Ok(Item(tag, "Default Patient Orientation", [CodeString], vm_1))
        0x00, 0x15, _, 0x8b ->
          Ok(Item(tag, "Last Sc Number", [IntegerString], vm_1))
        0x00, 0x15, _, 0x8e ->
          Ok(Item(tag, "Common Series Instance Uid", [UniqueIdentifier], vm_1))
        0x00, 0x15, _, 0x8f ->
          Ok(Item(tag, "Study Number", [IntegerString], vm_1))
        0x00, 0x15, _, 0x92 ->
          Ok(Item(tag, "Study dose Frontal", [FloatingPointSingle], vm_1))
        0x00, 0x15, _, 0x93 ->
          Ok(Item(tag, "Study total dap Frontal", [FloatingPointSingle], vm_1))
        0x00, 0x15, _, 0x94 ->
          Ok(Item(tag, "Study fluoro dap frontal", [FloatingPointSingle], vm_1))
        0x00, 0x15, _, 0x95 ->
          Ok(Item(tag, "Study fluoro time frontal", [IntegerString], vm_1))
        0x00, 0x15, _, 0x96 ->
          Ok(Item(tag, "Study record dap frontal", [FloatingPointSingle], vm_1))
        0x00, 0x15, _, 0x97 ->
          Ok(Item(tag, "Study record time frontal", [IntegerString], vm_1))
        0x00, 0x15, _, 0x98 ->
          Ok(Item(tag, "Study dose lateral", [FloatingPointSingle], vm_1))
        0x00, 0x15, _, 0x99 ->
          Ok(Item(tag, "Study total dap lateral", [FloatingPointSingle], vm_1))
        0x00, 0x15, _, 0x9a ->
          Ok(Item(tag, "Study fluoro dap lateral", [FloatingPointSingle], vm_1))
        0x00, 0x15, _, 0x9b ->
          Ok(Item(tag, "Study fluoro time lateral", [IntegerString], vm_1))
        0x00, 0x15, _, 0x9c ->
          Ok(Item(tag, "Study record dap leteral", [FloatingPointSingle], vm_1))
        0x00, 0x15, _, 0x9d ->
          Ok(Item(tag, "Study record time lateral", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-Private_ICS Release 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x30 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x31 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x07 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x08 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x0c -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x0d -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x0e -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x0f -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x18 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x1b -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x1c -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x1d -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x1e -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x20 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x21 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x4c -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x4d -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x4e -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x4f -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x50 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x51 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x66 -> Ok(Item(tag, "Unknown", [DecimalString], vm_4))
        0x00, 0x29, _, 0x67 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x68 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x6a -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x6b -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x72 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x91 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x93 -> Ok(Item(tag, "Unknown", [LongString], vm_1_to_n))
        0x00, 0x29, _, 0x94 -> Ok(Item(tag, "Unknown", [LongString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "SCHICK TECHNOLOGIES - Viewset Item Creator ID" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x01 ->
          Ok(Item(tag, "Image Instance UID", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x02 -> Ok(Item(tag, "Number", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x03 -> Ok(Item(tag, "Order", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x04 -> Ok(Item(tag, "Type", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x05 ->
          Ok(Item(tag, "Orientation", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x06 ->
          Ok(Item(tag, "Rect (Left, Top, Width, Height)", [UnsignedShort], vm_4))
        0x00, 0x09, _, 0x07 ->
          Ok(Item(tag, "Caption Height", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x08 -> Ok(Item(tag, "Source", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x09 ->
          Ok(Item(tag, "Default Width", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x0a ->
          Ok(Item(tag, "Default Height", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "http://www.gemedicalsystems.com/it_solutions/bamwallthickness/1.0" ->
      case g0, g1, e0, e1 {
        0x31, 0x19, _, 0x10 ->
          Ok(Item(tag, "BAM WallThickness Session Date/Time", [DateTime], vm_1))
        0x31, 0x19, _, 0x20 ->
          Ok(Item(tag, "BAM WallThickness Session Creator", [PersonName], vm_1))
        0x31, 0x19, _, 0x30 ->
          Ok(Item(
            tag,
            "BAM WallThickness Session Completion Flag",
            [CodeString],
            vm_1,
          ))
        0x31, 0x19, _, 0x40 ->
          Ok(Item(tag, "BAM WallThickness File Sequence", [Sequence], vm_1))
        0x31, 0x19, _, 0x50 ->
          Ok(Item(tag, "BAM WallThickness File Name", [ShortText], vm_1))
        0x31, 0x19, _, 0x60 ->
          Ok(Item(
            tag,
            "BAM WallThickness File Content",
            [OtherByteString],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_VXTLSTATE_001" ->
      case g0, g1, e0, e1 {
        0x00, 0x57, _, 0x20 ->
          Ok(Item(tag, "SegList_Label", [LongString], vm_1))
        0x00, 0x57, _, 0x56 ->
          Ok(Item(tag, "Slider_Size", [IntegerString], vm_1))
        0x00, 0x57, _, 0x29 -> Ok(Item(tag, "Wireframe", [UnlimitedText], vm_1))
        0x00, 0x57, _, 0x25 -> Ok(Item(tag, "Count", [IntegerString], vm_1))
        0x00, 0x57, _, 0x13 ->
          Ok(Item(tag, "SUV_HalfLife", [FloatingPointSingle], vm_1))
        0x00, 0x57, _, 0x34 -> Ok(Item(tag, "Proto_Title", [LongString], vm_1))
        0x00, 0x57, _, 0x42 -> Ok(Item(tag, "VT_Meas", [LongText], vm_1))
        0x00, 0x57, _, 0x12 ->
          Ok(Item(tag, "SUV_PostInjectedActivity", [FloatingPointSingle], vm_1))
        0x00, 0x57, _, 0x27 -> Ok(Item(tag, "View_Slot", [LongText], vm_1))
        0x00, 0x57, _, 0x35 ->
          Ok(Item(tag, "Proto_FilmName", [LongString], vm_1))
        0x00, 0x57, _, 0x38 -> Ok(Item(tag, "SegList_Slots", [LongText], vm_1))
        0x00, 0x57, _, 0x54 -> Ok(Item(tag, "HTML_Page", [LongText], vm_1))
        0x00, 0x57, _, 0x18 -> Ok(Item(tag, "SegList_Name", [LongString], vm_1))
        0x00, 0x57, _, 0x44 -> Ok(Item(tag, "VT_Tree", [UnlimitedText], vm_1))
        0x00, 0x57, _, 0x40 -> Ok(Item(tag, "VT_Points", [LongText], vm_1))
        0x00, 0x57, _, 0x47 -> Ok(Item(tag, "VT_Preset", [LongText], vm_1))
        0x00, 0x57, _, 0x10 ->
          Ok(Item(tag, "SUV_PostInjectedTime", [DateTime], vm_1))
        0x00, 0x57, _, 0x28 ->
          Ok(Item(tag, "Wireframe_Size", [IntegerString], vm_1))
        0x00, 0x57, _, 0x43 ->
          Ok(Item(tag, "VT_Tree_Size", [IntegerString], vm_1))
        0x00, 0x57, _, 0x08 ->
          Ok(Item(tag, "SUV_AdministredTime", [DateTime], vm_1))
        0x00, 0x57, _, 0x19 ->
          Ok(Item(tag, "Volume_Filename", [LongString], vm_1))
        0x00, 0x57, _, 0x15 -> Ok(Item(tag, "SegList_Seq", [Sequence], vm_1))
        0x00, 0x57, _, 0x14 ->
          Ok(Item(tag, "SState_Version", [LongString], vm_1))
        0x00, 0x57, _, 0x07 -> Ok(Item(tag, "SUV_ScanTime", [DateTime], vm_1))
        0x00, 0x57, _, 0x32 ->
          Ok(Item(tag, "Slider_State", [IntegerString], vm_1))
        0x00, 0x57, _, 0x05 -> Ok(Item(tag, "Volumes_info", [Sequence], vm_1))
        0x00, 0x57, _, 0x58 ->
          Ok(Item(tag, "SegList_Pretty_Name", [LongString], vm_1))
        0x00, 0x57, _, 0x21 -> Ok(Item(tag, "Bookmark_Seq", [Sequence], vm_1))
        0x00, 0x57, _, 0x06 -> Ok(Item(tag, "Image_UIDs", [Sequence], vm_1))
        0x00, 0x57, _, 0x24 ->
          Ok(Item(tag, "Color_Value_Field", [UnsignedLong], vm_3_to_n))
        0x00, 0x57, _, 0x22 -> Ok(Item(tag, "Bookmark", [LongText], vm_1))
        0x00, 0x57, _, 0x31 -> Ok(Item(tag, "Annotation", [LongText], vm_1))
        0x00, 0x57, _, 0x39 ->
          Ok(Item(tag, "VT_Points_Size", [IntegerString], vm_1))
        0x00, 0x57, _, 0x51 -> Ok(Item(tag, "Preferences", [LongText], vm_1))
        0x00, 0x57, _, 0x53 ->
          Ok(Item(tag, "HTML_Page_Size", [IntegerString], vm_1))
        0x00, 0x57, _, 0x55 ->
          Ok(Item(tag, "Camera_Position", [FloatingPointSingle], vm_3))
        0x00, 0x57, _, 0x26 -> Ok(Item(tag, "Views_info", [Sequence], vm_1))
        0x00, 0x57, _, 0x11 ->
          Ok(Item(tag, "SUV_TracerActivity", [FloatingPointSingle], vm_1))
        0x00, 0x57, _, 0x36 -> Ok(Item(tag, "Proto_Step", [LongString], vm_1))
        0x00, 0x57, _, 0x50 ->
          Ok(Item(tag, "Preferences_Size", [IntegerString], vm_1))
        0x00, 0x57, _, 0x46 ->
          Ok(Item(tag, "VT_Preset_Size", [IntegerString], vm_1))
        0x00, 0x57, _, 0x33 -> Ok(Item(tag, "Proto_Name", [LongString], vm_1))
        0x00, 0x57, _, 0x57 -> Ok(Item(tag, "Slider", [LongText], vm_1))
        0x00, 0x57, _, 0x16 ->
          Ok(Item(tag, "SegList_Count", [IntegerString], vm_1))
        0x00, 0x57, _, 0x41 ->
          Ok(Item(tag, "VT_Meas_Size", [IntegerString], vm_1))
        0x00, 0x57, _, 0x30 ->
          Ok(Item(tag, "Annotation_Size", [IntegerString], vm_1))
        0x00, 0x57, _, 0x48 ->
          Ok(Item(tag, "VT_State_Size", [IntegerString], vm_1))
        0x00, 0x57, _, 0x23 ->
          Ok(Item(tag, "Cursor_position", [FloatingPointSingle], vm_3))
        0x00, 0x57, _, 0x52 ->
          Ok(Item(tag, "Volume_ZComb_Filter", [IntegerString], vm_1))
        0x00, 0x57, _, 0x17 ->
          Ok(Item(tag, "SegList_List", [OtherByteString], vm_1))
        0x00, 0x57, _, 0x09 ->
          Ok(Item(tag, "SUV_MeasuredTime", [DateTime], vm_1))
        0x00, 0x57, _, 0x49 -> Ok(Item(tag, "VT_State", [LongText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-Private_ICS Release 1;3" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x00 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x29, _, 0x01 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x29, _, 0x60 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xb0 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0xb1 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0xb2 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0xb4 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0xb9 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0xc0 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0xc1 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0xc2 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0xc3 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0xc4 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0xc5 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS RA PLANE A" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x52 ->
          Ok(Item(tag, "Side Offset", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x46 ->
          Ok(Item(tag, "Peak Opacified", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Collimator Finger Turn Angle", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x7a ->
          Ok(Item(tag, "Collimator Square Breadth", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x86 ->
          Ok(Item(
            tag,
            "Collimator Diagphragm Position 1",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x66 ->
          Ok(Item(
            tag,
            "Calibration Isocenter to Source Distance",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0x6a ->
          Ok(Item(tag, "Calibration II Zoom", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "Native Filter Type", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x32 ->
          Ok(Item(tag, "Subtracted Filter Type", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x3c ->
          Ok(Item(tag, "Window Brightness Phase 1 Sub", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x2a -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x78 ->
          Ok(Item(tag, "Calibration Gantry Data Valid", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x3a ->
          Ok(Item(tag, "Window Lower Limit Native", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x5a ->
          Ok(Item(tag, "Mechanical Magnet Factor", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x94 ->
          Ok(Item(tag, "XRay System", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(
            tag,
            "Calibration Table to Floor Distance",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0x44 ->
          Ok(Item(tag, "Filter Factor Subtraction", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x3e ->
          Ok(Item(tag, "Window Brightness Phase 2 Sub", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x28 ->
          Ok(Item(tag, "Acquired Display Mode", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(tag, "Collimator Finger Position", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xa0 ->
          Ok(Item(tag, "Pulse Time", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xa6 ->
          Ok(Item(tag, "Pulses per Scene", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x34 ->
          Ok(Item(tag, "Filter Factor Native", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x8c ->
          Ok(Item(tag, "Collimator Beam Limit Breadth", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x40 ->
          Ok(Item(tag, "Window Contrast Phase 1 Sub", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x98 ->
          Ok(Item(tag, "Exposure Control", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xac -> Ok(Item(tag, "Dose Rate", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x58 ->
          Ok(Item(tag, "SourceImage Distance", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x9a ->
          Ok(Item(tag, "XRay Voltage", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x48 -> Ok(Item(tag, "Mask Frame", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0xaa -> Ok(Item(tag, "Dose", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x76 ->
          Ok(Item(
            tag,
            "Calibration System II Formats",
            [UnsignedLong],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0x64 ->
          Ok(Item(
            tag,
            "Calibration Isocenter to Floor Distance",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0x26 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x4c ->
          Ok(Item(tag, "Center Beam Angulation CaudCran", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x24 ->
          Ok(Item(tag, "XRay System", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x38 ->
          Ok(Item(tag, "Window Upper Limit Native", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x2c ->
          Ok(Item(tag, "Acquisition Framerate", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x9e ->
          Ok(Item(tag, "XRay Current Time Product", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "Collimator Beam Limit Diameter", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x56 ->
          Ok(Item(tag, "Image Twist", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x7c ->
          Ok(Item(tag, "Collimator Square Height", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x54 ->
          Ok(Item(tag, "Isocenter Height", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x8a ->
          Ok(Item(tag, "Collimator Diaphragm Mode", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x9c ->
          Ok(Item(tag, "XRay Current", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "Longitudinal Position", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x4e ->
          Ok(Item(
            tag,
            "Center Beam Angulation LR Anterior",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0xa2 ->
          Ok(Item(tag, "Scene Time Fluoro Clock", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x36 ->
          Ok(Item(tag, "Anatomic Blackground Factor", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x2e ->
          Ok(Item(tag, "Maximum Frame Limit", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x92 ->
          Ok(Item(tag, "XRay Control Mode", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x5e ->
          Ok(Item(tag, "Calibration Angle CranCaud", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x5c ->
          Ok(Item(tag, "Calibration Flag", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x74 ->
          Ok(Item(
            tag,
            "Calibration System Correction",
            [UnsignedLong],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0xa4 ->
          Ok(Item(tag, "Maximum PulseRate", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x7e ->
          Ok(Item(tag, "Collimator Square Diameter", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(
            tag,
            "Calibration Object to Image Distance",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0xa8 ->
          Ok(Item(tag, "Dose Area Product of Scene", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x22 ->
          Ok(Item(tag, "XRay Parameter Set Number", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x6c ->
          Ok(Item(tag, "Calibration II Field", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x68 ->
          Ok(Item(
            tag,
            "Calibration Source to II Distance",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(
            tag,
            "System Calibration Factor Plane A",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0x42 ->
          Ok(Item(tag, "Window Contrast Phase 2 Sub", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x8e ->
          Ok(Item(tag, "Collimator Beam Limit Height", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x88 ->
          Ok(Item(tag, "Collimator Diaphragm Position 2", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Calibration Angle RAOLAO", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x6e ->
          Ok(Item(tag, "Calibration Factor", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x96 ->
          Ok(Item(tag, "Focal Spot", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x72 ->
          Ok(Item(tag, "Calibration System Factor", [UnsignedLong], vm_1_to_n))
        0x00, 0x19, _, 0x4a -> Ok(Item(tag, "BIH Frame", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x84 ->
          Ok(Item(tag, "Collimator Diaphragm Turn Angle", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "VEPRO DICOM TRANSFER 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x59, _, 0x10 ->
          Ok(Item(tag, "Dicom Transfer Info", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS RA PLANE B" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x52 ->
          Ok(Item(tag, "Side Offset", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x46 ->
          Ok(Item(tag, "Peak Opacified", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Collimator Finger Turn Angle", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x7a ->
          Ok(Item(tag, "Collimator Square Breadth", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x86 ->
          Ok(Item(
            tag,
            "Collimator Diagphragm Position 1",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x66 ->
          Ok(Item(
            tag,
            "Calibration Isocenter to Source Distance",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0x6a ->
          Ok(Item(tag, "Calibration II Zoom", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "Native Filter Type", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x32 ->
          Ok(Item(tag, "Subtracted Filter Type", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x3c ->
          Ok(Item(tag, "Window Brightness Phase 1 Sub", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x2a -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x78 ->
          Ok(Item(tag, "Calibration Gantry Data Valid", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x3a ->
          Ok(Item(tag, "Window Lower Limit Native", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x5a ->
          Ok(Item(tag, "Mechanical Magnet Factor", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x94 ->
          Ok(Item(tag, "XRay System", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(
            tag,
            "Calibration Table to Floor Distance",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0x44 ->
          Ok(Item(tag, "Filter Factor Subtraction", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x3e ->
          Ok(Item(tag, "Window Brightness Phase 2 Sub", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x28 ->
          Ok(Item(tag, "Acquired Display Mode", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(tag, "Collimator Finger Position", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xa0 ->
          Ok(Item(tag, "Pulse Time", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xa6 ->
          Ok(Item(tag, "Pulses per Scene", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x34 ->
          Ok(Item(tag, "Filter Factor Native", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x8c ->
          Ok(Item(tag, "Collimator Beam Limit Breadth", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x40 ->
          Ok(Item(tag, "Window Contrast Phase 1 Sub", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x98 ->
          Ok(Item(tag, "Exposure Control", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xac -> Ok(Item(tag, "Dose Rate", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x58 ->
          Ok(Item(tag, "SourceImage Distance", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x9a ->
          Ok(Item(tag, "XRay Voltage", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x48 -> Ok(Item(tag, "Mask Frame", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0xaa -> Ok(Item(tag, "Dose", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x76 ->
          Ok(Item(
            tag,
            "Calibration System II Formats",
            [UnsignedLong],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0x64 ->
          Ok(Item(
            tag,
            "Calibration Isocenter to Floor Distance",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0x26 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x4c ->
          Ok(Item(tag, "Center Beam Angulation CaudCran", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x24 ->
          Ok(Item(tag, "XRay System", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x38 ->
          Ok(Item(tag, "Window Upper Limit Native", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x2c ->
          Ok(Item(tag, "Acquisition Framerate", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x9e ->
          Ok(Item(tag, "XRay Current Time Product", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "Collimator Beam Limit Diameter", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x56 ->
          Ok(Item(tag, "Image Twist", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x7c ->
          Ok(Item(tag, "Collimator Square Height", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x54 ->
          Ok(Item(tag, "Isocenter Height", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x8a ->
          Ok(Item(tag, "Collimator Diaphragm Mode", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x9c ->
          Ok(Item(tag, "XRay Current", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "Longitudinal Position", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x4e ->
          Ok(Item(
            tag,
            "Center Beam Angulation LR Anterior",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0xa2 ->
          Ok(Item(tag, "Scene Time Fluoro Clock", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x36 ->
          Ok(Item(tag, "Anatomic Blackground Factor", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x2e ->
          Ok(Item(tag, "Maximum Frame Limit", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x92 ->
          Ok(Item(tag, "XRay Control Mode", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x5e ->
          Ok(Item(tag, "Calibration Angle CranCaud", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x5c ->
          Ok(Item(tag, "Calibration Flag", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x74 ->
          Ok(Item(
            tag,
            "Calibration System Correction",
            [UnsignedLong],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0xa4 ->
          Ok(Item(tag, "Maximum PulseRate", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x7e ->
          Ok(Item(tag, "Collimator Square Diameter", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(
            tag,
            "Calibration Object to Image Distance",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0xa8 ->
          Ok(Item(tag, "Dose Area Product of Scene", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x22 ->
          Ok(Item(tag, "XRay Parameter Set Number", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x6c ->
          Ok(Item(tag, "Calibration II Field", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x68 ->
          Ok(Item(
            tag,
            "Calibration Source to II Distance",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(
            tag,
            "System Calibration Factor Plane B",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0x42 ->
          Ok(Item(tag, "Window Contrast Phase 2 Sub", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x8e ->
          Ok(Item(tag, "Collimator Beam Limit Height", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x88 ->
          Ok(Item(tag, "Collimator Diaphragm Position 2", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Calibration Angle RAOLAO", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x6e ->
          Ok(Item(tag, "Calibration Factor", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x96 ->
          Ok(Item(tag, "Focal Spot", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x72 ->
          Ok(Item(tag, "Calibration System Factor", [UnsignedLong], vm_1_to_n))
        0x00, 0x19, _, 0x4a -> Ok(Item(tag, "BIH Frame", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x84 ->
          Ok(Item(tag, "Collimator Diaphragm Turn Angle", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 036" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x01 ->
          Ok(Item(tag, "Cols/Rows/Frames", [LongString], vm_3))
        0x20, 0x0d, _, 0x02 ->
          Ok(Item(tag, "Cols/Rows/Frames", [LongString], vm_3))
        0x20, 0x0d, _, 0x03 ->
          Ok(Item(tag, "Voxel Spacing", [LongString], vm_3))
        0x20, 0x0d, _, 0x04 -> Ok(Item(tag, "Unknown", [LongString], vm_3))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_FUNCTOOL_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x51, _, 0x01 ->
          Ok(Item(tag, "Functional Proc Group Name", [LongString], vm_1))
        0x00, 0x51, _, 0x02 ->
          Ok(Item(tag, "Functional Processing Name", [LongString], vm_1))
        0x00, 0x51, _, 0x03 ->
          Ok(Item(tag, "Bias of Functional Image", [SignedLong], vm_1))
        0x00, 0x51, _, 0x04 ->
          Ok(Item(tag, "Scale of Functional Image", [FloatingPointSingle], vm_1))
        0x00, 0x51, _, 0x05 ->
          Ok(Item(tag, "Length of Parameters String", [SignedLong], vm_1))
        0x00, 0x51, _, 0x06 ->
          Ok(Item(
            tag,
            "Store Parameters string, delimited by character ESC=0x1B (27)",
            [LongText],
            vm_1,
          ))
        0x00, 0x51, _, 0x07 ->
          Ok(Item(tag, "Functional Image Version", [LongString], vm_1))
        0x00, 0x51, _, 0x08 ->
          Ok(Item(tag, "Store Color Ramp", [SignedLong], vm_1))
        0x00, 0x51, _, 0x09 ->
          Ok(Item(tag, "Store Width of Functional Image", [SignedLong], vm_1))
        0x00, 0x51, _, 0x0a ->
          Ok(Item(tag, "Store level of Functional Image", [SignedLong], vm_1))
        0x00, 0x51, _, 0x0b ->
          Ok(Item(
            tag,
            "Store B-Value with Functional Image",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x51, _, 0x0c ->
          Ok(Item(tag, "Analysis Package", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "ACUSON:1.2.840.113680.1.0:0921" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x20 -> Ok(Item(tag, "View Name", [Unknown], vm_1))
        0x00, 0x09, _, 0x2a -> Ok(Item(tag, "View List", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "IMS s.r.l. Mammography Private Code" ->
      case g0, g1, e0, e1 {
        0x12, 0x71, _, 0x01 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x02 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x10 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x11 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x12 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x13 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x20 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x21 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x22 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x38 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x12, 0x71, _, 0x39 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x12, 0x71, _, 0x40 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x12, 0x71, _, 0x41 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x12, 0x71, _, 0x42 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x12, 0x71, _, 0x45 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x46 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x47 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x48 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x49 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x50 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x51 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x52 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x12, 0x71, _, 0x53 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x12, 0x71, _, 0x54 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED SMS USG ANTARES 3D VOLUME" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x5a -> Ok(Item(tag, "BVrGrayMapIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x5d -> Ok(Item(tag, "BVrThresholdLow", [Unknown], vm_1))
        0x00, 0x39, _, 0x8e -> Ok(Item(tag, "CFlowStateIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x88 -> Ok(Item(tag, "ZoomLevelVolume", [Unknown], vm_1))
        0x00, 0x39, _, 0x00 -> Ok(Item(tag, "Release Version", [Unknown], vm_1))
        0x00, 0x39, _, 0x84 -> Ok(Item(tag, "VolumeArbMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x63 ->
          Ok(Item(tag, "CVolumeRenderMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x79 -> Ok(Item(tag, "ScreenMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x16 ->
          Ok(Item(tag, "IsLeftRightFlippedEn", [Unknown], vm_1))
        0x00, 0x39, _, 0x27 ->
          Ok(Item(tag, "NumDisplaySamples", [Unknown], vm_1))
        0x00, 0x39, _, 0xe8 ->
          Ok(Item(tag, "DICOMAttrNameVoiPivotZ", [Unknown], vm_1))
        0x00, 0x39, _, 0x56 -> Ok(Item(tag, "BVrBrightness", [Unknown], vm_1))
        0x00, 0x39, _, 0x26 -> Ok(Item(tag, "BeamAxialMin", [Unknown], vm_1))
        0x00, 0x39, _, 0x05 -> Ok(Item(tag, "ScanType", [Unknown], vm_1))
        0x00, 0x39, _, 0x52 ->
          Ok(Item(tag, "BMprColorMapIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x83 -> Ok(Item(tag, "ToolLoopMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x6c -> Ok(Item(tag, "VoiSizeRatioY", [Unknown], vm_1))
        0x00, 0x39, _, 0x08 ->
          Ok(Item(tag, "ZRadiusOfCurvature", [Unknown], vm_1))
        0x00, 0x39, _, 0x61 ->
          Ok(Item(tag, "CMprColorMapIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x28 -> Ok(Item(tag, "DVolumeWidth", [Unknown], vm_1))
        0x00, 0x39, _, 0x20 -> Ok(Item(tag, "BByteMaskSize", [Unknown], vm_1))
        0x00, 0x39, _, 0x35 -> Ok(Item(tag, "DBeamAxialSpan", [Unknown], vm_1))
        0x00, 0x39, _, 0x32 -> Ok(Item(tag, "DVolumePosY", [Unknown], vm_1))
        0x00, 0x39, _, 0x5c ->
          Ok(Item(tag, "BVrThresholdHigh", [Unknown], vm_1))
        0x00, 0x39, _, 0x6b -> Ok(Item(tag, "VoiSizeRatioX", [Unknown], vm_1))
        0x00, 0x39, _, 0x95 -> Ok(Item(tag, "VolumeRateHz", [Unknown], vm_1))
        0x00, 0x39, _, 0x5f -> Ok(Item(tag, "CCutPlaneEnable", [Unknown], vm_1))
        0x00, 0x39, _, 0x86 -> Ok(Item(tag, "IsVolumeZoomEn", [Unknown], vm_1))
        0x00, 0x39, _, 0x75 -> Ok(Item(tag, "QualityFactor", [Unknown], vm_1))
        0x00, 0x39, _, 0x19 -> Ok(Item(tag, "BByteMaskOffset", [Unknown], vm_1))
        0x00, 0x39, _, 0x64 ->
          Ok(Item(tag, "CVrColorMapIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x40 -> Ok(Item(tag, "DByteMaskSize", [Unknown], vm_1))
        0x00, 0x39, _, 0x17 ->
          Ok(Item(tag, "IsUpDownFlippedEn", [Unknown], vm_1))
        0x00, 0x39, _, 0xe2 ->
          Ok(Item(tag, "DICOMAttrNameSliceLayout", [Unknown], vm_1))
        0x00, 0x39, _, 0x78 -> Ok(Item(tag, "ActiveQuad", [Unknown], vm_1))
        0x00, 0x39, _, 0x18 ->
          Ok(Item(tag, "IsVolumeGeomAccurate", [Unknown], vm_1))
        0x00, 0x39, _, 0x04 ->
          Ok(Item(tag, "VolumeRawDataType", [Unknown], vm_1))
        0x00, 0x39, _, 0x51 -> Ok(Item(tag, "BCutPlaneEnable", [Unknown], vm_1))
        0x00, 0x39, _, 0x91 ->
          Ok(Item(tag, "DICOMAttrNameCutPlane", [Unknown], vm_1))
        0x00, 0x39, _, 0x34 -> Ok(Item(tag, "DBeamAxialMin", [Unknown], vm_1))
        0x00, 0x39, _, 0x29 -> Ok(Item(tag, "DVolumeDepth", [Unknown], vm_1))
        0x00, 0x39, _, 0x9d -> Ok(Item(tag, "VrToolIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x57 -> Ok(Item(tag, "BVrContrast", [Unknown], vm_1))
        0x00, 0x39, _, 0x5b -> Ok(Item(tag, "BVrOpacity", [Unknown], vm_1))
        0x00, 0x39, _, 0x7e ->
          Ok(Item(tag, "VolumeDisplayType", [Unknown], vm_1))
        0x00, 0x39, _, 0x13 -> Ok(Item(tag, "BufferSize", [Unknown], vm_1))
        0x00, 0x39, _, 0x12 -> Ok(Item(tag, "ScaleAlongDepth", [Unknown], vm_1))
        0x00, 0x39, _, 0x87 -> Ok(Item(tag, "ZoomLevelMpr", [Unknown], vm_1))
        0x00, 0x39, _, 0x14 -> Ok(Item(tag, "AcquisitionRate", [Unknown], vm_1))
        0x00, 0x39, _, 0x66 -> Ok(Item(tag, "CVrOpacity", [Unknown], vm_1))
        0x00, 0x39, _, 0x11 ->
          Ok(Item(tag, "ScaleAlongHeight", [Unknown], vm_1))
        0x00, 0x39, _, 0x92 -> Ok(Item(tag, "BookmarkChunkId", [Unknown], vm_1))
        0x00, 0x39, _, 0xe9 ->
          Ok(Item(tag, "DICOMAttrNameCTopVoiQuad", [Unknown], vm_1))
        0x00, 0x39, _, 0x54 ->
          Ok(Item(tag, "BMprGrayMapIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x30 -> Ok(Item(tag, "DVolumeHeight", [Unknown], vm_1))
        0x00, 0x39, _, 0x09 ->
          Ok(Item(tag, "WobbleCorrection", [Unknown], vm_1))
        0x00, 0x39, _, 0x8a -> Ok(Item(tag, "AutoRotateAxis", [Unknown], vm_1))
        0x00, 0x39, _, 0x81 -> Ok(Item(tag, "MprToolIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x10 -> Ok(Item(tag, "ScaleAlongWidth", [Unknown], vm_1))
        0x00, 0x39, _, 0x59 ->
          Ok(Item(tag, "BVrDynamicRangeDb", [Unknown], vm_1))
        0x00, 0x39, _, 0x76 -> Ok(Item(tag, "RendererType", [Unknown], vm_1))
        0x00, 0x39, _, 0x6f -> Ok(Item(tag, "VoiViewMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x15 -> Ok(Item(tag, "DepthMinCm", [Unknown], vm_1))
        0x00, 0x39, _, 0x38 ->
          Ok(Item(tag, "NumOfVolumesInSequence", [Unknown], vm_1))
        0x00, 0x39, _, 0x7c -> Ok(Item(tag, "CrossmarkMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x7b -> Ok(Item(tag, "WireframeMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x55 ->
          Ok(Item(tag, "BVolumeRenderMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x82 -> Ok(Item(tag, "VoiToolIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x73 -> Ok(Item(tag, "BlendingRatio", [Unknown], vm_1))
        0x00, 0x39, _, 0x9f -> Ok(Item(tag, "VolumeType", [Unknown], vm_1))
        0x00, 0x39, _, 0x80 ->
          Ok(Item(tag, "LastNonFullScreenMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x7d -> Ok(Item(tag, "MprDisplayType", [Unknown], vm_1))
        0x00, 0x39, _, 0x9a ->
          Ok(Item(tag, "VoiPositionOffsetX", [Unknown], vm_1))
        0x00, 0x39, _, 0x8f -> Ok(Item(tag, "BSubmodeIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x93 ->
          Ok(Item(tag, "SequenceMinChunkId", [Unknown], vm_1))
        0x00, 0x39, _, 0x65 ->
          Ok(Item(tag, "CVrColorFlowPriorityIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x6a ->
          Ok(Item(tag, "VoiRotationOffsetDeg", [Unknown], vm_1))
        0x00, 0x39, _, 0x07 -> Ok(Item(tag, "ZlateralSpan", [Unknown], vm_1))
        0x00, 0x39, _, 0x89 -> Ok(Item(tag, "IsAutoRotateEn", [Unknown], vm_1))
        0x00, 0x39, _, 0x39 -> Ok(Item(tag, "DByteMaskOffset", [Unknown], vm_1))
        0x00, 0x39, _, 0x69 -> Ok(Item(tag, "VoiMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x22 ->
          Ok(Item(tag, "AcqPlaneRotationDeg", [Unknown], vm_1))
        0x00, 0x39, _, 0x23 -> Ok(Item(tag, "BeamAxialSpan", [Unknown], vm_1))
        0x00, 0x39, _, 0x71 -> Ok(Item(tag, "MprOrientationA", [Unknown], vm_1))
        0x00, 0x39, _, 0x85 -> Ok(Item(tag, "MprZoomEn", [Unknown], vm_1))
        0x00, 0x39, _, 0x33 -> Ok(Item(tag, "DVolumePosZ", [Unknown], vm_1))
        0x00, 0x39, _, 0x9b ->
          Ok(Item(tag, "VoiPositionOffsetY", [Unknown], vm_1))
        0x00, 0x39, _, 0x36 -> Ok(Item(tag, "DBeamLateralMin", [Unknown], vm_1))
        0x00, 0x39, _, 0xe5 ->
          Ok(Item(tag, "DICOMAttrNameThinVrThickness", [Unknown], vm_1))
        0x00, 0x39, _, 0x37 ->
          Ok(Item(tag, "DBeamLateralSpan", [Unknown], vm_1))
        0x00, 0x39, _, 0x90 -> Ok(Item(tag, "CSubmodeIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x60 -> Ok(Item(tag, "CFrontClipMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x58 ->
          Ok(Item(tag, "BVrColorMapIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x9c ->
          Ok(Item(tag, "VoiPositionOffsetZ", [Unknown], vm_1))
        0x00, 0x39, _, 0xe4 ->
          Ok(Item(tag, "DICOMAttrNameThinVrMode", [Unknown], vm_1))
        0x00, 0x39, _, 0xe7 ->
          Ok(Item(tag, "DICOMAttrNameVoiPivotY", [Unknown], vm_1))
        0x00, 0x39, _, 0x7a -> Ok(Item(tag, "CutPlaneSide", [Unknown], vm_1))
        0x00, 0x39, _, 0x8c ->
          Ok(Item(tag, "AutoRotateSpeedIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x50 ->
          Ok(Item(tag, "PrivateCreatorVersionOfBookmark", [Unknown], vm_1))
        0x00, 0x39, _, 0x31 -> Ok(Item(tag, "DVolumePosX", [Unknown], vm_1))
        0x00, 0x39, _, 0x77 -> Ok(Item(tag, "SliceMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x21 -> Ok(Item(tag, "DepthMaxCm", [Unknown], vm_1))
        0x00, 0x39, _, 0x8b ->
          Ok(Item(tag, "AutoRotateRangeIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0x7f -> Ok(Item(tag, "LastReset", [Unknown], vm_1))
        0x00, 0x39, _, 0x68 -> Ok(Item(tag, "CVrThresholdLow", [Unknown], vm_1))
        0x00, 0x39, _, 0x72 -> Ok(Item(tag, "VrOffsetVector", [Unknown], vm_1))
        0x00, 0x39, _, 0x25 -> Ok(Item(tag, "BeamLateralSpan", [Unknown], vm_1))
        0x00, 0x39, _, 0x70 -> Ok(Item(tag, "VrOrientationA", [Unknown], vm_1))
        0x00, 0x39, _, 0xe0 ->
          Ok(Item(tag, "DICOMAttrNameSliceRangeType", [Unknown], vm_1))
        0x00, 0x39, _, 0x03 ->
          Ok(Item(tag, "VolumeAcquisitionDuration", [Unknown], vm_1))
        0x00, 0x39, _, 0x6e -> Ok(Item(tag, "VoiSyncPlane", [Unknown], vm_1))
        0x00, 0x39, _, 0x8d -> Ok(Item(tag, "CVrBrightness", [Unknown], vm_1))
        0x00, 0x39, _, 0xa1 ->
          Ok(Item(tag, "DICOMAttrNameMprCenterLocation", [Unknown], vm_1))
        0x00, 0x39, _, 0x67 ->
          Ok(Item(tag, "CVrThresholdHigh", [Unknown], vm_1))
        0x00, 0x39, _, 0x94 ->
          Ok(Item(tag, "SequenceMaxChunkId", [Unknown], vm_1))
        0x00, 0x39, _, 0x62 ->
          Ok(Item(tag, "CMprColorFlowPriorityIndex", [Unknown], vm_1))
        0x00, 0x39, _, 0xe3 ->
          Ok(Item(tag, "DICOMAttrNameSliceSpacing", [Unknown], vm_1))
        0x00, 0x39, _, 0x53 ->
          Ok(Item(tag, "BMprDynamicRangeDb", [Unknown], vm_1))
        0x00, 0x39, _, 0xe6 ->
          Ok(Item(tag, "DICOMAttrNameVoiPivotX", [Unknown], vm_1))
        0x00, 0x39, _, 0x6d -> Ok(Item(tag, "VoiSizeRatioZ", [Unknown], vm_1))
        0x00, 0x39, _, 0x24 -> Ok(Item(tag, "BeamLateralMin", [Unknown], vm_1))
        0x00, 0x39, _, 0x06 -> Ok(Item(tag, "ZlateralMin", [Unknown], vm_1))
        0x00, 0x39, _, 0xe1 ->
          Ok(Item(tag, "DICOMAttrNameSliceMPRPlane", [Unknown], vm_1))
        0x00, 0x39, _, 0x74 -> Ok(Item(tag, "FusionBlendMode", [Unknown], vm_1))
        0x00, 0x39, _, 0x5e ->
          Ok(Item(tag, "BPreProcessFilterMix", [Unknown], vm_1))
        0x00, 0x39, _, 0x9e -> Ok(Item(tag, "ShadingPercent", [Unknown], vm_1))
        0x00, 0x39, _, 0xa0 ->
          Ok(Item(tag, "DICOMAttrNameVrQuadDisplayType", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS MR R5.6/PART" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "Field of View", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS WH SR 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x71, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x71, _, 0x02 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CBT ENDING GANTRY ANGLE" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x83 ->
          Ok(Item(tag, "Ending Projection Angle", [DecimalString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "WG12 Supplement 43" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x03 ->
          Ok(Item(
            tag,
            "Bits Mapped to Color Lookup Table",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x29, _, 0x04 ->
          Ok(Item(tag, "Opacity 1 LUT Sequence", [Sequence], vm_1))
        0x00, 0x21, _, 0x0d ->
          Ok(Item(
            tag,
            "Temporal Position Time Offset",
            [FloatingPointDouble],
            vm_1,
          ))
        0x00, 0x29, _, 0x0e -> Ok(Item(tag, "Data Path ID", [CodeString], vm_1))
        0x00, 0x21, _, 0x07 ->
          Ok(Item(tag, "Ultrasound Acquisition Geometry", [CodeString], vm_1))
        0x00, 0x19, _, 0x0f ->
          Ok(Item(tag, "Transducer Access Code Sequence", [Sequence], vm_1))
        0x00, 0x21, _, 0x11 ->
          Ok(Item(tag, "Dimension Organization Type", [CodeString], vm_1))
        0x00, 0x19, _, 0x03 ->
          Ok(Item(tag, "Excluded Intervals Sequence", [Sequence], vm_1))
        0x00, 0x19, _, 0x05 ->
          Ok(Item(tag, "Exclusion Duration", [FloatingPointDouble], vm_1))
        0x00, 0x21, _, 0x10 ->
          Ok(Item(tag, "Temporal Position Sequence", [Sequence], vm_1))
        0x00, 0x19, _, 0x08 -> Ok(Item(tag, "Data Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x06 ->
          Ok(Item(tag, "Opacity Constant", [FloatingPointDouble], vm_1))
        0x00, 0x19, _, 0x0c ->
          Ok(Item(tag, "Position Measuring Device Used", [CodeString], vm_1))
        0x00, 0x19, _, 0x06 ->
          Ok(Item(tag, "US Image Description Sequence", [Sequence], vm_1))
        0x00, 0x29, _, 0x0f ->
          Ok(Item(tag, "RGB LUT Transfer Function", [CodeString], vm_1))
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "Alpha LUT Transfer Function", [CodeString], vm_1))
        0x00, 0x09, _, 0x03 ->
          Ok(Item(tag, "Event Code Sequence", [Sequence], vm_1))
        0x00, 0x21, _, 0x02 ->
          Ok(Item(
            tag,
            "Image Orientation (Volume)",
            [FloatingPointDouble],
            vm_1,
          ))
        0x00, 0x09, _, 0x01 ->
          Ok(Item(tag, "Event Timer Sequence", [Sequence], vm_1))
        0x00, 0x19, _, 0x0d ->
          Ok(Item(
            tag,
            "Transducer Scanning Configuration Code Sequence",
            [Sequence],
            vm_1,
          ))
        0x00, 0x29, _, 0x07 ->
          Ok(Item(tag, "Opacity Lookup Table Descriptor", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x0d ->
          Ok(Item(tag, "Opacity 2 LUT Transfer Function", [CodeString], vm_1))
        0x00, 0x41, _, 0x01 ->
          Ok(Item(tag, "Performed Protocol Type", [CodeString], vm_1))
        0x00, 0x19, _, 0x09 ->
          Ok(Item(
            tag,
            "Transducer Scan Geometry Code Sequence",
            [Sequence],
            vm_1,
          ))
        0x00, 0x29, _, 0x0b ->
          Ok(Item(
            tag,
            "Enhanced Palette Color Lookup Table Sequence",
            [Sequence],
            vm_1,
          ))
        0x00, 0x29, _, 0x02 ->
          Ok(Item(tag, "Data Path Assignment", [CodeString], vm_1))
        0x00, 0x21, _, 0x0a ->
          Ok(Item(
            tag,
            "Volume to Table Mapping Matrix",
            [FloatingPointDouble],
            vm_1,
          ))
        0x00, 0x19, _, 0x0b ->
          Ok(Item(tag, "Aliased Data Type", [CodeString], vm_1))
        0x00, 0x19, _, 0x07 ->
          Ok(Item(tag, "Image Data Type Sequence", [Sequence], vm_1))
        0x00, 0x19, _, 0x01 ->
          Ok(Item(tag, "Focus Depth(s)", [FloatingPointDouble], vm_1))
        0x00, 0x21, _, 0x0e ->
          Ok(Item(tag, "Plane Position (Volume) Sequence", [Sequence], vm_1))
        0x00, 0x09, _, 0x02 ->
          Ok(Item(tag, "Event Time Interval", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x0c ->
          Ok(Item(tag, "Opacity 2 LUT Sequence", [Sequence], vm_1))
        0x00, 0x19, _, 0x0e ->
          Ok(Item(
            tag,
            "Transducer Beam Steering Code Sequence",
            [Sequence],
            vm_1,
          ))
        0x00, 0x21, _, 0x08 ->
          Ok(Item(tag, "Apex Position", [FloatingPointDouble], vm_1))
        0x00, 0x21, _, 0x0f ->
          Ok(Item(tag, "Plane Orientation (Volume) Sequence", [Sequence], vm_1))
        0x00, 0x21, _, 0x09 ->
          Ok(Item(
            tag,
            "Volume to Transducer Mapping Matrix",
            [FloatingPointDouble],
            vm_1,
          ))
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "Opacity Lookup Table Data", [OtherWordString], vm_1))
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Data Frame Assignment Sequence", [Sequence], vm_1))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Image Position (Volume)", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x05 ->
          Ok(Item(tag, "Opacity 1 LUT Transfer Function", [CodeString], vm_1))
        0x00, 0x19, _, 0x04 ->
          Ok(Item(tag, "Exclusion Start Datetime", [DateTime], vm_1))
        0x00, 0x21, _, 0x0c ->
          Ok(Item(tag, "Patient Frame of Reference Source", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_VXTL_USERDATA_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x47, _, 0x11 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CBT RECON NUM OF SLICES" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x89 ->
          Ok(Item(tag, "Number of Reconstruction Slices", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 040" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x02 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x03 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x04 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x05 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x06 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x07 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x20 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED MAMMO" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x5a -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-PCR Release 2" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Reader Mode", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x20 -> Ok(Item(tag, "MRM Code", [ShortText], vm_1))
        0x00, 0x19, _, 0x30 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x40 -> Ok(Item(tag, "Latitude", [DecimalString], vm_1))
        0x00, 0x19, _, 0x60 -> Ok(Item(tag, "View Name", [ShortText], vm_1))
        0x00, 0x19, _, 0x80 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xa1 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x19, _, 0xa3 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa4 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa5 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa6 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa7 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa8 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa9 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xaa -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xab -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xac -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xad -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xae -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xaf -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x19, _, 0xb0 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x19, _, 0xb1 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x19, _, 0xb2 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0xb3 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0xb4 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0xb5 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb6 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb7 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x19, _, 0xb8 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb9 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x19, _, 0xba -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "TOSHIBA_MEC_CT_1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x01 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x02 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x03 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x04 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x05 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x06 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x07 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x08 ->
          Ok(Item(tag, "Orientation Head Feet", [LongText], vm_1))
        0x00, 0x19, _, 0x09 -> Ok(Item(tag, "View Direction", [LongText], vm_1))
        0x00, 0x19, _, 0x0a ->
          Ok(Item(tag, "Orientation Supine Prone", [LongText], vm_1))
        0x00, 0x19, _, 0x0b -> Ok(Item(tag, "Location", [DecimalString], vm_1))
        0x00, 0x19, _, 0x0c ->
          Ok(Item(tag, "Scan View Direction", [CodeString], vm_1))
        0x00, 0x19, _, 0x0d -> Ok(Item(tag, "Time", [Time], vm_1))
        0x00, 0x19, _, 0x0e -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x7f, 0xf1, _, 0x01 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x7f, 0xf1, _, 0x02 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x7f, 0xf1, _, 0x03 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x7f, 0xf1, _, 0x04 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x7f, 0xf1, _, 0x05 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x7f, 0xf1, _, 0x07 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x7f, 0xf1, _, 0x08 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x7f, 0xf1, _, 0x09 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x7f, 0xf1, _, 0x0a -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x7f, 0xf1, _, 0x0b ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x7f, 0xf1, _, 0x0c ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x7f, 0xf1, _, 0x0d ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "Philips RAD Imaging DD 097" ->
      case g0, g1, e0, e1 {
        0x20, 0x0b, _, 0x76 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x0b, _, 0x99 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x0b, _, 0x7d ->
          Ok(Item(tag, "Unknown", [IntegerString], vm_1_to_n))
        0x20, 0x0b, _, 0x65 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x0b, _, 0x01 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x0b, _, 0x7e ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x20, 0x0b, _, 0x88 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x0b, _, 0x6e -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x0b, _, 0x54 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x20, 0x0b, _, 0x86 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x0b, _, 0x78 ->
          Ok(Item(tag, "Unknown", [IntegerString], vm_1_to_n))
        0x20, 0x0b, _, 0x79 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x0b, _, 0x52 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x0b, _, 0x7c -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x0b, _, 0x96 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x0b, _, 0x90 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x20, 0x0b, _, 0x72 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x0b, _, 0x50 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x0b, _, 0x7a -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x0b, _, 0x82 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0b, _, 0x74 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x0b, _, 0xa0 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x20, 0x0b, _, 0x00 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x20, 0x0b, _, 0x60 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x20, 0x0b, _, 0x75 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x0b, _, 0x85 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x0b, _, 0x81 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0b, _, 0x53 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x0b, _, 0x51 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x0b, _, 0x89 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x20, 0x0b, _, 0x02 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x0b, _, 0x9b ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x0b, _, 0x63 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x20, 0x0b, _, 0x9a ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x0b, _, 0x73 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x0b, _, 0x7b -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "syngoDynamics" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0xae -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AMI Annotations_02" ->
      case g0, g1, e0, e1 {
        0x31, 0x01, _, 0x20 ->
          Ok(Item(tag, "AMI Annotation Sequence (RET)", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 035" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x02 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x03 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x04 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x05 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x07 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x08 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x09 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0a -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0b -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0c -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0d -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "MITRA PRESENTATION 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x00 ->
          Ok(Item(tag, "Mitra Rotation", [CodeString], vm_1))
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Mitra Window Width", [LongString], vm_1))
        0x00, 0x29, _, 0x02 ->
          Ok(Item(tag, "Mitra Window Centre", [LongString], vm_1))
        0x00, 0x29, _, 0x03 ->
          Ok(Item(tag, "Mitra Invert", [IntegerString], vm_1))
        0x00, 0x29, _, 0x04 ->
          Ok(Item(tag, "Mitra Has Tabstop", [IntegerString], vm_1))
        0x00, 0x29, _, 0x05 ->
          Ok(Item(tag, "Smooth Rotation", [CodeString], vm_1))
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "Breast Box x0", [CodeString], vm_1))
        0x00, 0x29, _, 0x11 ->
          Ok(Item(tag, "Breast Box y0", [CodeString], vm_1))
        0x00, 0x29, _, 0x12 ->
          Ok(Item(tag, "Breast Box x1", [CodeString], vm_1))
        0x00, 0x29, _, 0x13 ->
          Ok(Item(tag, "Breast Box y1", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "STENTOR" ->
      case g0, g1, e0, e1 {
        0x00, 0x73, _, 0x01 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x73, _, 0x02 ->
          Ok(Item(tag, "Private Creator", [LongText], vm_1))
        0x00, 0x73, _, 0x03 ->
          Ok(Item(tag, "Stentor Remote AETitle Element", [UnlimitedText], vm_1))
        0x00, 0x73, _, 0x04 ->
          Ok(Item(tag, "Stentor Local AETitle Element", [UnlimitedText], vm_1))
        0x00, 0x73, _, 0x06 ->
          Ok(Item(tag, "Stentor Transfer Syntax Value", [UnlimitedText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Silhouette Annot V1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x15 ->
          Ok(Item(tag, "Annotation Text Backing Mode", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x26 ->
          Ok(Item(tag, "Annotation Line Style", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x27 ->
          Ok(Item(tag, "Annotation Line Dash Length", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "Annotation Text Cursor Mode", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x37 ->
          Ok(Item(tag, "Annotation Geom Color", [LongText], vm_1))
        0x00, 0x29, _, 0x29 ->
          Ok(Item(tag, "Annotation Line Point Count", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x13 ->
          Ok(Item(tag, "Annotation Text Foreground Color", [LongText], vm_1))
        0x00, 0x29, _, 0x12 ->
          Ok(Item(tag, "Annotation Font", [LongText], vm_1))
        0x00, 0x29, _, 0x17 ->
          Ok(Item(tag, "Annotation Text Location", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x33 ->
          Ok(Item(tag, "Annotation Marker Type", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x39 ->
          Ok(Item(tag, "Annotation Geom Line Style", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x32 ->
          Ok(Item(tag, "Annotation Marker Color", [LongText], vm_1))
        0x00, 0x29, _, 0x42 ->
          Ok(Item(tag, "Annotation Interactivity", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x43 ->
          Ok(Item(tag, "Annotation Arrow Length", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x28 ->
          Ok(Item(tag, "Annotation Line Attach Mode", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x41 ->
          Ok(Item(tag, "Annotation Geom Fill Pattern", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x30 ->
          Ok(Item(tag, "Annotation Line Points", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x36 ->
          Ok(Item(tag, "Annotation Marker Attach Mode", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x44 ->
          Ok(Item(tag, "Annotation Arrow Angle", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x19 ->
          Ok(Item(tag, "Annotation Text Attach Mode", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x14 ->
          Ok(Item(tag, "Annotation Text Background Color", [LongText], vm_1))
        0x00, 0x29, _, 0x22 ->
          Ok(Item(tag, "Annotation Text Shadow Offset Y", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x45 ->
          Ok(Item(tag, "Annotation Don't Save", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x21 ->
          Ok(Item(tag, "Annotation Text Shadow Offset X", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x40 ->
          Ok(Item(tag, "Annotation Geom Dash Length", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x11 ->
          Ok(Item(tag, "Annotation Name", [IntegerString], vm_1))
        0x00, 0x29, _, 0x24 ->
          Ok(Item(tag, "Annotation Line Thickness", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x23 ->
          Ok(Item(tag, "Annotation Line Color", [LongText], vm_1))
        0x00, 0x29, _, 0x25 ->
          Ok(Item(tag, "Annotation Line Type", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x18 ->
          Ok(Item(tag, "Annotation Text String", [LongText], vm_1))
        0x00, 0x29, _, 0x38 ->
          Ok(Item(tag, "Annotation Geom Thickness", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x34 ->
          Ok(Item(tag, "Annotation Marker Size", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x16 ->
          Ok(Item(tag, "Annotation Text Justification", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x35 ->
          Ok(Item(
            tag,
            "Annotation Marker Location",
            [FloatingPointDouble],
            vm_1,
          ))
        0x00, 0x29, _, 0x31 ->
          Ok(Item(tag, "Annotation Line Control Size", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "RadWorksMarconi" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x24 -> Ok(Item(tag, "<internal", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "FDMS 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x27, _, 0x70 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x09, _, 0x10 ->
          Ok(Item(tag, "Exposure Unit Type Code", [CodeString], vm_1))
        0x00, 0x25, _, 0x92 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x30 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x50, 0xf1, _, 0x07 ->
          Ok(Item(tag, "Subtraction Registration Result", [CodeString], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Reading Position Specification", [IntegerString], vm_1))
        0x00, 0x21, _, 0x30 -> Ok(Item(tag, "Set No.", [CodeString], vm_1))
        0x00, 0x23, _, 0x20 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "Image Scanning Direction", [CodeString], vm_1))
        0x00, 0x09, _, 0x0c ->
          Ok(Item(tag, "Film UID", [OtherWordString], vm_1))
        0x00, 0x25, _, 0x73 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_6))
        0x00, 0x29, _, 0x50 ->
          Ok(Item(tag, "Data Compression Code", [CodeString], vm_1))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "Menu Character String", [LongString], vm_1))
        0x00, 0x19, _, 0x32 ->
          Ok(Item(tag, "Kanji Menu Name", [LongString], vm_1))
        0x00, 0x27, _, 0xa2 -> Ok(Item(tag, "Unknown", [CodeString], vm_2))
        0x00, 0x21, _, 0x90 -> Ok(Item(tag, "LUT Number", [CodeString], vm_1))
        0x50, 0xf1, _, 0x20 ->
          Ok(Item(tag, "Image Processing Modification Flag", [CodeString], vm_1))
        0x00, 0x25, _, 0x90 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x32, _, 0x33 ->
          Ok(Item(tag, "Requesting Service", [LongString], vm_1))
        0x20, 0x11, _, 0x11 ->
          Ok(Item(tag, "Image Position Specifying Flag", [CodeString], vm_1))
        0x00, 0x09, _, 0x06 ->
          Ok(Item(tag, "Route Image UID", [OtherWordString], vm_1))
        0x00, 0x25, _, 0x72 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x11, _, 0x00 -> Ok(Item(tag, "Trim Density", [CodeString], vm_1))
        0x00, 0x25, _, 0x74 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_6))
        0x00, 0x21, _, 0x50 ->
          Ok(Item(tag, "Pair Processing Information", [CodeString], vm_1))
        0x00, 0x09, _, 0x90 ->
          Ok(Item(tag, "Distribution Code", [ShortText], vm_1))
        0x00, 0x25, _, 0x32 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0xa3 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0x25, _, 0x10 ->
          Ok(Item(
            tag,
            "Relative Light Emission Amount Sk",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x25, _, 0x95 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x11, _, 0x02 ->
          Ok(Item(tag, "Image Mag./Reduc. Range", [CodeString], vm_1))
        0x00, 0x25, _, 0x60 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x11, _, 0x10 ->
          Ok(Item(tag, "Image Display Format", [CodeString], vm_1))
        0x00, 0x21, _, 0x10 -> Ok(Item(tag, "FCR Image ID", [CodeString], vm_1))
        0x00, 0x19, _, 0xa0 ->
          Ok(Item(tag, "Exposure Status Sequence", [Sequence], vm_1))
        0x00, 0x09, _, 0xf1 ->
          Ok(Item(tag, "Processing Information Flag", [ShortText], vm_1))
        0x00, 0x25, _, 0x82 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x52 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x05 ->
          Ok(Item(tag, "Image UID", [OtherWordString], vm_1))
        0x00, 0x25, _, 0x53 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x27, _, 0xa0 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x25, _, 0x50 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x10 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x50, 0xf1, _, 0x0a ->
          Ok(Item(tag, "FNC Parameters", [ShortString], vm_1))
        0x00, 0x25, _, 0x13 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x84 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_6))
        0x00, 0x19, _, 0x40 ->
          Ok(Item(tag, "Image Processing Type", [CodeString], vm_1))
        0x00, 0x23, _, 0x30 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x25, _, 0x15 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x27, _, 0xa1 -> Ok(Item(tag, "Unknown", [CodeString], vm_2))
        0x00, 0x27, _, 0x40 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x11, _, 0x20 ->
          Ok(Item(
            tag,
            "Interpolation A-VRS System Format",
            [OtherWordString],
            vm_1,
          ))
        0x00, 0x29, _, 0x30 ->
          Ok(Item(tag, "Extended Reading Size Value", [CodeString], vm_1))
        0x00, 0x21, _, 0x70 ->
          Ok(Item(tag, "Film Number within the Series", [IntegerString], vm_1))
        0x00, 0x27, _, 0x80 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x25, _, 0x93 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x44 ->
          Ok(Item(tag, "Line Density Code", [CodeString], vm_1))
        0x00, 0x25, _, 0xa2 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x96 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x50, 0xf1, _, 0x06 ->
          Ok(Item(tag, "Energy Subtraction Param.", [CodeString], vm_1))
        0x00, 0x25, _, 0x11 ->
          Ok(Item(
            tag,
            "Term of Correction for Each IP Type St",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x25, _, 0x83 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_6))
        0x50, 0xf1, _, 0x09 ->
          Ok(Item(tag, "Afin Conversion Coefficient", [SignedLong], vm_1))
        0x00, 0x32, _, 0x32 ->
          Ok(Item(tag, "Requesting Physician", [PersonName], vm_1))
        0x00, 0x27, _, 0x50 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(
            tag,
            "Film Annotation Character String 1",
            [ShortString],
            vm_1,
          ))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "Kanji Body Part for Exposure", [LongString], vm_1))
        0x00, 0x25, _, 0x63 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x25, _, 0x71 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x80 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0xf0 ->
          Ok(Item(tag, "Blackening Process Flag", [CodeString], vm_1))
        0x00, 0x19, _, 0x50 -> Ok(Item(tag, "EDR Mode", [CodeString], vm_1))
        0x50, 0xf1, _, 0x08 ->
          Ok(Item(tag, "Energy Subtraction Param. 2", [CodeString], vm_1))
        0x00, 0x25, _, 0x41 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x62 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xa2 ->
          Ok(Item(tag, "Exposure Kind", [CodeString], vm_1))
        0x00, 0x25, _, 0x31 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0x25, _, 0x12 ->
          Ok(Item(tag, "Reading Gain Gp", [UnsignedShort], vm_1))
        0x00, 0x27, _, 0x20 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x25, _, 0x81 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x71 ->
          Ok(Item(tag, "No. of Split Exposure Frames", [IntegerString], vm_1))
        0x00, 0x21, _, 0x80 ->
          Ok(Item(
            tag,
            "Equipment Type-Specific Information",
            [OtherByteString],
            vm_1,
          ))
        0x00, 0x09, _, 0x04 ->
          Ok(Item(tag, "Image Control Unit", [ShortString], vm_1))
        0x00, 0x25, _, 0x94 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x08 ->
          Ok(Item(
            tag,
            "Image Display Information Version No.",
            [UnsignedLong],
            vm_1,
          ))
        0x00, 0x25, _, 0x43 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x09 ->
          Ok(Item(tag, "Patient Information Version No.", [UnsignedLong], vm_1))
        0x00, 0x25, _, 0x34 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x50, 0xf1, _, 0x10 ->
          Ok(Item(tag, "Film Output Format", [CodeString], vm_1))
        0x00, 0x29, _, 0x25 ->
          Ok(Item(
            tag,
            "Image Rotation/Reversal Information",
            [CodeString],
            vm_1,
          ))
        0x00, 0x27, _, 0x30 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x25, _, 0x51 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Split Exposure Format", [IntegerString], vm_1))
        0x00, 0x09, _, 0x80 ->
          Ok(Item(tag, "Kanji Hospital Name", [LongString], vm_1))
        0x00, 0x19, _, 0xa1 ->
          Ok(Item(tag, "Exposure Status", [CodeString], vm_1))
        0x00, 0x25, _, 0xa0 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x27, _, 0x10 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x25, _, 0x61 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x40 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x91 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x11, _, 0x01 ->
          Ok(Item(tag, "Trim Width", [IntegerString], vm_1))
        0x00, 0x25, _, 0x20 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_2))
        0x00, 0x25, _, 0x42 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x70 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x40 ->
          Ok(Item(tag, "Image No. in the Set", [IntegerString], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Radiographer's Code", [ShortString], vm_1))
        0x00, 0x19, _, 0x81 ->
          Ok(Item(tag, "Reading Sensitivity Center", [IntegerString], vm_1))
        0x00, 0x25, _, 0x33 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0x29, _, 0x34 ->
          Ok(Item(tag, "Mag./Reduc. Ratio", [UnsignedShort], vm_1))
        0x00, 0x25, _, 0x21 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x91 ->
          Ok(Item(
            tag,
            "Film Annotation Character String 2",
            [ShortString],
            vm_1,
          ))
        0x00, 0x25, _, 0xa1 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0x09, _, 0x92 ->
          Ok(Item(tag, "Kanji Department Name", [ShortString], vm_1))
        0x00, 0x27, _, 0x60 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x27, _, 0xa3 ->
          Ok(Item(tag, "Unknown", [SignedShort], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_GDXE_ATHENAV2_INTERNAL_USE" ->
      case g0, g1, e0, e1 {
        0x7f, 0xdf, _, 0x10 -> Ok(Item(tag, "PPS Stream", [LongText], vm_1))
        0x7f, 0xdf, _, 0x11 ->
          Ok(Item(tag, "Pixel Data References (temporary)", [LongText], vm_1))
        0x7f, 0xdf, _, 0x20 ->
          Ok(Item(tag, "Auto Push Tag", [SignedShort], vm_1))
        0x7f, 0xdf, _, 0x25 -> Ok(Item(tag, "PPS Status", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS NUMBER OF FRAMES" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x76 ->
          Ok(Item(tag, "Number of Frames", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 033" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x02 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x03 -> Ok(Item(tag, "Unknown", [LongString], vm_6))
        0x20, 0x0d, _, 0x04 -> Ok(Item(tag, "Unknown", [LongString], vm_6))
        0x20, 0x0d, _, 0x05 -> Ok(Item(tag, "Unknown", [LongString], vm_1_to_n))
        0x20, 0x0d, _, 0x06 -> Ok(Item(tag, "Unknown", [LongString], vm_6))
        0x20, 0x0d, _, 0x07 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x08 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x09 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0a -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0b ->
          Ok(Item(tag, "Raw Data US", [OtherByteString], vm_1))
        0x20, 0x0d, _, 0x14 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CT VA0  RAW" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x10 ->
          Ok(Item(tag, "Creation Mask service", [UnsignedLong], vm_1_to_n))
        0x00, 0x21, _, 0x20 ->
          Ok(Item(tag, "Evaluation Mask service", [UnsignedLong], vm_1_to_n))
        0x00, 0x21, _, 0x30 ->
          Ok(Item(tag, "Extended Processing Mask", [UnsignedShort], vm_1_to_n))
        0x00, 0x21, _, 0x40 ->
          Ok(Item(tag, "Manipulation Mask", [UnsignedLong], vm_1_to_n))
        0x00, 0x21, _, 0x41 ->
          Ok(Item(tag, "Composition Mask", [UnsignedLong], vm_1_to_n))
        0x00, 0x21, _, 0x42 ->
          Ok(Item(tag, "Alteration Mask", [UnsignedLong], vm_1_to_n))
        0x00, 0x21, _, 0x43 ->
          Ok(Item(tag, "Generation Mask", [UnsignedLong], vm_1_to_n))
        0x00, 0x21, _, 0x44 ->
          Ok(Item(tag, "Function Mask", [UnsignedLong], vm_1_to_n))
        0x00, 0x21, _, 0x50 ->
          Ok(Item(tag, "Mode Mirroring Code", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GE_GENESIS_REV3.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x39 -> Ok(Item(tag, "Axial Type", [SignedShort], vm_1))
        0x00, 0x19, _, 0x8f ->
          Ok(Item(tag, "Swap Phase / Frequency Axis", [SignedShort], vm_1))
        0x00, 0x19, _, 0x9c ->
          Ok(Item(tag, "Pulse Sequence Name", [SignedShort], vm_1))
        0x00, 0x19, _, 0x9f -> Ok(Item(tag, "Coil Type", [SignedShort], vm_1))
        0x00, 0x19, _, 0xa4 ->
          Ok(Item(tag, "SAT fat/water/none", [SignedShort], vm_1))
        0x00, 0x19, _, 0xc0 ->
          Ok(Item(tag, "Bitmap of SAT Selections", [SignedShort], vm_1))
        0x00, 0x19, _, 0xc1 ->
          Ok(Item(
            tag,
            "Surfacel Coil Iintensity Correction Flag",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0xcb ->
          Ok(Item(tag, "Phase Contrast Flow Axis", [SignedShort], vm_1))
        0x00, 0x19, _, 0xcc ->
          Ok(Item(tag, "Phase Contrast Velocity Encoding", [SignedShort], vm_1))
        0x00, 0x19, _, 0xd5 ->
          Ok(Item(tag, "Fractional Echo", [SignedShort], vm_1))
        0x00, 0x19, _, 0xd8 ->
          Ok(Item(tag, "Variable Echo Flag", [SignedShort], vm_1))
        0x00, 0x19, _, 0xd9 ->
          Ok(Item(tag, "Concatenated Sat", [DecimalString], vm_1))
        0x00, 0x19, _, 0xf2 ->
          Ok(Item(tag, "Number of Phases", [SignedShort], vm_1))
        0x00, 0x43, _, 0x1e ->
          Ok(Item(tag, "Delta Start Time", [DecimalString], vm_1))
        0x00, 0x43, _, 0x27 -> Ok(Item(tag, "Pitch Ratio", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS TRANS MATRIX" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x80 ->
          Ok(Item(tag, "Transformation Matrix", [DecimalString], vm_5))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS NM -Private" ->
      case g0, g1, e0, e1 {
        0x70, 0x51, _, 0x00 ->
          Ok(Item(tag, "Current Segment", [UnsignedShort], vm_1))
        0x70, 0x51, _, 0x01 ->
          Ok(Item(tag, "Number of Segments", [UnsignedShort], vm_1))
        0x70, 0x51, _, 0x02 ->
          Ok(Item(tag, "Segment Start Position", [FloatingPointSingle], vm_1))
        0x70, 0x51, _, 0x03 ->
          Ok(Item(tag, "Segment Stop Position", [FloatingPointSingle], vm_1))
        0x70, 0x51, _, 0x04 ->
          Ok(Item(tag, "Rel. COR offset - X dir.", [FloatingPointSingle], vm_1))
        0x70, 0x51, _, 0x05 ->
          Ok(Item(tag, "Rel. COR offset - Z dir.", [FloatingPointSingle], vm_1))
        0x70, 0x51, _, 0x06 ->
          Ok(Item(tag, "Current Rotation Number", [UnsignedShort], vm_1))
        0x70, 0x51, _, 0x07 ->
          Ok(Item(tag, "Number of Rotations", [UnsignedShort], vm_1))
        0x70, 0x51, _, 0x10 ->
          Ok(Item(tag, "Alignment Translations", [DecimalString], vm_1))
        0x70, 0x51, _, 0x11 ->
          Ok(Item(tag, "Alignment Rotations", [DecimalString], vm_1))
        0x70, 0x51, _, 0x12 ->
          Ok(Item(tag, "Alignment Timestamp", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEIIS PACS" ->
      case g0, g1, e0, e1 {
        0x09, 0x03, _, 0x10 ->
          Ok(Item(tag, "Reject Image Flag", [UnsignedShort], vm_1))
        0x09, 0x03, _, 0x11 ->
          Ok(Item(tag, "Significant Flag", [UnsignedShort], vm_1))
        0x09, 0x03, _, 0x12 ->
          Ok(Item(tag, "Confidential Flag", [UnsignedShort], vm_1))
        0x09, 0x03, _, 0x20 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x09, 0x07, _, 0x21 ->
          Ok(Item(tag, "GEIIS_PREFETCH_ALGORITHM", [UnsignedShort], vm_1))
        0x09, 0x07, _, 0x22 ->
          Ok(Item(tag, "GEIIS_LIMIT_RECENT_STUDIES", [UnsignedShort], vm_1))
        0x09, 0x07, _, 0x23 ->
          Ok(Item(tag, "GEIIS_LIMIT_OLDEST_STUDIES", [UnsignedShort], vm_1))
        0x09, 0x07, _, 0x24 ->
          Ok(Item(tag, "GEIIS_LIMIT_RECENT_MONTHS", [UnsignedShort], vm_1))
        0x09, 0x07, _, 0x31 ->
          Ok(Item(
            tag,
            "GEIIS_EXCLUDE_STUDY_UIDS",
            [UniqueIdentifier],
            vm_1_to_n,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_DLX_DOSE_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x27, _, 0x01 ->
          Ok(Item(tag, "Private Radiation Dose Sequence", [Sequence], vm_1))
        0x00, 0x27, _, 0x02 ->
          Ok(Item(tag, "Run Number", [IntegerString], vm_1))
        0x00, 0x27, _, 0x03 -> Ok(Item(tag, "Run Time", [Time], vm_1))
        0x00, 0x27, _, 0x04 ->
          Ok(Item(tag, "Number of Frames", [IntegerString], vm_1))
        0x00, 0x27, _, 0x05 ->
          Ok(Item(tag, "Frames per Second", [DecimalString], vm_1))
        0x00, 0x27, _, 0x06 -> Ok(Item(tag, "Plane", [CodeString], vm_1))
        0x00, 0x27, _, 0x07 -> Ok(Item(tag, "KV", [DecimalString], vm_1))
        0x00, 0x27, _, 0x08 -> Ok(Item(tag, "MA", [DecimalString], vm_1))
        0x00, 0x27, _, 0x09 -> Ok(Item(tag, "Mas", [DecimalString], vm_1))
        0x00, 0x27, _, 0x10 -> Ok(Item(tag, "Ms", [DecimalString], vm_1))
        0x00, 0x27, _, 0x11 ->
          Ok(Item(tag, "Angulation", [DecimalString], vm_1))
        0x00, 0x27, _, 0x12 -> Ok(Item(tag, "Rotation", [DecimalString], vm_1))
        0x00, 0x27, _, 0x13 ->
          Ok(Item(tag, "Focal Distance", [DecimalString], vm_1))
        0x00, 0x27, _, 0x14 ->
          Ok(Item(tag, "Image Intensifier Mode", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AMI ImageContext_01" ->
      case g0, g1, e0, e1 {
        0x31, 0x09, _, 0x10 ->
          Ok(Item(tag, "AMI Window Invert (RET)", [CodeString], vm_1))
        0x31, 0x09, _, 0x20 ->
          Ok(Item(tag, "AMI Window Center (RET)", [IntegerString], vm_1))
        0x31, 0x09, _, 0x30 ->
          Ok(Item(tag, "AMI Window Widith (RET)", [IntegerString], vm_1))
        0x31, 0x09, _, 0x40 ->
          Ok(Item(tag, "AMI Pixel Aspect Ratio Swap (RET)", [CodeString], vm_1))
        0x31, 0x09, _, 0x50 ->
          Ok(Item(tag, "AMI Enable Averaging (RET)", [CodeString], vm_1))
        0x31, 0x09, _, 0x60 ->
          Ok(Item(tag, "AMI Quality (RET)", [CodeString], vm_1))
        0x31, 0x09, _, 0x70 ->
          Ok(Item(
            tag,
            "AMI Viewport Annotation Level (RET)",
            [CodeString],
            vm_1,
          ))
        0x31, 0x09, _, 0x80 ->
          Ok(Item(tag, "AMI Show Image Annotation (RET)", [CodeString], vm_1))
        0x31, 0x09, _, 0x90 ->
          Ok(Item(tag, "AMI Show Image Overlay (RET)", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AEGIS_DICOM_2.00" ->
      case g0, g1, e0, e1 {
        0x00, 0x03, _, 0x00 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x05, _, 0x00 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x09, _, 0x00 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x29, _, 0x00 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x13, 0x69, _, 0x00 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "ACUSON:1.2.840.113680.1.0:7ffe" ->
      case g0, g1, e0, e1 {
        0x7f, 0xdf, _, 0x00 -> Ok(Item(tag, "Data Padding", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CT VA0  ORMR" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x80 ->
          Ok(Item(tag, "Repetition Time", [DecimalString], vm_1))
        0x00, 0x21, _, 0x81 -> Ok(Item(tag, "Echo Time", [DecimalString], vm_1))
        0x00, 0x21, _, 0x82 ->
          Ok(Item(tag, "Inversion Time", [DecimalString], vm_1))
        0x00, 0x21, _, 0x83 ->
          Ok(Item(tag, "Number of Averages", [IntegerString], vm_1))
        0x00, 0x21, _, 0x84 ->
          Ok(Item(tag, "Imaging Frequency", [DecimalString], vm_1))
        0x00, 0x21, _, 0x85 ->
          Ok(Item(tag, "Imaged Nucleus", [LongString], vm_1))
        0x00, 0x21, _, 0x86 ->
          Ok(Item(tag, "Echo Number", [IntegerString], vm_1))
        0x00, 0x21, _, 0x90 ->
          Ok(Item(tag, "Flip Angle", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED" ->
      case g0, g1, e0, e1 {
        0x00, 0x17, _, 0x00 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0x8d -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x31, _, 0x0d -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x81 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x21 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x09, _, 0x10 ->
          Ok(Item(tag, "Recognition Code", [LongString], vm_1))
        0x00, 0x55, _, 0x66 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x53, _, 0x02 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x52 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x1f, _, 0x70 -> Ok(Item(tag, "", [LongString], vm_1))
        0x00, 0x55, _, 0x55 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x31, _, 0x08 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x21, _, 0x12 ->
          Ok(Item(tag, "Tube Angle During Topogram", [IntegerString], vm_1))
        0x00, 0x53, _, 0x19 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x50, 0x01, _, 0x07 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x80 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x38 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x80 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x57, _, 0x20 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x53, _, 0x42 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0xa3 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x70, 0x05, _, 0x10 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0xa8 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x6c -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x95 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x19 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x09, _, 0x41 ->
          Ok(Item(tag, "Length of Pixel Matrix", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x1d -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x50 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x09, _, 0x31 ->
          Ok(Item(tag, "Length of Original Header", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x86 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x1b -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x12 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x70, 0x01, _, 0x10 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x87 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x50, 0x01, _, 0x0a -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x51, _, 0x12 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x5f -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x31, _, 0x09 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x5d -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x5d -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x66 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x95 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x6a -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x60 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x93 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x56 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x17, _, 0x60 -> Ok(Item(tag, "", [LongString], vm_1))
        0x00, 0x55, _, 0x85 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x30 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x32 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x92 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x0f -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x78 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x9d -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x41, _, 0x13 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x7f, 0xe3, _, 0x17 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0xc1 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x51, _, 0x15 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0xa7 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x5a -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x94 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x53, _, 0x12 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x89 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x53, _, 0x03 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x6b -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x7f, 0xe1, _, 0x10 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x31 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x55 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x78 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x8c -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x83 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0xb1 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x6b -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x29 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x62 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x53, _, 0x33 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x7f, 0xe3, _, 0x24 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0x83 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x90 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x39 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x59 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x21, _, 0x11 ->
          Ok(Item(tag, "Target", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x44 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x53, _, 0x43 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x65 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x41, _, 0x21 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x41, _, 0x40 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0x97 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x98 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x8e -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x03 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x31, _, 0x0e -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x1f, _, 0x02 -> Ok(Item(tag, "", [LongString], vm_1))
        0x00, 0x19, _, 0x5b -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x54 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x53, _, 0x14 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x05 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x51 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x65 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x75 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x74 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x21, _, 0x10 -> Ok(Item(tag, "Zoom", [DecimalString], vm_1))
        0x00, 0x55, _, 0x99 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x1a -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x25 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0x5a -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x22 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x82 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0xa0 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x50, 0x01, _, 0x01 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x6d -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x53 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0x58 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x50, 0x01, _, 0x06 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x76 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x53, _, 0x18 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x53, _, 0x40 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x64 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x08 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x11, _, 0x10 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0x9f -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x43 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x01 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x69 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x53, _, 0x44 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x49 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x97 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x23 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x9b -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x02 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x53, _, 0x32 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x34 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x16 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x53, _, 0x31 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0xa9 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x41, _, 0x50 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x21, _, 0x20 -> Ok(Item(tag, "ROI Mask", [UnsignedShort], vm_1))
        0x00, 0x41, _, 0x32 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0x20 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x50, 0x01, _, 0x04 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x50, 0x01, _, 0x09 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0x35 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0x8b -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x57 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0xa2 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x7f, 0xe3, _, 0x15 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x88 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x41, _, 0x36 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x31, _, 0x06 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x41, _, 0x34 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x58 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x57, _, 0x10 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0xa5 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x0c -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x48 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0x30 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x1f, _, 0x00 -> Ok(Item(tag, "", [LongString], vm_1))
        0x7f, 0xe3, _, 0x22 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x50, 0x01, _, 0x0b -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x06 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x73 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x59 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x7f, 0xe3, _, 0x25 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x5c -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x76 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x94 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x64 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x23 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x09, _, 0x50 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x26 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x86 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x09, _, 0x40 ->
          Ok(Item(tag, "Byte Offset of Pixel Matrix", [UnsignedShort], vm_1))
        0x00, 0x31, _, 0x0a -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x14 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x4c -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x24 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x1c -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x24 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x50, 0x01, _, 0x08 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0x82 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x1a -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x53, _, 0x1b -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x93 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x6d -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x11 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x47 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x53, _, 0x1c -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x17, _, 0x80 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x17, _, 0x20 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0x84 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x75 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x09, _, 0x51 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x55, _, 0x68 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x0a -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x7f -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0xc2 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0xa6 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x7f, 0xe3, _, 0x18 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x53, _, 0x15 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0xa3 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x7f, 0xe3, _, 0x1e -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x61 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x0d -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x56 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x15 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x19 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x31, _, 0x11 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x40 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x23 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x27 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x51, _, 0x18 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x41, _, 0x52 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x17 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x2a -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x9a -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x18 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x54 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x31, _, 0x0b -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x03 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x31, _, 0x0c -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0xc0 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x8a -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x7f, 0xe3, _, 0x20 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x57 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x50 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x50, 0x01, _, 0x05 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x41, _, 0x70 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x09 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x73 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x09, _, 0x30 ->
          Ok(Item(tag, "Byte Offset of Original Header", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x4e -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x77 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x53, _, 0x1a -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x31 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x41 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x31, _, 0x10 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x85 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x50, 0x01, _, 0x02 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x53, _, 0x16 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x0b -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x53, _, 0x41 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x9c -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0xa2 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x51, _, 0x14 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x16 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x31, _, 0x05 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x07 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x02 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x51, _, 0x11 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x71 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x13 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x3a -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x92 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x53, _, 0x11 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x5f -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x5e -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x61 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x5c -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x52 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x21 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0xb0 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x6f -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x89 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x96 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x31, _, 0x01 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x41, _, 0x60 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x31, _, 0x0f -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x01 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x69 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x51 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x77 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x71 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x74 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0xa4 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x91 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x53, _, 0x10 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x53, _, 0x17 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x4b -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x6a -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x70, 0x03, _, 0x10 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x70 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x09, _, 0x80 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x55, _, 0xa4 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x51, _, 0x13 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x53, _, 0x01 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x9e -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x31, _, 0x07 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x5b -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x22 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x41, _, 0x71 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x53, _, 0x13 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0xa1 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x1c -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x32 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0xa1 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x53, _, 0x30 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x0e -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x53, _, 0x1d -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x09, _, 0xf6 ->
          Ok(Item(tag, "PDM Data Object Type Extension", [LongString], vm_1))
        0x00, 0x19, _, 0x6c -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x87 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x5e -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x68 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x20 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x25 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x67 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x45 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x31, _, 0x04 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x42 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x53 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x41, _, 0x30 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x1f, _, 0x50 -> Ok(Item(tag, "", [LongString], vm_1))
        0x00, 0x41, _, 0x12 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x8a -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x31, _, 0x03 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x72 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x70 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x8e -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x88 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x60 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x14 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x21 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x6e -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x96 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x81 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x72 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0xa0 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x4a -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x50, 0x01, _, 0x03 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x84 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0xf0 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x91 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x09, _, 0xf5 ->
          Ok(Item(tag, "PDM EFID Placeholder", [LongString], vm_1))
        0x00, 0x19, _, 0x8d -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x19, _, 0x04 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x63 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x1b -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x19, _, 0x4f -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x33 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x00, 0x19, _, 0x67 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x00, 0x55, _, 0x48 -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x51, _, 0x10 -> Ok(Item(tag, "", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x1f -> Ok(Item(tag, "", [SignedLong], vm_1))
        0x00, 0x55, _, 0x8f -> Ok(Item(tag, "", [SignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PAPYRUS 3.0" ->
      case g0, g1, e0, e1 {
        0x60, _, _, 0xc0 ->
          Ok(Item(tag, "UIN Overlay Sequence", [Sequence], vm_1))
        0x00, 0x41, _, 0x00 -> Ok(Item(tag, "Comments", [LongText], vm_1))
        0x60, _, _, 0x10 -> Ok(Item(tag, "Overlay Rows", [UnsignedShort], vm_1))
        0x00, 0x41, _, 0x13 ->
          Ok(Item(tag, "Image Identifier Sequence", [Sequence], vm_1))
        0x60, _, _, 0xa4 -> Ok(Item(tag, "Anchor Point", [UnsignedShort], vm_2))
        0x60, _, _, 0x72 -> Ok(Item(tag, "Overlay Style", [LongString], vm_1))
        0x60, _, _, 0x60 -> Ok(Item(tag, "Editable", [LongString], vm_1))
        0x60, _, _, 0xa2 -> Ok(Item(tag, "Post It Text", [LongText], vm_1))
        0x60, _, _, 0xba ->
          Ok(Item(tag, "Contour Points", [UnsignedShort], vm_1_to_n))
        0x00, 0x41, _, 0x21 ->
          Ok(Item(tag, "Referenced SOP Class UID", [UniqueIdentifier], vm_1))
        0x60, _, _, 0x00 -> Ok(Item(tag, "Overlay ID", [IntegerString], vm_1))
        0x60, _, _, 0x50 ->
          Ok(Item(tag, "Overlay Origin", [UnsignedShort], vm_1_to_n))
        0x60, _, _, 0x01 ->
          Ok(Item(tag, "Linked Overlays", [LongText], vm_1_to_n))
        0x00, 0x41, _, 0x15 ->
          Ok(Item(tag, "Number of images", [UnsignedShort], vm_1))
        0x00, 0x41, _, 0x50 -> Ok(Item(tag, "Image Sequence", [Sequence], vm_1))
        0x00, 0x41, _, 0x32 ->
          Ok(Item(tag, "Referenced File Path", [LongString], vm_1_to_n))
        0x60, _, _, 0x70 -> Ok(Item(tag, "Overlay Font", [LongString], vm_1))
        0x60, _, _, 0x80 -> Ok(Item(tag, "Fill Pattern", [LongString], vm_1))
        0x60, _, _, 0x76 -> Ok(Item(tag, "Overlay Color", [LongString], vm_1))
        0x00, 0x41, _, 0x31 ->
          Ok(Item(tag, "Referenced File Name", [LongString], vm_1))
        0x60, _, _, 0xa0 -> Ok(Item(tag, "Label", [LongString], vm_1))
        0x60, _, _, 0xb2 ->
          Ok(Item(tag, "Attached Annotation", [LongText], vm_1))
        0x00, 0x41, _, 0x14 ->
          Ok(Item(
            tag,
            "External PAPYRUS-File Reference Sequence",
            [Sequence],
            vm_1,
          ))
        0x00, 0x41, _, 0x41 ->
          Ok(Item(
            tag,
            "Referenced Image SOP Class UID",
            [UniqueIdentifier],
            vm_1,
          ))
        0x00, 0x41, _, 0x42 ->
          Ok(Item(
            tag,
            "Referenced Image SOP Instance UID",
            [UniqueIdentifier],
            vm_1,
          ))
        0x60, _, _, 0xbc ->
          Ok(Item(tag, "Mask Data", [UnsignedShort], vm_1_to_n))
        0x60, _, _, 0x74 ->
          Ok(Item(tag, "Overlay Font Size", [UnsignedShort], vm_1))
        0x60, _, _, 0x82 ->
          Ok(Item(tag, "Overlay Pen Size", [UnsignedShort], vm_1))
        0x60, _, _, 0xb0 -> Ok(Item(tag, "ROI Type", [LongString], vm_1))
        0x00, 0x41, _, 0x11 ->
          Ok(Item(tag, "Image Pointer", [UnsignedLong], vm_1))
        0x60, _, _, 0x40 -> Ok(Item(tag, "Overlay Type", [LongString], vm_1))
        0x00, 0x41, _, 0x12 ->
          Ok(Item(tag, "Pixel Offset", [UnsignedLong], vm_1))
        0x00, 0x41, _, 0x22 ->
          Ok(Item(tag, "Referenced SOP Instance UID", [UniqueIdentifier], vm_1))
        0x00, 0x41, _, 0x10 ->
          Ok(Item(tag, "Pointer Sequence", [Sequence], vm_1))
        0x60, _, _, 0x11 ->
          Ok(Item(tag, "Overlay Columns", [UnsignedShort], vm_1))
        0x60, _, _, 0x78 -> Ok(Item(tag, "Shadow Size", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AGFA-AG_HPState" ->
      case g0, g1, e0, e1 {
        0x00, 0x71, _, 0x18 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x71, _, 0x19 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x71, _, 0x1a -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x71, _, 0x1c -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x71, _, 0x1e -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x71, _, 0x20 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1_to_n))
        0x00, 0x71, _, 0x21 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x71, _, 0x22 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x71, _, 0x23 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x71, _, 0x24 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x73, _, 0x23 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x73, _, 0x24 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x73, _, 0x28 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x73, _, 0x80 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x75, _, 0x10 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x87, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x87, _, 0x02 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED NM" ->
      case g0, g1, e0, e1 {
        0x00, 0x17, _, 0x00 ->
          Ok(Item(tag, "Unknown 0017 0000", [ShortText], vm_1))
        0x00, 0x33, _, 0x18 ->
          Ok(Item(
            tag,
            "NCO Data for detector 1",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x55, _, 0x8d ->
          Ok(Item(tag, "Sagittal Right Limit", [SignedShort], vm_1))
        0x00, 0x31, _, 0x0d -> Ok(Item(tag, "WAM Mode", [SignedShort], vm_1))
        0x00, 0x57, _, 0x0a ->
          Ok(Item(tag, "Decay factor", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0x81 ->
          Ok(Item(tag, "Raw Data Extension", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x21 ->
          Ok(Item(tag, "ROI Total Counts", [SignedLong], vm_1))
        0x00, 0x43, _, 0x03 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1_to_n))
        0x00, 0x55, _, 0xc4 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0x55, _, 0x66 -> Ok(Item(tag, "Y1", [SignedShort], vm_1))
        0x00, 0x53, _, 0x02 ->
          Ok(Item(
            tag,
            "Terminate on List Buffer Overflow Flag",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x39, _, 0x00 ->
          Ok(Item(tag, "Toshiba CBF activity results", [LongText], vm_1))
        0x00, 0x19, _, 0x52 ->
          Ok(Item(tag, "CTQ Female Entry Count", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x29 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0x55, _, 0x55 ->
          Ok(Item(tag, "Start Angle", [FloatingPointSingle], vm_1))
        0x00, 0x31, _, 0x08 ->
          Ok(Item(tag, "CCD Autopeak Function", [LongString], vm_1))
        0x00, 0x31, _, 0x15 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1_to_n))
        0x00, 0x53, _, 0x19 ->
          Ok(Item(tag, "Manual Stop Flag 0 No 1 Yes", [SignedLong], vm_1))
        0x50, 0x01, _, 0x07 -> Ok(Item(tag, "Curve Name", [LongString], vm_1))
        0x00, 0x33, _, 0x20 ->
          Ok(Item(tag, "Bed correction angle", [FloatingPointSingle], vm_1))
        0x00, 0x43, _, 0x01 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1_to_n))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Number of Segments", [SignedShort], vm_1))
        0x00, 0x55, _, 0x38 ->
          Ok(Item(tag, "COR Data", [OtherWordString], vm_1))
        0x00, 0x55, _, 0x80 ->
          Ok(Item(tag, "File Altered Flag 1 Altered", [SignedShort], vm_1))
        0x00, 0x57, _, 0x20 ->
          Ok(Item(tag, "Vertical Oblique Image", [SignedShort], vm_1))
        0x00, 0x53, _, 0x42 ->
          Ok(Item(
            tag,
            "Stop Count Condition Status 0 None 1 Any 2 All",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0xa3 ->
          Ok(Item(tag, "Frames per Phase", [SignedLong], vm_1))
        0x00, 0x55, _, 0x4c -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x55, _, 0xa8 ->
          Ok(Item(tag, "Gated SPECT Bins Reconstructed", [SignedShort], vm_1))
        0x00, 0x55, _, 0x6c -> Ok(Item(tag, "Y4", [SignedShort], vm_1))
        0x00, 0x55, _, 0x95 ->
          Ok(Item(tag, "Filter Order", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x19 ->
          Ok(Item(tag, "Save Screen Flag 1 SaveScreen", [SignedShort], vm_1))
        0x00, 0x19, _, 0x1d ->
          Ok(Item(tag, "MicroDELTA Mystery2", [SignedShort], vm_1))
        0x00, 0x37, _, 0x00 ->
          Ok(Item(
            tag,
            "Flood correction matrix Detector 1",
            [OtherWordString],
            vm_1,
          ))
        0x00, 0x55, _, 0x50 ->
          Ok(Item(tag, "Prone Flag 0 Supine 1 Prone", [SignedShort], vm_1))
        0x00, 0x19, _, 0x86 ->
          Ok(Item(tag, "Time per Segment msec", [SignedShort], vm_1))
        0x00, 0x41, _, 0x05 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1_to_n))
        0x7f, 0xe3, _, 0x1b ->
          Ok(Item(
            tag,
            "Pixel Overflow Flag 1 Pixel Overflow",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x33, _, 0x29 ->
          Ok(Item(tag, "Crystal thickness", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x12 ->
          Ok(Item(tag, "MicroDELTA Trend", [LongString], vm_1))
        0x00, 0x55, _, 0x87 ->
          Ok(Item(tag, "Plane of Transverse Top Slice", [SignedLong], vm_1))
        0x50, 0x01, _, 0x0a ->
          Ok(Item(tag, "Y Axis Label", [ShortString], vm_1))
        0x00, 0x51, _, 0x12 ->
          Ok(Item(tag, "Accepted Beats in Window", [SignedShort], vm_1))
        0x00, 0x55, _, 0x5f ->
          Ok(Item(tag, "Arm Length in cm", [FloatingPointSingle], vm_1))
        0x00, 0x31, _, 0x09 ->
          Ok(Item(tag, "CCD Count Rate Mode", [SignedShort], vm_1))
        0x00, 0x35, _, 0x01 ->
          Ok(Item(tag, "Energy window type", [LongString], vm_1))
        0x00, 0x55, _, 0x5d ->
          Ok(Item(tag, "Angle Type 1 360o 2 128 Steps", [SignedShort], vm_1))
        0x00, 0x19, _, 0x5d ->
          Ok(Item(tag, "CTQ Line Counts", [SignedShort], vm_1))
        0x00, 0x55, _, 0x4d -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x19, _, 0x66 ->
          Ok(Item(tag, "WB Scan Start 0 Head 1 Feet", [SignedShort], vm_1))
        0x00, 0x19, _, 0x95 ->
          Ok(Item(tag, "Number of Beats to Average", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x26 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0x19, _, 0x6a ->
          Ok(Item(tag, "WB Scan Time msec", [SignedShort], vm_1))
        0x00, 0x31, _, 0x02 ->
          Ok(Item(tag, "Unknown Element 0031 02", [SignedShort], vm_1))
        0x00, 0x55, _, 0x60 ->
          Ok(Item(tag, "Auto Window Beats", [SignedShort], vm_1))
        0x00, 0x19, _, 0x93 ->
          Ok(Item(tag, "Phase Start msec", [SignedLong], vm_1))
        0x00, 0x55, _, 0x56 ->
          Ok(Item(tag, "Decay Corr. Flag 1 Corr", [SignedShort], vm_1))
        0x00, 0x17, _, 0x60 -> Ok(Item(tag, "KVP", [DecimalString], vm_1))
        0x00, 0x55, _, 0x85 ->
          Ok(Item(tag, "Volume Rendered Extension", [SignedShort], vm_1))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "CTQ Normal Margin", [FloatingPointSingle], vm_1))
        0x00, 0x31, _, 0x14 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x19, _, 0x32 ->
          Ok(Item(
            tag,
            "CTQ Abnormal Oblique Margin",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0x0f ->
          Ok(Item(tag, "Siemens ICON Data Type", [SignedLong], vm_1))
        0x00, 0x31, _, 0x12 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0x19, _, 0x78 ->
          Ok(Item(tag, "WB Post Pixel Overflow 1 Yes", [SignedShort], vm_1))
        0x00, 0x55, _, 0x9d ->
          Ok(Item(tag, "Rotation Matrix", [FloatingPointSingle], vm_1))
        0x00, 0x33, _, 0x33 ->
          Ok(Item(tag, "Gantry step for COIN acquisitions", [SignedLong], vm_1))
        0x7f, 0xe3, _, 0x17 ->
          Ok(Item(tag, "Duration of THIS Frame msec", [SignedLong], vm_1))
        0x00, 0x19, _, 0xc1 ->
          Ok(Item(tag, "Uniformity Correction Flag", [SignedShort], vm_1))
        0x00, 0x51, _, 0x15 ->
          Ok(Item(tag, "Hottest Pixel in Window", [SignedLong], vm_1))
        0x00, 0x55, _, 0xa7 ->
          Ok(Item(tag, "Regions File Extension", [SignedShort], vm_1))
        0x00, 0x55, _, 0x04 ->
          Ok(Item(tag, "Prompt window width", [SignedShort], vm_1))
        0x00, 0x19, _, 0x5a ->
          Ok(Item(tag, "CTQ Find Max or Average Flag", [UnsignedLong], vm_1))
        0x00, 0x35, _, 0x02 ->
          Ok(Item(
            tag,
            "Start and end row illuminated by wind position",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x94 ->
          Ok(Item(tag, "Window Center Method 0 Avg 1 Peak", [SignedShort], vm_1))
        0x00, 0x53, _, 0x12 ->
          Ok(Item(
            tag,
            "Count Rate Start Condition 0 None 1 Any 2 All",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x35, _, 0x00 ->
          Ok(Item(tag, "Specialized tomo type", [LongString], vm_1))
        0x00, 0x35, _, 0x04 ->
          Ok(Item(
            tag,
            "Repeat number of the original dynamic SPECT",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x33, _, 0x14 ->
          Ok(Item(
            tag,
            "MHR ( Y-Shift) data for detector 1",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x53, _, 0x03 ->
          Ok(Item(tag, "First Frame by Counts", [SignedShort], vm_1))
        0x00, 0x19, _, 0x6b ->
          Ok(Item(
            tag,
            "WB Anterior kCounts View 1",
            [FloatingPointSingle],
            vm_1,
          ))
        0x7f, 0xe1, _, 0x10 ->
          Ok(Item(tag, "Compressed Pixel Data", [OtherWordString], vm_1))
        0x00, 0x55, _, 0x31 ->
          Ok(Item(tag, "COR Acquisition Date", [Date], vm_1))
        0x00, 0x19, _, 0x55 ->
          Ok(Item(tag, "CTQ Min Oblique Stack Count", [SignedShort], vm_1))
        0x00, 0x55, _, 0x78 ->
          Ok(Item(tag, "Total Flood Counts", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0x8c ->
          Ok(Item(
            tag,
            "Attenuation Flag 1 Chang 2 Sorenson",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x83 ->
          Ok(Item(tag, "Total Beats Framed", [SignedShort], vm_1))
        0x00, 0x55, _, 0xb1 ->
          Ok(Item(tag, "Oblique Region Last Slice", [SignedShort], vm_1))
        0x00, 0x55, _, 0x6b -> Ok(Item(tag, "X4", [SignedShort], vm_1))
        0x00, 0x55, _, 0xd0 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(tag, "WB Display Field Length in cm", [SignedShort], vm_1))
        0x00, 0x53, _, 0x33 ->
          Ok(Item(tag, "Info Density Stop Count", [SignedLong], vm_1))
        0x7f, 0xe3, _, 0x24 -> Ok(Item(tag, "ROI Name", [LongString], vm_1))
        0x00, 0x55, _, 0x83 ->
          Ok(Item(tag, "Coronal Extension", [SignedShort], vm_1))
        0x00, 0x55, _, 0x90 ->
          Ok(Item(tag, "Coronal Anterior Limit", [SignedShort], vm_1))
        0x00, 0x19, _, 0x59 ->
          Ok(Item(tag, "CTQ Min Radius Percent", [SignedShort], vm_1))
        0x00, 0x19, _, 0x44 ->
          Ok(Item(tag, "Beats Rejected Post PVC", [SignedShort], vm_1))
        0x00, 0x53, _, 0x43 -> Ok(Item(tag, "Stop Time", [SignedLong], vm_1))
        0x00, 0x55, _, 0x65 -> Ok(Item(tag, "X1", [SignedShort], vm_1))
        0x00, 0x41, _, 0x21 ->
          Ok(Item(tag, "Text Relating to Data Object", [LongString], vm_1))
        0x00, 0x41, _, 0x40 ->
          Ok(Item(tag, "Folder Owner Name", [LongString], vm_1))
        0x00, 0x55, _, 0x97 -> Ok(Item(tag, "Percent Ray", [SignedShort], vm_1))
        0x00, 0x55, _, 0x98 ->
          Ok(Item(
            tag,
            "Astigmatic Collimator 1 Neuro 2 Cardiac",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x55, _, 0x8e ->
          Ok(Item(tag, "Sagittal Left Limit", [SignedShort], vm_1))
        0x00, 0x19, _, 0x03 ->
          Ok(Item(tag, "Scaler Index", [SignedShort], vm_1))
        0x00, 0x31, _, 0x0e ->
          Ok(Item(tag, "Event Control Mode", [SignedShort], vm_1))
        0x00, 0x19, _, 0x5b ->
          Ok(Item(tag, "CTQ Basal Slice Index Offset", [SignedShort], vm_1))
        0x00, 0x55, _, 0x54 ->
          Ok(Item(tag, "Angular Step", [FloatingPointSingle], vm_1))
        0x00, 0x53, _, 0x14 ->
          Ok(Item(
            tag,
            "Start Heart Beat Count Condition 0 None 1 Any 2",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x33, _, 0x25 ->
          Ok(Item(
            tag,
            "Backprojection angle head 2",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0x05 ->
          Ok(Item(tag, "Radiopharmaceutical", [DecimalString], vm_1))
        0x00, 0x19, _, 0x51 ->
          Ok(Item(tag, "CTQ Male Entry Count", [SignedShort], vm_1))
        0x00, 0x19, _, 0x65 ->
          Ok(Item(
            tag,
            "WB Scan Speed Mode 0 Manual 1 Auto",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x55, _, 0x75 ->
          Ok(Item(tag, "Y Offset", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0x05 ->
          Ok(Item(tag, "Random window width", [SignedShort], vm_1))
        0x00, 0x33, _, 0x01 ->
          Ok(Item(
            tag,
            "Flood correction Matrix Det 2 up to SR 2.0",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x55, _, 0x74 ->
          Ok(Item(tag, "X Offset", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x10 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x55, _, 0x99 -> Ok(Item(tag, "XP0", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x1a ->
          Ok(Item(tag, "View Number", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0x7e ->
          Ok(Item(tag, "Collimator thickness", [FloatingPointSingle], vm_1_to_n))
        0x00, 0x55, _, 0x5a ->
          Ok(Item(tag, "Table Traverse cm", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0xc2 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0x33, _, 0x22 ->
          Ok(Item(tag, "Bed U/D correction data", [SignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(tag, "Total Counts Framed", [SignedLong], vm_1))
        0x00, 0x19, _, 0xa0 ->
          Ok(Item(tag, "VPDs Detected", [SignedShort], vm_1))
        0x00, 0x19, _, 0xa6 ->
          Ok(Item(tag, "Cycles per repeat", [SignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x6d ->
          Ok(Item(tag, "WB Count Density", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0x53 ->
          Ok(Item(tag, "Zero Location (T=Top B=Bottom)", [CodeString], vm_1))
        0x00, 0x33, _, 0x30 ->
          Ok(Item(tag, "Preset name used for acquisition", [LongString], vm_1))
        0x00, 0x55, _, 0x58 ->
          Ok(Item(
            tag,
            "Radial Map Info in 0.1 mm Inc.",
            [FloatingPointSingle],
            vm_1,
          ))
        0x50, 0x01, _, 0x06 ->
          Ok(Item(tag, "Maximal Value on Y-Axis", [FloatingPointSingle], vm_1))
        0x00, 0x57, _, 0x03 -> Ok(Item(tag, "Units", [LongString], vm_1))
        0x00, 0x55, _, 0x76 ->
          Ok(Item(tag, "X Principal Ray", [FloatingPointSingle], vm_1))
        0x00, 0x53, _, 0x18 ->
          Ok(Item(tag, "Start Heart Rate", [SignedLong], vm_1))
        0x00, 0x53, _, 0x40 ->
          Ok(Item(
            tag,
            "Stop Condition Status 0 None 1 Any 2 All",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x55, _, 0x64 ->
          Ok(Item(tag, "TIC Error Values", [SignedShort], vm_1))
        0x00, 0x19, _, 0x08 ->
          Ok(Item(tag, "Processed Flag 0 Raw 1 Process", [SignedShort], vm_1))
        0x00, 0x57, _, 0x0b ->
          Ok(Item(tag, "Counts source", [LongString], vm_1))
        0x00, 0x11, _, 0x10 -> Ok(Item(tag, "Organ System", [CodeString], vm_1))
        0x00, 0x55, _, 0x9f -> Ok(Item(tag, "X1", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x43 ->
          Ok(Item(tag, "Percent of R-R Interval Framed", [SignedShort], vm_1))
        0x00, 0x55, _, 0x69 -> Ok(Item(tag, "X3", [SignedShort], vm_1))
        0x00, 0x53, _, 0x44 ->
          Ok(Item(
            tag,
            "Stop Time Condition Status 0 None 1 Any 2 All",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x49 ->
          Ok(Item(tag, "PVC Threshold msec", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x97 ->
          Ok(Item(tag, "Counts in Peak Bin", [SignedShort], vm_1))
        0x00, 0x33, _, 0x15 ->
          Ok(Item(
            tag,
            "MHR ( Y-Shift) data for detector 2",
            [FloatingPointSingle],
            vm_1,
          ))
        0x7f, 0xe3, _, 0x23 ->
          Ok(Item(tag, "ROI Center Coordinates", [SignedLong], vm_1))
        0x00, 0x19, _, 0xa9 ->
          Ok(Item(tag, "Effective repeat time", [SignedLong], vm_1_to_n))
        0x00, 0x55, _, 0x9b -> Ok(Item(tag, "XP1", [SignedShort], vm_1))
        0x00, 0x55, _, 0x02 ->
          Ok(Item(tag, "Unknown 55-02", [SignedShort], vm_1))
        0x00, 0x53, _, 0x32 ->
          Ok(Item(tag, "Info Density Stop Region", [SignedShort], vm_1))
        0x00, 0x55, _, 0x7f ->
          Ok(Item(
            tag,
            "Collimator angular resolution",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x7f, 0xe3, _, 0x16 ->
          Ok(Item(tag, "Total Counts in THIS Frame", [SignedLong], vm_1))
        0x00, 0x53, _, 0x31 ->
          Ok(Item(tag, "Info Density Stop Scaler", [SignedShort], vm_1))
        0x00, 0x55, _, 0xa9 ->
          Ok(Item(tag, "Vertical Oblique Image", [SignedShort], vm_1))
        0x00, 0x19, _, 0xc3 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x33, _, 0x38 ->
          Ok(Item(tag, "Pixel scale factor", [FloatingPointSingle], vm_1))
        0x00, 0x41, _, 0x50 ->
          Ok(Item(tag, "Folder Status", [SignedShort], vm_1))
        0x00, 0x41, _, 0x32 ->
          Ok(Item(tag, "Folder Creation Time", [Time], vm_1))
        0x00, 0x55, _, 0x20 ->
          Ok(Item(tag, "Flood Corr. Flag 1 Corr", [SignedShort], vm_1))
        0x50, 0x01, _, 0x04 ->
          Ok(Item(tag, "Maximal Value on X-Axis", [FloatingPointSingle], vm_1))
        0x50, 0x01, _, 0x09 ->
          Ok(Item(tag, "X Axis Label", [ShortString], vm_1))
        0x00, 0x17, _, 0x70 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x33, _, 0x28 ->
          Ok(Item(
            tag,
            "Number of point sources used for NCO and MHR",
            [SignedLong],
            vm_1,
          ))
        0x00, 0x55, _, 0x8b ->
          Ok(Item(tag, "Number of Transverse Slices", [SignedLong], vm_1))
        0x00, 0x55, _, 0x57 ->
          Ok(Item(tag, "Scatter Corr. Flag 1 Corr", [SignedShort], vm_1))
        0x00, 0x55, _, 0xa2 -> Ok(Item(tag, "Z0", [FloatingPointSingle], vm_1))
        0x7f, 0xe3, _, 0x15 ->
          Ok(Item(tag, "Highest Pixel Value in THIS Frame", [SignedLong], vm_1))
        0x00, 0x33, _, 0x24 ->
          Ok(Item(
            tag,
            "Backprojection angle head 1",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x55, _, 0x88 ->
          Ok(Item(tag, "Slice Step in Pixels", [SignedLong], vm_1))
        0x00, 0x41, _, 0x36 ->
          Ok(Item(tag, "Folder Modification Time", [Time], vm_1))
        0x00, 0x31, _, 0x06 ->
          Ok(Item(tag, "CCD Window Offset", [FloatingPointSingle], vm_1))
        0x00, 0x57, _, 0x02 ->
          Ok(Item(tag, "Dose calibration factor", [FloatingPointSingle], vm_1))
        0x00, 0x41, _, 0x34 ->
          Ok(Item(tag, "Folder Modification Date", [Date], vm_1))
        0x00, 0x19, _, 0x58 ->
          Ok(Item(tag, "CTQ Max Sagittal Stack Count", [SignedShort], vm_1))
        0x00, 0x57, _, 0x10 -> Ok(Item(tag, "Low Count", [SignedShort], vm_1))
        0x00, 0x55, _, 0xa5 ->
          Ok(Item(tag, "Pixel Size X Direction mm", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x0c ->
          Ok(Item(tag, "MicroDELTA Write Version", [SignedShort], vm_1))
        0x00, 0x19, _, 0x48 ->
          Ok(Item(tag, "Rejection Scheme", [ShortString], vm_1))
        0x00, 0x55, _, 0x30 ->
          Ok(Item(tag, "COR Corr. Flag 1 Corr", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x22 ->
          Ok(Item(tag, "ROI Total Pixels", [SignedLong], vm_1))
        0x50, 0x01, _, 0x0b ->
          Ok(Item(tag, "Curve Data", [OtherWordString], vm_1))
        0x00, 0x19, _, 0x06 ->
          Ok(Item(tag, "Display Magnification", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0x73 ->
          Ok(Item(tag, "Y Gains", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0x59 ->
          Ok(Item(tag, "Direction H HeadIn F FeetIn", [CodeString], vm_1))
        0x00, 0x33, _, 0x36 ->
          Ok(Item(
            tag,
            "Transaxial acceptance width for coincidence",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0xaa ->
          Ok(Item(tag, "Acquired cycles per repeat", [SignedShort], vm_1_to_n))
        0x7f, 0xe3, _, 0x25 -> Ok(Item(tag, "ROI Data", [SignedShort], vm_1))
        0x00, 0x55, _, 0x5c ->
          Ok(Item(tag, "Pixel Acquisition Date", [DecimalString], vm_1))
        0x00, 0x19, _, 0x76 ->
          Ok(Item(tag, "WB Post Scan Time msec", [SignedShort], vm_1))
        0x00, 0x55, _, 0x94 ->
          Ok(Item(tag, "Filter Alpha Coefficient", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x64 ->
          Ok(Item(tag, "WB Scan Speed cm/min", [SignedShort], vm_1))
        0x00, 0x41, _, 0x08 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x35, _, 0x03 ->
          Ok(Item(tag, "Blank scan image for profile", [LongString], vm_1))
        0x00, 0x19, _, 0x23 ->
          Ok(Item(tag, "Bladder Image Extension", [SignedShort], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "MicroDELTA Expansion Blocks", [OtherWordString], vm_1))
        0x00, 0x19, _, 0x26 ->
          Ok(Item(tag, "TER Lower Limit", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0x86 ->
          Ok(Item(tag, "Plane of Transverse Bottom Slice", [SignedLong], vm_1))
        0x00, 0x31, _, 0x0a ->
          Ok(Item(tag, "Analog Output Device", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x14 ->
          Ok(Item(tag, "Lowest Pixel Value in THIS Frame", [SignedLong], vm_1))
        0x00, 0x19, _, 0x4c ->
          Ok(Item(
            tag,
            "MicroDELTA Acquisition Time per Window msec",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x57, _, 0x08 ->
          Ok(Item(tag, "Frame reference time", [FloatingPointSingle], vm_1))
        0x7f, 0xe3, _, 0x1c ->
          Ok(Item(
            tag,
            "Buffer Overflow Flag 1 Buffer Overflow",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x24 ->
          Ok(Item(tag, "Serum Creatinine mg/dl", [FloatingPointSingle], vm_1))
        0x50, 0x01, _, 0x08 ->
          Ok(Item(tag, "Curve Function Label", [LongString], vm_1))
        0x00, 0x55, _, 0x82 ->
          Ok(Item(tag, "Sagittal Extension", [SignedShort], vm_1))
        0x00, 0x19, _, 0x1a ->
          Ok(Item(tag, "MicroDELTA Overlay Map", [SignedShort], vm_1))
        0x00, 0x53, _, 0x1b ->
          Ok(Item(tag, "Elapsed Time Stop", [SignedLong], vm_1))
        0x00, 0x55, _, 0x93 ->
          Ok(Item(tag, "Filter Cutoff Frequency", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0x6d ->
          Ok(Item(tag, "Pixel Size Flag 1 Valid Size", [SignedShort], vm_1))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "MicroDELTA Version", [CodeString], vm_1))
        0x00, 0x19, _, 0x47 ->
          Ok(Item(tag, "Beat Rejection Parameter", [FloatingPointSingle], vm_1))
        0x00, 0x53, _, 0x1c ->
          Ok(Item(
            tag,
            "Stop Heart Beat Count Condition 0 None 1 Any 2 A",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x41, _, 0x02 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x43, _, 0x04 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1_to_n))
        0x00, 0x17, _, 0x80 ->
          Ok(Item(tag, "Unknown 0017 0080", [ShortText], vm_1_to_n))
        0x00, 0x17, _, 0x20 ->
          Ok(Item(tag, "Scanning Sequence", [CodeString], vm_1))
        0x00, 0x33, _, 0x34 ->
          Ok(Item(
            tag,
            "Bed step for wholebody or Coin acquisitions",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x57, _, 0x07 ->
          Ok(Item(tag, "Rescale Slope", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0x84 ->
          Ok(Item(tag, "Transverse Extension", [SignedShort], vm_1))
        0x00, 0x19, _, 0x75 ->
          Ok(Item(
            tag,
            "WB Post View Status No Img 1 Complete 2 Aborted",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x31, _, 0x21 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0x33, _, 0x23 ->
          Ok(Item(tag, "Unknown", [SignedShort], vm_1_to_n))
        0x00, 0x55, _, 0x68 -> Ok(Item(tag, "Y2", [SignedShort], vm_1))
        0x00, 0x19, _, 0x0a ->
          Ok(Item(tag, "MicroDELTA File Extension", [LongString], vm_1))
        0x00, 0x19, _, 0x7f ->
          Ok(Item(
            tag,
            "Segment Type 0 Segments 2 Time/Segment",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x31, _, 0x13 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x57, _, 0x05 ->
          Ok(Item(tag, "Radio nuclide half life", [SignedLong], vm_1_to_n))
        0x00, 0x19, _, 0xc2 ->
          Ok(Item(tag, "Overflow Flag", [SignedShort], vm_1))
        0x00, 0x55, _, 0xa6 ->
          Ok(Item(tag, "Pixel Size Y Direction mm", [FloatingPointSingle], vm_1))
        0x7f, 0xe3, _, 0x18 ->
          Ok(Item(tag, "Frame Angle", [FloatingPointSingle], vm_1))
        0x00, 0x53, _, 0x15 ->
          Ok(Item(tag, "Start Heart Beat Count", [SignedLong], vm_1))
        0x00, 0x55, _, 0xa3 -> Ok(Item(tag, "Z1", [FloatingPointSingle], vm_1))
        0x7f, 0xe3, _, 0x1e ->
          Ok(Item(
            tag,
            "Start Time of THIS Frame From Start of Study",
            [SignedLong],
            vm_1,
          ))
        0x00, 0x55, _, 0x61 ->
          Ok(Item(tag, "Non-gated File Extension", [SignedShort], vm_1))
        0x00, 0x19, _, 0x0d ->
          Ok(Item(tag, "MicroDELTA Mode", [CodeString], vm_1))
        0x00, 0x19, _, 0x56 ->
          Ok(Item(tag, "CTQ Max Oblique Stack Count", [SignedShort], vm_1))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "MicroDELTA Color Table Extra", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x19 -> Ok(Item(tag, "Frame Name", [LongString], vm_1))
        0x00, 0x31, _, 0x11 ->
          Ok(Item(tag, "Gantry Zero Position", [SignedShort], vm_1))
        0x00, 0x55, _, 0x40 ->
          Ok(Item(tag, "Noncircular Orbit Flag 1 NCO", [SignedShort], vm_1))
        0x00, 0x19, _, 0x27 ->
          Ok(Item(tag, "Body Surface Area m2", [FloatingPointSingle], vm_1))
        0x00, 0x51, _, 0x18 ->
          Ok(Item(tag, "Total Counts in Window", [SignedLong], vm_1))
        0x00, 0x41, _, 0x07 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1_to_n))
        0x7f, 0xe3, _, 0x28 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0x19, _, 0x17 ->
          Ok(Item(tag, "MicroDELTA Thyroid Markers", [SignedShort], vm_1))
        0x00, 0x55, _, 0xc3 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0x55, _, 0x9a -> Ok(Item(tag, "ZP0", [SignedShort], vm_1))
        0x00, 0x19, _, 0x18 ->
          Ok(Item(tag, "MicroDELTA Color Table Used", [SignedShort], vm_1))
        0x00, 0x19, _, 0x54 ->
          Ok(Item(tag, "CTQ Time Delay Units", [CodeString], vm_1))
        0x00, 0x31, _, 0x0b ->
          Ok(Item(tag, "Communication Type", [SignedShort], vm_1))
        0x00, 0x31, _, 0x0c ->
          Ok(Item(
            tag,
            "Control Unit 1 ICON 2 DOT 3 ScintiView",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0xc0 ->
          Ok(Item(tag, "Head Tilt degrees", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x8a ->
          Ok(Item(tag, "R-R Interval msec", [SignedLong], vm_1))
        0x7f, 0xe3, _, 0x20 ->
          Ok(Item(tag, "ROI Average Pixel Value", [SignedLong], vm_1))
        0x00, 0x19, _, 0x57 ->
          Ok(Item(tag, "CTQ Min Sagittal Stack Count", [SignedShort], vm_1))
        0x00, 0x41, _, 0x01 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "CTQ has been used", [SignedShort], vm_1))
        0x50, 0x01, _, 0x05 ->
          Ok(Item(tag, "Minimal Value on Y-Axis", [FloatingPointSingle], vm_1))
        0x00, 0x57, _, 0x06 ->
          Ok(Item(tag, "Rescale intercept", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0xa5 ->
          Ok(Item(tag, "Number of repeats per phase", [SignedShort], vm_1_to_n))
        0x00, 0x41, _, 0x70 ->
          Ok(Item(tag, "Number of Images in Folder", [SignedLong], vm_1))
        0x00, 0x19, _, 0x09 ->
          Ok(Item(tag, "MicroDELTA Parameter Blocks", [SignedShort], vm_1))
        0x00, 0x19, _, 0x73 ->
          Ok(Item(
            tag,
            "WB Posterior kCounts View 2",
            [FloatingPointSingle],
            vm_1,
          ))
        0x7f, 0xe3, _, 0x27 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0x19, _, 0x4e ->
          Ok(Item(tag, "CTQ Unknown Entry Count", [SignedShort], vm_1))
        0x00, 0x55, _, 0x77 ->
          Ok(Item(tag, "Y Principal Ray", [FloatingPointSingle], vm_1))
        0x00, 0x33, _, 0x37 ->
          Ok(Item(tag, "Starburst flags", [SignedLong], vm_1))
        0x00, 0x33, _, 0x19 ->
          Ok(Item(
            tag,
            "NCO Data for detector 2",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x53, _, 0x1a ->
          Ok(Item(
            tag,
            "Elapsed Time Stop Condition 0 None 1 Any 2 All",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x31 ->
          Ok(Item(
            tag,
            "CTQ Abnormal Sagittal Margin",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0x41 ->
          Ok(Item(tag, "Accepted Beats", [SignedShort], vm_1))
        0x00, 0x31, _, 0x10 ->
          Ok(Item(tag, "Zoom Y Offset 0.1 mm", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x85 ->
          Ok(Item(tag, "Framed Counts", [SignedShort], vm_1))
        0x50, 0x01, _, 0x02 ->
          Ok(Item(tag, "Number of Points", [SignedLong], vm_1))
        0x00, 0x57, _, 0x0c ->
          Ok(Item(
            tag,
            "Radio Nuclide positron fraction",
            [SignedLong],
            vm_1_to_n,
          ))
        0x00, 0x53, _, 0x16 ->
          Ok(Item(
            tag,
            "Start Heart Rate Threshold Condition",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x0b ->
          Ok(Item(tag, "MicroDELTA Write ID", [LongString], vm_1))
        0x00, 0x53, _, 0x41 -> Ok(Item(tag, "Stop Count", [SignedLong], vm_1))
        0x00, 0x55, _, 0x9c -> Ok(Item(tag, "ZP1", [SignedShort], vm_1))
        0x00, 0x19, _, 0xa2 ->
          Ok(Item(tag, "Requested Frame Duration msec", [SignedLong], vm_1))
        0x00, 0x51, _, 0x14 ->
          Ok(Item(tag, "Window Width %", [SignedShort], vm_1))
        0x00, 0x19, _, 0x16 ->
          Ok(Item(tag, "Number of Views", [SignedShort], vm_1))
        0x00, 0x31, _, 0x05 ->
          Ok(Item(tag, "CCD Window Width", [SignedShort], vm_1))
        0x00, 0x19, _, 0x07 ->
          Ok(Item(tag, "Scaler Counts", [SignedLong], vm_1))
        0x00, 0x19, _, 0x02 ->
          Ok(Item(tag, "Number of scalers", [SignedShort], vm_1))
        0x00, 0x51, _, 0x11 ->
          Ok(Item(tag, "Average Heart Rate BPM", [SignedShort], vm_1))
        0x00, 0x19, _, 0x71 ->
          Ok(Item(tag, "WB IRIS Corr. File Name", [LongString], vm_1))
        0x00, 0x21, _, 0x00 ->
          Ok(Item(tag, "ECAT File Menu Header", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x13 ->
          Ok(Item(tag, "MicroDELTA Number of Overlays", [SignedShort], vm_1))
        0x00, 0x19, _, 0x92 ->
          Ok(Item(tag, "Phase Pause msec", [SignedLong], vm_1))
        0x00, 0x53, _, 0x11 ->
          Ok(Item(tag, "Elapsed Time Start msec", [SignedLong], vm_1))
        0x00, 0x19, _, 0x5f ->
          Ok(Item(tag, "CTQ Radial Angle Increment", [SignedShort], vm_1))
        0x00, 0x31, _, 0x20 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x00, 0x19, _, 0x5e ->
          Ok(Item(tag, "CTQ Radii Counts", [SignedShort], vm_1))
        0x00, 0x19, _, 0x61 ->
          Ok(Item(tag, "Whole Body View", [SignedShort], vm_1))
        0x00, 0x19, _, 0x5c ->
          Ok(Item(tag, "CTQ Starting Line Index", [SignedShort], vm_1))
        0x00, 0x55, _, 0x52 ->
          Ok(Item(tag, "Total Rotation in Degrees", [SignedShort], vm_1))
        0x00, 0x55, _, 0x21 ->
          Ok(Item(tag, "Flood Acquisition Date", [DecimalString], vm_1))
        0x00, 0x55, _, 0xb0 ->
          Ok(Item(tag, "Oblique Region First Slice", [SignedShort], vm_1))
        0x00, 0x19, _, 0x6f ->
          Ok(Item(
            tag,
            "WB Coun Density Speed cm/min",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x35, _, 0x05 ->
          Ok(Item(
            tag,
            "Phase number of the original dynamic SPECT",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x89 -> Ok(Item(tag, "SWG", [SignedShort], vm_1))
        0x00, 0x55, _, 0x96 ->
          Ok(Item(tag, "Attenuation Cooefficient", [FloatingPointSingle], vm_1))
        0x00, 0x31, _, 0x01 -> Ok(Item(tag, "Camera Name", [LongString], vm_1))
        0x00, 0x37, _, 0x80 ->
          Ok(Item(
            tag,
            "Flood correction matrix Detector 2",
            [OtherWordString],
            vm_1,
          ))
        0x00, 0x31, _, 0x0f ->
          Ok(Item(tag, "Zoom X Offset 0.1 mm", [FloatingPointSingle], vm_1))
        0x00, 0x33, _, 0x21 ->
          Ok(Item(tag, "Gantry correction angle", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x01 ->
          Ok(Item(tag, "Number of detectors", [SignedShort], vm_1))
        0x00, 0x19, _, 0x69 ->
          Ok(Item(tag, "WB Number of Passes", [SignedShort], vm_1))
        0x00, 0x55, _, 0x51 ->
          Ok(Item(tag, "Orbit 0 Circular 1 Elliptical", [SignedShort], vm_1))
        0x00, 0x19, _, 0x77 ->
          Ok(Item(tag, "WB Ant Pixel Overflow 1 Yes", [SignedShort], vm_1))
        0x00, 0x55, _, 0x71 ->
          Ok(Item(tag, "Y Focal Length", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x74 ->
          Ok(Item(
            tag,
            "WB Ant View Status No Img 1 Complete 2 Aborted",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x31, _, 0x17 ->
          Ok(Item(tag, "Unknown", [SignedShort], vm_1_to_n))
        0x00, 0x19, _, 0xa4 ->
          Ok(Item(tag, "Frame Pause msec", [SignedLong], vm_1))
        0x00, 0x55, _, 0x91 ->
          Ok(Item(tag, "Isotope Used in Reconstruction", [SignedShort], vm_1))
        0x00, 0x53, _, 0x10 ->
          Ok(Item(
            tag,
            "Elapsed Time Start Condition 0 None 1 Any 2 All",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x33, _, 0x32 ->
          Ok(Item(tag, "Crystal type Startburst or not", [LongString], vm_1))
        0x00, 0x53, _, 0x17 ->
          Ok(Item(tag, "Start Heart Rate Increasing Flag", [SignedShort], vm_1))
        0x00, 0x33, _, 0x31 ->
          Ok(Item(tag, "Camera config angle", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0xa7 ->
          Ok(Item(tag, "Repeat start time", [SignedLong], vm_1_to_n))
        0x00, 0x19, _, 0x4b ->
          Ok(Item(tag, "Autobeat Window 0 No 1 Yes", [SignedShort], vm_1))
        0x00, 0x55, _, 0x6a -> Ok(Item(tag, "Y3", [SignedShort], vm_1))
        0x00, 0x19, _, 0x70 -> Ok(Item(tag, "WB Scan Type", [CodeString], vm_1))
        0x00, 0x09, _, 0x80 ->
          Ok(Item(tag, "Main Acquisition View", [LongString], vm_1))
        0x00, 0x55, _, 0xa4 ->
          Ok(Item(tag, "Transverse Scale", [SignedShort], vm_1))
        0x00, 0x51, _, 0x13 ->
          Ok(Item(tag, "Average R-R Interval msec", [SignedShort], vm_1))
        0x00, 0x53, _, 0x01 ->
          Ok(Item(
            tag,
            "Terminate on Pixel Overflow Flag 1 Terminate",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0xa8 ->
          Ok(Item(tag, "Repeat stop time", [SignedLong], vm_1_to_n))
        0x00, 0x41, _, 0x11 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1_to_n))
        0x00, 0x55, _, 0xc0 ->
          Ok(Item(tag, "Unknown", [SignedShort], vm_1_to_n))
        0x00, 0x55, _, 0x9e -> Ok(Item(tag, "X0", [FloatingPointSingle], vm_1))
        0x00, 0x31, _, 0x07 ->
          Ok(Item(tag, "CCD Peaking Mode", [SignedShort], vm_1))
        0x00, 0x55, _, 0x5b ->
          Ok(Item(tag, "Multiplexor Flag 1 Multiplexed", [SignedShort], vm_1))
        0x00, 0x19, _, 0x22 ->
          Ok(Item(tag, "Bladder Esidual Volume cc", [FloatingPointSingle], vm_1))
        0x00, 0x41, _, 0x71 ->
          Ok(Item(tag, "Number of Non-Image Objects", [SignedLong], vm_1))
        0x00, 0x53, _, 0x13 ->
          Ok(Item(tag, "Count Rate Start", [SignedLong], vm_1))
        0x00, 0x19, _, 0xa1 ->
          Ok(Item(tag, "Number of Phases", [SignedShort], vm_1))
        0x00, 0x19, _, 0x1c ->
          Ok(Item(tag, "MicroDELTA Mystery1", [SignedShort], vm_1))
        0x00, 0x55, _, 0xa1 -> Ok(Item(tag, "Y1", [FloatingPointSingle], vm_1))
        0x00, 0x53, _, 0x30 ->
          Ok(Item(tag, "Info Density Stop Condition", [SignedShort], vm_1))
        0x00, 0x19, _, 0x0e ->
          Ok(Item(tag, "MicroDELTA ESFR", [LongString], vm_1))
        0x00, 0x53, _, 0x1d ->
          Ok(Item(tag, "Stop Heart Beat Count", [SignedLong], vm_1))
        0x00, 0x41, _, 0x06 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x19, _, 0x6c ->
          Ok(Item(
            tag,
            "WB Anterior kCounts View 2",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0x87 ->
          Ok(Item(tag, "BBA Miscellaneous Info", [LongText], vm_1))
        0x00, 0x55, _, 0x5e ->
          Ok(Item(tag, "Orbit Definition", [SignedLong], vm_1))
        0x00, 0x19, _, 0x68 ->
          Ok(Item(tag, "WB Aperature Width in cm", [FloatingPointSingle], vm_1))
        0x00, 0x33, _, 0x35 ->
          Ok(Item(
            tag,
            "Weight factor table for coincidence acquisitions",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(
            tag,
            "Time of Lasix Administration",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0x25 -> Ok(Item(tag, "TER", [FloatingPointSingle], vm_1))
        0x7f, 0xe3, _, 0x00 ->
          Ok(Item(tag, "Length of Group 0x7FE3", [UnsignedLong], vm_1))
        0x00, 0x55, _, 0x67 -> Ok(Item(tag, "X2", [SignedShort], vm_1))
        0x00, 0x19, _, 0x45 ->
          Ok(Item(tag, "Trigger Source", [FloatingPointSingle], vm_1))
        0x00, 0x31, _, 0x04 ->
          Ok(Item(tag, "CCD Energy Level", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x42 ->
          Ok(Item(tag, "Rejected Beats", [SignedShort], vm_1))
        0x00, 0x19, _, 0x53 ->
          Ok(Item(tag, "CTQ Stress/Rest Time Delay", [SignedShort], vm_1))
        0x00, 0x41, _, 0x30 ->
          Ok(Item(tag, "Folder Creation Date", [Date], vm_1))
        0x00, 0x1f, _, 0x50 ->
          Ok(Item(tag, "Location RET", [DecimalString], vm_1))
        0x00, 0x57, _, 0x01 ->
          Ok(Item(tag, "e.soft DICOM original image type", [LongString], vm_1))
        0x00, 0x55, _, 0x8a ->
          Ok(Item(tag, "Y-Axis Smooth Slice Weights", [SignedLong], vm_1))
        0x00, 0x31, _, 0x03 ->
          Ok(Item(tag, "External Zoom", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0x72 ->
          Ok(Item(tag, "X Gains", [FloatingPointSingle], vm_1))
        0x00, 0x55, _, 0x70 ->
          Ok(Item(tag, "X Focal Length", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x8e ->
          Ok(Item(tag, "Rejection Type", [SignedLong], vm_1))
        0x00, 0x33, _, 0x10 ->
          Ok(Item(
            tag,
            "COR Data for Detector 1",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0x88 -> Ok(Item(tag, "Tolerance %", [SignedLong], vm_1))
        0x00, 0x33, _, 0x11 ->
          Ok(Item(
            tag,
            "COR Data for Detector 2",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(
            tag,
            "Whole Body Processed Flag 0:Raw 1:Img1-Img2 2:Im",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x19, _, 0x14 ->
          Ok(Item(tag, "MicroDELTA Overlay Block", [SignedShort], vm_1))
        0x00, 0x19, _, 0x21 ->
          Ok(Item(tag, "Lasix Dose mg", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x6e ->
          Ok(Item(tag, "WB Reference View Flag 1 Ref", [SignedShort], vm_1))
        0x00, 0x19, _, 0x96 ->
          Ok(Item(
            tag,
            "Histogram Bin Interval msec",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x19, _, 0x81 ->
          Ok(Item(tag, "PVC Rejection Flag 1 Reject", [SignedShort], vm_1))
        0x00, 0x57, _, 0x09 ->
          Ok(Item(
            tag,
            "Number of Radiopharmaceutical information seq",
            [SignedLong],
            vm_1,
          ))
        0x00, 0x19, _, 0x72 ->
          Ok(Item(
            tag,
            "WB Posterior kCounts View 1",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x55, _, 0xa0 -> Ok(Item(tag, "Y0", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x4a ->
          Ok(Item(tag, "Framing Mode 1 Forward 2 F/B", [SignedShort], vm_1))
        0x00, 0x33, _, 0x00 ->
          Ok(Item(
            tag,
            "Flood correction Matrix Det 1 up to SR 2.0",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x50, 0x01, _, 0x03 ->
          Ok(Item(tag, "Minimal Value on X-Axis", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x84 ->
          Ok(Item(tag, "Present Time of Day", [SignedShort], vm_1))
        0x00, 0x19, _, 0xf0 ->
          Ok(Item(tag, "Pixel Dimensions", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x91 ->
          Ok(Item(tag, "Phase Total Counts", [FloatingPointSingle], vm_1))
        0x00, 0x19, _, 0x8d ->
          Ok(Item(tag, "Total Counts in Acquisition", [SignedLong], vm_1))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "ECAT File Subheader", [OtherByteString], vm_1))
        0x00, 0x31, _, 0x16 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1_to_n))
        0x00, 0x19, _, 0x04 ->
          Ok(Item(tag, "Radionuclide Units", [DecimalString], vm_1))
        0x00, 0x19, _, 0x63 ->
          Ok(Item(tag, "WB Scan Length in cm", [SignedShort], vm_1))
        0x00, 0x19, _, 0x1b ->
          Ok(Item(tag, "SGI Converted LookUp Table", [SignedShort], vm_1))
        0x00, 0x19, _, 0x4f ->
          Ok(Item(tag, "CTQ Matrix Size", [SignedShort], vm_1))
        0x00, 0x19, _, 0x67 ->
          Ok(Item(
            tag,
            "WB Scan Direction 0 Lt to Rt 1 Rt to Lt",
            [SignedShort],
            vm_1,
          ))
        0x00, 0x55, _, 0x48 ->
          Ok(Item(tag, "NCO Values", [FloatingPointSingle], vm_1))
        0x00, 0x57, _, 0x04 ->
          Ok(Item(tag, "Decay correction", [LongString], vm_1))
        0x00, 0x51, _, 0x10 ->
          Ok(Item(tag, "Number of Windows", [SignedShort], vm_1))
        0x7f, 0xe3, _, 0x1f ->
          Ok(Item(tag, "ROI Maximum Pixel Value", [SignedLong], vm_1))
        0x00, 0x55, _, 0x8f ->
          Ok(Item(tag, "Coronal Posterior Limit", [SignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS UNDOCUMENTED" ->
      case g0, g1, e0, e1 {
        0x55, 0x03, _, 0x12 ->
          Ok(Item(tag, "Slice Thickness", [SignedLong], vm_1))
        0x55, 0x03, _, 0x24 -> Ok(Item(tag, "Plane", [UnlimitedText], vm_1))
        0x55, 0x03, _, 0x30 ->
          Ok(Item(tag, "Number of Slices", [SignedShort], vm_1))
        0x55, 0x03, _, 0xa5 -> Ok(Item(tag, "Prepulse", [UnlimitedText], vm_1))
        0x55, 0x03, _, 0xae ->
          Ok(Item(tag, "Contrast Agent Flag", [SignedShort], vm_1))
        0x55, 0x03, _, 0xbb -> Ok(Item(tag, "Coil ID", [SignedLong], vm_1))
        0x55, 0x03, _, 0xc2 -> Ok(Item(tag, "Anatomy", [UnlimitedText], vm_1))
        0x55, 0x03, _, 0xc3 ->
          Ok(Item(tag, "Indication", [UnlimitedText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SECTRA_Ident_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x01 ->
          Ok(Item(tag, "Request number", [LongString], vm_1))
        0x00, 0x09, _, 0x02 ->
          Ok(Item(tag, "Examination number", [LongString], vm_1))
        0x00, 0x09, _, 0x04 -> Ok(Item(tag, "Series ID", [LongString], vm_1))
        0x00, 0x09, _, 0x05 -> Ok(Item(tag, "Series Order", [LongString], vm_1))
        0x00, 0x09, _, 0x06 -> Ok(Item(tag, "File Name", [LongString], vm_1))
        0x00, 0x09, _, 0x07 ->
          Ok(Item(tag, "Image Data ID", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 017" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x05 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CT VA0  COAD" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x52 ->
          Ok(Item(tag, "Table Feed", [DecimalString], vm_1))
        0x00, 0x19, _, 0xbe ->
          Ok(Item(tag, "Expiratoric Reserve", [DecimalString], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Patient Region", [CodeString], vm_1))
        0x00, 0x19, _, 0xbf ->
          Ok(Item(tag, "Vital Capacity", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa3 ->
          Ok(Item(tag, "Spiral Reconstruction Direction", [CodeString], vm_1))
        0x00, 0x19, _, 0x66 ->
          Ok(Item(tag, "Focal Spot Deflection Phase", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x93 ->
          Ok(Item(tag, "Osteo Regression Line Intercept", [DecimalString], vm_1))
        0x00, 0x19, _, 0xbd ->
          Ok(Item(tag, "Pulmo Trigger Level", [IntegerString], vm_1))
        0x00, 0x19, _, 0xaf ->
          Ok(Item(tag, "Correction Table Reference Time", [DecimalString], vm_1))
        0x00, 0x19, _, 0xc1 -> Ok(Item(tag, "Pulmo Air", [DecimalString], vm_1))
        0x00, 0x19, _, 0x94 ->
          Ok(Item(tag, "Osteo Standardization Code", [IntegerString], vm_1))
        0x00, 0x19, _, 0x65 ->
          Ok(Item(tag, "Focal Spot Deflection Amplitude", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(tag, "Patient Phase of Life", [CodeString], vm_1))
        0x00, 0x19, _, 0xa0 ->
          Ok(Item(tag, "Spiral Location Begin", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa6 ->
          Ok(Item(tag, "Mode Processing Step Mask", [UnsignedLong], vm_1_to_n))
        0x00, 0x19, _, 0xa9 ->
          Ok(Item(tag, "Mode Store Step", [IntegerString], vm_1))
        0x00, 0x19, _, 0xae ->
          Ok(Item(tag, "Number of Readings per Rotation", [IntegerString], vm_1))
        0x00, 0x19, _, 0xc3 -> Ok(Item(tag, "Pulmo Time", [Time], vm_1))
        0x00, 0x19, _, 0xac ->
          Ok(Item(tag, "Mode MBH Kind", [IntegerString], vm_1))
        0x00, 0x19, _, 0xaa ->
          Ok(Item(tag, "Focus Size Type", [CodeString], vm_1))
        0x00, 0x19, _, 0xc5 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0xc4 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0xb0 ->
          Ok(Item(tag, "Feed per Rotation", [DecimalString], vm_1))
        0x00, 0x19, _, 0x23 ->
          Ok(Item(tag, "Detector Center", [DecimalString], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(
            tag,
            "Distance Source to SourceSide Collimator",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x24 ->
          Ok(Item(tag, "Reading Integration Time", [DecimalString], vm_1))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(
            tag,
            "Distance Source to DetectorSide Collimator",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0xc2 -> Ok(Item(tag, "Pulmo Date", [Date], vm_1))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "Osteo Offset", [DecimalString], vm_1))
        0x00, 0x19, _, 0xad ->
          Ok(Item(tag, "Mode Balancing Kind", [IntegerString], vm_1))
        0x00, 0x19, _, 0x54 ->
          Ok(Item(tag, "Rotation Time", [DecimalString], vm_1))
        0x00, 0x19, _, 0xc0 ->
          Ok(Item(tag, "Pulmo Water", [DecimalString], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "Detector Alignment", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa5 ->
          Ok(Item(tag, "Scan Tilt Plane Distance", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa2 ->
          Ok(Item(tag, "Spiral z Profile", [CodeString], vm_1))
        0x00, 0x19, _, 0x71 ->
          Ok(Item(tag, "Interpolation Factor", [DecimalString], vm_1))
        0x00, 0x19, _, 0x92 ->
          Ok(Item(tag, "Osteo Regression Line Slope", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa4 ->
          Ok(Item(tag, "Spiral Reconstruction Increment", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa7 ->
          Ok(Item(tag, "Mode Processing Control Mask", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Water Scaling Factor", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa8 ->
          Ok(Item(tag, "Mode Master Mask", [UnsignedLong], vm_1_to_n))
        0x00, 0x19, _, 0x22 ->
          Ok(Item(tag, "Detector Spacing", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa1 ->
          Ok(Item(tag, "Spiral Location End", [DecimalString], vm_1))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(tag, "Number of Possible Channels", [IntegerString], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Focus Alignment", [DecimalString], vm_1))
        0x00, 0x19, _, 0x21 ->
          Ok(Item(tag, "Mean Channel Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x96 ->
          Ok(Item(tag, "Osteo Phantom Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x67 ->
          Ok(Item(tag, "Focal Spot Deflection Offset", [UnsignedLong], vm_1))
        0x00, 0x19, _, 0xab ->
          Ok(Item(tag, "Mode Adaptive Filter Kind", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "MDS NORDION OTP ANATOMY MODELLING" ->
      case g0, g1, e0, e1 {
        0x30, 0x05, _, 0x00 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x30, 0x05, _, 0x02 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x30, 0x05, _, 0x04 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x30, 0x05, _, 0x06 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x30, 0x05, _, 0x08 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x30, 0x05, _, 0x0a -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x30, 0x05, _, 0x0c -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x30, 0x05, _, 0x0e -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x30, 0x05, _, 0x10 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x30, 0x05, _, 0x12 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 023" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x37 -> Ok(Item(tag, "Unknown", [Date], vm_1))
        0x20, 0x0d, _, 0x38 -> Ok(Item(tag, "Unknown", [Time], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_DL_SERIES_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x15, _, 0x85 ->
          Ok(Item(tag, "Series File Name", [LongString], vm_1))
        0x00, 0x15, _, 0x87 ->
          Ok(Item(tag, "Number Of Images", [IntegerString], vm_1))
        0x00, 0x15, _, 0x8c -> Ok(Item(tag, "Sent Flag", [CodeString], vm_1))
        0x00, 0x15, _, 0x8d ->
          Ok(Item(tag, "Item Locked", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x4c ->
          Ok(Item(tag, "internal label", [CodeString], vm_1))
        0x00, 0x19, _, 0x4d -> Ok(Item(tag, "browser hide", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED ECAT FILE INFO" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x00 ->
          Ok(Item(tag, "ECAT_Main_Header", [OtherByteString], vm_1))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "ECAT_Image_Subheader", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "ELSCINT1" ->
      case g0, g1, e0, e1 {
        0x01, 0xf7, _, 0x73 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0xe1, _, 0x6b -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x07, 0xa1, _, 0x16 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1_to_n))
        0x07, 0xa1, _, 0x50 ->
          Ok(Item(tag, "Tamar Site Id", [UnsignedShort], vm_1))
        0x01, 0xf1, _, 0x39 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x01, 0xf3, _, 0x23 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x06, 0x01, _, 0x72 ->
          Ok(Item(tag, "Batch Slice Number", [DecimalString], vm_1))
        0x07, 0xa3, _, 0x61 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x07, 0xa1, _, 0x2a ->
          Ok(Item(tag, "Tamar Study Status", [CodeString], vm_1))
        0x50, 0x01, _, 0x83 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1_to_n))
        0x01, 0xf1, _, 0x0c ->
          Ok(Item(tag, "Scanner Relative Center", [DecimalString], vm_2))
        0x00, 0xe1, _, 0x6a -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0xe1, _, 0x23 ->
          Ok(Item(tag, "Presentation Relative Part", [DecimalString], vm_2))
        0x01, 0xf7, _, 0x15 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x50, 0x01, _, 0x80 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x01, 0xf1, _, 0x06 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x01, 0xf3, _, 0x11 -> Ok(Item(tag, "PS Sequence", [Sequence], vm_1))
        0x06, 0x01, _, 0x70 ->
          Ok(Item(tag, "Batch Number", [DecimalString], vm_1))
        0x01, 0xf1, _, 0x0e ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x07, 0xa3, _, 0x10 ->
          Ok(Item(tag, "Tamar Original Curve Desc", [LongString], vm_1))
        0x00, 0xe1, _, 0x01 ->
          Ok(Item(tag, "Data Dictionary Version", [UnsignedShort], vm_1))
        0x01, 0xf7, _, 0x2d -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x60, 0x01, _, 0x10 ->
          Ok(Item(tag, "Text Overlay Flag", [CodeString], vm_1))
        0x06, 0x01, _, 0x31 ->
          Ok(Item(tag, "Surview Length", [DecimalString], vm_1))
        0x00, 0xe1, _, 0x65 ->
          Ok(Item(tag, "Patient Data Modification Date", [LongString], vm_1))
        0x01, 0xf1, _, 0x44 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0xe1, _, 0x2a -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0xe3, _, 0x1f -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x01, 0xf1, _, 0x0a ->
          Ok(Item(tag, "Edge Enhancement Weight", [UnsignedShort], vm_1))
        0x01, 0xf7, _, 0x18 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x06, 0x01, _, 0x21 ->
          Ok(Item(tag, "Relative Table Height", [DecimalString], vm_1))
        0x01, 0xf7, _, 0x25 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x07, 0xa1, _, 0x40 ->
          Ok(Item(tag, "Tamar Study Body Part", [CodeString], vm_1))
        0x01, 0xf1, _, 0x28 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x06, 0x01, _, 0x00 ->
          Ok(Item(tag, "Implementation Version", [ShortString], vm_1))
        0x50, 0x01, _, 0x81 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0xe1, _, 0x31 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x01, 0xf7, _, 0x11 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x01, 0xf3, _, 0x04 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x01, 0xf7, _, 0x70 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0xe1, _, 0x60 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0xe1, _, 0x37 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x01, 0xf3, _, 0x12 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0xe1, _, 0x32 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_2))
        0x01, 0xf3, _, 0x02 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x01, 0xf7, _, 0x28 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x01, 0xf7, _, 0x26 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x01, 0xe1, _, 0x18 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x06, 0x01, _, 0x20 ->
          Ok(Item(tag, "Relative Table Position", [DecimalString], vm_1))
        0x01, 0xf3, _, 0x16 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x01, 0xf7, _, 0x2c -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x01, 0xf7, _, 0x16 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x07, 0xa3, _, 0x43 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x01, 0xf1, _, 0x4c -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x01, 0xf7, _, 0x29 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0xe1, _, 0x24 ->
          Ok(Item(tag, "Presentation Horizontal Invert", [CodeString], vm_1))
        0x07, 0xa1, _, 0x09 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x07, 0xa3, _, 0x9f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x07, 0xa3, _, 0x03 ->
          Ok(Item(tag, "Tamar Study Has Sticky Note", [CodeString], vm_1))
        0x00, 0xe1, _, 0x43 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x01, 0xf1, _, 0x01 ->
          Ok(Item(tag, "Acquisition Type", [CodeString], vm_1))
        0x06, 0x01, _, 0x71 ->
          Ok(Item(tag, "Batch Size", [DecimalString], vm_1))
        0x07, 0xa1, _, 0x85 ->
          Ok(Item(tag, "Tamar Translate Flags", [UnsignedLong], vm_1))
        0x01, 0xf3, _, 0x01 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x07, 0xa1, _, 0x43 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0xe1, _, 0x18 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0xe1, _, 0x22 ->
          Ok(Item(tag, "Presentation Relative Center", [DecimalString], vm_2))
        0x01, 0xf3, _, 0x14 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0xe1, _, 0x39 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x07, 0xa1, _, 0x11 ->
          Ok(Item(tag, "Tamar Compression Type", [CodeString], vm_1))
        0x01, 0xf7, _, 0x22 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x07, 0xa3, _, 0x99 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x01, 0xf1, _, 0x4d -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x7f, 0xdf, _, 0xf0 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x07, 0xa1, _, 0x01 ->
          Ok(Item(tag, "number of series in study", [UnsignedLong], vm_1))
        0x07, 0xa1, _, 0x75 -> Ok(Item(tag, "Unknown", [LongString], vm_2))
        0x00, 0xe1, _, 0x50 ->
          Ok(Item(tag, "Acquisition Duration", [DecimalString], vm_1))
        0x07, 0xa1, _, 0x08 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0xe3, _, 0x00 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x01, 0xf1, _, 0x26 -> Ok(Item(tag, "Pitch", [DecimalString], vm_1))
        0x07, 0xa3, _, 0x66 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0xe1, _, 0x21 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0xe1, _, 0x62 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x01, 0xf7, _, 0x1a -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x07, 0xa1, _, 0x04 ->
          Ok(Item(tag, "last update date", [UnsignedLong], vm_1))
        0x01, 0xf7, _, 0x14 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x01, 0xf1, _, 0x27 ->
          Ok(Item(tag, "Rotation Time", [DecimalString], vm_1))
        0x01, 0xf1, _, 0x0b -> Ok(Item(tag, "Unknown", [CodeString], vm_2))
        0x01, 0xf7, _, 0x1e -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x01, 0xf1, _, 0x43 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x01, 0xf1, _, 0x0d ->
          Ok(Item(tag, "Rotation Angle", [DecimalString], vm_1))
        0x01, 0xf7, _, 0x2e -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0xe1, _, 0x40 -> Ok(Item(tag, "Image Label", [ShortString], vm_1))
        0x01, 0xe1, _, 0x21 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x07, 0xa1, _, 0x12 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1_to_n))
        0x06, 0x01, _, 0x50 ->
          Ok(Item(tag, "Image View Type", [ShortString], vm_1))
        0x00, 0xe1, _, 0x25 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x01, 0xf1, _, 0x03 ->
          Ok(Item(tag, "Concurrent Slices Generation", [CodeString], vm_1))
        0x01, 0xf1, _, 0x40 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x01, 0xf7, _, 0x10 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x07, 0xa3, _, 0x05 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x01, 0xe1, _, 0x34 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x01, 0xf1, _, 0x02 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x01, 0xf1, _, 0x45 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x07, 0xa3, _, 0x01 ->
          Ok(Item(tag, "Tamar Exe Software Version", [LongString], vm_1))
        0x01, 0xf1, _, 0x4e -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x50, 0x01, _, 0x84 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x07, 0xa1, _, 0x10 ->
          Ok(Item(tag, "Tamar Software Version", [LongString], vm_1))
        0x07, 0xa1, _, 0x2b -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0xe1, _, 0xc2 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x07, 0xa1, _, 0x56 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x01, 0xf3, _, 0x13 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_2))
        0x01, 0xf1, _, 0x4a -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0xe1, _, 0x05 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x07, 0xa3, _, 0x34 ->
          Ok(Item(tag, "Tamar Study Age", [ShortString], vm_1))
        0x01, 0xf7, _, 0x1b -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x01, 0xf7, _, 0x1c -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0xe3, _, 0x18 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x01, 0xf3, _, 0x18 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x01, 0xf1, _, 0x32 ->
          Ok(Item(tag, "Image View Convention", [CodeString], vm_1))
        0x01, 0xf3, _, 0x19 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x01, 0xf7, _, 0x19 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x07, 0xa1, _, 0x03 ->
          Ok(Item(tag, "last update time", [UnsignedLong], vm_1))
        0x06, 0x01, _, 0x30 ->
          Ok(Item(tag, "Surview Direction", [ShortString], vm_1))
        0x01, 0xf7, _, 0x1f -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0xe1, _, 0x3f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x07, 0xa1, _, 0x18 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x07, 0xa1, _, 0x9f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x01, 0xf3, _, 0x24 -> Ok(Item(tag, "Unknown", [IntegerString], vm_2))
        0x01, 0xf1, _, 0x37 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x01, 0xf7, _, 0x23 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x01, 0xf7, _, 0x74 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x07, 0xa3, _, 0x55 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x01, 0xf3, _, 0x17 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x01, 0xf7, _, 0x27 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0xe1, _, 0x41 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x01, 0xf1, _, 0x05 ->
          Ok(Item(tag, "Reconstruction Arc", [DecimalString], vm_1))
        0x07, 0xa1, _, 0x14 ->
          Ok(Item(tag, "protection flag", [LongString], vm_1))
        0x00, 0xe1, _, 0x63 ->
          Ok(Item(tag, "Patient Language", [ShortString], vm_1))
        0x00, 0x03, _, 0x01 ->
          Ok(Item(tag, "Offset List Structure", [OtherWordString], vm_1))
        0x07, 0xa1, _, 0x0a ->
          Ok(Item(tag, "Tamar Compressed Pixel Data", [OtherByteString], vm_1))
        0x01, 0xf1, _, 0x36 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x50, 0x01, _, 0x71 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x01, 0xf7, _, 0x17 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0xe1, _, 0x30 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x07, 0xa1, _, 0x19 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0xe1, _, 0x14 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x01, 0xf7, _, 0x13 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x01, 0xf1, _, 0x53 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x07, 0xa3, _, 0x62 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x50, 0x01, _, 0x82 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_3))
        0x50, 0x01, _, 0x70 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0xe1, _, 0x07 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x01, 0xf7, _, 0x31 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x07, 0xa3, _, 0x06 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x07, 0xa1, _, 0x07 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_3))
        0x01, 0xf1, _, 0x04 ->
          Ok(Item(tag, "Angular Sampling Density", [CodeString], vm_1))
        0x01, 0xf1, _, 0x33 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x01, 0xf1, _, 0x49 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x01, 0xf7, _, 0x75 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x00, 0xe1, _, 0x61 ->
          Ok(Item(tag, "Protocol File Name", [LongString], vm_1))
        0x01, 0xf1, _, 0x08 ->
          Ok(Item(tag, "Acquisition Length", [DecimalString], vm_1))
        0x01, 0xf7, _, 0x30 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x01, 0xf1, _, 0x07 ->
          Ok(Item(tag, "Table Velocity", [DecimalString], vm_1))
        0x7f, 0xdf, _, 0xff -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0xe1, _, 0xa0 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0xe1, _, 0x51 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0xe1, _, 0x42 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0xe1, _, 0x06 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x01, 0xf7, _, 0x2b -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x07, 0xa1, _, 0x1c ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1_to_n))
        0x07, 0xa3, _, 0x9c -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x07, 0xa1, _, 0x13 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x07, 0xa1, _, 0x02 ->
          Ok(Item(tag, "number of images in series", [UnsignedLong], vm_1))
        0x01, 0xf1, _, 0x42 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x07, 0xa3, _, 0x63 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x01, 0xf3, _, 0x15 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x01, 0xf1, _, 0x30 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x01, 0xf1, _, 0x47 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x01, 0xf3, _, 0x03 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_2))
        0x01, 0xf1, _, 0x38 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x01, 0xf1, _, 0x4b -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x07, 0xa3, _, 0x64 ->
          Ok(Item(tag, "Unknown", [IntegerString], vm_1_to_n))
        0x07, 0xa1, _, 0x36 ->
          Ok(Item(tag, "Tamar Source Ae", [ApplicationEntity], vm_1))
        0x07, 0xa1, _, 0x0c -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x01, 0xf1, _, 0x46 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "ISI" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x01 ->
          Ok(Item(tag, "SIENET General Purpose IMGF", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS MR/LAST" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0xb3 ->
          Ok(Item(tag, "Number of Rejections", [IntegerString], vm_1))
        0x00, 0x29, _, 0x70 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xce -> Ok(Item(tag, "REST", [IntegerString], vm_1))
        0x00, 0x19, _, 0xd6 ->
          Ok(Item(tag, "Fourier Interpolation", [IntegerString], vm_1))
        0x00, 0x29, _, 0x60 ->
          Ok(Item(tag, "Window Maximum", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd9 ->
          Ok(Item(tag, "Unknown", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0xe2 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x83 ->
          Ok(Item(tag, "View Transform", [IntegerString], vm_1))
        0x00, 0x29, _, 0x20 -> Ok(Item(tag, "FP Max", [DecimalString], vm_1))
        0x00, 0x27, _, 0x15 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x29, _, 0x50 ->
          Ok(Item(tag, "Window Minimum", [DecimalString], vm_1))
        0x00, 0x27, _, 0x14 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x29, _, 0x80 ->
          Ok(Item(tag, "View Center", [IntegerString], vm_2))
        0x00, 0x41, _, 0x09 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x62 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0xb1 ->
          Ok(Item(tag, "Minimum RR Interval", [IntegerString], vm_1))
        0x00, 0x19, _, 0xe4 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x27, _, 0x00 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xb7 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0xe5 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x27, _, 0x13 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xf2 ->
          Ok(Item(tag, "WS Protocol String 3", [LongText], vm_1))
        0x00, 0x29, _, 0x82 -> Ok(Item(tag, "View Zoom", [IntegerString], vm_1))
        0x60, 0x01, _, 0x00 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x29, _, 0x81 -> Ok(Item(tag, "View Size", [IntegerString], vm_2))
        0x00, 0x19, _, 0xe1 ->
          Ok(Item(tag, "Prepulse Delay", [DecimalString], vm_1))
        0x00, 0x21, _, 0x10 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x72 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x21, _, 0x20 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0xe0 -> Ok(Item(tag, "Prepulse", [IntegerString], vm_1))
        0x00, 0x27, _, 0x16 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0xf3 ->
          Ok(Item(tag, "WS Protocol String 4", [LongText], vm_1))
        0x00, 0x21, _, 0x22 ->
          Ok(Item(tag, "Stack Radial Angle", [DecimalString], vm_1))
        0x00, 0x29, _, 0x30 ->
          Ok(Item(tag, "Scaled Minimum", [DecimalString], vm_1))
        0x00, 0x19, _, 0xc6 ->
          Ok(Item(tag, "Cycled Multiple Slice", [IntegerString], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "FP Min", [DecimalString], vm_1))
        0x00, 0x41, _, 0x07 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0xd5 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xc0 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x27, _, 0x11 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x09 ->
          Ok(Item(tag, "Main Magnetic Field", [DecimalString], vm_1))
        0x00, 0x29, _, 0x40 ->
          Ok(Item(tag, "Scaled Maximum", [DecimalString], vm_1))
        0x00, 0x21, _, 0x00 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x71 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb2 ->
          Ok(Item(tag, "Maximum RR Interval", [IntegerString], vm_1))
        0x00, 0x27, _, 0x12 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xb4 ->
          Ok(Item(tag, "Number of RR Intervals", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0xe3 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xf1 ->
          Ok(Item(tag, "WS Protocol String 2", [LongText], vm_1))
        0x00, 0x19, _, 0x0e ->
          Ok(Item(tag, "Flow Compensation", [IntegerString], vm_1))
        0x00, 0x21, _, 0x21 -> Ok(Item(tag, "Slice Gap", [DecimalString], vm_1))
        0x00, 0x29, _, 0x61 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0xf0 ->
          Ok(Item(tag, "WS Protocol String 1", [LongText], vm_1))
        0x00, 0x19, _, 0xb5 ->
          Ok(Item(tag, "Arrhythmia Rejection", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS DFR.01" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x10 ->
          Ok(Item(tag, "Graphic Evaluation Mask", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x11 ->
          Ok(Item(tag, "Type 1st Graphic Element", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x12 ->
          Ok(Item(tag, "Description 1st Graphic Element", [LongString], vm_1))
        0x00, 0x21, _, 0x13 ->
          Ok(Item(tag, "Type 2nd Graphic Element", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x14 ->
          Ok(Item(tag, "Description 2nd Graphic Element", [LongString], vm_1))
        0x00, 0x21, _, 0x15 ->
          Ok(Item(tag, "Type 3rd Graphic Element", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x16 ->
          Ok(Item(tag, "Description 3rd Graphic Element", [LongString], vm_1))
        0x00, 0x21, _, 0x17 ->
          Ok(Item(tag, "Type 4th Graphic Element", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x18 ->
          Ok(Item(tag, "Description 4th Graphic Element", [LongString], vm_1))
        0x00, 0x21, _, 0x19 ->
          Ok(Item(tag, "Type 5th Graphic Element", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x20 ->
          Ok(Item(tag, "Description 5th Graphic Element", [LongString], vm_1))
        0x00, 0x21, _, 0x21 ->
          Ok(Item(tag, "Type 6th Graphic Element", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x22 ->
          Ok(Item(tag, "Description 6th Graphic Element", [LongString], vm_1))
        0x00, 0x21, _, 0x23 ->
          Ok(Item(tag, "Type 7th Graphic Element", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x24 ->
          Ok(Item(tag, "Description 7th Graphic Element", [LongString], vm_1))
        0x00, 0x21, _, 0x25 ->
          Ok(Item(tag, "Type 8th Graphic Element", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x26 ->
          Ok(Item(tag, "Description 8th Graphic Element", [LongString], vm_1))
        0x00, 0x21, _, 0x27 ->
          Ok(Item(tag, "Type 9th Graphic Element", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x28 ->
          Ok(Item(tag, "Description 9th Graphic Element", [LongString], vm_1))
        0x00, 0x21, _, 0x29 ->
          Ok(Item(tag, "Type 10th Graphic Element", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x30 ->
          Ok(Item(tag, "Description 10th Graphic Element", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "VEPRO BROKER 1.0 DATA REPLACE" ->
      case g0, g1, e0, e1 {
        0x00, 0x57, _, 0x20 ->
          Ok(Item(tag, "Original data sequence", [Sequence], vm_1))
        0x00, 0x57, _, 0x30 ->
          Ok(Item(tag, "Replaced data sequence", [Sequence], vm_1))
        0x00, 0x57, _, 0x40 ->
          Ok(Item(tag, "Date of data replacement", [Date], vm_1))
        0x00, 0x57, _, 0x41 ->
          Ok(Item(tag, "Time of data replacement", [Time], vm_1))
        0x00, 0x57, _, 0x42 ->
          Ok(Item(tag, "Dicom receive node", [LongString], vm_1))
        0x00, 0x57, _, 0x43 ->
          Ok(Item(tag, "Application name", [LongString], vm_1))
        0x00, 0x57, _, 0x44 ->
          Ok(Item(tag, "Computer name", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CBT STARTING GANTRY ANGLE" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x82 ->
          Ok(Item(tag, "Starting Projection Angle", [DecimalString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "MedIns HP Extensions" ->
      case g0, g1, e0, e1 {
        0x54, 0x73, _, 0x03 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-CTBE Release 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x00 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x02 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x03 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x04 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x05 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x0b -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x0c -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x14 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x18 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x19 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x1a -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x1b -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x1c -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x1d -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CSA NON-IMAGE" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "CSA Data Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x09 ->
          Ok(Item(tag, "CSA Data Version", [LongString], vm_1))
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "CSA Data Info", [OtherByteString], vm_1))
        0x7f, 0xe1, _, 0x10 ->
          Ok(Item(tag, "CSA Data", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 034" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x02 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x03 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x04 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x05 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x06 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x07 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x08 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x09 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0a -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0b -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0c -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0d -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0e -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0f -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x10 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x21 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x22 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x23 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x24 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS DFR.01 SERVICE" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x10 -> Ok(Item(tag, "1 Plot", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x11 ->
          Ok(Item(tag, "Width 1 Plot", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x12 -> Ok(Item(tag, "2 Plot", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x13 ->
          Ok(Item(tag, "Width 2 Plot", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x20 ->
          Ok(Item(
            tag,
            "xCoordinate Region of Interest",
            [UnsignedShort],
            ValueMultiplicity(1, Some(5)),
          ))
        0x00, 0x21, _, 0x21 ->
          Ok(Item(
            tag,
            "yCoordinate Region of Interest",
            [UnsignedShort],
            ValueMultiplicity(1, Some(5)),
          ))
        0x00, 0x21, _, 0x22 ->
          Ok(Item(
            tag,
            "Width Region of Interest",
            [UnsignedShort],
            ValueMultiplicity(1, Some(5)),
          ))
        0x00, 0x21, _, 0x23 ->
          Ok(Item(
            tag,
            "Height Region of Interest",
            [UnsignedShort],
            ValueMultiplicity(1, Some(5)),
          ))
        _, _, _, _ -> Error(Nil)
      }
    "PMOD_1" ->
      case g0, g1, e0, e1 {
        0x00, 0x55, _, 0x01 ->
          Ok(Item(
            tag,
            "Frame Start Times Vector",
            [FloatingPointDouble],
            vm_1_to_n,
          ))
        0x00, 0x55, _, 0x02 ->
          Ok(Item(
            tag,
            "Frame Positions Vector",
            [FloatingPointDouble],
            vm_3_to_n,
          ))
        0x00, 0x55, _, 0x03 ->
          Ok(Item(
            tag,
            "Frame Orientations Vector",
            [FloatingPointDouble],
            ValueMultiplicity(6, None),
          ))
        0x00, 0x55, _, 0x04 ->
          Ok(Item(
            tag,
            "Frame Durations (ms) Vector",
            [FloatingPointDouble],
            vm_1_to_n,
          ))
        0x00, 0x55, _, 0x05 ->
          Ok(Item(
            tag,
            "Frame Rescale Slope Vector",
            [FloatingPointDouble],
            vm_1_to_n,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 109" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x00 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x0d, _, 0x01 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x0d, _, 0x02 -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x20, 0x0d, _, 0x03 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x0d, _, 0x04 -> Ok(Item(tag, "Unknown", [SignedLong], vm_4))
        0x20, 0x0d, _, 0x05 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_3))
        0x20, 0x0d, _, 0x06 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_3))
        0x20, 0x0d, _, 0x07 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x0d, _, 0x08 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x0d, _, 0x09 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x20, 0x0d, _, 0x0a -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x0b -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x20, 0x0d, _, 0x0c -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x0d -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x0d, _, 0x0e -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x0d, _, 0x0f -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x10 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x0d, _, 0x11 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x12 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS SCALED IMG PIX SPC" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x84 ->
          Ok(Item(tag, "Scaled Image Pixel Spacing", [DecimalString], vm_2))
        _, _, _, _ -> Error(Nil)
      }
    "TOSHIBA COMAPL OOG" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "COMAPL OOG Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x09 ->
          Ok(Item(tag, "COMAPL OOG Version", [LongString], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "", [LongString], vm_1))
        0x00, 0x29, _, 0x31 -> Ok(Item(tag, "", [LongString], vm_1_to_n))
        0x00, 0x29, _, 0x32 -> Ok(Item(tag, "", [UnsignedLong], vm_1_to_n))
        0x00, 0x29, _, 0x33 -> Ok(Item(tag, "", [UnsignedLong], vm_1_to_n))
        0x00, 0x29, _, 0x34 -> Ok(Item(tag, "", [CodeString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "Hologic" ->
      case g0, g1, e0, e1 {
        0x00, 0x11, _, 0x00 ->
          Ok(Item(tag, "Hx Questionnaire", [LongString], vm_1))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Image Analysis Data in XML", [LongText], vm_1))
        0x00, 0x23, _, 0x00 ->
          Ok(Item(tag, "Encoding Scheme Version", [LongString], vm_1))
        0x00, 0x23, _, 0x01 -> Ok(Item(tag, "P File Name", [LongString], vm_1))
        0x00, 0x23, _, 0x02 ->
          Ok(Item(tag, "P File Data", [OtherByteString], vm_1))
        0x00, 0x23, _, 0x03 ->
          Ok(Item(tag, "P File Length", [UnsignedLong], vm_1))
        0x00, 0x23, _, 0x04 ->
          Ok(Item(tag, "R File Data", [OtherByteString], vm_1))
        0x00, 0x23, _, 0x05 ->
          Ok(Item(tag, "R File Length", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CM VA0  ACQU" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Parameter File Name", [LongString], vm_1))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "Sequence File Name", [LongString], vm_1))
        0x00, 0x19, _, 0x12 ->
          Ok(Item(tag, "Sequence File Owner", [LongString], vm_1))
        0x00, 0x19, _, 0x13 ->
          Ok(Item(tag, "Sequence Description", [LongString], vm_1))
        0x00, 0x19, _, 0x14 ->
          Ok(Item(tag, "EPI File Name", [LongString], vm_1))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(tag, "Mode File Name", [LongString], vm_1))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "Convolution Kernel Comment 1", [LongString], vm_1))
        0x00, 0x19, _, 0x31 ->
          Ok(Item(tag, "Convolution Kernel Comment 2", [LongString], vm_1))
        0x00, 0x19, _, 0x32 ->
          Ok(Item(tag, "Convolution Kernel Comment 3", [LongString], vm_1))
        0x00, 0x19, _, 0x33 ->
          Ok(Item(tag, "Convolution Kernel Comment 4", [LongString], vm_1))
        0x00, 0x19, _, 0x34 ->
          Ok(Item(tag, "Convolution Kernel Comment 5", [LongString], vm_1))
        0x00, 0x19, _, 0x35 ->
          Ok(Item(tag, "Convolution Kernel Comment 6", [LongString], vm_1))
        0x00, 0x19, _, 0x36 ->
          Ok(Item(tag, "Convolution Kernel Comment 7", [LongString], vm_1))
        0x00, 0x19, _, 0x37 ->
          Ok(Item(tag, "Convolution Kernel Comment 8", [LongString], vm_1))
        0x00, 0x19, _, 0x38 ->
          Ok(Item(tag, "Convolution Kernel Comment 9", [LongString], vm_1))
        0x00, 0x19, _, 0x39 ->
          Ok(Item(tag, "Convolution Kernel Comment 10", [LongString], vm_1))
        0x00, 0x19, _, 0x3a ->
          Ok(Item(tag, "Reading Code RZ1 Comment 1", [LongString], vm_1))
        0x00, 0x19, _, 0x3b ->
          Ok(Item(tag, "Reading Code RZ1 Comment 2", [LongString], vm_1))
        0x00, 0x19, _, 0x3c ->
          Ok(Item(tag, "Reading Code RZ2 Comment 1", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "NUD_PRIVATE" ->
      case g0, g1, e0, e1 {
        0x77, 0x77, _, 0x02 -> Ok(Item(tag, "Interfile", [UnlimitedText], vm_1))
        0x77, 0x77, _, 0x05 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Agfa ADC NX" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x09 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x19, _, 0xf5 ->
          Ok(Item(tag, "Cassette Orientation", [CodeString], vm_1))
        0x00, 0x19, _, 0xf6 ->
          Ok(Item(tag, "Plate Sensitivity", [DecimalString], vm_1))
        0x00, 0x19, _, 0xf7 ->
          Ok(Item(tag, "Plate Erasability", [DecimalString], vm_1))
        0x00, 0x19, _, 0xf8 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0xfe -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS SIENET" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x01 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Private 3D" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x0a ->
          Ok(Item(tag, "Threedpr Xres Filtering Enabled", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x20 ->
          Ok(Item(tag, "Private Native Data Stream Array", [Sequence], vm_1))
        0x20, 0x0d, _, 0x08 ->
          Ok(Item(tag, "Threedpr Low Threshold", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x0e ->
          Ok(Item(
            tag,
            "Threedpr Reference Graphic Enabled",
            [IntegerString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x34 ->
          Ok(Item(
            tag,
            "Threedpr Trim Plane Equation",
            [FloatingPointDouble],
            vm_1,
          ))
        0x20, 0x0d, _, 0x1e ->
          Ok(Item(
            tag,
            "Threedpr Num Completed Trim Planes",
            [IntegerString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x09 ->
          Ok(Item(tag, "Threedpr Image Layout", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x37 ->
          Ok(Item(
            tag,
            "Threedpr Arbitrary Crop Dist From Center",
            [IntegerString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x06 ->
          Ok(Item(
            tag,
            "Threedpr Vision Vol Brightness",
            [FloatingPointDouble],
            vm_1,
          ))
        0x20, 0x0d, _, 0x1a ->
          Ok(Item(tag, "Threedpr Echo Smoothing", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x28 ->
          Ok(Item(tag, "Threedpr Zoom Factor", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x16 ->
          Ok(Item(
            tag,
            "Private Native Threed Data Sequence(1)",
            [Sequence],
            vm_1,
          ))
        0x20, 0x0d, _, 0x2b ->
          Ok(Item(tag, "Threedpr Rotation Angle Y", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x0f ->
          Ok(Item(tag, "Threedpr Map Inverted", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x04 ->
          Ok(Item(tag, "Threedpr Transparency", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x38 ->
          Ok(Item(
            tag,
            "Threedpr Arbitrary Crop Rotation Matrix",
            [FloatingPointDouble],
            vm_1,
          ))
        0x20, 0x0d, _, 0x42 ->
          Ok(Item(
            tag,
            "Threedpr Bondbox Graphic Enabled",
            [IntegerString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x10 ->
          Ok(Item(
            tag,
            "Threedpr Color Stream Display Enabled",
            [IntegerString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x41 ->
          Ok(Item(tag, "Threedpr Cursor Enabled", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x33 ->
          Ok(Item(
            tag,
            "Threedpr Vol Rotation Matrix",
            [FloatingPointDouble],
            vm_1,
          ))
        0x20, 0x0d, _, 0x1b ->
          Ok(Item(tag, "Threedpr Color Smoothing", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x36 ->
          Ok(Item(tag, "Threedpr Is Arbitrary Crop", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x32 ->
          Ok(Item(
            tag,
            "Threedpr Mpr Rotation Matrix",
            [FloatingPointDouble],
            vm_1,
          ))
        0x20, 0x0d, _, 0x21 ->
          Ok(Item(tag, "Threedpr Wall Filter", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x15 ->
          Ok(Item(
            tag,
            "Vdb Param Echo 3d Estimate Dimension(2)",
            [LongString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x39 ->
          Ok(Item(tag, "Threedpr Color Gain", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x2d ->
          Ok(Item(tag, "Threedpr View Translation", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x02 ->
          Ok(Item(tag, "Threedpr Echo Vision Setting", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x31 ->
          Ok(Item(
            tag,
            "Threedpr Box Crop Max Point",
            [FloatingPointDouble],
            vm_1,
          ))
        0x20, 0x0d, _, 0x29 ->
          Ok(Item(
            tag,
            "Threedpr Color Write Priority",
            [FloatingPointDouble],
            vm_1,
          ))
        0x20, 0x0d, _, 0x11 ->
          Ok(Item(
            tag,
            "Threedpr Echo Stream Display Enabled",
            [IntegerString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x40 ->
          Ok(Item(
            tag,
            "Threedpr Color Wall Filter Index",
            [IntegerString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x24 ->
          Ok(Item(tag, "Threedpr Gain", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x23 ->
          Ok(Item(tag, "Threedpr Baseline", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x18 ->
          Ok(Item(
            tag,
            "Vdb Param Echo 3d Estimate Apex Position (2)",
            [LongString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x0c ->
          Ok(Item(tag, "Threedpr Box Outlined Enabled", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x14 ->
          Ok(Item(
            tag,
            "Vdb Param Color 3d Estimate Color Offset",
            [LongString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x25 ->
          Ok(Item(tag, "Threedpr Compress", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x2a ->
          Ok(Item(tag, "Threedpr Rotation Angle X", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x2c ->
          Ok(Item(tag, "Threedpr Data Voi Center", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x0b ->
          Ok(Item(
            tag,
            "Threedpr Echo Twod Chroma Map Enabled",
            [IntegerString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x12 ->
          Ok(Item(
            tag,
            "Vdb Param Color 3d Estimate Scale(2)",
            [LongString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x03 ->
          Ok(Item(tag, "Threedpr Color Vision Setting", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x26 ->
          Ok(Item(tag, "Threedpr Light Brightness", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x0d ->
          Ok(Item(tag, "Threedpr Smoothing Enabled", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x13 ->
          Ok(Item(
            tag,
            "Vdb Param Color 3d Estimate Apex Position (1)",
            [LongString],
            vm_1,
          ))
        0x20, 0x0d, _, 0x2e ->
          Ok(Item(
            tag,
            "Threedpr Data Voi Min Point",
            [FloatingPointDouble],
            vm_1,
          ))
        0x20, 0x0d, _, 0x2f ->
          Ok(Item(
            tag,
            "Threedpr Data Voi Max Point",
            [FloatingPointDouble],
            vm_1,
          ))
        0x20, 0x0d, _, 0x1f ->
          Ok(Item(tag, "Threedpr Depth", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x35 ->
          Ok(Item(tag, "Threedpr Subpage Data Version", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x27 ->
          Ok(Item(
            tag,
            "Threedpr Elevation Scale Factor",
            [FloatingPointDouble],
            vm_1,
          ))
        0x20, 0x0d, _, 0x17 ->
          Ok(Item(tag, "Threedpr Basic Vol Brightness", [IntegerString], vm_1))
        0x20, 0x0d, _, 0x30 ->
          Ok(Item(
            tag,
            "Threedpr Box Crop Min Point",
            [FloatingPointDouble],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS PI ALIGNMENT IMAGE" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x94 ->
          Ok(Item(tag, "Alignment Offset Valid Flag", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CBT PROJECTION GANTRY POSITIONS" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x86 ->
          Ok(Item(tag, "Gantry Positions", [DecimalString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "DIGISCAN IMAGE" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x31 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x29, _, 0x32 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x29, _, 0x33 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x34 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "CARDIO-D.R. 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 ->
          Ok(Item(tag, "File Location", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0x01 -> Ok(Item(tag, "File Size", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0x40 ->
          Ok(Item(tag, "Alternate Image Sequence", [Sequence], vm_1))
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "Image Blanking Shape", [CodeString], vm_1_to_2))
        0x00, 0x19, _, 0x02 ->
          Ok(Item(
            tag,
            "Image Blanking Left Vertical Edge",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x04 ->
          Ok(Item(
            tag,
            "Image Blanking Right Vertical Edge",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x06 ->
          Ok(Item(
            tag,
            "Image Blanking Upper Horizontal Edge",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x08 ->
          Ok(Item(
            tag,
            "Image Blanking Lower Horizontal Edge",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(
            tag,
            "Center Of Circular Image Blanking",
            [IntegerString],
            vm_2,
          ))
        0x00, 0x19, _, 0x12 ->
          Ok(Item(
            tag,
            "Radius Of Circular Image Blanking",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "Maximum Frame Size", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x13 ->
          Ok(Item(tag, "Image Sequence Number", [IntegerString], vm_1))
        0x00, 0x29, _, 0x00 ->
          Ok(Item(tag, "Standard Edge Enhancement Sequence", [Sequence], vm_1))
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Convolution Kernel Size", [UnsignedShort], vm_2))
        0x00, 0x29, _, 0x02 ->
          Ok(Item(
            tag,
            "Convolution Kernel Coefficients",
            [UnsignedShort],
            vm_1_to_n,
          ))
        0x00, 0x29, _, 0x03 ->
          Ok(Item(tag, "Edge Enhancement Gain", [FloatingPointSingle], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS SC IMG SID" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x85 ->
          Ok(Item(tag, "Non-RT Image SID", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CBT ARC INCREMENT" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x84 ->
          Ok(Item(tag, "Arc Increment", [IntegerString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS-MR-1" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "Chemical Shift Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x12 ->
          Ok(Item(tag, "Phase Number (Philips)", [IntegerString], vm_1))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Reconstruction Number", [IntegerString], vm_1))
        0x00, 0x21, _, 0x02 ->
          Ok(Item(tag, "Slice Number", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS FP Alignment Calibration Date / Time" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x95 ->
          Ok(Item(
            tag,
            "Flat Panel Alignment last calibration Date and Time",
            [DateTime],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "SCHICK TECHNOLOGIES - Viewset Creator ID" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x01 ->
          Ok(Item(tag, "Instance UID", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x02 -> Ok(Item(tag, "Name", [LongString], vm_1))
        0x00, 0x09, _, 0x03 -> Ok(Item(tag, "Sequence", [Sequence], vm_1))
        0x00, 0x09, _, 0x04 -> Ok(Item(tag, "Mode", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0x05 -> Ok(Item(tag, "Type", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "QUASAR_INTERNAL_USE" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 ->
          Ok(Item(tag, "WholeBody Spots", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x07 ->
          Ok(Item(tag, "Angle Vector", [UnsignedShort], vm_1_to_n))
        0x00, 0x09, _, 0x44 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x37, _, 0x70 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x41 -> Ok(Item(tag, "Unknown", [Time], vm_1))
        0x00, 0x09, _, 0x11 ->
          Ok(Item(tag, "Worklist Flag", [UnsignedShort], vm_1))
        0x00, 0x37, _, 0x50 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x1d -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x14 -> Ok(Item(tag, "Sequence Name", [ShortText], vm_1))
        0x00, 0x09, _, 0x23 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x37, _, 0x1b -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x18 ->
          Ok(Item(tag, "Begin Index Vector", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0x1a ->
          Ok(Item(tag, "Raw Time Vector", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0x15 ->
          Ok(Item(tag, "Avr RR Time Vector", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0x42 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x19 ->
          Ok(Item(tag, "End Index Vector", [UnsignedLong], vm_1))
        0x00, 0x37, _, 0x40 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x40 -> Ok(Item(tag, "Unknown", [Date], vm_1))
        0x00, 0x09, _, 0x03 ->
          Ok(Item(tag, "Time Vector", [UnsignedLong], vm_1_to_n))
        0x00, 0x09, _, 0x17 ->
          Ok(Item(tag, "High Limit Vector", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0x01 ->
          Ok(Item(tag, "Rate Vector", [UnsignedLong], vm_1_to_n))
        0x00, 0x37, _, 0x30 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x39 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x00, 0x09, _, 0x22 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x09, _, 0x16 ->
          Ok(Item(tag, "Low Limit Vector", [UnsignedLong], vm_1))
        0x00, 0x09, _, 0x13 -> Ok(Item(tag, "Sequence Type", [ShortText], vm_1))
        0x00, 0x09, _, 0x12 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x37, _, 0x10 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x09, _, 0x08 ->
          Ok(Item(tag, "Camera Shape", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x02 ->
          Ok(Item(tag, "Count Vector", [UnsignedLong], vm_1_to_n))
        0x00, 0x37, _, 0x60 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x1b ->
          Ok(Item(tag, "Image Type String", [LongString], vm_1))
        0x00, 0x09, _, 0x1e -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "DR Systems, Inc." ->
      case g0, g1, e0, e1 {
        0x44, 0x53, _, 0x01 -> Ok(Item(tag, "DR Exam ID", [LongString], vm_1))
        0x44, 0x53, _, 0x02 ->
          Ok(Item(tag, "DR Image Type", [LongString], vm_1))
        0x44, 0x53, _, 0x04 -> Ok(Item(tag, "DR File Type", [LongString], vm_1))
        0x44, 0x53, _, 0x05 ->
          Ok(Item(tag, "DR File Suffix", [LongString], vm_1))
        0x44, 0x53, _, 0x0a ->
          Ok(Item(tag, "DR Annotation Type", [Unknown], vm_1))
        0x44, 0x53, _, 0x0c ->
          Ok(Item(tag, "DR Original Instance UID Sequence", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS AE TITLE" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x79 -> Ok(Item(tag, "AE Title", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Silhouette Line V1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x11 -> Ok(Item(tag, "Line Name", [IntegerString], vm_1))
        0x00, 0x29, _, 0x12 -> Ok(Item(tag, "Line Name Font", [LongText], vm_1))
        0x00, 0x29, _, 0x13 ->
          Ok(Item(tag, "Line Name Display", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x14 ->
          Ok(Item(tag, "Line Normal Color", [LongText], vm_1))
        0x00, 0x29, _, 0x15 -> Ok(Item(tag, "Line Type", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x16 ->
          Ok(Item(tag, "Line Thickness", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x17 -> Ok(Item(tag, "Line Style", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x18 ->
          Ok(Item(tag, "Line Dash Length", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x19 ->
          Ok(Item(tag, "Line Interactivity", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "Line Measurement Color", [LongText], vm_1))
        0x00, 0x29, _, 0x21 ->
          Ok(Item(tag, "Line Measurement Font", [LongText], vm_1))
        0x00, 0x29, _, 0x22 ->
          Ok(Item(tag, "Line Measurement Dash Length", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x23 ->
          Ok(Item(tag, "Line Point Space", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x24 ->
          Ok(Item(tag, "Line Points", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x25 ->
          Ok(Item(tag, "Line Control Point Size", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x26 ->
          Ok(Item(tag, "Line Control Point Space", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x27 ->
          Ok(Item(tag, "Line Control Points", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x28 -> Ok(Item(tag, "Line Label", [LongText], vm_1))
        0x00, 0x29, _, 0x29 ->
          Ok(Item(tag, "Line Don't Save", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "MeVis eD: Geometry Information" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x11 ->
          Ok(Item(tag, "GeoScannerOrigin", [Unknown], vm_1))
        0x00, 0x09, _, 0x21 -> Ok(Item(tag, "SlicesID", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS TABLE OFFSET" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x78 -> Ok(Item(tag, "Offset", [DecimalString], vm_3))
        _, _, _, _ -> Error(Nil)
      }
    "AGFA_ADC_Compact" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x05 ->
          Ok(Item(tag, "Data stream from cassette", [ShortText], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Private Identification Code", [LongString], vm_1))
        0x00, 0x19, _, 0x30 ->
          Ok(Item(tag, "Set of destination types", [ShortText], vm_1))
        0x00, 0x19, _, 0x40 ->
          Ok(Item(tag, "Set of destination Ids", [ShortText], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "Set of processing codes", [ShortText], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Number of series in study", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x61 ->
          Ok(Item(tag, "Session Number", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(tag, "ID station name", [ShortString], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Number of images in series", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x71 ->
          Ok(Item(tag, "Break condition", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x72 ->
          Ok(Item(tag, "Wait (or Hold) flag", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x73 ->
          Ok(Item(tag, "ScanRes flag", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x74 ->
          Ok(Item(tag, "Operation code", [ShortString], vm_1))
        0x00, 0x19, _, 0x95 ->
          Ok(Item(tag, "Image quality", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AMI ImageContextExt_01" ->
      case g0, g1, e0, e1 {
        0x31, 0x07, _, 0xa0 ->
          Ok(Item(tag, "AMI Window Function (RET)", [CodeString], vm_1))
        0x31, 0x07, _, 0xb0 ->
          Ok(Item(tag, "AMI Window Slope (RET)", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Varian Medical Systems VISION 3253" ->
      case g0, g1, e0, e1 {
        0x32, 0x53, _, 0x00 -> Ok(Item(tag, "XML stream.", [Unknown], vm_1))
        0x32, 0x53, _, 0x01 ->
          Ok(Item(tag, "Data length of the XML stream", [Unknown], vm_1))
        0x32, 0x53, _, 0x02 ->
          Ok(Item(tag, "Extended Interface Format tag", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-Private-DCI Release 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x10 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x11 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x12 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x13 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x14 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x15 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x16 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x19, _, 0x17 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_SENO_02" ->
      case g0, g1, e0, e1 {
        0x00, 0x45, _, 0x0c ->
          Ok(Item(tag, "Integration Time", [DecimalString], vm_1))
        0x00, 0x45, _, 0x3f ->
          Ok(Item(tag, "Vignette Pixel Data", [OtherByteString], vm_1))
        0x00, 0x45, _, 0x3e ->
          Ok(Item(tag, "Vignette Pixel Representation", [UnsignedShort], vm_1))
        0x00, 0x45, _, 0x21 ->
          Ok(Item(tag, "Mean Of Log Region Gray Levels", [DecimalString], vm_1))
        0x00, 0x45, _, 0x09 ->
          Ok(Item(tag, "Real Magnification Factor", [DecimalString], vm_1))
        0x00, 0x45, _, 0x3c ->
          Ok(Item(tag, "Vignette Bits Stored", [UnsignedShort], vm_1))
        0x00, 0x45, _, 0x20 ->
          Ok(Item(tag, "Estimated Anat mean", [DecimalString], vm_1))
        0x00, 0x45, _, 0x25 ->
          Ok(Item(
            tag,
            "Standard Deviation Of Log Region Gray Levels",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x45, _, 0x04 -> Ok(Item(tag, "AES", [CodeString], vm_1))
        0x00, 0x45, _, 0x59 -> Ok(Item(tag, "Threshold", [IntegerString], vm_1))
        0x00, 0x45, _, 0x27 ->
          Ok(Item(tag, "Set Number", [IntegerString], vm_1))
        0x00, 0x45, _, 0x64 ->
          Ok(Item(tag, "Segm Threshold", [IntegerString], vm_1))
        0x00, 0x45, _, 0x06 ->
          Ok(Item(tag, "Stereo angle", [DecimalString], vm_1))
        0x00, 0x45, _, 0x1e ->
          Ok(Item(tag, "Mean Of Offset Gray Levels", [DecimalString], vm_1))
        0x00, 0x45, _, 0x3d ->
          Ok(Item(tag, "Vignette High Bit", [UnsignedShort], vm_1))
        0x00, 0x45, _, 0x2b -> Ok(Item(tag, "2DLocY", [IntegerString], vm_1))
        0x00, 0x45, _, 0x14 ->
          Ok(Item(tag, "Pixel Pitch Microns", [DecimalString], vm_1))
        0x00, 0x45, _, 0x2a -> Ok(Item(tag, "2DLocX", [IntegerString], vm_1))
        0x00, 0x45, _, 0x65 ->
          Ok(Item(tag, "Detector Entrance Dose", [IntegerString], vm_1))
        0x00, 0x45, _, 0x28 ->
          Ok(Item(tag, "WindowingType (LINEAR or GAMMA)", [CodeString], vm_1))
        0x00, 0x45, _, 0x12 ->
          Ok(Item(tag, "Receptor Size Pixels X and Y", [IntegerString], vm_2))
        0x00, 0x45, _, 0x13 -> Ok(Item(tag, "Screen", [ShortText], vm_1))
        0x00, 0x45, _, 0x23 ->
          Ok(Item(
            tag,
            "Standard Deviation Of Corrected Gray Levels",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x45, _, 0x11 ->
          Ok(Item(tag, "Receptor Size cm X and Y", [DecimalString], vm_2))
        0x00, 0x45, _, 0x56 ->
          Ok(Item(tag, "Noise Reduction Sensitivity", [DecimalString], vm_1))
        0x00, 0x45, _, 0x1b ->
          Ok(Item(tag, "Clinical View", [LongString], vm_1))
        0x00, 0x45, _, 0x22 ->
          Ok(Item(
            tag,
            "Standard Deviation Of Raw Gray Levels",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x45, _, 0x1d ->
          Ok(Item(tag, "Mean Of Raw Gray Levels", [DecimalString], vm_1))
        0x00, 0x45, _, 0x15 ->
          Ok(Item(tag, "Pixel Depth Bits", [IntegerString], vm_1))
        0x00, 0x45, _, 0x57 ->
          Ok(Item(tag, "Noise Reduction Threshold", [DecimalString], vm_1))
        0x00, 0x45, _, 0x50 ->
          Ok(Item(tag, "SC Instance UID", [UniqueIdentifier], vm_1))
        0x00, 0x45, _, 0x3a ->
          Ok(Item(tag, "Vignette Columns", [UnsignedShort], vm_1))
        0x00, 0x45, _, 0x72 ->
          Ok(Item(tag, "Image Crop point", [DecimalString], vm_2))
        0x00, 0x45, _, 0x61 ->
          Ok(Item(tag, "Breast ROI Y", [IntegerString], vm_4))
        0x00, 0x45, _, 0x66 ->
          Ok(Item(
            tag,
            "Asymmetrical Collimation Information",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x45, _, 0x29 ->
          Ok(Item(tag, "Windowing parameters", [DecimalString], vm_2))
        0x00, 0x45, _, 0x3b ->
          Ok(Item(tag, "Vignette Bits Allocated", [UnsignedShort], vm_1))
        0x00, 0x45, _, 0x51 ->
          Ok(Item(tag, "SC series UID", [UniqueIdentifier], vm_1))
        0x00, 0x45, _, 0x1f ->
          Ok(Item(tag, "Mean Of Corrected Gray Levels", [DecimalString], vm_1))
        0x00, 0x45, _, 0x62 ->
          Ok(Item(tag, "User Window Center", [IntegerString], vm_1))
        0x00, 0x45, _, 0x71 ->
          Ok(Item(tag, "STX buffer", [OtherByteString], vm_1))
        0x00, 0x45, _, 0x54 -> Ok(Item(tag, "Exponent", [DecimalString], vm_1))
        0x00, 0x45, _, 0x39 ->
          Ok(Item(tag, "Vignette Rows", [UnsignedShort], vm_1))
        0x00, 0x45, _, 0x0d ->
          Ok(Item(tag, "ROI Origin X and Y", [DecimalString], vm_1))
        0x00, 0x45, _, 0x52 ->
          Ok(Item(tag, "Raw Diagnostic Low", [IntegerString], vm_1))
        0x00, 0x45, _, 0x58 -> Ok(Item(tag, "mu", [DecimalString], vm_1))
        0x00, 0x45, _, 0x53 ->
          Ok(Item(tag, "Raw Diagnostic High", [IntegerString], vm_1))
        0x00, 0x45, _, 0x63 ->
          Ok(Item(tag, "User Window Width", [IntegerString], vm_1))
        0x00, 0x45, _, 0x55 ->
          Ok(Item(tag, "A Coefficients", [IntegerString], vm_1))
        0x00, 0x45, _, 0x0b ->
          Ok(Item(tag, "Senograph Type", [CodeString], vm_1))
        0x00, 0x45, _, 0x60 ->
          Ok(Item(tag, "Breast ROI X", [IntegerString], vm_4))
        0x00, 0x45, _, 0x26 ->
          Ok(Item(tag, "MAO Buffer", [OtherByteString], vm_1))
        0x00, 0x45, _, 0x16 ->
          Ok(Item(tag, "Binning Factor X and Y", [IntegerString], vm_2))
        0x00, 0x45, _, 0x49 ->
          Ok(Item(tag, "Radiological Thickness", [DecimalString], vm_1))
        0x00, 0x45, _, 0x24 ->
          Ok(Item(
            tag,
            "Standard Deviation Of Region Gray Levels",
            [DecimalString],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "MeVis BreastCare" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x71, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CT VA0  IDE" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 ->
          Ok(Item(tag, "SOMATOM Software Name", [LongString], vm_1))
        0x00, 0x09, _, 0x30 ->
          Ok(Item(tag, "Data Set Subtype 1", [CodeString], vm_1))
        0x00, 0x09, _, 0x31 ->
          Ok(Item(tag, "Data Set Subtype 2", [ShortString], vm_1))
        0x00, 0x09, _, 0x32 ->
          Ok(Item(tag, "Data Set Subtype 3", [ShortString], vm_1))
        0x00, 0x09, _, 0x33 ->
          Ok(Item(tag, "Data Set Subtype 4", [ShortString], vm_1))
        0x00, 0x09, _, 0x34 ->
          Ok(Item(tag, "Data Set Subtype 5", [ShortString], vm_1))
        0x00, 0x09, _, 0x40 ->
          Ok(Item(tag, "Directory Text", [LongString], vm_1))
        0x00, 0x09, _, 0x42 ->
          Ok(Item(tag, "Exposure Time Text", [LongString], vm_1))
        0x00, 0x09, _, 0x50 -> Ok(Item(tag, "Scan Date", [Date], vm_1))
        0x00, 0x09, _, 0x51 -> Ok(Item(tag, "Scan Time", [Time], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS MR R5.5/PART" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "Field of View", [DecimalString], vm_2))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_DL_PATNT_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x11, _, 0x80 ->
          Ok(Item(tag, "Patient Instance Uid", [UniqueIdentifier], vm_1))
        0x00, 0x11, _, 0x81 ->
          Ok(Item(tag, "Last Study Number", [IntegerString], vm_1))
        0x00, 0x11, _, 0x82 ->
          Ok(Item(tag, "Patient Repaired", [CodeString], vm_1))
        0x00, 0x11, _, 0x83 ->
          Ok(Item(tag, "Lock Demographics", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "EMAGEON JPEG2K INFO" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x09, _, 0x01 -> Ok(Item(tag, "Unknown", [DateTime], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "QCA" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 ->
          Ok(Item(tag, "Analysis Type", [CodeString], vm_1))
        0x00, 0x09, _, 0x04 -> Ok(Item(tag, "Segment Name", [LongString], vm_1))
        0x00, 0x09, _, 0x12 ->
          Ok(Item(tag, "Pre Catheter size", [DecimalString], vm_1))
        0x00, 0x09, _, 0x13 ->
          Ok(Item(tag, "Pre Reference Diameter", [DecimalString], vm_1))
        0x00, 0x09, _, 0x14 ->
          Ok(Item(tag, "Pre Minimum Lumen Diameter", [DecimalString], vm_1))
        0x00, 0x09, _, 0x15 ->
          Ok(Item(tag, "Pre Average Diameter", [DecimalString], vm_1))
        0x00, 0x09, _, 0x16 ->
          Ok(Item(tag, "Pre Stenosis Length", [DecimalString], vm_1))
        0x00, 0x09, _, 0x17 ->
          Ok(Item(tag, "Pre Stenosis %", [DecimalString], vm_1))
        0x00, 0x09, _, 0x18 ->
          Ok(Item(tag, "Pre Geometric Area Reduction %", [DecimalString], vm_1))
        0x00, 0x09, _, 0x22 ->
          Ok(Item(tag, "Post Catheter Size", [DecimalString], vm_1))
        0x00, 0x09, _, 0x23 ->
          Ok(Item(tag, "Post Reference Diameter", [DecimalString], vm_1))
        0x00, 0x09, _, 0x24 ->
          Ok(Item(tag, "Post Minimum Lumen Diameter", [DecimalString], vm_1))
        0x00, 0x09, _, 0x25 ->
          Ok(Item(tag, "Post Average Diameter", [DecimalString], vm_1))
        0x00, 0x09, _, 0x26 ->
          Ok(Item(tag, "Post Stenosis Length", [DecimalString], vm_1))
        0x00, 0x09, _, 0x27 ->
          Ok(Item(tag, "Post Stenosis %", [DecimalString], vm_1))
        0x00, 0x09, _, 0x28 ->
          Ok(Item(tag, "Post Geometric Area Reduction %", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "VEPRO VIM 5.0 DATA" ->
      case g0, g1, e0, e1 {
        0x00, 0x55, _, 0x10 ->
          Ok(Item(tag, "VIFHEADER2", [OtherByteString], vm_1))
        0x00, 0x55, _, 0x20 ->
          Ok(Item(tag, "VIMDATA2", [OtherByteString], vm_1))
        0x00, 0x55, _, 0x30 ->
          Ok(Item(tag, "ICONDATA2", [OtherByteString], vm_1))
        0x00, 0x55, _, 0x51 ->
          Ok(Item(tag, "VEPRO UID ??", [UniqueIdentifier], vm_1))
        0x00, 0x55, _, 0x65 -> Ok(Item(tag, "??", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "DIDI TO PCR 1.1" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Original Filename", [LongString], vm_1))
        0x00, 0x19, _, 0xb3 ->
          Ok(Item(tag, "Key Percentile 2", [IntegerString], vm_1))
        0x00, 0x19, _, 0xa3 ->
          Ok(Item(tag, "Fixed Brightness", [DecimalString], vm_1))
        0x00, 0x89, _, 0x10 ->
          Ok(Item(tag, "Stamp Image Sequence", [Sequence], vm_1))
        0x00, 0x19, _, 0xaf -> Ok(Item(tag, "Smooth Gain", [LongString], vm_1))
        0x00, 0x19, _, 0xb1 ->
          Ok(Item(tag, "Measure Field 2", [LongString], vm_1))
        0x00, 0x19, _, 0x82 -> Ok(Item(tag, "Stitching", [LongText], vm_1))
        0x00, 0x19, _, 0xa0 -> Ok(Item(tag, "Version", [LongString], vm_1))
        0x00, 0x19, _, 0xa6 ->
          Ok(Item(tag, "Structure Boost", [DecimalString], vm_1))
        0x00, 0x19, _, 0x8c -> Ok(Item(tag, "Print Marker", [LongString], vm_1))
        0x00, 0x19, _, 0xa9 ->
          Ok(Item(tag, "Noise Dose Limit", [DecimalString], vm_1))
        0x00, 0x19, _, 0xae ->
          Ok(Item(tag, "Structure Boost Offset", [DecimalString], vm_1))
        0x00, 0x19, _, 0x8f ->
          Ok(Item(tag, "Processing Category", [LongString], vm_1))
        0x00, 0x19, _, 0xac ->
          Ok(Item(tag, "Weak Contrast Limit", [DecimalString], vm_1))
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "Post Mode String", [LongText], vm_1))
        0x00, 0x19, _, 0xaa ->
          Ok(Item(tag, "Noise Dose Step", [DecimalString], vm_1))
        0x00, 0x19, _, 0xb0 ->
          Ok(Item(tag, "Measure Field 1", [LongString], vm_1))
        0x00, 0x19, _, 0x23 ->
          Ok(Item(tag, "PCR Print Scale", [DecimalString], vm_1))
        0x00, 0x19, _, 0x10 -> Ok(Item(tag, "Image Header", [LongText], vm_1))
        0x00, 0x19, _, 0x26 ->
          Ok(Item(tag, "PCR Film Layout Position", [IntegerString], vm_1))
        0x00, 0x19, _, 0x24 ->
          Ok(Item(tag, "PCR Print Job End", [ShortText], vm_1))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "Unprocessed Flag", [LongString], vm_1))
        0x00, 0x19, _, 0xad ->
          Ok(Item(tag, "Strong Contrast Limit", [DecimalString], vm_1))
        0x00, 0x19, _, 0x27 ->
          Ok(Item(tag, "PCR Print Report Name", [ShortText], vm_1))
        0x00, 0x19, _, 0x8a ->
          Ok(Item(tag, "Collimator X", [IntegerString], vm_1))
        0x00, 0x19, _, 0xa5 -> Ok(Item(tag, "Contrast Balance", [Date], vm_1))
        0x00, 0x19, _, 0xa2 ->
          Ok(Item(tag, "Abdomen Brightness", [DecimalString], vm_1))
        0x00, 0x19, _, 0x71 ->
          Ok(Item(tag, "RAD Protocol Medium", [ShortText], vm_1))
        0x00, 0x19, _, 0x92 ->
          Ok(Item(
            tag,
            "Destination Postprocessing Function",
            [LongString],
            vm_1,
          ))
        0x00, 0x19, _, 0x89 ->
          Ok(Item(tag, "Exposure Index", [IntegerString], vm_1))
        0x00, 0x19, _, 0xb6 -> Ok(Item(tag, "Gamma", [DecimalString], vm_1))
        0x00, 0x19, _, 0x01 -> Ok(Item(tag, "Post Data", [LongText], vm_1))
        0x00, 0x19, _, 0xb2 ->
          Ok(Item(tag, "Key Percentile 1", [IntegerString], vm_1))
        0x00, 0x19, _, 0xa4 ->
          Ok(Item(tag, "Detail Contrast", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa7 ->
          Ok(Item(tag, "Structure Preference", [DecimalString], vm_1))
        0x00, 0x19, _, 0x8b ->
          Ok(Item(tag, "Collimator Y", [IntegerString], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "RAD Protocol Printer", [ShortText], vm_1))
        0x00, 0x19, _, 0xb4 ->
          Ok(Item(tag, "Density LUT", [IntegerString], vm_1))
        0x00, 0x19, _, 0xa8 ->
          Ok(Item(tag, "Noise Robustness", [DecimalString], vm_1))
        0x00, 0x19, _, 0x22 -> Ok(Item(tag, "Route AET", [LongString], vm_1))
        0x00, 0x19, _, 0xa1 -> Ok(Item(tag, "Ranging Mode", [LongString], vm_1))
        0x00, 0x19, _, 0x25 ->
          Ok(Item(tag, "PCR No Film Copies", [IntegerString], vm_1))
        0x00, 0x19, _, 0x8e ->
          Ok(Item(tag, "Acqd Sensitivity", [LongString], vm_1))
        0x00, 0x19, _, 0x81 -> Ok(Item(tag, "Filter Type", [ShortString], vm_1))
        0x00, 0x19, _, 0x91 ->
          Ok(Item(tag, "Key Values", [DecimalString], vm_2))
        0x00, 0x19, _, 0x8d -> Ok(Item(tag, "RGDV Name", [LongString], vm_1))
        0x00, 0x19, _, 0xb5 ->
          Ok(Item(tag, "Brightness", [DecimalString], vm_1))
        0x00, 0x19, _, 0xab ->
          Ok(Item(tag, "Noise Frequency Limit", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CM VA0  COAD" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x3d ->
          Ok(Item(tag, "Reading Code RZ2 Comment 2", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "DLX_ANNOT_01" ->
      case g0, g1, e0, e1 {
        0x70, _, _, 0x04 -> Ok(Item(tag, "Text_annotation", [ShortText], vm_1))
        0x70, _, _, 0x05 -> Ok(Item(tag, "Box", [IntegerString], vm_2))
        0x70, _, _, 0x07 -> Ok(Item(tag, "Arrow end", [IntegerString], vm_2))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS SMS-AX  ACQ 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x12 ->
          Ok(Item(tag, "SH_STPAR", [OtherByteString], vm_1_to_n))
        0x00, 0x21, _, 0x0d ->
          Ok(Item(tag, "Dyna Angles", [SignedShort], vm_2_to_n))
        0x00, 0x21, _, 0x30 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x21, _, 0x58 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x21, _, 0x07 ->
          Ok(Item(tag, "Skin Dose Accumulation", [SignedLong], vm_1))
        0x00, 0x21, _, 0x16 ->
          Ok(Item(tag, "DR Single Flag", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x1e ->
          Ok(Item(tag, "EVE", [UnsignedShort], ValueMultiplicity(8, Some(8))))
        0x00, 0x21, _, 0x18 ->
          Ok(Item(tag, "Pressure Data", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x71 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x21, _, 0x11 ->
          Ok(Item(tag, "Modality LUT Output Gamma", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x10 ->
          Ok(Item(tag, "Modality LUT Input Gamma", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x15 ->
          Ok(Item(tag, "Harmonization", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x13 ->
          Ok(Item(tag, "Acquisition Zoom", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x17 ->
          Ok(Item(tag, "Source to Isocenter", [SignedLong], vm_1))
        0x00, 0x21, _, 0x20 ->
          Ok(Item(tag, "Restore Flag", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x22 -> Ok(Item(tag, "FD Rows", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x19 ->
          Ok(Item(tag, "ECG Index Array", [SignedLong], vm_1))
        0x00, 0x21, _, 0x05 -> Ok(Item(tag, "Dose", [SignedLong], vm_1))
        0x00, 0x21, _, 0x1d -> Ok(Item(tag, "K-Factor", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x41 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x21, _, 0x02 ->
          Ok(Item(tag, "Footswitch Index", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x24 ->
          Ok(Item(tag, "Table Movement Flag", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x0b ->
          Ok(Item(tag, "Measuring Field", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x06 ->
          Ok(Item(tag, "Skin Dose Percent", [SignedLong], vm_1))
        0x00, 0x21, _, 0x03 ->
          Ok(Item(tag, "Acquisition Room", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x0a ->
          Ok(Item(tag, "Copper Filter", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x26 ->
          Ok(Item(tag, "Crispy XPI Filter", [DecimalString], vm_1))
        0x00, 0x21, _, 0x04 ->
          Ok(Item(tag, "Current Time Product", [SignedLong], vm_1))
        0x00, 0x21, _, 0x1a -> Ok(Item(tag, "FD Flag", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x1c ->
          Ok(Item(tag, "SH_COLPAR", [OtherByteString], vm_1))
        0x00, 0x21, _, 0x00 ->
          Ok(Item(tag, "Acquisition Type", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x25 ->
          Ok(Item(tag, "Original Organ Program Name", [LongString], vm_1))
        0x00, 0x21, _, 0x0e -> Ok(Item(tag, "Total Steps", [SignedShort], vm_1))
        0x00, 0x21, _, 0x28 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x21, _, 0x57 ->
          Ok(Item(tag, "Unknown", [SignedShort], ValueMultiplicity(1, Some(3))))
        0x00, 0x21, _, 0x14 ->
          Ok(Item(tag, "Dyna Angulation Step Width", [SignedShort], vm_1))
        0x00, 0x21, _, 0x42 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x21, _, 0x1b -> Ok(Item(tag, "SH_ZOOM", [OtherByteString], vm_1))
        0x00, 0x21, _, 0x08 ->
          Ok(Item(tag, "Skin Dose Rate", [SignedLong], vm_1))
        0x00, 0x21, _, 0x0f ->
          Ok(Item(tag, "Dyna X-Ray Info", [SignedLong], vm_3_to_n))
        0x00, 0x21, _, 0x23 ->
          Ok(Item(tag, "FD Columns", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x1f ->
          Ok(Item(tag, "Total Scene Time", [SignedLong], vm_1))
        0x00, 0x21, _, 0x40 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_3))
        0x00, 0x21, _, 0x21 ->
          Ok(Item(tag, "Stand Movement Flag", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x09 ->
          Ok(Item(tag, "Impac Filename", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Acquisition Mode", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x0c ->
          Ok(Item(tag, "Post Blanking Circle", [SignedShort], vm_3))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MEDCOM OOG" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "MedCom OOG Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x09 ->
          Ok(Item(tag, "MedCom OOG Version", [LongString], vm_1))
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "MedCom OOG Info", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI Release 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x08 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Comments", [LongString], vm_1))
        0x00, 0x09, _, 0x15 -> Ok(Item(tag, "UID", [LongString], vm_1))
        0x00, 0x09, _, 0x40 ->
          Ok(Item(tag, "Data Object Type", [UnsignedShort], vm_1))
        0x00, 0x09, _, 0x41 ->
          Ok(Item(tag, "Data Object Subtype", [ShortString], vm_1))
        0x00, 0x11, _, 0x10 -> Ok(Item(tag, "Organ", [LongString], vm_1))
        0x00, 0x11, _, 0x15 ->
          Ok(Item(tag, "Allergy Indication", [LongString], vm_1))
        0x00, 0x11, _, 0x20 -> Ok(Item(tag, "Pregnancy", [LongString], vm_1))
        0x00, 0x29, _, 0x60 ->
          Ok(Item(tag, "Compression Algorithm", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_RELA_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x84 ->
          Ok(Item(tag, "Auto window/level level", [DecimalString], vm_1))
        0x00, 0x21, _, 0x5d ->
          Ok(Item(tag, "Tag Spacing", [DecimalString], vm_1))
        0x00, 0x21, _, 0x58 -> Ok(Item(tag, "Overlaps", [SignedLong], vm_1))
        0x00, 0x21, _, 0x4e -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x92 ->
          Ok(Item(tag, "Biopsy T location", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x4f ->
          Ok(Item(tag, "Locations in acquisition", [SignedShort], vm_1))
        0x00, 0x21, _, 0x90 ->
          Ok(Item(tag, "Tube focal spot position", [SignedShort], vm_1))
        0x00, 0x21, _, 0x07 ->
          Ok(Item(tag, "Series Record checksum", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x16 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x00, 0x21, _, 0x4a ->
          Ok(Item(tag, "Anatomical reference for scout", [LongString], vm_1))
        0x00, 0x21, _, 0x18 ->
          Ok(Item(tag, "Genesis version - Now", [ShortString], vm_1))
        0x00, 0x21, _, 0x51 ->
          Ok(Item(tag, "Rotation from source x rot", [DecimalString], vm_1))
        0x00, 0x21, _, 0x50 ->
          Ok(Item(tag, "Graphically prescribed", [SignedShort], vm_1))
        0x00, 0x21, _, 0x71 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x21, _, 0x93 ->
          Ok(Item(tag, "Biopsy ref location", [FloatingPointSingle], vm_1))
        0x00, 0x21, _, 0x15 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x35 ->
          Ok(Item(tag, "Series from which prescribed", [SignedShort], vm_1))
        0x00, 0x21, _, 0x81 ->
          Ok(Item(tag, "Auto window/level alpha", [DecimalString], vm_1))
        0x00, 0x21, _, 0x20 ->
          Ok(Item(tag, "Table start location", [DecimalString], vm_1))
        0x00, 0x21, _, 0x83 ->
          Ok(Item(tag, "Auto window/level window", [DecimalString], vm_1))
        0x00, 0x21, _, 0x54 ->
          Ok(Item(tag, "Image position", [ShortString], vm_3))
        0x00, 0x21, _, 0x53 ->
          Ok(Item(tag, "Rotation from source z rot", [DecimalString], vm_1))
        0x00, 0x21, _, 0x19 ->
          Ok(Item(tag, "Acq recon record checksum", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x05 ->
          Ok(Item(tag, "Genesis Version - now", [ShortString], vm_1))
        0x00, 0x21, _, 0x70 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x21, _, 0x5e ->
          Ok(Item(tag, "RTIA_timer", [DecimalString], vm_1))
        0x00, 0x21, _, 0x91 ->
          Ok(Item(tag, "Biopsy position", [SignedShort], vm_1))
        0x00, 0x21, _, 0x5f -> Ok(Item(tag, "Fps", [DecimalString], vm_1))
        0x00, 0x21, _, 0x5c ->
          Ok(Item(tag, "Tagging Orientation", [DecimalString], vm_1))
        0x00, 0x21, _, 0x52 ->
          Ok(Item(tag, "Rotation from source y rot", [DecimalString], vm_1))
        0x00, 0x21, _, 0x03 ->
          Ok(Item(tag, "Series from which Prescribed", [SignedShort], vm_1))
        0x00, 0x21, _, 0x56 -> Ok(Item(tag, "Num 3D slabs", [SignedLong], vm_1))
        0x00, 0x21, _, 0x55 ->
          Ok(Item(tag, "Image orientation", [ShortString], vm_6))
        0x00, 0x21, 0x10, _ ->
          Ok(Item(tag, "Private Element Creator", [LongString], vm_1))
        0x00, 0x21, _, 0x57 ->
          Ok(Item(tag, "Locs per 3D slab", [SignedLong], vm_1))
        0x00, 0x21, _, 0x5b ->
          Ok(Item(tag, "Tagging Flip Angle", [DecimalString], vm_1))
        0x00, 0x21, _, 0x36 ->
          Ok(Item(tag, "Image from which prescribed", [SignedShort], vm_1))
        0x00, 0x21, _, 0x82 ->
          Ok(Item(tag, "Auto window/level beta", [DecimalString], vm_1))
        0x00, 0x21, _, 0x59 ->
          Ok(Item(tag, "Image Filtering 0.5/0.2T", [SignedLong], vm_1))
        0x00, 0x21, _, 0x37 ->
          Ok(Item(tag, "Screen Format", [SignedShort], vm_1))
        0x00, 0x21, _, 0x5a ->
          Ok(Item(tag, "Diffusion direction", [SignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "HOLOGIC, Inc." ->
      case g0, g1, e0, e1 {
        0x7f, 0x01, _, 0x02 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x19, _, 0x46 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x30 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x32 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x7e, 0x01, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x7f, 0x01, _, 0x12 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x44 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x28 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x34 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x08 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x43 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x7e, 0x01, _, 0x11 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x19, _, 0x40 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x7e, 0x01, _, 0x02 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x37 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x06 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x26 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x33 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x35 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x7e, 0x01, _, 0x10 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x19, _, 0x29 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x90 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x27 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x7e, 0x01, _, 0x12 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x31 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x41 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x85 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x16 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x07 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x7f, 0x01, _, 0x10 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x19, _, 0x70 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x7f, 0x01, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x45 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x42 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "DLX_SERIE_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x19 -> Ok(Item(tag, "X Zoom", [IntegerString], vm_1))
        0x00, 0x19, _, 0x1d -> Ok(Item(tag, "Side Mark", [IntegerString], vm_1))
        0x00, 0x19, _, 0x1e ->
          Ok(Item(tag, "Percent Landscape", [IntegerString], vm_1))
        0x00, 0x19, _, 0x03 ->
          Ok(Item(tag, "Angle Value 3", [DecimalString], vm_1))
        0x00, 0x19, _, 0x28 ->
          Ok(Item(tag, "Image chain FWHM psf mm max", [DecimalString], vm_1))
        0x00, 0x19, _, 0x05 ->
          Ok(Item(tag, "Angle Label 2", [CodeString], vm_1))
        0x00, 0x19, _, 0x08 -> Ok(Item(tag, "Adx Exam Name", [ShortText], vm_1))
        0x00, 0x19, _, 0x1f ->
          Ok(Item(tag, "Adx Exposure Duration", [DecimalString], vm_1))
        0x00, 0x19, _, 0x06 ->
          Ok(Item(tag, "Angle Label 3", [CodeString], vm_1))
        0x00, 0x19, _, 0x23 ->
          Ok(Item(tag, "Table Lateral Position", [DecimalString], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Adx Injector Delay", [DecimalString], vm_1))
        0x00, 0x19, _, 0x26 ->
          Ok(Item(tag, "Intercept LV Regression", [DecimalString], vm_1))
        0x00, 0x19, _, 0x24 ->
          Ok(Item(tag, "Lambda cm Pincushion Distortion", [DecimalString], vm_1))
        0x00, 0x19, _, 0x1a -> Ok(Item(tag, "Y Zoom", [IntegerString], vm_1))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "Adx Auto Inject", [CodeString], vm_1))
        0x00, 0x19, _, 0x0a ->
          Ok(Item(tag, "Adx Record View", [IntegerString], vm_1))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "Adx Camera Rotation Enable", [CodeString], vm_1))
        0x00, 0x19, _, 0x27 ->
          Ok(Item(tag, "Image chain FWHM psf mm min", [DecimalString], vm_1))
        0x00, 0x19, _, 0x17 ->
          Ok(Item(tag, "User Spatial Filter Strength", [IntegerString], vm_1))
        0x00, 0x19, _, 0x18 ->
          Ok(Item(tag, "User Zoom Factor", [IntegerString], vm_1))
        0x00, 0x19, _, 0x09 ->
          Ok(Item(tag, "Adx Patient Size", [ShortString], vm_1))
        0x00, 0x19, _, 0x16 ->
          Ok(Item(tag, "Adx Reverse Sweep", [CodeString], vm_1))
        0x00, 0x19, _, 0x07 ->
          Ok(Item(tag, "Adx Procedure Name", [ShortText], vm_1))
        0x00, 0x19, _, 0x02 ->
          Ok(Item(tag, "Angle Value 2", [DecimalString], vm_1))
        0x00, 0x19, _, 0x01 ->
          Ok(Item(tag, "Angle Value 1", [DecimalString], vm_1))
        0x00, 0x19, _, 0x22 ->
          Ok(Item(tag, "Table Longitudinal Position", [DecimalString], vm_1))
        0x00, 0x19, _, 0x1c -> Ok(Item(tag, "Adx Dose", [CodeString], vm_1))
        0x00, 0x19, _, 0x20 -> Ok(Item(tag, "Ip Address", [ShortString], vm_1))
        0x00, 0x19, _, 0x25 ->
          Ok(Item(tag, "Slope LV Regression", [DecimalString], vm_1))
        0x00, 0x19, _, 0x14 ->
          Ok(Item(tag, "Adx Acq Mode", [IntegerString], vm_1))
        0x00, 0x19, _, 0x21 ->
          Ok(Item(tag, "Table Vertical Position", [DecimalString], vm_1))
        0x00, 0x19, _, 0x04 ->
          Ok(Item(tag, "Angle Label 1", [CodeString], vm_1))
        0x00, 0x19, _, 0x1b -> Ok(Item(tag, "Adx Focus", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS MR/PART 6" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x10 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CALIBRATION DATE" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x81 ->
          Ok(Item(tag, "Calibration Date", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips MR Imaging DD 002" ->
      case g0, g1, e0, e1 {
        0x20, 0x05, _, 0x32 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x05, _, 0x37 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x05, _, 0x38 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x05, _, 0x39 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x05, _, 0x40 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x05, _, 0x41 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x05, _, 0x43 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x05, _, 0x44 -> Ok(Item(tag, "Unknown", [OtherWordString], vm_1))
        0x20, 0x05, _, 0x47 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x99 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS MR" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "SPI Release", [LongString], vm_1))
        0x00, 0x09, _, 0x12 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS MR/PART" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x61 ->
          Ok(Item(tag, "Row Number", [IntegerString], vm_1_to_n))
        0x00, 0x29, _, 0xc3 ->
          Ok(Item(tag, "Scan Resolution", [IntegerString], vm_1))
        0x00, 0x29, _, 0x04 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x52 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xcb ->
          Ok(Item(tag, "Foldover Direction Coronal", [IntegerString], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "Number of Chemical Shifts", [IntegerString], vm_1))
        0x00, 0x19, _, 0xa3 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xce -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0xd6 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x19 ->
          Ok(Item(tag, "Repetition Time FFE", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd9 ->
          Ok(Item(tag, "EPI Factor", [IntegerString], vm_1))
        0x00, 0x21, _, 0x30 ->
          Ok(Item(tag, "Echo Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x1d -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x66 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x20 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x95 ->
          Ok(Item(
            tag,
            "Spectral Presaturation With Inversion Recovery",
            [LongString],
            vm_1,
          ))
        0x00, 0x19, _, 0x6a ->
          Ok(Item(tag, "Cardiac Frequency", [IntegerString], vm_1))
        0x00, 0x29, _, 0x50 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x1e -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x30 -> Ok(Item(tag, "Unknown", [LongString], vm_1_to_n))
        0x00, 0x21, _, 0x07 -> Ok(Item(tag, "Unknown", [DateTime], vm_1))
        0x00, 0x19, _, 0x0f ->
          Ok(Item(tag, "Number of Slices", [IntegerString], vm_1))
        0x00, 0x29, _, 0x52 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xfa -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x94 ->
          Ok(Item(tag, "Magnetization Transfer Contrast", [LongString], vm_1))
        0x00, 0x21, _, 0x50 ->
          Ok(Item(tag, "Dynamic Scan Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x6b ->
          Ok(Item(tag, "Inversion Delay", [DecimalString], vm_1))
        0x00, 0x19, _, 0x55 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd4 ->
          Ok(Item(tag, "Artifact Reduction", [IntegerString], vm_1))
        0x00, 0x19, _, 0x62 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd2 ->
          Ok(Item(tag, "Water Fat Shift", [LongString], vm_2))
        0x00, 0x19, _, 0x59 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xca ->
          Ok(Item(tag, "Foldover Direction Sagittal", [IntegerString], vm_1))
        0x00, 0x19, _, 0x03 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xe1 ->
          Ok(Item(tag, "Prepulse Delay", [DecimalString], vm_1))
        0x00, 0x19, _, 0x28 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x05 ->
          Ok(Item(tag, "CC Angulation", [DecimalString], vm_1))
        0x00, 0x19, _, 0x51 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x65 ->
          Ok(Item(tag, "Repetition Time IR", [DecimalString], vm_1))
        0x00, 0x21, _, 0x10 ->
          Ok(Item(tag, "Image Type", [IntegerString], vm_1))
        0x00, 0x19, _, 0xd7 ->
          Ok(Item(tag, "Scan Percentage", [DecimalString], vm_1))
        0x00, 0x21, _, 0x15 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xa0 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x21, _, 0x60 ->
          Ok(Item(tag, "Number of Rows In Object", [IntegerString], vm_1))
        0x00, 0x19, _, 0x6d ->
          Ok(Item(tag, "Gate Width", [DecimalString], vm_1))
        0x00, 0x29, _, 0x32 -> Ok(Item(tag, "Unknown", [DecimalString], vm_2))
        0x00, 0x19, _, 0x08 ->
          Ok(Item(tag, "Patient Orientation 1", [IntegerString], vm_1))
        0x00, 0x19, _, 0xd8 -> Ok(Item(tag, "Halfscan", [IntegerString], vm_1))
        0x00, 0x21, _, 0x35 ->
          Ok(Item(tag, "Chemical Shift Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x8c -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x21, _, 0x13 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x97 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x40 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x8f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x21, _, 0x31 ->
          Ok(Item(tag, "Patient Reference ID", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd1 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x20 ->
          Ok(Item(tag, "Slice Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0xd3 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xe0 ->
          Ok(Item(tag, "Percentage of Scan Completed", [IntegerString], vm_1))
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "Field of View", [DecimalString], vm_1))
        0x00, 0x19, _, 0x58 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xfc ->
          Ok(Item(tag, "Resonance Frequency", [IntegerString], vm_1))
        0x00, 0x19, _, 0x0c ->
          Ok(Item(tag, "CC Offcenter", [DecimalString], vm_1))
        0x00, 0x29, _, 0xd5 ->
          Ok(Item(tag, "Slice Thickness", [LongText], vm_1))
        0x00, 0x19, _, 0xda ->
          Ok(Item(tag, "Turbo Factor", [IntegerString], vm_1))
        0x00, 0x19, _, 0x06 ->
          Ok(Item(tag, "AP Angulation", [DecimalString], vm_1))
        0x00, 0x19, _, 0xf8 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0xcf ->
          Ok(Item(tag, "Number of Echoes", [IntegerString], vm_1))
        0x00, 0x19, _, 0x64 ->
          Ok(Item(tag, "Repetition Time SE", [DecimalString], vm_1))
        0x00, 0x19, _, 0x23 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xf9 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Slice Factor", [DecimalString], vm_1))
        0x00, 0x19, _, 0x26 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xfb -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x24 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x1a ->
          Ok(Item(tag, "FFE Flip Angle", [DecimalString], vm_1))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "Echo Times", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x0a ->
          Ok(Item(tag, "Slice Orientation", [IntegerString], vm_1))
        0x00, 0x19, _, 0x29 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x29, _, 0x00 -> Ok(Item(tag, "Unknown", [DecimalString], vm_2))
        0x00, 0x29, _, 0xc4 ->
          Ok(Item(tag, "Field of View", [IntegerString], vm_1))
        0x00, 0x19, _, 0x0d ->
          Ok(Item(tag, "AP Offcenter", [DecimalString], vm_1))
        0x00, 0x19, _, 0x56 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x15 ->
          Ok(Item(tag, "Dynamic Study", [IntegerString], vm_1))
        0x00, 0x19, _, 0x27 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x18 ->
          Ok(Item(tag, "Heartbeat Interval", [DecimalString], vm_1))
        0x00, 0x19, _, 0x54 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xd5 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0xc0 ->
          Ok(Item(tag, "Trigger Delay Times", [DecimalString], vm_1))
        0x00, 0x19, _, 0x8a -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x29, _, 0x53 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x57 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x50 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x21, _, 0x06 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x09 ->
          Ok(Item(tag, "Patient Orientation", [IntegerString], vm_1))
        0x00, 0x19, _, 0x31 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x0a -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x85 ->
          Ok(Item(tag, "Number of Samples", [IntegerString], vm_1))
        0x00, 0x19, _, 0x0b ->
          Ok(Item(tag, "LR Offcenter", [DecimalString], vm_1))
        0x00, 0x19, _, 0xdb -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x07 ->
          Ok(Item(tag, "LR Angulation", [DecimalString], vm_1))
        0x00, 0x19, _, 0x02 ->
          Ok(Item(tag, "Unknown", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0xc8 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x21, _, 0x00 -> Ok(Item(tag, "Scan Date", [IntegerString], vm_1))
        0x00, 0x29, _, 0x11 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x61 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x21, _, 0x62 ->
          Ok(Item(tag, "Unknown", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0xf6 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0xf7 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0xb6 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x51 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x01 ->
          Ok(Item(tag, "Stack Type", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0x69 ->
          Ok(Item(tag, "Number of Phases", [IntegerString], vm_1))
        0x00, 0x19, _, 0x99 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0xa4 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x8b -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0xcc -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x21, _, 0x14 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0xb4 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0xe3 ->
          Ok(Item(tag, "Phase Contrast Velocity", [DecimalString], vm_1))
        0x00, 0x19, _, 0x22 ->
          Ok(Item(tag, "Dynamic Scan Time Begin", [DecimalString], vm_1))
        0x00, 0x19, _, 0xa1 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x1c -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x0e -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x6c ->
          Ok(Item(tag, "Gate Delay", [DecimalString], vm_1))
        0x00, 0x19, _, 0xcd -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x25 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x45 ->
          Ok(Item(tag, "Reconstruction Resolution", [IntegerString], vm_1))
        0x00, 0x21, _, 0x08 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x53 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x21, _, 0x0f -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x8e -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0xd0 ->
          Ok(Item(tag, "Scan Resolution", [IntegerString], vm_1))
        0x00, 0x21, _, 0x40 ->
          Ok(Item(tag, "Phase Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x60 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x14 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x21, _, 0x21 -> Ok(Item(tag, "Slice Gap", [IntegerString], vm_1))
        0x00, 0x19, _, 0x21 ->
          Ok(Item(tag, "Unknown", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x6e ->
          Ok(Item(tag, "Trigger Delay Time", [DecimalString], vm_1))
        0x00, 0x19, _, 0x96 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x81 ->
          Ok(Item(tag, "Chemical Shift", [DecimalString], vm_1))
        0x00, 0x21, _, 0x09 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0xc9 ->
          Ok(Item(tag, "Foldover Direction Transverse", [IntegerString], vm_1))
        0x00, 0x19, _, 0x84 ->
          Ok(Item(tag, "Number of Rows", [IntegerString], vm_1))
        0x00, 0x19, _, 0xf0 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x8d -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x00, 0x19, _, 0x63 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x1b ->
          Ok(Item(tag, "Number of Scans", [IntegerString], vm_1))
        0x00, 0x19, _, 0x67 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0xb5 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x31 -> Ok(Item(tag, "Unknown", [DecimalString], vm_2))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_ACRQA_2.0 BLOCK3" ->
      case g0, g1, e0, e1 {
        0x00, 0x23, _, 0x00 -> Ok(Item(tag, "CR DRE", [DecimalString], vm_1))
        0x00, 0x23, _, 0x10 -> Ok(Item(tag, "CR DRN", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x20 -> Ok(Item(tag, "CR ORE", [DecimalString], vm_1))
        0x00, 0x23, _, 0x30 -> Ok(Item(tag, "CR ORN", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x40 -> Ok(Item(tag, "CR ORD", [UnsignedShort], vm_1))
        0x00, 0x23, _, 0x50 ->
          Ok(Item(tag, "CR Cassette Size", [LongString], vm_1))
        0x00, 0x23, _, 0x60 ->
          Ok(Item(tag, "CR Machine ID", [LongString], vm_1))
        0x00, 0x23, _, 0x70 ->
          Ok(Item(tag, "CR Machine Type", [LongString], vm_1))
        0x00, 0x23, _, 0x80 ->
          Ok(Item(tag, "CR Technician Code", [LongString], vm_1))
        0x00, 0x23, _, 0x90 ->
          Ok(Item(tag, "CR Energy Subtraction Parameters", [LongString], vm_1))
        0x00, 0x23, _, 0xf0 ->
          Ok(Item(tag, "CR Distribution Code", [LongString], vm_1))
        0x00, 0x23, _, 0xff ->
          Ok(Item(tag, "CR Shutters Applied", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 113" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x02 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x03 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x04 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x05 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x06 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x07 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x0d, _, 0x09 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x0b -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x0d, _, 0x0c -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x0d -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x0e -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x0f -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x20, 0x0d, _, 0x10 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x20, 0x0d, _, 0x11 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x0d, _, 0x12 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x13 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1_to_n))
        0x20, 0x0d, _, 0x14 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x0d, _, 0x15 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x17 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x18 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x19 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x1a ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x1b ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x1c ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x1d -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x1e -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0d, _, 0x1f ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x20 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x20, 0x0d, _, 0x21 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Kodak Image Information" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x15 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x16 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x17 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x18 -> Ok(Item(tag, "Unknown", [UnlimitedText], vm_1))
        0x00, 0x29, _, 0x19 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x29, _, 0x1a -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Viewing Protocol" ->
      case g0, g1, e0, e1 {
        0x00, 0x65, _, 0x93 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "ADAC_IMG" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x02 ->
          Ok(Item(tag, "Ver200 ADAC Pegasys File Size", [IntegerString], vm_1))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "ADAC Header Signature", [LongString], vm_2))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "Number of ADAC Headers", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x12 ->
          Ok(Item(tag, "ADAC Header/Image Sizes", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(tag, "ADAC Pegasys Headers", [OtherByteString], vm_1))
        0x00, 0x19, _, 0x21 ->
          Ok(Item(tag, "Ver200 Number of ADAC Headers", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x41 ->
          Ok(Item(
            tag,
            "Ver200 ADAC Header/Image Size",
            [IntegerString],
            vm_1_to_n,
          ))
        0x00, 0x19, _, 0x61 ->
          Ok(Item(tag, "Ver200 ADAC Pegasys Headers", [OtherByteString], vm_1))
        0x70, 0x43, _, 0x00 ->
          Ok(Item(tag, "Cardiac Stress State", [ShortString], vm_1))
        0x70, 0x43, _, 0x10 ->
          Ok(Item(tag, "Philips NM Private Group", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 039" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x01 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x04 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x05 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x06 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x07 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x08 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x09 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0a -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0b -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0c -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0d, _, 0x0d -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips RAD Imaging DD 001" ->
      case g0, g1, e0, e1 {
        0x20, 0x0b, _, 0x00 -> Ok(Item(tag, "Unknown", [PersonName], vm_1))
        0x20, 0x0b, _, 0x01 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x0b, _, 0x02 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x20, 0x0b, _, 0x05 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x0b, _, 0x11 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0b, _, 0x27 -> Ok(Item(tag, "Unknown", [DateTime], vm_1))
        0x20, 0x0b, _, 0x28 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x20, 0x0b, _, 0x29 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x20, 0x0b, _, 0x2a -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x0b, _, 0x2b -> Ok(Item(tag, "Unknown", [Date], vm_1))
        0x20, 0x0b, _, 0x2c -> Ok(Item(tag, "Unknown", [Time], vm_1))
        0x20, 0x0b, _, 0x2d -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0b, _, 0x3b -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x0b, _, 0x40 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x0b, _, 0x41 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x0b, _, 0x42 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x20, 0x0b, _, 0x43 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x20, 0x0b, _, 0x47 -> Ok(Item(tag, "Unknown", [Date], vm_1))
        0x20, 0x0b, _, 0x48 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x0b, _, 0x4c -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x0b, _, 0x4d -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x0b, _, 0x4f -> Ok(Item(tag, "Unknown", [DateTime], vm_1))
        0x20, 0x0b, _, 0x52 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "KINETDX" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0xa5 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0xa8 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x21, _, 0xaa -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS MR/PART 7" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x00 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "1.2.840.113681" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "CR Image Params Common", [ShortText], vm_1))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "CR Image IP Params Single", [ShortText], vm_1))
        0x00, 0x19, _, 0x12 ->
          Ok(Item(tag, "CR Image IP Params Left", [ShortText], vm_1))
        0x00, 0x19, _, 0x13 ->
          Ok(Item(tag, "CR Image IP Params Right", [ShortText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_CTHD_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x33, _, 0x02 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_0039" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x95 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips MR Imaging DD 001" ->
      case g0, g1, e0, e1 {
        0x20, 0x05, _, 0x08 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x20 ->
          Ok(Item(tag, "Number of Chemical Shift", [SignedLong], vm_1))
        0x20, 0x05, _, 0x11 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0xc0 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x81 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x69 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x52 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0xa7 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x38 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0xb0 ->
          Ok(Item(tag, "Diffusion Direction RL", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x2a -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x55 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x1d -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x6b ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x0b ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x78 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x0e ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0xa4 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x1f -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x05, _, 0x53 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x7e ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x54 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x05 ->
          Ok(Item(tag, "Synergy Reconstruction Type", [CodeString], vm_1))
        0x20, 0x05, _, 0x61 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x2e -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x28 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x9f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x58 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x4f ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x09 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x7a ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x4d -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x57 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x83 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x05, _, 0x25 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x49 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x6d ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x21 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x84 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x05, _, 0x27 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x2f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x12 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0xb1 ->
          Ok(Item(tag, "Diffusion Direction AP", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x51 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x31 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x19 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x66 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x16 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x6c ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x29 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x64 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x4b -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x6f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x23 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x5a ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x6e -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x36 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x22 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x76 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x7b -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x32 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x70 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x05, _, 0x68 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x72 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x1b -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x0d ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x1a -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x2d -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x18 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x05, _, 0x9e -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x05, _, 0x79 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x48 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x50 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0xa3 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0xb2 ->
          Ok(Item(tag, "Diffusion Direction FH", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x5b ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x5d -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x3b -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x13 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0xa5 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x85 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x05, _, 0x26 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0xa2 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x33 ->
          Ok(Item(tag, "Acquisition Duration", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x17 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x3a -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x05, _, 0x1c -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x00 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x73 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x5f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x3e -> Ok(Item(tag, "Unknown", [SignedLong], vm_1_to_n))
        0x20, 0x05, _, 0x71 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0xa8 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x20, 0x05, _, 0x0c ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0xa6 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x0a ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x34 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x02 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x14 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x39 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x04 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x86 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x30 ->
          Ok(Item(tag, "Repetition Time", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x1e -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x05, _, 0x37 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x10 ->
          Ok(Item(tag, "Window Width", [DecimalString], vm_1))
        0x20, 0x05, _, 0x5e -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x4c -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x80 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x05, _, 0xa0 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x60 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x15 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x56 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x6a ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0xa9 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x01 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x2c -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x3d -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x63 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x2b -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x59 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x65 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x75 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x4e ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x3c -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x0f ->
          Ok(Item(tag, "Window Center", [DecimalString], vm_1))
        0x20, 0x05, _, 0x5c ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x74 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x67 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x4a -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x35 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0xa1 ->
          Ok(Item(tag, "Syncra Scan Type", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "1.2.840.113708.794.1.1.2.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x87, _, 0x10 -> Ok(Item(tag, "Media Type", [CodeString], vm_1))
        0x00, 0x87, _, 0x20 ->
          Ok(Item(tag, "Media Location", [CodeString], vm_1))
        0x00, 0x87, _, 0x30 ->
          Ok(Item(tag, "Storage File ID", [ShortText], vm_1))
        0x00, 0x87, _, 0x40 ->
          Ok(Item(tag, "Study or Image Size in MB", [DecimalString], vm_1))
        0x00, 0x87, _, 0x50 ->
          Ok(Item(tag, "Estimated Retrieve Time", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AMI Annotations_01" ->
      case g0, g1, e0, e1 {
        0x31, 0x01, _, 0x10 ->
          Ok(Item(tag, "AMI Annotation Sequence (RET)", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MEDCOM HEADER" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "MedCom Header Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x09 ->
          Ok(Item(tag, "MedCom Header Version", [LongString], vm_1))
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "MedCom Header Info", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "MedCom History Information", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x31 ->
          Ok(Item(tag, "PMTF Information 1", [LongString], vm_1))
        0x00, 0x29, _, 0x32 ->
          Ok(Item(tag, "PMTF Information 2", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x33 ->
          Ok(Item(tag, "PMTF Information 3", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x34 ->
          Ok(Item(tag, "PMTF Information 4", [CodeString], vm_1))
        0x00, 0x29, _, 0x35 ->
          Ok(Item(tag, "PMTF Information 5", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x40 ->
          Ok(Item(tag, "Application Header Sequence", [Sequence], vm_1))
        0x00, 0x29, _, 0x41 ->
          Ok(Item(tag, "Application Header Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x42 ->
          Ok(Item(tag, "Application Header ID", [LongString], vm_1))
        0x00, 0x29, _, 0x43 ->
          Ok(Item(tag, "Application Header Version", [LongString], vm_1))
        0x00, 0x29, _, 0x44 ->
          Ok(Item(tag, "Application Header Info", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x50 ->
          Ok(Item(
            tag,
            "Workflow Control Flags",
            [LongString],
            ValueMultiplicity(8, Some(8)),
          ))
        0x00, 0x29, _, 0x51 ->
          Ok(Item(tag, "Arch. Management Flag Keep Online", [CodeString], vm_1))
        0x00, 0x29, _, 0x52 ->
          Ok(Item(tag, "Arch. Mgmnt Flag Do Not Archive", [CodeString], vm_1))
        0x00, 0x29, _, 0x53 ->
          Ok(Item(tag, "Image Location Status", [CodeString], vm_1))
        0x00, 0x29, _, 0x54 ->
          Ok(Item(tag, "Estimated Retrieve Time", [DecimalString], vm_1))
        0x00, 0x29, _, 0x55 ->
          Ok(Item(tag, "Data Size of Retrieved Images", [DecimalString], vm_1))
        0x00, 0x29, _, 0x70 ->
          Ok(Item(tag, "Siemens Link Sequence", [Sequence], vm_1))
        0x00, 0x29, _, 0x71 ->
          Ok(Item(tag, "Referenced Tag", [AttributeTag], vm_1))
        0x00, 0x29, _, 0x72 ->
          Ok(Item(tag, "Referenced Tag Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x73 ->
          Ok(Item(tag, "Referenced Value Length", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x74 ->
          Ok(Item(tag, "Referenced Object Device Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x75 ->
          Ok(Item(
            tag,
            "Referenced Object Device Location",
            [OtherByteString],
            vm_1,
          ))
        0x00, 0x29, _, 0x76 ->
          Ok(Item(tag, "Referenced Object ID", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "TOSHIBA_MEC_1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x01 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x09, _, 0x02 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x09, _, 0x03 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x09, _, 0x04 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x11, _, 0x01 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x11, _, 0x02 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x01 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x19, _, 0x02 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x21, _, 0x01 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x21, _, 0x02 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x00, 0x21, _, 0x03 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x7f, 0xf1, _, 0x01 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x7f, 0xf1, _, 0x02 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x7f, 0xf1, _, 0x03 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        0x7f, 0xf1, _, 0x10 ->
          Ok(Item(tag, "Unknown", [UnsignedShort], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS ICC MATRIX" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x82 ->
          Ok(Item(
            tag,
            "Image Center in Image Coordinates",
            [DecimalString],
            vm_2,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-Private_ICS Release 1;2" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x00 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x02 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x03 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0x04 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0x05 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0x30 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x29, _, 0xa0 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0xa1 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0xa2 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0xa3 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0xa5 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0xa6 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0xd9 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PAPYRUS" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 ->
          Ok(Item(tag, "Original File Name", [LongText], vm_1))
        0x00, 0x09, _, 0x10 ->
          Ok(Item(tag, "Original File Location", [LongText], vm_1))
        0x00, 0x09, _, 0x18 ->
          Ok(Item(tag, "Data Set Identifier", [LongText], vm_1))
        0x00, 0x41, _, 0x00 ->
          Ok(Item(tag, "Papyrus Comments", [LongText], vm_1_to_n))
        0x00, 0x41, _, 0x10 ->
          Ok(Item(tag, "Folder Type", [UnsignedShort], vm_1))
        0x00, 0x41, _, 0x11 ->
          Ok(Item(tag, "Patient Folder Data Set ID", [LongText], vm_1))
        0x00, 0x41, _, 0x20 -> Ok(Item(tag, "Folder Name", [LongText], vm_1))
        0x00, 0x41, _, 0x30 -> Ok(Item(tag, "Creation Date", [Date], vm_1))
        0x00, 0x41, _, 0x32 -> Ok(Item(tag, "Creation Time", [Time], vm_1))
        0x00, 0x41, _, 0x34 -> Ok(Item(tag, "Modified Date", [Date], vm_1))
        0x00, 0x41, _, 0x36 -> Ok(Item(tag, "Modified Time", [Time], vm_1))
        0x00, 0x41, _, 0x40 ->
          Ok(Item(tag, "Owner Name", [LongText], vm_1_to_n))
        0x00, 0x41, _, 0x50 -> Ok(Item(tag, "Folder Status", [LongText], vm_1))
        0x00, 0x41, _, 0x60 ->
          Ok(Item(tag, "Number of Images", [UnsignedLong], vm_1))
        0x00, 0x41, _, 0x62 ->
          Ok(Item(tag, "Number of Other", [UnsignedLong], vm_1))
        0x00, 0x41, _, 0xa0 ->
          Ok(Item(tag, "External Folder Element DSID", [LongText], vm_1_to_n))
        0x00, 0x41, _, 0xa1 ->
          Ok(Item(
            tag,
            "External Folder Element Data Set Type",
            [UnsignedShort],
            vm_1_to_n,
          ))
        0x00, 0x41, _, 0xa2 ->
          Ok(Item(
            tag,
            "External Folder Element File Location",
            [LongText],
            vm_1_to_n,
          ))
        0x00, 0x41, _, 0xa3 ->
          Ok(Item(
            tag,
            "External Folder Element Length",
            [UnsignedLong],
            vm_1_to_n,
          ))
        0x00, 0x41, _, 0xb0 ->
          Ok(Item(tag, "Internal Folder Element DSID", [LongText], vm_1_to_n))
        0x00, 0x41, _, 0xb1 ->
          Ok(Item(
            tag,
            "Internal Folder Element Data Set Type",
            [UnsignedShort],
            vm_1_to_n,
          ))
        0x00, 0x41, _, 0xb2 ->
          Ok(Item(tag, "Internal Offset To Data Set", [UnsignedLong], vm_1_to_n))
        0x00, 0x41, _, 0xb3 ->
          Ok(Item(tag, "Internal Offset To Image", [UnsignedLong], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_GNHD_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x33, _, 0x01 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x33, _, 0x02 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PMTF INFORMATION DATA" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x01 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0x31 ->
          Ok(Item(tag, "PMTF Information 1", [LongString], vm_1))
        0x00, 0x29, _, 0x32 ->
          Ok(Item(tag, "PMTF Information 2", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x33 ->
          Ok(Item(tag, "PMTF Information 3", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x34 ->
          Ok(Item(tag, "PMTF Information 4", [CodeString], vm_1))
        0x00, 0x29, _, 0x89 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x29, _, 0x90 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        0x70, 0x15, _, 0x73 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AMI Sequence Annotations_01" ->
      case g0, g1, e0, e1 {
        0x31, 0x03, _, 0x10 ->
          Ok(Item(tag, "AMI Annotation Sequence (RET)", [CodeString], vm_1))
        0x31, 0x03, _, 0x20 ->
          Ok(Item(tag, "AMI Annotation UID (RET)", [UniqueIdentifier], vm_1))
        0x31, 0x03, _, 0x30 ->
          Ok(Item(tag, "AMI Annotation Color (RET)", [UnsignedShort], vm_1))
        0x31, 0x03, _, 0x40 ->
          Ok(Item(tag, "FontSize", [FloatingPointDouble], vm_1))
        0x31, 0x03, _, 0x50 ->
          Ok(Item(tag, "AMI Annotation Line Style (RET)", [CodeString], vm_1))
        0x31, 0x03, _, 0x60 ->
          Ok(Item(tag, "AMI Annotation Elements (RET)", [Sequence], vm_1))
        0x31, 0x03, _, 0x70 ->
          Ok(Item(tag, "AMI Annotation Label (RET)", [ShortString], vm_1))
        0x31, 0x03, _, 0x80 ->
          Ok(Item(tag, "AMI Annotation Creator (RET)", [PersonName], vm_1))
        0x31, 0x03, _, 0x90 ->
          Ok(Item(tag, "AMI Annotation Modifiers (RET)", [PersonName], vm_1))
        0x31, 0x03, _, 0xa0 ->
          Ok(Item(tag, "AMI Annotation Creation Date (RET)", [Date], vm_1))
        0x31, 0x03, _, 0xb0 ->
          Ok(Item(tag, "AMI Annotation Creation Time (RET)", [Time], vm_1))
        0x31, 0x03, _, 0xc0 ->
          Ok(Item(tag, "AMI Annotation Modification Dates (RET)", [Date], vm_1))
        0x31, 0x03, _, 0xd0 ->
          Ok(Item(tag, "AMI Annotation Modification Times (RET)", [Time], vm_1))
        0x31, 0x03, _, 0xe0 ->
          Ok(Item(
            tag,
            "AMI Annotation Frame Number (RET)",
            [UnsignedShort],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "Philips US Imaging DD 043" ->
      case g0, g1, e0, e1 {
        0x20, 0x0d, _, 0x05 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips MR Imaging DD 005" ->
      case g0, g1, e0, e1 {
        0x20, 0x05, _, 0x20 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x11 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x20, 0x05, _, 0x41 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x38 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x20, 0x05, _, 0x2a -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x1d -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x0b -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x05, _, 0x0e -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x05, _, 0x1f -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x2e ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x28 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x05, _, 0x4f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x09 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x20, 0x05, _, 0x44 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x4d -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x25 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x03 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x49 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x21 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x27 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x2f ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x12 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x31 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x19 -> Ok(Item(tag, "Unknown", [CodeString], vm_3))
        0x20, 0x05, _, 0x16 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x4b ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x23 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x36 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x20, 0x05, _, 0x22 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x06 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x3f -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x32 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x1b -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x1a -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x2d -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x18 -> Ok(Item(tag, "Unknown", [CodeString], vm_3))
        0x20, 0x05, _, 0x48 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x50 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x42 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x3b -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x13 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x26 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x46 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x3a -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x20, 0x05, _, 0x1c -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x00 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x3e ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x45 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x47 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x0a -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x20, 0x05, _, 0x02 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x05, _, 0x24 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x14 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x05, _, 0x39 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x20, 0x05, _, 0x30 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x1e -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x37 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x43 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x10 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x05, _, 0x4c ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x15 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x20, 0x05, _, 0x01 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x05, _, 0x2c -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x07 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x05, _, 0x3d ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x2b -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x4e -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x3c ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x0f -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x05, _, 0x40 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x4a ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x35 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "LODOX_STATSCAN" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x01 ->
          Ok(Item(tag, "Unknown", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0x02 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x03 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x04 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x05 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x06 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x07 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x19, _, 0x08 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "MEDIFACE" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0x01 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x10 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x11 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x12 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x21 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x22 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x30 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x31 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x40 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x41 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x42 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x50 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x51 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x52 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0x60 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0xf1 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x21, _, 0xf2 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x01 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "Window Center", [DecimalString], vm_1))
        0x00, 0x29, _, 0x11 ->
          Ok(Item(tag, "Window Width", [DecimalString], vm_1))
        0x00, 0x29, _, 0x20 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x29, _, 0x21 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x22 -> Ok(Item(tag, "Unknown", [DecimalString], vm_2))
        0x00, 0x29, _, 0x30 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_STDY_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x23, 0x10, _ ->
          Ok(Item(tag, "Private Element Creator", [LongString], vm_1))
        0x00, 0x23, _, 0x01 ->
          Ok(Item(tag, "Number of series in Study", [SignedLong], vm_1))
        0x00, 0x23, _, 0x02 ->
          Ok(Item(tag, "Number of unarchived Series", [SignedLong], vm_1))
        0x00, 0x23, _, 0x10 ->
          Ok(Item(tag, "Reference image field", [SignedShort], vm_1))
        0x00, 0x23, _, 0x50 ->
          Ok(Item(tag, "Summary image", [SignedShort], vm_1))
        0x00, 0x23, _, 0x70 ->
          Ok(Item(
            tag,
            "Start time(secs) in first axial",
            [FloatingPointDouble],
            vm_1,
          ))
        0x00, 0x23, _, 0x74 ->
          Ok(Item(tag, "No. of updates to header", [SignedLong], vm_1))
        0x00, 0x23, _, 0x7d ->
          Ok(Item(
            tag,
            "Indicates study has complete info (DICOM/genesis)",
            [SignedShort],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "ObjectModel (ID, Version, Place, PlaceDescription)" ->
      case g0, g1, e0, e1 {
        0x81, 0x01, _, 0x00 -> Ok(Item(tag, "ID", [LongString], vm_1))
        0x81, 0x01, _, 0x10 -> Ok(Item(tag, "Version", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Siemens: Thorax/Multix FD Lab Settings" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x00 -> Ok(Item(tag, "Internal Value", [LongText], vm_1))
        0x00, 0x19, _, 0x02 ->
          Ok(Item(tag, "Total Area Dose Product", [LongString], vm_1))
        0x00, 0x19, _, 0x04 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x05 ->
          Ok(Item(tag, "Cassette Image", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x06 ->
          Ok(Item(tag, "Table Object Distance", [FloatingPointDouble], vm_1))
        0x00, 0x19, _, 0x07 ->
          Ok(Item(tag, "Table Detector Distance", [FloatingPointDouble], vm_1))
        0x00, 0x19, _, 0x08 ->
          Ok(Item(tag, "Ortho Step Distance", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x08 ->
          Ok(Item(tag, "Auto Window Flag", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x09 ->
          Ok(Item(tag, "Auto Window Center", [SignedLong], vm_1))
        0x00, 0x21, _, 0x0a ->
          Ok(Item(tag, "Auto Window Width", [SignedLong], vm_1))
        0x00, 0x21, _, 0x0b -> Ok(Item(tag, "Filter ID", [SignedShort], vm_1))
        0x00, 0x21, _, 0x14 ->
          Ok(Item(tag, "Anatomic Correct View", [UnsignedShort], vm_1))
        0x00, 0x21, _, 0x15 ->
          Ok(Item(tag, "Auto Window Shift", [SignedShort], vm_1))
        0x00, 0x21, _, 0x16 ->
          Ok(Item(tag, "Auto Window Expansion", [DecimalString], vm_1))
        0x00, 0x21, _, 0x17 -> Ok(Item(tag, "System Type", [LongString], vm_1))
        0x00, 0x21, _, 0x30 ->
          Ok(Item(tag, "Anatomic Sort Number", [ShortString], vm_1))
        0x00, 0x21, _, 0x31 ->
          Ok(Item(tag, "Acquisition Sort Number", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Applicare/RadWorks/Version 6.0/Summary" ->
      case g0, g1, e0, e1 {
        0x31, 0x09, _, 0x11 ->
          Ok(Item(tag, "Receive Origin Description", [ShortText], vm_1))
        0x31, 0x09, _, 0x12 ->
          Ok(Item(tag, "Receive Origin Description", [ShortText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS CBT ROTATION DIRECTION" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x85 ->
          Ok(Item(tag, "Gantry Rotation Direction", [CodeString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P Release 2;1" ->
      case g0, g1, e0, e1 {
        0x00, 0x11, _, 0x18 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x23, _, 0x0d ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x00, 0x23, _, 0x0e ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Image (ID, Version, Size, Dump, GUID)" ->
      case g0, g1, e0, e1 {
        0x80, 0x03, _, 0x00 -> Ok(Item(tag, "ID", [LongString], vm_1))
        0x80, 0x03, _, 0x10 -> Ok(Item(tag, "Version", [LongString], vm_1))
        0x80, 0x03, _, 0x20 -> Ok(Item(tag, "Size", [UnsignedLong], vm_1))
        0x80, 0x03, _, 0x30 -> Ok(Item(tag, "Dump", [OtherByteString], vm_1))
        0x80, 0x03, _, 0x40 -> Ok(Item(tag, "GUID", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "DLX_LKUP_01" ->
      case g0, g1, e0, e1 {
        0x60, _, _, 0x01 ->
          Ok(Item(
            tag,
            "Gray Palette color lookup table descriptor",
            [LongText],
            vm_3,
          ))
        0x60, _, _, 0x02 ->
          Ok(Item(tag, "Gray Palette color lookup table data", [LongText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SHS MagicView 300" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Zoom Factor", [FloatingPointDouble], vm_1_to_n))
        0x00, 0x29, _, 0x02 ->
          Ok(Item(tag, "Pan Factor X", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x03 ->
          Ok(Item(tag, "Pan Factor Y", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x04 -> Ok(Item(tag, "NmPalette", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-XSB-DCI Release 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Video Beam Boost", [LongText], vm_1))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(tag, "Channel Generating Video Sync", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x12 ->
          Ok(Item(tag, "Video Gain", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x13 ->
          Ok(Item(tag, "Video Offset", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(tag, "RTD Data Compression Factor", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "2.16.840.1.114059.1.1.6.1.50.1" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x20 -> Ok(Item(tag, "Description", [LongText], vm_1))
        0x00, 0x29, _, 0x21 -> Ok(Item(tag, "Orientation", [ShortText], vm_1))
        0x00, 0x29, _, 0x22 -> Ok(Item(tag, "Parameter 1", [ShortText], vm_1))
        0x00, 0x29, _, 0x23 -> Ok(Item(tag, "Parameter 2", [ShortText], vm_1))
        0x00, 0x29, _, 0x24 -> Ok(Item(tag, "Teeth", [LongString], vm_1))
        0x00, 0x29, _, 0x25 -> Ok(Item(tag, "Jaw", [LongString], vm_1))
        0x00, 0x29, _, 0x26 -> Ok(Item(tag, "Quadrant", [LongString], vm_1))
        0x00, 0x29, _, 0x27 -> Ok(Item(tag, "CRC", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Sound Technologies" ->
      case g0, g1, e0, e1 {
        0xf0, 0x01, _, 0x00 ->
          Ok(Item(tag, "Patient Species", [CodeString], vm_1))
        0xf0, 0x01, _, 0x01 ->
          Ok(Item(tag, "Patient Breed", [CodeString], vm_1))
        0xf0, 0x01, _, 0x02 ->
          Ok(Item(tag, "Patient Category Size", [CodeString], vm_1))
        0xf0, 0x01, _, 0x03 ->
          Ok(Item(
            tag,
            "Patient Sex Extended (including spay/neuter)",
            [CodeString],
            vm_1,
          ))
        0xf0, 0x01, _, 0x04 -> Ok(Item(tag, "Image View", [CodeString], vm_1))
        0xf0, 0x01, _, 0x05 ->
          Ok(Item(tag, "Anatomy Imaged", [CodeString], vm_1))
        0xf0, 0x01, _, 0x06 ->
          Ok(Item(tag, "Image enhancements", [CodeString], vm_1))
        0xf0, 0x01, _, 0x07 ->
          Ok(Item(tag, "Detector Settings", [CodeString], vm_1))
        0xf0, 0x01, _, 0x08 ->
          Ok(Item(tag, "Application Version", [CodeString], vm_1))
        0xf0, 0x01, _, 0x09 ->
          Ok(Item(tag, "Image Laterality Extended", [LongString], vm_1))
        0xf0, 0x01, _, 0x0a -> Ok(Item(tag, "Client Name", [PersonName], vm_1))
        0xf0, 0x01, _, 0x0b ->
          Ok(Item(tag, "Reference Study Instance Uid", [UniqueIdentifier], vm_1))
        0xf0, 0x01, _, 0x0c ->
          Ok(Item(
            tag,
            "Reference Series Instance Uid",
            [UniqueIdentifier],
            vm_1,
          ))
        0xf0, 0x01, _, 0x0d -> Ok(Item(tag, "Exam Ref Id", [LongString], vm_1))
        0xf0, 0x01, _, 0x0e ->
          Ok(Item(tag, "Physician Of Record Address", [ShortText], vm_1))
        0xf0, 0x01, _, 0x0f ->
          Ok(Item(tag, "Physician Of Record Phone Numbers", [ShortString], vm_1))
        0xf0, 0x01, _, 0x10 ->
          Ok(Item(tag, "Reason For Study", [LongText], vm_1))
        0xf0, 0x01, _, 0x11 -> Ok(Item(tag, "Protocol", [LongString], vm_1))
        0xf0, 0x01, _, 0x12 ->
          Ok(Item(tag, "CaptureInputType", [LongString], vm_1))
        0xf0, 0x01, _, 0x13 -> Ok(Item(tag, "Exam Complaint", [LongText], vm_1))
        0xf0, 0x01, _, 0x14 ->
          Ok(Item(tag, "Exam Web Code", [LongString], vm_1))
        0xf0, 0x01, _, 0x15 ->
          Ok(Item(tag, "Exam Category", [LongString], vm_1))
        0xf0, 0x01, _, 0x16 ->
          Ok(Item(tag, "Exam Diagnosis", [ShortString], vm_1))
        0xf0, 0x01, _, 0x17 ->
          Ok(Item(tag, "Exam Created By", [PersonName], vm_1))
        0xf0, 0x01, _, 0x18 ->
          Ok(Item(tag, "Exam Created By Group", [LongString], vm_1))
        0xf0, 0x01, _, 0x19 ->
          Ok(Item(tag, "Exam Required By DateTime", [DateTime], vm_1))
        0xf0, 0x01, _, 0x1a -> Ok(Item(tag, "Capture Type", [LongString], vm_1))
        0xf0, 0x01, _, 0x1b ->
          Ok(Item(tag, "Telemed Exam ID", [IntegerString], vm_1))
        0xf0, 0x01, _, 0x1c ->
          Ok(Item(tag, "Exam Created By Guid", [LongString], vm_1))
        0xf0, 0x01, _, 0x1d ->
          Ok(Item(tag, "Client Name Guid", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED OCS REFERENCE IMAGE" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x76 ->
          Ok(Item(tag, "Reference Image", [UniqueIdentifier], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-Private-DiDi Release 1" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "Post Mode String", [LongText], vm_1))
        0x00, 0x19, _, 0x01 -> Ok(Item(tag, "Post Data", [LongText], vm_1))
        0x00, 0x19, _, 0x10 -> Ok(Item(tag, "Image Header", [LongText], vm_1))
        0x00, 0x19, _, 0x20 -> Ok(Item(tag, "SCPreName", [LongText], vm_1))
        0x00, 0x19, _, 0x21 -> Ok(Item(tag, "SCPostNo", [IntegerString], vm_1))
        0x00, 0x19, _, 0x22 ->
          Ok(Item(tag, "SCSOPInstanceUID", [LongText], vm_1))
        0x00, 0x19, _, 0x23 -> Ok(Item(tag, "SCCreationDate", [LongText], vm_1))
        0x00, 0x19, _, 0x24 ->
          Ok(Item(tag, "SCProcessingCategory", [LongText], vm_1))
        0x00, 0x19, _, 0x25 -> Ok(Item(tag, "SCPostMethod", [LongText], vm_1))
        0x00, 0x19, _, 0x26 -> Ok(Item(tag, "SCPostString", [LongText], vm_1))
        0x00, 0x19, _, 0x27 -> Ok(Item(tag, "SCPostString2", [LongText], vm_1))
        0x00, 0x19, _, 0x28 -> Ok(Item(tag, "SCMode", [LongText], vm_1))
        0x00, 0x19, _, 0x29 ->
          Ok(Item(tag, "SCStCommit", [IntegerString], vm_1))
        0x00, 0x19, _, 0x2a ->
          Ok(Item(tag, "SCExported", [IntegerString], vm_1))
        0x00, 0x19, _, 0x2b -> Ok(Item(tag, "SCPrinted", [IntegerString], vm_1))
        0x00, 0x19, _, 0x2c -> Ok(Item(tag, "SCOperator", [LongText], vm_1))
        0x00, 0x19, _, 0x40 -> Ok(Item(tag, "SCPreName", [LongText], vm_1))
        0x00, 0x19, _, 0x41 -> Ok(Item(tag, "SCPreType", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS SMS-AX  QUANT 1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x23, _, 0x00 ->
          Ok(Item(
            tag,
            "Horizontal Calibration Pixel Size",
            [DecimalString],
            vm_2,
          ))
        0x00, 0x23, _, 0x01 ->
          Ok(Item(tag, "Vertical Calibration Pixel Size", [DecimalString], vm_2))
        0x00, 0x23, _, 0x02 ->
          Ok(Item(tag, "Calibration Object", [LongString], vm_1))
        0x00, 0x23, _, 0x03 ->
          Ok(Item(tag, "Calibration Object Size", [DecimalString], vm_1))
        0x00, 0x23, _, 0x04 ->
          Ok(Item(tag, "Calibration Method", [LongString], vm_1))
        0x00, 0x23, _, 0x05 -> Ok(Item(tag, "Filename", [ShortText], vm_1))
        0x00, 0x23, _, 0x06 ->
          Ok(Item(tag, "Frame Number", [IntegerString], vm_1))
        0x00, 0x23, _, 0x07 ->
          Ok(Item(tag, "Calibration Factor Multiplicity", [IntegerString], vm_2))
        0x00, 0x23, _, 0x08 ->
          Ok(Item(tag, "Calibration TOD Value", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "INFINITT_FMX" ->
      case g0, g1, e0, e1 {
        0x00, 0x15, _, 0x10 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x15, _, 0x11 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AMI ImageTransform_01" ->
      case g0, g1, e0, e1 {
        0x31, 0x07, _, 0x10 ->
          Ok(Item(tag, "AMI Transformation Matrix (RET)", [DecimalString], vm_1))
        0x31, 0x07, _, 0x20 ->
          Ok(Item(tag, "AMI Center Offset (RET)", [DecimalString], vm_1))
        0x31, 0x07, _, 0x30 ->
          Ok(Item(tag, "AMI Magnification (RET)", [DecimalString], vm_1))
        0x31, 0x07, _, 0x40 ->
          Ok(Item(tag, "AMI Magnification Type (RET)", [CodeString], vm_1))
        0x31, 0x07, _, 0x50 ->
          Ok(Item(tag, "AMI Displayed Area (RET)", [DecimalString], vm_1))
        0x31, 0x07, _, 0x60 ->
          Ok(Item(tag, "AMI Calibration Factor (RET)", [DecimalString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_CT_VES_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x51, _, 0x01 -> Ok(Item(tag, "CTVESSequence", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SEGAMI__MEMO" ->
      case g0, g1, e0, e1 {
        0x00, 0x35, _, 0x97 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x00, 0x35, _, 0x98 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "ATL HDI V1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 -> Ok(Item(tag, "Private", [Unknown], vm_1))
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Private", [Unknown], vm_1))
        0x00, 0x09, _, 0x20 -> Ok(Item(tag, "Private", [Unknown], vm_1))
        0x00, 0x09, _, 0x30 -> Ok(Item(tag, "Private", [Unknown], vm_1))
        0x00, 0x09, _, 0x40 -> Ok(Item(tag, "Private", [Unknown], vm_1))
        0x00, 0x09, _, 0x50 -> Ok(Item(tag, "Private", [Unknown], vm_1))
        0x00, 0x09, _, 0x60 -> Ok(Item(tag, "Private", [Unknown], vm_1))
        0x00, 0x09, _, 0x70 -> Ok(Item(tag, "Private", [Unknown], vm_1))
        0x00, 0x09, _, 0x80 -> Ok(Item(tag, "Private", [Unknown], vm_1))
        0x00, 0x09, _, 0x90 -> Ok(Item(tag, "Private", [Unknown], vm_1))
        0x00, 0x09, _, 0x91 -> Ok(Item(tag, "Private", [Unknown], vm_1))
        0x00, 0x29, _, 0x30 -> Ok(Item(tag, "Loop Mode", [Unknown], vm_1))
        0x00, 0x29, _, 0x31 -> Ok(Item(tag, "Trigger mode", [Unknown], vm_1))
        0x00, 0x29, _, 0x32 -> Ok(Item(tag, "Number of Loops", [Unknown], vm_1))
        0x00, 0x29, _, 0x33 -> Ok(Item(tag, "Loop Indexes", [Unknown], vm_1))
        0x00, 0x29, _, 0x34 ->
          Ok(Item(tag, "Loop Heart Rates", [Unknown], vm_1))
        0x00, 0x29, _, 0x35 -> Ok(Item(tag, "Medications", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS CT VA0  GEN" ->
      case g0, g1, e0, e1 {
        0x00, 0x21, _, 0xa1 ->
          Ok(Item(tag, "Image Filter Label", [CodeString], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(
            tag,
            "Reconstruction Algorithm Set",
            [IntegerString],
            vm_1_to_n,
          ))
        0x00, 0x21, _, 0x30 ->
          Ok(Item(tag, "Tube Position", [IntegerString], vm_1))
        0x00, 0x21, _, 0x4a ->
          Ok(Item(tag, "VOI Stop Slice", [IntegerString], vm_1))
        0x00, 0x21, _, 0x51 ->
          Ok(Item(tag, "Vector Row Step", [IntegerString], vm_1))
        0x00, 0x21, _, 0x49 ->
          Ok(Item(tag, "VOI Start Slice", [IntegerString], vm_1))
        0x00, 0x21, _, 0x45 ->
          Ok(Item(tag, "VOI Start Row", [IntegerString], vm_1))
        0x00, 0x21, _, 0x50 ->
          Ok(Item(tag, "Vector Start Row", [IntegerString], vm_1))
        0x00, 0x21, _, 0xa5 ->
          Ok(Item(tag, "Reference Data Set 1", [IntegerString], vm_1))
        0x00, 0x21, _, 0x75 ->
          Ok(Item(tag, "Light Brightness", [DecimalString], vm_1))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(tag, "Number of Virtual Channels", [IntegerString], vm_1))
        0x00, 0x21, _, 0x11 ->
          Ok(Item(tag, "Start Angle", [IntegerString], vm_1))
        0x00, 0x19, _, 0x44 ->
          Ok(Item(tag, "IRS Data Number", [UnsignedLong], vm_1_to_n))
        0x00, 0x21, _, 0x34 ->
          Ok(Item(tag, "Correction Factor", [DecimalString], vm_1))
        0x00, 0x21, _, 0x32 ->
          Ok(Item(tag, "Length of Topogram", [DecimalString], vm_1))
        0x00, 0x21, _, 0x10 ->
          Ok(Item(tag, "Rotation Angle", [IntegerString], vm_1))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(tag, "Regeneration Software Version", [LongString], vm_1))
        0x00, 0x21, _, 0x60 ->
          Ok(Item(tag, "Range Type Code", [IntegerString], vm_1))
        0x00, 0x21, _, 0xa7 ->
          Ok(Item(tag, "Window Program Name", [LongString], vm_1))
        0x00, 0x21, _, 0xa4 ->
          Ok(Item(tag, "Exemplary Element 3", [LongString], vm_1))
        0x00, 0x19, _, 0x40 ->
          Ok(Item(tag, "Master Control Mask", [UnsignedLong], vm_1))
        0x00, 0x21, _, 0x20 -> Ok(Item(tag, "Scan", [IntegerString], vm_1))
        0x00, 0x21, _, 0xa3 ->
          Ok(Item(tag, "Exemplary Element 2", [IntegerString], vm_1_to_n))
        0x00, 0x21, _, 0x53 ->
          Ok(Item(tag, "Vector Column Step", [IntegerString], vm_1))
        0x00, 0x21, _, 0x48 ->
          Ok(Item(tag, "VOI Stop Column", [IntegerString], vm_1))
        0x00, 0x21, _, 0x70 ->
          Ok(Item(tag, "Object Orientation", [DecimalString], vm_1_to_n))
        0x00, 0x21, _, 0x7a ->
          Ok(Item(tag, "Overlay Threshold", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0x10 ->
          Ok(Item(tag, "Source Side Collimator Aperture", [DecimalString], vm_1))
        0x00, 0x19, _, 0x26 ->
          Ok(Item(tag, "Generator Voltage current", [DecimalString], vm_1))
        0x00, 0x21, _, 0xa0 ->
          Ok(Item(tag, "Field of Interest", [IntegerString], vm_1_to_n))
        0x00, 0x19, _, 0x11 ->
          Ok(Item(
            tag,
            "Detector Side Collimator Aperture",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x19, _, 0x75 ->
          Ok(Item(tag, "Number of Bytes", [IntegerString], vm_1))
        0x00, 0x21, _, 0x52 ->
          Ok(Item(tag, "Vector Start Column", [IntegerString], vm_1))
        0x00, 0x21, _, 0x47 ->
          Ok(Item(tag, "VOI Start Column", [IntegerString], vm_1))
        0x00, 0x19, _, 0x85 ->
          Ok(Item(tag, "Multiscan Reconstruction Width", [IntegerString], vm_1))
        0x00, 0x19, _, 0x71 -> Ok(Item(tag, "Reading Code", [CodeString], vm_1))
        0x00, 0x21, _, 0xa2 ->
          Ok(Item(tag, "Exemplary Element 1", [CodeString], vm_1))
        0x00, 0x21, _, 0x62 ->
          Ok(Item(tag, "Reference Type Code", [IntegerString], vm_1))
        0x00, 0x21, _, 0x7b ->
          Ok(Item(tag, "Surface Threshold", [IntegerString], vm_1_to_n))
        0x00, 0x21, _, 0xa6 ->
          Ok(Item(tag, "Reference Data Set 2", [IntegerString], vm_1))
        0x00, 0x19, _, 0x74 ->
          Ok(Item(tag, "Number of Projections", [IntegerString], vm_1))
        0x00, 0x21, _, 0x72 ->
          Ok(Item(tag, "Light Orientation", [DecimalString], vm_1_to_n))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "Number of Reading", [IntegerString], vm_1))
        0x00, 0x21, _, 0x7c ->
          Ok(Item(tag, "Grey Scale Threshold", [IntegerString], vm_1_to_n))
        0x00, 0x21, _, 0x46 ->
          Ok(Item(tag, "VOI Stop Row", [IntegerString], vm_1))
        0x00, 0x19, _, 0x20 ->
          Ok(Item(tag, "Exposure Time current", [IntegerString], vm_1))
        0x00, 0x19, _, 0x25 ->
          Ok(Item(tag, "Generator Power current", [DecimalString], vm_1))
        0x00, 0x19, _, 0x45 ->
          Ok(Item(tag, "IRS Data Length", [UnsignedLong], vm_1_to_n))
        0x00, 0x19, _, 0x42 ->
          Ok(Item(tag, "Processing Mask", [UnsignedShort], vm_1_to_n))
        0x00, 0x21, _, 0x36 ->
          Ok(Item(tag, "Maximum Table Position", [DecimalString], vm_1))
        0x00, 0x21, _, 0x76 ->
          Ok(Item(tag, "Light Contrast", [DecimalString], vm_1))
        0x00, 0x21, _, 0x40 ->
          Ok(Item(tag, "Table Move Direction Code", [IntegerString], vm_1))
        0x00, 0x19, _, 0x88 ->
          Ok(Item(tag, "Range Number", [IntegerString], vm_1))
        0x00, 0x19, _, 0x21 ->
          Ok(Item(tag, "Exposure current", [IntegerString], vm_1))
        0x00, 0x19, _, 0x81 ->
          Ok(Item(tag, "Reconstruction Algorithm Index", [IntegerString], vm_1))
        0x00, 0x19, _, 0x84 ->
          Ok(Item(
            tag,
            "Multiscan Reconstruction Increment",
            [IntegerString],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "MERGE TECHNOLOGIES, INC." ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 -> Ok(Item(tag, "Unknown", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS Selma" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x06 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x07 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x08 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x00, 0x19, _, 0x26 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x29 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x19, _, 0x30 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x31 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x32 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x33 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x34 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x35 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_RTEN_01" ->
      case g0, g1, e0, e1 {
        0x02, 0x49, _, 0x14 ->
          Ok(Item(tag, "Operator Name", [PersonName], vm_1))
        0x02, 0x49, _, 0x74 ->
          Ok(Item(tag, "Block Shape", [DecimalString], vm_2_to_n))
        0x02, 0x49, _, 0xb6 ->
          Ok(Item(tag, "Leaf Positions", [DecimalString], vm_2_to_n))
        0x02, 0x49, _, 0x36 ->
          Ok(Item(tag, "Z Plus Thickness", [DecimalString], vm_1))
        0x02, 0x49, _, 0xa4 ->
          Ok(Item(tag, "Gantry Angle", [DecimalString], vm_1))
        0x02, 0x49, _, 0x72 -> Ok(Item(tag, "Block Name", [LongString], vm_1))
        0x02, 0x49, _, 0x66 ->
          Ok(Item(tag, "Particle Type", [CodeString], vm_1))
        0x02, 0x49, _, 0x18 ->
          Ok(Item(tag, "Plan Image Sequence", [Sequence], vm_1))
        0x02, 0x49, _, 0xa6 ->
          Ok(Item(tag, "Collimator Angle", [DecimalString], vm_1))
        0x02, 0x49, _, 0x64 -> Ok(Item(tag, "Beam Name", [ShortString], vm_1))
        0x02, 0x49, _, 0x84 ->
          Ok(Item(tag, "Cutout Shape", [DecimalString], vm_2_to_n))
        0x02, 0x49, _, 0x3a ->
          Ok(Item(tag, "Slab Shape", [DecimalString], vm_3_to_n))
        0x02, 0x49, _, 0x92 ->
          Ok(Item(tag, "Collimator Type", [CodeString], vm_1))
        0x02, 0x49, _, 0xa9 ->
          Ok(Item(tag, "Source-Surface Distance", [DecimalString], vm_1))
        0x02, 0x49, _, 0x80 ->
          Ok(Item(tag, "Cutout Sequence", [Sequence], vm_1))
        0x02, 0x49, _, 0x68 ->
          Ok(Item(tag, "Nominal Particle Energy", [DecimalString], vm_1))
        0x02, 0x49, _, 0x1c ->
          Ok(Item(tag, "Build Resolution", [CodeString], vm_1))
        0x02, 0x49, _, 0x51 -> Ok(Item(tag, "Group Name", [ShortString], vm_1))
        0x02, 0x49, _, 0x1a ->
          Ok(Item(tag, "Exam/Series/Image Identifier", [LongString], vm_1))
        0x02, 0x49, _, 0x38 ->
          Ok(Item(tag, "Z Minus Thickness", [DecimalString], vm_1))
        0x02, 0x49, _, 0xac ->
          Ok(Item(tag, "Y Symmetric Opening", [DecimalString], vm_1))
        0x02, 0x49, _, 0x32 ->
          Ok(Item(tag, "Slab Image Sequence", [Sequence], vm_1))
        0x02, 0x49, _, 0x46 ->
          Ok(Item(tag, "Marker Position", [DecimalString], vm_3))
        0x02, 0x49, _, 0x28 ->
          Ok(Item(tag, "Structure Color", [CodeString], vm_1))
        0x02, 0x49, _, 0x40 ->
          Ok(Item(tag, "Marker Sequence", [Sequence], vm_1))
        0x02, 0x49, _, 0xa8 ->
          Ok(Item(tag, "Isocenter Position", [DecimalString], vm_3))
        0x02, 0x49, _, 0x20 ->
          Ok(Item(tag, "Structure Sequence", [Sequence], vm_1))
        0x02, 0x49, _, 0x42 -> Ok(Item(tag, "Marker Name", [ShortString], vm_1))
        0x02, 0x49, _, 0x13 -> Ok(Item(tag, "Plan Creation Time", [Time], vm_1))
        0x02, 0x49, _, 0x50 ->
          Ok(Item(tag, "Beam Group Sequence", [Sequence], vm_1))
        0x02, 0x49, _, 0x11 -> Ok(Item(tag, "Plan Creation Date", [Date], vm_1))
        0x02, 0x49, _, 0x70 -> Ok(Item(tag, "Block Sequence", [Sequence], vm_1))
        0x02, 0x49, _, 0x24 ->
          Ok(Item(tag, "Structure Type", [CodeString], vm_1))
        0x02, 0x49, _, 0x90 ->
          Ok(Item(tag, "Collimator Name", [ShortString], vm_1))
        0x02, 0x49, _, 0x54 -> Ok(Item(tag, "Beam Sequence", [Sequence], vm_1))
        0x02, 0x49, _, 0xae ->
          Ok(Item(tag, "X Positive Jaw Position", [DecimalString], vm_1))
        0x02, 0x49, _, 0xa0 ->
          Ok(Item(tag, "Dynamic Segment Sequence", [Sequence], vm_1))
        0x02, 0x49, _, 0x22 ->
          Ok(Item(tag, "Structure Name", [ShortString], vm_1))
        0x02, 0x49, _, 0x16 -> Ok(Item(tag, "Plan Comment", [LongString], vm_1))
        0x02, 0x49, _, 0x30 -> Ok(Item(tag, "Slab Sequence", [Sequence], vm_1))
        0x02, 0x49, _, 0xb4 ->
          Ok(Item(tag, "Y Negative Jaw Position", [DecimalString], vm_1))
        0x02, 0x49, _, 0xb2 ->
          Ok(Item(tag, "Y Positive Jaw Position", [DecimalString], vm_1))
        0x02, 0x49, _, 0x82 -> Ok(Item(tag, "Cutout Name", [LongString], vm_1))
        0x02, 0x49, _, 0x60 ->
          Ok(Item(tag, "Machine Reference Sequence", [Sequence], vm_1))
        0x02, 0x49, _, 0x62 ->
          Ok(Item(tag, "Machine Name", [ShortString], vm_1))
        0x02, 0x49, _, 0xd0 ->
          Ok(Item(tag, "Treatment Position", [CodeString], vm_1))
        0x02, 0x49, _, 0xa2 ->
          Ok(Item(tag, "Table Angle", [DecimalString], vm_1))
        0x02, 0x49, _, 0x1b ->
          Ok(Item(tag, "Additional Image Identifier", [IntegerString], vm_1))
        0x02, 0x49, _, 0xb0 ->
          Ok(Item(tag, "X Negative Jaw Position", [DecimalString], vm_1))
        0x02, 0x49, _, 0xaa ->
          Ok(Item(tag, "X Symmetric Opening", [DecimalString], vm_1))
        0x02, 0x49, _, 0x44 -> Ok(Item(tag, "Marker Color", [CodeString], vm_1))
        0x02, 0x49, _, 0x52 ->
          Ok(Item(tag, "Group Properties", [CodeString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "TOSHIBA COMAPL HEADER" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "COMAPL Header Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x09 ->
          Ok(Item(tag, "COMAPL Header Version", [LongString], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "", [LongString], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "COMAPL History Information", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x31 -> Ok(Item(tag, "", [LongString], vm_1_to_n))
        0x00, 0x29, _, 0x32 -> Ok(Item(tag, "", [UnsignedLong], vm_1_to_n))
        0x00, 0x29, _, 0x33 -> Ok(Item(tag, "", [UnsignedLong], vm_1_to_n))
        0x00, 0x29, _, 0x34 -> Ok(Item(tag, "", [CodeString], vm_1_to_n))
        _, _, _, _ -> Error(Nil)
      }
    "SPI-P-Private_ICS Release 1;4" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0xdc ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x09 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x0e -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x9c -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0xa0 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xb5 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0xbc -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0xd7 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0xb6 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0x0a ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0xb2 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xbd -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0x06 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0xbe -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xd8 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x0f -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0x00 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0xd6 ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        0x00, 0x29, _, 0x07 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0x0b ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0x02 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0xb3 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0x90 -> Ok(Item(tag, "Unknown", [SignedLong], vm_1))
        0x00, 0x29, _, 0x9a -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0xa1 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xb1 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0xe0 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x00, 0x29, _, 0xda -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x0c ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x00, 0x29, _, 0xd9 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x29, _, 0x08 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x29, _, 0x01 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_2))
        0x00, 0x29, _, 0xdd ->
          Ok(Item(tag, "Unknown", [FloatingPointDouble], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GE ??? From Adantage Review CS" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x30 -> Ok(Item(tag, "CR EDR Mode", [LongString], vm_1))
        0x00, 0x19, _, 0x40 -> Ok(Item(tag, "CR Latitude", [LongString], vm_1))
        0x00, 0x19, _, 0x50 ->
          Ok(Item(tag, "CR Group Number", [LongString], vm_1))
        0x00, 0x19, _, 0x70 ->
          Ok(Item(tag, "CR Image Serial Number", [LongString], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "CR Bar Code Number", [LongString], vm_1))
        0x00, 0x19, _, 0x90 ->
          Ok(Item(tag, "CR Film Output Exposures", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_ADWSoft_DPO1" ->
      case g0, g1, e0, e1 {
        0x00, 0x39, _, 0x80 ->
          Ok(Item(tag, "Private Entity Number", [IntegerString], vm_1))
        0x00, 0x39, _, 0x85 ->
          Ok(Item(tag, "Private Entity Date", [Date], vm_1))
        0x00, 0x39, _, 0x90 ->
          Ok(Item(tag, "Private Entity Time", [Time], vm_1))
        0x00, 0x39, _, 0x95 ->
          Ok(Item(tag, "Private Entity Launch Command", [LongString], vm_1))
        0x00, 0x39, _, 0xaa ->
          Ok(Item(tag, "Private Entity Type", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Siemens Ultrasound Miscellaneous" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x20 -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PHILIPS MR/PART 12" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_3DSTATE_001" ->
      case g0, g1, e0, e1 {
        0x00, 0x47, _, 0xd6 ->
          Ok(Item(tag, "General Description", [ShortText], vm_1))
        0x00, 0x47, _, 0xd7 -> Ok(Item(tag, "TDRT", [CodeString], vm_1))
        0x00, 0x47, _, 0xd8 -> Ok(Item(tag, "NVRP", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0xd9 -> Ok(Item(tag, "CVRPN", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0xda ->
          Ok(Item(tag, "Volume Rendering Presets Sequence", [Sequence], vm_1))
        0x00, 0x47, _, 0xdb -> Ok(Item(tag, "Preset Name", [LongString], vm_1))
        0x00, 0x47, _, 0xdc ->
          Ok(Item(tag, "Opacity Curve X", [SignedShort], vm_1_to_n))
        0x00, 0x47, _, 0xdd ->
          Ok(Item(tag, "Opacity Curve Y", [FloatingPointSingle], vm_1_to_n))
        0x00, 0x47, _, 0xde -> Ok(Item(tag, "NOCP", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0xdf ->
          Ok(Item(tag, "Color Curve X", [SignedShort], vm_1_to_n))
        0x00, 0x47, _, 0xe1 -> Ok(Item(tag, "NCCP", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0xe2 -> Ok(Item(tag, "GSA", [CodeString], vm_1))
        0x00, 0x47, _, 0xe3 -> Ok(Item(tag, "VRSF", [CodeString], vm_1))
        0x00, 0x47, _, 0xe4 -> Ok(Item(tag, "AF", [FloatingPointSingle], vm_1))
        0x00, 0x47, _, 0xe5 -> Ok(Item(tag, "DF", [FloatingPointSingle], vm_1))
        0x00, 0x47, _, 0xe6 -> Ok(Item(tag, "SCF", [FloatingPointSingle], vm_1))
        0x00, 0x47, _, 0xe7 -> Ok(Item(tag, "SPF", [FloatingPointSingle], vm_1))
        0x00, 0x47, _, 0xe8 ->
          Ok(Item(
            tag,
            "Orthogonal Clipping Planes",
            [FloatingPointSingle],
            ValueMultiplicity(24, Some(24)),
          ))
        0x00, 0x47, _, 0xe9 -> Ok(Item(tag, "CP", [FloatingPointSingle], vm_3))
        0x00, 0x47, _, 0xea -> Ok(Item(tag, "CFP", [DecimalString], vm_3))
        0x00, 0x47, _, 0xeb -> Ok(Item(tag, "CVU", [DecimalString], vm_3))
        0x00, 0x47, _, 0xec ->
          Ok(Item(tag, "RFOV", [FloatingPointSingle], vm_1))
        0x00, 0x47, _, 0xed -> Ok(Item(tag, "PPRP", [CodeString], vm_1))
        0x00, 0x47, _, 0xee -> Ok(Item(tag, "3DWW", [DecimalString], vm_1))
        0x00, 0x47, _, 0xef -> Ok(Item(tag, "3DWL", [DecimalString], vm_1))
        0x00, 0x47, _, 0xf0 -> Ok(Item(tag, "BBV", [CodeString], vm_1))
        0x00, 0x47, _, 0xf1 -> Ok(Item(tag, "ERF", [CodeString], vm_1))
        0x00, 0x47, _, 0xf2 -> Ok(Item(tag, "TDRMS", [UnsignedShort], vm_1))
        0x00, 0x47, _, 0xf3 ->
          Ok(Item(tag, "TDSSS", [FloatingPointSingle], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "TOSHIBA MDW HEADER" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x08 ->
          Ok(Item(tag, "Application Header Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x09 ->
          Ok(Item(tag, "Application Header Version", [LongString], vm_1))
        0x00, 0x29, _, 0x10 ->
          Ok(Item(tag, "Image Header Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x11 ->
          Ok(Item(tag, "Image Header Version", [LongString], vm_1))
        0x00, 0x29, _, 0x12 ->
          Ok(Item(tag, "Image Header Info", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x18 ->
          Ok(Item(tag, "Series Header Type", [CodeString], vm_1))
        0x00, 0x29, _, 0x19 ->
          Ok(Item(tag, "Series Header Version", [LongString], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "Series Header Info", [OtherByteString], vm_1))
        0x00, 0x29, _, 0x31 ->
          Ok(Item(tag, "PMTF Information 1", [LongString], vm_1))
        0x00, 0x29, _, 0x32 ->
          Ok(Item(tag, "PMTF Information 2", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x33 ->
          Ok(Item(tag, "PMTF Information 3", [UnsignedLong], vm_1))
        0x00, 0x29, _, 0x34 ->
          Ok(Item(tag, "PMTF Information 4", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Applicare/Centricity Radiology Web/Version 2.0" ->
      case g0, g1, e0, e1 {
        0x41, 0x11, _, 0x01 ->
          Ok(Item(tag, "Secondary Spine Label", [CodeString], vm_1))
        0x41, 0x11, _, 0x02 ->
          Ok(Item(
            tag,
            "Additional tags for Presentation State",
            [IntegerString],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS MED SMS USG ANTARES" ->
      case g0, g1, e0, e1 {
        0x00, 0x19, _, 0x46 ->
          Ok(Item(tag, "Color Flow Smooth Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x80 ->
          Ok(Item(tag, "M-Mode Dynamic Range", [Unknown], vm_1))
        0x00, 0x19, _, 0x2d ->
          Ok(Item(tag, "B-Mode Tint Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x86 ->
          Ok(Item(tag, "M-Mode Tint Type", [Unknown], vm_1))
        0x00, 0x19, _, 0x66 -> Ok(Item(tag, "Doppler Submode", [Unknown], vm_1))
        0x00, 0x19, _, 0x6a ->
          Ok(Item(tag, "Doppler Trace Inverted", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x2a ->
          Ok(Item(tag, "B-Mode Tint Type", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x3a -> Ok(Item(tag, "Image Flag", [Unknown], vm_1))
        0x00, 0x19, _, 0x83 ->
          Ok(Item(tag, "M-Mode Map Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x62 ->
          Ok(Item(tag, "Doppler Wall Filter", [Unknown], vm_1))
        0x00, 0x19, _, 0x44 ->
          Ok(Item(tag, "Color Flow Res/Speed Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x03 -> Ok(Item(tag, "Frame Rate", [Unknown], vm_1))
        0x00, 0x19, _, 0x28 -> Ok(Item(tag, "???", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x65 ->
          Ok(Item(tag, "Doppler Map Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x82 ->
          Ok(Item(tag, "M-Mode Edge Enhance Index", [Unknown], vm_1))
        0x00, 0x19, _, 0xa0 -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x43 ->
          Ok(Item(tag, "Color Flow Overall Gain", [Unknown], vm_1))
        0x00, 0x19, _, 0x49 ->
          Ok(Item(tag, "Color Flow Priority Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x40 ->
          Ok(Item(tag, "Color Flow state", [Unknown], vm_1))
        0x00, 0x19, _, 0x00 ->
          Ok(Item(tag, "Private Creator Version", [ShortString], vm_1))
        0x00, 0x19, _, 0x0c ->
          Ok(Item(tag, "Burned in Graphics", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x48 ->
          Ok(Item(tag, "Color Flow Map Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x23 ->
          Ok(Item(tag, "B-Mode Res/Speed Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x26 ->
          Ok(Item(tag, "B-Mode Map Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x24 ->
          Ok(Item(tag, "B-Mode Edge Enhance Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x47 ->
          Ok(Item(tag, "Color Flow Persistence Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x29 -> Ok(Item(tag, "???", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x0d -> Ok(Item(tag, "SieClear Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x27 -> Ok(Item(tag, "???", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x54 ->
          Ok(Item(tag, "Color Flow Maximum Velocity", [Unknown], vm_1))
        0x00, 0x19, _, 0x31 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x41 ->
          Ok(Item(tag, "Color Flow Wall Filter Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x2e -> Ok(Item(tag, "ClarifyVE Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x61 ->
          Ok(Item(tag, "Doppler Overall Gain", [Unknown], vm_1))
        0x00, 0x19, _, 0x69 ->
          Ok(Item(tag, "Doppler Time/Freq Res Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x22 ->
          Ok(Item(tag, "B-Mode Overall Gain", [Unknown], vm_1))
        0x00, 0x19, _, 0x6c ->
          Ok(Item(tag, "Doppler Tint Type", [UnsignedShort], vm_1))
        0x00, 0x19, _, 0x87 -> Ok(Item(tag, "M-Mode Submode", [Unknown], vm_1))
        0x00, 0x19, _, 0x3b -> Ok(Item(tag, "Unknown", [LongText], vm_1))
        0x00, 0x19, _, 0x20 -> Ok(Item(tag, "B-Mode Submode", [Unknown], vm_1))
        0x00, 0x19, _, 0x25 ->
          Ok(Item(tag, "B-Mode Persistence Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x42 ->
          Ok(Item(tag, "Color Flow Submode", [Unknown], vm_1))
        0x00, 0x19, _, 0x88 ->
          Ok(Item(tag, "M-Mode Tint Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x60 ->
          Ok(Item(tag, "Doppler Dynamic Range", [Unknown], vm_1))
        0x00, 0x19, _, 0x21 ->
          Ok(Item(tag, "B-Mode Dynamic Range", [Unknown], vm_1))
        0x00, 0x19, _, 0x81 ->
          Ok(Item(tag, "M-Mode Overall Gain", [Unknown], vm_1))
        0x00, 0x19, _, 0x72 ->
          Ok(Item(tag, "Doppler Tint Index", [Unknown], vm_1))
        0x00, 0x19, _, 0x63 ->
          Ok(Item(tag, "Doppler Gate Size", [Unknown], vm_1))
        0x00, 0x19, _, 0x67 -> Ok(Item(tag, "Unknown", [UnsignedShort], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_GDXE_FALCON_04" ->
      case g0, g1, e0, e1 {
        0x00, 0x11, _, 0x42 -> Ok(Item(tag, "View IP", [LongString], vm_1))
        0x00, 0x11, _, 0x47 -> Ok(Item(tag, "Unknown", [DecimalString], vm_1))
        0x00, 0x11, _, 0x30 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x11, _, 0x12 ->
          Ok(Item(tag, "Patient Size String", [LongText], vm_1))
        0x00, 0x11, _, 0x27 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x11, _, 0x43 ->
          Ok(Item(
            tag,
            "Key-stone Co-ordinates",
            [IntegerString],
            ValueMultiplicity(24, Some(24)),
          ))
        0x00, 0x11, _, 0x16 ->
          Ok(Item(tag, "Processing Debug Info", [LongText], vm_1))
        0x00, 0x11, _, 0x44 ->
          Ok(Item(tag, "Receptor Type", [CodeString], vm_1))
        0x00, 0x11, _, 0x41 ->
          Ok(Item(
            tag,
            "Sub-image Collimator Vertices",
            [IntegerString],
            ValueMultiplicity(24, Some(24)),
          ))
        0x00, 0x11, _, 0x08 ->
          Ok(Item(tag, "Study DAP", [FloatingPointSingle], vm_1))
        0x00, 0x11, _, 0x06 ->
          Ok(Item(tag, "Image Dose", [DecimalString], vm_1))
        0x00, 0x11, _, 0x10 ->
          Ok(Item(tag, "Total Exposures", [SignedLong], vm_1))
        0x00, 0x11, _, 0x17 ->
          Ok(Item(tag, "Override mode", [CodeString], vm_1))
        0x00, 0x11, _, 0x15 ->
          Ok(Item(tag, "Detector ARC Gain", [DecimalString], vm_1))
        0x00, 0x11, _, 0x33 ->
          Ok(Item(tag, "Detected Exposure Index", [DecimalString], vm_1))
        0x00, 0x11, _, 0x34 ->
          Ok(Item(tag, "Compensated Detector Exposure", [DecimalString], vm_1))
        0x00, 0x11, _, 0x04 ->
          Ok(Item(tag, "Acquisition Type", [CodeString], vm_1))
        0x00, 0x11, _, 0x03 ->
          Ok(Item(tag, "Processed Series UID", [UniqueIdentifier], vm_1))
        0x00, 0x11, _, 0x14 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x00, 0x11, _, 0x36 ->
          Ok(Item(tag, "Median Anatomy Count Value", [DecimalString], vm_1))
        0x00, 0x11, _, 0x09 ->
          Ok(Item(tag, "Non-Digital Exposures", [SignedLong], vm_1))
        0x00, 0x11, _, 0x38 ->
          Ok(Item(tag, "Shift Vector for Pasting", [SignedLong], vm_6))
        0x00, 0x11, _, 0x37 ->
          Ok(Item(
            tag,
            "DEI lower and upper limit values",
            [DecimalString],
            vm_2,
          ))
        0x00, 0x11, _, 0x32 ->
          Ok(Item(
            tag,
            "Adjusted Field of View",
            [IntegerString],
            ValueMultiplicity(8, Some(8)),
          ))
        0x00, 0x11, _, 0x28 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x11, _, 0x29 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x11, _, 0x31 ->
          Ok(Item(
            tag,
            "Detected Field of View",
            [IntegerString],
            ValueMultiplicity(8, Some(8)),
          ))
        0x00, 0x11, _, 0x35 ->
          Ok(Item(tag, "Uncompensated Detector Exposure", [DecimalString], vm_1))
        0x00, 0x11, _, 0x19 ->
          Ok(Item(tag, "Film Speed Selection", [DecimalString], vm_1))
        0x00, 0x11, _, 0x05 ->
          Ok(Item(tag, "Acquisition UID", [UniqueIdentifier], vm_1))
        0x00, 0x11, _, 0x07 ->
          Ok(Item(tag, "Study Dose", [FloatingPointSingle], vm_1))
        0x00, 0x11, _, 0x39 ->
          Ok(Item(tag, "Image Number in Pasting", [CodeString], vm_1))
        0x00, 0x11, _, 0x13 ->
          Ok(Item(tag, "SPS UID", [UniqueIdentifier], vm_1))
        0x00, 0x11, _, 0x46 -> Ok(Item(tag, "Unknown", [LongString], vm_1_to_n))
        0x00, 0x11, _, 0x11 -> Ok(Item(tag, "ROI", [LongText], vm_1))
        0x00, 0x11, _, 0x40 ->
          Ok(Item(tag, "Pasting Overlap", [SignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_CT_CARDIAC_001" ->
      case g0, g1, e0, e1 {
        0x00, 0x49, _, 0x01 ->
          Ok(Item(tag, "CT Cardiac Sequence", [Sequence], vm_1))
        0x00, 0x49, _, 0x02 ->
          Ok(Item(tag, "HeartRateAtConfirm", [CodeString], vm_1))
        0x00, 0x49, _, 0x03 ->
          Ok(Item(
            tag,
            "AvgHeartRatePriorToConfirm",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x49, _, 0x04 ->
          Ok(Item(tag, "MinHeartRatePriorToConfirm", [CodeString], vm_1))
        0x00, 0x49, _, 0x05 ->
          Ok(Item(tag, "MaxHeartRatePriorToConfirm", [CodeString], vm_1))
        0x00, 0x49, _, 0x06 ->
          Ok(Item(
            tag,
            "StdDevHeartRatePriorToConfirm",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x49, _, 0x07 ->
          Ok(Item(
            tag,
            "NumHeartRateSamplesPriorToConfirm",
            [UnsignedShort],
            vm_1,
          ))
        0x00, 0x49, _, 0x08 ->
          Ok(Item(tag, "AutoHeartRateDetectPredict", [CodeString], vm_1))
        0x00, 0x49, _, 0x09 ->
          Ok(Item(tag, "SystemOptimizedHeartRate", [CodeString], vm_1))
        0x00, 0x49, _, 0x0a ->
          Ok(Item(tag, "EkgMonitorType", [ShortText], vm_1))
        0x00, 0x49, _, 0x0b ->
          Ok(Item(tag, "NumReconSectors", [CodeString], vm_1))
        0x00, 0x49, _, 0x0c ->
          Ok(Item(
            tag,
            "RpeakTimeStamps",
            [FloatingPointSingle],
            ValueMultiplicity(256, Some(256)),
          ))
        _, _, _, _ -> Error(Nil)
      }
    "SECTRA_OverlayInfo_01" ->
      case g0, g1, e0, e1 {
        0x60, 0x01, _, 0x01 ->
          Ok(Item(tag, "Sectra Overlay", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "CAMTRONICS" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x10 -> Ok(Item(tag, "Commentline", [LongText], vm_1))
        0x00, 0x29, _, 0x20 ->
          Ok(Item(tag, "Edge Enhancement Coefficient", [DecimalString], vm_1))
        0x00, 0x29, _, 0x50 -> Ok(Item(tag, "Scene Text", [LongText], vm_1))
        0x00, 0x29, _, 0x60 -> Ok(Item(tag, "Image Text", [LongText], vm_1))
        0x00, 0x29, _, 0x70 ->
          Ok(Item(tag, "Pixel Shift Horizontal", [IntegerString], vm_1))
        0x00, 0x29, _, 0x80 ->
          Ok(Item(tag, "Pixel Shift Vertical", [IntegerString], vm_1))
        0x00, 0x29, _, 0x90 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips Imaging DD 001" ->
      case g0, g1, e0, e1 {
        0x20, 0x01, _, 0x60 ->
          Ok(Item(tag, "Number of Stacks", [SignedLong], vm_1))
        0x20, 0x01, _, 0x64 -> Ok(Item(tag, "Text Type", [ShortString], vm_1))
        0x20, 0x01, _, 0x22 ->
          Ok(Item(tag, "Water Fat Shift", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0x93 -> Ok(Item(tag, "Text Style", [LongString], vm_1))
        0x20, 0x01, _, 0x33 ->
          Ok(Item(tag, "Stack Radial Axis", [CodeString], vm_1_to_n))
        0x20, 0x05, _, 0x20 ->
          Ok(Item(tag, "Number of Chemical Shifts", [SignedLong], vm_1))
        0x20, 0x01, _, 0x0e -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x01, _, 0xf2 ->
          Ok(Item(
            tag,
            "Retrospective Motion Correction",
            [FloatingPointSingle],
            vm_1,
          ))
        0x20, 0x01, _, 0x6b ->
          Ok(Item(tag, "Has Edge Enhancement Sequence", [Sequence], vm_1))
        0x20, 0x01, _, 0x1a ->
          Ok(Item(tag, "PC Velocity", [FloatingPointSingle], vm_1_to_n))
        0x20, 0x01, _, 0x4b ->
          Ok(Item(tag, "Poly Line Interpolation Method", [CodeString], vm_1))
        0x20, 0x01, _, 0x13 -> Ok(Item(tag, "EPI Factor", [SignedLong], vm_1))
        0x20, 0x01, _, 0x30 ->
          Ok(Item(tag, "Log Subtraction Gain Step", [UnsignedLong], vm_1))
        0x20, 0x01, _, 0x74 ->
          Ok(Item(tag, "Window Center Sub", [DecimalString], vm_1_to_n))
        0x20, 0x01, _, 0x5f -> Ok(Item(tag, "Stack Sequence", [Sequence], vm_1))
        0x20, 0x01, _, 0xa1 -> Ok(Item(tag, "Is Raw Image", [CodeString], vm_1))
        0x20, 0x01, _, 0x9b ->
          Ok(Item(tag, "Graphic Number", [UnsignedLong], vm_1))
        0x20, 0x01, _, 0x06 ->
          Ok(Item(tag, "Image Enhanced", [CodeString], vm_1))
        0x20, 0x01, _, 0x7e ->
          Ok(Item(tag, "Edge Enhancement Gain Taste", [UnsignedShort], vm_1))
        0x20, 0x01, _, 0xa4 ->
          Ok(Item(tag, "Text Color Background", [UnsignedLong], vm_1))
        0x20, 0x01, _, 0x6a -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x01, _, 0x26 ->
          Ok(Item(
            tag,
            "Presentation State Subtraction Active",
            [CodeString],
            vm_1,
          ))
        0x20, 0x05, _, 0x9f ->
          Ok(Item(
            tag,
            "Spectral Selective Excitation Pulse",
            [CodeString],
            vm_1,
          ))
        0x20, 0x01, _, 0x5a ->
          Ok(Item(tag, "Graphic Annotation Model", [ShortText], vm_1))
        0x20, 0x01, _, 0x29 ->
          Ok(Item(
            tag,
            "Edge Enhancement Gain Factor Non Sub",
            [FloatingPointSingle],
            vm_1,
          ))
        0x20, 0x01, _, 0x4e ->
          Ok(Item(tag, "Window Smoothing Taste", [CodeString], vm_1))
        0x20, 0x01, _, 0x14 ->
          Ok(Item(tag, "Number of Echoes", [SignedLong], vm_1))
        0x20, 0x01, _, 0x68 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x01, _, 0x21 -> Ok(Item(tag, "SPIR", [CodeString], vm_1))
        0x20, 0x01, _, 0x7f ->
          Ok(Item(tag, "Edge Enhancement Gain Taste Sub", [UnsignedShort], vm_1))
        0x20, 0x01, _, 0x94 ->
          Ok(Item(tag, "Processing Order Specialization", [LongString], vm_1))
        0x20, 0x01, _, 0x2c ->
          Ok(Item(tag, "Harmonization Factor", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0x48 ->
          Ok(Item(tag, "Graphic Annotation ID", [SignedShort], vm_1))
        0x20, 0x01, _, 0x24 -> Ok(Item(tag, "Interactive", [CodeString], vm_1))
        0x20, 0x01, _, 0x1e -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x05, _, 0x8b ->
          Ok(Item(tag, "Transmitting Coil", [ShortString], vm_1))
        0x20, 0x01, _, 0x04 ->
          Ok(Item(tag, "Diffusion Direction", [CodeString], vm_1))
        0x20, 0x01, _, 0x82 ->
          Ok(Item(tag, "Echo Train Length", [IntegerString], vm_1))
        0x20, 0x01, _, 0x6e -> Ok(Item(tag, "Series Type", [ShortString], vm_1))
        0x20, 0x01, _, 0x1f ->
          Ok(Item(tag, "Respiration Sync", [CodeString], vm_1))
        0x20, 0x01, _, 0x8b -> Ok(Item(tag, "Unknown", [ShortString], vm_1))
        0x20, 0x01, _, 0x47 ->
          Ok(Item(tag, "Graphic Line Width", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0x85 ->
          Ok(Item(tag, "Magnetic Field Strength", [DecimalString], vm_1))
        0x20, 0x01, _, 0x05 -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x36 ->
          Ok(Item(tag, "Stack Type", [CodeString], vm_1_to_n))
        0x20, 0x01, _, 0x67 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x01, _, 0xa3 ->
          Ok(Item(tag, "Text Color Foreground", [UnsignedLong], vm_1))
        0x20, 0x01, _, 0x0f -> Ok(Item(tag, "Unknown", [SignedShort], vm_1))
        0x20, 0x01, _, 0x65 -> Ok(Item(tag, "Unknown", [Sequence], vm_1))
        0x20, 0x01, _, 0x2a ->
          Ok(Item(tag, "Edge Enhancement Taste Adapt Sub", [CodeString], vm_1))
        0x20, 0x01, _, 0xc1 ->
          Ok(Item(tag, "Nested Object Type Name", [LongString], vm_1))
        0x20, 0x01, _, 0x2b ->
          Ok(Item(tag, "Edge Enhancement Taste Non Sub", [CodeString], vm_1))
        0x20, 0x01, _, 0x80 ->
          Ok(Item(tag, "Text Anchor Point Alignment", [LongString], vm_1))
        0x20, 0x01, _, 0x0b ->
          Ok(Item(tag, "Slice Orientation", [CodeString], vm_1))
        0x20, 0x01, _, 0x46 ->
          Ok(Item(tag, "Graphic Line Style", [CodeString], vm_1))
        0x20, 0x01, _, 0x37 ->
          Ok(Item(tag, "Mixing Operation Type", [CodeString], vm_1))
        0x20, 0x01, _, 0xcc -> Ok(Item(tag, "Unknown", [ShortText], vm_1))
        0x20, 0x01, _, 0x28 ->
          Ok(Item(
            tag,
            "Edge Enhancement Gain Factor Sub",
            [FloatingPointSingle],
            vm_1,
          ))
        0x20, 0x01, _, 0x17 ->
          Ok(Item(tag, "Number of Phases MR", [SignedLong], vm_1))
        0x20, 0x01, _, 0x69 ->
          Ok(Item(tag, "Display Shutter Sequence", [Sequence], vm_1))
        0x20, 0x01, _, 0x4d ->
          Ok(Item(tag, "Poly Line End Point Style", [CodeString], vm_1))
        0x20, 0x01, _, 0x88 ->
          Ok(Item(tag, "Number of Averages", [DecimalString], vm_1))
        0x20, 0x01, _, 0x1d ->
          Ok(Item(tag, "Reconstruction Number MR", [IntegerString], vm_1))
        0x20, 0x01, _, 0x84 ->
          Ok(Item(tag, "Inversion Time", [DecimalString], vm_1))
        0x20, 0x01, _, 0x16 ->
          Ok(Item(tag, "Number of PC Directions", [SignedShort], vm_1))
        0x20, 0x01, _, 0x23 ->
          Ok(Item(tag, "Flip Angle Philips", [DecimalString], vm_1))
        0x20, 0x01, _, 0x75 ->
          Ok(Item(tag, "Window Width Sub", [DecimalString], vm_1_to_n))
        0x20, 0x01, _, 0x42 ->
          Ok(Item(tag, "Subtraction Land Marking Active", [CodeString], vm_1))
        0x20, 0x01, _, 0x79 ->
          Ok(Item(tag, "Harmonisation Sequence", [Sequence], vm_1))
        0x20, 0x01, _, 0x53 ->
          Ok(Item(tag, "Window Invert", [CodeString], vm_1))
        0x20, 0x01, _, 0x87 ->
          Ok(Item(tag, "Imaged Nucleus", [ShortString], vm_1))
        0x20, 0x01, _, 0x2d ->
          Ok(Item(tag, "Number of Stack Slices", [SignedShort], vm_1))
        0x20, 0x01, _, 0x7b ->
          Ok(Item(tag, "Acquisition Number", [IntegerString], vm_1))
        0x20, 0x01, _, 0xf1 ->
          Ok(Item(
            tag,
            "Prospective Motion Correction",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x20, 0x01, _, 0x5d ->
          Ok(Item(tag, "Measurement Text Units", [ShortText], vm_1))
        0x20, 0x01, _, 0x02 ->
          Ok(Item(tag, "Chemical Shift Number MR", [IntegerString], vm_1))
        0x20, 0x05, _, 0x33 ->
          Ok(Item(tag, "Scan Duration", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0x89 ->
          Ok(Item(tag, "Phase FOV Percent", [DecimalString], vm_1))
        0x20, 0x01, _, 0x56 ->
          Ok(Item(tag, "Graphic Type (Private)", [CodeString], vm_1))
        0x20, 0x01, _, 0x81 ->
          Ok(Item(tag, "Number of Dynamic Scans", [IntegerString], vm_1))
        0x20, 0x01, _, 0x6f ->
          Ok(Item(tag, "Mixing Sequence", [Sequence], vm_1))
        0x20, 0x01, _, 0x55 ->
          Ok(Item(tag, "Graphic Line Color", [CodeString], vm_1))
        0x20, 0x01, _, 0xa5 ->
          Ok(Item(tag, "Text Color Shadow", [UnsignedLong], vm_1))
        0x20, 0x01, _, 0x1c ->
          Ok(Item(tag, "Prepulse Type", [CodeString], vm_1))
        0x20, 0x01, _, 0x08 ->
          Ok(Item(tag, "Phase Number", [IntegerString], vm_1))
        0x20, 0x01, _, 0x19 ->
          Ok(Item(tag, "Partial Matrix Scanned", [CodeString], vm_1))
        0x20, 0x01, _, 0x34 ->
          Ok(Item(tag, "Mixing Mask Operation", [CodeString], vm_1))
        0x20, 0x01, _, 0x15 ->
          Ok(Item(tag, "Number of Locations", [SignedShort], vm_1))
        0x20, 0x01, _, 0x1b ->
          Ok(Item(tag, "Prepulse Delay", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0x6d -> Ok(Item(tag, "Text Font", [LongString], vm_1))
        0x20, 0x01, _, 0x0c -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x01, _, 0x0a ->
          Ok(Item(tag, "Slice Number MR", [IntegerString], vm_1))
        0x20, 0x01, _, 0x35 ->
          Ok(Item(tag, "Stack Slice Number", [SignedShort], vm_1_to_n))
        0x20, 0x01, _, 0x11 ->
          Ok(Item(tag, "Diffusion Echo Time", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0x9f ->
          Ok(Item(tag, "Pixel Processing Kernel Size", [UnsignedShort], vm_2))
        0x20, 0x01, _, 0x12 ->
          Ok(Item(tag, "Dynamic Series", [CodeString], vm_1))
        0x20, 0x01, _, 0x71 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x01, _, 0x50 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x05, _, 0x14 -> Ok(Item(tag, "Diffusion", [CodeString], vm_1))
        0x20, 0x01, _, 0x52 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x20, 0x01, _, 0x4f ->
          Ok(Item(tag, "Harmonization Offset", [FloatingPointDouble], vm_1))
        0x20, 0x01, _, 0x9a ->
          Ok(Item(tag, "Graphic Number Sequence", [Sequence], vm_1))
        0x20, 0x01, _, 0x62 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x01, _, 0x7a ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0xa2 ->
          Ok(Item(tag, "LOG Subtraction Curve Taste", [UnsignedShort], vm_1))
        0x20, 0x01, _, 0x2f ->
          Ok(Item(tag, "Harmonization Gain", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0x83 ->
          Ok(Item(tag, "Imaging Frequency", [DecimalString], vm_1))
        0x20, 0x05, _, 0x30 ->
          Ok(Item(tag, "Repetition Time", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0x86 -> Ok(Item(tag, "Unknown", [IntegerString], vm_1))
        0x20, 0x01, _, 0x76 -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        0x20, 0x01, _, 0x09 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0x77 -> Ok(Item(tag, "GL TrafoType", [CodeString], vm_1))
        0x20, 0x01, _, 0xda -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x01, _, 0x3a -> Ok(Item(tag, "Pixel Shift", [CodeString], vm_1))
        0x20, 0x01, _, 0x5e ->
          Ok(Item(tag, "Measurement Text Type", [ShortText], vm_1))
        0x20, 0x01, _, 0x73 ->
          Ok(Item(tag, "Referenced Mask Image Sequence", [Sequence], vm_1))
        0x20, 0x01, _, 0x31 ->
          Ok(Item(tag, "Mixing NR of Mask Image Numbers", [UnsignedShort], vm_1))
        0x20, 0x01, _, 0x4c ->
          Ok(Item(tag, "Poly Line Begin Point Style", [CodeString], vm_1))
        0x20, 0x01, _, 0x8a ->
          Ok(Item(tag, "Sampling Percent", [DecimalString], vm_1))
        0x20, 0x01, _, 0x32 ->
          Ok(Item(tag, "Stack Radial Angle", [FloatingPointSingle], vm_1_to_n))
        0x20, 0x01, _, 0x25 ->
          Ok(Item(tag, "Echo Time Display MR", [ShortString], vm_1))
        0x20, 0x01, _, 0x9c -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x20, 0x01, _, 0x3f ->
          Ok(Item(tag, "Interpolation Method", [CodeString], vm_1))
        0x20, 0x01, _, 0x01 ->
          Ok(Item(tag, "Chemical Shift", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0x97 -> Ok(Item(tag, "Nucleus", [ShortString], vm_1))
        0x20, 0x01, _, 0x63 ->
          Ok(Item(tag, "Examination Source", [CodeString], vm_1))
        0x20, 0x01, _, 0x03 ->
          Ok(Item(tag, "Diffusion B-Factor", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0x9d ->
          Ok(Item(tag, "PIIM Subtraction Type", [LongString], vm_1))
        0x20, 0x01, _, 0x39 ->
          Ok(Item(tag, "Unknown", [FloatingPointSingle], vm_1))
        0x20, 0x05, _, 0x35 -> Ok(Item(tag, "Data Type", [CodeString], vm_1))
        0x20, 0x01, _, 0x10 -> Ok(Item(tag, "Cardiac Sync", [CodeString], vm_1))
        0x20, 0x05, _, 0xa1 ->
          Ok(Item(tag, "Syncra Scan Type", [CodeString], vm_1))
        0x20, 0x01, _, 0x61 -> Ok(Item(tag, "Unknown", [CodeString], vm_1))
        0x20, 0x01, _, 0x20 ->
          Ok(Item(tag, "Scanning Technique Description MR", [LongString], vm_1))
        0x20, 0x01, _, 0x18 ->
          Ok(Item(tag, "Number of Slices MR", [SignedLong], vm_1))
        0x20, 0x01, _, 0x07 ->
          Ok(Item(tag, "Image Type ED ES", [CodeString], vm_1))
        0x20, 0x01, _, 0x3d -> Ok(Item(tag, "Unknown", [UnsignedLong], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Philips EV Imaging DD 022" ->
      case g0, g1, e0, e1 {
        0x20, 0x07, _, 0x00 -> Ok(Item(tag, "", [ShortText], vm_1))
        0x20, 0x07, _, 0x12 ->
          Ok(Item(tag, "Volume Sequence Capture", [Unknown], vm_1))
        0x20, 0x07, _, 0x17 ->
          Ok(Item(tag, "Original SOP Instance", [Unknown], vm_1))
        0x20, 0x07, _, 0x33 -> Ok(Item(tag, "", [LongString], vm_1))
        0x20, 0x07, _, 0x34 -> Ok(Item(tag, "", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Silhouette Graphics Export V1.0" ->
      case g0, g1, e0, e1 {
        0x00, 0x29, _, 0x00 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "BioPri" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x00 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x01 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x02 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x03 -> Ok(Item(tag, "Unknown", [LongString], vm_1_to_n))
        0x00, 0x09, _, 0x04 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x05 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x07 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x08 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x09 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS DICOM" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x10 -> Ok(Item(tag, "Unknown", [Unknown], vm_1))
        0x00, 0x09, _, 0x12 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Applicare/RadWorks/Version 5.0" ->
      case g0, g1, e0, e1 {
        0x31, 0x09, _, 0x27 -> Ok(Item(tag, "<internal", [Sequence], vm_1))
        0x31, 0x09, _, 0x09 -> Ok(Item(tag, "Folder", [LongString], vm_1))
        0x31, 0x09, _, 0x06 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x09, _, 0x08 ->
          Ok(Item(tag, "Receive Origin", [LongString], vm_1))
        0x31, 0x09, _, 0x2c -> Ok(Item(tag, "Archive Flag", [LongString], vm_1))
        0x31, 0x09, _, 0x19 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x31, 0x09, _, 0x25 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x31, 0x09, _, 0x22 ->
          Ok(Item(tag, "<internal", [ApplicationEntity], vm_1))
        0x31, 0x09, _, 0x32 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x09, _, 0x24 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x31, 0x09, _, 0x0a -> Ok(Item(tag, "Receive Date", [Date], vm_1))
        0x31, 0x09, _, 0x41 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x09, _, 0x21 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x09, _, 0x11 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x31, 0x09, _, 0x07 -> Ok(Item(tag, "<internal", [UnsignedLong], vm_1))
        0x31, 0x09, _, 0xef -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x09, _, 0x42 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x09, _, 0x13 -> Ok(Item(tag, "<internal", [Date], vm_1))
        0x31, 0x09, _, 0x12 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x31, 0x09, _, 0x01 -> Ok(Item(tag, "<internal", [ShortText], vm_1))
        0x31, 0x09, _, 0x0e -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x09, _, 0x30 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x31, 0x09, _, 0x2a -> Ok(Item(tag, "Send Flag", [LongString], vm_1))
        0x31, 0x09, _, 0x0c -> Ok(Item(tag, "Prior", [CodeString], vm_1))
        0x31, 0x09, _, 0x38 -> Ok(Item(tag, "<internal", [ShortString], vm_1))
        0x31, 0x09, _, 0x43 ->
          Ok(Item(tag, "Archive Status", [CodeString], vm_1))
        0x31, 0x09, _, 0x40 -> Ok(Item(tag, "<internal", [IntegerString], vm_1))
        0x31, 0x09, _, 0x04 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x09, _, 0x26 ->
          Ok(Item(tag, "<internal", [UniqueIdentifier], vm_1))
        0x31, 0x09, _, 0x0d -> Ok(Item(tag, "STAT Study", [CodeString], vm_1))
        0x31, 0x09, _, 0x36 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x31, 0x09, _, 0x2b -> Ok(Item(tag, "Print Flag", [LongString], vm_1))
        0x31, 0x09, _, 0x33 ->
          Ok(Item(tag, "Request Storage Commitment", [CodeString], vm_1))
        0x31, 0x09, _, 0x03 -> Ok(Item(tag, "Delete Lock", [CodeString], vm_1))
        0x31, 0x09, _, 0x10 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x09, _, 0x05 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x09, _, 0x31 -> Ok(Item(tag, "<internal", [CodeString], vm_1))
        0x31, 0x09, _, 0x0b -> Ok(Item(tag, "Receive Time", [Time], vm_1))
        0x31, 0x09, _, 0x14 -> Ok(Item(tag, "<internal", [Time], vm_1))
        0x31, 0x09, _, 0x23 -> Ok(Item(tag, "<internal", [UnsignedShort], vm_1))
        0x31, 0x09, _, 0x34 ->
          Ok(Item(tag, "Requested Compression", [CodeString], vm_1))
        0x31, 0x09, _, 0x20 ->
          Ok(Item(tag, "<internal", [UniqueIdentifier], vm_1))
        0x31, 0x09, _, 0x37 ->
          Ok(Item(tag, "<internal", [UniqueIdentifier], vm_1))
        0x31, 0x09, _, 0x39 -> Ok(Item(tag, "<internal", [ShortString], vm_1))
        0x31, 0x09, _, 0xee ->
          Ok(Item(tag, "<internal", [UniqueIdentifier], vm_1))
        0x31, 0x09, _, 0x02 ->
          Ok(Item(tag, "NEW/SEEN Status", [ShortString], vm_1))
        0x31, 0x09, _, 0x29 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        0x31, 0x09, _, 0x35 -> Ok(Item(tag, "<internal", [Sequence], vm_1))
        0x31, 0x09, _, 0x28 -> Ok(Item(tag, "<internal", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "FFP DATA" ->
      case g0, g1, e0, e1 {
        0x00, 0x09, _, 0x01 ->
          Ok(Item(tag, "CR Header Information", [Unknown], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_PARM_01" ->
      case g0, g1, e0, e1 {
        0x00, 0x43, _, 0x90 ->
          Ok(Item(tag, "SAR Definition", [LongString], vm_1_to_n))
        0x00, 0x43, _, 0x03 ->
          Ok(Item(tag, "Gradient offset in Y", [SignedShort], vm_1))
        0x20, 0x01, _, 0x60 ->
          Ok(Item(tag, "BW Image Type", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x0a ->
          Ok(Item(tag, "Type of receiver used", [SignedShort], vm_1))
        0x00, 0x43, _, 0x4b ->
          Ok(Item(tag, "DAS xm pattern", [SignedLong], vm_4))
        0x00, 0x43, _, 0x73 ->
          Ok(Item(tag, "Experiment Type", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x9b ->
          Ok(Item(tag, "NPW factor", [DecimalString], vm_1))
        0x00, 0x43, _, 0x9a ->
          Ok(Item(tag, "Rx Stack Identification", [IntegerString], vm_1))
        0x00, 0x43, _, 0x29 ->
          Ok(Item(tag, "Histogram tables", [OtherByteString], vm_1))
        0x20, 0x01, _, 0x72 ->
          Ok(Item(tag, "Paradigm Name", [LongString], vm_1))
        0x20, 0x01, _, 0x93 -> Ok(Item(tag, "Tracts", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x7e ->
          Ok(Item(tag, "PACC specific information", [LongString], vm_1_to_n))
        0x00, 0x43, _, 0x6d -> Ok(Item(tag, "Area Size", [IntegerString], vm_1))
        0x00, 0x43, _, 0xa5 ->
          Ok(Item(
            tag,
            "Duration of the label or control pulse",
            [IntegerString],
            vm_1,
          ))
        0x00, 0x43, _, 0x88 ->
          Ok(Item(
            tag,
            "PURE Acquisition Calibration Series UID",
            [UniqueIdentifier],
            vm_1,
          ))
        0x00, 0x43, _, 0xa1 ->
          Ok(Item(
            tag,
            "Spectroscopy Default Display Sequence",
            [Sequence],
            vm_1,
          ))
        0x00, 0x43, _, 0x78 ->
          Ok(Item(tag, "Application Version", [ShortString], vm_1))
        0x00, 0x43, _, 0x01 ->
          Ok(Item(tag, "Bitmap of prescan options", [SignedShort], vm_1))
        0x00, 0x43, _, 0x1e ->
          Ok(Item(tag, "Delta Start Time [msec]", [DecimalString], vm_1))
        0x00, 0x43, _, 0x2d ->
          Ok(Item(
            tag,
            "Filter Mode (String slop field 1 in legacy GE MR",
            [ShortString],
            vm_1,
          ))
        0x00, 0x43, _, 0x42 ->
          Ok(Item(tag, "DAS trigger source", [SignedLong], vm_4))
        0x00, 0x43, _, 0x68 ->
          Ok(Item(tag, "XT Correction Indicator", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x38 ->
          Ok(Item(
            tag,
            "User data 25...User data 48 {User48=Effective Resolution for spiral}",
            [FloatingPointSingle],
            ValueMultiplicity(24, Some(24)),
          ))
        0x00, 0x43, _, 0x19 ->
          Ok(Item(tag, "Number of BBH chains to blend", [SignedShort], vm_1))
        0x00, 0x43, _, 0x30 ->
          Ok(Item(tag, "Vas collapse flag", [SignedShort], vm_1))
        0x00, 0x43, _, 0x65 ->
          Ok(Item(tag, "Motion Correction Indicator", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x13 ->
          Ok(Item(tag, "Decon kernel parameters", [SignedShort], vm_5))
        0x00, 0x43, _, 0x83 ->
          Ok(Item(tag, "Asset R Factors", [DecimalString], vm_1_to_2))
        0x00, 0x43, _, 0x31 ->
          Ok(Item(tag, "Recon Center Coordinates", [DecimalString], vm_2))
        0x20, 0x01, _, 0x13 ->
          Ok(Item(tag, "Application Name", [ShortString], vm_1))
        0x00, 0x43, _, 0x7d ->
          Ok(Item(tag, "Recon mode flag word", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x9f ->
          Ok(Item(tag, "Research Tag 4", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x33 ->
          Ok(Item(tag, "Neg_scanspacing", [FloatingPointSingle], vm_1))
        0x00, 0x43, _, 0x02 ->
          Ok(Item(tag, "Gradient offset in X", [SignedShort], vm_1))
        0x00, 0x43, _, 0xa4 ->
          Ok(Item(
            tag,
            "Detailed text for ASL labeling technique",
            [LongString],
            vm_1,
          ))
        0x20, 0x01, _, 0xa1 ->
          Ok(Item(
            tag,
            "Registration Parameters",
            [FloatingPointSingle],
            vm_1_to_n,
          ))
        0x00, 0x43, _, 0x86 ->
          Ok(Item(tag, "Debug Data (binary format)", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x75 ->
          Ok(Item(tag, "#active volumes", [UnsignedShort], vm_1))
        0x00, 0x51, _, 0x0a ->
          Ok(Item(tag, "Store level of Functional Image", [SignedLong], vm_1))
        0x00, 0x43, _, 0x89 ->
          Ok(Item(
            tag,
            "Governing Body, dB/dt, and SAR definition",
            [LongString],
            vm_3,
          ))
        0x00, 0x43, _, 0x7f ->
          Ok(Item(tag, "Reserved", [DecimalString], vm_1_to_n))
        0x00, 0x43, _, 0x98 ->
          Ok(Item(
            tag,
            "ASSET Acquisition Calibration Series UID",
            [UniqueIdentifier],
            vm_1,
          ))
        0x00, 0x51, _, 0x0b ->
          Ok(Item(
            tag,
            "Store B-Value with Functional Image",
            [FloatingPointSingle],
            vm_1,
          ))
        0x00, 0x43, _, 0x60 ->
          Ok(Item(
            tag,
            "Slop_int_10...slop_int_17",
            [IntegerString],
            ValueMultiplicity(8, Some(8)),
          ))
        0x20, 0x01, _, 0x14 ->
          Ok(Item(tag, "Application Version", [ShortString], vm_1))
        0x00, 0x43, _, 0x93 ->
          Ok(Item(
            tag,
            "Spectro Quantitation Values",
            [DecimalString],
            vm_1_to_n,
          ))
        0x20, 0x01, _, 0x21 ->
          Ok(Item(tag, "Referenced Series UID", [UniqueIdentifier], vm_1_to_n))
        0x00, 0x43, _, 0x49 ->
          Ok(Item(tag, "DAS auto zero", [SignedLong], vm_4))
        0x00, 0x43, _, 0x67 ->
          Ok(Item(tag, "IBO Correction Indicator", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x1a ->
          Ok(Item(tag, "Starting channel number", [SignedLong], vm_1))
        0x20, 0x01, _, 0x91 ->
          Ok(Item(tag, "Motion Plot", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x70 ->
          Ok(Item(tag, "Paradigm Name", [LongString], vm_1))
        0x20, 0x01, _, 0x94 -> Ok(Item(tag, "Report", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x6a ->
          Ok(Item(tag, "AV Correction Indicator", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x48 -> Ok(Item(tag, "DAS reg xm", [SignedLong], vm_4))
        0x00, 0x43, _, 0x8a ->
          Ok(Item(
            tag,
            "Private In-Plane Phase Encoding Direction",
            [CodeString],
            vm_1,
          ))
        0x00, 0x43, _, 0x8b ->
          Ok(Item(tag, "FMRI Binary Data Block", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x4d ->
          Ok(Item(
            tag,
            "Start scan to X-ray on delay",
            [FloatingPointSingle],
            vm_4,
          ))
        0x20, 0x01, _, 0x90 ->
          Ok(Item(tag, "Processing parameters", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x1d -> Ok(Item(tag, "Level value", [SignedShort], vm_1))
        0x00, 0x43, _, 0x7c ->
          Ok(Item(tag, "Delay after slice group", [FloatingPointSingle], vm_1))
        0x00, 0x43, _, 0x44 ->
          Ok(Item(tag, "DAS output source", [SignedLong], vm_4))
        0x00, 0x43, _, 0xa2 ->
          Ok(Item(tag, "MEG Data", [DecimalString], vm_1_to_n))
        0x00, 0x43, _, 0x21 ->
          Ok(Item(tag, "Corrected after glow terms", [SignedShort], vm_1))
        0x00, 0x43, _, 0x9e ->
          Ok(Item(tag, "Research Tag 3", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x6c ->
          Ok(Item(tag, "Detector Row", [IntegerString], vm_1))
        0x00, 0x43, _, 0x64 ->
          Ok(Item(tag, "Image Filter", [CodeString], vm_1_to_n))
        0x00, 0x43, _, 0x9d ->
          Ok(Item(tag, "Research Tag 2", [OtherByteString], vm_1))
        0x20, 0x01, _, 0x8b ->
          Ok(Item(tag, "p Threshold", [FloatingPointSingle], vm_1))
        0x00, 0x43, _, 0x95 ->
          Ok(Item(tag, "Prescan Reuse String", [LongString], vm_1))
        0x00, 0x43, _, 0x4e ->
          Ok(Item(tag, "Duration of X-ray on", [FloatingPointSingle], vm_4))
        0x00, 0x43, _, 0x46 -> Ok(Item(tag, "DAS cal mode", [SignedLong], vm_4))
        0x20, 0x01, _, 0xa0 ->
          Ok(Item(tag, "Motion Parameters", [FloatingPointSingle], vm_1_to_n))
        0x00, 0x43, 0x10, _ ->
          Ok(Item(tag, "Private Element Creator", [LongString], vm_1))
        0x00, 0x43, _, 0x0b ->
          Ok(Item(
            tag,
            "DB/dt Peak rate of change of gradient field",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x43, _, 0x2c ->
          Ok(Item(tag, "Effective echo spacing", [SignedShort], vm_1))
        0x00, 0x43, _, 0x6b ->
          Ok(Item(tag, "L-MDK Correction Indicator", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x8e ->
          Ok(Item(tag, "Spectro Prescan Values", [DecimalString], vm_3))
        0x00, 0x43, _, 0x1c ->
          Ok(Item(tag, "GE image integrity", [SignedShort], vm_1))
        0x00, 0x43, _, 0x7b ->
          Ok(Item(tag, "Regressor Values", [FloatingPointSingle], vm_1_to_n))
        0x00, 0x43, _, 0x87 -> Ok(Item(tag, "Reserved", [UnlimitedText], vm_1))
        0x00, 0x43, _, 0x18 ->
          Ok(Item(tag, "BBH coefficients", [DecimalString], vm_3))
        0x20, 0x01, _, 0x80 ->
          Ok(Item(tag, "Contrast", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x84 ->
          Ok(Item(tag, "Additional Asset Data", [LongString], vm_5))
        0x00, 0x43, _, 0x66 ->
          Ok(Item(tag, "Helical Correction Indicator", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x1f ->
          Ok(Item(tag, "Max overranges in a view", [SignedLong], vm_1))
        0x00, 0x43, _, 0x0c ->
          Ok(Item(
            tag,
            "dB/dt Limits in units of percent",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x43, _, 0x69 ->
          Ok(Item(tag, "Q-cal Correction Indicator", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x32 -> Ok(Item(tag, "Vas flags", [SignedShort], vm_1))
        0x00, 0x43, _, 0x94 ->
          Ok(Item(tag, "Spectro Ratio Values", [DecimalString], vm_1_to_n))
        0x00, 0x43, _, 0x99 ->
          Ok(Item(tag, "Extended Options", [LongString], vm_1_to_n))
        0x00, 0x43, _, 0x15 ->
          Ok(Item(tag, "Total output views", [SignedShort], vm_3))
        0x00, 0x43, _, 0x0d ->
          Ok(Item(tag, "PSD estimated limit", [DecimalString], vm_1))
        0x00, 0x43, _, 0x08 ->
          Ok(Item(tag, "Respiratory rate, bpm", [SignedShort], vm_1))
        0x00, 0x43, _, 0x8c ->
          Ok(Item(tag, "Voxel Location", [DecimalString], vm_6))
        0x00, 0x43, _, 0x74 ->
          Ok(Item(tag, "#rest volumes", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x14 ->
          Ok(Item(tag, "Calibration parameters", [SignedShort], vm_3))
        0x00, 0x43, _, 0x72 ->
          Ok(Item(tag, "Paradigm UID", [UniqueIdentifier], vm_1))
        0x00, 0x43, _, 0x05 ->
          Ok(Item(tag, "Img is original or unoriginal", [SignedShort], vm_1))
        0x00, 0x43, _, 0xa3 ->
          Ok(Item(tag, "ASL Contrast technique", [CodeString], vm_1))
        0x00, 0x43, _, 0x04 ->
          Ok(Item(tag, "Gradient offset in Z", [SignedShort], vm_1))
        0x00, 0x43, _, 0x36 ->
          Ok(Item(tag, "User_fill_map_MSW", [UnsignedLong], vm_1))
        0x00, 0x43, _, 0x77 ->
          Ok(Item(tag, "Application Name", [ShortString], vm_1))
        0x00, 0x43, _, 0x11 ->
          Ok(Item(tag, "Total input views", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x61 ->
          Ok(Item(tag, "Scanner Study Entity UID", [UniqueIdentifier], vm_1))
        0x00, 0x43, _, 0x07 ->
          Ok(Item(tag, "Views per segment", [SignedShort], vm_1))
        0x00, 0x43, _, 0x62 ->
          Ok(Item(tag, "Scanner Study ID", [ShortString], vm_1))
        0x00, 0x43, _, 0x63 -> Ok(Item(tag, "Raw Data ID", [ShortString], vm_1))
        0x00, 0x43, _, 0x92 ->
          Ok(Item(tag, "Image Error Text", [LongString], vm_1))
        0x20, 0x01, _, 0x92 -> Ok(Item(tag, "ROIs", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x06 ->
          Ok(Item(tag, "Number of EPI shots", [SignedShort], vm_1))
        0x20, 0x01, _, 0x81 ->
          Ok(Item(tag, "Regressor Values", [FloatingPointSingle], vm_1_to_n))
        0x00, 0x43, _, 0x8d ->
          Ok(Item(
            tag,
            "SAT Band Locations",
            [DecimalString],
            ValueMultiplicity(7, None),
          ))
        0x00, 0x43, _, 0x16 ->
          Ok(Item(tag, "Number of overranges", [SignedShort], vm_5))
        0x00, 0x43, _, 0x6f ->
          Ok(Item(
            tag,
            "Scanner Table Entry (single gradient coil systems only)/Scanner Table Entry + Gradient Coil Selected",
            [DecimalString],
            ValueMultiplicity(3, Some(4)),
          ))
        0x00, 0x43, _, 0x79 ->
          Ok(Item(tag, "Slices Per Volume", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x20 ->
          Ok(Item(tag, "Avg overranges all views", [DecimalString], vm_1))
        0x00, 0x43, _, 0x28 ->
          Ok(Item(tag, "Unique image iden", [OtherByteString], vm_1))
        0x20, 0x01, _, 0x15 ->
          Ok(Item(tag, "Compatibility Version", [ShortString], vm_1))
        0x00, 0x43, _, 0x1b ->
          Ok(Item(tag, "Ppscan parameters", [SignedShort], vm_1))
        0x00, 0x43, _, 0x9c ->
          Ok(Item(tag, "Research Tag 1", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x4a ->
          Ok(Item(tag, "Starting channel of view", [SignedShort], vm_4))
        0x20, 0x01, _, 0x11 ->
          Ok(Item(tag, "DICOM Implementation Version", [ShortString], vm_1))
        0x20, 0x01, _, 0x12 ->
          Ok(Item(
            tag,
            "Within-DICOM-Implementation SOP Instance UID",
            [UniqueIdentifier],
            vm_1,
          ))
        0x00, 0x43, _, 0x2e ->
          Ok(Item(tag, "String slop field 2", [ShortString], vm_1))
        0x00, 0x43, _, 0x26 ->
          Ok(Item(tag, "No views ref chans blocked", [UnsignedShort], vm_6))
        0x00, 0x43, _, 0x43 -> Ok(Item(tag, "DAS fpa gain", [SignedLong], vm_4))
        0x00, 0x43, _, 0x80 ->
          Ok(Item(tag, "Coil ID Data", [LongString], vm_1_to_n))
        0x00, 0x43, _, 0x85 ->
          Ok(Item(tag, "Debug Data (text format)", [UnlimitedText], vm_1))
        0x20, 0x01, _, 0x71 ->
          Ok(Item(tag, "Paradigm UID", [UniqueIdentifier], vm_1))
        0x00, 0x43, _, 0x2b ->
          Ok(Item(tag, "Private Scan Options", [SignedShort], vm_4))
        0x00, 0x43, _, 0x91 ->
          Ok(Item(tag, "SAR value", [DecimalString], vm_1_to_n))
        0x00, 0x43, _, 0x09 ->
          Ok(Item(tag, "Respiratory trigger point", [SignedShort], vm_1))
        0x20, 0x01, _, 0xa2 ->
          Ok(Item(tag, "Subject Data", [FloatingPointSingle], vm_1_to_n))
        0x20, 0x01, _, 0x86 ->
          Ok(Item(tag, "Number of Degrees of Freedom", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x12 -> Ok(Item(tag, "X-ray chain", [SignedShort], vm_3))
        0x00, 0x43, _, 0x0e ->
          Ok(Item(
            tag,
            "PSD estimated limit in tesla per second",
            [DecimalString],
            vm_1,
          ))
        0x00, 0x43, _, 0x76 ->
          Ok(Item(tag, "#dummy scans", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x25 ->
          Ok(Item(tag, "Reference channels", [SignedShort], vm_6))
        0x00, 0x43, _, 0xa0 ->
          Ok(Item(tag, "Spectroscopy Pixel Sequence", [Sequence], vm_1))
        0x00, 0x43, _, 0x7a ->
          Ok(Item(tag, "Expected Time Points", [UnsignedShort], vm_1))
        0x20, 0x01, _, 0xb0 ->
          Ok(Item(tag, "DTI Parameters", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x17 ->
          Ok(Item(tag, "IBH image scale factors", [DecimalString], vm_1))
        0x00, 0x43, _, 0x40 ->
          Ok(Item(tag, "Trigger on position", [FloatingPointSingle], vm_4))
        0x20, 0x01, _, 0x73 ->
          Ok(Item(tag, "Paradigm Description", [ShortText], vm_1))
        0x00, 0x43, _, 0x2a ->
          Ok(Item(tag, "User defined data", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x71 ->
          Ok(Item(tag, "Paradigm Description", [ShortText], vm_1))
        0x20, 0x01, _, 0x31 ->
          Ok(Item(tag, "Number of Objects Averaged", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x4c ->
          Ok(Item(tag, "TGGC trigger mode", [SignedShort], vm_4))
        0x20, 0x01, _, 0x8a ->
          Ok(Item(tag, "Z Threshold", [FloatingPointSingle], vm_1))
        0x20, 0x01, _, 0x95 ->
          Ok(Item(tag, "Response Data", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x81 -> Ok(Item(tag, "GE Coil Name", [LongString], vm_1))
        0x00, 0x43, _, 0x35 ->
          Ok(Item(tag, "User_usage_tag", [UnsignedLong], vm_1))
        0x00, 0x43, _, 0x37 ->
          Ok(Item(tag, "User_fill_map_LSW", [UnsignedLong], vm_1))
        0x00, 0x43, _, 0x97 ->
          Ok(Item(
            tag,
            "Image Filtering Parameters",
            [LongString],
            ValueMultiplicity(8, Some(8)),
          ))
        0x00, 0x43, _, 0x2f ->
          Ok(Item(
            tag,
            "Image Type (real, imaginary, phase, magnitude)",
            [SignedShort],
            vm_1,
          ))
        0x20, 0x01, _, 0x51 ->
          Ok(Item(tag, "Number of Slices Per Volume", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x41 ->
          Ok(Item(tag, "Degree of rotation", [FloatingPointSingle], vm_4))
        0x20, 0x01, _, 0x41 ->
          Ok(Item(tag, "Number of Expected Time Points", [UnsignedShort], vm_1))
        0x20, 0x01, _, 0xc0 ->
          Ok(Item(tag, "Paradigm Info", [OtherByteString], vm_1))
        0x00, 0x43, _, 0x34 ->
          Ok(Item(tag, "Offset Frequency", [IntegerString], vm_1))
        0x00, 0x43, _, 0x82 ->
          Ok(Item(
            tag,
            "System Configuration Information",
            [LongString],
            vm_1_to_n,
          ))
        0x00, 0x43, _, 0x45 -> Ok(Item(tag, "DAS ad input", [SignedLong], vm_4))
        0x00, 0x43, _, 0x0f ->
          Ok(Item(tag, "Saravghead", [DecimalString], vm_1))
        0x00, 0x43, _, 0x10 ->
          Ok(Item(tag, "Window value", [UnsignedShort], vm_1))
        0x20, 0x01, _, 0x10 ->
          Ok(Item(tag, "DICOM Implementation UID", [UniqueIdentifier], vm_1))
        0x00, 0x43, _, 0x39 ->
          Ok(Item(tag, "Slop_int_6... slop_int_9", [IntegerString], vm_4))
        0x00, 0x43, _, 0x27 ->
          Ok(Item(tag, "Scan Pitch Ratio", [ShortString], vm_1))
        0x20, 0x01, _, 0x61 ->
          Ok(Item(tag, "Experiment Type", [UnsignedShort], vm_1))
        0x00, 0x43, _, 0x96 ->
          Ok(Item(tag, "Content Qualification", [CodeString], vm_1))
        0x00, 0x43, _, 0x47 ->
          Ok(Item(tag, "DAS cal frequency", [SignedLong], vm_4))
        0x00, 0x43, _, 0x8f ->
          Ok(Item(tag, "Spectro Parameters", [DecimalString], vm_3))
        0x00, 0x43, _, 0x6e ->
          Ok(Item(tag, "Auto mA Mode", [ShortString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "PMS-THORA-5.1" ->
      case g0, g1, e0, e1 {
        0x00, 0x89, _, 0x20 ->
          Ok(Item(tag, "Stamp Image Sequence", [Sequence], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS_ADWSoft_3D2" ->
      case g0, g1, e0, e1 {
        0x00, 0x57, _, 0x01 ->
          Ok(Item(
            tag,
            "Cardiac Reconstruction Algorithm List",
            [OtherByteString],
            vm_1,
          ))
        0x00, 0x57, _, 0x02 ->
          Ok(Item(
            tag,
            "Average Heart Rate for Image List",
            [OtherByteString],
            vm_1,
          ))
        0x00, 0x57, _, 0x03 ->
          Ok(Item(tag, "Temporal Resolution List", [OtherByteString], vm_1))
        0x00, 0x57, _, 0x04 ->
          Ok(Item(tag, "Layout View Preset", [LongText], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "GEMS-IT/Centricity RA600/7.0" ->
      case g0, g1, e0, e1 {
        0x41, 0x13, _, 0x10 ->
          Ok(Item(tag, "Number of images in study", [UniqueIdentifier], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "http://www.gemedicalsystems.com/it_solutions/rad_pacs/" ->
      case g0, g1, e0, e1 {
        0x31, 0x15, _, 0x01 ->
          Ok(Item(tag, "Reference to pacs study", [UnlimitedText], vm_1))
        0x31, 0x15, _, 0x02 ->
          Ok(Item(tag, "Reference to pacs image", [UnlimitedText], vm_1))
        0x31, 0x15, _, 0x03 ->
          Ok(Item(tag, "Pacs examnotes flag", [CodeString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "Vital Images SW 3.4" ->
      case g0, g1, e0, e1 {
        0x56, 0x53, _, 0x10 ->
          Ok(Item(tag, "Saved Workflow", [OtherByteString], vm_1))
        0x56, 0x53, _, 0x11 ->
          Ok(Item(tag, "Saved Workflow File Name", [LongString], vm_1))
        0x56, 0x53, _, 0x12 ->
          Ok(Item(tag, "Saved Workflow File Data", [OtherByteString], vm_1))
        0x56, 0x53, _, 0x13 ->
          Ok(Item(tag, "Saved Workflow File Length", [SignedLong], vm_1))
        0x56, 0x53, _, 0x14 ->
          Ok(Item(tag, "Saved Workflow File Sequence", [Sequence], vm_1))
        0x56, 0x53, _, 0x15 -> Ok(Item(tag, "Image Sequence", [Sequence], vm_1))
        0x56, 0x53, _, 0x16 ->
          Ok(Item(tag, "Volume Interpolated Slices", [SignedLong], vm_1))
        0x56, 0x53, _, 0x17 ->
          Ok(Item(tag, "Volume SOP Instance UID", [UniqueIdentifier], vm_1))
        0x56, 0x53, _, 0x18 ->
          Ok(Item(tag, "Saved Workflow Mark", [ShortString], vm_1))
        0x56, 0x53, _, 0x19 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x56, 0x53, _, 0x22 ->
          Ok(Item(tag, "Unknown", [UniqueIdentifier], vm_1))
        0x56, 0x53, _, 0x23 -> Ok(Item(tag, "Unknown", [LongString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    "AMI Sequence Annotations_02" ->
      case g0, g1, e0, e1 {
        0x31, 0x03, _, 0x10 ->
          Ok(Item(tag, "AMI Annotation Sequence (RET)", [CodeString], vm_1))
        0x31, 0x03, _, 0x20 ->
          Ok(Item(tag, "AMI Annotation UID (RET)", [UniqueIdentifier], vm_1))
        0x31, 0x03, _, 0x30 ->
          Ok(Item(tag, "AMI Annotation Color (RET)", [UnsignedShort], vm_1))
        0x31, 0x03, _, 0x50 ->
          Ok(Item(tag, "AMI Annotation Line Style (RET)", [CodeString], vm_1))
        0x31, 0x03, _, 0x60 ->
          Ok(Item(tag, "AMI Annotation Elements (RET)", [Sequence], vm_1))
        0x31, 0x03, _, 0x70 ->
          Ok(Item(tag, "AMI Annotation Label (RET)", [ShortString], vm_1))
        0x31, 0x03, _, 0x80 ->
          Ok(Item(tag, "AMI Annotation Creator (RET)", [PersonName], vm_1))
        0x31, 0x03, _, 0x90 ->
          Ok(Item(tag, "AMI Annotation Modifiers (RET)", [PersonName], vm_1))
        0x31, 0x03, _, 0xa0 ->
          Ok(Item(tag, "AMI Annotation Creation Date (RET)", [Date], vm_1))
        0x31, 0x03, _, 0xb0 ->
          Ok(Item(tag, "AMI Annotation Creation Time (RET)", [Time], vm_1))
        0x31, 0x03, _, 0xc0 ->
          Ok(Item(tag, "AMI Annotation Modification Dates (RET)", [Date], vm_1))
        0x31, 0x03, _, 0xd0 ->
          Ok(Item(tag, "AMI Annotation Modification Times (RET)", [Time], vm_1))
        0x31, 0x03, _, 0xe0 ->
          Ok(Item(
            tag,
            "AMI Annotation Frame Number (RET)",
            [UnsignedShort],
            vm_1,
          ))
        _, _, _, _ -> Error(Nil)
      }
    "SIEMENS NUMARIS II" ->
      case g0, g1, e0, e1 {
        0x7f, 0xe3, _, 0x00 ->
          Ok(Item(tag, "Image Graphics Format Code", [LongString], vm_1))
        0x7f, 0xe3, _, 0x10 ->
          Ok(Item(tag, "Image Graphics", [OtherByteString], vm_1))
        0x7f, 0xe3, _, 0x20 ->
          Ok(Item(tag, "Image Graphics Dummy", [OtherByteString], vm_1))
        _, _, _, _ -> Error(Nil)
      }
    _ -> Error(Nil)
  }
}

/// Returns the display name for a UID defined in the DICOM standard.
///
pub fn uid_name(uid: String) -> Result(String, Nil) {
  case uid {
    "1.2.840.10008.1.1" -> Ok("Verification SOP Class")
    "1.2.840.10008.1.2" -> Ok("Implicit VR Little Endian")
    "1.2.840.10008.1.2.1" -> Ok("Explicit VR Little Endian")
    "1.2.840.10008.1.2.1.98" ->
      Ok("Encapsulated Uncompressed Explicit VR Little Endian")
    "1.2.840.10008.1.2.1.99" -> Ok("Deflated Explicit VR Little Endian")
    "1.2.840.10008.1.2.2" -> Ok("Explicit VR Big Endian")
    "1.2.840.10008.1.2.4.100" -> Ok("MPEG2 Main Profile / Main Level")
    "1.2.840.10008.1.2.4.100.1" ->
      Ok("Fragmentable MPEG2 Main Profile / Main Level")
    "1.2.840.10008.1.2.4.101" -> Ok("MPEG2 Main Profile / High Level")
    "1.2.840.10008.1.2.4.101.1" ->
      Ok("Fragmentable MPEG2 Main Profile / High Level")
    "1.2.840.10008.1.2.4.102" -> Ok("MPEG-4 AVC/H.264 High Profile / Level 4.1")
    "1.2.840.10008.1.2.4.102.1" ->
      Ok("Fragmentable MPEG-4 AVC/H.264 High Profile / Level 4.1")
    "1.2.840.10008.1.2.4.103" ->
      Ok("MPEG-4 AVC/H.264 BD-compatible High Profile / Level 4.1")
    "1.2.840.10008.1.2.4.103.1" ->
      Ok("Fragmentable MPEG-4 AVC/H.264 BD-compatible High Profile / Level 4.1")
    "1.2.840.10008.1.2.4.104" ->
      Ok("MPEG-4 AVC/H.264 High Profile / Level 4.2 For 2D Video")
    "1.2.840.10008.1.2.4.104.1" ->
      Ok("Fragmentable MPEG-4 AVC/H.264 High Profile / Level 4.2 For 2D Video")
    "1.2.840.10008.1.2.4.105" ->
      Ok("MPEG-4 AVC/H.264 High Profile / Level 4.2 For 3D Video")
    "1.2.840.10008.1.2.4.105.1" ->
      Ok("Fragmentable MPEG-4 AVC/H.264 High Profile / Level 4.2 For 3D Video")
    "1.2.840.10008.1.2.4.106" ->
      Ok("MPEG-4 AVC/H.264 Stereo High Profile / Level 4.2")
    "1.2.840.10008.1.2.4.106.1" ->
      Ok("Fragmentable MPEG-4 AVC/H.264 Stereo High Profile / Level 4.2")
    "1.2.840.10008.1.2.4.107" -> Ok("HEVC/H.265 Main Profile / Level 5.1")
    "1.2.840.10008.1.2.4.108" -> Ok("HEVC/H.265 Main 10 Profile / Level 5.1")
    "1.2.840.10008.1.2.4.201" ->
      Ok("High-Throughput JPEG 2000 Image Compression (Lossless Only)")
    "1.2.840.10008.1.2.4.202" ->
      Ok(
        "High-Throughput JPEG 2000 with RPCL Options Image Compression (Lossless Only)",
      )
    "1.2.840.10008.1.2.4.203" ->
      Ok("High-Throughput JPEG 2000 Image Compression")
    "1.2.840.10008.1.2.4.204" -> Ok("JPIP HTJ2K Referenced")
    "1.2.840.10008.1.2.4.205" -> Ok("JPIP HTJ2K Referenced Deflate")
    "1.2.840.10008.1.2.4.50" -> Ok("JPEG Baseline (Process 1)")
    "1.2.840.10008.1.2.4.51" -> Ok("JPEG Extended (Process 2 and 4)")
    "1.2.840.10008.1.2.4.52" -> Ok("JPEG Extended (Process 3 and 5)")
    "1.2.840.10008.1.2.4.53" ->
      Ok("JPEG Spectral Selection, Non-Hierarchical (Process 6 and 8)")
    "1.2.840.10008.1.2.4.54" ->
      Ok("JPEG Spectral Selection, Non-Hierarchical (Process 7 and 9)")
    "1.2.840.10008.1.2.4.55" ->
      Ok("JPEG Full Progression, Non-Hierarchical (Process 10 and 12)")
    "1.2.840.10008.1.2.4.56" ->
      Ok("JPEG Full Progression, Non-Hierarchical (Process 11 and 13)")
    "1.2.840.10008.1.2.4.57" ->
      Ok("JPEG Lossless, Non-Hierarchical (Process 14)")
    "1.2.840.10008.1.2.4.58" ->
      Ok("JPEG Lossless, Non-Hierarchical (Process 15)")
    "1.2.840.10008.1.2.4.59" ->
      Ok("JPEG Extended, Hierarchical (Process 16 and 18)")
    "1.2.840.10008.1.2.4.60" ->
      Ok("JPEG Extended, Hierarchical (Process 17 and 19)")
    "1.2.840.10008.1.2.4.61" ->
      Ok("JPEG Spectral Selection, Hierarchical (Process 20 and 22)")
    "1.2.840.10008.1.2.4.62" ->
      Ok("JPEG Spectral Selection, Hierarchical (Process 21 and 23)")
    "1.2.840.10008.1.2.4.63" ->
      Ok("JPEG Full Progression, Hierarchical (Process 24 and 26)")
    "1.2.840.10008.1.2.4.64" ->
      Ok("JPEG Full Progression, Hierarchical (Process 25 and 27)")
    "1.2.840.10008.1.2.4.65" -> Ok("JPEG Lossless, Hierarchical (Process 28)")
    "1.2.840.10008.1.2.4.66" -> Ok("JPEG Lossless, Hierarchical (Process 29)")
    "1.2.840.10008.1.2.4.70" ->
      Ok(
        "JPEG Lossless, Non-Hierarchical, First-Order Prediction (Process 14 [Selection Value 1])",
      )
    "1.2.840.10008.1.2.4.80" -> Ok("JPEG-LS Lossless Image Compression")
    "1.2.840.10008.1.2.4.81" ->
      Ok("JPEG-LS Lossy (Near-Lossless) Image Compression")
    "1.2.840.10008.1.2.4.90" ->
      Ok("JPEG 2000 Image Compression (Lossless Only)")
    "1.2.840.10008.1.2.4.91" -> Ok("JPEG 2000 Image Compression")
    "1.2.840.10008.1.2.4.92" ->
      Ok("JPEG 2000 Part 2 Multi-component Image Compression (Lossless Only)")
    "1.2.840.10008.1.2.4.93" ->
      Ok("JPEG 2000 Part 2 Multi-component Image Compression")
    "1.2.840.10008.1.2.4.94" -> Ok("JPIP Referenced")
    "1.2.840.10008.1.2.4.95" -> Ok("JPIP Referenced Deflate")
    "1.2.840.10008.1.2.5" -> Ok("RLE Lossless")
    "1.2.840.10008.1.2.6.1" -> Ok("RFC 2557 MIME encapsulation")
    "1.2.840.10008.1.2.6.2" -> Ok("XML Encoding")
    "1.2.840.10008.1.2.7.1" ->
      Ok("SMPTE ST 2110-20 Uncompressed Progressive Active Video")
    "1.2.840.10008.1.2.7.2" ->
      Ok("SMPTE ST 2110-20 Uncompressed Interlaced Active Video")
    "1.2.840.10008.1.2.7.3" -> Ok("SMPTE ST 2110-30 PCM Digital Audio")
    "1.2.840.10008.1.20" -> Ok("Papyrus 3 Implicit VR Little Endian")
    "1.2.840.10008.1.20.1" -> Ok("Storage Commitment Push Model SOP Class")
    "1.2.840.10008.1.20.1.1" -> Ok("Storage Commitment Push Model SOP Instance")
    "1.2.840.10008.1.20.2" -> Ok("Storage Commitment Pull Model SOP Class")
    "1.2.840.10008.1.20.2.1" -> Ok("Storage Commitment Pull Model SOP Instance")
    "1.2.840.10008.1.3.10" -> Ok("Media Storage Directory Storage")
    "1.2.840.10008.1.4.1.1" -> Ok("Talairach Brain Atlas Frame of Reference")
    "1.2.840.10008.1.4.1.10" -> Ok("SPM2 GRAY Frame of Reference")
    "1.2.840.10008.1.4.1.11" -> Ok("SPM2 WHITE Frame of Reference")
    "1.2.840.10008.1.4.1.12" -> Ok("SPM2 CSF Frame of Reference")
    "1.2.840.10008.1.4.1.13" -> Ok("SPM2 BRAINMASK Frame of Reference")
    "1.2.840.10008.1.4.1.14" -> Ok("SPM2 AVG305T1 Frame of Reference")
    "1.2.840.10008.1.4.1.15" -> Ok("SPM2 AVG152T1 Frame of Reference")
    "1.2.840.10008.1.4.1.16" -> Ok("SPM2 AVG152T2 Frame of Reference")
    "1.2.840.10008.1.4.1.17" -> Ok("SPM2 AVG152PD Frame of Reference")
    "1.2.840.10008.1.4.1.18" -> Ok("SPM2 SINGLESUBJT1 Frame of Reference")
    "1.2.840.10008.1.4.1.2" -> Ok("SPM2 T1 Frame of Reference")
    "1.2.840.10008.1.4.1.3" -> Ok("SPM2 T2 Frame of Reference")
    "1.2.840.10008.1.4.1.4" -> Ok("SPM2 PD Frame of Reference")
    "1.2.840.10008.1.4.1.5" -> Ok("SPM2 EPI Frame of Reference")
    "1.2.840.10008.1.4.1.6" -> Ok("SPM2 FIL T1 Frame of Reference")
    "1.2.840.10008.1.4.1.7" -> Ok("SPM2 PET Frame of Reference")
    "1.2.840.10008.1.4.1.8" -> Ok("SPM2 TRANSM Frame of Reference")
    "1.2.840.10008.1.4.1.9" -> Ok("SPM2 SPECT Frame of Reference")
    "1.2.840.10008.1.4.2.1" -> Ok("ICBM 452 T1 Frame of Reference")
    "1.2.840.10008.1.4.2.2" -> Ok("ICBM Single Subject MRI Frame of Reference")
    "1.2.840.10008.1.4.3.1" ->
      Ok("IEC 61217 Fixed Coordinate System Frame of Reference")
    "1.2.840.10008.1.4.3.2" ->
      Ok("Standard Robotic-Arm Coordinate System Frame of Reference")
    "1.2.840.10008.1.4.3.3" ->
      Ok("IEC 61217 Table Top Coordinate System Frame of Reference")
    "1.2.840.10008.1.4.4.1" -> Ok("SRI24 Frame of Reference")
    "1.2.840.10008.1.4.5.1" -> Ok("Colin27 Frame of Reference")
    "1.2.840.10008.1.4.6.1" -> Ok("LPBA40/AIR Frame of Reference")
    "1.2.840.10008.1.4.6.2" -> Ok("LPBA40/FLIRT Frame of Reference")
    "1.2.840.10008.1.4.6.3" -> Ok("LPBA40/SPM5 Frame of Reference")
    "1.2.840.10008.1.40" -> Ok("Procedural Event Logging SOP Class")
    "1.2.840.10008.1.40.1" -> Ok("Procedural Event Logging SOP Instance")
    "1.2.840.10008.1.42" -> Ok("Substance Administration Logging SOP Class")
    "1.2.840.10008.1.42.1" ->
      Ok("Substance Administration Logging SOP Instance")
    "1.2.840.10008.1.5.1" -> Ok("Hot Iron Color Palette SOP Instance")
    "1.2.840.10008.1.5.2" -> Ok("PET Color Palette SOP Instance")
    "1.2.840.10008.1.5.3" -> Ok("Hot Metal Blue Color Palette SOP Instance")
    "1.2.840.10008.1.5.4" -> Ok("PET 20 Step Color Palette SOP Instance")
    "1.2.840.10008.1.5.5" -> Ok("Spring Color Palette SOP Instance")
    "1.2.840.10008.1.5.6" -> Ok("Summer Color Palette SOP Instance")
    "1.2.840.10008.1.5.7" -> Ok("Fall Color Palette SOP Instance")
    "1.2.840.10008.1.5.8" -> Ok("Winter Color Palette SOP Instance")
    "1.2.840.10008.1.9" -> Ok("Basic Study Content Notification SOP Class")
    "1.2.840.10008.10.1" -> Ok("Video Endoscopic Image Real-Time Communication")
    "1.2.840.10008.10.2" ->
      Ok("Video Photographic Image Real-Time Communication")
    "1.2.840.10008.10.3" -> Ok("Audio Waveform Real-Time Communication")
    "1.2.840.10008.10.4" ->
      Ok("Rendition Selection Document Real-Time Communication")
    "1.2.840.10008.15.0.3.1" -> Ok("dicomDeviceName")
    "1.2.840.10008.15.0.3.10" -> Ok("dicomAssociationInitiator")
    "1.2.840.10008.15.0.3.11" -> Ok("dicomAssociationAcceptor")
    "1.2.840.10008.15.0.3.12" -> Ok("dicomHostname")
    "1.2.840.10008.15.0.3.13" -> Ok("dicomPort")
    "1.2.840.10008.15.0.3.14" -> Ok("dicomSOPClass")
    "1.2.840.10008.15.0.3.15" -> Ok("dicomTransferRole")
    "1.2.840.10008.15.0.3.16" -> Ok("dicomTransferSyntax")
    "1.2.840.10008.15.0.3.17" -> Ok("dicomPrimaryDeviceType")
    "1.2.840.10008.15.0.3.18" -> Ok("dicomRelatedDeviceReference")
    "1.2.840.10008.15.0.3.19" -> Ok("dicomPreferredCalledAETitle")
    "1.2.840.10008.15.0.3.2" -> Ok("dicomDescription")
    "1.2.840.10008.15.0.3.20" -> Ok("dicomTLSCyphersuite")
    "1.2.840.10008.15.0.3.21" -> Ok("dicomAuthorizedNodeCertificateReference")
    "1.2.840.10008.15.0.3.22" -> Ok("dicomThisNodeCertificateReference")
    "1.2.840.10008.15.0.3.23" -> Ok("dicomInstalled")
    "1.2.840.10008.15.0.3.24" -> Ok("dicomStationName")
    "1.2.840.10008.15.0.3.25" -> Ok("dicomDeviceSerialNumber")
    "1.2.840.10008.15.0.3.26" -> Ok("dicomInstitutionName")
    "1.2.840.10008.15.0.3.27" -> Ok("dicomInstitutionAddress")
    "1.2.840.10008.15.0.3.28" -> Ok("dicomInstitutionDepartmentName")
    "1.2.840.10008.15.0.3.29" -> Ok("dicomIssuerOfPatientID")
    "1.2.840.10008.15.0.3.3" -> Ok("dicomManufacturer")
    "1.2.840.10008.15.0.3.30" -> Ok("dicomPreferredCallingAETitle")
    "1.2.840.10008.15.0.3.31" -> Ok("dicomSupportedCharacterSet")
    "1.2.840.10008.15.0.3.4" -> Ok("dicomManufacturerModelName")
    "1.2.840.10008.15.0.3.5" -> Ok("dicomSoftwareVersion")
    "1.2.840.10008.15.0.3.6" -> Ok("dicomVendorData")
    "1.2.840.10008.15.0.3.7" -> Ok("dicomAETitle")
    "1.2.840.10008.15.0.3.8" -> Ok("dicomNetworkConnectionReference")
    "1.2.840.10008.15.0.3.9" -> Ok("dicomApplicationCluster")
    "1.2.840.10008.15.0.4.1" -> Ok("dicomConfigurationRoot")
    "1.2.840.10008.15.0.4.2" -> Ok("dicomDevicesRoot")
    "1.2.840.10008.15.0.4.3" -> Ok("dicomUniqueAETitlesRegistryRoot")
    "1.2.840.10008.15.0.4.4" -> Ok("dicomDevice")
    "1.2.840.10008.15.0.4.5" -> Ok("dicomNetworkAE")
    "1.2.840.10008.15.0.4.6" -> Ok("dicomNetworkConnection")
    "1.2.840.10008.15.0.4.7" -> Ok("dicomUniqueAETitle")
    "1.2.840.10008.15.0.4.8" -> Ok("dicomTransferCapability")
    "1.2.840.10008.15.1.1" -> Ok("Universal Coordinated Time")
    "1.2.840.10008.2.16.10" -> Ok("Dublin Core")
    "1.2.840.10008.2.16.11" ->
      Ok("New York University Melanoma Clinical Cooperative Group")
    "1.2.840.10008.2.16.12" ->
      Ok(
        "Mayo Clinic Non-radiological Images Specific Body Structure Anatomical Surface Region Guide",
      )
    "1.2.840.10008.2.16.13" -> Ok("Image Biomarker Standardisation Initiative")
    "1.2.840.10008.2.16.14" -> Ok("Radiomics Ontology")
    "1.2.840.10008.2.16.15" -> Ok("RadElement")
    "1.2.840.10008.2.16.16" -> Ok("ICD-11")
    "1.2.840.10008.2.16.17" ->
      Ok("Unified numbering system (UNS) for metals and alloys")
    "1.2.840.10008.2.16.18" -> Ok("Research Resource Identification")
    "1.2.840.10008.2.16.4" -> Ok("DICOM Controlled Terminology")
    "1.2.840.10008.2.16.5" -> Ok("Adult Mouse Anatomy Ontology")
    "1.2.840.10008.2.16.6" -> Ok("Uberon Ontology")
    "1.2.840.10008.2.16.7" ->
      Ok(
        "Integrated Taxonomic Information System (ITIS) Taxonomic Serial Number (TSN)",
      )
    "1.2.840.10008.2.16.8" -> Ok("Mouse Genome Initiative (MGI)")
    "1.2.840.10008.2.16.9" -> Ok("PubChem Compound CID")
    "1.2.840.10008.2.6.1" -> Ok("DICOM UID Registry")
    "1.2.840.10008.3.1.1.1" -> Ok("DICOM Application Context Name")
    "1.2.840.10008.3.1.2.1.1" -> Ok("Detached Patient Management SOP Class")
    "1.2.840.10008.3.1.2.1.4" ->
      Ok("Detached Patient Management Meta SOP Class")
    "1.2.840.10008.3.1.2.2.1" -> Ok("Detached Visit Management SOP Class")
    "1.2.840.10008.3.1.2.3.1" -> Ok("Detached Study Management SOP Class")
    "1.2.840.10008.3.1.2.3.2" -> Ok("Study Component Management SOP Class")
    "1.2.840.10008.3.1.2.3.3" ->
      Ok("Modality Performed Procedure Step SOP Class")
    "1.2.840.10008.3.1.2.3.4" ->
      Ok("Modality Performed Procedure Step Retrieve SOP Class")
    "1.2.840.10008.3.1.2.3.5" ->
      Ok("Modality Performed Procedure Step Notification SOP Class")
    "1.2.840.10008.3.1.2.5.1" -> Ok("Detached Results Management SOP Class")
    "1.2.840.10008.3.1.2.5.4" ->
      Ok("Detached Results Management Meta SOP Class")
    "1.2.840.10008.3.1.2.5.5" -> Ok("Detached Study Management Meta SOP Class")
    "1.2.840.10008.3.1.2.6.1" ->
      Ok("Detached Interpretation Management SOP Class")
    "1.2.840.10008.4.2" -> Ok("Storage Service Class")
    "1.2.840.10008.5.1.1.1" -> Ok("Basic Film Session SOP Class")
    "1.2.840.10008.5.1.1.14" -> Ok("Print Job SOP Class")
    "1.2.840.10008.5.1.1.15" -> Ok("Basic Annotation Box SOP Class")
    "1.2.840.10008.5.1.1.16" -> Ok("Printer SOP Class")
    "1.2.840.10008.5.1.1.16.376" ->
      Ok("Printer Configuration Retrieval SOP Class")
    "1.2.840.10008.5.1.1.17" -> Ok("Printer SOP Instance")
    "1.2.840.10008.5.1.1.17.376" ->
      Ok("Printer Configuration Retrieval SOP Instance")
    "1.2.840.10008.5.1.1.18" ->
      Ok("Basic Color Print Management Meta SOP Class")
    "1.2.840.10008.5.1.1.18.1" ->
      Ok("Referenced Color Print Management Meta SOP Class")
    "1.2.840.10008.5.1.1.2" -> Ok("Basic Film Box SOP Class")
    "1.2.840.10008.5.1.1.22" -> Ok("VOI LUT Box SOP Class")
    "1.2.840.10008.5.1.1.23" -> Ok("Presentation LUT SOP Class")
    "1.2.840.10008.5.1.1.24" -> Ok("Image Overlay Box SOP Class")
    "1.2.840.10008.5.1.1.24.1" -> Ok("Basic Print Image Overlay Box SOP Class")
    "1.2.840.10008.5.1.1.25" -> Ok("Print Queue SOP Instance")
    "1.2.840.10008.5.1.1.26" -> Ok("Print Queue Management SOP Class")
    "1.2.840.10008.5.1.1.27" -> Ok("Stored Print Storage SOP Class")
    "1.2.840.10008.5.1.1.29" -> Ok("Hardcopy Grayscale Image Storage SOP Class")
    "1.2.840.10008.5.1.1.30" -> Ok("Hardcopy Color Image Storage SOP Class")
    "1.2.840.10008.5.1.1.31" -> Ok("Pull Print Request SOP Class")
    "1.2.840.10008.5.1.1.32" ->
      Ok("Pull Stored Print Management Meta SOP Class")
    "1.2.840.10008.5.1.1.33" -> Ok("Media Creation Management SOP Class UID")
    "1.2.840.10008.5.1.1.4" -> Ok("Basic Grayscale Image Box SOP Class")
    "1.2.840.10008.5.1.1.4.1" -> Ok("Basic Color Image Box SOP Class")
    "1.2.840.10008.5.1.1.4.2" -> Ok("Referenced Image Box SOP Class")
    "1.2.840.10008.5.1.1.40" -> Ok("Display System SOP Class")
    "1.2.840.10008.5.1.1.40.1" -> Ok("Display System SOP Instance")
    "1.2.840.10008.5.1.1.9" ->
      Ok("Basic Grayscale Print Management Meta SOP Class")
    "1.2.840.10008.5.1.1.9.1" ->
      Ok("Referenced Grayscale Print Management Meta SOP Class")
    "1.2.840.10008.5.1.4.1.1.1" -> Ok("Computed Radiography Image Storage")
    "1.2.840.10008.5.1.4.1.1.1.1" ->
      Ok("Digital X-Ray Image Storage - For Presentation")
    "1.2.840.10008.5.1.4.1.1.1.1.1" ->
      Ok("Digital X-Ray Image Storage - For Processing")
    "1.2.840.10008.5.1.4.1.1.1.2" ->
      Ok("Digital Mammography X-Ray Image Storage - For Presentation")
    "1.2.840.10008.5.1.4.1.1.1.2.1" ->
      Ok("Digital Mammography X-Ray Image Storage - For Processing")
    "1.2.840.10008.5.1.4.1.1.1.3" ->
      Ok("Digital Intra-Oral X-Ray Image Storage - For Presentation")
    "1.2.840.10008.5.1.4.1.1.1.3.1" ->
      Ok("Digital Intra-Oral X-Ray Image Storage - For Processing")
    "1.2.840.10008.5.1.4.1.1.10" -> Ok("Standalone Modality LUT Storage")
    "1.2.840.10008.5.1.4.1.1.104.1" -> Ok("Encapsulated PDF Storage")
    "1.2.840.10008.5.1.4.1.1.104.2" -> Ok("Encapsulated CDA Storage")
    "1.2.840.10008.5.1.4.1.1.104.3" -> Ok("Encapsulated STL Storage")
    "1.2.840.10008.5.1.4.1.1.104.4" -> Ok("Encapsulated OBJ Storage")
    "1.2.840.10008.5.1.4.1.1.104.5" -> Ok("Encapsulated MTL Storage")
    "1.2.840.10008.5.1.4.1.1.11" -> Ok("Standalone VOI LUT Storage")
    "1.2.840.10008.5.1.4.1.1.11.1" ->
      Ok("Grayscale Softcopy Presentation State Storage")
    "1.2.840.10008.5.1.4.1.1.11.10" ->
      Ok("Segmented Volume Rendering Volumetric Presentation State Storage")
    "1.2.840.10008.5.1.4.1.1.11.11" ->
      Ok("Multiple Volume Rendering Volumetric Presentation State Storage")
    "1.2.840.10008.5.1.4.1.1.11.12" ->
      Ok("Variable Modality LUT Softcopy Presentation State Storage")
    "1.2.840.10008.5.1.4.1.1.11.2" ->
      Ok("Color Softcopy Presentation State Storage")
    "1.2.840.10008.5.1.4.1.1.11.3" ->
      Ok("Pseudo-Color Softcopy Presentation State Storage")
    "1.2.840.10008.5.1.4.1.1.11.4" ->
      Ok("Blending Softcopy Presentation State Storage")
    "1.2.840.10008.5.1.4.1.1.11.5" ->
      Ok("XA/XRF Grayscale Softcopy Presentation State Storage")
    "1.2.840.10008.5.1.4.1.1.11.6" ->
      Ok("Grayscale Planar MPR Volumetric Presentation State Storage")
    "1.2.840.10008.5.1.4.1.1.11.7" ->
      Ok("Compositing Planar MPR Volumetric Presentation State Storage")
    "1.2.840.10008.5.1.4.1.1.11.8" ->
      Ok("Advanced Blending Presentation State Storage")
    "1.2.840.10008.5.1.4.1.1.11.9" ->
      Ok("Volume Rendering Volumetric Presentation State Storage")
    "1.2.840.10008.5.1.4.1.1.12.1" -> Ok("X-Ray Angiographic Image Storage")
    "1.2.840.10008.5.1.4.1.1.12.1.1" -> Ok("Enhanced XA Image Storage")
    "1.2.840.10008.5.1.4.1.1.12.2" ->
      Ok("X-Ray Radiofluoroscopic Image Storage")
    "1.2.840.10008.5.1.4.1.1.12.2.1" -> Ok("Enhanced XRF Image Storage")
    "1.2.840.10008.5.1.4.1.1.12.3" ->
      Ok("X-Ray Angiographic Bi-Plane Image Storage")
    "1.2.840.10008.5.1.4.1.1.12.77" -> Ok("")
    "1.2.840.10008.5.1.4.1.1.128" ->
      Ok("Positron Emission Tomography Image Storage")
    "1.2.840.10008.5.1.4.1.1.128.1" ->
      Ok("Legacy Converted Enhanced PET Image Storage")
    "1.2.840.10008.5.1.4.1.1.129" -> Ok("Standalone PET Curve Storage")
    "1.2.840.10008.5.1.4.1.1.13.1.1" ->
      Ok("X-Ray 3D Angiographic Image Storage")
    "1.2.840.10008.5.1.4.1.1.13.1.2" ->
      Ok("X-Ray 3D Craniofacial Image Storage")
    "1.2.840.10008.5.1.4.1.1.13.1.3" -> Ok("Breast Tomosynthesis Image Storage")
    "1.2.840.10008.5.1.4.1.1.13.1.4" ->
      Ok("Breast Projection X-Ray Image Storage - For Presentation")
    "1.2.840.10008.5.1.4.1.1.13.1.5" ->
      Ok("Breast Projection X-Ray Image Storage - For Processing")
    "1.2.840.10008.5.1.4.1.1.130" -> Ok("Enhanced PET Image Storage")
    "1.2.840.10008.5.1.4.1.1.131" -> Ok("Basic Structured Display Storage")
    "1.2.840.10008.5.1.4.1.1.14.1" ->
      Ok(
        "Intravascular Optical Coherence Tomography Image Storage - For Presentation",
      )
    "1.2.840.10008.5.1.4.1.1.14.2" ->
      Ok(
        "Intravascular Optical Coherence Tomography Image Storage - For Processing",
      )
    "1.2.840.10008.5.1.4.1.1.2" -> Ok("CT Image Storage")
    "1.2.840.10008.5.1.4.1.1.2.1" -> Ok("Enhanced CT Image Storage")
    "1.2.840.10008.5.1.4.1.1.2.2" ->
      Ok("Legacy Converted Enhanced CT Image Storage")
    "1.2.840.10008.5.1.4.1.1.20" -> Ok("Nuclear Medicine Image Storage")
    "1.2.840.10008.5.1.4.1.1.200.1" ->
      Ok("CT Defined Procedure Protocol Storage")
    "1.2.840.10008.5.1.4.1.1.200.2" ->
      Ok("CT Performed Procedure Protocol Storage")
    "1.2.840.10008.5.1.4.1.1.200.3" -> Ok("Protocol Approval Storage")
    "1.2.840.10008.5.1.4.1.1.200.4" ->
      Ok("Protocol Approval Information Model - FIND")
    "1.2.840.10008.5.1.4.1.1.200.5" ->
      Ok("Protocol Approval Information Model - MOVE")
    "1.2.840.10008.5.1.4.1.1.200.6" ->
      Ok("Protocol Approval Information Model - GET")
    "1.2.840.10008.5.1.4.1.1.200.7" ->
      Ok("XA Defined Procedure Protocol Storage")
    "1.2.840.10008.5.1.4.1.1.200.8" ->
      Ok("XA Performed Procedure Protocol Storage")
    "1.2.840.10008.5.1.4.1.1.201.1" -> Ok("Inventory Storage")
    "1.2.840.10008.5.1.4.1.1.201.1.1" -> Ok("Storage Management SOP Instance")
    "1.2.840.10008.5.1.4.1.1.201.2" -> Ok("Inventory - FIND")
    "1.2.840.10008.5.1.4.1.1.201.3" -> Ok("Inventory - MOVE")
    "1.2.840.10008.5.1.4.1.1.201.4" -> Ok("Inventory - GET")
    "1.2.840.10008.5.1.4.1.1.201.5" -> Ok("Inventory Creation")
    "1.2.840.10008.5.1.4.1.1.201.6" -> Ok("Repository Query")
    "1.2.840.10008.5.1.4.1.1.3" -> Ok("Ultrasound Multi-frame Image Storage")
    "1.2.840.10008.5.1.4.1.1.3.1" -> Ok("Ultrasound Multi-frame Image Storage")
    "1.2.840.10008.5.1.4.1.1.30" -> Ok("Parametric Map Storage")
    "1.2.840.10008.5.1.4.1.1.4" -> Ok("MR Image Storage")
    "1.2.840.10008.5.1.4.1.1.4.1" -> Ok("Enhanced MR Image Storage")
    "1.2.840.10008.5.1.4.1.1.4.2" -> Ok("MR Spectroscopy Storage")
    "1.2.840.10008.5.1.4.1.1.4.3" -> Ok("Enhanced MR Color Image Storage")
    "1.2.840.10008.5.1.4.1.1.4.4" ->
      Ok("Legacy Converted Enhanced MR Image Storage")
    "1.2.840.10008.5.1.4.1.1.40" -> Ok("")
    "1.2.840.10008.5.1.4.1.1.481.1" -> Ok("RT Image Storage")
    "1.2.840.10008.5.1.4.1.1.481.10" -> Ok("RT Physician Intent Storage")
    "1.2.840.10008.5.1.4.1.1.481.11" -> Ok("RT Segment Annotation Storage")
    "1.2.840.10008.5.1.4.1.1.481.12" -> Ok("RT Radiation Set Storage")
    "1.2.840.10008.5.1.4.1.1.481.13" ->
      Ok("C-Arm Photon-Electron Radiation Storage")
    "1.2.840.10008.5.1.4.1.1.481.14" -> Ok("Tomotherapeutic Radiation Storage")
    "1.2.840.10008.5.1.4.1.1.481.15" -> Ok("Robotic-Arm Radiation Storage")
    "1.2.840.10008.5.1.4.1.1.481.16" -> Ok("RT Radiation Record Set Storage")
    "1.2.840.10008.5.1.4.1.1.481.17" ->
      Ok("RT Radiation Salvage Record Storage")
    "1.2.840.10008.5.1.4.1.1.481.18" ->
      Ok("Tomotherapeutic Radiation Record Storage")
    "1.2.840.10008.5.1.4.1.1.481.19" ->
      Ok("C-Arm Photon-Electron Radiation Record Storage")
    "1.2.840.10008.5.1.4.1.1.481.2" -> Ok("RT Dose Storage")
    "1.2.840.10008.5.1.4.1.1.481.20" -> Ok("Robotic Radiation Record Storage")
    "1.2.840.10008.5.1.4.1.1.481.21" ->
      Ok("RT Radiation Set Delivery Instruction Storage")
    "1.2.840.10008.5.1.4.1.1.481.22" -> Ok("RT Treatment Preparation Storage")
    "1.2.840.10008.5.1.4.1.1.481.23" -> Ok("Enhanced RT Image Storage")
    "1.2.840.10008.5.1.4.1.1.481.24" ->
      Ok("Enhanced Continuous RT Image Storage")
    "1.2.840.10008.5.1.4.1.1.481.25" ->
      Ok("RT Patient Position Acquisition Instruction Storage")
    "1.2.840.10008.5.1.4.1.1.481.3" -> Ok("RT Structure Set Storage")
    "1.2.840.10008.5.1.4.1.1.481.4" -> Ok("RT Beams Treatment Record Storage")
    "1.2.840.10008.5.1.4.1.1.481.5" -> Ok("RT Plan Storage")
    "1.2.840.10008.5.1.4.1.1.481.6" -> Ok("RT Brachy Treatment Record Storage")
    "1.2.840.10008.5.1.4.1.1.481.7" -> Ok("RT Treatment Summary Record Storage")
    "1.2.840.10008.5.1.4.1.1.481.8" -> Ok("RT Ion Plan Storage")
    "1.2.840.10008.5.1.4.1.1.481.9" ->
      Ok("RT Ion Beams Treatment Record Storage")
    "1.2.840.10008.5.1.4.1.1.5" -> Ok("Nuclear Medicine Image Storage")
    "1.2.840.10008.5.1.4.1.1.501.1" -> Ok("DICOS CT Image Storage")
    "1.2.840.10008.5.1.4.1.1.501.2.1" ->
      Ok("DICOS Digital X-Ray Image Storage - For Presentation")
    "1.2.840.10008.5.1.4.1.1.501.2.2" ->
      Ok("DICOS Digital X-Ray Image Storage - For Processing")
    "1.2.840.10008.5.1.4.1.1.501.3" ->
      Ok("DICOS Threat Detection Report Storage")
    "1.2.840.10008.5.1.4.1.1.501.4" -> Ok("DICOS 2D AIT Storage")
    "1.2.840.10008.5.1.4.1.1.501.5" -> Ok("DICOS 3D AIT Storage")
    "1.2.840.10008.5.1.4.1.1.501.6" ->
      Ok("DICOS Quadrupole Resonance (QR) Storage")
    "1.2.840.10008.5.1.4.1.1.6" -> Ok("Ultrasound Image Storage")
    "1.2.840.10008.5.1.4.1.1.6.1" -> Ok("Ultrasound Image Storage")
    "1.2.840.10008.5.1.4.1.1.6.2" -> Ok("Enhanced US Volume Storage")
    "1.2.840.10008.5.1.4.1.1.6.3" -> Ok("Photoacoustic Image Storage")
    "1.2.840.10008.5.1.4.1.1.601.1" -> Ok("Eddy Current Image Storage")
    "1.2.840.10008.5.1.4.1.1.601.2" ->
      Ok("Eddy Current Multi-frame Image Storage")
    "1.2.840.10008.5.1.4.1.1.66" -> Ok("Raw Data Storage")
    "1.2.840.10008.5.1.4.1.1.66.1" -> Ok("Spatial Registration Storage")
    "1.2.840.10008.5.1.4.1.1.66.2" -> Ok("Spatial Fiducials Storage")
    "1.2.840.10008.5.1.4.1.1.66.3" ->
      Ok("Deformable Spatial Registration Storage")
    "1.2.840.10008.5.1.4.1.1.66.4" -> Ok("Segmentation Storage")
    "1.2.840.10008.5.1.4.1.1.66.5" -> Ok("Surface Segmentation Storage")
    "1.2.840.10008.5.1.4.1.1.66.6" -> Ok("Tractography Results Storage")
    "1.2.840.10008.5.1.4.1.1.67" -> Ok("Real World Value Mapping Storage")
    "1.2.840.10008.5.1.4.1.1.68.1" -> Ok("Surface Scan Mesh Storage")
    "1.2.840.10008.5.1.4.1.1.68.2" -> Ok("Surface Scan Point Cloud Storage")
    "1.2.840.10008.5.1.4.1.1.7" -> Ok("Secondary Capture Image Storage")
    "1.2.840.10008.5.1.4.1.1.7.1" ->
      Ok("Multi-frame Single Bit Secondary Capture Image Storage")
    "1.2.840.10008.5.1.4.1.1.7.2" ->
      Ok("Multi-frame Grayscale Byte Secondary Capture Image Storage")
    "1.2.840.10008.5.1.4.1.1.7.3" ->
      Ok("Multi-frame Grayscale Word Secondary Capture Image Storage")
    "1.2.840.10008.5.1.4.1.1.7.4" ->
      Ok("Multi-frame True Color Secondary Capture Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1" -> Ok("VL Image Storage - Trial")
    "1.2.840.10008.5.1.4.1.1.77.1.1" -> Ok("VL Endoscopic Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.1.1" -> Ok("Video Endoscopic Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.2" -> Ok("VL Microscopic Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.2.1" -> Ok("Video Microscopic Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.3" ->
      Ok("VL Slide-Coordinates Microscopic Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.4" -> Ok("VL Photographic Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.4.1" -> Ok("Video Photographic Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.5.1" ->
      Ok("Ophthalmic Photography 8 Bit Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.5.2" ->
      Ok("Ophthalmic Photography 16 Bit Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.5.3" ->
      Ok("Stereometric Relationship Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.5.4" ->
      Ok("Ophthalmic Tomography Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.5.5" ->
      Ok(
        "Wide Field Ophthalmic Photography Stereographic Projection Image Storage",
      )
    "1.2.840.10008.5.1.4.1.1.77.1.5.6" ->
      Ok("Wide Field Ophthalmic Photography 3D Coordinates Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.5.7" ->
      Ok("Ophthalmic Optical Coherence Tomography En Face Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.5.8" ->
      Ok(
        "Ophthalmic Optical Coherence Tomography B-scan Volume Analysis Storage",
      )
    "1.2.840.10008.5.1.4.1.1.77.1.6" ->
      Ok("VL Whole Slide Microscopy Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.7" ->
      Ok("Dermoscopic Photography Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.8" -> Ok("Confocal Microscopy Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.1.9" ->
      Ok("Confocal Microscopy Tiled Pyramidal Image Storage")
    "1.2.840.10008.5.1.4.1.1.77.2" -> Ok("VL Multi-frame Image Storage - Trial")
    "1.2.840.10008.5.1.4.1.1.78.1" -> Ok("Lensometry Measurements Storage")
    "1.2.840.10008.5.1.4.1.1.78.2" -> Ok("Autorefraction Measurements Storage")
    "1.2.840.10008.5.1.4.1.1.78.3" -> Ok("Keratometry Measurements Storage")
    "1.2.840.10008.5.1.4.1.1.78.4" ->
      Ok("Subjective Refraction Measurements Storage")
    "1.2.840.10008.5.1.4.1.1.78.5" -> Ok("Visual Acuity Measurements Storage")
    "1.2.840.10008.5.1.4.1.1.78.6" ->
      Ok("Spectacle Prescription Report Storage")
    "1.2.840.10008.5.1.4.1.1.78.7" ->
      Ok("Ophthalmic Axial Measurements Storage")
    "1.2.840.10008.5.1.4.1.1.78.8" ->
      Ok("Intraocular Lens Calculations Storage")
    "1.2.840.10008.5.1.4.1.1.79.1" ->
      Ok("Macular Grid Thickness and Volume Report Storage")
    "1.2.840.10008.5.1.4.1.1.8" -> Ok("Standalone Overlay Storage")
    "1.2.840.10008.5.1.4.1.1.80.1" ->
      Ok("Ophthalmic Visual Field Static Perimetry Measurements Storage")
    "1.2.840.10008.5.1.4.1.1.81.1" -> Ok("Ophthalmic Thickness Map Storage")
    "1.2.840.10008.5.1.4.1.1.82.1" -> Ok("Corneal Topography Map Storage")
    "1.2.840.10008.5.1.4.1.1.88.1" -> Ok("Text SR Storage - Trial")
    "1.2.840.10008.5.1.4.1.1.88.11" -> Ok("Basic Text SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.2" -> Ok("Audio SR Storage - Trial")
    "1.2.840.10008.5.1.4.1.1.88.22" -> Ok("Enhanced SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.3" -> Ok("Detail SR Storage - Trial")
    "1.2.840.10008.5.1.4.1.1.88.33" -> Ok("Comprehensive SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.34" -> Ok("Comprehensive 3D SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.35" -> Ok("Extensible SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.4" -> Ok("Comprehensive SR Storage - Trial")
    "1.2.840.10008.5.1.4.1.1.88.40" -> Ok("Procedure Log Storage")
    "1.2.840.10008.5.1.4.1.1.88.50" -> Ok("Mammography CAD SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.59" ->
      Ok("Key Object Selection Document Storage")
    "1.2.840.10008.5.1.4.1.1.88.65" -> Ok("Chest CAD SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.67" -> Ok("X-Ray Radiation Dose SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.68" ->
      Ok("Radiopharmaceutical Radiation Dose SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.69" -> Ok("Colon CAD SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.70" -> Ok("Implantation Plan SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.71" -> Ok("Acquisition Context SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.72" -> Ok("Simplified Adult Echo SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.73" -> Ok("Patient Radiation Dose SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.74" ->
      Ok("Planned Imaging Agent Administration SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.75" ->
      Ok("Performed Imaging Agent Administration SR Storage")
    "1.2.840.10008.5.1.4.1.1.88.76" ->
      Ok("Enhanced X-Ray Radiation Dose SR Storage")
    "1.2.840.10008.5.1.4.1.1.9" -> Ok("Standalone Curve Storage")
    "1.2.840.10008.5.1.4.1.1.9.1" -> Ok("Waveform Storage - Trial")
    "1.2.840.10008.5.1.4.1.1.9.1.1" -> Ok("12-lead ECG Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.1.2" -> Ok("General ECG Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.1.3" -> Ok("Ambulatory ECG Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.1.4" -> Ok("General 32-bit ECG Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.2.1" -> Ok("Hemodynamic Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.3.1" ->
      Ok("Cardiac Electrophysiology Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.4.1" -> Ok("Basic Voice Audio Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.4.2" -> Ok("General Audio Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.5.1" -> Ok("Arterial Pulse Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.6.1" -> Ok("Respiratory Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.6.2" ->
      Ok("Multi-channel Respiratory Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.7.1" ->
      Ok("Routine Scalp Electroencephalogram Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.7.2" -> Ok("Electromyogram Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.7.3" -> Ok("Electrooculogram Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.7.4" ->
      Ok("Sleep Electroencephalogram Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.9.8.1" -> Ok("Body Position Waveform Storage")
    "1.2.840.10008.5.1.4.1.1.90.1" -> Ok("Content Assessment Results Storage")
    "1.2.840.10008.5.1.4.1.1.91.1" ->
      Ok("Microscopy Bulk Simple Annotations Storage")
    "1.2.840.10008.5.1.4.1.2.1.1" ->
      Ok("Patient Root Query/Retrieve Information Model - FIND")
    "1.2.840.10008.5.1.4.1.2.1.2" ->
      Ok("Patient Root Query/Retrieve Information Model - MOVE")
    "1.2.840.10008.5.1.4.1.2.1.3" ->
      Ok("Patient Root Query/Retrieve Information Model - GET")
    "1.2.840.10008.5.1.4.1.2.2.1" ->
      Ok("Study Root Query/Retrieve Information Model - FIND")
    "1.2.840.10008.5.1.4.1.2.2.2" ->
      Ok("Study Root Query/Retrieve Information Model - MOVE")
    "1.2.840.10008.5.1.4.1.2.2.3" ->
      Ok("Study Root Query/Retrieve Information Model - GET")
    "1.2.840.10008.5.1.4.1.2.3.1" ->
      Ok("Patient/Study Only Query/Retrieve Information Model - FIND")
    "1.2.840.10008.5.1.4.1.2.3.2" ->
      Ok("Patient/Study Only Query/Retrieve Information Model - MOVE")
    "1.2.840.10008.5.1.4.1.2.3.3" ->
      Ok("Patient/Study Only Query/Retrieve Information Model - GET")
    "1.2.840.10008.5.1.4.1.2.4.2" ->
      Ok("Composite Instance Root Retrieve - MOVE")
    "1.2.840.10008.5.1.4.1.2.4.3" ->
      Ok("Composite Instance Root Retrieve - GET")
    "1.2.840.10008.5.1.4.1.2.5.3" ->
      Ok("Composite Instance Retrieve Without Bulk Data - GET")
    "1.2.840.10008.5.1.4.20.1" ->
      Ok("Defined Procedure Protocol Information Model - FIND")
    "1.2.840.10008.5.1.4.20.2" ->
      Ok("Defined Procedure Protocol Information Model - MOVE")
    "1.2.840.10008.5.1.4.20.3" ->
      Ok("Defined Procedure Protocol Information Model - GET")
    "1.2.840.10008.5.1.4.31" -> Ok("Modality Worklist Information Model - FIND")
    "1.2.840.10008.5.1.4.32" ->
      Ok("General Purpose Worklist Management Meta SOP Class")
    "1.2.840.10008.5.1.4.32.1" ->
      Ok("General Purpose Worklist Information Model - FIND")
    "1.2.840.10008.5.1.4.32.2" ->
      Ok("General Purpose Scheduled Procedure Step SOP Class")
    "1.2.840.10008.5.1.4.32.3" ->
      Ok("General Purpose Performed Procedure Step SOP Class")
    "1.2.840.10008.5.1.4.33" ->
      Ok("Instance Availability Notification SOP Class")
    "1.2.840.10008.5.1.4.34.1" ->
      Ok("RT Beams Delivery Instruction Storage - Trial")
    "1.2.840.10008.5.1.4.34.10" ->
      Ok("RT Brachy Application Setup Delivery Instruction Storage")
    "1.2.840.10008.5.1.4.34.2" ->
      Ok("RT Conventional Machine Verification - Trial")
    "1.2.840.10008.5.1.4.34.3" -> Ok("RT Ion Machine Verification - Trial")
    "1.2.840.10008.5.1.4.34.4" ->
      Ok("Unified Worklist and Procedure Step Service Class - Trial")
    "1.2.840.10008.5.1.4.34.4.1" ->
      Ok("Unified Procedure Step - Push SOP Class - Trial")
    "1.2.840.10008.5.1.4.34.4.2" ->
      Ok("Unified Procedure Step - Watch SOP Class - Trial")
    "1.2.840.10008.5.1.4.34.4.3" ->
      Ok("Unified Procedure Step - Pull SOP Class - Trial")
    "1.2.840.10008.5.1.4.34.4.4" ->
      Ok("Unified Procedure Step - Event SOP Class - Trial")
    "1.2.840.10008.5.1.4.34.5" -> Ok("UPS Global Subscription SOP Instance")
    "1.2.840.10008.5.1.4.34.5.1" ->
      Ok("UPS Filtered Global Subscription SOP Instance")
    "1.2.840.10008.5.1.4.34.6" ->
      Ok("Unified Worklist and Procedure Step Service Class")
    "1.2.840.10008.5.1.4.34.6.1" ->
      Ok("Unified Procedure Step - Push SOP Class")
    "1.2.840.10008.5.1.4.34.6.2" ->
      Ok("Unified Procedure Step - Watch SOP Class")
    "1.2.840.10008.5.1.4.34.6.3" ->
      Ok("Unified Procedure Step - Pull SOP Class")
    "1.2.840.10008.5.1.4.34.6.4" ->
      Ok("Unified Procedure Step - Event SOP Class")
    "1.2.840.10008.5.1.4.34.6.5" ->
      Ok("Unified Procedure Step - Query SOP Class")
    "1.2.840.10008.5.1.4.34.7" -> Ok("RT Beams Delivery Instruction Storage")
    "1.2.840.10008.5.1.4.34.8" -> Ok("RT Conventional Machine Verification")
    "1.2.840.10008.5.1.4.34.9" -> Ok("RT Ion Machine Verification")
    "1.2.840.10008.5.1.4.37.1" ->
      Ok("General Relevant Patient Information Query")
    "1.2.840.10008.5.1.4.37.2" ->
      Ok("Breast Imaging Relevant Patient Information Query")
    "1.2.840.10008.5.1.4.37.3" ->
      Ok("Cardiac Relevant Patient Information Query")
    "1.2.840.10008.5.1.4.38.1" -> Ok("Hanging Protocol Storage")
    "1.2.840.10008.5.1.4.38.2" ->
      Ok("Hanging Protocol Information Model - FIND")
    "1.2.840.10008.5.1.4.38.3" ->
      Ok("Hanging Protocol Information Model - MOVE")
    "1.2.840.10008.5.1.4.38.4" -> Ok("Hanging Protocol Information Model - GET")
    "1.2.840.10008.5.1.4.39.1" -> Ok("Color Palette Storage")
    "1.2.840.10008.5.1.4.39.2" ->
      Ok("Color Palette Query/Retrieve Information Model - FIND")
    "1.2.840.10008.5.1.4.39.3" ->
      Ok("Color Palette Query/Retrieve Information Model - MOVE")
    "1.2.840.10008.5.1.4.39.4" ->
      Ok("Color Palette Query/Retrieve Information Model - GET")
    "1.2.840.10008.5.1.4.41" -> Ok("Product Characteristics Query SOP Class")
    "1.2.840.10008.5.1.4.42" -> Ok("Substance Approval Query SOP Class")
    "1.2.840.10008.5.1.4.43.1" -> Ok("Generic Implant Template Storage")
    "1.2.840.10008.5.1.4.43.2" ->
      Ok("Generic Implant Template Information Model - FIND")
    "1.2.840.10008.5.1.4.43.3" ->
      Ok("Generic Implant Template Information Model - MOVE")
    "1.2.840.10008.5.1.4.43.4" ->
      Ok("Generic Implant Template Information Model - GET")
    "1.2.840.10008.5.1.4.44.1" -> Ok("Implant Assembly Template Storage")
    "1.2.840.10008.5.1.4.44.2" ->
      Ok("Implant Assembly Template Information Model - FIND")
    "1.2.840.10008.5.1.4.44.3" ->
      Ok("Implant Assembly Template Information Model - MOVE")
    "1.2.840.10008.5.1.4.44.4" ->
      Ok("Implant Assembly Template Information Model - GET")
    "1.2.840.10008.5.1.4.45.1" -> Ok("Implant Template Group Storage")
    "1.2.840.10008.5.1.4.45.2" ->
      Ok("Implant Template Group Information Model - FIND")
    "1.2.840.10008.5.1.4.45.3" ->
      Ok("Implant Template Group Information Model - MOVE")
    "1.2.840.10008.5.1.4.45.4" ->
      Ok("Implant Template Group Information Model - GET")
    "1.2.840.10008.7.1.1" -> Ok("Native DICOM Model")
    "1.2.840.10008.7.1.2" -> Ok("Abstract Multi-Dimensional Image Model")
    "1.2.840.10008.8.1.1" -> Ok("DICOM Content Mapping Resource")
    _ -> Error(Nil)
  }
}
